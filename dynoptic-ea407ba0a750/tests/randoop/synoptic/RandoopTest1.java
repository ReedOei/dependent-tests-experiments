package randoop.synoptic;

import java.util.List;

import junit.framework.*;

public class RandoopTest1 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test1"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.automaton.EventTypeEncodings var68 = var67.getEventTypeEncodings();
    boolean var69 = var47.equals((java.lang.Object)var67);
    java.util.Set var70 = var67.getStates();
    java.util.Set var71 = var67.getAcceptStates();
    dynoptic.model.automaton.EventTypeEncodings var72 = var67.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var77 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var79 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var80 = var77.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var81 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var77);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var82 = var81.getObsState();
    java.lang.String var83 = var81.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var84 = var81.getObsState();
    boolean var85 = var81.isTermState();
    boolean var86 = var81.isTermState();
    boolean var87 = var81.isInitState();
    boolean var88 = var72.equals((java.lang.Object)var81);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var89 = var81.getNextState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var83.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);

  }

  public void test2() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test2"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var9 = var1.numEvents();
    boolean var10 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 0);
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, var16);
    int var18 = var16.numEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);

  }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test3"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    java.lang.String var20 = var0.beginGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    int var42 = var27.getPid();
    int var43 = var27.getScmId();
    int var44 = var27.getPid();
    java.lang.String var47 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var27, false, false);
    java.lang.String var48 = var27.toShortIntString();
    java.util.Set var49 = var27.getTransitioningEvents();
    dynoptic.model.fifosys.cfsm.CFSMState var50 = new dynoptic.model.fifosys.cfsm.CFSMState(var27);
    boolean var51 = var27.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-619850927"+ "'", var14.equals("Part-0-619850927"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "digraph {\n"+ "'", var20.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "  1 [label=\"0\",shape=circle];\n"+ "'", var47.equals("  1 [label=\"0\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "0"+ "'", var48.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test4() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test4"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    boolean var10 = var8.isEnabled();
    boolean var11 = var8.isTermState();
    int var12 = var8.getPid();
    boolean var13 = var8.hasOccurred();
    java.lang.String var14 = var8.toString();
    var8.setOccurred(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var14.equals("ObsDAGNode[i_hi!_t]"));

  }

  public void test5() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test5"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.util.Iterator var38 = var0.iterator();
    boolean var39 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);

  }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test6"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    boolean var28 = var22.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    java.util.Set var36 = var30.getTerminalObs();
    var22.removeAllObs(var36);
    dynoptic.model.automaton.EventTypeEncodings var38 = new dynoptic.model.automaton.EventTypeEncodings(var36);
    dynoptic.model.automaton.EncodedAutomaton var39 = var19.getEncodedAutomaton(var38);
    var19.minimize();
    dynoptic.model.automaton.EventTypeEncodings var41 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    java.lang.String var47 = var46.toShortIntString();
    boolean var48 = var41.equals((java.lang.Object)var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "0"+ "'", var47.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test7() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test7"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    boolean var43 = var40.isInitForPid(0);
    boolean var45 = var40.isAcceptForPid(0);
    java.util.Set var46 = var40.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test8"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    boolean var6 = var5.hasOccurred();
    boolean var7 = var5.isInitState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test9() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test9"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getStates();
    dynoptic.model.alphabet.FSMAlphabet var22 = var19.getAlphabet();
    java.util.Set var23 = var19.getAcceptStates();
    int var24 = var19.getPid();
    var19.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));

  }

  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test10"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-284291914");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-284291914"+ "'", var2.equals("Part-0-284291914"));

  }

  public void test11() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test11"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    dynoptic.model.fifosys.cfsm.fsm.FSM var32 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var18, var23, var29, 100);
    var18.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var34 = new dynoptic.model.fifosys.cfsm.CFSMState(var18);
    boolean var35 = var18.isAccept();
    boolean var36 = var18.isInitial();
    java.lang.String var39 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString((-1), (dynoptic.model.AbsFSMState)var18, true, true);
    java.lang.String var40 = var0.beginGraphString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "  -1 [label=\"0\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->-1;\n"+ "'", var39.equals("  -1 [label=\"0\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->-1;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "digraph {\n"+ "'", var40.equals("digraph {\n"));

  }

  public void test12() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test12"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var45 = var42.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var46 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var51 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var52 = var51.getName();
    boolean var53 = var42.equals((java.lang.Object)var51);
    boolean var54 = var0.contains((java.lang.Object)var42);
    dynoptic.model.alphabet.FSMAlphabet var55 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var61 = var59.getInitialObsForPid(100);
    var57.removeAllObs(var61);
    boolean var63 = var57.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var65 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var69 = var67.getInitialObsForPid(100);
    var65.removeAllObs(var69);
    java.util.Set var71 = var65.getTerminalObs();
    var57.removeAllObs(var71);
    boolean var73 = var55.retainAll((java.util.Collection)var71);
    java.lang.Object[] var75 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var76 = var55.toArray(var75);
    java.lang.Object[] var77 = var0.toArray(var75);
    dynoptic.model.alphabet.FSMAlphabet var78 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var79 = var78.toScmParametersString();
    var78.clear();
    java.lang.String var81 = var78.toString();
    boolean var82 = var0.removeAll((java.util.Collection)var78);
    java.util.Iterator var83 = var78.iterator();
    int var84 = var78.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var52.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + ""+ "'", var79.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "[]"+ "'", var81.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);

  }

  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test13"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var16 = var13.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var17 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = var17.getObsState();
    boolean var19 = var17.isEnabled();
    var17.setOccurred(false);
    var8.addRemoteDependency(var17);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var23 = var17.getObsState();
    boolean var24 = var17.hasOccurred();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var29 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var31 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var32 = var29.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var33 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var29);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var34 = var33.getObsState();
    java.lang.String var35 = var33.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var36 = var33.getObsState();
    boolean var37 = var33.isTermState();
    boolean var38 = var33.isTermState();
    boolean var39 = var33.isInitState();
    var17.addRemoteDependency(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var35.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);

  }

  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test14"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(0);
    var1.recreateCachedTransitions();
    var1.recreateCachedTransitions();
    java.util.Set var4 = var1.getTerminalObs();
    java.util.Set var5 = var1.getInitialObservations();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test15"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = var40.getFSMState(0);
    dynoptic.model.fifosys.cfsm.CFSMState var44 = new dynoptic.model.fifosys.cfsm.CFSMState(var43);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = var44.getFSMState(1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test16"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    int var42 = var27.getPid();
    int var43 = var27.getScmId();
    int var44 = var27.getPid();
    boolean var45 = var19.equals((java.lang.Object)var44);
    java.lang.String var46 = var19.toString();
    java.util.Set var47 = var19.getStates();
    dynoptic.model.automaton.EventTypeEncodings var48 = var19.getEventTypeEncodings();
    java.util.Set var49 = var19.getStates();
    boolean var51 = var19.equals((java.lang.Object)"FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var46.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test17"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath(var21, (-1));
    boolean var24 = var17.equals((java.lang.Object)var21);
    java.util.Set var25 = var21.getTerminalObs();
    java.util.Set var26 = var21.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var28 = new dynoptic.model.fifosys.gfsm.GFSMPath(var21, 1);
    java.lang.String var29 = var28.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "GFSMPath : []"+ "'", var29.equals("GFSMPath : []"));

  }

  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test18"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    java.lang.String var21 = var11.toShortIntString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (-1), 1);
    java.lang.String var27 = var26.toShortIntString();
    java.util.Set var28 = var26.getNextStates();
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    boolean var36 = var30.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    java.util.Set var44 = var38.getTerminalObs();
    var30.removeAllObs(var44);
    dynoptic.model.automaton.EventTypeEncodings var46 = new dynoptic.model.automaton.EventTypeEncodings(var44);
    boolean var48 = var46.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var52 = new dynoptic.model.fifosys.gfsm.GFSMPath(var50, (-1));
    boolean var53 = var46.equals((java.lang.Object)var50);
    java.util.Set var54 = var50.getTerminalObs();
    dynoptic.model.fifosys.cfsm.fsm.FSM var56 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var11, var26, var54, 100);
    java.lang.String var57 = var26.toShortIntString();
    boolean var58 = var26.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "0"+ "'", var21.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "1"+ "'", var27.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "1"+ "'", var57.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);

  }

  public void test19() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test19"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(0, "4", false, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test20() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test20"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-220385979");

  }

  public void test21() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test21"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.util.Iterator var38 = var0.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var41 = var40.toIntermediateString();
    boolean var42 = var40.isAccept();
    java.util.Set var44 = var40.getInitialObsForPid(10);
    boolean var45 = var0.addAll((java.util.Collection)var44);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var56 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    dynoptic.model.fifosys.cfsm.fsm.FSM var65 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var51, var56, var62, 100);
    int var66 = var65.getPid();
    java.util.Set var67 = var65.getAcceptStates();
    dynoptic.model.alphabet.FSMAlphabet var68 = var65.getAlphabet();
    java.lang.String var69 = var68.anyEventScmQRe();
    java.lang.Object[] var70 = var68.toArray();
    java.lang.Object[] var71 = var68.toArray();
    java.lang.Object[] var72 = var0.toArray(var71);
    dynoptic.model.automaton.EventTypeEncodings var73 = new dynoptic.model.automaton.EventTypeEncodings((java.util.Set)var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var75 = var73.getEventType('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "Part-0-1410979531"+ "'", var41.equals("Part-0-1410979531"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(_)"+ "'", var69.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test22() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test22"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.automaton.EventTypeEncodings var68 = var67.getEventTypeEncodings();
    boolean var69 = var47.equals((java.lang.Object)var67);
    java.util.Set var70 = var67.getStates();
    java.util.Set var71 = var67.getAcceptStates();
    java.util.Set var72 = var67.getStates();
    boolean var73 = var67.isDeterministic();
    java.util.Set var74 = var67.getAcceptStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test23() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test23"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var16 = var13.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var17 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = var17.getObsState();
    boolean var19 = var17.isEnabled();
    var17.setOccurred(false);
    var8.addRemoteDependency(var17);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var23 = var17.getObsState();
    dynoptic.model.export.DotExportFormatter var24 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var25 = var24.beginGraphString();
    java.lang.String var26 = var24.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    java.lang.String var34 = var24.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var29, true, false);
    java.lang.String var35 = var24.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var39 = var38.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var41 = new dynoptic.model.fifosys.gfsm.GFSMPath(var38, 1);
    java.lang.String var44 = var24.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var38, false, true);
    java.util.Set var46 = var38.getTerminalObsForPid(100);
    boolean var47 = var23.equals((java.lang.Object)var46);
    var23.markTerm();
    var23.markTerm();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "digraph {\n"+ "'", var25.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "digraph {\n"+ "'", var26.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var34.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "digraph {\n"+ "'", var35.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Part-0-424942459"+ "'", var39.equals("Part-0-424942459"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var44.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test24() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test24"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    java.util.Iterator var39 = var0.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var42 = var41.toIntermediateString();
    boolean var43 = var41.isAccept();
    boolean var44 = var0.contains((java.lang.Object)var43);
    dynoptic.model.automaton.EventTypeEncodings var45 = new dynoptic.model.automaton.EventTypeEncodings((java.util.Set)var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var47 = var45.getEventType('a');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Part-0-6749559"+ "'", var42.equals("Part-0-6749559"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test25"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var9);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var12 = var9.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test26() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test26"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var37 = var35.getInitialObsForPid(100);
    var33.removeAllObs(var37);
    dynoptic.model.fifosys.cfsm.fsm.FSM var40 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var26, var31, var37, 100);
    int var41 = var40.getPid();
    java.util.Set var42 = var40.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSM var62 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var48, var53, var59, 100);
    int var63 = var48.getPid();
    int var64 = var48.getScmId();
    int var65 = var48.getPid();
    boolean var66 = var40.equals((java.lang.Object)var65);
    java.lang.String var67 = var40.toString();
    java.util.Set var68 = var40.getStates();
    dynoptic.model.automaton.EncodedAutomaton var69 = new dynoptic.model.automaton.EncodedAutomaton(var20, var40);
    var69.minimize();
    dk.brics.automaton.Automaton var71 = var69.getAutomaton();
    dk.brics.automaton.Automaton var72 = var69.getAutomaton();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var67.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test27"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    java.lang.String var36 = var11.toLongString();
    java.lang.String var37 = var11.toLongString();
    java.lang.String var38 = var11.toString();
    java.util.Set var39 = var11.getNextStates();
    java.lang.String var40 = var11.toShortIntString();
    var11.setAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var36.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var37.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "0"+ "'", var38.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "0"+ "'", var40.equals("0"));

  }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test28"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var9 = var1.numEvents();
    boolean var10 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 0);
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, var16);
    java.lang.String var18 = var17.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "GFSMPath : []"+ "'", var18.equals("GFSMPath : []"));

  }

  public void test29() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test29"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    java.lang.String var37 = var12.toLongString();
    java.lang.String var38 = var12.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var44.getPid();
    int var60 = var44.getScmId();
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var64 = var62.getTerminalObsForPid(1);
    dynoptic.model.fifosys.cfsm.fsm.FSM var66 = new dynoptic.model.fifosys.cfsm.fsm.FSM(0, var12, var44, var64, 10);
    java.util.Set var67 = var44.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var37.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var38.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test30() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test30"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    java.util.Iterator var39 = var0.iterator();
    java.lang.String var40 = var0.toScmParametersString();
    boolean var41 = var0.isEmpty();
    dynoptic.model.automaton.EventTypeEncodings var42 = new dynoptic.model.automaton.EventTypeEncodings((java.util.Set)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);

  }

  public void test31() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test31"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    boolean var42 = var40.isInitial();
    boolean var43 = var40.isAccept();
    boolean var44 = var40.isInitial();
    java.util.Set var45 = var40.getTransitioningEvents();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var47 = var40.isInitForPid(1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test32"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    boolean var7 = var5.hasOccurred();
    boolean var8 = var5.isInitState();
    boolean var9 = var5.hasOccurred();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var10 = var5.getPrevState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var11 = var5.getPrevState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var12 = var5.getPrevState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test33"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    java.lang.String var36 = var11.toLongString();
    int var37 = var11.getScmId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var36.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);

  }

  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test34"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getInitStates();
    java.util.Set var22 = var19.getStates();
    java.lang.String var23 = var19.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var23.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));

  }

  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test35"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    var1.removeAllObs(var23);
    java.util.Set var29 = var1.getInitialObsForPid((-1));
    boolean var30 = var1.isAccept();
    int var31 = var1.getNumProcesses();
    java.lang.String var32 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));

  }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test36"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.util.Set var5 = var1.getInitialObsForPid(1);
    java.util.Set var6 = var1.getInitialObservations();
    int var7 = var1.getNumProcesses();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var10 = var9.toIntermediateString();
    boolean var11 = var9.isAccept();
    java.util.Set var13 = var9.getInitialObsForPid(10);
    java.util.Set var15 = var9.getTerminalObsForPid(0);
    dynoptic.model.export.DotExportFormatter var16 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var17 = var16.beginGraphString();
    java.lang.String var18 = var16.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    java.lang.String var26 = var16.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var21, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var30 = var29.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var32 = new dynoptic.model.fifosys.gfsm.GFSMPath(var29, 1);
    java.lang.String var35 = var16.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var29, true, true);
    java.lang.String var36 = var29.toString();
    java.util.Set var37 = var29.getTerminalObs();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findTransitiveClosure((dynoptic.model.AbsFSMState)var1, var15, var37);
    boolean var39 = var1.isAccept();
    dynoptic.model.alphabet.FSMAlphabet var40 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var41 = var40.toScmParametersString();
    java.lang.Object[] var42 = var40.toArray();
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    java.lang.String var48 = var45.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.alphabet.FSMAlphabet var56 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    boolean var64 = var58.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var70 = var68.getInitialObsForPid(100);
    var66.removeAllObs(var70);
    java.util.Set var72 = var66.getTerminalObs();
    var58.removeAllObs(var72);
    boolean var74 = var56.retainAll((java.util.Collection)var72);
    java.lang.Object[] var76 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var77 = var56.toArray(var76);
    java.lang.Object[] var78 = var56.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var45, var54, (java.util.Set)var56);
    boolean var80 = var40.removeAll((java.util.Collection)var54);
    java.lang.String var81 = var40.anyEventScmQRe();
    var1.removeAllObs((java.util.Set)var40);
    java.util.Set var83 = var40.getLocalEventScmStrings();
    java.util.Set var84 = var40.getLocalEventScmStrings();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Part-0-864400802"+ "'", var10.equals("Part-0-864400802"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "digraph {\n"+ "'", var17.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "digraph {\n"+ "'", var18.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var26.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Part-0-1261582914"+ "'", var30.equals("Part-0-1261582914"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var35.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "[]"+ "'", var36.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + ""+ "'", var41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(_)"+ "'", var81.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test37"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    java.lang.Object[] var2 = var0.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var8 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, (-1));
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    var21.removeAllObs(var25);
    dynoptic.model.fifosys.cfsm.fsm.FSM var28 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var14, var19, var25, 100);
    int var29 = var14.getPid();
    int var30 = var14.getScmId();
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    dynoptic.model.fifosys.cfsm.fsm.FSM var36 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var8, var14, var34, 0);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.util.Set var38 = var0.getLocalEventScmStrings();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test38"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var11 = var4.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test39"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("  -1 [label=\"0\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->-1;\n");

  }

  public void test40() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test40"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    java.lang.Object[] var2 = var0.toArray();
    boolean var3 = var0.isEmpty();
    var0.clear();
    dynoptic.model.alphabet.FSMAlphabet var5 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var17, var32, var39);
    boolean var42 = var5.retainAll((java.util.Collection)var39);
    java.lang.Object[] var43 = var5.toArray();
    boolean var44 = var0.remove((java.lang.Object)var5);
    java.lang.String var45 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "[]"+ "'", var45.equals("[]"));

  }

  public void test41() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test41"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var3 = var1.getTerminalObsForPid(1);
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var7 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var9 = var7.getInitialObsForPid(100);
    var5.removeAllObs(var9);
    boolean var11 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    java.util.Set var19 = var13.getTerminalObs();
    var5.removeAllObs(var19);
    java.util.Set var21 = var5.getTransitioningEvents();
    var1.addAllObs(var21);
    int var23 = var1.getNumProcesses();
    java.util.Set var25 = var1.getTerminalObsForPid(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test42"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-2099862703");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-2099862703"+ "'", var2.equals("Part-0-2099862703"));

  }

  public void test43() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test43"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    var0.clear();
    java.lang.String var3 = var0.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var8 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var11 = var8.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var12 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var8);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var17 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var19 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var20 = var17.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var21 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var17);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var22 = var21.getObsState();
    boolean var23 = var21.isEnabled();
    var21.setOccurred(false);
    var12.addRemoteDependency(var21);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var27 = var21.getObsState();
    boolean var28 = var0.remove((java.lang.Object)var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(1);
    java.lang.String var31 = var30.toLongString();
    java.util.Set var33 = var30.getTerminalObsForPid(1);
    boolean var34 = var0.containsAll((java.util.Collection)var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);

  }

  public void test44() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test44"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    java.lang.String var36 = var11.toLongString();
    java.lang.String var37 = var11.toLongString();
    int var38 = var11.getPid();
    dynoptic.model.fifosys.cfsm.CFSMState var39 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var40 = var39.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var36.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var37.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);

  }

  public void test45() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test45"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var58.getPid();
    java.util.Set var60 = var58.getAcceptStates();
    boolean var61 = var0.retainAll((java.util.Collection)var60);
    boolean var62 = var0.isEmpty();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var68 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var79 = var77.getInitialObsForPid(100);
    var75.removeAllObs(var79);
    dynoptic.model.fifosys.cfsm.fsm.FSM var82 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var68, var73, var79, 100);
    boolean var83 = var0.remove((java.lang.Object)var73);
    java.lang.String var84 = var0.anyEventScmQRe();
    boolean var85 = var0.isEmpty();
    java.lang.String var86 = var0.toString();
    java.lang.String var87 = var0.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var92 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var93 = var92.getName();
    boolean var94 = var0.remove((java.lang.Object)var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "(_)"+ "'", var84.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "[]"+ "'", var86.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "[]"+ "'", var87.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var93.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test46() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test46"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.automaton.EventTypeEncodings var68 = var67.getEventTypeEncodings();
    boolean var69 = var47.equals((java.lang.Object)var67);
    java.util.Set var70 = var67.getStates();
    java.util.Set var71 = var67.getAcceptStates();
    java.util.Set var72 = var67.getStates();
    boolean var73 = var67.isDeterministic();
    java.util.Set var74 = var67.getStates();
    dynoptic.model.automaton.EventTypeEncodings var75 = var67.getEventTypeEncodings();
    dynoptic.model.automaton.EventTypeEncodings var76 = var67.getEventTypeEncodings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var78 = var76.getEventType('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test47() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test47"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    java.util.Set var8 = var2.getTerminalObs();
    int var9 = var2.getNumProcesses();
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    java.util.Set var14 = var11.getTransitioningEvents();
    java.util.Set var15 = var11.getInitialObservations();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var21 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.cfsm.fsm.FSM var35 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var21, var26, var32, 100);
    dynoptic.model.automaton.EventTypeEncodings var36 = var35.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var41 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var42 = var36.equals((java.lang.Object)true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSM var62 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var48, var53, var59, 100);
    int var63 = var48.getPid();
    java.lang.String var64 = var48.toLongString();
    boolean var65 = var36.equals((java.lang.Object)var64);
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var69 = var67.getInitialObsForPid(100);
    java.util.Set var70 = var67.getTransitioningEvents();
    boolean var71 = var36.equals((java.lang.Object)var70);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(1, (dynoptic.model.AbsFSMState)var2, var15, var70);
    dynoptic.model.fifosys.gfsm.GFSMPath var74 = new dynoptic.model.fifosys.gfsm.GFSMPath(var2, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var75 = var74.lastState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var64.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test48"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var58.getPid();
    java.util.Set var60 = var58.getAcceptStates();
    boolean var61 = var0.retainAll((java.util.Collection)var60);
    boolean var62 = var0.isEmpty();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var68 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var79 = var77.getInitialObsForPid(100);
    var75.removeAllObs(var79);
    dynoptic.model.fifosys.cfsm.fsm.FSM var82 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var68, var73, var79, 100);
    boolean var83 = var0.remove((java.lang.Object)var73);
    java.lang.String var84 = var0.anyEventScmQRe();
    boolean var85 = var0.isEmpty();
    java.util.Set var86 = var0.getLocalEventScmStrings();
    java.lang.String var87 = var0.anyEventScmQRe();
    java.util.Set var88 = var0.getLocalEventScmStrings();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "(_)"+ "'", var84.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "(_)"+ "'", var87.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test49() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test49"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("Part-0-680375148");

  }

  public void test50() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test50"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var45 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var50 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.cfsm.fsm.FSM var59 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var45, var50, var56, 100);
    dynoptic.model.automaton.EventTypeEncodings var60 = var59.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var65 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var66 = var60.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var67 = var39.getEncodedAutomaton(var60);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var78 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var82 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var84 = var82.getInitialObsForPid(100);
    var80.removeAllObs(var84);
    dynoptic.model.fifosys.cfsm.fsm.FSM var87 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var73, var78, var84, 100);
    dynoptic.model.automaton.EventTypeEncodings var88 = var87.getEventTypeEncodings();
    boolean var89 = var67.equals((java.lang.Object)var87);
    dynoptic.model.automaton.EncodedAutomaton var90 = new dynoptic.model.automaton.EncodedAutomaton(var17, var87);
    boolean var91 = var87.isDeterministic();
    java.lang.String var92 = var87.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var92.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));

  }

  public void test51() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test51"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-1993770325");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-1993770325"+ "'", var2.equals("Part-0-1993770325"));

  }

  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test52"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 1, 10);
    dynoptic.model.fifosys.gfsm.GFSMState var7 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var9 = var7.getInitialObsForPid(100);
    java.lang.String var10 = var7.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.alphabet.FSMAlphabet var18 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var24 = var22.getInitialObsForPid(100);
    var20.removeAllObs(var24);
    boolean var26 = var20.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    java.util.Set var34 = var28.getTerminalObs();
    var20.removeAllObs(var34);
    boolean var36 = var18.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var39 = var18.toArray(var38);
    java.lang.Object[] var40 = var18.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var7, var16, (java.util.Set)var18);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    boolean var49 = var43.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    java.util.Set var57 = var51.getTerminalObs();
    var43.removeAllObs(var57);
    dynoptic.model.automaton.EventTypeEncodings var59 = new dynoptic.model.automaton.EventTypeEncodings(var57);
    boolean var60 = var18.addAll((java.util.Collection)var57);
    boolean var61 = var18.isEmpty();
    dynoptic.model.fifosys.gfsm.GFSMState var63 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var65 = var63.getTerminalObsForPid(1);
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var69 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var71 = var69.getInitialObsForPid(100);
    var67.removeAllObs(var71);
    boolean var73 = var67.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var79 = var77.getInitialObsForPid(100);
    var75.removeAllObs(var79);
    java.util.Set var81 = var75.getTerminalObs();
    var67.removeAllObs(var81);
    java.util.Set var83 = var67.getTransitioningEvents();
    var63.addAllObs(var83);
    java.util.Set var85 = var63.getObservedStates();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findTransitiveClosure((dynoptic.model.AbsFSMState)var4, (java.util.Set)var18, var85);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test53"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    boolean var42 = var40.isInitial();
    boolean var43 = var40.isAccept();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.cfsm.fsm.FSMState var45 = var40.getFSMState((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);

  }

  public void test54() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test54"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var2 = var1.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 1);
    java.util.Set var5 = var1.getInitialObservations();
    java.util.Set var6 = var1.getTransitioningEvents();
    java.util.Set var7 = var1.getTerminalObs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-1061342354"+ "'", var2.equals("Part-0-1061342354"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test55() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test55"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var4 = var2.getInitialObsForPid(100);
    boolean var5 = var2.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var2, 10);
    dynoptic.model.alphabet.FSMAlphabet var8 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    boolean var16 = var10.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    java.util.Set var24 = var18.getTerminalObs();
    var10.removeAllObs(var24);
    boolean var26 = var8.retainAll((java.util.Collection)var24);
    java.lang.String var27 = var8.toString();
    var2.addAllObs((java.util.Set)var8);
    dynoptic.model.alphabet.FSMAlphabet var29 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var41 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.cfsm.fsm.FSM var50 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var36, var41, var47, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var41, var56, var63);
    boolean var66 = var29.retainAll((java.util.Collection)var63);
    int var67 = var29.size();
    boolean var68 = var8.retainAll((java.util.Collection)var29);
    java.lang.String var69 = var29.toScmParametersString();
    java.lang.String var70 = var29.anyEventScmQRe();
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(0, (java.util.Set)var29);
    java.lang.String var72 = var71.toLongString();
    java.util.Set var73 = var71.getObservedStates();
    
    // Checks the contract:  equals-hashcode on var4 and var73
    assertTrue("Contract failed: equals-hashcode on var4 and var73", var4.equals(var73) ? var4.hashCode() == var73.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var14 and var73
    assertTrue("Contract failed: equals-hashcode on var14 and var73", var14.equals(var73) ? var14.hashCode() == var73.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var22 and var73
    assertTrue("Contract failed: equals-hashcode on var22 and var73", var22.equals(var73) ? var22.hashCode() == var73.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var24 and var73
    assertTrue("Contract failed: equals-hashcode on var24 and var73", var24.equals(var73) ? var24.hashCode() == var73.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var47 and var73
    assertTrue("Contract failed: equals-hashcode on var47 and var73", var47.equals(var73) ? var47.hashCode() == var73.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var63 and var73
    assertTrue("Contract failed: equals-hashcode on var63 and var73", var63.equals(var73) ? var63.hashCode() == var73.hashCode() : true);
    
    // This assertion (symmetry of equals) fails 
    assertTrue("Contract failed: equals-symmetric on var4 and var73.", var4.equals(var73) == var73.equals(var4));
    
    // This assertion (symmetry of equals) fails 
    assertTrue("Contract failed: equals-symmetric on var14 and var73.", var14.equals(var73) == var73.equals(var14));
    
    // This assertion (symmetry of equals) fails 
    assertTrue("Contract failed: equals-symmetric on var22 and var73.", var22.equals(var73) == var73.equals(var22));
    
    // This assertion (symmetry of equals) fails 
    assertTrue("Contract failed: equals-symmetric on var24 and var73.", var24.equals(var73) == var73.equals(var24));
    
    // This assertion (symmetry of equals) fails 
    assertTrue("Contract failed: equals-symmetric on var47 and var73.", var47.equals(var73) == var73.equals(var47));
    
    // This assertion (symmetry of equals) fails 
    assertTrue("Contract failed: equals-symmetric on var63 and var73.", var63.equals(var73) == var73.equals(var63));

  }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test56"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var11);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, var15);
    boolean var17 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var19 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath(var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var21 = var20.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test57() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test57"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var25 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var26 = var20.equals((java.lang.Object)true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    dynoptic.model.fifosys.cfsm.fsm.FSM var46 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var32, var37, var43, 100);
    int var47 = var32.getPid();
    java.lang.String var48 = var32.toLongString();
    boolean var49 = var20.equals((java.lang.Object)var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var51 = var20.getEventType('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var48.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test58"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-643247587");

  }

  public void test59() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test59"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var8 = var7.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var7);
    boolean var10 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test60"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    java.lang.String var5 = var4.toShortIntString();
    var4.setAccept();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var14 = var11.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var15 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var11);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var16 = var15.getObsState();
    java.lang.String var17 = var15.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = var15.getObsState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var19 = var15.getObsState();
    boolean var20 = var4.equals((java.lang.Object)var19);
    java.lang.String var21 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "0"+ "'", var5.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var17.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "0"+ "'", var21.equals("0"));

  }

  public void test61() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test61"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var58.getPid();
    java.util.Set var60 = var58.getAcceptStates();
    boolean var61 = var0.retainAll((java.util.Collection)var60);
    boolean var62 = var0.isEmpty();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var68 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var79 = var77.getInitialObsForPid(100);
    var75.removeAllObs(var79);
    dynoptic.model.fifosys.cfsm.fsm.FSM var82 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var68, var73, var79, 100);
    boolean var83 = var0.remove((java.lang.Object)var73);
    java.lang.String var84 = var0.anyEventScmQRe();
    boolean var85 = var0.isEmpty();
    java.lang.String var86 = var0.toString();
    boolean var87 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "(_)"+ "'", var84.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "[]"+ "'", var86.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);

  }

  public void test62() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test62"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var9);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var12 = var9.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test63() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test63"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    java.lang.String var7 = var4.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    dynoptic.model.alphabet.FSMAlphabet var15 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var21 = var19.getInitialObsForPid(100);
    var17.removeAllObs(var21);
    boolean var23 = var17.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    java.util.Set var31 = var25.getTerminalObs();
    var17.removeAllObs(var31);
    boolean var33 = var15.retainAll((java.util.Collection)var31);
    java.lang.Object[] var35 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var36 = var15.toArray(var35);
    java.lang.Object[] var37 = var15.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var4, var13, (java.util.Set)var15);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    boolean var46 = var40.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var52 = var50.getInitialObsForPid(100);
    var48.removeAllObs(var52);
    java.util.Set var54 = var48.getTerminalObs();
    var40.removeAllObs(var54);
    dynoptic.model.automaton.EventTypeEncodings var56 = new dynoptic.model.automaton.EventTypeEncodings(var54);
    boolean var57 = var15.addAll((java.util.Collection)var54);
    var1.removeAllObs((java.util.Set)var15);
    java.lang.Object[] var59 = var15.toArray();
    dynoptic.model.alphabet.FSMAlphabet var60 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var61 = var60.toScmParametersString();
    var60.clear();
    java.lang.String var63 = var60.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var68 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var70 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var71 = var68.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var72 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var68);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var77 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var79 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var80 = var77.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var81 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var77);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var82 = var81.getObsState();
    boolean var83 = var81.isEnabled();
    var81.setOccurred(false);
    var72.addRemoteDependency(var81);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var87 = var81.getObsState();
    boolean var88 = var60.remove((java.lang.Object)var87);
    boolean var89 = var15.remove((java.lang.Object)var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[]"+ "'", var7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + ""+ "'", var61.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "[]"+ "'", var63.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test64() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test64"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.automaton.EventTypeEncodings var68 = var67.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var69 = new dynoptic.model.automaton.EncodedAutomaton(var40, var67);
    dynoptic.model.alphabet.FSMAlphabet var70 = var67.getAlphabet();
    int var71 = var70.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);

  }

  public void test65() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test65"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    int var21 = var5.getScmId();
    int var22 = var5.getPid();
    dynoptic.model.fifosys.cfsm.CFSMState var23 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var25 = var23.isAcceptForPid(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);

  }

  public void test66() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test66"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getStates();
    java.lang.String var22 = var19.toString();
    int var23 = var19.getPid();
    java.lang.String var24 = var19.toString();
    java.util.Set var25 = var19.getAcceptStates();
    dynoptic.model.automaton.EventTypeEncodings var26 = var19.getEventTypeEncodings();
    dynoptic.model.automaton.EventTypeEncodings var27 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.cfsm.fsm.FSM var47 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var33, var38, var44, 100);
    java.util.Set var48 = var47.getAcceptStates();
    java.util.Set var49 = var47.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    dynoptic.model.automaton.EventTypeEncodings var70 = var69.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var71 = var47.getEncodedAutomaton(var70);
    int var72 = var47.getPid();
    var47.minimize();
    java.util.Set var74 = var47.getStates();
    dynoptic.model.automaton.EncodedAutomaton var75 = new dynoptic.model.automaton.EncodedAutomaton(var27, var47);
    var75.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var22.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var24.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test67"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(100, true, false);
    int var4 = var3.getPid();
    boolean var5 = var3.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test68() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test68"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(0);
    var3.recreateCachedTransitions();
    var3.recreateCachedTransitions();
    java.util.Set var6 = var3.getTerminalObs();
    java.lang.String var9 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString((-1), (dynoptic.model.AbsFSMState)var3, true, false);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var21 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.cfsm.fsm.FSM var30 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var16, var21, var27, 100);
    int var31 = var16.getPid();
    java.lang.String var32 = var16.toLongString();
    java.util.Set var33 = var16.getTransitioningEvents();
    int var34 = var16.getScmId();
    java.lang.String var37 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(10, (dynoptic.model.AbsFSMState)var16, true, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "  -1 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->-1;\n"+ "'", var9.equals("  -1 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->-1;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var32.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "  10 [label=\"0\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->10;\n"+ "'", var37.equals("  10 [label=\"0\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->10;\n"));

  }

  public void test69() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test69"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    boolean var8 = var1.isAccept();
    java.util.Set var10 = var1.getInitialObsForPid(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test70() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test70"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var25 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var26 = var20.equals((java.lang.Object)true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    dynoptic.model.fifosys.cfsm.fsm.FSM var46 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var32, var37, var43, 100);
    int var47 = var32.getPid();
    java.lang.String var48 = var32.toLongString();
    boolean var49 = var20.equals((java.lang.Object)var48);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var53 = var51.getInitialObsForPid(100);
    java.util.Set var54 = var51.getTransitioningEvents();
    boolean var55 = var20.equals((java.lang.Object)var54);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var61 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var66 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var70 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var72 = var70.getInitialObsForPid(100);
    var68.removeAllObs(var72);
    dynoptic.model.fifosys.cfsm.fsm.FSM var75 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var61, var66, var72, 100);
    java.util.Set var76 = var75.getAcceptStates();
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var82 = var80.getInitialObsForPid(100);
    var78.removeAllObs(var82);
    boolean var84 = var78.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var88 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var90 = var88.getInitialObsForPid(100);
    var86.removeAllObs(var90);
    java.util.Set var92 = var86.getTerminalObs();
    var78.removeAllObs(var92);
    dynoptic.model.automaton.EventTypeEncodings var94 = new dynoptic.model.automaton.EventTypeEncodings(var92);
    dynoptic.model.automaton.EncodedAutomaton var95 = var75.getEncodedAutomaton(var94);
    dynoptic.model.automaton.EncodedAutomaton var96 = new dynoptic.model.automaton.EncodedAutomaton(var20, var75);
    var96.minimize();
    dk.brics.automaton.Automaton var98 = var96.getAutomaton();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var48.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test71() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test71"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(10, false, false);
    var3.markTerm();
    int var5 = var3.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 10);

  }

  public void test72() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test72"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.lang.String var4 = var1.toLongString();
    java.lang.String var5 = var1.toIntermediateString();
    var1.recreateCachedTransitions();
    java.util.Set var7 = var1.getObservedStates();
    java.lang.String var8 = var1.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Part-0-581266109"+ "'", var5.equals("Part-0-581266109"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));

  }

  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test73"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("Part-0-2003307528");

  }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test74"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    boolean var7 = var5.hasOccurred();
    int var8 = var5.getPid();
    boolean var9 = var5.isInitState();
    boolean var10 = var5.isTermState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test75() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test75"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(1);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var2 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var1);
    boolean var3 = var2.isInitState();
    synoptic.model.event.Event var4 = var2.getNextEvent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test76"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var6 = var5.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    int var27 = var12.getPid();
    int var28 = var12.getScmId();
    dynoptic.model.alphabet.FSMAlphabet var29 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var41 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.cfsm.fsm.FSM var50 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var36, var41, var47, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var41, var56, var63);
    boolean var66 = var29.retainAll((java.util.Collection)var63);
    java.lang.String var67 = var29.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var12, (java.util.Set)var29, 1);
    boolean var70 = var5.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[]"+ "'", var67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test77"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    java.lang.String var21 = var5.toLongString();
    java.util.Set var22 = var5.getTransitioningEvents();
    int var23 = var5.getScmId();
    dynoptic.model.fifosys.cfsm.CFSMState var24 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    boolean var25 = var24.isAccept();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var27 = var24.isAcceptForPid(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var21.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test78() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test78"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState((-1));
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "i_a-1"+ "'", var2.equals("i_a-1"));

  }

  public void test79() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test79"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    java.util.Set var8 = var2.getTerminalObs();
    java.util.Set var10 = var2.getInitialObsForPid(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10, var10);
    int var12 = var11.getNumProcesses();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 10);

  }

  public void test80() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test80"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var58.getPid();
    java.util.Set var60 = var58.getAcceptStates();
    boolean var61 = var0.retainAll((java.util.Collection)var60);
    boolean var62 = var0.isEmpty();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var68 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var79 = var77.getInitialObsForPid(100);
    var75.removeAllObs(var79);
    dynoptic.model.fifosys.cfsm.fsm.FSM var82 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var68, var73, var79, 100);
    boolean var83 = var0.remove((java.lang.Object)var73);
    java.lang.String var84 = var0.anyEventScmQRe();
    java.lang.String var85 = var0.anyEventScmQRe();
    java.util.Iterator var86 = var0.iterator();
    java.util.Set var87 = var0.getLocalEventScmStrings();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "(_)"+ "'", var84.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "(_)"+ "'", var85.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test81"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getStates();
    java.util.Set var22 = var19.getStates();
    java.util.Set var23 = var19.getAcceptStates();
    java.util.Set var24 = var19.getInitStates();
    dynoptic.model.alphabet.FSMAlphabet var25 = var19.getAlphabet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test82"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var9);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var12 = var11.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test83"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var58.getPid();
    java.util.Set var60 = var58.getAcceptStates();
    boolean var61 = var0.retainAll((java.util.Collection)var60);
    boolean var62 = var0.isEmpty();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var68 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var79 = var77.getInitialObsForPid(100);
    var75.removeAllObs(var79);
    dynoptic.model.fifosys.cfsm.fsm.FSM var82 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var68, var73, var79, 100);
    boolean var83 = var0.remove((java.lang.Object)var73);
    boolean var84 = var0.isEmpty();
    boolean var85 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);

  }

  public void test84() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test84"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(0, "Part-0-761593121", false, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test85() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test85"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var8.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = var8.getObsState();
    boolean var12 = var8.isTermState();
    boolean var13 = var8.isTermState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var14 = var8.getNextState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var15 = var8.getObsState();
    synoptic.model.event.Event var16 = var8.getNextEvent();
    boolean var17 = var8.isInitState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test86() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test86"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-920447092");

  }

  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test87"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    boolean var7 = var5.hasOccurred();
    boolean var8 = var5.isInitState();
    boolean var9 = var5.hasOccurred();
    java.lang.String var10 = var5.toString();
    boolean var11 = var5.hasOccurred();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var16 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var19 = var16.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var20 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var16);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var25 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var26 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var25);
    java.lang.String var27 = var26.toString();
    boolean var28 = var26.hasOccurred();
    int var29 = var26.getPid();
    boolean var30 = var26.isInitState();
    var20.addRemoteDependency(var26);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var36 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var38 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var39 = var36.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var40 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var36);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var47 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var48 = var45.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var49 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var45);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var50 = var49.getObsState();
    boolean var51 = var49.isEnabled();
    var49.setOccurred(false);
    var40.addRemoteDependency(var49);
    synoptic.model.event.Event var55 = var49.getNextEvent();
    synoptic.model.event.Event var56 = var49.getNextEvent();
    var20.addRemoteDependency(var49);
    synoptic.model.event.Event var58 = var20.getNextEvent();
    var5.addRemoteDependency(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var27.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);

  }

  public void test88() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test88"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var17);
    java.util.Set var23 = var21.getInitialObsForPid(1);
    java.lang.String var24 = var21.toString();
    java.util.Set var25 = var21.getInitialObservations();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test89() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test89"); }


    dynoptic.model.alphabet.FSMAlphabet var1 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(1, (java.util.Set)var1);
    java.lang.String var3 = var2.toString();
    boolean var5 = var2.isAcceptForPid(0);
    var2.recreateCachedTransitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test90"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(10, false, false);
    java.lang.String var4 = var3.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "65"+ "'", var4.equals("65"));

  }

  public void test91() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test91"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    synoptic.model.event.Event var6 = var5.getNextEvent();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var7 = var5.getObsState();
    boolean var8 = var5.hasOccurred();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var9 = var5.getNextState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var10 = var5.getNextState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test92() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test92"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(0);
    java.lang.String var2 = var1.toLongString();
    boolean var4 = var1.isInitForPid((-1));
    boolean var6 = var1.isInitForPid(1);
    java.util.Set var8 = var1.getTerminalObsForPid(10);
    boolean var10 = var1.isAcceptForPid((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]_i_t"+ "'", var2.equals("[]_i_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test93() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test93"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath(var21, (-1));
    boolean var24 = var17.equals((java.lang.Object)var21);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var29 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var31 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var32 = var29.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var33 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var29);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var34 = var33.getObsState();
    java.lang.String var35 = var33.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var36 = var33.getObsState();
    boolean var37 = var33.isTermState();
    boolean var38 = var33.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var43 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var44 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var43);
    java.lang.String var45 = var44.toString();
    boolean var46 = var44.hasOccurred();
    synoptic.model.event.Event var47 = var44.getNextEvent();
    var33.addRemoteDependency(var44);
    boolean var49 = var17.equals((java.lang.Object)var33);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    int var70 = var69.getPid();
    java.util.Set var71 = var69.getInitStates();
    dynoptic.model.automaton.EncodedAutomaton var72 = new dynoptic.model.automaton.EncodedAutomaton(var17, var69);
    dynoptic.model.fifosys.gfsm.GFSMState var74 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var76 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var78 = var76.getInitialObsForPid(100);
    var74.removeAllObs(var78);
    boolean var80 = var74.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var82 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var84 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var86 = var84.getInitialObsForPid(100);
    var82.removeAllObs(var86);
    java.util.Set var88 = var82.getTerminalObs();
    var74.removeAllObs(var88);
    boolean var90 = var17.equals((java.lang.Object)var74);
    var74.recreateCachedTransitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var35.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var45.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test94() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test94"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "Part-0-284291914", false, true);
    int var5 = var4.getPid();
    java.lang.String var6 = var4.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var13 = var12.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var24 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var30 = var28.getInitialObsForPid(100);
    var26.removeAllObs(var30);
    dynoptic.model.fifosys.cfsm.fsm.FSM var33 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var19, var24, var30, 100);
    int var34 = var19.getPid();
    int var35 = var19.getScmId();
    dynoptic.model.alphabet.FSMAlphabet var36 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.fifosys.cfsm.fsm.FSM var57 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var43, var48, var54, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var70 = var68.getInitialObsForPid(100);
    var66.removeAllObs(var70);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var48, var63, var70);
    boolean var73 = var36.retainAll((java.util.Collection)var70);
    java.lang.String var74 = var36.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var76 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var19, (java.util.Set)var36, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var77 = new dynoptic.model.fifosys.cfsm.CFSMState(var19);
    boolean var78 = var4.equals((java.lang.Object)var77);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.cfsm.fsm.FSMState var80 = var77.getFSMState(10);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Part-0-284291914_t"+ "'", var6.equals("Part-0-284291914_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "[]"+ "'", var74.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);

  }

  public void test95() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test95"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    java.lang.String var21 = var5.toLongString();
    java.lang.String var22 = var5.toLongString();
    int var23 = var5.getScmId();
    boolean var24 = var5.isAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var25 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var21.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var22.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test96() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test96"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    var5.setAccept();
    java.util.Set var21 = var5.getTransitioningEvents();
    java.lang.String var22 = var5.toString();
    var5.setAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "0"+ "'", var22.equals("0"));

  }

  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test97"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    var1.recreateCachedTransitions();
    boolean var4 = var1.isAcceptForPid(1);
    int var5 = var1.getNumProcesses();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 10);

  }

  public void test98() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test98"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.lang.String var20 = var10.toShortIntString();
    java.util.Set var21 = var10.getNextStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "0"+ "'", var20.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test99"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var6 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    dynoptic.model.fifosys.cfsm.fsm.FSM var32 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var18, var23, var29, 100);
    int var33 = var18.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var57 = var55.getInitialObsForPid(100);
    var53.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var60 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var46, var51, var57, 100);
    var35.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var63 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var12, var18, var57, 1);
    dynoptic.model.alphabet.FSMAlphabet var64 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var65 = var64.toScmParametersString();
    var64.clear();
    java.lang.String var67 = var64.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var72 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var74 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var75 = var72.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var76 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var72);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var81 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var83 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var84 = var81.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var85 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var81);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var86 = var85.getObsState();
    boolean var87 = var85.isEnabled();
    var85.setOccurred(false);
    var76.addRemoteDependency(var85);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var91 = var85.getObsState();
    boolean var92 = var64.remove((java.lang.Object)var91);
    boolean var93 = var64.isEmpty();
    java.lang.String var94 = var64.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var96 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var5, var18, (java.util.Set)var64, 0);
    var5.setAccept();
    java.util.Set var98 = var5.getNextStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[]"+ "'", var67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "[]"+ "'", var94.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test100() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test100"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    boolean var40 = var11.isAccept();
    boolean var41 = var11.isInitial();
    dynoptic.model.fifosys.cfsm.CFSMState var42 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var44 = var42.isInitForPid((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);

  }

  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test101"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, (-1));
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    int var26 = var11.getPid();
    int var27 = var11.getScmId();
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    dynoptic.model.fifosys.cfsm.fsm.FSM var33 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var5, var11, var31, 0);
    int var34 = var11.getScmId();
    int var35 = var11.getScmId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);

  }

  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test102"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(1);
    java.lang.String var2 = var1.toLongString();
    int var3 = var1.getNumProcesses();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);

  }

  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test103"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    var1.removeAllObs(var23);
    java.lang.String var28 = var1.toLongString();
    int var29 = var1.getNumProcesses();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[]"+ "'", var28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 10);

  }

  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test104"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    java.lang.Object[] var2 = var0.toArray();
    boolean var3 = var0.isEmpty();
    var0.clear();
    var0.clear();
    java.lang.String var6 = var0.anyEventScmQRe();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    dynoptic.model.fifosys.cfsm.fsm.FSM var46 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var32, var37, var43, 100);
    dynoptic.model.automaton.EventTypeEncodings var47 = var46.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var52 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var53 = var47.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var54 = var26.getEncodedAutomaton(var47);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var65 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var69 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var71 = var69.getInitialObsForPid(100);
    var67.removeAllObs(var71);
    dynoptic.model.fifosys.cfsm.fsm.FSM var74 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var60, var65, var71, 100);
    dynoptic.model.automaton.EventTypeEncodings var75 = var74.getEventTypeEncodings();
    boolean var76 = var54.equals((java.lang.Object)var74);
    java.util.Set var77 = var74.getStates();
    java.util.Set var78 = var74.getAcceptStates();
    dynoptic.model.automaton.EventTypeEncodings var79 = var74.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var84 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var86 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var87 = var84.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var88 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var84);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var89 = var88.getObsState();
    java.lang.String var90 = var88.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var91 = var88.getObsState();
    boolean var92 = var88.isTermState();
    boolean var93 = var88.isTermState();
    boolean var94 = var88.isInitState();
    boolean var95 = var79.equals((java.lang.Object)var88);
    boolean var96 = var0.contains((java.lang.Object)var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(_)"+ "'", var6.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var90.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);

  }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test105"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, false, 100, 1);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(0, "Part-0-284291914", false, true);
    boolean var10 = var4.equals((java.lang.Object)true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test106() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test106"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("FSM[pid=-1]\n\tstates: [0]\n\tinits: [0]\n\taccepts: []");

  }

  public void test107() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test107"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (-1), 1);
    java.lang.String var5 = var4.toShortIntString();
    int var6 = var4.getPid();
    java.lang.String var7 = var4.toShortIntString();
    var4.setAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "1"+ "'", var5.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "1"+ "'", var7.equals("1"));

  }

  public void test108() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test108"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    int var2 = var0.size();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var9 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var15 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var20 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.cfsm.fsm.FSM var29 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var15, var20, var26, 100);
    int var30 = var15.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.fifosys.cfsm.fsm.FSM var57 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var43, var48, var54, 100);
    var32.removeAllObs(var54);
    dynoptic.model.fifosys.cfsm.fsm.FSM var60 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var9, var15, var54, 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var66 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var71 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var77 = var75.getInitialObsForPid(100);
    var73.removeAllObs(var77);
    dynoptic.model.fifosys.cfsm.fsm.FSM var80 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var66, var71, var77, 100);
    var66.setAccept();
    java.util.Set var82 = var66.getTransitioningEvents();
    dynoptic.model.alphabet.FSMAlphabet var84 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var85 = new dynoptic.model.fifosys.gfsm.GFSMState(1, (java.util.Set)var84);
    dynoptic.model.fifosys.cfsm.fsm.FSM var87 = new dynoptic.model.fifosys.cfsm.fsm.FSM(100, var9, var66, (java.util.Set)var84, 10);
    boolean var88 = var0.retainAll((java.util.Collection)var84);
    java.lang.Object[] var89 = var84.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test109"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(1);
    var1.recreateCachedTransitions();

  }

  public void test110() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test110"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var45 = var42.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var46 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var51 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var52 = var51.getName();
    boolean var53 = var42.equals((java.lang.Object)var51);
    boolean var54 = var0.contains((java.lang.Object)var42);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var55 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    synoptic.model.event.Event var56 = var55.getNextEvent();
    synoptic.model.event.Event var57 = var55.getNextEvent();
    java.lang.String var58 = var55.toString();
    synoptic.model.event.Event var59 = var55.getNextEvent();
    boolean var60 = var55.isEnabled();
    java.lang.String var61 = var55.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var52.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var58.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var61.equals("ObsDAGNode[i_hi!_t]"));

  }

  public void test111() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test111"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    java.lang.String var8 = var4.getName();
    int var9 = var4.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));

  }

  public void test112() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test112"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(0, "Part-0-740301054", true, true);
    java.lang.String var5 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "i_Part-0-740301054_t"+ "'", var5.equals("i_Part-0-740301054_t"));

  }

  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test113"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var32, var47, var54);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    java.util.Set var62 = var58.getInitialObsForPid(1);
    java.util.Set var63 = var58.getInitialObservations();
    dynoptic.model.fifosys.cfsm.fsm.FSM var65 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var32, var63, 10);
    boolean var67 = var11.equals((java.lang.Object)"Part-0-388846836");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test114() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test114"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(10);
    int var2 = var1.numEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test115() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test115"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getInitStates();
    java.util.Set var22 = var19.getStates();
    boolean var24 = var19.equals((java.lang.Object)"Part-0-1853704944");
    var19.minimize();
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    boolean var33 = var27.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    java.util.Set var41 = var35.getTerminalObs();
    var27.removeAllObs(var41);
    dynoptic.model.automaton.EventTypeEncodings var43 = new dynoptic.model.automaton.EventTypeEncodings(var41);
    boolean var45 = var43.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var56 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    dynoptic.model.fifosys.cfsm.fsm.FSM var65 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var51, var56, var62, 100);
    int var66 = var65.getPid();
    java.util.Set var67 = var65.getStates();
    dynoptic.model.automaton.EncodedAutomaton var68 = new dynoptic.model.automaton.EncodedAutomaton(var43, var65);
    dynoptic.model.automaton.EncodedAutomaton var69 = var19.getEncodedAutomaton(var43);
    var19.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test116() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test116"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    java.util.Set var27 = var23.getInitialObsForPid(1);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState((-1), var27);
    java.lang.String var31 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var28, true, false);
    boolean var32 = var28.isAccept();
    java.util.Set var33 = var28.getTransitioningEvents();
    boolean var34 = var28.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-177370604"+ "'", var14.equals("Part-0-177370604"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "  1 [label=\"[]\",shape=circle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->1;\n"+ "'", var31.equals("  1 [label=\"[]\",shape=circle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->1;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);

  }

  public void test117() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test117"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    java.util.Set var27 = var23.getInitialObsForPid(1);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState((-1), var27);
    java.lang.String var31 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var28, true, false);
    boolean var32 = var28.isAccept();
    java.util.Set var34 = var28.getInitialObsForPid(10);
    boolean var36 = var28.isAcceptForPid(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-1075055771"+ "'", var14.equals("Part-0-1075055771"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "  1 [label=\"[]\",shape=circle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->1;\n"+ "'", var31.equals("  1 [label=\"[]\",shape=circle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->1;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test118() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test118"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    boolean var42 = var40.isInitial();
    boolean var43 = var40.isAccept();
    boolean var44 = var40.isInitial();
    java.util.Set var45 = var40.getTransitioningEvents();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var47 = var40.isAcceptForPid(1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test119() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test119"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    java.lang.String var13 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var5, false, false);
    boolean var14 = var5.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var13.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test120"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    java.lang.String var20 = var13.toIntermediateString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-820149615"+ "'", var14.equals("Part-0-820149615"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Part-0-820149615"+ "'", var20.equals("Part-0-820149615"));

  }

  public void test121() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test121"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getStates();
    dynoptic.model.alphabet.FSMAlphabet var22 = var19.getAlphabet();
    dynoptic.model.automaton.EventTypeEncodings var23 = var19.getEventTypeEncodings();
    dynoptic.model.automaton.EventTypeEncodings var24 = var19.getEventTypeEncodings();
    java.lang.String var25 = var19.toString();
    var19.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var25.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));

  }

  public void test122() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test122"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, false, 0, 1);

  }

  public void test123() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test123"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var32, var47, var54);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    java.util.Set var62 = var58.getInitialObsForPid(1);
    java.util.Set var63 = var58.getInitialObservations();
    dynoptic.model.fifosys.cfsm.fsm.FSM var65 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var32, var63, 10);
    java.lang.String var66 = var65.toString();
    java.lang.String var67 = var65.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var66.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var67.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));

  }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test124"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(100, true, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test125() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test125"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState((-1), true, false);
    java.lang.String var4 = var3.getName();
    dynoptic.model.export.DotExportFormatter var5 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var6 = var5.beginGraphString();
    java.lang.String var7 = var5.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var12 = var10.getInitialObsForPid(100);
    java.lang.String var15 = var5.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var10, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var19 = var18.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var21 = new dynoptic.model.fifosys.gfsm.GFSMPath(var18, 1);
    java.lang.String var24 = var5.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var18, true, true);
    java.lang.String var25 = var5.beginGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    dynoptic.model.fifosys.cfsm.fsm.FSM var46 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var32, var37, var43, 100);
    int var47 = var32.getPid();
    int var48 = var32.getScmId();
    int var49 = var32.getPid();
    java.lang.String var52 = var5.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var32, false, false);
    var32.setAccept();
    boolean var54 = var3.equals((java.lang.Object)var32);
    var3.markTerm();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var56 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var3);
    synoptic.model.event.Event var57 = var56.getNextEvent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "67"+ "'", var4.equals("67"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "digraph {\n"+ "'", var6.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "digraph {\n"+ "'", var7.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var15.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Part-0-1182466104"+ "'", var19.equals("Part-0-1182466104"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var24.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "digraph {\n"+ "'", var25.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "  1 [label=\"0\",shape=circle];\n"+ "'", var52.equals("  1 [label=\"0\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);

  }

  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test126"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    boolean var7 = var5.hasOccurred();
    boolean var8 = var5.isInitState();
    boolean var9 = var5.hasOccurred();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var10 = var5.getPrevState();
    synoptic.model.event.Event var11 = var5.getNextEvent();
    boolean var12 = var5.hasOccurred();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var13 = var5.getPrevState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test127() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test127"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.util.Set var5 = var1.getInitialObsForPid(1);
    java.util.Set var6 = var1.getInitialObservations();
    int var7 = var1.getNumProcesses();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var10 = var9.toIntermediateString();
    boolean var11 = var9.isAccept();
    java.util.Set var13 = var9.getInitialObsForPid(10);
    java.util.Set var15 = var9.getTerminalObsForPid(0);
    dynoptic.model.export.DotExportFormatter var16 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var17 = var16.beginGraphString();
    java.lang.String var18 = var16.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    java.lang.String var26 = var16.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var21, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var30 = var29.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var32 = new dynoptic.model.fifosys.gfsm.GFSMPath(var29, 1);
    java.lang.String var35 = var16.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var29, true, true);
    java.lang.String var36 = var29.toString();
    java.util.Set var37 = var29.getTerminalObs();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findTransitiveClosure((dynoptic.model.AbsFSMState)var1, var15, var37);
    boolean var39 = var1.isAccept();
    dynoptic.model.alphabet.FSMAlphabet var40 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var41 = var40.toScmParametersString();
    java.lang.Object[] var42 = var40.toArray();
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    java.lang.String var48 = var45.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.alphabet.FSMAlphabet var56 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    boolean var64 = var58.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var70 = var68.getInitialObsForPid(100);
    var66.removeAllObs(var70);
    java.util.Set var72 = var66.getTerminalObs();
    var58.removeAllObs(var72);
    boolean var74 = var56.retainAll((java.util.Collection)var72);
    java.lang.Object[] var76 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var77 = var56.toArray(var76);
    java.lang.Object[] var78 = var56.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var45, var54, (java.util.Set)var56);
    boolean var80 = var40.removeAll((java.util.Collection)var54);
    java.lang.String var81 = var40.anyEventScmQRe();
    var1.removeAllObs((java.util.Set)var40);
    int var83 = var1.getNumProcesses();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Part-0-1909743559"+ "'", var10.equals("Part-0-1909743559"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "digraph {\n"+ "'", var17.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "digraph {\n"+ "'", var18.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var26.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Part-0-2138729945"+ "'", var30.equals("Part-0-2138729945"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var35.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "[]"+ "'", var36.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + ""+ "'", var41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(_)"+ "'", var81.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 10);

  }

  public void test128() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test128"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(0, true, false);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var4 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var3);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var3);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var6 = var5.getPrevState();
    boolean var7 = var5.isTermState();
    boolean var8 = var5.hasOccurred();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test129"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, false, 10, 0);

  }

  public void test130() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test130"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    var5.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var21 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    java.util.Set var22 = var21.getTransitioningEvents();
    boolean var23 = var21.isAccept();
    java.util.Set var24 = var21.getTransitioningEvents();
    boolean var25 = var21.isInitial();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = var21.getFSMState(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test131"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    java.lang.String var37 = var12.toLongString();
    java.lang.String var38 = var12.toLongString();
    java.lang.String var39 = var12.toString();
    java.util.Set var40 = var12.getNextStates();
    java.util.Set var41 = var12.getNextStates();
    int var42 = var12.getScmId();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSM var62 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var48, var53, var59, 100);
    int var63 = var48.getPid();
    java.lang.String var64 = var48.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var70 = var68.getInitialObsForPid(100);
    var66.removeAllObs(var70);
    java.util.Set var72 = var66.getTerminalObs();
    dynoptic.model.fifosys.cfsm.fsm.FSM var74 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var48, var72, (-1));
    java.lang.String var75 = var48.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var37.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var38.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "0"+ "'", var39.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var64.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "0"+ "'", var75.equals("0"));

  }

  public void test132() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test132"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    var21.removeAllObs(var25);
    dynoptic.model.fifosys.cfsm.fsm.FSM var28 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var14, var19, var25, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var19, var34, var41);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    java.lang.String var48 = var45.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    var71.removeAllObs(var75);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var82 = var80.getInitialObsForPid(100);
    var78.removeAllObs(var82);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var60, var75, var82);
    var45.removeAllObs(var82);
    java.util.Set var87 = var45.getInitialObsForPid(10);
    dynoptic.model.fifosys.cfsm.fsm.FSM var89 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var6, var34, (java.util.Collection)var87, (-1));
    boolean var90 = var89.isDeterministic();
    java.lang.String var91 = var89.toString();
    java.util.Set var92 = var89.getStates();
    java.util.Set var93 = var89.getStates();
    dynoptic.model.automaton.EventTypeEncodings var94 = new dynoptic.model.automaton.EventTypeEncodings(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "FSM[pid=1]\n\tstates: []\n\tinits: []\n\taccepts: [0]"+ "'", var91.equals("FSM[pid=1]\n\tstates: []\n\tinits: []\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test133() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test133"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = var40.getFSMState(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var45 = var40.isInitForPid(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test134() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test134"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    boolean var18 = var1.isInitForPid(10);
    java.lang.String var19 = var1.toIntermediateString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Part-0-260587785"+ "'", var19.equals("Part-0-260587785"));

  }

  public void test135() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test135"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.automaton.EventTypeEncodings var68 = var67.getEventTypeEncodings();
    boolean var69 = var47.equals((java.lang.Object)var67);
    java.util.Set var70 = var67.getStates();
    java.util.Set var71 = var67.getAcceptStates();
    java.util.Set var72 = var67.getStates();
    boolean var73 = var67.isDeterministic();
    java.util.Set var74 = var67.getStates();
    dynoptic.model.automaton.EventTypeEncodings var75 = var67.getEventTypeEncodings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var77 = var75.getEventType('a');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test136() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test136"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var16 = var13.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var17 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = var17.getObsState();
    boolean var19 = var17.isEnabled();
    var17.setOccurred(false);
    var8.addRemoteDependency(var17);
    boolean var23 = var8.hasOccurred();
    var8.setOccurred(true);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var26 = var8.getObsState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var27 = var8.getNextState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test137() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test137"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    boolean var10 = var8.isEnabled();
    boolean var11 = var8.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test138() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test138"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var45 = var42.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var46 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var51 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var52 = var51.getName();
    boolean var53 = var42.equals((java.lang.Object)var51);
    boolean var54 = var0.contains((java.lang.Object)var42);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var55 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    synoptic.model.event.Event var56 = var55.getNextEvent();
    synoptic.model.event.Event var57 = var55.getNextEvent();
    java.lang.String var58 = var55.toString();
    boolean var59 = var55.isTermState();
    boolean var60 = var55.hasOccurred();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var52.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var58.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test139"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var10 = var8.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test140() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test140"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTransitioningEvents();
    boolean var16 = var4.equals((java.lang.Object)var15);
    int var17 = var4.getPid();
    java.lang.String var18 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "i_hi!_t"+ "'", var18.equals("i_hi!_t"));

  }

  public void test141() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test141"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("(_)");

  }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test142"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var8 = var7.numEvents();
    int var9 = var7.numEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test143() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test143"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath(var21, (-1));
    boolean var24 = var17.equals((java.lang.Object)var21);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var29 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var31 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var32 = var29.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var33 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var29);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var34 = var33.getObsState();
    java.lang.String var35 = var33.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var36 = var33.getObsState();
    boolean var37 = var33.isTermState();
    boolean var38 = var33.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var43 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var44 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var43);
    java.lang.String var45 = var44.toString();
    boolean var46 = var44.hasOccurred();
    synoptic.model.event.Event var47 = var44.getNextEvent();
    var33.addRemoteDependency(var44);
    boolean var49 = var17.equals((java.lang.Object)var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var51 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var52 = new dynoptic.model.fifosys.gfsm.GFSMPath(var51);
    dynoptic.model.fifosys.gfsm.GFSMPath var54 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var55 = var54.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var56 = new dynoptic.model.fifosys.gfsm.GFSMPath(var51, var54);
    dynoptic.model.fifosys.gfsm.GFSMPath var57 = new dynoptic.model.fifosys.gfsm.GFSMPath(var51);
    boolean var58 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var57);
    int var59 = var57.numStates();
    int var60 = var57.numEvents();
    boolean var61 = var17.equals((java.lang.Object)var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var35.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var45.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test144"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(0, "Part-0-284291914_t", false, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test145"); }


    dynoptic.model.alphabet.FSMAlphabet var1 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var2 = var1.toScmParametersString();
    var1.clear();
    java.lang.String var4 = var1.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var12 = var9.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var13 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var9);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var21 = var18.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var22 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var18);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var23 = var22.getObsState();
    boolean var24 = var22.isEnabled();
    var22.setOccurred(false);
    var13.addRemoteDependency(var22);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var28 = var22.getObsState();
    boolean var29 = var1.remove((java.lang.Object)var28);
    boolean var30 = var1.isEmpty();
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState((-1), (java.util.Set)var1);
    var31.recreateCachedTransitions();
    var31.recreateCachedTransitions();
    boolean var35 = var31.isInitForPid(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test146() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test146"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    boolean var10 = var8.isEnabled();
    boolean var11 = var8.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var12 = var8.getObsState();
    boolean var13 = var12.isTerminal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test147"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(100, true, false);
    int var4 = var3.getPid();
    java.lang.String var5 = var3.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "69"+ "'", var5.equals("69"));

  }

  public void test148() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test148"); }


    dynoptic.model.alphabet.FSMAlphabet var1 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var2 = var1.toScmParametersString();
    var1.clear();
    java.lang.String var4 = var1.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var12 = var9.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var13 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var9);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var21 = var18.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var22 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var18);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var23 = var22.getObsState();
    boolean var24 = var22.isEnabled();
    var22.setOccurred(false);
    var13.addRemoteDependency(var22);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var28 = var22.getObsState();
    boolean var29 = var1.remove((java.lang.Object)var28);
    boolean var30 = var1.isEmpty();
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState((-1), (java.util.Set)var1);
    var31.recreateCachedTransitions();
    var31.recreateCachedTransitions();
    java.util.Set var35 = var31.getTerminalObsForPid(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test149() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test149"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    java.util.Iterator var39 = var0.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var42 = var41.toIntermediateString();
    boolean var43 = var41.isAccept();
    boolean var44 = var0.contains((java.lang.Object)var43);
    java.util.Set var45 = var0.getLocalEventScmStrings();
    java.lang.Object[] var46 = var0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Part-0-1407772999"+ "'", var42.equals("Part-0-1407772999"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test150() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test150"); }


    dynoptic.model.alphabet.FSMAlphabet var1 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var8 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var13 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var19 = var17.getInitialObsForPid(100);
    var15.removeAllObs(var19);
    dynoptic.model.fifosys.cfsm.fsm.FSM var22 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var8, var13, var19, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var28 = var26.getInitialObsForPid(100);
    var24.removeAllObs(var28);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var13, var28, var35);
    boolean var38 = var1.retainAll((java.util.Collection)var35);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var43 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var45 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var46 = var43.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var47 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var43);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var52 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var53 = var52.getName();
    boolean var54 = var43.equals((java.lang.Object)var52);
    boolean var55 = var1.contains((java.lang.Object)var43);
    dynoptic.model.alphabet.FSMAlphabet var56 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    boolean var64 = var58.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var70 = var68.getInitialObsForPid(100);
    var66.removeAllObs(var70);
    java.util.Set var72 = var66.getTerminalObs();
    var58.removeAllObs(var72);
    boolean var74 = var56.retainAll((java.util.Collection)var72);
    java.lang.Object[] var76 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var77 = var56.toArray(var76);
    java.lang.Object[] var78 = var1.toArray(var76);
    dynoptic.model.alphabet.FSMAlphabet var79 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var80 = var79.toScmParametersString();
    var79.clear();
    java.lang.String var82 = var79.toString();
    boolean var83 = var1.removeAll((java.util.Collection)var79);
    int var84 = var1.size();
    var1.clear();
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState((-1), (java.util.Set)var1);
    int var87 = var86.getNumProcesses();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var53.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + ""+ "'", var80.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "[]"+ "'", var82.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == (-1));

  }

  public void test151() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test151"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var2 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    int var3 = var1.numStates();
    dynoptic.model.fifosys.gfsm.GFSMPath var5 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var9 = var8.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5);
    dynoptic.model.fifosys.gfsm.GFSMPath var12 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5);
    boolean var13 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var12);
    dynoptic.model.fifosys.gfsm.GFSMPath var14 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var15 = var12.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test152() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test152"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    int var26 = var11.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var53 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var39, var44, var50, 100);
    var28.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var56 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var5, var11, var50, 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var63 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var68 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var70 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var72 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var74 = var72.getInitialObsForPid(100);
    var70.removeAllObs(var74);
    dynoptic.model.fifosys.cfsm.fsm.FSM var77 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var63, var68, var74, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var79 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var81 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var83 = var81.getInitialObsForPid(100);
    var79.removeAllObs(var83);
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var88 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var90 = var88.getInitialObsForPid(100);
    var86.removeAllObs(var90);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var68, var83, var90);
    dynoptic.model.fifosys.gfsm.GFSMPath var94 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var95 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var94);
    boolean var96 = var68.equals((java.lang.Object)var95);
    boolean var97 = var56.equals((java.lang.Object)var95);
    int var98 = var56.getPid();
    java.util.Set var99 = var56.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test153"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState((-1), false, true);
    dynoptic.model.alphabet.FSMAlphabet var4 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var6 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var8 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var10 = var8.getInitialObsForPid(100);
    var6.removeAllObs(var10);
    boolean var12 = var6.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    java.util.Set var20 = var14.getTerminalObs();
    var6.removeAllObs(var20);
    boolean var22 = var4.retainAll((java.util.Collection)var20);
    java.lang.String var23 = var4.toString();
    boolean var24 = var4.isEmpty();
    boolean var26 = var4.remove((java.lang.Object)"  1 [label=\"[]\",shape=circle];\n");
    boolean var27 = var3.equals((java.lang.Object)var26);
    int var28 = var3.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));

  }

  public void test154() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test154"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getAcceptStates();
    dynoptic.model.alphabet.FSMAlphabet var22 = var19.getAlphabet();
    java.lang.String var23 = var22.anyEventScmQRe();
    java.lang.Object[] var24 = var22.toArray();
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var28 = var26.getInitialObsForPid(100);
    int var29 = var26.getNumProcesses();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var35 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var40 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var46 = var44.getInitialObsForPid(100);
    var42.removeAllObs(var46);
    dynoptic.model.fifosys.cfsm.fsm.FSM var49 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var35, var40, var46, 100);
    dynoptic.model.automaton.EventTypeEncodings var50 = var49.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var55 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var56 = var50.equals((java.lang.Object)true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var62 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var67 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var69 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var73 = var71.getInitialObsForPid(100);
    var69.removeAllObs(var73);
    dynoptic.model.fifosys.cfsm.fsm.FSM var76 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var62, var67, var73, 100);
    int var77 = var62.getPid();
    java.lang.String var78 = var62.toLongString();
    boolean var79 = var50.equals((java.lang.Object)var78);
    dynoptic.model.fifosys.gfsm.GFSMState var81 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var83 = var81.getInitialObsForPid(100);
    java.util.Set var84 = var81.getTransitioningEvents();
    boolean var85 = var50.equals((java.lang.Object)var84);
    var26.addAllObs(var84);
    boolean var87 = var22.removeAll((java.util.Collection)var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(_)"+ "'", var23.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var78.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test155"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(0, "[]", true, true);
    var4.markTerm();
    boolean var6 = var4.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test156"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, false, 0, (-1));
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.cfsm.fsm.FSM var47 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var33, var38, var44, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var53 = var51.getInitialObsForPid(100);
    var49.removeAllObs(var53);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    var56.removeAllObs(var60);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var38, var53, var60);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    java.util.Set var68 = var64.getInitialObsForPid(1);
    java.util.Set var69 = var64.getInitialObservations();
    dynoptic.model.fifosys.cfsm.fsm.FSM var71 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var17, var38, var69, 10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    java.util.Set var76 = var73.getTransitioningEvents();
    java.util.Set var77 = var73.getInitialObservations();
    java.util.Set var78 = var73.getNextStates();
    dynoptic.model.fifosys.cfsm.fsm.FSM var80 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var5, var38, var78, (-1));
    boolean var81 = var5.isInitial();
    java.lang.String var82 = var5.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "FSM_state: init[false], accept[false] id[-1]"+ "'", var82.equals("FSM_state: init[false], accept[false] id[-1]"));

  }

  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test157"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "Part-0-284291914", false, true);
    int var5 = var4.getPid();
    java.lang.String var6 = var4.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var13 = var12.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var24 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var30 = var28.getInitialObsForPid(100);
    var26.removeAllObs(var30);
    dynoptic.model.fifosys.cfsm.fsm.FSM var33 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var19, var24, var30, 100);
    int var34 = var19.getPid();
    int var35 = var19.getScmId();
    dynoptic.model.alphabet.FSMAlphabet var36 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.fifosys.cfsm.fsm.FSM var57 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var43, var48, var54, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var70 = var68.getInitialObsForPid(100);
    var66.removeAllObs(var70);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var48, var63, var70);
    boolean var73 = var36.retainAll((java.util.Collection)var70);
    java.lang.String var74 = var36.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var76 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var19, (java.util.Set)var36, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var77 = new dynoptic.model.fifosys.cfsm.CFSMState(var19);
    boolean var78 = var4.equals((java.lang.Object)var77);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var80 = var77.isAcceptForPid(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Part-0-284291914_t"+ "'", var6.equals("Part-0-284291914_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "[]"+ "'", var74.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);

  }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test158"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getStates();
    java.lang.String var22 = var19.toString();
    java.util.Set var23 = var19.getStates();
    dynoptic.model.alphabet.FSMAlphabet var24 = var19.getAlphabet();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var29 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var30 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var29);
    java.lang.String var31 = var30.toString();
    boolean var32 = var30.hasOccurred();
    boolean var33 = var30.isEnabled();
    boolean var34 = var19.equals((java.lang.Object)var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var22.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var31.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test159"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    boolean var28 = var22.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    java.util.Set var36 = var30.getTerminalObs();
    var22.removeAllObs(var36);
    dynoptic.model.automaton.EventTypeEncodings var38 = new dynoptic.model.automaton.EventTypeEncodings(var36);
    dynoptic.model.automaton.EncodedAutomaton var39 = var19.getEncodedAutomaton(var38);
    var39.minimize();
    dk.brics.automaton.Automaton var41 = var39.getAutomaton();
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    java.util.Set var49 = var43.getTerminalObs();
    boolean var50 = var43.isAccept();
    boolean var51 = var39.equals((java.lang.Object)var43);
    java.util.Set var53 = var43.getInitialObsForPid((-1));
    int var54 = var43.getNumProcesses();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 10);

  }

  public void test160() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test160"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState((-1), true, false);
    boolean var4 = var3.isTerminal();
    boolean var5 = var3.isInitial();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (-1), 1);
    java.lang.String var11 = var10.toShortIntString();
    java.util.Set var12 = var10.getNextStates();
    boolean var13 = var3.equals((java.lang.Object)var12);
    var3.markTerm();
    boolean var15 = var3.isTerminal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "1"+ "'", var11.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test161() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test161"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    java.lang.String var20 = var13.toString();
    java.util.Set var21 = var13.getInitialObservations();
    int var22 = var13.getNumProcesses();
    boolean var23 = var13.isAccept();
    boolean var25 = var13.isAcceptForPid(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-714363862"+ "'", var14.equals("Part-0-714363862"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test162() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test162"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = var40.getFSMState(0);
    dynoptic.model.fifosys.cfsm.CFSMState var44 = new dynoptic.model.fifosys.cfsm.CFSMState(var43);
    boolean var46 = var44.isInitForPid(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);

  }

  public void test163() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test163"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getAcceptStates();
    dynoptic.model.alphabet.FSMAlphabet var22 = var19.getAlphabet();
    java.lang.String var23 = var22.anyEventScmQRe();
    java.lang.String var24 = var22.toString();
    java.lang.String var25 = var22.toString();
    var22.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(_)"+ "'", var23.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]"+ "'", var25.equals("[]"));

  }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test164"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    boolean var43 = var40.isInitForPid(0);
    boolean var45 = var40.isAcceptForPid(0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var47 = var40.getFSMState(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var49 = var40.isInitForPid(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test165() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test165"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var8.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = var8.getObsState();
    boolean var12 = var8.isTermState();
    boolean var13 = var8.isTermState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var14 = var8.getNextState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var15 = var8.getObsState();
    synoptic.model.event.Event var16 = var8.getNextEvent();
    boolean var17 = var8.isTermState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test166() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test166"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    var0.clear();
    java.lang.String var3 = var0.toString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var8 = var5.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var15 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var20 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.cfsm.fsm.FSM var29 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var15, var20, var26, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var20, var35, var42);
    var5.removeAllObs(var42);
    boolean var47 = var5.isInitForPid(100);
    java.util.Set var48 = var5.getTransitioningEvents();
    boolean var49 = var0.retainAll((java.util.Collection)var48);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var53 = var51.getTerminalObsForPid(1);
    boolean var54 = var0.removeAll((java.util.Collection)var53);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var59 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var61 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var62 = var59.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var63 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var59);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var64 = var63.getObsState();
    java.lang.String var65 = var63.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var66 = var63.getObsState();
    boolean var67 = var63.isTermState();
    boolean var68 = var63.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var73 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var74 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var73);
    java.lang.String var75 = var74.toString();
    boolean var76 = var74.hasOccurred();
    synoptic.model.event.Event var77 = var74.getNextEvent();
    var63.addRemoteDependency(var74);
    boolean var79 = var0.contains((java.lang.Object)var74);
    boolean var80 = var74.hasOccurred();
    boolean var81 = var74.isInitState();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var65.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var75.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);

  }

  public void test167() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test167"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    java.util.Set var27 = var23.getInitialObsForPid(1);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState((-1), var27);
    java.lang.String var31 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var28, true, false);
    boolean var33 = var28.isInitForPid((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-889636443"+ "'", var14.equals("Part-0-889636443"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "  1 [label=\"[]\",shape=circle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->1;\n"+ "'", var31.equals("  1 [label=\"[]\",shape=circle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->1;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test168() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test168"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    var6.setAccept();
    java.util.Set var22 = var6.getTransitioningEvents();
    java.lang.String var23 = var6.toString();
    java.util.Set var24 = var6.getTransitioningEvents();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var35 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    dynoptic.model.fifosys.cfsm.fsm.FSM var44 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var30, var35, var41, 100);
    java.lang.String var45 = var35.toShortIntString();
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var48 = var47.toIntermediateString();
    boolean var49 = var47.isAccept();
    java.util.Set var51 = var47.getInitialObsForPid(10);
    java.util.Set var53 = var47.getTerminalObsForPid(0);
    dynoptic.model.fifosys.cfsm.fsm.FSM var55 = new dynoptic.model.fifosys.cfsm.fsm.FSM(100, var6, var35, var53, 10);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    java.lang.String var61 = var60.toShortIntString();
    boolean var62 = var35.equals((java.lang.Object)var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "0"+ "'", var23.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "0"+ "'", var45.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "Part-0-1369857657"+ "'", var48.equals("Part-0-1369857657"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "0"+ "'", var61.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);

  }

  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test169"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    java.util.Set var8 = var2.getTerminalObs();
    int var9 = var2.getNumProcesses();
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    java.util.Set var14 = var11.getTransitioningEvents();
    java.util.Set var15 = var11.getInitialObservations();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var21 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.cfsm.fsm.FSM var35 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var21, var26, var32, 100);
    dynoptic.model.automaton.EventTypeEncodings var36 = var35.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var41 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var42 = var36.equals((java.lang.Object)true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSM var62 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var48, var53, var59, 100);
    int var63 = var48.getPid();
    java.lang.String var64 = var48.toLongString();
    boolean var65 = var36.equals((java.lang.Object)var64);
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var69 = var67.getInitialObsForPid(100);
    java.util.Set var70 = var67.getTransitioningEvents();
    boolean var71 = var36.equals((java.lang.Object)var70);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(1, (dynoptic.model.AbsFSMState)var2, var15, var70);
    dynoptic.model.fifosys.gfsm.GFSMPath var74 = new dynoptic.model.fifosys.gfsm.GFSMPath(var2, 0);
    int var75 = var74.numEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var64.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);

  }

  public void test170() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test170"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    boolean var8 = var2.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    java.util.Set var16 = var10.getTerminalObs();
    var2.removeAllObs(var16);
    boolean var18 = var0.retainAll((java.util.Collection)var16);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var24 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.fifosys.cfsm.fsm.FSM var38 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var24, var29, var35, 100);
    int var39 = var38.getPid();
    java.util.Set var40 = var38.getStates();
    boolean var41 = var0.addAll((java.util.Collection)var40);
    var0.clear();
    dynoptic.model.alphabet.FSMAlphabet var43 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    var45.removeAllObs(var49);
    boolean var51 = var45.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var57 = var55.getInitialObsForPid(100);
    var53.removeAllObs(var57);
    java.util.Set var59 = var53.getTerminalObs();
    var45.removeAllObs(var59);
    boolean var61 = var43.retainAll((java.util.Collection)var59);
    java.lang.Object[] var63 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var64 = var43.toArray(var63);
    java.lang.Object[] var65 = var43.toArray();
    java.lang.Object[] var66 = var43.toArray();
    java.lang.Object[] var67 = var0.toArray(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test171() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test171"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.util.Iterator var38 = var0.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var41 = var40.toIntermediateString();
    boolean var42 = var40.isAccept();
    java.util.Set var44 = var40.getInitialObsForPid(10);
    boolean var45 = var0.addAll((java.util.Collection)var44);
    java.util.Set var46 = var0.getLocalEventScmStrings();
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    java.lang.String var51 = var48.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var63 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var65 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var69 = var67.getInitialObsForPid(100);
    var65.removeAllObs(var69);
    dynoptic.model.fifosys.cfsm.fsm.FSM var72 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var58, var63, var69, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var74 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var76 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var78 = var76.getInitialObsForPid(100);
    var74.removeAllObs(var78);
    dynoptic.model.fifosys.gfsm.GFSMState var81 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var83 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var85 = var83.getInitialObsForPid(100);
    var81.removeAllObs(var85);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var63, var78, var85);
    var48.removeAllObs(var85);
    boolean var90 = var48.isInitForPid(100);
    java.util.Set var91 = var48.getTerminalObs();
    boolean var92 = var0.contains((java.lang.Object)var48);
    java.lang.Object[] var93 = var0.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var98 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 1, 10);
    boolean var99 = var0.remove((java.lang.Object)var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "Part-0-1936906586"+ "'", var41.equals("Part-0-1936906586"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "[]"+ "'", var51.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test172() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test172"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    int var7 = var5.getPid();
    int var8 = var5.getPid();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var14 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var15 = var14.getNextState();
    var5.addRemoteDependency(var14);
    var14.setOccurred(true);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(0, true, false);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var23 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var22);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var24 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var22);
    synoptic.model.event.Event var25 = var24.getNextEvent();
    var14.addRemoteDependency(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test173"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    boolean var10 = var8.isEnabled();
    int var11 = var8.getPid();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var12 = var8.getNextState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test174() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test174"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    java.util.Set var22 = var21.getAcceptStates();
    java.util.Set var23 = var21.getStates();
    java.lang.String var24 = var21.toString();
    java.util.Set var25 = var21.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.cfsm.fsm.FSM var47 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var33, var38, var44, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var53 = var51.getInitialObsForPid(100);
    var49.removeAllObs(var53);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    var56.removeAllObs(var60);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var38, var53, var60);
    dynoptic.model.fifosys.gfsm.GFSMPath var64 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var65 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var64);
    boolean var66 = var38.equals((java.lang.Object)var65);
    boolean var67 = var38.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var72 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.gfsm.GFSMState var74 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var76 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var78 = var76.getInitialObsForPid(100);
    var74.removeAllObs(var78);
    java.util.Set var80 = var74.getTerminalObs();
    dynoptic.model.fifosys.cfsm.fsm.FSM var82 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var38, var72, var80, 1);
    dynoptic.model.fifosys.gfsm.GFSMState var84 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var86 = var84.getInitialObsForPid(100);
    java.lang.String var87 = var84.toLongString();
    java.util.Set var88 = var84.getObservedStates();
    dynoptic.model.fifosys.cfsm.fsm.FSM var90 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var80, (java.util.Collection)var88, 10);
    dynoptic.model.fifosys.gfsm.GFSMState var91 = new dynoptic.model.fifosys.gfsm.GFSMState((-1), var25);
    java.lang.String var92 = var91.toString();
    java.util.Set var93 = var91.getInitialObservations();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var24.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "[]"+ "'", var87.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "[]"+ "'", var92.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test175() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test175"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    java.lang.String var36 = var11.toLongString();
    java.lang.String var37 = var11.toLongString();
    int var38 = var11.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    boolean var43 = var40.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var45 = new dynoptic.model.fifosys.gfsm.GFSMPath(var40, 10);
    boolean var46 = var11.equals((java.lang.Object)var40);
    boolean var47 = var11.isAccept();
    boolean var48 = var11.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var36.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var37.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test176"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    boolean var8 = var2.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    java.util.Set var16 = var10.getTerminalObs();
    var2.removeAllObs(var16);
    boolean var18 = var0.retainAll((java.util.Collection)var16);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var24 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.fifosys.cfsm.fsm.FSM var38 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var24, var29, var35, 100);
    int var39 = var38.getPid();
    java.util.Set var40 = var38.getStates();
    boolean var41 = var0.addAll((java.util.Collection)var40);
    dynoptic.model.alphabet.FSMAlphabet var42 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var48 = var46.getInitialObsForPid(100);
    var44.removeAllObs(var48);
    boolean var50 = var44.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    java.util.Set var58 = var52.getTerminalObs();
    var44.removeAllObs(var58);
    boolean var60 = var42.retainAll((java.util.Collection)var58);
    java.lang.Object[] var62 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var63 = var42.toArray(var62);
    java.lang.Object[] var64 = var42.toArray();
    java.lang.Object[] var65 = var0.toArray(var64);
    dynoptic.model.alphabet.FSMAlphabet var66 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var70 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var72 = var70.getInitialObsForPid(100);
    var68.removeAllObs(var72);
    boolean var74 = var68.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var76 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var80 = var78.getInitialObsForPid(100);
    var76.removeAllObs(var80);
    java.util.Set var82 = var76.getTerminalObs();
    var68.removeAllObs(var82);
    boolean var84 = var66.retainAll((java.util.Collection)var82);
    java.lang.Object[] var86 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var87 = var66.toArray(var86);
    java.lang.Object[] var88 = var66.toArray();
    java.lang.Object[] var89 = var0.toArray(var88);
    java.lang.String var90 = var0.anyEventScmQRe();
    java.lang.String var91 = var0.toString();
    java.util.Iterator var92 = var0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "(_)"+ "'", var90.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "[]"+ "'", var91.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test177() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test177"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    var6.setAccept();
    java.util.Set var22 = var6.getTransitioningEvents();
    java.lang.String var23 = var6.toString();
    java.util.Set var24 = var6.getTransitioningEvents();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var35 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    dynoptic.model.fifosys.cfsm.fsm.FSM var44 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var30, var35, var41, 100);
    java.lang.String var45 = var35.toShortIntString();
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var48 = var47.toIntermediateString();
    boolean var49 = var47.isAccept();
    java.util.Set var51 = var47.getInitialObsForPid(10);
    java.util.Set var53 = var47.getTerminalObsForPid(0);
    dynoptic.model.fifosys.cfsm.fsm.FSM var55 = new dynoptic.model.fifosys.cfsm.fsm.FSM(100, var6, var35, var53, 10);
    var6.setAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "0"+ "'", var23.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "0"+ "'", var45.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "Part-0-2069695361"+ "'", var48.equals("Part-0-2069695361"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test178() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test178"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var20 = var18.getInitialObsForPid(100);
    java.lang.String var21 = var18.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var28 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.fifosys.cfsm.fsm.FSM var42 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var28, var33, var39, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var48 = var46.getInitialObsForPid(100);
    var44.removeAllObs(var48);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var33, var48, var55);
    var18.removeAllObs(var55);
    var1.addAllObs(var55);
    java.util.Set var61 = var1.getInitialObsForPid(0);
    java.lang.String var62 = var1.toIntermediateString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "Part-0-2130917822"+ "'", var62.equals("Part-0-2130917822"));

  }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test179"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var5 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var8 = var5.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    java.util.Set var16 = var10.getTransitioningEvents();
    boolean var17 = var5.equals((java.lang.Object)var16);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var16);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var36);
    java.util.Set var42 = var40.getInitialObsForPid(1);
    java.util.Set var44 = var40.getTerminalObsForPid(100);
    int var45 = var40.getNumProcesses();
    java.util.Set var47 = var40.getInitialObsForPid(1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    int var68 = var53.getPid();
    java.lang.String var69 = var53.toLongString();
    java.util.Set var70 = var53.getTransitioningEvents();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findTransitiveClosure((dynoptic.model.AbsFSMState)var18, var47, var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var69.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test180"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("Part-0-382988690");

  }

  public void test181() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test181"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    synoptic.model.event.Event var6 = var5.getNextEvent();
    java.lang.String var7 = var5.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var12 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var14 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var15 = var12.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var16 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var12);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var17 = var16.getObsState();
    java.lang.String var18 = var16.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var19 = var16.getObsState();
    boolean var20 = var16.isTermState();
    boolean var21 = var16.isTermState();
    boolean var22 = var16.isTermState();
    var16.setOccurred(false);
    java.lang.String var25 = var16.toString();
    var5.addRemoteDependency(var16);
    synoptic.model.event.Event var27 = var5.getNextEvent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var7.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var18.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var25.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test182() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test182"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    java.lang.String var2 = var0.toString();
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    dynoptic.model.fifosys.gfsm.GFSMState var6 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var7 = var6.toIntermediateString();
    boolean var8 = var6.isAccept();
    java.util.Set var10 = var6.getInitialObsForPid(10);
    java.util.Set var12 = var6.getTerminalObsForPid(0);
    java.util.Set var14 = var6.getTerminalObsForPid((-1));
    java.util.Set var16 = var6.getInitialObsForPid(100);
    boolean var17 = var0.contains((java.lang.Object)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Part-0-22805345"+ "'", var7.equals("Part-0-22805345"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test183"); }


    dynoptic.model.alphabet.FSMAlphabet var1 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(1, (java.util.Set)var1);
    java.lang.String var3 = var2.toString();
    var2.recreateCachedTransitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));

  }

  public void test184() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test184"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    java.util.Set var7 = var1.getInitialObservations();
    boolean var9 = var1.isInitForPid(0);
    boolean var10 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var12 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 0);
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var12);
    int var14 = var13.numEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);

  }

  public void test185() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test185"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    java.lang.String var5 = var4.toShortIntString();
    java.util.Set var6 = var4.getNextStates();
    var4.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var8 = new dynoptic.model.fifosys.cfsm.CFSMState(var4);
    dynoptic.model.fifosys.cfsm.CFSMState var9 = new dynoptic.model.fifosys.cfsm.CFSMState(var4);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var15 = var13.getInitialObsForPid(100);
    var11.removeAllObs(var15);
    boolean var17 = var11.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    java.util.Set var25 = var19.getTerminalObs();
    var11.removeAllObs(var25);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var30 = var28.getInitialObsForPid(100);
    java.lang.String var31 = var28.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    var45.removeAllObs(var49);
    dynoptic.model.fifosys.cfsm.fsm.FSM var52 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var38, var43, var49, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var58 = var56.getInitialObsForPid(100);
    var54.removeAllObs(var58);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var63 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var65 = var63.getInitialObsForPid(100);
    var61.removeAllObs(var65);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var43, var58, var65);
    var28.removeAllObs(var65);
    var11.addAllObs(var65);
    java.util.Set var71 = var11.getInitialObsForPid(0);
    java.util.Set var72 = var11.getTerminalObs();
    boolean var73 = var4.equals((java.lang.Object)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "0"+ "'", var5.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test186() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test186"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var3 = var1.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var5 = var4.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test187"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("Part-0-1508594009");

  }

  public void test188() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test188"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    java.lang.String var20 = var13.toString();
    java.util.Set var21 = var13.getInitialObservations();
    int var22 = var13.getNumProcesses();
    boolean var23 = var13.isAccept();
    boolean var24 = var13.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-953379054"+ "'", var14.equals("Part-0-953379054"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test189() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test189"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var45 = var42.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var46 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var51 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var52 = var51.getName();
    boolean var53 = var42.equals((java.lang.Object)var51);
    boolean var54 = var0.contains((java.lang.Object)var42);
    java.lang.String var55 = var42.getName();
    boolean var56 = var42.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var52.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);

  }

  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test190"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getStates();
    java.lang.String var22 = var19.toString();
    int var23 = var19.getPid();
    java.lang.String var24 = var19.toString();
    int var25 = var19.getPid();
    dynoptic.model.alphabet.FSMAlphabet var26 = var19.getAlphabet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var22.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var24.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test191() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test191"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var14 = var13.getName();
    boolean var15 = var4.equals((java.lang.Object)var13);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var22 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.fifosys.cfsm.fsm.FSM var36 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var22, var27, var33, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    var45.removeAllObs(var49);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var27, var42, var49);
    dynoptic.model.fifosys.gfsm.GFSMPath var53 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var54 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var53);
    boolean var55 = var27.equals((java.lang.Object)var54);
    dynoptic.model.fifosys.cfsm.CFSMState var56 = new dynoptic.model.fifosys.cfsm.CFSMState(var27);
    boolean var57 = var56.isInitial();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var59 = var56.getFSMState(0);
    dynoptic.model.fifosys.cfsm.CFSMState var60 = new dynoptic.model.fifosys.cfsm.CFSMState(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var65 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var66 = new dynoptic.model.fifosys.cfsm.CFSMState(var65);
    boolean var67 = var59.equals((java.lang.Object)var65);
    int var68 = var59.getScmId();
    boolean var69 = var13.equals((java.lang.Object)var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var14.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test192() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test192"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("Part-0-769312689");

  }

  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test193"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = var40.getFSMState(0);
    dynoptic.model.fifosys.cfsm.CFSMState var44 = new dynoptic.model.fifosys.cfsm.CFSMState(var43);
    boolean var45 = var44.isInitial();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var47 = var44.getFSMState(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var49 = var44.isInitForPid(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test194() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test194"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var9.getName();
    var9.markTerm();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var12 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var9);
    java.lang.String var13 = var12.toString();
    boolean var14 = var12.isInitState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var13.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test195() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test195"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("  100 [label=\"-1\",shape=circle];\n");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "  100 [label=\"-1\",shape=circle];\n"+ "'", var2.equals("  100 [label=\"-1\",shape=circle];\n"));

  }

  public void test196() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test196"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    boolean var42 = var40.isInitial();
    boolean var43 = var40.isAccept();
    boolean var44 = var40.isInitial();
    boolean var45 = var40.isAccept();
    java.util.Set var46 = var40.getTransitioningEvents();
    boolean var47 = var40.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test197() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test197"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    int var42 = var27.getPid();
    int var43 = var27.getScmId();
    int var44 = var27.getPid();
    boolean var45 = var19.equals((java.lang.Object)var44);
    java.lang.String var46 = var19.toString();
    java.util.Set var47 = var19.getStates();
    dynoptic.model.automaton.EventTypeEncodings var48 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var52 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(0, true, false);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var53 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var52);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var54 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var52);
    synoptic.model.event.Event var55 = var54.getNextEvent();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var56 = var54.getNextState();
    boolean var57 = var54.isInitState();
    boolean var58 = var19.equals((java.lang.Object)var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var46.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test198"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    java.lang.String var36 = var11.toLongString();
    boolean var37 = var11.isAccept();
    boolean var38 = var11.isInitial();
    java.lang.String var39 = var11.toLongString();
    java.lang.String var40 = var11.toShortIntString();
    java.util.Set var41 = var11.getTransitioningEvents();
    java.lang.String var42 = var11.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var36.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var39.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "0"+ "'", var40.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var42.equals("FSM_state: init[true], accept[false] id[0]"));

  }

  public void test199() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test199"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var9 = var1.numEvents();
    boolean var10 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    boolean var11 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test200() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test200"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    var21.removeAllObs(var25);
    dynoptic.model.fifosys.cfsm.fsm.FSM var28 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var14, var19, var25, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var19, var34, var41);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    java.lang.String var48 = var45.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    var71.removeAllObs(var75);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var82 = var80.getInitialObsForPid(100);
    var78.removeAllObs(var82);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var60, var75, var82);
    var45.removeAllObs(var82);
    java.util.Set var87 = var45.getInitialObsForPid(10);
    dynoptic.model.fifosys.cfsm.fsm.FSM var89 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var6, var34, (java.util.Collection)var87, (-1));
    java.util.Set var90 = var89.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test201() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test201"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    java.lang.String var21 = var5.toLongString();
    java.util.Set var22 = var5.getTransitioningEvents();
    int var23 = var5.getScmId();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var34 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var40 = var38.getInitialObsForPid(100);
    var36.removeAllObs(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSM var43 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var29, var34, var40, 100);
    java.util.Set var44 = var43.getAcceptStates();
    java.util.Set var45 = var43.getInitStates();
    java.util.Set var46 = var43.getStates();
    boolean var48 = var43.equals((java.lang.Object)"Part-0-1853704944");
    java.util.Set var49 = var43.getAcceptStates();
    java.util.Set var50 = var43.getAcceptStates();
    dynoptic.model.alphabet.FSMAlphabet var51 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var52 = var51.toScmParametersString();
    java.lang.Object[] var53 = var51.toArray();
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var58 = var56.getInitialObsForPid(100);
    java.lang.String var59 = var56.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var63 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var65 = var63.getInitialObsForPid(100);
    var61.removeAllObs(var65);
    dynoptic.model.alphabet.FSMAlphabet var67 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var69 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var73 = var71.getInitialObsForPid(100);
    var69.removeAllObs(var73);
    boolean var75 = var69.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var79 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var81 = var79.getInitialObsForPid(100);
    var77.removeAllObs(var81);
    java.util.Set var83 = var77.getTerminalObs();
    var69.removeAllObs(var83);
    boolean var85 = var67.retainAll((java.util.Collection)var83);
    java.lang.Object[] var87 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var88 = var67.toArray(var87);
    java.lang.Object[] var89 = var67.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var56, var65, (java.util.Set)var67);
    boolean var91 = var51.removeAll((java.util.Collection)var65);
    java.lang.String var92 = var51.anyEventScmQRe();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findTransitiveClosure((dynoptic.model.AbsFSMState)var5, var50, (java.util.Set)var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var21.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + ""+ "'", var52.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "[]"+ "'", var59.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(_)"+ "'", var92.equals("(_)"));

  }

  public void test202() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test202"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var2 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    int var3 = var1.numStates();
    dynoptic.model.fifosys.gfsm.GFSMPath var5 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var9 = var8.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5);
    dynoptic.model.fifosys.gfsm.GFSMPath var12 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5);
    boolean var13 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var12);
    dynoptic.model.fifosys.gfsm.GFSMPath var14 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var12);
    int var15 = var1.numStates();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var16 = var1.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);

  }

  public void test203() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test203"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    java.lang.String var37 = var12.toLongString();
    java.lang.String var38 = var12.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var44.getPid();
    int var60 = var44.getScmId();
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var64 = var62.getTerminalObsForPid(1);
    dynoptic.model.fifosys.cfsm.fsm.FSM var66 = new dynoptic.model.fifosys.cfsm.fsm.FSM(0, var12, var44, var64, 10);
    dynoptic.model.alphabet.FSMAlphabet var67 = var66.getAlphabet();
    java.util.Set var68 = var66.getStates();
    java.util.Set var69 = var66.getInitStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var37.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var38.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test204() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test204"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var8 = var1.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test205"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.automaton.EventTypeEncodings var68 = var67.getEventTypeEncodings();
    boolean var69 = var47.equals((java.lang.Object)var67);
    dk.brics.automaton.Automaton var70 = var47.getAutomaton();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test206"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var3 = var2.toIntermediateString();
    boolean var4 = var2.isAccept();
    java.util.Set var6 = var2.getInitialObsForPid(10);
    dynoptic.model.fifosys.gfsm.GFSMState var7 = new dynoptic.model.fifosys.gfsm.GFSMState(10, var6);
    java.lang.String var8 = var7.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Part-0-788083546"+ "'", var3.equals("Part-0-788083546"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));

  }

  public void test207() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test207"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    int var42 = var27.getPid();
    int var43 = var27.getScmId();
    int var44 = var27.getPid();
    boolean var45 = var19.equals((java.lang.Object)var44);
    java.lang.String var46 = var19.toString();
    java.util.Set var47 = var19.getStates();
    dynoptic.model.automaton.EventTypeEncodings var48 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var54 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var59 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var63 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var65 = var63.getInitialObsForPid(100);
    var61.removeAllObs(var65);
    dynoptic.model.fifosys.cfsm.fsm.FSM var68 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var54, var59, var65, 100);
    java.util.Set var69 = var68.getAcceptStates();
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    var71.removeAllObs(var75);
    boolean var77 = var71.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var79 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var81 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var83 = var81.getInitialObsForPid(100);
    var79.removeAllObs(var83);
    java.util.Set var85 = var79.getTerminalObs();
    var71.removeAllObs(var85);
    dynoptic.model.automaton.EventTypeEncodings var87 = new dynoptic.model.automaton.EventTypeEncodings(var85);
    dynoptic.model.automaton.EncodedAutomaton var88 = var68.getEncodedAutomaton(var87);
    var68.minimize();
    dynoptic.model.automaton.EncodedAutomaton var90 = new dynoptic.model.automaton.EncodedAutomaton(var48, var68);
    var90.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var46.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test208() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test208"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var6 = var5.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    int var27 = var12.getPid();
    int var28 = var12.getScmId();
    dynoptic.model.alphabet.FSMAlphabet var29 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var41 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.cfsm.fsm.FSM var50 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var36, var41, var47, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var41, var56, var63);
    boolean var66 = var29.retainAll((java.util.Collection)var63);
    java.lang.String var67 = var29.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var12, (java.util.Set)var29, 1);
    java.lang.String var70 = var29.toScmParametersString();
    var29.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[]"+ "'", var67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + ""+ "'", var70.equals(""));

  }

  public void test209() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test209"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    boolean var10 = var8.isEnabled();
    var8.setOccurred(false);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var17 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var19 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var20 = var17.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var21 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var17);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var22 = var21.getObsState();
    boolean var23 = var21.isEnabled();
    var21.setOccurred(false);
    var8.addRemoteDependency(var21);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var31 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var32 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var31);
    java.lang.String var33 = var32.toString();
    boolean var34 = var32.hasOccurred();
    boolean var35 = var32.isInitState();
    int var36 = var32.getPid();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var37 = var32.getPrevState();
    var8.addRemoteDependency(var32);
    int var39 = var8.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var33.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));

  }

  public void test210() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test210"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.automaton.EventTypeEncodings var68 = var67.getEventTypeEncodings();
    boolean var69 = var47.equals((java.lang.Object)var67);
    java.util.Set var70 = var67.getStates();
    java.util.Set var71 = var67.getAcceptStates();
    int var72 = var67.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));

  }

  public void test211() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test211"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(0, false, true);
    java.lang.String var4 = var3.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "77"+ "'", var4.equals("77"));

  }

  public void test212() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test212"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-977595339");

  }

  public void test213() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test213"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState((-1), true, false);
    java.lang.String var4 = var3.getName();
    boolean var6 = var3.equals((java.lang.Object)"Part-0-1316151526");
    java.lang.String var7 = var3.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "78"+ "'", var4.equals("78"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "78"+ "'", var7.equals("78"));

  }

  public void test214() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test214"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var3 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, (-1));
    java.util.Set var4 = var1.getInitialObservations();
    java.util.Set var5 = var1.getTerminalObs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test215() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test215"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.util.Set var5 = var1.getInitialObsForPid(1);
    java.util.Set var6 = var1.getInitialObservations();
    int var7 = var1.getNumProcesses();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var10 = var9.toIntermediateString();
    boolean var11 = var9.isAccept();
    java.util.Set var13 = var9.getInitialObsForPid(10);
    java.util.Set var15 = var9.getTerminalObsForPid(0);
    dynoptic.model.export.DotExportFormatter var16 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var17 = var16.beginGraphString();
    java.lang.String var18 = var16.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    java.lang.String var26 = var16.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var21, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var30 = var29.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var32 = new dynoptic.model.fifosys.gfsm.GFSMPath(var29, 1);
    java.lang.String var35 = var16.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var29, true, true);
    java.lang.String var36 = var29.toString();
    java.util.Set var37 = var29.getTerminalObs();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findTransitiveClosure((dynoptic.model.AbsFSMState)var1, var15, var37);
    boolean var39 = var1.isAccept();
    dynoptic.model.alphabet.FSMAlphabet var40 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var41 = var40.toScmParametersString();
    java.lang.Object[] var42 = var40.toArray();
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    java.lang.String var48 = var45.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.alphabet.FSMAlphabet var56 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    boolean var64 = var58.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var70 = var68.getInitialObsForPid(100);
    var66.removeAllObs(var70);
    java.util.Set var72 = var66.getTerminalObs();
    var58.removeAllObs(var72);
    boolean var74 = var56.retainAll((java.util.Collection)var72);
    java.lang.Object[] var76 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var77 = var56.toArray(var76);
    java.lang.Object[] var78 = var56.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var45, var54, (java.util.Set)var56);
    boolean var80 = var40.removeAll((java.util.Collection)var54);
    java.lang.String var81 = var40.anyEventScmQRe();
    var1.removeAllObs((java.util.Set)var40);
    java.util.Set var84 = var1.getInitialObsForPid(0);
    boolean var85 = var1.isAccept();
    boolean var87 = var1.isAcceptForPid((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Part-0-361708073"+ "'", var10.equals("Part-0-361708073"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "digraph {\n"+ "'", var17.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "digraph {\n"+ "'", var18.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var26.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Part-0-54440580"+ "'", var30.equals("Part-0-54440580"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var35.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "[]"+ "'", var36.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + ""+ "'", var41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(_)"+ "'", var81.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test216() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test216"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    var0.clear();
    java.lang.String var3 = var0.toString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    dynoptic.model.alphabet.FSMAlphabet var11 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    boolean var19 = var13.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    var21.removeAllObs(var25);
    java.util.Set var27 = var21.getTerminalObs();
    var13.removeAllObs(var27);
    boolean var29 = var11.retainAll((java.util.Collection)var27);
    java.lang.String var30 = var11.toString();
    var5.addAllObs((java.util.Set)var11);
    dynoptic.model.alphabet.FSMAlphabet var32 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var53 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var39, var44, var50, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var44, var59, var66);
    boolean var69 = var32.retainAll((java.util.Collection)var66);
    int var70 = var32.size();
    boolean var71 = var11.retainAll((java.util.Collection)var32);
    java.util.Iterator var72 = var32.iterator();
    java.lang.String var73 = var32.anyEventScmQRe();
    boolean var74 = var0.removeAll((java.util.Collection)var32);
    java.lang.String var75 = var0.toScmParametersString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[]"+ "'", var30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "(_)"+ "'", var73.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + ""+ "'", var75.equals(""));

  }

  public void test217() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test217"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "Part-0-284291914", false, true);
    int var5 = var4.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var8 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var10 = var8.getInitialObsForPid(100);
    java.lang.String var11 = var8.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.alphabet.FSMAlphabet var19 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    var21.removeAllObs(var25);
    boolean var27 = var21.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    java.util.Set var35 = var29.getTerminalObs();
    var21.removeAllObs(var35);
    boolean var37 = var19.retainAll((java.util.Collection)var35);
    java.lang.Object[] var39 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var40 = var19.toArray(var39);
    java.lang.Object[] var41 = var19.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var8, var17, (java.util.Set)var19);
    boolean var43 = var4.equals((java.lang.Object)var19);
    dynoptic.model.automaton.EventTypeEncodings var44 = new dynoptic.model.automaton.EventTypeEncodings((java.util.Set)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test218"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getStates();
    dynoptic.model.alphabet.FSMAlphabet var22 = var19.getAlphabet();
    dynoptic.model.automaton.EventTypeEncodings var23 = var19.getEventTypeEncodings();
    var19.minimize();
    java.util.Set var25 = var19.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test219() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test219"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    dynoptic.model.alphabet.FSMAlphabet var7 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    boolean var15 = var9.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var21 = var19.getInitialObsForPid(100);
    var17.removeAllObs(var21);
    java.util.Set var23 = var17.getTerminalObs();
    var9.removeAllObs(var23);
    boolean var25 = var7.retainAll((java.util.Collection)var23);
    java.lang.String var26 = var7.toString();
    var1.addAllObs((java.util.Set)var7);
    java.util.Set var29 = var1.getTerminalObsForPid(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test220"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, false, 0, (-1));
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.cfsm.fsm.FSM var47 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var33, var38, var44, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var53 = var51.getInitialObsForPid(100);
    var49.removeAllObs(var53);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    var56.removeAllObs(var60);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var38, var53, var60);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    java.util.Set var68 = var64.getInitialObsForPid(1);
    java.util.Set var69 = var64.getInitialObservations();
    dynoptic.model.fifosys.cfsm.fsm.FSM var71 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var17, var38, var69, 10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    java.util.Set var76 = var73.getTransitioningEvents();
    java.util.Set var77 = var73.getInitialObservations();
    java.util.Set var78 = var73.getNextStates();
    dynoptic.model.fifosys.cfsm.fsm.FSM var80 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var5, var38, var78, (-1));
    boolean var81 = var5.isInitial();
    java.util.Set var82 = var5.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test221"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getStates();
    java.util.Set var22 = var19.getStates();
    dynoptic.model.automaton.EventTypeEncodings var23 = var19.getEventTypeEncodings();
    java.lang.String var24 = var19.toString();
    java.lang.String var25 = var19.toString();
    java.util.Set var26 = var19.getAcceptStates();
    java.util.Set var27 = var19.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var24.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var25.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test222() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test222"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(0, "Part-0-740301054", true, true);
    var4.markTerm();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test223"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    java.lang.String var21 = var5.toLongString();
    java.util.Set var22 = var5.getTransitioningEvents();
    int var23 = var5.getScmId();
    dynoptic.model.fifosys.cfsm.CFSMState var24 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    boolean var25 = var24.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = var24.getFSMState(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = var24.getFSMState(10);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var21.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test224"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 0);
    boolean var11 = var1.isAcceptForPid(10);
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 100);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var19 = var18.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15, var18);
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath(var22);
    dynoptic.model.fifosys.gfsm.GFSMPath var24 = new dynoptic.model.fifosys.gfsm.GFSMPath(var18, var23);
    dynoptic.model.fifosys.gfsm.GFSMPath var25 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, var18);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var30 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var32 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var33 = var30.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var34 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var30);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var39 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var40 = var39.getName();
    boolean var41 = var30.equals((java.lang.Object)var39);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    java.util.Set var49 = var43.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var51 = new dynoptic.model.fifosys.gfsm.GFSMPath(var43, 0);
    boolean var53 = var43.isAcceptForPid(10);
    dynoptic.model.fifosys.gfsm.GFSMPath var55 = new dynoptic.model.fifosys.gfsm.GFSMPath(var43, 100);
    dynoptic.model.fifosys.gfsm.GFSMPath var57 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var58 = new dynoptic.model.fifosys.gfsm.GFSMPath(var57);
    dynoptic.model.fifosys.gfsm.GFSMPath var60 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var61 = var60.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var62 = new dynoptic.model.fifosys.gfsm.GFSMPath(var57, var60);
    dynoptic.model.fifosys.gfsm.GFSMPath var64 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var65 = new dynoptic.model.fifosys.gfsm.GFSMPath(var64);
    dynoptic.model.fifosys.gfsm.GFSMPath var66 = new dynoptic.model.fifosys.gfsm.GFSMPath(var60, var65);
    dynoptic.model.fifosys.gfsm.GFSMPath var67 = new dynoptic.model.fifosys.gfsm.GFSMPath(var55, var60);
    boolean var68 = var30.equals((java.lang.Object)var60);
    dynoptic.model.fifosys.gfsm.GFSMPath var69 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var40.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);

  }

  public void test225() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test225"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var32, var47, var54);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    java.util.Set var62 = var58.getInitialObsForPid(1);
    java.util.Set var63 = var58.getInitialObservations();
    dynoptic.model.fifosys.cfsm.fsm.FSM var65 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var32, var63, 10);
    int var66 = var65.getPid();
    java.lang.String var67 = var65.toString();
    boolean var68 = var65.isDeterministic();
    java.util.Set var69 = var65.getInitStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var67.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test226"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 10, (-1));
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    boolean var33 = var27.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    java.util.Set var41 = var35.getTerminalObs();
    var27.removeAllObs(var41);
    dynoptic.model.automaton.EventTypeEncodings var43 = new dynoptic.model.automaton.EventTypeEncodings(var41);
    dynoptic.model.fifosys.cfsm.fsm.FSM var45 = new dynoptic.model.fifosys.cfsm.fsm.FSM(0, var5, var16, var41, (-1));
    java.util.Set var46 = var45.getAcceptStates();
    java.util.Set var47 = var45.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test227() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test227"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.automaton.EventTypeEncodings var68 = var67.getEventTypeEncodings();
    boolean var69 = var47.equals((java.lang.Object)var67);
    var47.minimize();
    var47.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test228() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test228"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var5 = new dynoptic.model.fifosys.cfsm.CFSMState(var4);
    boolean var6 = var4.isInitial();
    int var7 = var4.getScmId();
    int var8 = var4.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 100);

  }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test229"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    var5.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var21 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    java.util.Set var22 = var21.getTransitioningEvents();
    boolean var23 = var21.isAccept();
    java.util.Set var24 = var21.getTransitioningEvents();
    boolean var25 = var21.isInitial();
    boolean var27 = var21.isAcceptForPid(0);
    boolean var29 = var21.isAcceptForPid(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);

  }

  public void test230() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test230"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getStates();
    java.lang.String var22 = var19.toString();
    int var23 = var19.getPid();
    java.lang.String var24 = var19.toString();
    boolean var25 = var19.isDeterministic();
    java.util.Set var26 = var19.getAcceptStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var22.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var24.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test231() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test231"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "Part-0-284291914", false, true);
    boolean var5 = var4.isInitial();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var13 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var24 = var22.getInitialObsForPid(100);
    var20.removeAllObs(var24);
    dynoptic.model.fifosys.cfsm.fsm.FSM var27 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var13, var18, var24, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var40 = var38.getInitialObsForPid(100);
    var36.removeAllObs(var40);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var18, var33, var40);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var45 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var44);
    boolean var46 = var18.equals((java.lang.Object)var45);
    boolean var47 = var18.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var52 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var58 = var56.getInitialObsForPid(100);
    var54.removeAllObs(var58);
    java.util.Set var60 = var54.getTerminalObs();
    dynoptic.model.fifosys.cfsm.fsm.FSM var62 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var18, var52, var60, 1);
    boolean var63 = var4.equals((java.lang.Object)var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test232() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test232"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    java.lang.String var12 = var0.endGraphString();
    java.lang.String var13 = var0.endGraphString();
    java.lang.String var14 = var0.endGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var22 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.fifosys.cfsm.fsm.FSM var36 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var22, var27, var33, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    var45.removeAllObs(var49);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var27, var42, var49);
    java.lang.String var52 = var27.toLongString();
    java.lang.String var53 = var27.toLongString();
    java.lang.String var54 = var27.toString();
    java.util.Set var55 = var27.getNextStates();
    boolean var56 = var27.isInitial();
    int var57 = var27.getPid();
    java.lang.String var60 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var27, true, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "} // digraph {\n"+ "'", var12.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "} // digraph {\n"+ "'", var13.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "} // digraph {\n"+ "'", var14.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var52.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var53.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "0"+ "'", var54.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "  0 [label=\"0\",shape=circle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->0;\n"+ "'", var60.equals("  0 [label=\"0\",shape=circle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->0;\n"));

  }

  public void test233() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test233"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    var1.recreateCachedTransitions();
    dynoptic.model.alphabet.FSMAlphabet var3 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var4 = var3.toScmParametersString();
    java.lang.Object[] var5 = var3.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, (-1));
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var22 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var28 = var26.getInitialObsForPid(100);
    var24.removeAllObs(var28);
    dynoptic.model.fifosys.cfsm.fsm.FSM var31 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var17, var22, var28, 100);
    int var32 = var17.getPid();
    int var33 = var17.getScmId();
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var37 = var35.getInitialObsForPid(100);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var11, var17, var37, 0);
    boolean var40 = var3.retainAll((java.util.Collection)var37);
    var1.addAllObs(var37);
    boolean var43 = var1.isInitForPid(100);
    java.util.Set var44 = var1.getInitialObservations();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test234() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test234"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    var5.setAccept();
    boolean var21 = var5.isInitial();
    dynoptic.model.alphabet.FSMAlphabet var22 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var34 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var40 = var38.getInitialObsForPid(100);
    var36.removeAllObs(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSM var43 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var29, var34, var40, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    var45.removeAllObs(var49);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var34, var49, var56);
    boolean var59 = var22.retainAll((java.util.Collection)var56);
    java.lang.Object[] var60 = var22.toArray();
    java.util.Iterator var61 = var22.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var63 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var64 = var63.toIntermediateString();
    boolean var65 = var63.isAccept();
    boolean var66 = var22.contains((java.lang.Object)var65);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var71 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var72 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var71);
    java.lang.String var73 = var72.toString();
    boolean var74 = var72.hasOccurred();
    boolean var75 = var22.remove((java.lang.Object)var74);
    boolean var76 = var5.equals((java.lang.Object)var22);
    java.lang.String var77 = var22.toScmParametersString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "Part-0-1774981607"+ "'", var64.equals("Part-0-1774981607"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var73.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + ""+ "'", var77.equals(""));

  }

  public void test235() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test235"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 0);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var9);
    boolean var11 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var9);
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var14 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13);
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var17 = var16.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, var16);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var21 = new dynoptic.model.fifosys.gfsm.GFSMPath(var20);
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(var16, var21);
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath(var9, var16);
    dynoptic.model.fifosys.gfsm.GFSMPath var25 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var26 = new dynoptic.model.fifosys.gfsm.GFSMPath(var25);
    dynoptic.model.fifosys.gfsm.GFSMPath var28 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var29 = var28.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var30 = new dynoptic.model.fifosys.gfsm.GFSMPath(var25, var28);
    dynoptic.model.fifosys.gfsm.GFSMPath var31 = new dynoptic.model.fifosys.gfsm.GFSMPath(var25);
    dynoptic.model.fifosys.gfsm.GFSMPath var32 = new dynoptic.model.fifosys.gfsm.GFSMPath(var25);
    int var33 = var25.numEvents();
    boolean var34 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var25);
    int var35 = var25.numStates();
    dynoptic.model.fifosys.gfsm.GFSMPath var36 = new dynoptic.model.fifosys.gfsm.GFSMPath(var23, var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var37 = var25.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);

  }

  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test236"); }


    dynoptic.model.alphabet.FSMAlphabet var1 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var8 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var13 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var19 = var17.getInitialObsForPid(100);
    var15.removeAllObs(var19);
    dynoptic.model.fifosys.cfsm.fsm.FSM var22 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var8, var13, var19, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var28 = var26.getInitialObsForPid(100);
    var24.removeAllObs(var28);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var13, var28, var35);
    boolean var38 = var1.retainAll((java.util.Collection)var35);
    java.util.Iterator var39 = var1.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var42 = var41.toIntermediateString();
    boolean var43 = var41.isAccept();
    java.util.Set var45 = var41.getInitialObsForPid(10);
    boolean var46 = var1.addAll((java.util.Collection)var45);
    java.util.Set var47 = var1.getLocalEventScmStrings();
    java.util.Iterator var48 = var1.iterator();
    java.util.Set var49 = var1.getLocalEventScmStrings();
    int var50 = var1.size();
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(1, (java.util.Set)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Part-0-425548629"+ "'", var42.equals("Part-0-425548629"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);

  }

  public void test237() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test237"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    boolean var8 = var2.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    java.util.Set var16 = var10.getTerminalObs();
    var2.removeAllObs(var16);
    boolean var18 = var0.retainAll((java.util.Collection)var16);
    java.lang.String var19 = var0.anyEventScmQRe();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var26 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var27 = var24.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var28 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var24);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var29 = var28.getObsState();
    java.lang.String var30 = var28.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var31 = var28.getObsState();
    boolean var32 = var0.contains((java.lang.Object)var31);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var35 = var34.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(var34, 1);
    dynoptic.model.fifosys.gfsm.GFSMPath var38 = new dynoptic.model.fifosys.gfsm.GFSMPath(var37);
    boolean var39 = var31.equals((java.lang.Object)var37);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var43 = new dynoptic.model.fifosys.gfsm.GFSMPath(var41, 0);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath(var37, var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(_)"+ "'", var19.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var30.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "Part-0-905828854"+ "'", var35.equals("Part-0-905828854"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test238() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test238"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    boolean var9 = var4.isInitial();
    int var10 = var4.getPid();
    boolean var11 = var4.isTerminal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test239() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test239"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    java.lang.String var21 = var5.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    int var42 = var41.getPid();
    java.lang.String var43 = var41.toString();
    boolean var44 = var5.equals((java.lang.Object)var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var21.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var43.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test240() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test240"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.lang.String var16 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var13, true, false);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var24 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.fifosys.cfsm.fsm.FSM var38 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var24, var29, var35, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var51 = var49.getInitialObsForPid(100);
    var47.removeAllObs(var51);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var29, var44, var51);
    dynoptic.model.fifosys.gfsm.GFSMPath var55 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var56 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var55);
    boolean var57 = var29.equals((java.lang.Object)var56);
    dynoptic.model.fifosys.cfsm.CFSMState var58 = new dynoptic.model.fifosys.cfsm.CFSMState(var29);
    boolean var59 = var58.isInitial();
    boolean var60 = var58.isAccept();
    boolean var61 = var58.isAccept();
    java.lang.String var64 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString((-1), (dynoptic.model.AbsFSMState)var58, true, true);
    boolean var65 = var58.isInitial();
    java.util.Set var66 = var58.getTransitioningEvents();
    boolean var67 = var58.isAccept();
    java.util.Set var68 = var58.getNextStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->0;\n"+ "'", var16.equals("  0 [label=\"[]\",shape=circle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "  -1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@64605eb7\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->-1;\n"+ "'", var64.equals("  -1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@64605eb7\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->-1;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test241() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test241"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, (-1));
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    int var26 = var11.getPid();
    int var27 = var11.getScmId();
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    dynoptic.model.fifosys.cfsm.fsm.FSM var33 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var5, var11, var31, 0);
    dynoptic.model.automaton.EventTypeEncodings var34 = var33.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.GFSMPath var36 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(var36);
    dynoptic.model.fifosys.gfsm.GFSMPath var39 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var40 = var39.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var41 = new dynoptic.model.fifosys.gfsm.GFSMPath(var36, var39);
    dynoptic.model.fifosys.gfsm.GFSMPath var43 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath(var43);
    dynoptic.model.fifosys.gfsm.GFSMPath var46 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var47 = var46.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var48 = new dynoptic.model.fifosys.gfsm.GFSMPath(var43, var46);
    dynoptic.model.fifosys.gfsm.GFSMPath var50 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var51 = new dynoptic.model.fifosys.gfsm.GFSMPath(var46, var50);
    boolean var52 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var50);
    dynoptic.model.fifosys.gfsm.GFSMPath var53 = new dynoptic.model.fifosys.gfsm.GFSMPath(var39, var50);
    dynoptic.model.fifosys.gfsm.GFSMPath var55 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var56 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var55);
    dynoptic.model.fifosys.gfsm.GFSMPath var57 = new dynoptic.model.fifosys.gfsm.GFSMPath(var50, var55);
    boolean var58 = var34.equals((java.lang.Object)var50);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var59 = var50.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test242() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test242"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var17);
    java.util.Set var23 = var21.getInitialObsForPid(1);
    java.util.Set var24 = var21.getTerminalObs();
    java.util.Set var25 = var21.getNextStates();
    boolean var26 = var21.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);

  }

  public void test243() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test243"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    dynoptic.model.alphabet.FSMAlphabet var7 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    boolean var15 = var9.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var21 = var19.getInitialObsForPid(100);
    var17.removeAllObs(var21);
    java.util.Set var23 = var17.getTerminalObs();
    var9.removeAllObs(var23);
    boolean var25 = var7.retainAll((java.util.Collection)var23);
    java.lang.String var26 = var7.toString();
    var1.addAllObs((java.util.Set)var7);
    dynoptic.model.alphabet.FSMAlphabet var28 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var35 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var40 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var46 = var44.getInitialObsForPid(100);
    var42.removeAllObs(var46);
    dynoptic.model.fifosys.cfsm.fsm.FSM var49 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var35, var40, var46, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var40, var55, var62);
    boolean var65 = var28.retainAll((java.util.Collection)var62);
    int var66 = var28.size();
    boolean var67 = var7.retainAll((java.util.Collection)var28);
    java.lang.String var68 = var28.toScmParametersString();
    java.util.Set var69 = var28.getLocalEventScmStrings();
    java.util.Iterator var70 = var28.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test244() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test244"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    java.lang.String var36 = var11.toLongString();
    java.lang.String var37 = var11.toLongString();
    int var38 = var11.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    boolean var43 = var40.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var45 = new dynoptic.model.fifosys.gfsm.GFSMPath(var40, 10);
    boolean var46 = var11.equals((java.lang.Object)var40);
    java.util.Set var47 = var40.getNextStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var36.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var37.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test245() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test245"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    java.util.Set var8 = var2.getTerminalObs();
    int var9 = var2.getNumProcesses();
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    java.util.Set var14 = var11.getTransitioningEvents();
    java.util.Set var15 = var11.getInitialObservations();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var21 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.cfsm.fsm.FSM var35 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var21, var26, var32, 100);
    dynoptic.model.automaton.EventTypeEncodings var36 = var35.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var41 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var42 = var36.equals((java.lang.Object)true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSM var62 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var48, var53, var59, 100);
    int var63 = var48.getPid();
    java.lang.String var64 = var48.toLongString();
    boolean var65 = var36.equals((java.lang.Object)var64);
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var69 = var67.getInitialObsForPid(100);
    java.util.Set var70 = var67.getTransitioningEvents();
    boolean var71 = var36.equals((java.lang.Object)var70);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(1, (dynoptic.model.AbsFSMState)var2, var15, var70);
    boolean var74 = var2.isInitForPid(10);
    int var75 = var2.getNumProcesses();
    int var76 = var2.getNumProcesses();
    java.util.Set var78 = var2.getInitialObsForPid(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var64.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test246"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var10 = var4.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test247() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test247"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getStates();
    java.util.Set var22 = var19.getStates();
    dynoptic.model.automaton.EventTypeEncodings var23 = var19.getEventTypeEncodings();
    java.lang.String var24 = var19.toString();
    dynoptic.model.fifosys.gfsm.GFSMPath var26 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var27 = new dynoptic.model.fifosys.gfsm.GFSMPath(var26);
    dynoptic.model.fifosys.gfsm.GFSMPath var29 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var30 = var29.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var31 = new dynoptic.model.fifosys.gfsm.GFSMPath(var26, var29);
    dynoptic.model.fifosys.gfsm.GFSMPath var33 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var34 = new dynoptic.model.fifosys.gfsm.GFSMPath(var29, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var35 = new dynoptic.model.fifosys.gfsm.GFSMPath(var34);
    boolean var36 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var34);
    boolean var37 = var19.equals((java.lang.Object)var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var24.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test248() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test248"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 1, 1);

  }

  public void test249() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test249"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var4 = var2.getInitialObsForPid(100);
    java.util.Set var5 = var2.getTransitioningEvents();
    java.util.Set var6 = var2.getInitialObservations();
    java.util.Set var7 = var2.getNextStates();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var11 = var9.getInitialObsForPid(100);
    java.lang.String var12 = var9.toIntermediateString();
    dynoptic.model.alphabet.FSMAlphabet var13 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var14 = var13.toScmParametersString();
    var13.clear();
    var9.addAllObs((java.util.Set)var13);
    dynoptic.model.alphabet.FSMAlphabet var17 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var18 = var17.toScmParametersString();
    java.lang.Object[] var19 = var17.toArray();
    boolean var20 = var17.isEmpty();
    var9.addAllObs((java.util.Set)var17);
    java.lang.Object[] var22 = var17.toArray();
    boolean var23 = var17.isEmpty();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var34 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var40 = var38.getInitialObsForPid(100);
    var36.removeAllObs(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSM var43 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var29, var34, var40, 100);
    dynoptic.model.alphabet.FSMAlphabet var44 = var43.getAlphabet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(100, (dynoptic.model.AbsFSMState)var2, (java.util.Set)var17, (java.util.Set)var44);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Part-0-1421636119"+ "'", var12.equals("Part-0-1421636119"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test250"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var34 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var40 = var38.getInitialObsForPid(100);
    var36.removeAllObs(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSM var43 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var29, var34, var40, 100);
    int var44 = var29.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var57 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var62 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var68 = var66.getInitialObsForPid(100);
    var64.removeAllObs(var68);
    dynoptic.model.fifosys.cfsm.fsm.FSM var71 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var57, var62, var68, 100);
    var46.removeAllObs(var68);
    dynoptic.model.fifosys.cfsm.fsm.FSM var74 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var23, var29, var68, 1);
    java.util.Set var75 = var74.getAcceptStates();
    dynoptic.model.automaton.EncodedAutomaton var76 = new dynoptic.model.automaton.EncodedAutomaton(var17, var74);
    var76.minimize();
    dynoptic.model.fifosys.gfsm.GFSMState var79 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var81 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var83 = var81.getInitialObsForPid(100);
    var79.removeAllObs(var83);
    java.util.Set var85 = var79.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var87 = new dynoptic.model.fifosys.gfsm.GFSMPath(var79, 0);
    boolean var89 = var79.isAcceptForPid(10);
    int var90 = var79.getNumProcesses();
    var79.recreateCachedTransitions();
    boolean var92 = var76.equals((java.lang.Object)var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test251"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    java.lang.String var36 = var11.toLongString();
    java.lang.String var37 = var11.toLongString();
    int var38 = var11.getPid();
    dynoptic.model.fifosys.cfsm.CFSMState var39 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    java.lang.String var40 = var11.toShortIntString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var36.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var37.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "0"+ "'", var40.equals("0"));

  }

  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test252"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var3 = var1.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var5 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var6 = var1.numStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test253() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test253"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 10, (-1));
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    boolean var33 = var27.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    java.util.Set var41 = var35.getTerminalObs();
    var27.removeAllObs(var41);
    dynoptic.model.automaton.EventTypeEncodings var43 = new dynoptic.model.automaton.EventTypeEncodings(var41);
    dynoptic.model.fifosys.cfsm.fsm.FSM var45 = new dynoptic.model.fifosys.cfsm.fsm.FSM(0, var5, var16, var41, (-1));
    dynoptic.model.alphabet.FSMAlphabet var46 = var45.getAlphabet();
    var46.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test254"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getStates();
    dynoptic.model.alphabet.FSMAlphabet var22 = var19.getAlphabet();
    java.util.Set var23 = var19.getAcceptStates();
    boolean var24 = var19.isDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);

  }

  public void test255() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test255"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    boolean var43 = var40.isInitForPid(0);
    java.util.Set var44 = var40.getTransitioningEvents();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var46 = var40.isAcceptForPid(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test256() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test256"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "Part-0-2132318418", false, false);
    boolean var6 = var4.equals((java.lang.Object)"  -1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@5454ea50\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->-1;\n");
    dynoptic.model.alphabet.FSMAlphabet var7 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.alphabet.FSMAlphabet var8 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    boolean var16 = var10.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    java.util.Set var24 = var18.getTerminalObs();
    var10.removeAllObs(var24);
    boolean var26 = var8.retainAll((java.util.Collection)var24);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    dynoptic.model.fifosys.cfsm.fsm.FSM var46 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var32, var37, var43, 100);
    int var47 = var46.getPid();
    java.util.Set var48 = var46.getStates();
    boolean var49 = var8.addAll((java.util.Collection)var48);
    dynoptic.model.alphabet.FSMAlphabet var50 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    boolean var58 = var52.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    java.util.Set var66 = var60.getTerminalObs();
    var52.removeAllObs(var66);
    boolean var68 = var50.retainAll((java.util.Collection)var66);
    java.lang.Object[] var70 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var71 = var50.toArray(var70);
    java.lang.Object[] var72 = var50.toArray();
    java.lang.Object[] var73 = var8.toArray(var72);
    dynoptic.model.alphabet.FSMAlphabet var74 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var76 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var80 = var78.getInitialObsForPid(100);
    var76.removeAllObs(var80);
    boolean var82 = var76.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var84 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var88 = var86.getInitialObsForPid(100);
    var84.removeAllObs(var88);
    java.util.Set var90 = var84.getTerminalObs();
    var76.removeAllObs(var90);
    boolean var92 = var74.retainAll((java.util.Collection)var90);
    java.lang.Object[] var94 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var95 = var74.toArray(var94);
    java.lang.Object[] var96 = var74.toArray();
    java.lang.Object[] var97 = var8.toArray(var96);
    java.lang.Object[] var98 = var7.toArray(var97);
    boolean var99 = var4.equals((java.lang.Object)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test257() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test257"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    int var21 = var5.getScmId();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var26 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var28 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var29 = var26.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var30 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var26);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var31 = var30.getObsState();
    int var32 = var30.getPid();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var37 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var39 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var40 = var37.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var41 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var37);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = var41.getObsState();
    java.lang.String var43 = var41.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var44 = var41.getObsState();
    boolean var45 = var41.isTermState();
    boolean var46 = var41.isTermState();
    boolean var47 = var41.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var48 = var41.getObsState();
    var30.addRemoteDependency(var41);
    java.lang.String var50 = var41.toString();
    boolean var51 = var5.equals((java.lang.Object)var50);
    boolean var52 = var5.isInitial();
    java.lang.String var53 = var5.toString();
    dynoptic.model.fifosys.cfsm.CFSMState var54 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    boolean var55 = var54.isAccept();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.cfsm.fsm.FSMState var57 = var54.getFSMState(1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var43.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var50.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "0"+ "'", var53.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);

  }

  public void test258() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test258"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var17);
    java.util.Set var23 = var21.getInitialObsForPid(1);
    java.util.Set var25 = var21.getTerminalObsForPid(100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.cfsm.fsm.FSM var47 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var33, var38, var44, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var53 = var51.getInitialObsForPid(100);
    var49.removeAllObs(var53);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    var56.removeAllObs(var60);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var38, var53, var60);
    dynoptic.model.fifosys.gfsm.GFSMPath var64 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var65 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var64);
    boolean var66 = var38.equals((java.lang.Object)var65);
    boolean var67 = var38.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var72 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.gfsm.GFSMState var74 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var76 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var78 = var76.getInitialObsForPid(100);
    var74.removeAllObs(var78);
    java.util.Set var80 = var74.getTerminalObs();
    dynoptic.model.fifosys.cfsm.fsm.FSM var82 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var38, var72, var80, 1);
    var21.addAllObs(var80);
    java.lang.String var84 = var21.toLongString();
    java.util.Set var85 = var21.getTerminalObs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "[]_i_t"+ "'", var84.equals("[]_i_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test259"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var2 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    int var3 = var1.numEvents();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var4 = var1.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test260() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test260"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    var0.clear();
    java.lang.String var3 = var0.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var8 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var11 = var8.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var12 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var8);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var17 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var19 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var20 = var17.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var21 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var17);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var22 = var21.getObsState();
    boolean var23 = var21.isEnabled();
    var21.setOccurred(false);
    var12.addRemoteDependency(var21);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var27 = var21.getObsState();
    boolean var28 = var0.remove((java.lang.Object)var27);
    java.lang.String var29 = var0.anyEventScmQRe();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var35 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var40 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var46 = var44.getInitialObsForPid(100);
    var42.removeAllObs(var46);
    dynoptic.model.fifosys.cfsm.fsm.FSM var49 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var35, var40, var46, 100);
    int var50 = var49.getPid();
    java.util.Set var51 = var49.getStates();
    java.util.Set var52 = var49.getStates();
    java.util.Set var53 = var49.getAcceptStates();
    java.util.Set var54 = var49.getAcceptStates();
    boolean var55 = var0.removeAll((java.util.Collection)var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(_)"+ "'", var29.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test261"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.lang.String var21 = var19.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    java.util.Set var42 = var41.getAcceptStates();
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var48 = var46.getInitialObsForPid(100);
    var44.removeAllObs(var48);
    boolean var50 = var44.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    java.util.Set var58 = var52.getTerminalObs();
    var44.removeAllObs(var58);
    dynoptic.model.automaton.EventTypeEncodings var60 = new dynoptic.model.automaton.EventTypeEncodings(var58);
    dynoptic.model.automaton.EncodedAutomaton var61 = var41.getEncodedAutomaton(var60);
    dynoptic.model.automaton.EncodedAutomaton var62 = var19.getEncodedAutomaton(var60);
    java.util.Set var63 = var19.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var21.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test262() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test262"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var16 = var13.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var17 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = var17.getObsState();
    boolean var19 = var17.isEnabled();
    var17.setOccurred(false);
    var8.addRemoteDependency(var17);
    boolean var23 = var8.hasOccurred();
    java.lang.String var24 = var8.toString();
    int var25 = var8.getPid();
    int var26 = var8.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var24.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));

  }

  public void test263() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test263"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, false, 100, (-1));

  }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test264"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    java.lang.String var2 = var0.toString();
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    java.lang.Object[] var5 = var0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test265() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test265"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(0, "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n", true, false);
    boolean var5 = var4.isTerminal();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var10 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var12 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var13 = var10.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var14 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var10);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var15 = var14.getObsState();
    boolean var16 = var14.isEnabled();
    boolean var17 = var14.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = var14.getObsState();
    boolean var19 = var4.equals((java.lang.Object)var18);
    int var20 = var4.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);

  }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test266"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var5 = var4.isAccept();
    boolean var6 = var4.isInitial();
    java.lang.String var7 = var4.toShortIntString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "0"+ "'", var7.equals("0"));

  }

  public void test267() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test267"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var3 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var4 = var1.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test268() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test268"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    java.lang.Object[] var2 = var0.toArray();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var8 = var5.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    dynoptic.model.alphabet.FSMAlphabet var16 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    boolean var24 = var18.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var30 = var28.getInitialObsForPid(100);
    var26.removeAllObs(var30);
    java.util.Set var32 = var26.getTerminalObs();
    var18.removeAllObs(var32);
    boolean var34 = var16.retainAll((java.util.Collection)var32);
    java.lang.Object[] var36 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var37 = var16.toArray(var36);
    java.lang.Object[] var38 = var16.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var5, var14, (java.util.Set)var16);
    boolean var40 = var0.removeAll((java.util.Collection)var14);
    dynoptic.model.alphabet.FSMAlphabet var41 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSM var62 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var48, var53, var59, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var68 = var66.getInitialObsForPid(100);
    var64.removeAllObs(var68);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    var71.removeAllObs(var75);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var53, var68, var75);
    boolean var78 = var41.retainAll((java.util.Collection)var75);
    java.lang.Object[] var79 = var41.toArray();
    java.util.Iterator var80 = var41.iterator();
    boolean var81 = var0.addAll((java.util.Collection)var41);
    int var82 = var41.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);

  }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test269"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var3 = var1.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    boolean var5 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    int var6 = var1.numEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test270"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var14 = var13.getName();
    boolean var15 = var4.equals((java.lang.Object)var13);
    java.lang.String var16 = var13.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var14.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var16.equals("ObsDAGNode[i_hi!_t]"));

  }

  public void test271() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test271"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, false, 0, 10);

  }

  public void test272() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test272"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("49");

  }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test273"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    java.util.Set var5 = var4.getTransitioningEvents();
    java.lang.String var6 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "1"+ "'", var6.equals("1"));

  }

  public void test274() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test274"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var17);
    java.util.Set var22 = var21.getTransitioningEvents();
    java.lang.String var23 = var21.toIntermediateString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "Part-0-490925484"+ "'", var23.equals("Part-0-490925484"));

  }

  public void test275() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test275"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "Part-0-284291914", false, true);
    int var5 = var4.getPid();
    java.lang.String var6 = var4.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var13 = var12.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var24 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var30 = var28.getInitialObsForPid(100);
    var26.removeAllObs(var30);
    dynoptic.model.fifosys.cfsm.fsm.FSM var33 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var19, var24, var30, 100);
    int var34 = var19.getPid();
    int var35 = var19.getScmId();
    dynoptic.model.alphabet.FSMAlphabet var36 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.fifosys.cfsm.fsm.FSM var57 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var43, var48, var54, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var70 = var68.getInitialObsForPid(100);
    var66.removeAllObs(var70);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var48, var63, var70);
    boolean var73 = var36.retainAll((java.util.Collection)var70);
    java.lang.String var74 = var36.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var76 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var19, (java.util.Set)var36, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var77 = new dynoptic.model.fifosys.cfsm.CFSMState(var19);
    boolean var78 = var4.equals((java.lang.Object)var77);
    boolean var79 = var77.isAccept();
    boolean var80 = var77.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Part-0-284291914_t"+ "'", var6.equals("Part-0-284291914_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "[]"+ "'", var74.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);

  }

  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test276"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 0);
    boolean var11 = var1.isAcceptForPid(10);
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 100);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var19 = var18.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15, var18);
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath(var22);
    dynoptic.model.fifosys.gfsm.GFSMPath var24 = new dynoptic.model.fifosys.gfsm.GFSMPath(var18, var23);
    dynoptic.model.fifosys.gfsm.GFSMPath var25 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, var18);
    boolean var26 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var27 = var18.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);

  }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test277"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.lang.String var4 = var1.toIntermediateString();
    dynoptic.model.alphabet.FSMAlphabet var5 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var6 = var5.toScmParametersString();
    var5.clear();
    var1.addAllObs((java.util.Set)var5);
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    boolean var16 = var10.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    java.util.Set var24 = var18.getTerminalObs();
    var10.removeAllObs(var24);
    dynoptic.model.automaton.EventTypeEncodings var26 = new dynoptic.model.automaton.EventTypeEncodings(var24);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    var45.removeAllObs(var49);
    dynoptic.model.fifosys.cfsm.fsm.FSM var52 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var38, var43, var49, 100);
    int var53 = var38.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var66 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var71 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var77 = var75.getInitialObsForPid(100);
    var73.removeAllObs(var77);
    dynoptic.model.fifosys.cfsm.fsm.FSM var80 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var66, var71, var77, 100);
    var55.removeAllObs(var77);
    dynoptic.model.fifosys.cfsm.fsm.FSM var83 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var32, var38, var77, 1);
    java.util.Set var84 = var83.getAcceptStates();
    dynoptic.model.automaton.EncodedAutomaton var85 = new dynoptic.model.automaton.EncodedAutomaton(var26, var83);
    var85.minimize();
    dk.brics.automaton.Automaton var87 = var85.getAutomaton();
    boolean var88 = var5.contains((java.lang.Object)var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Part-0-1896678940"+ "'", var4.equals("Part-0-1896678940"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test278() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test278"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("Part-0-986180929");

  }

  public void test279() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test279"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var16 = var13.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var17 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = var17.getObsState();
    boolean var19 = var17.isEnabled();
    var17.setOccurred(false);
    var8.addRemoteDependency(var17);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var23 = var17.getObsState();
    dynoptic.model.export.DotExportFormatter var24 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var25 = var24.beginGraphString();
    java.lang.String var26 = var24.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    java.lang.String var34 = var24.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var29, true, false);
    java.lang.String var35 = var24.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var39 = var38.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var41 = new dynoptic.model.fifosys.gfsm.GFSMPath(var38, 1);
    java.lang.String var44 = var24.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var38, false, true);
    java.util.Set var46 = var38.getTerminalObsForPid(100);
    boolean var47 = var23.equals((java.lang.Object)var46);
    int var48 = var23.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "digraph {\n"+ "'", var25.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "digraph {\n"+ "'", var26.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var34.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "digraph {\n"+ "'", var35.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Part-0-1155822817"+ "'", var39.equals("Part-0-1155822817"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var44.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1));

  }

  public void test280() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test280"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getAcceptStates();
    java.util.Set var22 = var19.getInitStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test281"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var9 = var1.numEvents();
    boolean var10 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var14 = var13.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test282() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test282"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var8.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = var8.getObsState();
    boolean var12 = var8.isTermState();
    boolean var13 = var8.isTermState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var14 = var8.getNextState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var15 = var8.getObsState();
    dynoptic.model.alphabet.FSMAlphabet var16 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    boolean var24 = var18.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var30 = var28.getInitialObsForPid(100);
    var26.removeAllObs(var30);
    java.util.Set var32 = var26.getTerminalObs();
    var18.removeAllObs(var32);
    boolean var34 = var16.retainAll((java.util.Collection)var32);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var40 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var45 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var51 = var49.getInitialObsForPid(100);
    var47.removeAllObs(var51);
    dynoptic.model.fifosys.cfsm.fsm.FSM var54 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var40, var45, var51, 100);
    int var55 = var54.getPid();
    java.util.Set var56 = var54.getStates();
    boolean var57 = var16.addAll((java.util.Collection)var56);
    dynoptic.model.alphabet.FSMAlphabet var58 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    boolean var66 = var60.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var70 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var72 = var70.getInitialObsForPid(100);
    var68.removeAllObs(var72);
    java.util.Set var74 = var68.getTerminalObs();
    var60.removeAllObs(var74);
    boolean var76 = var58.retainAll((java.util.Collection)var74);
    java.lang.Object[] var78 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var79 = var58.toArray(var78);
    java.lang.Object[] var80 = var58.toArray();
    java.lang.Object[] var81 = var16.toArray(var80);
    boolean var82 = var15.equals((java.lang.Object)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);

  }

  public void test283() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test283"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    synoptic.model.event.Event var6 = var5.getNextEvent();
    java.lang.String var7 = var5.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var12 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var14 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var15 = var12.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var16 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var12);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var17 = var16.getObsState();
    java.lang.String var18 = var16.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var19 = var16.getObsState();
    boolean var20 = var16.isTermState();
    boolean var21 = var16.isTermState();
    boolean var22 = var16.isTermState();
    var16.setOccurred(false);
    java.lang.String var25 = var16.toString();
    var5.addRemoteDependency(var16);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var27 = var16.getNextState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var7.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var18.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var25.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test284() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test284"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.util.Set var4 = var1.getTransitioningEvents();
    java.util.Set var6 = var1.getTerminalObsForPid(100);
    java.util.Set var8 = var1.getTerminalObsForPid(100);
    int var9 = var1.getNumProcesses();
    java.lang.String var10 = var1.toString();
    java.lang.String var11 = var1.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));

  }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test285"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var11);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, var15);
    boolean var17 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var21 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var20);
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15, var20);
    int var23 = var15.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var24 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15);
    int var25 = var24.numEvents();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var26 = var24.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);

  }

  public void test286() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test286"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(0, true, false);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var4 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var3);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var3);
    boolean var6 = var5.isInitState();
    boolean var7 = var5.isTermState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test287"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("Part-0-727826050");

  }

  public void test288() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test288"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    java.lang.String var21 = var5.toLongString();
    java.util.Set var22 = var5.getTransitioningEvents();
    int var23 = var5.getScmId();
    dynoptic.model.fifosys.cfsm.CFSMState var24 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    boolean var25 = var24.isAccept();
    boolean var26 = var24.isInitial();
    boolean var28 = var24.isAcceptForPid(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var21.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test289() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test289"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "Part-0-284291914", false, true);
    boolean var5 = var4.isInitial();
    boolean var6 = var4.isTerminal();
    java.lang.String var7 = var4.getName();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    boolean var9 = var8.isTermState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Part-0-284291914"+ "'", var7.equals("Part-0-284291914"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test290() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test290"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var8 = var1.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var10 = var9.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test291() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test291"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    java.lang.String var36 = var11.toLongString();
    java.lang.String var37 = var11.toString();
    java.util.Set var38 = var11.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var36.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "0"+ "'", var37.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test292"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var8.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = var8.getObsState();
    boolean var12 = var8.isTermState();
    var8.setOccurred(false);
    boolean var15 = var8.isTermState();
    boolean var16 = var8.isTermState();
    boolean var17 = var8.isInitState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test293"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    java.lang.Object[] var2 = var0.toArray();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var8 = var5.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    dynoptic.model.alphabet.FSMAlphabet var16 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    boolean var24 = var18.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var30 = var28.getInitialObsForPid(100);
    var26.removeAllObs(var30);
    java.util.Set var32 = var26.getTerminalObs();
    var18.removeAllObs(var32);
    boolean var34 = var16.retainAll((java.util.Collection)var32);
    java.lang.Object[] var36 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var37 = var16.toArray(var36);
    java.lang.Object[] var38 = var16.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var5, var14, (java.util.Set)var16);
    boolean var40 = var0.removeAll((java.util.Collection)var14);
    dynoptic.model.alphabet.FSMAlphabet var41 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSM var62 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var48, var53, var59, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var68 = var66.getInitialObsForPid(100);
    var64.removeAllObs(var68);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    var71.removeAllObs(var75);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var53, var68, var75);
    boolean var78 = var41.retainAll((java.util.Collection)var75);
    java.lang.Object[] var79 = var41.toArray();
    java.util.Iterator var80 = var41.iterator();
    boolean var81 = var0.addAll((java.util.Collection)var41);
    boolean var83 = var41.contains((java.lang.Object)"Part-0-1560226419");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test294"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    dynoptic.model.automaton.EventTypeEncodings var42 = var41.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var43 = var19.getEncodedAutomaton(var42);
    int var44 = var19.getPid();
    var19.minimize();
    int var46 = var19.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));

  }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test295"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 1, 10);
    java.lang.String var5 = var4.toShortIntString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "10"+ "'", var5.equals("10"));

  }

  public void test296() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test296"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 1, 10);
    boolean var5 = var4.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test297() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test297"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var58.getPid();
    java.util.Set var60 = var58.getAcceptStates();
    boolean var61 = var0.retainAll((java.util.Collection)var60);
    boolean var62 = var0.isEmpty();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var68 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var79 = var77.getInitialObsForPid(100);
    var75.removeAllObs(var79);
    dynoptic.model.fifosys.cfsm.fsm.FSM var82 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var68, var73, var79, 100);
    boolean var83 = var0.remove((java.lang.Object)var73);
    java.lang.String var84 = var0.anyEventScmQRe();
    boolean var85 = var0.isEmpty();
    java.util.Set var86 = var0.getLocalEventScmStrings();
    java.lang.String var87 = var0.anyEventScmQRe();
    java.lang.String var88 = var0.toScmParametersString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "(_)"+ "'", var84.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "(_)"+ "'", var87.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + ""+ "'", var88.equals(""));

  }

  public void test298() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test298"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var8.toString();
    boolean var11 = var8.isEnabled();
    boolean var12 = var8.isInitState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var13 = var8.getPrevState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test299"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var6 = var5.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    int var27 = var12.getPid();
    int var28 = var12.getScmId();
    dynoptic.model.alphabet.FSMAlphabet var29 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var41 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.cfsm.fsm.FSM var50 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var36, var41, var47, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var41, var56, var63);
    boolean var66 = var29.retainAll((java.util.Collection)var63);
    java.lang.String var67 = var29.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var12, (java.util.Set)var29, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var70 = new dynoptic.model.fifosys.cfsm.CFSMState(var12);
    dynoptic.model.fifosys.cfsm.CFSMState var71 = new dynoptic.model.fifosys.cfsm.CFSMState(var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var73 = var71.isAcceptForPid(1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[]"+ "'", var67.equals("[]"));

  }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test300"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getInitStates();
    java.util.Set var22 = var19.getStates();
    boolean var24 = var19.equals((java.lang.Object)"Part-0-1853704944");
    java.util.Set var25 = var19.getAcceptStates();
    java.util.Set var26 = var19.getInitStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test301() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test301"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    boolean var43 = var40.isInitForPid(0);
    boolean var45 = var40.isAcceptForPid(0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var47 = var40.getFSMState(0);
    var47.setAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test302() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test302"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    boolean var28 = var22.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    java.util.Set var36 = var30.getTerminalObs();
    var22.removeAllObs(var36);
    dynoptic.model.automaton.EventTypeEncodings var38 = new dynoptic.model.automaton.EventTypeEncodings(var36);
    dynoptic.model.automaton.EncodedAutomaton var39 = var19.getEncodedAutomaton(var38);
    boolean var40 = var19.isDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);

  }

  public void test303() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test303"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(1, "ObsDAGNode[i_hi!_t]", false, false);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    boolean var6 = var4.isInitial();
    int var7 = var4.getPid();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    int var9 = var4.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);

  }

  public void test304() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test304"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(1, "Part-0-1097356978", false, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test305"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getStates();
    java.util.Set var22 = var19.getStates();
    java.util.Set var23 = var19.getAcceptStates();
    java.util.Set var24 = var19.getAcceptStates();
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var28 = var26.getInitialObsForPid(100);
    java.util.Set var30 = var26.getInitialObsForPid(1);
    java.util.Set var31 = var26.getInitialObservations();
    int var32 = var26.getNumProcesses();
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var35 = var34.toIntermediateString();
    boolean var36 = var34.isAccept();
    java.util.Set var38 = var34.getInitialObsForPid(10);
    java.util.Set var40 = var34.getTerminalObsForPid(0);
    dynoptic.model.export.DotExportFormatter var41 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var42 = var41.beginGraphString();
    java.lang.String var43 = var41.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var48 = var46.getInitialObsForPid(100);
    java.lang.String var51 = var41.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var46, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var55 = var54.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var57 = new dynoptic.model.fifosys.gfsm.GFSMPath(var54, 1);
    java.lang.String var60 = var41.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var54, true, true);
    java.lang.String var61 = var54.toString();
    java.util.Set var62 = var54.getTerminalObs();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findTransitiveClosure((dynoptic.model.AbsFSMState)var26, var40, var62);
    boolean var64 = var19.equals((java.lang.Object)var62);
    java.util.Set var65 = var19.getAcceptStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "Part-0-2020167011"+ "'", var35.equals("Part-0-2020167011"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "digraph {\n"+ "'", var42.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "digraph {\n"+ "'", var43.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var51.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "Part-0-1771638922"+ "'", var55.equals("Part-0-1771638922"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var60.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "[]"+ "'", var61.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test306"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-1325180820");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-1325180820"+ "'", var2.equals("Part-0-1325180820"));

  }

  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test307"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.lang.String var21 = var19.toString();
    int var22 = var19.getPid();
    java.util.Set var23 = var19.getInitStates();
    int var24 = var19.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var21.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));

  }

  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test308"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (-1), 1);
    java.util.Set var5 = var4.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test309() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test309"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    boolean var42 = var40.isInitial();
    boolean var43 = var40.isAccept();
    java.util.Set var44 = var40.getTransitioningEvents();
    boolean var45 = var40.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test310() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test310"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var3 = var1.getTerminalObsForPid((-1));
    boolean var4 = var1.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test311() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test311"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    var0.clear();
    java.lang.String var3 = var0.toString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var8 = var5.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var15 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var20 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.cfsm.fsm.FSM var29 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var15, var20, var26, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var20, var35, var42);
    var5.removeAllObs(var42);
    boolean var47 = var5.isInitForPid(100);
    java.util.Set var48 = var5.getTransitioningEvents();
    boolean var49 = var0.retainAll((java.util.Collection)var48);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var53 = var51.getTerminalObsForPid(1);
    boolean var54 = var0.removeAll((java.util.Collection)var53);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var59 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var61 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var62 = var59.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var63 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var59);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var64 = var63.getObsState();
    java.lang.String var65 = var63.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var66 = var63.getObsState();
    boolean var67 = var63.isTermState();
    boolean var68 = var63.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var73 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var74 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var73);
    java.lang.String var75 = var74.toString();
    boolean var76 = var74.hasOccurred();
    synoptic.model.event.Event var77 = var74.getNextEvent();
    var63.addRemoteDependency(var74);
    boolean var79 = var0.contains((java.lang.Object)var74);
    java.lang.String var80 = var74.toString();
    boolean var81 = var74.isInitState();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var65.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var75.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var80.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);

  }

  public void test312() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test312"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var37 = var35.getInitialObsForPid(100);
    var33.removeAllObs(var37);
    dynoptic.model.fifosys.cfsm.fsm.FSM var40 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var26, var31, var37, 100);
    int var41 = var40.getPid();
    java.util.Set var42 = var40.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSM var62 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var48, var53, var59, 100);
    int var63 = var48.getPid();
    int var64 = var48.getScmId();
    int var65 = var48.getPid();
    boolean var66 = var40.equals((java.lang.Object)var65);
    java.lang.String var67 = var40.toString();
    java.util.Set var68 = var40.getStates();
    dynoptic.model.automaton.EncodedAutomaton var69 = new dynoptic.model.automaton.EncodedAutomaton(var20, var40);
    java.lang.String var70 = var40.toString();
    java.util.Set var71 = var40.getInitStates();
    java.util.Set var72 = var40.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var67.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var70.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test313() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test313"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var52 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    boolean var53 = var47.equals((java.lang.Object)1);
    boolean var55 = var47.equals((java.lang.Object)"  1 [label=\"0\",shape=circle];\n");
    var47.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test314() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test314"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var32, var47, var54);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    java.util.Set var62 = var58.getInitialObsForPid(1);
    java.util.Set var63 = var58.getInitialObservations();
    dynoptic.model.fifosys.cfsm.fsm.FSM var65 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var32, var63, 10);
    int var66 = var65.getPid();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var72 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var77 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var79 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var81 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var83 = var81.getInitialObsForPid(100);
    var79.removeAllObs(var83);
    dynoptic.model.fifosys.cfsm.fsm.FSM var86 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var72, var77, var83, 100);
    int var87 = var72.getPid();
    java.lang.String var88 = var72.toLongString();
    boolean var89 = var65.equals((java.lang.Object)var72);
    dynoptic.model.fifosys.cfsm.CFSMState var90 = new dynoptic.model.fifosys.cfsm.CFSMState(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var88.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test315() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test315"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.util.Set var4 = var1.getTransitioningEvents();
    java.util.Set var5 = var1.getInitialObservations();
    var1.recreateCachedTransitions();
    java.lang.String var7 = var1.toIntermediateString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Part-0-1285134857"+ "'", var7.equals("Part-0-1285134857"));

  }

  public void test316() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test316"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "Part-0-284291914", false, true);
    boolean var5 = var4.isInitial();
    boolean var6 = var4.isTerminal();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var7 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    var7.setOccurred(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test317() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test317"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    boolean var7 = var5.hasOccurred();
    synoptic.model.event.Event var8 = var5.getNextEvent();
    java.lang.String var9 = var5.toString();
    boolean var10 = var5.hasOccurred();
    boolean var11 = var5.isInitState();
    int var12 = var5.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var9.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));

  }

  public void test318() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test318"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var58.getPid();
    java.util.Set var60 = var58.getAcceptStates();
    boolean var61 = var0.retainAll((java.util.Collection)var60);
    boolean var62 = var0.isEmpty();
    var0.clear();
    java.lang.String var64 = var0.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var71 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var76 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var82 = var80.getInitialObsForPid(100);
    var78.removeAllObs(var82);
    dynoptic.model.fifosys.cfsm.fsm.FSM var85 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var71, var76, var82, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var82);
    boolean var87 = var86.isInitial();
    java.util.Set var88 = var86.getTerminalObs();
    boolean var89 = var0.contains((java.lang.Object)var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "[]"+ "'", var64.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test319() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test319"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.lang.String var4 = var1.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var16, var31, var38);
    var1.removeAllObs(var38);
    boolean var43 = var1.isInitForPid(100);
    java.lang.String var44 = var1.toString();
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var48 = new dynoptic.model.fifosys.gfsm.GFSMPath(var46, (-1));
    java.util.Set var49 = var46.getInitialObservations();
    var1.addAllObs(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "[]"+ "'", var44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test320() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test320"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var2 = var1.toIntermediateString();
    boolean var3 = var1.isAccept();
    java.lang.String var4 = var1.toIntermediateString();
    java.lang.String var5 = var1.toLongString();
    dynoptic.model.alphabet.FSMAlphabet var6 = new dynoptic.model.alphabet.FSMAlphabet();
    java.util.Iterator var7 = var6.iterator();
    var1.addAllObs((java.util.Set)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-1640708938"+ "'", var2.equals("Part-0-1640708938"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Part-0-1640708938"+ "'", var4.equals("Part-0-1640708938"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test321() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test321"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.lang.String var4 = var1.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var16, var31, var38);
    var1.removeAllObs(var38);
    java.lang.String var42 = var1.toLongString();
    java.lang.String var43 = var1.toString();
    java.util.Set var44 = var1.getTransitioningEvents();
    java.util.Set var45 = var1.getNextStates();
    java.util.Set var47 = var1.getInitialObsForPid(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "[]"+ "'", var43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test322() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test322"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.util.Set var4 = var1.getTransitioningEvents();
    java.util.Set var5 = var1.getInitialObservations();
    java.util.Set var6 = var1.getNextStates();
    java.util.Set var7 = var1.getObservedStates();
    boolean var8 = var1.isAccept();
    java.util.Set var9 = var1.getTerminalObs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test323() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test323"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    var0.clear();
    java.lang.String var3 = var0.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var8 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var11 = var8.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var12 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var8);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var17 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var19 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var20 = var17.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var21 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var17);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var22 = var21.getObsState();
    boolean var23 = var21.isEnabled();
    var21.setOccurred(false);
    var12.addRemoteDependency(var21);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var27 = var21.getObsState();
    boolean var28 = var0.remove((java.lang.Object)var27);
    boolean var29 = var0.isEmpty();
    java.lang.String var30 = var0.toString();
    java.lang.Object[] var31 = var0.toArray();
    java.util.Iterator var32 = var0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[]"+ "'", var30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test324"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.util.Set var5 = var1.getInitialObsForPid(1);
    java.util.Set var6 = var1.getInitialObservations();
    int var7 = var1.getNumProcesses();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var10 = var9.toIntermediateString();
    boolean var11 = var9.isAccept();
    java.util.Set var13 = var9.getInitialObsForPid(10);
    java.util.Set var15 = var9.getTerminalObsForPid(0);
    dynoptic.model.export.DotExportFormatter var16 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var17 = var16.beginGraphString();
    java.lang.String var18 = var16.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    java.lang.String var26 = var16.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var21, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var30 = var29.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var32 = new dynoptic.model.fifosys.gfsm.GFSMPath(var29, 1);
    java.lang.String var35 = var16.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var29, true, true);
    java.lang.String var36 = var29.toString();
    java.util.Set var37 = var29.getTerminalObs();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findTransitiveClosure((dynoptic.model.AbsFSMState)var1, var15, var37);
    int var39 = var1.getNumProcesses();
    boolean var41 = var1.isAcceptForPid(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Part-0-1585335148"+ "'", var10.equals("Part-0-1585335148"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "digraph {\n"+ "'", var17.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "digraph {\n"+ "'", var18.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var26.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Part-0-184627363"+ "'", var30.equals("Part-0-184627363"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var35.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "[]"+ "'", var36.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test325() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test325"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var16 = var13.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var17 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = var17.getObsState();
    boolean var19 = var17.isEnabled();
    var17.setOccurred(false);
    var8.addRemoteDependency(var17);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var23 = var17.getObsState();
    dynoptic.model.export.DotExportFormatter var24 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var25 = var24.beginGraphString();
    java.lang.String var26 = var24.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    java.lang.String var34 = var24.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var29, true, false);
    java.lang.String var35 = var24.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var39 = var38.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var41 = new dynoptic.model.fifosys.gfsm.GFSMPath(var38, 1);
    java.lang.String var44 = var24.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var38, false, true);
    java.util.Set var46 = var38.getTerminalObsForPid(100);
    boolean var47 = var23.equals((java.lang.Object)var46);
    boolean var48 = var23.isTerminal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "digraph {\n"+ "'", var25.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "digraph {\n"+ "'", var26.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var34.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "digraph {\n"+ "'", var35.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "Part-0-503413623"+ "'", var39.equals("Part-0-503413623"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var44.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);

  }

  public void test326() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test326"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isAccept();
    boolean var42 = var40.isAccept();
    java.util.Set var43 = var40.getNextStates();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var45 = var40.isInitForPid((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test327() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test327"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var45 = var42.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var46 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var51 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var52 = var51.getName();
    boolean var53 = var42.equals((java.lang.Object)var51);
    boolean var54 = var0.contains((java.lang.Object)var42);
    java.lang.String var55 = var0.toScmParametersString();
    java.lang.String var56 = var0.toString();
    java.util.Iterator var57 = var0.iterator();
    java.util.Iterator var58 = var0.iterator();
    java.lang.String var59 = var0.anyEventScmQRe();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var52.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + ""+ "'", var55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "[]"+ "'", var56.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(_)"+ "'", var59.equals("(_)"));

  }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test328"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    java.util.Set var17 = var1.getTransitioningEvents();
    java.util.Set var18 = var1.getNextStates();
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, (-1));
    java.lang.String var21 = var1.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));

  }

  public void test329() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test329"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(1);
    java.util.Set var2 = var1.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 100);
    java.util.Set var5 = var1.getInitialObservations();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test330() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test330"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    int var68 = var67.getPid();
    java.util.Set var69 = var67.getStates();
    java.util.Set var70 = var67.getStates();
    boolean var71 = var47.equals((java.lang.Object)var70);
    dk.brics.automaton.Automaton var72 = var47.getAutomaton();
    var47.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test331() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test331"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    boolean var10 = var8.isEnabled();
    boolean var11 = var8.isTermState();
    int var12 = var8.getPid();
    boolean var13 = var8.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test332() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test332"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    java.util.Set var22 = var14.getInitialObsForPid(100);
    var14.recreateCachedTransitions();
    boolean var24 = var14.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    java.lang.String var31 = var30.toShortIntString();
    java.util.Set var32 = var30.getNextStates();
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    boolean var37 = var34.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var39 = new dynoptic.model.fifosys.gfsm.GFSMPath(var34, 10);
    dynoptic.model.alphabet.FSMAlphabet var40 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var46 = var44.getInitialObsForPid(100);
    var42.removeAllObs(var46);
    boolean var48 = var42.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    java.util.Set var56 = var50.getTerminalObs();
    var42.removeAllObs(var56);
    boolean var58 = var40.retainAll((java.util.Collection)var56);
    java.lang.String var59 = var40.toString();
    var34.addAllObs((java.util.Set)var40);
    boolean var61 = var40.isEmpty();
    dynoptic.model.fifosys.gfsm.GFSMState var63 = new dynoptic.model.fifosys.gfsm.GFSMState(0);
    java.util.Set var65 = var63.getInitialObsForPid(0);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var32, (java.util.Set)var40, (java.util.Collection)var65, 100);
    var14.removeAllObs((java.util.Set)var40);
    java.lang.String var69 = var40.anyEventScmQRe();
    java.util.Set var70 = var40.getLocalEventScmStrings();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-2065474399"+ "'", var15.equals("Part-0-2065474399"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "0"+ "'", var31.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "[]"+ "'", var59.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(_)"+ "'", var69.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test333() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test333"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    java.util.Set var41 = var40.getNextStates();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var43 = var40.isAcceptForPid(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test334() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test334"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    java.util.Set var21 = var20.getAcceptStates();
    java.util.Set var22 = var20.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var28 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.fifosys.cfsm.fsm.FSM var42 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var28, var33, var39, 100);
    dynoptic.model.automaton.EventTypeEncodings var43 = var42.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var44 = var20.getEncodedAutomaton(var43);
    int var45 = var20.getPid();
    var20.minimize();
    java.util.Set var47 = var20.getStates();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(1, var47);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test335"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    java.lang.String var2 = var0.toString();
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    boolean var6 = var0.remove((java.lang.Object)"Part-0-1581004683");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]"+ "'", var2.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test336() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test336"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var58.getPid();
    java.util.Set var60 = var58.getAcceptStates();
    boolean var61 = var0.retainAll((java.util.Collection)var60);
    java.util.Set var62 = var0.getLocalEventScmStrings();
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test337() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test337"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    java.lang.String var13 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var5, false, false);
    java.util.Set var14 = var5.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 100);
    int var17 = var16.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMState var18 = var16.lastState();
    int var19 = var16.numStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var13.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);

  }

  public void test338() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test338"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, false, 0, 100);
    int var5 = var4.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test339() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test339"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var8 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var13 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var19 = var17.getInitialObsForPid(100);
    var15.removeAllObs(var19);
    dynoptic.model.fifosys.cfsm.fsm.FSM var22 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var8, var13, var19, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var28 = var26.getInitialObsForPid(100);
    var24.removeAllObs(var28);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var13, var28, var35);
    java.lang.String var38 = var13.toLongString();
    java.lang.String var39 = var13.toLongString();
    java.lang.String var40 = var13.toString();
    java.util.Set var41 = var13.getNextStates();
    var1.addAllObs(var41);
    var1.recreateCachedTransitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var38.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var39.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "0"+ "'", var40.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test340() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test340"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var3 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var5 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var6 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var5);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var5);
    boolean var8 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var9 = var7.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test341() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test341"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    boolean var28 = var22.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    java.util.Set var36 = var30.getTerminalObs();
    var22.removeAllObs(var36);
    dynoptic.model.automaton.EventTypeEncodings var38 = new dynoptic.model.automaton.EventTypeEncodings(var36);
    dynoptic.model.automaton.EncodedAutomaton var39 = var19.getEncodedAutomaton(var38);
    var19.minimize();
    dynoptic.model.automaton.EventTypeEncodings var41 = var19.getEventTypeEncodings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var43 = var41.getEventType(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test342"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", false, false);
    boolean var5 = var4.isTerminal();
    var4.markTerm();
    int var7 = var4.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));

  }

  public void test343() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test343"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    java.lang.String var5 = var4.toString();
    boolean var6 = var4.isInitial();
    java.lang.String var7 = var4.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "i_hi!_t"+ "'", var5.equals("i_hi!_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));

  }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test344"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var2 = var1.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 1);
    dynoptic.model.fifosys.gfsm.GFSMState var5 = var4.lastState();
    dynoptic.model.alphabet.FSMAlphabet var6 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var7 = var6.toScmParametersString();
    java.lang.String var8 = var6.toString();
    java.lang.String var9 = var6.toString();
    boolean var10 = var6.isEmpty();
    dynoptic.model.alphabet.FSMAlphabet var11 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    dynoptic.model.fifosys.cfsm.fsm.FSM var32 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var18, var23, var29, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var45 = var43.getInitialObsForPid(100);
    var41.removeAllObs(var45);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var23, var38, var45);
    boolean var48 = var11.retainAll((java.util.Collection)var45);
    java.lang.Object[] var49 = var11.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    int var70 = var69.getPid();
    java.util.Set var71 = var69.getAcceptStates();
    boolean var72 = var11.retainAll((java.util.Collection)var71);
    boolean var73 = var11.isEmpty();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var79 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var84 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var88 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var90 = var88.getInitialObsForPid(100);
    var86.removeAllObs(var90);
    dynoptic.model.fifosys.cfsm.fsm.FSM var93 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var79, var84, var90, 100);
    boolean var94 = var11.remove((java.lang.Object)var84);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findTransitiveClosure((dynoptic.model.AbsFSMState)var5, (java.util.Set)var6, (java.util.Set)var11);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-430822575"+ "'", var2.equals("Part-0-430822575"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ""+ "'", var7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test345() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test345"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    java.util.Set var7 = var1.getInitialObservations();
    boolean var9 = var1.isInitForPid(0);
    boolean var10 = var1.isInitial();
    dynoptic.model.alphabet.FSMAlphabet var11 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var12 = var11.toScmParametersString();
    java.lang.String var13 = var11.toString();
    java.lang.String var14 = var11.toString();
    boolean var15 = var11.isEmpty();
    var1.removeAllObs((java.util.Set)var11);
    dynoptic.model.alphabet.FSMAlphabet var17 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var18 = var17.toScmParametersString();
    java.lang.Object[] var19 = var17.toArray();
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var24 = var22.getInitialObsForPid(100);
    java.lang.String var25 = var22.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    dynoptic.model.alphabet.FSMAlphabet var33 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    boolean var41 = var35.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    java.util.Set var49 = var43.getTerminalObs();
    var35.removeAllObs(var49);
    boolean var51 = var33.retainAll((java.util.Collection)var49);
    java.lang.Object[] var53 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var54 = var33.toArray(var53);
    java.lang.Object[] var55 = var33.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var22, var31, (java.util.Set)var33);
    boolean var57 = var17.removeAll((java.util.Collection)var31);
    dynoptic.model.alphabet.FSMAlphabet var58 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var65 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var70 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var72 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var74 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var76 = var74.getInitialObsForPid(100);
    var72.removeAllObs(var76);
    dynoptic.model.fifosys.cfsm.fsm.FSM var79 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var65, var70, var76, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var81 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var83 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var85 = var83.getInitialObsForPid(100);
    var81.removeAllObs(var85);
    dynoptic.model.fifosys.gfsm.GFSMState var88 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var90 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var92 = var90.getInitialObsForPid(100);
    var88.removeAllObs(var92);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var70, var85, var92);
    boolean var95 = var58.retainAll((java.util.Collection)var92);
    java.lang.Object[] var96 = var58.toArray();
    java.util.Iterator var97 = var58.iterator();
    boolean var98 = var17.addAll((java.util.Collection)var58);
    boolean var99 = var11.removeAll((java.util.Collection)var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]"+ "'", var25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test346() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test346"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    java.lang.String var5 = var4.toShortIntString();
    java.util.Set var6 = var4.getNextStates();
    var4.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var8 = new dynoptic.model.fifosys.cfsm.CFSMState(var4);
    dynoptic.model.fifosys.cfsm.CFSMState var9 = new dynoptic.model.fifosys.cfsm.CFSMState(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var11 = var9.isInitForPid(1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "0"+ "'", var5.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test347() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test347"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var14 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var17 = var14.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var18 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var14);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var19 = var18.getObsState();
    var8.addRemoteDependency(var18);
    var8.setOccurred(false);
    var8.setOccurred(true);
    int var25 = var8.getPid();
    var8.setOccurred(true);
    java.lang.String var28 = var8.toString();
    synoptic.model.event.Event var29 = var8.getNextEvent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var28.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test348() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test348"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    java.util.Set var22 = var14.getInitialObsForPid(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var24 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-122867664"+ "'", var15.equals("Part-0-122867664"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test349() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test349"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    boolean var7 = var5.hasOccurred();
    synoptic.model.event.Event var8 = var5.getNextEvent();
    java.lang.String var9 = var5.toString();
    boolean var10 = var5.hasOccurred();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var11 = var5.getNextState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var9.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test350() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test350"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var37 = var35.getInitialObsForPid(100);
    var33.removeAllObs(var37);
    dynoptic.model.fifosys.cfsm.fsm.FSM var40 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var26, var31, var37, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var57 = var55.getInitialObsForPid(100);
    var53.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var60 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var46, var51, var57, 100);
    dynoptic.model.automaton.EventTypeEncodings var61 = var60.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var66 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var67 = var61.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var68 = var40.getEncodedAutomaton(var61);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var74 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var79 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var81 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var83 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var85 = var83.getInitialObsForPid(100);
    var81.removeAllObs(var85);
    dynoptic.model.fifosys.cfsm.fsm.FSM var88 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var74, var79, var85, 100);
    dynoptic.model.automaton.EventTypeEncodings var89 = var88.getEventTypeEncodings();
    boolean var90 = var68.equals((java.lang.Object)var88);
    java.util.Set var91 = var88.getStates();
    java.util.Set var92 = var88.getAcceptStates();
    java.lang.String var93 = var88.toString();
    dynoptic.model.automaton.EncodedAutomaton var94 = new dynoptic.model.automaton.EncodedAutomaton(var20, var88);
    dk.brics.automaton.Automaton var95 = var94.getAutomaton();
    var94.minimize();
    var94.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var93.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test351() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test351"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    java.lang.String var13 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var5, false, false);
    java.lang.String var14 = var0.endGraphString();
    java.lang.String var15 = var0.endGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var22 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var28 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.fifosys.cfsm.fsm.FSM var42 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var28, var33, var39, 100);
    int var43 = var28.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    var45.removeAllObs(var49);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var56 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var61 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var63 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var65 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var67 = var65.getInitialObsForPid(100);
    var63.removeAllObs(var67);
    dynoptic.model.fifosys.cfsm.fsm.FSM var70 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var56, var61, var67, 100);
    var45.removeAllObs(var67);
    dynoptic.model.fifosys.cfsm.fsm.FSM var73 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var22, var28, var67, 1);
    java.lang.String var74 = var28.toShortIntString();
    java.lang.String var77 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var28, true, true);
    java.lang.String var78 = var0.beginGraphString();
    java.lang.String var79 = var0.beginGraphString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var13.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "} // digraph {\n"+ "'", var14.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "} // digraph {\n"+ "'", var15.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "0"+ "'", var74.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "  100 [label=\"0\",shape=circle,shape=doublecircle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->100;\n"+ "'", var77.equals("  100 [label=\"0\",shape=circle,shape=doublecircle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "digraph {\n"+ "'", var78.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "digraph {\n"+ "'", var79.equals("digraph {\n"));

  }

  public void test352() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test352"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    boolean var40 = var11.isAccept();
    var11.setAccept();
    boolean var42 = var11.isInitial();
    var11.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var44 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    java.lang.String var45 = var11.toShortIntString();
    java.util.Set var46 = var11.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "0"+ "'", var45.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test353() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test353"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var4 = var2.getInitialObsForPid(100);
    java.util.Set var6 = var2.getInitialObsForPid(1);
    dynoptic.model.fifosys.gfsm.GFSMState var7 = new dynoptic.model.fifosys.gfsm.GFSMState((-1), var6);
    boolean var9 = var7.isAcceptForPid((-1));
    java.util.Set var10 = var7.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test354() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test354"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    java.util.Iterator var39 = var0.iterator();
    java.lang.Object[] var40 = var0.toArray();
    java.lang.String var41 = var0.toString();
    java.lang.Object[] var42 = var0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "[]"+ "'", var41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test355() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test355"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    var4.markTerm();
    boolean var6 = var4.isInitial();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var7 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var8 = var4.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var8.equals("ObsDAGNode[i_hi!_t]"));

  }

  public void test356() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test356"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    java.lang.String var13 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var5, false, false);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var18 = var16.getTerminalObsForPid(1);
    java.lang.String var19 = var16.toLongString();
    java.lang.String var22 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var16, false, false);
    java.lang.String var23 = var0.endGraphString();
    java.lang.String var24 = var0.endGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    dynoptic.model.fifosys.cfsm.fsm.FSM var46 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var32, var37, var43, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var43);
    java.lang.String var50 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var47, false, true);
    java.util.Set var52 = var47.getTerminalObsForPid((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var13.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]_i_t"+ "'", var19.equals("[]_i_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "  100 [label=\"[]\",shape=circle];\n"+ "'", var22.equals("  100 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "} // digraph {\n"+ "'", var23.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "} // digraph {\n"+ "'", var24.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var50.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test357() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test357"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    java.util.Set var22 = var14.getInitialObsForPid(100);
    var14.recreateCachedTransitions();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var34 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var40 = var38.getInitialObsForPid(100);
    var36.removeAllObs(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSM var43 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var29, var34, var40, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var54 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    var56.removeAllObs(var60);
    dynoptic.model.fifosys.cfsm.fsm.FSM var63 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var49, var54, var60, 100);
    dynoptic.model.automaton.EventTypeEncodings var64 = var63.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var69 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var70 = var64.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var71 = var43.getEncodedAutomaton(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var77 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var82 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var84 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var88 = var86.getInitialObsForPid(100);
    var84.removeAllObs(var88);
    dynoptic.model.fifosys.cfsm.fsm.FSM var91 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var77, var82, var88, 100);
    dynoptic.model.automaton.EventTypeEncodings var92 = var91.getEventTypeEncodings();
    boolean var93 = var71.equals((java.lang.Object)var91);
    java.util.Set var94 = var91.getStates();
    java.util.Set var95 = var91.getAcceptStates();
    dynoptic.model.automaton.EventTypeEncodings var96 = var91.getEventTypeEncodings();
    java.util.Set var97 = var91.getAcceptStates();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var14.removeAllObs(var97);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-582431193"+ "'", var15.equals("Part-0-582431193"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test358() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test358"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var16 = var13.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var17 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = var17.getObsState();
    boolean var19 = var17.isEnabled();
    var17.setOccurred(false);
    var8.addRemoteDependency(var17);
    boolean var23 = var8.hasOccurred();
    var8.setOccurred(true);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var26 = var8.getObsState();
    boolean var27 = var26.isInitial();
    boolean var28 = var26.isTerminal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);

  }

  public void test359() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test359"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getInitStates();
    java.util.Set var22 = var19.getStates();
    java.util.Set var23 = var19.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test360() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test360"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(10, true, true);
    boolean var4 = var3.isTerminal();
    java.lang.String var5 = var3.getName();
    java.lang.String var6 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "85"+ "'", var5.equals("85"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "i_a85_t"+ "'", var6.equals("i_a85_t"));

  }

  public void test361() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test361"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(1, false, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test362() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test362"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    java.lang.String var13 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var5, false, false);
    java.util.Set var14 = var5.getTransitioningEvents();
    boolean var15 = var5.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var13.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test363() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test363"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getStates();
    java.lang.String var22 = var19.toString();
    int var23 = var19.getPid();
    java.lang.String var24 = var19.toString();
    java.util.Set var25 = var19.getAcceptStates();
    java.lang.String var26 = var19.toString();
    dynoptic.model.automaton.EventTypeEncodings var27 = var19.getEventTypeEncodings();
    java.util.Set var28 = var19.getAcceptStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var22.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var24.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var26.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test364() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test364"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    boolean var40 = var11.isAccept();
    var11.setAccept();
    boolean var42 = var11.isInitial();
    int var43 = var11.getPid();
    java.util.Set var44 = var11.getTransitioningEvents();
    dynoptic.model.fifosys.cfsm.CFSMState var45 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test365() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test365"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    int var7 = var5.getPid();
    int var8 = var5.getPid();
    boolean var9 = var5.isInitState();
    synoptic.model.event.Event var10 = var5.getNextEvent();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var11 = var5.getPrevState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test366() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test366"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(0);
    boolean var3 = var1.isAcceptForPid(1);
    java.util.Set var5 = var1.getInitialObsForPid(1);
    java.util.Set var7 = var1.getTerminalObsForPid((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test367() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test367"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 0);

  }

  public void test368() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test368"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    java.lang.String var36 = var11.toLongString();
    java.lang.String var37 = var11.toShortIntString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var36.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "0"+ "'", var37.equals("0"));

  }

  public void test369() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test369"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getInitStates();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.automaton.EventTypeEncodings var22 = new dynoptic.model.automaton.EventTypeEncodings(var21);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test370() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test370"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    java.lang.String var20 = var0.beginGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    int var42 = var27.getPid();
    int var43 = var27.getScmId();
    int var44 = var27.getPid();
    java.lang.String var47 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var27, false, false);
    java.lang.String var48 = var27.toShortIntString();
    int var49 = var27.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-1447994077"+ "'", var14.equals("Part-0-1447994077"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "digraph {\n"+ "'", var20.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "  1 [label=\"0\",shape=circle];\n"+ "'", var47.equals("  1 [label=\"0\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "0"+ "'", var48.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);

  }

  public void test371() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test371"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    int var2 = var0.size();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var9 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var15 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var20 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.cfsm.fsm.FSM var29 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var15, var20, var26, 100);
    int var30 = var15.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.fifosys.cfsm.fsm.FSM var57 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var43, var48, var54, 100);
    var32.removeAllObs(var54);
    dynoptic.model.fifosys.cfsm.fsm.FSM var60 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var9, var15, var54, 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var66 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var71 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var77 = var75.getInitialObsForPid(100);
    var73.removeAllObs(var77);
    dynoptic.model.fifosys.cfsm.fsm.FSM var80 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var66, var71, var77, 100);
    var66.setAccept();
    java.util.Set var82 = var66.getTransitioningEvents();
    dynoptic.model.alphabet.FSMAlphabet var84 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var85 = new dynoptic.model.fifosys.gfsm.GFSMState(1, (java.util.Set)var84);
    dynoptic.model.fifosys.cfsm.fsm.FSM var87 = new dynoptic.model.fifosys.cfsm.fsm.FSM(100, var9, var66, (java.util.Set)var84, 10);
    boolean var88 = var0.retainAll((java.util.Collection)var84);
    java.lang.Object[] var89 = var0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test372() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test372"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var45 = var42.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var46 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var51 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var52 = var51.getName();
    boolean var53 = var42.equals((java.lang.Object)var51);
    boolean var54 = var0.contains((java.lang.Object)var42);
    dynoptic.model.alphabet.FSMAlphabet var55 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var61 = var59.getInitialObsForPid(100);
    var57.removeAllObs(var61);
    boolean var63 = var57.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var65 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var69 = var67.getInitialObsForPid(100);
    var65.removeAllObs(var69);
    java.util.Set var71 = var65.getTerminalObs();
    var57.removeAllObs(var71);
    boolean var73 = var55.retainAll((java.util.Collection)var71);
    java.lang.Object[] var75 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var76 = var55.toArray(var75);
    java.lang.Object[] var77 = var0.toArray(var75);
    dynoptic.model.alphabet.FSMAlphabet var78 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var79 = var78.toScmParametersString();
    var78.clear();
    java.lang.String var81 = var78.toString();
    boolean var82 = var0.removeAll((java.util.Collection)var78);
    dynoptic.model.fifosys.gfsm.GFSMState var85 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var87 = var85.getInitialObsForPid(100);
    java.util.Set var89 = var85.getInitialObsForPid(1);
    dynoptic.model.fifosys.gfsm.GFSMState var90 = new dynoptic.model.fifosys.gfsm.GFSMState((-1), var89);
    boolean var91 = var78.containsAll((java.util.Collection)var89);
    java.lang.String var92 = var78.toScmParametersString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var52.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + ""+ "'", var79.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "[]"+ "'", var81.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + ""+ "'", var92.equals(""));

  }

  public void test373() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test373"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState((-1), true, false);
    java.lang.String var4 = var3.getName();
    dynoptic.model.export.DotExportFormatter var5 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var6 = var5.beginGraphString();
    java.lang.String var7 = var5.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var12 = var10.getInitialObsForPid(100);
    java.lang.String var15 = var5.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var10, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var19 = var18.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var21 = new dynoptic.model.fifosys.gfsm.GFSMPath(var18, 1);
    java.lang.String var24 = var5.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var18, true, true);
    java.lang.String var25 = var5.beginGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    dynoptic.model.fifosys.cfsm.fsm.FSM var46 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var32, var37, var43, 100);
    int var47 = var32.getPid();
    int var48 = var32.getScmId();
    int var49 = var32.getPid();
    java.lang.String var52 = var5.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var32, false, false);
    var32.setAccept();
    boolean var54 = var3.equals((java.lang.Object)var32);
    java.lang.String var55 = var32.toShortIntString();
    java.lang.String var56 = var32.toShortIntString();
    dynoptic.model.fifosys.cfsm.CFSMState var57 = new dynoptic.model.fifosys.cfsm.CFSMState(var32);
    boolean var58 = var57.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "87"+ "'", var4.equals("87"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "digraph {\n"+ "'", var6.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "digraph {\n"+ "'", var7.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var15.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Part-0-1575488179"+ "'", var19.equals("Part-0-1575488179"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var24.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "digraph {\n"+ "'", var25.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "  1 [label=\"0\",shape=circle];\n"+ "'", var52.equals("  1 [label=\"0\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "0"+ "'", var55.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "0"+ "'", var56.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);

  }

  public void test374() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test374"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.lang.String var4 = var1.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var16, var31, var38);
    var1.removeAllObs(var38);
    java.lang.String var42 = var1.toLongString();
    java.lang.String var43 = var1.toString();
    java.lang.String var44 = var1.toLongString();
    java.util.Set var45 = var1.getTerminalObs();
    java.util.Set var46 = var1.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "[]"+ "'", var43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "[]"+ "'", var44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test375() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test375"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    java.util.Set var22 = var14.getInitialObsForPid(100);
    java.util.Set var23 = var14.getInitialObservations();
    boolean var24 = var14.isAccept();
    java.util.Set var26 = var14.getInitialObsForPid(1);
    dynoptic.model.alphabet.FSMAlphabet var27 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var28 = var27.toScmParametersString();
    java.lang.String var29 = var27.toString();
    java.lang.String var30 = var27.toString();
    dynoptic.model.alphabet.FSMAlphabet var31 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var32 = var31.toScmParametersString();
    java.lang.Object[] var33 = var31.toArray();
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    java.lang.String var39 = var36.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var45 = var43.getInitialObsForPid(100);
    var41.removeAllObs(var45);
    dynoptic.model.alphabet.FSMAlphabet var47 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var53 = var51.getInitialObsForPid(100);
    var49.removeAllObs(var53);
    boolean var55 = var49.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var61 = var59.getInitialObsForPid(100);
    var57.removeAllObs(var61);
    java.util.Set var63 = var57.getTerminalObs();
    var49.removeAllObs(var63);
    boolean var65 = var47.retainAll((java.util.Collection)var63);
    java.lang.Object[] var67 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var68 = var47.toArray(var67);
    java.lang.Object[] var69 = var47.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var36, var45, (java.util.Set)var47);
    boolean var71 = var31.removeAll((java.util.Collection)var45);
    int var72 = var31.size();
    java.util.Set var73 = var31.getLocalEventScmStrings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findTransitiveClosure((dynoptic.model.AbsFSMState)var14, (java.util.Set)var27, var73);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-1518349114"+ "'", var15.equals("Part-0-1518349114"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + ""+ "'", var28.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[]"+ "'", var29.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[]"+ "'", var30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ""+ "'", var32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "[]"+ "'", var39.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test376() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test376"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getStates();
    java.lang.String var22 = var19.toString();
    int var23 = var19.getPid();
    java.lang.String var24 = var19.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var35 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    dynoptic.model.fifosys.cfsm.fsm.FSM var44 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var30, var35, var41, 100);
    dynoptic.model.automaton.EventTypeEncodings var45 = var44.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var56 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    dynoptic.model.fifosys.cfsm.fsm.FSM var65 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var51, var56, var62, 100);
    int var66 = var65.getPid();
    java.util.Set var67 = var65.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var78 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var82 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var84 = var82.getInitialObsForPid(100);
    var80.removeAllObs(var84);
    dynoptic.model.fifosys.cfsm.fsm.FSM var87 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var73, var78, var84, 100);
    int var88 = var73.getPid();
    int var89 = var73.getScmId();
    int var90 = var73.getPid();
    boolean var91 = var65.equals((java.lang.Object)var90);
    java.lang.String var92 = var65.toString();
    java.util.Set var93 = var65.getStates();
    dynoptic.model.automaton.EncodedAutomaton var94 = new dynoptic.model.automaton.EncodedAutomaton(var45, var65);
    dynoptic.model.automaton.EncodedAutomaton var95 = var19.getEncodedAutomaton(var45);
    java.lang.String var96 = var19.toString();
    boolean var98 = var19.equals((java.lang.Object)"  -1 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->-1;\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var22.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var24.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var92.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var96.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);

  }

  public void test377() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test377"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var45 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var50 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.cfsm.fsm.FSM var59 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var45, var50, var56, 100);
    dynoptic.model.automaton.EventTypeEncodings var60 = var59.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var65 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var66 = var60.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var67 = var39.getEncodedAutomaton(var60);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var78 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var82 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var84 = var82.getInitialObsForPid(100);
    var80.removeAllObs(var84);
    dynoptic.model.fifosys.cfsm.fsm.FSM var87 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var73, var78, var84, 100);
    dynoptic.model.automaton.EventTypeEncodings var88 = var87.getEventTypeEncodings();
    boolean var89 = var67.equals((java.lang.Object)var87);
    dynoptic.model.automaton.EncodedAutomaton var90 = new dynoptic.model.automaton.EncodedAutomaton(var17, var87);
    dynoptic.model.fifosys.gfsm.GFSMState var92 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    java.lang.String var93 = var92.toIntermediateString();
    boolean var94 = var17.equals((java.lang.Object)var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "Part-0-1691516256"+ "'", var93.equals("Part-0-1691516256"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test378() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test378"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var45 = var42.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var46 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var51 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var52 = var51.getName();
    boolean var53 = var42.equals((java.lang.Object)var51);
    boolean var54 = var0.contains((java.lang.Object)var42);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var55 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    synoptic.model.event.Event var56 = var55.getNextEvent();
    synoptic.model.event.Event var57 = var55.getNextEvent();
    java.lang.String var58 = var55.toString();
    boolean var59 = var55.isTermState();
    boolean var60 = var55.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var52.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var58.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);

  }

  public void test379() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test379"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath(var21, (-1));
    boolean var24 = var17.equals((java.lang.Object)var21);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var29 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var31 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var32 = var29.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var33 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var29);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var34 = var33.getObsState();
    java.lang.String var35 = var33.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var36 = var33.getObsState();
    boolean var37 = var33.isTermState();
    boolean var38 = var33.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var43 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var44 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var43);
    java.lang.String var45 = var44.toString();
    boolean var46 = var44.hasOccurred();
    synoptic.model.event.Event var47 = var44.getNextEvent();
    var33.addRemoteDependency(var44);
    boolean var49 = var17.equals((java.lang.Object)var33);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    int var70 = var69.getPid();
    java.util.Set var71 = var69.getInitStates();
    dynoptic.model.automaton.EncodedAutomaton var72 = new dynoptic.model.automaton.EncodedAutomaton(var17, var69);
    dk.brics.automaton.Automaton var73 = var72.getAutomaton();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var35.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var45.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test380() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test380"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var45 = var42.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var46 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var47 = var46.getObsState();
    boolean var48 = var46.isEnabled();
    var46.setOccurred(false);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var55 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var57 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var58 = var55.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var59 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var55);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var60 = var59.getObsState();
    boolean var61 = var59.isEnabled();
    var59.setOccurred(false);
    var46.addRemoteDependency(var59);
    boolean var65 = var0.contains((java.lang.Object)var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test381() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test381"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    java.util.Set var2 = var1.getTerminalObs();
    dynoptic.model.alphabet.FSMAlphabet var3 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var4 = var3.toScmParametersString();
    dynoptic.model.alphabet.FSMAlphabet var5 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var17, var32, var39);
    boolean var42 = var5.retainAll((java.util.Collection)var39);
    java.lang.Object[] var43 = var5.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var54 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    var56.removeAllObs(var60);
    dynoptic.model.fifosys.cfsm.fsm.FSM var63 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var49, var54, var60, 100);
    int var64 = var63.getPid();
    java.util.Set var65 = var63.getAcceptStates();
    boolean var66 = var5.retainAll((java.util.Collection)var65);
    boolean var67 = var5.isEmpty();
    var5.clear();
    boolean var69 = var3.containsAll((java.util.Collection)var5);
    var1.removeAllObs((java.util.Set)var3);
    java.util.Iterator var71 = var3.iterator();
    dynoptic.model.automaton.EventTypeEncodings var72 = new dynoptic.model.automaton.EventTypeEncodings((java.util.Set)var3);
    java.util.Iterator var73 = var3.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test382() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test382"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState((-1), true, false);
    java.lang.String var4 = var3.getName();
    dynoptic.model.export.DotExportFormatter var5 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var6 = var5.beginGraphString();
    java.lang.String var7 = var5.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var12 = var10.getInitialObsForPid(100);
    java.lang.String var15 = var5.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var10, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var19 = var18.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var21 = new dynoptic.model.fifosys.gfsm.GFSMPath(var18, 1);
    java.lang.String var24 = var5.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var18, true, true);
    java.lang.String var25 = var5.beginGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    dynoptic.model.fifosys.cfsm.fsm.FSM var46 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var32, var37, var43, 100);
    int var47 = var32.getPid();
    int var48 = var32.getScmId();
    int var49 = var32.getPid();
    java.lang.String var52 = var5.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var32, false, false);
    var32.setAccept();
    boolean var54 = var3.equals((java.lang.Object)var32);
    var3.markTerm();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var56 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var3);
    java.lang.String var57 = var3.toString();
    boolean var58 = var3.isTerminal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "88"+ "'", var4.equals("88"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "digraph {\n"+ "'", var6.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "digraph {\n"+ "'", var7.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var15.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Part-0-191279891"+ "'", var19.equals("Part-0-191279891"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var24.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "digraph {\n"+ "'", var25.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "  1 [label=\"0\",shape=circle];\n"+ "'", var52.equals("  1 [label=\"0\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "i_a88_t"+ "'", var57.equals("i_a88_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);

  }

  public void test383() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test383"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    dynoptic.model.alphabet.FSMAlphabet var2 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var9 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var20 = var18.getInitialObsForPid(100);
    var16.removeAllObs(var20);
    dynoptic.model.fifosys.cfsm.fsm.FSM var23 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var9, var14, var20, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var14, var29, var36);
    boolean var39 = var2.retainAll((java.util.Collection)var36);
    java.lang.Object[] var40 = var2.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var57 = var55.getInitialObsForPid(100);
    var53.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var60 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var46, var51, var57, 100);
    int var61 = var60.getPid();
    java.util.Set var62 = var60.getAcceptStates();
    boolean var63 = var2.retainAll((java.util.Collection)var62);
    boolean var64 = var2.isEmpty();
    var2.clear();
    boolean var66 = var0.containsAll((java.util.Collection)var2);
    var2.clear();
    dynoptic.model.alphabet.FSMAlphabet var68 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var69 = var68.toScmParametersString();
    java.lang.Object[] var70 = var68.toArray();
    boolean var71 = var68.isEmpty();
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    boolean var76 = var68.retainAll((java.util.Collection)var75);
    boolean var77 = var2.removeAll((java.util.Collection)var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + ""+ "'", var69.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);

  }

  public void test384() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test384"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.automaton.EventTypeEncodings var68 = var67.getEventTypeEncodings();
    boolean var69 = var47.equals((java.lang.Object)var67);
    java.util.Set var70 = var67.getStates();
    java.util.Set var71 = var67.getAcceptStates();
    java.util.Set var72 = var67.getStates();
    boolean var73 = var67.isDeterministic();
    java.lang.String var74 = var67.toString();
    int var75 = var67.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var74.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == (-1));

  }

  public void test385() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test385"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var4 = var2.getInitialObsForPid(100);
    java.lang.String var5 = var2.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var7 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var11 = var9.getInitialObsForPid(100);
    var7.removeAllObs(var11);
    dynoptic.model.alphabet.FSMAlphabet var13 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var19 = var17.getInitialObsForPid(100);
    var15.removeAllObs(var19);
    boolean var21 = var15.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    java.util.Set var29 = var23.getTerminalObs();
    var15.removeAllObs(var29);
    boolean var31 = var13.retainAll((java.util.Collection)var29);
    java.lang.Object[] var33 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var34 = var13.toArray(var33);
    java.lang.Object[] var35 = var13.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var2, var11, (java.util.Set)var13);
    java.lang.String var37 = var13.toString();
    dynoptic.model.export.DotExportFormatter var38 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var39 = var38.beginGraphString();
    java.lang.String var40 = var38.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var45 = var43.getInitialObsForPid(100);
    java.lang.String var48 = var38.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var43, true, false);
    java.lang.String var49 = var38.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var53 = var52.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var55 = new dynoptic.model.fifosys.gfsm.GFSMPath(var52, 1);
    java.lang.String var58 = var38.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var52, false, true);
    java.util.Set var60 = var52.getTerminalObsForPid(100);
    java.lang.String var61 = var52.toLongString();
    java.util.Set var62 = var52.getTerminalObs();
    boolean var63 = var13.removeAll((java.util.Collection)var62);
    java.util.Iterator var64 = var13.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[]"+ "'", var37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "digraph {\n"+ "'", var39.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "digraph {\n"+ "'", var40.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var48.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "digraph {\n"+ "'", var49.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "Part-0-311564259"+ "'", var53.equals("Part-0-311564259"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var58.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "[]"+ "'", var61.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test386() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test386"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    boolean var8 = var2.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    java.util.Set var16 = var10.getTerminalObs();
    var2.removeAllObs(var16);
    boolean var18 = var0.retainAll((java.util.Collection)var16);
    java.lang.Object[] var20 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var21 = var0.toArray(var20);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var34 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var40 = var38.getInitialObsForPid(100);
    var36.removeAllObs(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSM var43 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var29, var34, var40, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    var45.removeAllObs(var49);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var34, var49, var56);
    java.lang.String var59 = var34.toLongString();
    java.lang.String var60 = var34.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var66 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var71 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var77 = var75.getInitialObsForPid(100);
    var73.removeAllObs(var77);
    dynoptic.model.fifosys.cfsm.fsm.FSM var80 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var66, var71, var77, 100);
    int var81 = var66.getPid();
    int var82 = var66.getScmId();
    dynoptic.model.fifosys.gfsm.GFSMState var84 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var86 = var84.getTerminalObsForPid(1);
    dynoptic.model.fifosys.cfsm.fsm.FSM var88 = new dynoptic.model.fifosys.cfsm.fsm.FSM(0, var34, var66, var86, 10);
    java.util.Set var89 = var88.getStates();
    boolean var90 = var0.addAll((java.util.Collection)var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var59.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var60.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test387() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test387"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    int var42 = var27.getPid();
    int var43 = var27.getScmId();
    int var44 = var27.getPid();
    boolean var45 = var19.equals((java.lang.Object)var44);
    var19.minimize();
    java.util.Set var47 = var19.getStates();
    dynoptic.model.alphabet.FSMAlphabet var48 = var19.getAlphabet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test388() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test388"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var17);
    int var22 = var21.getNumProcesses();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);

  }

  public void test389() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test389"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, false, 10, 100);

  }

  public void test390() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test390"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("Part-0-128628847");

  }

  public void test391() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test391"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    int var42 = var27.getPid();
    int var43 = var27.getScmId();
    int var44 = var27.getPid();
    boolean var45 = var19.equals((java.lang.Object)var44);
    var19.minimize();
    boolean var48 = var19.equals((java.lang.Object)"Part-0-1692762419");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test392() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test392"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    var0.clear();
    java.lang.String var3 = var0.toString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var8 = var5.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var15 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var20 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.cfsm.fsm.FSM var29 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var15, var20, var26, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var20, var35, var42);
    var5.removeAllObs(var42);
    boolean var47 = var5.isInitForPid(100);
    java.util.Set var48 = var5.getTransitioningEvents();
    boolean var49 = var0.retainAll((java.util.Collection)var48);
    java.lang.String var50 = var0.toScmParametersString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + ""+ "'", var50.equals(""));

  }

  public void test393() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test393"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    java.lang.String var21 = var5.toLongString();
    java.util.Set var22 = var5.getTransitioningEvents();
    int var23 = var5.getScmId();
    java.lang.String var24 = var5.toString();
    java.lang.String var25 = var5.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var21.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "0"+ "'", var24.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var25.equals("FSM_state: init[true], accept[false] id[0]"));

  }

  public void test394() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test394"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var52 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    boolean var53 = var47.equals((java.lang.Object)1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var59 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var64 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var70 = var68.getInitialObsForPid(100);
    var66.removeAllObs(var70);
    dynoptic.model.fifosys.cfsm.fsm.FSM var73 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var59, var64, var70, 100);
    int var74 = var73.getPid();
    java.util.Set var75 = var73.getStates();
    boolean var76 = var47.equals((java.lang.Object)var73);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var81 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 1, 10);
    java.util.Set var82 = var81.getNextStates();
    boolean var83 = var47.equals((java.lang.Object)var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test395() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test395"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "Part-0-284291914", false, true);
    int var5 = var4.getPid();
    java.lang.String var6 = var4.toString();
    boolean var7 = var4.isInitial();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Part-0-284291914_t"+ "'", var6.equals("Part-0-284291914_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test396() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test396"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    java.lang.String var21 = var5.toLongString();
    java.lang.String var22 = var5.toLongString();
    int var23 = var5.getScmId();
    boolean var24 = var5.isAccept();
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var30 = var28.getInitialObsForPid(100);
    var26.removeAllObs(var30);
    java.util.Set var32 = var26.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var34 = new dynoptic.model.fifosys.gfsm.GFSMPath(var26, 0);
    boolean var36 = var26.isAcceptForPid(10);
    int var37 = var26.getNumProcesses();
    java.util.Set var39 = var26.getTerminalObsForPid((-1));
    boolean var40 = var5.equals((java.lang.Object)var26);
    dynoptic.model.alphabet.FSMAlphabet var41 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSM var62 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var48, var53, var59, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var68 = var66.getInitialObsForPid(100);
    var64.removeAllObs(var68);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    var71.removeAllObs(var75);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var53, var68, var75);
    boolean var78 = var41.retainAll((java.util.Collection)var75);
    java.lang.Object[] var79 = var41.toArray();
    java.util.Iterator var80 = var41.iterator();
    java.lang.Object[] var81 = var41.toArray();
    var26.addAllObs((java.util.Set)var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var21.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var22.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test397() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test397"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath(var21, (-1));
    boolean var24 = var17.equals((java.lang.Object)var21);
    java.util.Set var25 = var21.getTerminalObs();
    java.util.Set var26 = var21.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var28 = new dynoptic.model.fifosys.gfsm.GFSMPath(var21, 1);
    java.util.Set var30 = var21.getTerminalObsForPid(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test398() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test398"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    java.util.Iterator var39 = var0.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var42 = var41.toIntermediateString();
    boolean var43 = var41.isAccept();
    boolean var44 = var0.contains((java.lang.Object)var43);
    java.util.Set var45 = var0.getLocalEventScmStrings();
    java.util.Set var46 = var0.getLocalEventScmStrings();
    java.lang.String var47 = var0.anyEventScmQRe();
    java.lang.String var48 = var0.toScmParametersString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Part-0-2018006853"+ "'", var42.equals("Part-0-2018006853"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(_)"+ "'", var47.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));

  }

  public void test399() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test399"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (-1), 1);
    java.lang.String var6 = var5.toShortIntString();
    java.util.Set var7 = var5.getNextStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    var21.removeAllObs(var25);
    dynoptic.model.fifosys.cfsm.fsm.FSM var28 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var14, var19, var25, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var19, var34, var41);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var46 = var45.toIntermediateString();
    boolean var47 = var45.isAccept();
    java.util.Set var48 = var45.getTerminalObs();
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    var45.removeAllObs(var54);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var34, (java.util.Collection)var54, 100);
    java.util.Set var59 = var58.getStates();
    java.util.Set var60 = var58.getInitStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "1"+ "'", var6.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "Part-0-371395494"+ "'", var46.equals("Part-0-371395494"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test400() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test400"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    java.lang.String var37 = var12.toLongString();
    java.lang.String var38 = var12.toLongString();
    java.lang.String var39 = var12.toString();
    java.util.Set var40 = var12.getNextStates();
    java.util.Set var41 = var12.getNextStates();
    int var42 = var12.getScmId();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSM var62 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var48, var53, var59, 100);
    int var63 = var48.getPid();
    java.lang.String var64 = var48.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var70 = var68.getInitialObsForPid(100);
    var66.removeAllObs(var70);
    java.util.Set var72 = var66.getTerminalObs();
    dynoptic.model.fifosys.cfsm.fsm.FSM var74 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var48, var72, (-1));
    java.lang.String var75 = var12.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var37.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var38.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "0"+ "'", var39.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var64.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var75.equals("FSM_state: init[true], accept[false] id[0]"));

  }

  public void test401() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test401"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var5 = new dynoptic.model.fifosys.cfsm.CFSMState(var4);
    boolean var7 = var5.isAcceptForPid(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test402() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test402"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var52 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    boolean var53 = var47.equals((java.lang.Object)1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var59 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var64 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var70 = var68.getInitialObsForPid(100);
    var66.removeAllObs(var70);
    dynoptic.model.fifosys.cfsm.fsm.FSM var73 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var59, var64, var70, 100);
    int var74 = var73.getPid();
    java.util.Set var75 = var73.getStates();
    boolean var76 = var47.equals((java.lang.Object)var73);
    dynoptic.model.alphabet.FSMAlphabet var77 = var73.getAlphabet();
    var73.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test403() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test403"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    boolean var40 = var11.isAccept();
    var11.setAccept();
    boolean var42 = var11.isInitial();
    java.util.Set var43 = var11.getTransitioningEvents();
    java.lang.String var44 = var11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "0"+ "'", var44.equals("0"));

  }

  public void test404() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test404"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, (-1));
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    int var26 = var11.getPid();
    int var27 = var11.getScmId();
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    dynoptic.model.fifosys.cfsm.fsm.FSM var33 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var5, var11, var31, 0);
    dynoptic.model.automaton.EventTypeEncodings var34 = var33.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var39 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var40 = var39.isInitial();
    boolean var41 = var33.equals((java.lang.Object)var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test405() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test405"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    java.lang.String var3 = var0.endGraphString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "} // digraph {\n"+ "'", var3.equals("} // digraph {\n"));

  }

  public void test406() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test406"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    boolean var40 = var11.isAccept();
    boolean var41 = var11.isInitial();
    int var42 = var11.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);

  }

  public void test407() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test407"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    java.lang.String var21 = var5.toLongString();
    java.util.Set var22 = var5.getTransitioningEvents();
    int var23 = var5.getScmId();
    int var24 = var5.getScmId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var21.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);

  }

  public void test408() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test408"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    boolean var42 = var40.isInitial();
    boolean var43 = var40.isAccept();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var45 = var40.isInitForPid(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);

  }

  public void test409() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test409"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    int var40 = var39.getPid();
    java.util.Set var41 = var39.getStates();
    dynoptic.model.automaton.EncodedAutomaton var42 = new dynoptic.model.automaton.EncodedAutomaton(var17, var39);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var47 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(1, "ObsDAGNode[i_hi!_t]", false, false);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var48 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var47);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var49 = var48.getObsState();
    boolean var50 = var48.isEnabled();
    boolean var51 = var48.isTermState();
    boolean var52 = var17.equals((java.lang.Object)var48);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var63 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var65 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var69 = var67.getInitialObsForPid(100);
    var65.removeAllObs(var69);
    dynoptic.model.fifosys.cfsm.fsm.FSM var72 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var58, var63, var69, 100);
    java.util.Set var73 = var72.getAcceptStates();
    java.util.Set var74 = var72.getAcceptStates();
    java.util.Set var75 = var72.getStates();
    dynoptic.model.automaton.EncodedAutomaton var76 = new dynoptic.model.automaton.EncodedAutomaton(var17, var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test410() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test410"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    var5.setAccept();
    boolean var21 = var5.isInitial();
    dynoptic.model.alphabet.FSMAlphabet var22 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var34 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var40 = var38.getInitialObsForPid(100);
    var36.removeAllObs(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSM var43 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var29, var34, var40, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    var45.removeAllObs(var49);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var34, var49, var56);
    boolean var59 = var22.retainAll((java.util.Collection)var56);
    java.lang.Object[] var60 = var22.toArray();
    java.util.Iterator var61 = var22.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var63 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var64 = var63.toIntermediateString();
    boolean var65 = var63.isAccept();
    boolean var66 = var22.contains((java.lang.Object)var65);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var71 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var72 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var71);
    java.lang.String var73 = var72.toString();
    boolean var74 = var72.hasOccurred();
    boolean var75 = var22.remove((java.lang.Object)var74);
    boolean var76 = var5.equals((java.lang.Object)var22);
    var22.clear();
    java.lang.String var78 = var22.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "Part-0-668009429"+ "'", var64.equals("Part-0-668009429"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var73.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "[]"+ "'", var78.equals("[]"));

  }

  public void test411() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test411"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    var4.markTerm();
    boolean var6 = var4.isInitial();
    boolean var7 = var4.isTerminal();
    boolean var8 = var4.isTerminal();
    java.lang.String var9 = var4.toString();
    int var10 = var4.getPid();
    boolean var11 = var4.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ObsDAGNode[i_hi!_t]_t"+ "'", var9.equals("ObsDAGNode[i_hi!_t]_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test412() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test412"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    java.lang.String var5 = var4.toShortIntString();
    java.util.Set var6 = var4.getNextStates();
    var4.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var8 = new dynoptic.model.fifosys.cfsm.CFSMState(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var10 = var8.isInitForPid(1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "0"+ "'", var5.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test413() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test413"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var37 = var35.getInitialObsForPid(100);
    var33.removeAllObs(var37);
    dynoptic.model.fifosys.cfsm.fsm.FSM var40 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var26, var31, var37, 100);
    int var41 = var40.getPid();
    java.util.Set var42 = var40.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSM var62 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var48, var53, var59, 100);
    int var63 = var48.getPid();
    int var64 = var48.getScmId();
    int var65 = var48.getPid();
    boolean var66 = var40.equals((java.lang.Object)var65);
    java.lang.String var67 = var40.toString();
    java.util.Set var68 = var40.getStates();
    dynoptic.model.automaton.EncodedAutomaton var69 = new dynoptic.model.automaton.EncodedAutomaton(var20, var40);
    java.lang.String var70 = var40.toString();
    java.util.Set var71 = var40.getAcceptStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var67.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var70.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test414() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test414"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.lang.String var16 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var13, true, false);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var24 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.fifosys.cfsm.fsm.FSM var38 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var24, var29, var35, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var51 = var49.getInitialObsForPid(100);
    var47.removeAllObs(var51);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var29, var44, var51);
    dynoptic.model.fifosys.gfsm.GFSMPath var55 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var56 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var55);
    boolean var57 = var29.equals((java.lang.Object)var56);
    dynoptic.model.fifosys.cfsm.CFSMState var58 = new dynoptic.model.fifosys.cfsm.CFSMState(var29);
    boolean var59 = var58.isInitial();
    boolean var60 = var58.isAccept();
    boolean var61 = var58.isAccept();
    java.lang.String var64 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString((-1), (dynoptic.model.AbsFSMState)var58, true, true);
    java.lang.String var65 = var0.beginGraphString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->0;\n"+ "'", var16.equals("  0 [label=\"[]\",shape=circle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "  -1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@22eaa3f9\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->-1;\n"+ "'", var64.equals("  -1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@22eaa3f9\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->-1;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "digraph {\n"+ "'", var65.equals("digraph {\n"));

  }

  public void test415() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test415"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(10, "  0 [label=\"[]\",shape=circle];\n", true, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test416() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test416"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(0, "Part-0-142333344", true, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test417() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test417"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getInitStates();
    java.util.Set var22 = var19.getStates();
    boolean var24 = var19.equals((java.lang.Object)"Part-0-1853704944");
    var19.minimize();
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    boolean var33 = var27.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    java.util.Set var41 = var35.getTerminalObs();
    var27.removeAllObs(var41);
    dynoptic.model.automaton.EventTypeEncodings var43 = new dynoptic.model.automaton.EventTypeEncodings(var41);
    boolean var45 = var43.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var56 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    dynoptic.model.fifosys.cfsm.fsm.FSM var65 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var51, var56, var62, 100);
    int var66 = var65.getPid();
    java.util.Set var67 = var65.getStates();
    dynoptic.model.automaton.EncodedAutomaton var68 = new dynoptic.model.automaton.EncodedAutomaton(var43, var65);
    dynoptic.model.automaton.EncodedAutomaton var69 = var19.getEncodedAutomaton(var43);
    dynoptic.main.OptionException var71 = new dynoptic.main.OptionException("Part-0-1771592757");
    java.lang.String var72 = var71.toString();
    boolean var73 = var43.equals((java.lang.Object)var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "Part-0-1771592757"+ "'", var72.equals("Part-0-1771592757"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test418() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test418"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(1, "ObsDAGNode[i_hi!_t]", false, false);
    int var5 = var4.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);

  }

  public void test419() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test419"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    dynoptic.model.automaton.EventTypeEncodings var42 = var41.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var43 = var19.getEncodedAutomaton(var42);
    var43.minimize();
    dynoptic.main.OptionException var46 = new dynoptic.main.OptionException("  1 [label=\"[]\",shape=circle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->1;\n");
    boolean var47 = var43.equals((java.lang.Object)var46);
    var43.minimize();
    var43.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test420() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test420"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var45 = var42.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var46 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var51 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var52 = var51.getName();
    boolean var53 = var42.equals((java.lang.Object)var51);
    boolean var54 = var0.contains((java.lang.Object)var42);
    java.lang.String var55 = var0.toScmParametersString();
    java.lang.String var56 = var0.toString();
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    java.util.Set var61 = var58.getTransitioningEvents();
    java.util.Set var63 = var58.getTerminalObsForPid(100);
    java.util.Set var65 = var58.getTerminalObsForPid(100);
    boolean var66 = var0.containsAll((java.util.Collection)var65);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var72 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var77 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var79 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var81 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var83 = var81.getInitialObsForPid(100);
    var79.removeAllObs(var83);
    dynoptic.model.fifosys.cfsm.fsm.FSM var86 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var72, var77, var83, 100);
    var72.setAccept();
    java.util.Set var88 = var72.getTransitioningEvents();
    java.lang.String var89 = var72.toString();
    java.util.Set var90 = var72.getTransitioningEvents();
    java.util.Set var91 = var72.getTransitioningEvents();
    boolean var92 = var0.removeAll((java.util.Collection)var91);
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var52.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + ""+ "'", var55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "[]"+ "'", var56.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "0"+ "'", var89.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test421() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test421"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    dynoptic.model.automaton.EventTypeEncodings var42 = var41.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var43 = var19.getEncodedAutomaton(var42);
    int var44 = var19.getPid();
    var19.minimize();
    dynoptic.model.alphabet.FSMAlphabet var46 = var19.getAlphabet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test422() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test422"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var3 = var1.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var5 = var4.numEvents();
    int var6 = var4.numEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test423() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test423"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(1);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var2 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var1);
    var1.markTerm();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test424() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test424"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    java.util.Set var8 = var2.getTerminalObs();
    java.util.Set var10 = var2.getInitialObsForPid(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10, var10);
    java.util.Set var13 = var11.getTerminalObsForPid((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, 10);
    int var16 = var15.numStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);

  }

  public void test425() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test425"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, 1);
    java.util.Set var5 = var4.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test426() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test426"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    int var42 = var27.getPid();
    int var43 = var27.getScmId();
    int var44 = var27.getPid();
    boolean var45 = var19.equals((java.lang.Object)var44);
    var19.minimize();
    java.util.Set var47 = var19.getStates();
    java.util.Set var48 = var19.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test427() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test427"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(1, "ObsDAGNode[i_hi!_t]", false, false);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var6 = var5.getObsState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var7 = var5.getNextState();
    var5.setOccurred(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test428() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test428"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    java.util.Set var7 = var1.getInitialObservations();
    boolean var9 = var1.isInitForPid(0);
    boolean var10 = var1.isInitial();
    java.util.Set var11 = var1.getTransitioningEvents();
    java.lang.String var12 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[]"+ "'", var12.equals("[]"));

  }

  public void test429() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test429"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    java.lang.String var13 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var5, false, false);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var18 = var16.getTerminalObsForPid(1);
    java.lang.String var19 = var16.toLongString();
    java.lang.String var22 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var16, false, false);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var28 = var26.getInitialObsForPid(100);
    var24.removeAllObs(var28);
    boolean var30 = var24.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    java.util.Set var38 = var32.getTerminalObs();
    var24.removeAllObs(var38);
    dynoptic.model.automaton.EventTypeEncodings var40 = new dynoptic.model.automaton.EventTypeEncodings(var38);
    boolean var42 = var40.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSM var62 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var48, var53, var59, 100);
    int var63 = var62.getPid();
    java.util.Set var64 = var62.getStates();
    dynoptic.model.automaton.EncodedAutomaton var65 = new dynoptic.model.automaton.EncodedAutomaton(var40, var62);
    java.util.Set var66 = var62.getStates();
    var16.addAllObs(var66);
    java.util.Set var68 = var16.getObservedStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var13.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]_i_t"+ "'", var19.equals("[]_i_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "  100 [label=\"[]\",shape=circle];\n"+ "'", var22.equals("  100 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test430() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test430"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    boolean var8 = var2.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    java.util.Set var16 = var10.getTerminalObs();
    var2.removeAllObs(var16);
    boolean var18 = var0.retainAll((java.util.Collection)var16);
    java.lang.Object[] var20 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var21 = var0.toArray(var20);
    java.lang.Object[] var22 = var0.toArray();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var27 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var29 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var30 = var27.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var31 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var27);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var32 = var31.getPrevState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var37 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var39 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var40 = var37.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var41 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var37);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = var41.getObsState();
    boolean var43 = var41.isEnabled();
    var31.addRemoteDependency(var41);
    boolean var45 = var0.contains((java.lang.Object)var41);
    boolean var46 = var41.isInitState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);

  }

  public void test431() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test431"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    int var21 = var5.getScmId();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var26 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var28 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var29 = var26.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var30 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var26);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var31 = var30.getObsState();
    int var32 = var30.getPid();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var37 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var39 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var40 = var37.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var41 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var37);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = var41.getObsState();
    java.lang.String var43 = var41.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var44 = var41.getObsState();
    boolean var45 = var41.isTermState();
    boolean var46 = var41.isTermState();
    boolean var47 = var41.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var48 = var41.getObsState();
    var30.addRemoteDependency(var41);
    java.lang.String var50 = var41.toString();
    boolean var51 = var5.equals((java.lang.Object)var50);
    boolean var52 = var5.isInitial();
    java.lang.String var53 = var5.toString();
    dynoptic.model.fifosys.cfsm.CFSMState var54 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    boolean var55 = var5.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var43.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var50.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "0"+ "'", var53.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);

  }

  public void test432() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test432"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(1, "ObsDAGNode[i_hi!_t]", false, false);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var6 = var5.getObsState();
    boolean var7 = var5.isEnabled();
    java.lang.String var8 = var5.toString();
    java.lang.String var9 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ObsDAGNode[ObsDAGNode[i_hi!_t]]"+ "'", var8.equals("ObsDAGNode[ObsDAGNode[i_hi!_t]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ObsDAGNode[ObsDAGNode[i_hi!_t]]"+ "'", var9.equals("ObsDAGNode[ObsDAGNode[i_hi!_t]]"));

  }

  public void test433() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test433"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(0);
    boolean var3 = var1.isAcceptForPid(1);
    java.util.Set var5 = var1.getInitialObsForPid(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test434() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test434"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    java.lang.Object[] var2 = var0.toArray();
    boolean var3 = var0.isEmpty();
    var0.clear();
    dynoptic.model.alphabet.FSMAlphabet var5 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var17, var32, var39);
    boolean var42 = var5.retainAll((java.util.Collection)var39);
    java.lang.Object[] var43 = var5.toArray();
    boolean var44 = var0.remove((java.lang.Object)var5);
    java.lang.String var45 = var5.toScmParametersString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + ""+ "'", var45.equals(""));

  }

  public void test435() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test435"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTerminalObs();
    java.lang.String var8 = var1.toIntermediateString();
    int var9 = var1.getNumProcesses();
    java.lang.String var10 = var1.toIntermediateString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Part-0-2128906178"+ "'", var8.equals("Part-0-2128906178"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Part-0-2128906178"+ "'", var10.equals("Part-0-2128906178"));

  }

  public void test436() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test436"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    boolean var40 = var11.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var57 = var55.getInitialObsForPid(100);
    var53.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var60 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var46, var51, var57, 100);
    int var61 = var60.getPid();
    java.util.Set var62 = var60.getStates();
    java.util.Set var63 = var60.getStates();
    java.util.Set var64 = var60.getAcceptStates();
    boolean var65 = var11.equals((java.lang.Object)var64);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.automaton.EventTypeEncodings var66 = new dynoptic.model.automaton.EventTypeEncodings(var64);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test437() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test437"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    java.util.Set var27 = var23.getInitialObsForPid(1);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState((-1), var27);
    java.lang.String var31 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var28, true, false);
    java.util.Set var32 = var28.getTransitioningEvents();
    dynoptic.model.automaton.EventTypeEncodings var33 = new dynoptic.model.automaton.EventTypeEncodings(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-1750026476"+ "'", var14.equals("Part-0-1750026476"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "  1 [label=\"[]\",shape=circle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->1;\n"+ "'", var31.equals("  1 [label=\"[]\",shape=circle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->1;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test438() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test438"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    int var21 = var5.getScmId();
    int var22 = var5.getPid();
    dynoptic.model.fifosys.cfsm.CFSMState var23 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    java.util.Set var24 = var23.getTransitioningEvents();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var26 = var23.isInitForPid((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test439() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test439"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath(var21, (-1));
    boolean var24 = var17.equals((java.lang.Object)var21);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var29 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var31 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var32 = var29.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var33 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var29);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var34 = var33.getObsState();
    java.lang.String var35 = var33.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var36 = var33.getObsState();
    boolean var37 = var33.isTermState();
    boolean var38 = var33.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var43 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var44 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var43);
    java.lang.String var45 = var44.toString();
    boolean var46 = var44.hasOccurred();
    synoptic.model.event.Event var47 = var44.getNextEvent();
    var33.addRemoteDependency(var44);
    boolean var49 = var17.equals((java.lang.Object)var33);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    int var70 = var69.getPid();
    java.util.Set var71 = var69.getInitStates();
    dynoptic.model.automaton.EncodedAutomaton var72 = new dynoptic.model.automaton.EncodedAutomaton(var17, var69);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var74 = var17.getEventType('a');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var35.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var45.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test440() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test440"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    boolean var40 = var11.isAccept();
    var11.setAccept();
    boolean var42 = var11.isInitial();
    var11.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var44 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    var11.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var46 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);

  }

  public void test441() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test441"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(0, "[]", true, true);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    var9.markTerm();
    boolean var11 = var9.isInitial();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var12 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var9);
    synoptic.model.event.Event var13 = var12.getNextEvent();
    boolean var14 = var4.equals((java.lang.Object)var12);
    var4.markTerm();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test442() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test442"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    java.lang.String var20 = var0.beginGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    int var42 = var27.getPid();
    int var43 = var27.getScmId();
    int var44 = var27.getPid();
    java.lang.String var47 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var27, false, false);
    var27.setAccept();
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var52 = var50.getInitialObsForPid(100);
    java.util.Set var54 = var50.getInitialObsForPid(1);
    java.util.Set var55 = var50.getInitialObservations();
    int var56 = var50.getNumProcesses();
    boolean var57 = var27.equals((java.lang.Object)var50);
    int var58 = var27.getScmId();
    java.util.Set var59 = var27.getNextStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-75988297"+ "'", var14.equals("Part-0-75988297"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "digraph {\n"+ "'", var20.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "  1 [label=\"0\",shape=circle];\n"+ "'", var47.equals("  1 [label=\"0\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test443() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test443"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    java.lang.String var13 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var5, false, false);
    java.lang.String var14 = var0.endGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var22 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.fifosys.cfsm.fsm.FSM var36 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var22, var27, var33, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    var45.removeAllObs(var49);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var27, var42, var49);
    dynoptic.model.fifosys.gfsm.GFSMPath var53 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var54 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var53);
    boolean var55 = var27.equals((java.lang.Object)var54);
    dynoptic.model.fifosys.cfsm.CFSMState var56 = new dynoptic.model.fifosys.cfsm.CFSMState(var27);
    boolean var57 = var56.isInitial();
    boolean var58 = var56.isInitial();
    boolean var59 = var56.isAccept();
    java.lang.String var62 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var56, false, true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var64 = var56.getFSMState(0);
    var64.setAccept();
    boolean var66 = var64.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var13.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "} // digraph {\n"+ "'", var14.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "  1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@2d5c4913\",shape=circle,shape=doublecircle];\n"+ "'", var62.equals("  1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@2d5c4913\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);

  }

  public void test444() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test444"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var32, var47, var54);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    java.util.Set var62 = var58.getInitialObsForPid(1);
    java.util.Set var63 = var58.getInitialObservations();
    dynoptic.model.fifosys.cfsm.fsm.FSM var65 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var32, var63, 10);
    int var66 = var65.getPid();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var72 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var77 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var79 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var81 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var83 = var81.getInitialObsForPid(100);
    var79.removeAllObs(var83);
    dynoptic.model.fifosys.cfsm.fsm.FSM var86 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var72, var77, var83, 100);
    int var87 = var72.getPid();
    java.lang.String var88 = var72.toLongString();
    boolean var89 = var65.equals((java.lang.Object)var72);
    java.lang.String var90 = var72.toShortIntString();
    boolean var91 = var72.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var88.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "0"+ "'", var90.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);

  }

  public void test445() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test445"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    boolean var40 = var11.isAccept();
    var11.setAccept();
    boolean var42 = var11.isInitial();
    var11.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var44 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    int var45 = var11.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);

  }

  public void test446() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test446"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var14 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    java.lang.String var15 = var14.toString();
    boolean var16 = var14.hasOccurred();
    int var17 = var14.getPid();
    boolean var18 = var14.isInitState();
    var8.addRemoteDependency(var14);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var26 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var27 = var24.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var28 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var24);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var33 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var35 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var36 = var33.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var37 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var33);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var38 = var37.getObsState();
    boolean var39 = var37.isEnabled();
    var37.setOccurred(false);
    var28.addRemoteDependency(var37);
    synoptic.model.event.Event var43 = var37.getNextEvent();
    boolean var44 = var37.isInitState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var45 = var37.getNextState();
    boolean var46 = var37.isInitState();
    var8.addRemoteDependency(var37);
    boolean var48 = var37.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var15.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);

  }

  public void test447() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test447"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.util.Set var4 = var1.getTransitioningEvents();
    java.util.Set var6 = var1.getTerminalObsForPid(100);
    java.util.Set var8 = var1.getTerminalObsForPid(100);
    int var9 = var1.getNumProcesses();
    boolean var11 = var1.isInitForPid(10);
    boolean var13 = var1.isAcceptForPid(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test448() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test448"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    java.lang.String var37 = var12.toLongString();
    java.lang.String var38 = var12.toLongString();
    java.lang.String var39 = var12.toString();
    java.util.Set var40 = var12.getNextStates();
    java.util.Set var41 = var12.getNextStates();
    int var42 = var12.getScmId();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSM var62 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var48, var53, var59, 100);
    int var63 = var48.getPid();
    java.lang.String var64 = var48.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var70 = var68.getInitialObsForPid(100);
    var66.removeAllObs(var70);
    java.util.Set var72 = var66.getTerminalObs();
    dynoptic.model.fifosys.cfsm.fsm.FSM var74 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var48, var72, (-1));
    java.lang.String var75 = var74.toString();
    boolean var76 = var74.isDeterministic();
    dynoptic.model.automaton.EventTypeEncodings var77 = var74.getEventTypeEncodings();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var37.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var38.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "0"+ "'", var39.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var64.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var75.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test449() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test449"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var9.getName();
    var9.markTerm();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var12 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var9);
    java.lang.String var13 = var12.toString();
    boolean var14 = var12.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var13.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test450() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test450"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var4 = var2.getInitialObsForPid(100);
    java.lang.String var5 = var2.toIntermediateString();
    dynoptic.model.alphabet.FSMAlphabet var6 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var7 = var6.toScmParametersString();
    var6.clear();
    var2.addAllObs((java.util.Set)var6);
    dynoptic.model.export.DotExportFormatter var10 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var11 = var10.beginGraphString();
    java.lang.String var12 = var10.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    java.lang.String var20 = var10.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var15, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.lang.String var26 = var10.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var23, true, false);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var34 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var45 = var43.getInitialObsForPid(100);
    var41.removeAllObs(var45);
    dynoptic.model.fifosys.cfsm.fsm.FSM var48 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var34, var39, var45, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var61 = var59.getInitialObsForPid(100);
    var57.removeAllObs(var61);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var39, var54, var61);
    dynoptic.model.fifosys.gfsm.GFSMPath var65 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var66 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var65);
    boolean var67 = var39.equals((java.lang.Object)var66);
    dynoptic.model.fifosys.cfsm.CFSMState var68 = new dynoptic.model.fifosys.cfsm.CFSMState(var39);
    boolean var69 = var68.isInitial();
    boolean var70 = var68.isAccept();
    boolean var71 = var68.isAccept();
    java.lang.String var74 = var10.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString((-1), (dynoptic.model.AbsFSMState)var68, true, true);
    java.util.Set var75 = var68.getTransitioningEvents();
    boolean var76 = var6.contains((java.lang.Object)var75);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(0, (java.util.Set)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Part-0-1903673461"+ "'", var5.equals("Part-0-1903673461"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ""+ "'", var7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "digraph {\n"+ "'", var12.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->0;\n"+ "'", var26.equals("  0 [label=\"[]\",shape=circle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "  -1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@bd92573\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->-1;\n"+ "'", var74.equals("  -1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@bd92573\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->-1;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test451() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test451"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var11);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, var15);
    boolean var17 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var19 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var21 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(var21);
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath(var21);
    dynoptic.model.fifosys.gfsm.GFSMPath var25 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var26 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var25);
    dynoptic.model.fifosys.gfsm.GFSMPath var27 = new dynoptic.model.fifosys.gfsm.GFSMPath(var21, var25);
    dynoptic.model.fifosys.gfsm.GFSMPath var28 = new dynoptic.model.fifosys.gfsm.GFSMPath(var19, var27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var29 = var27.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);

  }

  public void test452() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test452"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("  -1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@5454ea50\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->-1;\n");

  }

  public void test453() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test453"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var9 = var1.numEvents();
    boolean var10 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11);
    int var14 = var13.numEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);

  }

  public void test454() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test454"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTerminalObs();
    boolean var8 = var1.isInitial();
    java.util.Set var9 = var1.getNextStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test455() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test455"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, false, 0, (-1));
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var12 = var9.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var13 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var9);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var14 = var13.getObsState();
    boolean var15 = var13.isEnabled();
    var13.setOccurred(false);
    int var18 = var13.getPid();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var23 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var24 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var23);
    java.lang.String var25 = var24.toString();
    boolean var26 = var24.hasOccurred();
    boolean var27 = var24.isInitState();
    boolean var28 = var24.hasOccurred();
    var13.addRemoteDependency(var24);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var30 = var24.getNextState();
    boolean var31 = var4.equals((java.lang.Object)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var25.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test456() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test456"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 0, 100);

  }

  public void test457() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test457"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.cfsm.fsm.FSM var47 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var33, var38, var44, 100);
    var22.removeAllObs(var44);
    java.util.Set var50 = var22.getInitialObsForPid((-1));
    var14.removeAllObs(var50);
    java.lang.String var52 = var14.toLongString();
    dynoptic.model.alphabet.FSMAlphabet var53 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var54 = var53.toScmParametersString();
    java.lang.String var55 = var53.toString();
    java.lang.String var56 = var53.toString();
    var14.removeAllObs((java.util.Set)var53);
    java.lang.String var58 = var53.toString();
    dynoptic.model.alphabet.FSMAlphabet var60 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(1, (java.util.Set)var60);
    java.lang.String var62 = var61.toIntermediateString();
    boolean var64 = var61.isInitForPid(0);
    boolean var65 = var53.remove((java.lang.Object)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-901662474"+ "'", var15.equals("Part-0-901662474"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "[]"+ "'", var52.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + ""+ "'", var54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "[]"+ "'", var55.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "[]"+ "'", var56.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "[]"+ "'", var58.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "Part-0-1979122296"+ "'", var62.equals("Part-0-1979122296"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test458() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test458"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(0);
    var1.recreateCachedTransitions();
    boolean var4 = var1.isInitForPid(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test459() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test459"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.alphabet.FSMAlphabet var5 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var17, var32, var39);
    boolean var42 = var5.retainAll((java.util.Collection)var39);
    java.util.Iterator var43 = var5.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var46 = var45.toIntermediateString();
    boolean var47 = var45.isAccept();
    java.util.Set var49 = var45.getInitialObsForPid(10);
    boolean var50 = var5.addAll((java.util.Collection)var49);
    java.util.Set var51 = var5.getLocalEventScmStrings();
    java.util.Iterator var52 = var5.iterator();
    java.lang.String var53 = var5.toString();
    java.lang.String var54 = var5.anyEventScmQRe();
    boolean var55 = var5.isEmpty();
    boolean var56 = var4.equals((java.lang.Object)var5);
    var5.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "Part-0-1730389759"+ "'", var46.equals("Part-0-1730389759"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "[]"+ "'", var53.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(_)"+ "'", var54.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test460() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test460"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    boolean var18 = var1.isInitForPid(0);
    java.util.Set var19 = var1.getInitialObservations();
    java.util.Set var20 = var1.getInitialObservations();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test461() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test461"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.util.Set var4 = var1.getTransitioningEvents();
    java.util.Set var6 = var1.getTerminalObsForPid(100);
    var1.recreateCachedTransitions();
    java.lang.String var8 = var1.toString();
    dynoptic.model.export.DotExportFormatter var9 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var10 = var9.beginGraphString();
    java.lang.String var11 = var9.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    java.lang.String var19 = var9.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, true, false);
    java.lang.String var20 = var9.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var24 = var23.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var26 = new dynoptic.model.fifosys.gfsm.GFSMPath(var23, 1);
    java.lang.String var29 = var9.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var23, false, true);
    java.util.Set var31 = var23.getInitialObsForPid(100);
    var23.recreateCachedTransitions();
    boolean var33 = var23.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    java.lang.String var40 = var39.toShortIntString();
    java.util.Set var41 = var39.getNextStates();
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var45 = var43.getInitialObsForPid(100);
    boolean var46 = var43.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var48 = new dynoptic.model.fifosys.gfsm.GFSMPath(var43, 10);
    dynoptic.model.alphabet.FSMAlphabet var49 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    boolean var57 = var51.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    java.util.Set var65 = var59.getTerminalObs();
    var51.removeAllObs(var65);
    boolean var67 = var49.retainAll((java.util.Collection)var65);
    java.lang.String var68 = var49.toString();
    var43.addAllObs((java.util.Set)var49);
    boolean var70 = var49.isEmpty();
    dynoptic.model.fifosys.gfsm.GFSMState var72 = new dynoptic.model.fifosys.gfsm.GFSMState(0);
    java.util.Set var74 = var72.getInitialObsForPid(0);
    dynoptic.model.fifosys.cfsm.fsm.FSM var76 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var41, (java.util.Set)var49, (java.util.Collection)var74, 100);
    var23.removeAllObs((java.util.Set)var49);
    java.util.Set var78 = var23.getNextStates();
    var1.removeAllObs(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "digraph {\n"+ "'", var10.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var19.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "digraph {\n"+ "'", var20.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "Part-0-43826925"+ "'", var24.equals("Part-0-43826925"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var29.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "0"+ "'", var40.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "[]"+ "'", var68.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test462() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test462"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState((-1), true, false);
    boolean var4 = var3.isTerminal();
    boolean var5 = var3.isInitial();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (-1), 1);
    java.lang.String var11 = var10.toShortIntString();
    java.util.Set var12 = var10.getNextStates();
    boolean var13 = var3.equals((java.lang.Object)var12);
    var3.markTerm();
    boolean var15 = var3.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "1"+ "'", var11.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test463() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test463"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var6 = var5.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    int var27 = var12.getPid();
    int var28 = var12.getScmId();
    dynoptic.model.alphabet.FSMAlphabet var29 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var41 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.cfsm.fsm.FSM var50 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var36, var41, var47, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var41, var56, var63);
    boolean var66 = var29.retainAll((java.util.Collection)var63);
    java.lang.String var67 = var29.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var12, (java.util.Set)var29, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var70 = new dynoptic.model.fifosys.cfsm.CFSMState(var12);
    java.util.Set var71 = var70.getTransitioningEvents();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = var70.getFSMState(0);
    boolean var74 = var70.isInitial();
    boolean var75 = var70.isAccept();
    boolean var76 = var70.isAccept();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var78 = var70.isInitForPid(10);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[]"+ "'", var67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);

  }

  public void test464() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test464"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var45 = var42.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var46 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var51 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var52 = var51.getName();
    boolean var53 = var42.equals((java.lang.Object)var51);
    boolean var54 = var0.contains((java.lang.Object)var42);
    java.lang.String var55 = var0.toScmParametersString();
    java.lang.String var56 = var0.toString();
    java.lang.String var57 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var52.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + ""+ "'", var55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "[]"+ "'", var56.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "[]"+ "'", var57.equals("[]"));

  }

  public void test465() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test465"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.util.Set var4 = var1.getTransitioningEvents();
    java.util.Set var6 = var1.getInitialObsForPid(1);
    java.util.Set var7 = var1.getTerminalObs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test466() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test466"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var2 = var1.toIntermediateString();
    boolean var3 = var1.isAccept();
    java.util.Set var4 = var1.getTerminalObs();
    java.util.Set var5 = var1.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-1246123784"+ "'", var2.equals("Part-0-1246123784"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test467() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test467"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var11);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, var15);
    boolean var17 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var21 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var20);
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15, var20);
    int var23 = var20.numStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);

  }

  public void test468() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test468"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.automaton.EventTypeEncodings var68 = var67.getEventTypeEncodings();
    boolean var69 = var47.equals((java.lang.Object)var67);
    java.util.Set var70 = var67.getStates();
    java.util.Set var71 = var67.getAcceptStates();
    java.util.Set var72 = var67.getAcceptStates();
    java.util.Set var73 = var67.getStates();
    var67.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test469() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test469"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    boolean var10 = var8.isEnabled();
    boolean var11 = var8.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var12 = var8.getObsState();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var24 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.fifosys.cfsm.fsm.FSM var38 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var24, var29, var35, 100);
    int var39 = var24.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var45 = var43.getInitialObsForPid(100);
    var41.removeAllObs(var45);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var52 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var57 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.fifosys.cfsm.fsm.FSM var66 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var52, var57, var63, 100);
    var41.removeAllObs(var63);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var18, var24, var63, 1);
    java.util.Set var70 = var69.getStates();
    boolean var71 = var12.equals((java.lang.Object)var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test470() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test470"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var17);
    java.util.Set var23 = var21.getInitialObsForPid(1);
    java.util.Set var25 = var21.getTerminalObsForPid(100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.cfsm.fsm.FSM var47 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var33, var38, var44, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var53 = var51.getInitialObsForPid(100);
    var49.removeAllObs(var53);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    var56.removeAllObs(var60);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var38, var53, var60);
    dynoptic.model.fifosys.gfsm.GFSMPath var64 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var65 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var64);
    boolean var66 = var38.equals((java.lang.Object)var65);
    boolean var67 = var38.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var72 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.gfsm.GFSMState var74 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var76 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var78 = var76.getInitialObsForPid(100);
    var74.removeAllObs(var78);
    java.util.Set var80 = var74.getTerminalObs();
    dynoptic.model.fifosys.cfsm.fsm.FSM var82 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var38, var72, var80, 1);
    var21.addAllObs(var80);
    java.lang.String var84 = var21.toLongString();
    boolean var85 = var21.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "[]_i_t"+ "'", var84.equals("[]_i_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);

  }

  public void test471() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test471"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    var5.setAccept();
    boolean var21 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    java.util.Set var29 = var23.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var31 = new dynoptic.model.fifosys.gfsm.GFSMPath(var23, 0);
    boolean var33 = var23.isAcceptForPid(10);
    dynoptic.model.fifosys.gfsm.GFSMPath var35 = new dynoptic.model.fifosys.gfsm.GFSMPath(var23, 100);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var38 = new dynoptic.model.fifosys.gfsm.GFSMPath(var37);
    dynoptic.model.fifosys.gfsm.GFSMPath var40 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var41 = var40.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var42 = new dynoptic.model.fifosys.gfsm.GFSMPath(var37, var40);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var45 = new dynoptic.model.fifosys.gfsm.GFSMPath(var44);
    dynoptic.model.fifosys.gfsm.GFSMPath var46 = new dynoptic.model.fifosys.gfsm.GFSMPath(var40, var45);
    dynoptic.model.fifosys.gfsm.GFSMPath var47 = new dynoptic.model.fifosys.gfsm.GFSMPath(var35, var40);
    boolean var48 = var5.equals((java.lang.Object)var47);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    var71.removeAllObs(var75);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var82 = var80.getInitialObsForPid(100);
    var78.removeAllObs(var82);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var60, var75, var82);
    dynoptic.model.fifosys.gfsm.GFSMPath var86 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var87 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var86);
    boolean var88 = var60.equals((java.lang.Object)var87);
    boolean var89 = var60.isAccept();
    var60.setAccept();
    boolean var91 = var60.isInitial();
    int var92 = var60.getPid();
    int var93 = var60.getScmId();
    boolean var94 = var5.equals((java.lang.Object)var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test472() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test472"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "Part-0-284291914", false, true);
    int var5 = var4.getPid();
    java.lang.String var6 = var4.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var13 = var12.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var24 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var30 = var28.getInitialObsForPid(100);
    var26.removeAllObs(var30);
    dynoptic.model.fifosys.cfsm.fsm.FSM var33 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var19, var24, var30, 100);
    int var34 = var19.getPid();
    int var35 = var19.getScmId();
    dynoptic.model.alphabet.FSMAlphabet var36 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.fifosys.cfsm.fsm.FSM var57 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var43, var48, var54, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var70 = var68.getInitialObsForPid(100);
    var66.removeAllObs(var70);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var48, var63, var70);
    boolean var73 = var36.retainAll((java.util.Collection)var70);
    java.lang.String var74 = var36.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var76 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var19, (java.util.Set)var36, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var77 = new dynoptic.model.fifosys.cfsm.CFSMState(var19);
    boolean var78 = var4.equals((java.lang.Object)var77);
    boolean var79 = var77.isInitial();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var81 = var77.isAcceptForPid(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Part-0-284291914_t"+ "'", var6.equals("Part-0-284291914_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "[]"+ "'", var74.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);

  }

  public void test473() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test473"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isAccept();
    java.util.Set var42 = var40.getTransitioningEvents();
    java.util.Set var43 = var40.getTransitioningEvents();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var45 = var40.isInitForPid((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test474() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test474"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(0);
    var1.recreateCachedTransitions();
    var1.recreateCachedTransitions();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var8 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    java.util.Set var9 = var8.getTransitioningEvents();
    var1.removeAllObs(var9);
    boolean var11 = var1.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test475() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test475"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 0);
    boolean var11 = var1.isAcceptForPid(10);
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 100);
    java.util.Set var14 = var1.getTerminalObs();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var21 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.cfsm.fsm.FSM var35 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var21, var26, var32, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var32);
    java.util.Set var38 = var36.getInitialObsForPid(1);
    java.util.Set var39 = var36.getTerminalObs();
    var1.addAllObs(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test476() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test476"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var11);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, var15);
    boolean var17 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var21 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var20);
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15, var20);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    java.util.Set var27 = var24.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var29 = new dynoptic.model.fifosys.gfsm.GFSMPath(var24, (-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var30 = new dynoptic.model.fifosys.gfsm.GFSMPath(var20, var29);
    dynoptic.model.fifosys.gfsm.GFSMPath var31 = new dynoptic.model.fifosys.gfsm.GFSMPath(var29);
    dynoptic.model.fifosys.gfsm.GFSMPath var32 = new dynoptic.model.fifosys.gfsm.GFSMPath(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test477() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test477"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var8 = var7.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var7);
    int var10 = var7.numStates();
    boolean var11 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test478() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test478"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, (-1));
    java.lang.String var29 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var26, false, false);
    java.lang.String var30 = var0.endGraphString();
    java.lang.String var31 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    java.util.Set var40 = var34.getTransitioningEvents();
    boolean var42 = var34.isInitForPid(1);
    boolean var44 = var34.isAcceptForPid(100);
    boolean var45 = var34.isAccept();
    java.lang.String var46 = var34.toString();
    java.lang.String var49 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(10, (dynoptic.model.AbsFSMState)var34, false, true);
    boolean var50 = var34.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-1652255688"+ "'", var15.equals("Part-0-1652255688"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "  100 [label=\"-1\",shape=circle];\n"+ "'", var29.equals("  100 [label=\"-1\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "} // digraph {\n"+ "'", var30.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "digraph {\n"+ "'", var31.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "[]"+ "'", var46.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "  10 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var49.equals("  10 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test479() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test479"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "Part-0-1716606222", false, false);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var15 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var21 = var19.getInitialObsForPid(100);
    var17.removeAllObs(var21);
    dynoptic.model.fifosys.cfsm.fsm.FSM var24 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var10, var15, var21, 100);
    java.util.Set var25 = var24.getAcceptStates();
    java.util.Set var26 = var24.getStates();
    java.lang.String var27 = var24.toString();
    int var28 = var24.getPid();
    java.lang.String var29 = var24.toString();
    java.util.Set var30 = var24.getAcceptStates();
    dynoptic.model.automaton.EventTypeEncodings var31 = var24.getEventTypeEncodings();
    dynoptic.model.automaton.EventTypeEncodings var32 = var24.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    var45.removeAllObs(var49);
    dynoptic.model.fifosys.cfsm.fsm.FSM var52 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var38, var43, var49, 100);
    java.util.Set var53 = var52.getAcceptStates();
    java.util.Set var54 = var52.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var65 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var69 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var71 = var69.getInitialObsForPid(100);
    var67.removeAllObs(var71);
    dynoptic.model.fifosys.cfsm.fsm.FSM var74 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var60, var65, var71, 100);
    dynoptic.model.automaton.EventTypeEncodings var75 = var74.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var76 = var52.getEncodedAutomaton(var75);
    int var77 = var52.getPid();
    var52.minimize();
    java.util.Set var79 = var52.getStates();
    dynoptic.model.automaton.EncodedAutomaton var80 = new dynoptic.model.automaton.EncodedAutomaton(var32, var52);
    boolean var81 = var4.equals((java.lang.Object)var80);
    dk.brics.automaton.Automaton var82 = var80.getAutomaton();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var27.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var29.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test480() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test480"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    dynoptic.model.fifosys.gfsm.GFSMPath var38 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var39 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var38);
    boolean var40 = var12.equals((java.lang.Object)var39);
    boolean var41 = var12.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var52 = var50.getInitialObsForPid(100);
    var48.removeAllObs(var52);
    java.util.Set var54 = var48.getTerminalObs();
    dynoptic.model.fifosys.cfsm.fsm.FSM var56 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var12, var46, var54, 1);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    java.util.Set var64 = var58.getTransitioningEvents();
    dynoptic.model.automaton.EventTypeEncodings var65 = new dynoptic.model.automaton.EventTypeEncodings(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var71 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var76 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var82 = var80.getInitialObsForPid(100);
    var78.removeAllObs(var82);
    dynoptic.model.fifosys.cfsm.fsm.FSM var85 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var71, var76, var82, 100);
    var71.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var87 = new dynoptic.model.fifosys.cfsm.CFSMState(var71);
    java.util.Set var88 = var87.getTransitioningEvents();
    boolean var89 = var65.equals((java.lang.Object)var88);
    dynoptic.model.automaton.EncodedAutomaton var90 = var56.getEncodedAutomaton(var65);
    dk.brics.automaton.Automaton var91 = var90.getAutomaton();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test481() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test481"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var8.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = var8.getObsState();
    boolean var12 = var8.isTermState();
    boolean var13 = var8.isTermState();
    boolean var14 = var8.isTermState();
    var8.setOccurred(false);
    var8.setOccurred(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test482() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test482"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var20 = var18.getInitialObsForPid(100);
    java.lang.String var21 = var18.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var28 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.fifosys.cfsm.fsm.FSM var42 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var28, var33, var39, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var48 = var46.getInitialObsForPid(100);
    var44.removeAllObs(var48);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var33, var48, var55);
    var18.removeAllObs(var55);
    var1.addAllObs(var55);
    java.util.Set var61 = var1.getInitialObsForPid(0);
    java.util.Set var62 = var1.getTerminalObs();
    boolean var64 = var1.isAcceptForPid(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test483() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test483"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    java.lang.Object[] var2 = var0.toArray();
    boolean var3 = var0.isEmpty();
    var0.clear();
    var0.clear();
    java.lang.String var6 = var0.anyEventScmQRe();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    java.util.Set var27 = var26.getAcceptStates();
    java.util.Set var28 = var26.getInitStates();
    java.util.Set var29 = var26.getAcceptStates();
    boolean var30 = var0.addAll((java.util.Collection)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "(_)"+ "'", var6.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);

  }

  public void test484() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test484"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    int var21 = var20.getPid();
    java.util.Set var22 = var20.getStates();
    dynoptic.model.alphabet.FSMAlphabet var23 = var20.getAlphabet();
    dynoptic.model.alphabet.FSMAlphabet var24 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    dynoptic.model.fifosys.cfsm.fsm.FSM var45 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var31, var36, var42, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var51 = var49.getInitialObsForPid(100);
    var47.removeAllObs(var51);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var58 = var56.getInitialObsForPid(100);
    var54.removeAllObs(var58);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var36, var51, var58);
    boolean var61 = var24.retainAll((java.util.Collection)var58);
    int var62 = var24.size();
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    java.util.Set var68 = var64.getInitialObsForPid(1);
    dynoptic.model.fifosys.cfsm.fsm.FSM var70 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, (java.util.Set)var23, (java.util.Set)var24, (java.util.Collection)var68, (-1));
    java.util.Set var71 = var70.getAcceptStates();
    dynoptic.model.alphabet.FSMAlphabet var72 = var70.getAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var74 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var75 = var74.toIntermediateString();
    boolean var76 = var74.isAccept();
    java.util.Set var78 = var74.getInitialObsForPid(10);
    java.util.Set var80 = var74.getTerminalObsForPid(0);
    java.util.Set var82 = var74.getTerminalObsForPid((-1));
    java.util.Set var84 = var74.getInitialObsForPid(100);
    boolean var85 = var72.addAll((java.util.Collection)var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "Part-0-773396052"+ "'", var75.equals("Part-0-773396052"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test485() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test485"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.lang.String var4 = var1.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var16, var31, var38);
    var1.removeAllObs(var38);
    java.lang.String var42 = var1.toLongString();
    java.lang.String var43 = var1.toString();
    java.lang.String var44 = var1.toIntermediateString();
    java.util.Set var45 = var1.getTerminalObs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "[]"+ "'", var43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "Part-0-1433984374"+ "'", var44.equals("Part-0-1433984374"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test486() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test486"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var6 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    dynoptic.model.fifosys.cfsm.fsm.FSM var32 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var18, var23, var29, 100);
    int var33 = var18.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var57 = var55.getInitialObsForPid(100);
    var53.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var60 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var46, var51, var57, 100);
    var35.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var63 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var12, var18, var57, 1);
    dynoptic.model.alphabet.FSMAlphabet var64 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var65 = var64.toScmParametersString();
    var64.clear();
    java.lang.String var67 = var64.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var72 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var74 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var75 = var72.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var76 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var72);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var81 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var83 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var84 = var81.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var85 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var81);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var86 = var85.getObsState();
    boolean var87 = var85.isEnabled();
    var85.setOccurred(false);
    var76.addRemoteDependency(var85);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var91 = var85.getObsState();
    boolean var92 = var64.remove((java.lang.Object)var91);
    boolean var93 = var64.isEmpty();
    java.lang.String var94 = var64.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var96 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var5, var18, (java.util.Set)var64, 0);
    var5.setAccept();
    java.lang.String var98 = var5.toShortIntString();
    java.util.Set var99 = var5.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[]"+ "'", var67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "[]"+ "'", var94.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var98 + "' != '" + "1"+ "'", var98.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test487() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test487"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, (-1));
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    int var26 = var11.getPid();
    int var27 = var11.getScmId();
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    dynoptic.model.fifosys.cfsm.fsm.FSM var33 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var5, var11, var31, 0);
    java.util.Set var34 = var5.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test488() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test488"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    boolean var42 = var40.isAccept();
    boolean var43 = var40.isAccept();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.cfsm.fsm.FSMState var45 = var40.getFSMState(1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);

  }

  public void test489() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test489"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var16 = var13.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var17 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = var17.getObsState();
    boolean var19 = var17.isEnabled();
    var17.setOccurred(false);
    var8.addRemoteDependency(var17);
    boolean var23 = var8.hasOccurred();
    var8.setOccurred(true);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var26 = var8.getObsState();
    boolean var27 = var8.isTermState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);

  }

  public void test490() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test490"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTerminalObs();
    int var8 = var1.getNumProcesses();
    java.util.Set var9 = var1.getInitialObservations();
    java.lang.String var10 = var1.toString();
    java.lang.String var11 = var1.toIntermediateString();
    boolean var13 = var1.isInitForPid(1);
    java.util.Set var14 = var1.getNextStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Part-0-69595964"+ "'", var11.equals("Part-0-69595964"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test491() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test491"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var8.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = var8.getObsState();
    boolean var12 = var8.isTermState();
    boolean var13 = var8.isTermState();
    boolean var14 = var8.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var15 = var8.getObsState();
    java.lang.String var16 = var15.toString();
    java.lang.String var17 = var15.getName();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var18 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var15);
    boolean var19 = var18.isInitState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "i_hi!_t"+ "'", var16.equals("i_hi!_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test492() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test492"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    dynoptic.model.automaton.EventTypeEncodings var42 = var41.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var43 = var19.getEncodedAutomaton(var42);
    java.util.Set var44 = var19.getAcceptStates();
    dynoptic.model.automaton.EventTypeEncodings var45 = var19.getEventTypeEncodings();
    dynoptic.model.alphabet.FSMAlphabet var46 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var69 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var73 = var71.getInitialObsForPid(100);
    var69.removeAllObs(var73);
    dynoptic.model.fifosys.gfsm.GFSMState var76 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var80 = var78.getInitialObsForPid(100);
    var76.removeAllObs(var80);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var58, var73, var80);
    boolean var83 = var46.retainAll((java.util.Collection)var80);
    java.lang.Object[] var84 = var46.toArray();
    java.util.Iterator var85 = var46.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var87 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var88 = var87.toIntermediateString();
    boolean var89 = var87.isAccept();
    boolean var90 = var46.contains((java.lang.Object)var89);
    java.lang.String var91 = var46.toString();
    java.util.Set var92 = var46.getLocalEventScmStrings();
    dynoptic.model.automaton.EventTypeEncodings var93 = new dynoptic.model.automaton.EventTypeEncodings(var92);
    boolean var94 = var45.equals((java.lang.Object)var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "Part-0-1423706638"+ "'", var88.equals("Part-0-1423706638"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "[]"+ "'", var91.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test493() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test493"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    int var26 = var11.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var53 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var39, var44, var50, 100);
    var28.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var56 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var5, var11, var50, 1);
    boolean var57 = var56.isDeterministic();
    boolean var58 = var56.isDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);

  }

  public void test494() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test494"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, (-1));
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    int var26 = var11.getPid();
    int var27 = var11.getScmId();
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    dynoptic.model.fifosys.cfsm.fsm.FSM var33 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var5, var11, var31, 0);
    dynoptic.model.automaton.EventTypeEncodings var34 = var33.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.GFSMPath var36 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(var36);
    dynoptic.model.fifosys.gfsm.GFSMPath var39 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var40 = var39.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var41 = new dynoptic.model.fifosys.gfsm.GFSMPath(var36, var39);
    dynoptic.model.fifosys.gfsm.GFSMPath var43 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath(var43);
    dynoptic.model.fifosys.gfsm.GFSMPath var46 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var47 = var46.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var48 = new dynoptic.model.fifosys.gfsm.GFSMPath(var43, var46);
    dynoptic.model.fifosys.gfsm.GFSMPath var50 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var51 = new dynoptic.model.fifosys.gfsm.GFSMPath(var46, var50);
    boolean var52 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var50);
    dynoptic.model.fifosys.gfsm.GFSMPath var53 = new dynoptic.model.fifosys.gfsm.GFSMPath(var39, var50);
    dynoptic.model.fifosys.gfsm.GFSMPath var55 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var56 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var55);
    dynoptic.model.fifosys.gfsm.GFSMPath var57 = new dynoptic.model.fifosys.gfsm.GFSMPath(var50, var55);
    boolean var58 = var34.equals((java.lang.Object)var50);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var60 = var34.getEventType('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test495() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test495"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var4 = var2.getInitialObsForPid(100);
    java.lang.String var5 = var2.toIntermediateString();
    dynoptic.model.alphabet.FSMAlphabet var6 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var7 = var6.toScmParametersString();
    var6.clear();
    var2.addAllObs((java.util.Set)var6);
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10, (java.util.Set)var6);
    java.util.Set var11 = var10.getObservedStates();
    
    // Checks the contract:  equals-hashcode on var4 and var11
    assertTrue("Contract failed: equals-hashcode on var4 and var11", var4.equals(var11) ? var4.hashCode() == var11.hashCode() : true);
    
    // This assertion (symmetry of equals) fails 
    assertTrue("Contract failed: equals-symmetric on var4 and var11.", var4.equals(var11) == var11.equals(var4));

  }

  public void test496() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test496"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.lang.String var16 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var13, true, false);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var24 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.fifosys.cfsm.fsm.FSM var38 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var24, var29, var35, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var51 = var49.getInitialObsForPid(100);
    var47.removeAllObs(var51);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var29, var44, var51);
    dynoptic.model.fifosys.gfsm.GFSMPath var55 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var56 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var55);
    boolean var57 = var29.equals((java.lang.Object)var56);
    dynoptic.model.fifosys.cfsm.CFSMState var58 = new dynoptic.model.fifosys.cfsm.CFSMState(var29);
    boolean var59 = var58.isInitial();
    boolean var60 = var58.isAccept();
    boolean var61 = var58.isAccept();
    java.lang.String var64 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString((-1), (dynoptic.model.AbsFSMState)var58, true, true);
    java.util.Set var65 = var58.getTransitioningEvents();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var67 = var58.isAcceptForPid(10);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->0;\n"+ "'", var16.equals("  0 [label=\"[]\",shape=circle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "  -1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@742b503f\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->-1;\n"+ "'", var64.equals("  -1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@742b503f\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->-1;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test497() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test497"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    boolean var18 = var1.isAcceptForPid(10);
    boolean var19 = var1.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test498() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test498"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var32, var47, var54);
    var32.setAccept();
    boolean var58 = var32.isAccept();
    java.lang.String var61 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var32, true, true);
    dynoptic.model.fifosys.cfsm.CFSMState var62 = new dynoptic.model.fifosys.cfsm.CFSMState(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-1396225591"+ "'", var14.equals("Part-0-1396225591"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "  0 [label=\"0\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->0;\n"+ "'", var61.equals("  0 [label=\"0\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->0;\n"));

  }

  public void test499() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test499"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (-1), (-1));

  }

  public void test500() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest1.test500"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.automaton.EventTypeEncodings var68 = var67.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var69 = new dynoptic.model.automaton.EncodedAutomaton(var40, var67);
    dynoptic.model.alphabet.FSMAlphabet var70 = var67.getAlphabet();
    java.lang.String var71 = var70.toScmParametersString();
    boolean var73 = var70.remove((java.lang.Object)"Part-0-1556967221");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + ""+ "'", var71.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

public List<Test> getTests() {
	// TODO Auto-generated method stub
	return null;
}

public void run(TestResult arg0, List<String> arg1) {
	// TODO Auto-generated method stub
	
}

}
