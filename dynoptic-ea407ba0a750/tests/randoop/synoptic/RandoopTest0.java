package randoop.synoptic;

import java.util.List;

import junit.framework.*;

public class RandoopTest0 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test1"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var2 = var1.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test2() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test2"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var2 = var1.numEvents();
    int var3 = var1.numEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test3"); }


    dynoptic.model.export.GraphExporter var0 = new dynoptic.model.export.GraphExporter();

  }

  public void test4() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test4"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("");

  }

  public void test5() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test5"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("hi!");

  }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test6"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = var1.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test7() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test7"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var22 = var20.getEventType('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test8"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var22 = var20.getEventType('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test9() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test9"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var3 = var1.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test10"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("0");

  }

  public void test11() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test11"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var3 = var2.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test12() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test12"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    int var6 = var4.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));

  }

  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test13"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var2 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var3 = var1.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test14"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("Part-0-284291914");

  }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test15"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var7 = var1.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test16"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var3 = var1.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test17"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var9 = var8.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test18"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.alphabet.FSMAlphabet var21 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    boolean var29 = var23.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    java.util.Set var37 = var31.getTerminalObs();
    var23.removeAllObs(var37);
    boolean var39 = var21.retainAll((java.util.Collection)var37);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var57 = var55.getInitialObsForPid(100);
    var53.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var60 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var46, var51, var57, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.gfsm.GFSMState var69 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var73 = var71.getInitialObsForPid(100);
    var69.removeAllObs(var73);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var51, var66, var73);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(100, (dynoptic.model.AbsFSMState)var6, (java.util.Set)var21, var73);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test19() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test19"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var3 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, (-1));
    dynoptic.model.fifosys.gfsm.GFSMState var6 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var8 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var10 = var8.getInitialObsForPid(100);
    var6.removeAllObs(var10);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    dynoptic.model.fifosys.cfsm.fsm.FSM var32 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var18, var23, var29, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var45 = var43.getInitialObsForPid(100);
    var41.removeAllObs(var45);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var23, var38, var45);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var51 = var49.getInitialObsForPid(100);
    java.lang.String var52 = var49.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var59 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var64 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var70 = var68.getInitialObsForPid(100);
    var66.removeAllObs(var70);
    dynoptic.model.fifosys.cfsm.fsm.FSM var73 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var59, var64, var70, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var79 = var77.getInitialObsForPid(100);
    var75.removeAllObs(var79);
    dynoptic.model.fifosys.gfsm.GFSMState var82 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var84 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var86 = var84.getInitialObsForPid(100);
    var82.removeAllObs(var86);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var64, var79, var86);
    var49.removeAllObs(var86);
    java.util.Set var91 = var49.getInitialObsForPid(10);
    dynoptic.model.fifosys.cfsm.fsm.FSM var93 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var10, var38, (java.util.Collection)var91, (-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.removeAllObs(var38);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "[]"+ "'", var52.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test20() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test20"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache();

  }

  public void test21() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test21"); }


    dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache();

  }

  public void test22() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test22"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var3 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, (-1));
    java.lang.String var4 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "GFSMPath : []"+ "'", var4.equals("GFSMPath : []"));

  }

  public void test23() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test23"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    boolean var8 = var2.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    java.util.Set var16 = var10.getTerminalObs();
    var2.removeAllObs(var16);
    boolean var18 = var0.retainAll((java.util.Collection)var16);
    java.lang.Object[] var20 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var21 = var0.toArray(var20);
    boolean var22 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test24() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test24"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var4 = var2.getInitialObsForPid(100);
    java.lang.String var5 = var2.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var7 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var11 = var9.getInitialObsForPid(100);
    var7.removeAllObs(var11);
    dynoptic.model.alphabet.FSMAlphabet var13 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var19 = var17.getInitialObsForPid(100);
    var15.removeAllObs(var19);
    boolean var21 = var15.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    java.util.Set var29 = var23.getTerminalObs();
    var15.removeAllObs(var29);
    boolean var31 = var13.retainAll((java.util.Collection)var29);
    java.lang.Object[] var33 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var34 = var13.toArray(var33);
    java.lang.Object[] var35 = var13.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var2, var11, (java.util.Set)var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.automaton.EventTypeEncodings var37 = new dynoptic.model.automaton.EventTypeEncodings(var11);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test25"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(1, "ObsDAGNode[i_hi!_t]", false, false);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    boolean var6 = var4.isInitial();
    boolean var7 = var4.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test26() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test26"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(1, "ObsDAGNode[i_hi!_t]", false, false);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    boolean var6 = var4.isInitial();
    int var7 = var4.getPid();
    java.lang.String var8 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var8.equals("ObsDAGNode[i_hi!_t]"));

  }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test27"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTerminalObs();
    boolean var8 = var1.isAccept();
    java.lang.String var9 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));

  }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test28"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    int var7 = var1.getNumProcesses();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 10);

  }

  public void test29() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test29"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.automaton.EventTypeEncodings var68 = var67.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var69 = new dynoptic.model.automaton.EncodedAutomaton(var40, var67);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var71 = var40.getEventType(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test30() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test30"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var3 = var2.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test31() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test31"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var8 = var1.numStates();
    boolean var9 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var10 = var1.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test32"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var45 = var42.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var46 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var51 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var52 = var51.getName();
    boolean var53 = var42.equals((java.lang.Object)var51);
    boolean var54 = var0.contains((java.lang.Object)var42);
    dynoptic.model.alphabet.FSMAlphabet var55 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var61 = var59.getInitialObsForPid(100);
    var57.removeAllObs(var61);
    boolean var63 = var57.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var65 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var69 = var67.getInitialObsForPid(100);
    var65.removeAllObs(var69);
    java.util.Set var71 = var65.getTerminalObs();
    var57.removeAllObs(var71);
    boolean var73 = var55.retainAll((java.util.Collection)var71);
    java.lang.Object[] var75 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var76 = var55.toArray(var75);
    java.lang.Object[] var77 = var55.toArray();
    java.lang.Object[] var78 = var0.toArray(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var52.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test33"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    int var10 = var8.getPid();
    boolean var11 = var8.isTermState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test34"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var2 = var1.toIntermediateString();
    boolean var3 = var1.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var9 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var20 = var18.getInitialObsForPid(100);
    var16.removeAllObs(var20);
    dynoptic.model.fifosys.cfsm.fsm.FSM var23 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var9, var14, var20, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var34 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var40 = var38.getInitialObsForPid(100);
    var36.removeAllObs(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSM var43 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var29, var34, var40, 100);
    dynoptic.model.automaton.EventTypeEncodings var44 = var43.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var49 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var50 = var44.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var51 = var23.getEncodedAutomaton(var44);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var57 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var62 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var68 = var66.getInitialObsForPid(100);
    var64.removeAllObs(var68);
    dynoptic.model.fifosys.cfsm.fsm.FSM var71 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var57, var62, var68, 100);
    dynoptic.model.automaton.EventTypeEncodings var72 = var71.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var73 = new dynoptic.model.automaton.EncodedAutomaton(var44, var71);
    java.util.Set var74 = var71.getAcceptStates();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.removeAllObs(var74);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-1369694104"+ "'", var2.equals("Part-0-1369694104"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test35"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    java.lang.String var20 = var13.toString();
    java.util.Set var21 = var13.getInitialObservations();
    boolean var22 = var13.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-1373982006"+ "'", var14.equals("Part-0-1373982006"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test36"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var4 = var2.getInitialObsForPid(100);
    java.util.Set var6 = var2.getInitialObsForPid(1);
    dynoptic.model.alphabet.FSMAlphabet var7 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    var21.removeAllObs(var25);
    dynoptic.model.fifosys.cfsm.fsm.FSM var28 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var14, var19, var25, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var19, var34, var41);
    boolean var44 = var7.retainAll((java.util.Collection)var41);
    java.lang.Object[] var45 = var7.toArray();
    java.util.Iterator var46 = var7.iterator();
    dynoptic.model.alphabet.FSMAlphabet var47 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var54 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var59 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var63 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var65 = var63.getInitialObsForPid(100);
    var61.removeAllObs(var65);
    dynoptic.model.fifosys.cfsm.fsm.FSM var68 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var54, var59, var65, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var70 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var72 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var74 = var72.getInitialObsForPid(100);
    var70.removeAllObs(var74);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var79 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var81 = var79.getInitialObsForPid(100);
    var77.removeAllObs(var81);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var59, var74, var81);
    boolean var84 = var47.retainAll((java.util.Collection)var81);
    java.util.Iterator var85 = var47.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var87 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var88 = var87.toIntermediateString();
    boolean var89 = var87.isAccept();
    java.util.Set var91 = var87.getInitialObsForPid(10);
    boolean var92 = var47.addAll((java.util.Collection)var91);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(1, (dynoptic.model.AbsFSMState)var2, (java.util.Set)var7, var91);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "Part-0-1837219951"+ "'", var88.equals("Part-0-1837219951"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test37"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var19 = var17.getEventType('a');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test38"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.lang.String var4 = var1.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var16, var31, var38);
    var1.removeAllObs(var38);
    boolean var43 = var1.isInitForPid(100);
    java.util.Set var44 = var1.getTransitioningEvents();
    boolean var46 = var1.isInitForPid(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test39"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var11 = var10.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test40() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test40"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var42 = var40.isInitForPid(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test41() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test41"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    var5.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var21 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    java.util.Set var22 = var21.getTransitioningEvents();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.cfsm.fsm.FSMState var24 = var21.getFSMState(10);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test42"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var3 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, (-1));
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.util.Set var8 = var5.getTransitioningEvents();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var15 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var20 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.cfsm.fsm.FSM var29 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var15, var20, var26, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var20, var35, var42);
    java.lang.String var45 = var20.toLongString();
    java.lang.String var46 = var20.toLongString();
    java.lang.String var47 = var20.toString();
    java.util.Set var48 = var20.getNextStates();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findTransitiveClosure((dynoptic.model.AbsFSMState)var1, var8, var48);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var45.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var46.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "0"+ "'", var47.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test43() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test43"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.cfsm.fsm.FSMState var42 = var40.getFSMState(1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test44() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test44"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var42 = var40.isInitForPid(10);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test45() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test45"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var17);
    java.util.Set var22 = var21.getInitialObservations();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test46() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test46"); }


    dynoptic.model.alphabet.FSMAlphabet var1 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(1, (java.util.Set)var1);
    int var3 = var2.getNumProcesses();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);

  }

  public void test47() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test47"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("Part-0-347778728");

  }

  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test48"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var49 = var40.getEventType('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test49() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test49"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var42 = var40.isAcceptForPid(10);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test50() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test50"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var9);
    int var11 = var4.numStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);

  }

  public void test51() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test51"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var2 = var1.numEvents();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var3 = var1.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test52"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var9 = var1.numEvents();
    boolean var10 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var11 = var1.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test53"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("1");

  }

  public void test54() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test54"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var43 = var40.isAcceptForPid(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test55() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test55"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var8.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = var8.getObsState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var12 = var8.getObsState();
    java.lang.String var13 = var12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "i_hi!_t"+ "'", var13.equals("i_hi!_t"));

  }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test56"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    boolean var28 = var22.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    java.util.Set var36 = var30.getTerminalObs();
    var22.removeAllObs(var36);
    dynoptic.model.automaton.EventTypeEncodings var38 = new dynoptic.model.automaton.EventTypeEncodings(var36);
    dynoptic.model.automaton.EncodedAutomaton var39 = var19.getEncodedAutomaton(var38);
    var39.minimize();
    boolean var42 = var39.equals((java.lang.Object)0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test57() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test57"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var16 = var13.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var17 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = var17.getObsState();
    boolean var19 = var17.isEnabled();
    var17.setOccurred(false);
    var8.addRemoteDependency(var17);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var23 = var17.getObsState();
    boolean var24 = var23.isTerminal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);

  }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test58"); }


    dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache();

  }

  public void test59() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test59"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    var5.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var21 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    java.util.Set var22 = var21.getTransitioningEvents();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var24 = var21.isInitForPid((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test60"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var37 = var35.getInitialObsForPid(100);
    var33.removeAllObs(var37);
    dynoptic.model.fifosys.cfsm.fsm.FSM var40 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var26, var31, var37, 100);
    dynoptic.model.automaton.EventTypeEncodings var41 = var40.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var46 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var47 = var41.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var48 = var20.getEncodedAutomaton(var41);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var54 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var59 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var63 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var65 = var63.getInitialObsForPid(100);
    var61.removeAllObs(var65);
    dynoptic.model.fifosys.cfsm.fsm.FSM var68 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var54, var59, var65, 100);
    dynoptic.model.automaton.EventTypeEncodings var69 = var68.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var70 = new dynoptic.model.automaton.EncodedAutomaton(var41, var68);
    java.util.Set var71 = var68.getAcceptStates();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var72 = new dynoptic.model.fifosys.gfsm.GFSMState(100, var71);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test61() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test61"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var58.getPid();
    java.util.Set var60 = var58.getAcceptStates();
    boolean var61 = var0.retainAll((java.util.Collection)var60);
    boolean var62 = var0.isEmpty();
    var0.clear();
    java.lang.Object[] var64 = var0.toArray();
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test62() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test62"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    boolean var10 = var8.isEnabled();
    var8.setOccurred(false);
    int var13 = var8.getPid();
    int var14 = var8.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));

  }

  public void test63() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test63"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.automaton.EventTypeEncodings var68 = var67.getEventTypeEncodings();
    boolean var69 = var47.equals((java.lang.Object)var67);
    java.util.Set var70 = var67.getStates();
    java.util.Set var71 = var67.getInitStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test64() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test64"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("ObsDAGNode[i_hi!_t]");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var2.equals("ObsDAGNode[i_hi!_t]"));

  }

  public void test65() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test65"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = var40.getFSMState(0);
    boolean var44 = var40.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);

  }

  public void test66() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test66"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var3 = var1.numEvents();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var4 = var1.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test67"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    dynoptic.model.alphabet.FSMAlphabet var7 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    boolean var15 = var9.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var21 = var19.getInitialObsForPid(100);
    var17.removeAllObs(var21);
    java.util.Set var23 = var17.getTerminalObs();
    var9.removeAllObs(var23);
    boolean var25 = var7.retainAll((java.util.Collection)var23);
    java.lang.String var26 = var7.toString();
    var1.addAllObs((java.util.Set)var7);
    java.util.Set var28 = var7.getLocalEventScmStrings();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test68() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test68"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var32, var47, var54);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    java.util.Set var62 = var58.getInitialObsForPid(1);
    java.util.Set var63 = var58.getInitialObservations();
    dynoptic.model.fifosys.cfsm.fsm.FSM var65 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var32, var63, 10);
    int var66 = var32.getScmId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);

  }

  public void test69() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test69"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    java.lang.String var36 = var11.toLongString();
    var11.setAccept();
    java.lang.String var38 = var11.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var36.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "FSM_state: init[true], accept[true] id[0]"+ "'", var38.equals("FSM_state: init[true], accept[true] id[0]"));

  }

  public void test70() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test70"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-843614138");

  }

  public void test71() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test71"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var2 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var3 = var1.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test72() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test72"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var11 = var9.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test73"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    var5.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var21 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    boolean var22 = var5.isAccept();
    java.lang.String var23 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "0"+ "'", var23.equals("0"));

  }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test74"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    var21.removeAllObs(var25);
    dynoptic.model.fifosys.cfsm.fsm.FSM var28 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var14, var19, var25, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var19, var34, var41);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    java.lang.String var48 = var45.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    var71.removeAllObs(var75);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var82 = var80.getInitialObsForPid(100);
    var78.removeAllObs(var82);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var60, var75, var82);
    var45.removeAllObs(var82);
    java.util.Set var87 = var45.getInitialObsForPid(10);
    dynoptic.model.fifosys.cfsm.fsm.FSM var89 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var6, var34, (java.util.Collection)var87, (-1));
    boolean var90 = var89.isDeterministic();
    dynoptic.model.automaton.EventTypeEncodings var91 = var89.getEventTypeEncodings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var93 = var91.getEventType(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test75() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test75"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 0, 1);

  }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test76"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test77"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var58.getPid();
    java.util.Set var60 = var58.getAcceptStates();
    boolean var61 = var0.retainAll((java.util.Collection)var60);
    boolean var62 = var0.isEmpty();
    java.util.Iterator var63 = var0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test78() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test78"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    var21.removeAllObs(var25);
    dynoptic.model.fifosys.cfsm.fsm.FSM var28 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var14, var19, var25, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var19, var34, var41);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    java.lang.String var48 = var45.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    var71.removeAllObs(var75);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var82 = var80.getInitialObsForPid(100);
    var78.removeAllObs(var82);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var60, var75, var82);
    var45.removeAllObs(var82);
    java.util.Set var87 = var45.getInitialObsForPid(10);
    dynoptic.model.fifosys.cfsm.fsm.FSM var89 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var6, var34, (java.util.Collection)var87, (-1));
    boolean var90 = var89.isDeterministic();
    java.lang.String var91 = var89.toString();
    java.util.Set var92 = var89.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "FSM[pid=1]\n\tstates: []\n\tinits: []\n\taccepts: [0]"+ "'", var91.equals("FSM[pid=1]\n\tstates: []\n\tinits: []\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test79() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test79"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    boolean var28 = var22.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    java.util.Set var36 = var30.getTerminalObs();
    var22.removeAllObs(var36);
    dynoptic.model.automaton.EventTypeEncodings var38 = new dynoptic.model.automaton.EventTypeEncodings(var36);
    dynoptic.model.automaton.EncodedAutomaton var39 = var19.getEncodedAutomaton(var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var41 = var38.getEventType(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test80() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test80"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var4 = var2.getInitialObsForPid(100);
    boolean var5 = var2.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var7 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var11 = var9.getInitialObsForPid(100);
    var7.removeAllObs(var11);
    java.util.Set var13 = var7.getTransitioningEvents();
    dynoptic.model.automaton.EventTypeEncodings var14 = new dynoptic.model.automaton.EventTypeEncodings(var13);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    boolean var19 = var16.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var21 = new dynoptic.model.fifosys.gfsm.GFSMPath(var16, 10);
    dynoptic.model.alphabet.FSMAlphabet var22 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var28 = var26.getInitialObsForPid(100);
    var24.removeAllObs(var28);
    boolean var30 = var24.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    java.util.Set var38 = var32.getTerminalObs();
    var24.removeAllObs(var38);
    boolean var40 = var22.retainAll((java.util.Collection)var38);
    java.lang.String var41 = var22.toString();
    var16.addAllObs((java.util.Set)var22);
    boolean var43 = var22.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(1, (dynoptic.model.AbsFSMState)var2, var13, (java.util.Set)var22);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "[]"+ "'", var41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);

  }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test81"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    boolean var42 = var40.isInitial();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var44 = var40.isAcceptForPid(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test82"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    java.util.Set var5 = var4.getTransitioningEvents();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    boolean var26 = var4.equals((java.lang.Object)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test83"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = var40.getFSMState(0);
    dynoptic.model.fifosys.cfsm.CFSMState var44 = new dynoptic.model.fifosys.cfsm.CFSMState(var43);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var50 = new dynoptic.model.fifosys.cfsm.CFSMState(var49);
    boolean var51 = var43.equals((java.lang.Object)var49);
    java.lang.String var52 = var43.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var52.equals("FSM_state: init[true], accept[false] id[0]"));

  }

  public void test84() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test84"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("Part-0-339793194");

  }

  public void test85() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test85"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = var40.getFSMState(0);
    dynoptic.model.fifosys.cfsm.CFSMState var44 = new dynoptic.model.fifosys.cfsm.CFSMState(var43);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var46 = var44.isAcceptForPid(1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test86() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test86"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    int var7 = var5.getPid();
    int var8 = var5.getPid();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var14 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var15 = var14.getNextState();
    var5.addRemoteDependency(var14);
    synoptic.model.event.Event var17 = var14.getNextEvent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test87"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("Part-0-284291914_t");

  }

  public void test88() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test88"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    java.util.Set var21 = var19.getInitStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test89() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test89"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    var5.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var21 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = var21.getFSMState((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test90"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var5 = new dynoptic.model.fifosys.cfsm.CFSMState(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = var5.getFSMState(1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test91() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test91"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(1, "ObsDAGNode[i_hi!_t]", false, false);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var4.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));

  }

  public void test92() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test92"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var58.getPid();
    java.util.Set var60 = var58.getAcceptStates();
    boolean var61 = var0.retainAll((java.util.Collection)var60);
    boolean var62 = var0.isEmpty();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var68 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var79 = var77.getInitialObsForPid(100);
    var75.removeAllObs(var79);
    dynoptic.model.fifosys.cfsm.fsm.FSM var82 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var68, var73, var79, 100);
    boolean var83 = var0.remove((java.lang.Object)var73);
    java.lang.String var84 = var0.anyEventScmQRe();
    boolean var85 = var0.isEmpty();
    java.util.Set var86 = var0.getLocalEventScmStrings();
    java.lang.String var87 = var0.toScmParametersString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "(_)"+ "'", var84.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + ""+ "'", var87.equals(""));

  }

  public void test93() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test93"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    var5.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var21 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    boolean var22 = var21.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test94() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test94"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "Part-0-284291914", false, true);
    boolean var5 = var4.isInitial();
    var4.markTerm();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test95() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test95"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(1, true, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test96() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test96"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    java.util.Set var17 = var1.getTransitioningEvents();
    java.util.Set var18 = var1.getNextStates();
    java.util.Set var20 = var1.getTerminalObsForPid((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test97"); }


    dynoptic.model.alphabet.FSMAlphabet var1 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var2 = var1.toScmParametersString();
    var1.clear();
    java.lang.String var4 = var1.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var12 = var9.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var13 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var9);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var21 = var18.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var22 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var18);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var23 = var22.getObsState();
    boolean var24 = var22.isEnabled();
    var22.setOccurred(false);
    var13.addRemoteDependency(var22);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var28 = var22.getObsState();
    boolean var29 = var1.remove((java.lang.Object)var28);
    boolean var30 = var1.isEmpty();
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState((-1), (java.util.Set)var1);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    java.util.Set var36 = var33.getTransitioningEvents();
    boolean var38 = var33.isInitForPid(0);
    java.util.Set var39 = var33.getTerminalObs();
    boolean var40 = var1.containsAll((java.util.Collection)var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);

  }

  public void test98() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test98"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    boolean var42 = var40.isAccept();
    boolean var43 = var40.isAccept();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var45 = var40.isInitForPid((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);

  }

  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test99"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.automaton.EventTypeEncodings var68 = var67.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var69 = new dynoptic.model.automaton.EncodedAutomaton(var40, var67);
    dynoptic.model.export.DotExportFormatter var70 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var71 = var70.beginGraphString();
    java.lang.String var72 = var70.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var77 = var75.getInitialObsForPid(100);
    java.lang.String var80 = var70.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var75, true, false);
    java.lang.String var81 = var70.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var84 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var85 = var84.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var87 = new dynoptic.model.fifosys.gfsm.GFSMPath(var84, 1);
    java.lang.String var90 = var70.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var84, false, true);
    java.util.Set var92 = var84.getInitialObsForPid(100);
    boolean var93 = var69.equals((java.lang.Object)var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "digraph {\n"+ "'", var71.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "digraph {\n"+ "'", var72.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var80.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "digraph {\n"+ "'", var81.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "Part-0-1573092703"+ "'", var85.equals("Part-0-1573092703"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var90.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test100() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test100"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    boolean var8 = var2.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    java.util.Set var16 = var10.getTerminalObs();
    var2.removeAllObs(var16);
    boolean var18 = var0.retainAll((java.util.Collection)var16);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var24 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.fifosys.cfsm.fsm.FSM var38 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var24, var29, var35, 100);
    int var39 = var38.getPid();
    java.util.Set var40 = var38.getStates();
    boolean var41 = var0.addAll((java.util.Collection)var40);
    dynoptic.model.alphabet.FSMAlphabet var42 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var48 = var46.getInitialObsForPid(100);
    var44.removeAllObs(var48);
    boolean var50 = var44.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    java.util.Set var58 = var52.getTerminalObs();
    var44.removeAllObs(var58);
    boolean var60 = var42.retainAll((java.util.Collection)var58);
    java.lang.Object[] var62 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var63 = var42.toArray(var62);
    java.lang.Object[] var64 = var42.toArray();
    java.lang.Object[] var65 = var0.toArray(var64);
    dynoptic.model.alphabet.FSMAlphabet var66 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var70 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var72 = var70.getInitialObsForPid(100);
    var68.removeAllObs(var72);
    boolean var74 = var68.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var76 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var80 = var78.getInitialObsForPid(100);
    var76.removeAllObs(var80);
    java.util.Set var82 = var76.getTerminalObs();
    var68.removeAllObs(var82);
    boolean var84 = var66.retainAll((java.util.Collection)var82);
    java.lang.Object[] var86 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var87 = var66.toArray(var86);
    java.lang.Object[] var88 = var66.toArray();
    java.lang.Object[] var89 = var0.toArray(var88);
    int var90 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);

  }

  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test101"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    java.lang.String var21 = var5.toLongString();
    java.util.Set var22 = var5.getTransitioningEvents();
    int var23 = var5.getScmId();
    dynoptic.model.fifosys.cfsm.CFSMState var24 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var26 = var24.isInitForPid(1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var21.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);

  }

  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test102"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    java.lang.String var20 = var0.beginGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    int var42 = var27.getPid();
    int var43 = var27.getScmId();
    int var44 = var27.getPid();
    java.lang.String var47 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var27, false, false);
    java.lang.String var48 = var0.endGraphString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-908703244"+ "'", var14.equals("Part-0-908703244"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "digraph {\n"+ "'", var20.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "  1 [label=\"0\",shape=circle];\n"+ "'", var47.equals("  1 [label=\"0\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "} // digraph {\n"+ "'", var48.equals("} // digraph {\n"));

  }

  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test103"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test104"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.cfsm.fsm.FSM var47 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var33, var38, var44, 100);
    var22.removeAllObs(var44);
    java.util.Set var50 = var22.getInitialObsForPid((-1));
    var14.removeAllObs(var50);
    int var52 = var14.getNumProcesses();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-194041982"+ "'", var15.equals("Part-0-194041982"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 10);

  }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test105"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    int var26 = var11.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var53 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var39, var44, var50, 100);
    var28.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var56 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var5, var11, var50, 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var63 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var68 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var70 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var72 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var74 = var72.getInitialObsForPid(100);
    var70.removeAllObs(var74);
    dynoptic.model.fifosys.cfsm.fsm.FSM var77 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var63, var68, var74, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var79 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var81 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var83 = var81.getInitialObsForPid(100);
    var79.removeAllObs(var83);
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var88 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var90 = var88.getInitialObsForPid(100);
    var86.removeAllObs(var90);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var68, var83, var90);
    dynoptic.model.fifosys.gfsm.GFSMPath var94 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var95 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var94);
    boolean var96 = var68.equals((java.lang.Object)var95);
    boolean var97 = var56.equals((java.lang.Object)var95);
    int var98 = var56.getPid();
    int var99 = var56.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == 10);

  }

  public void test106() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test106"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var58.getPid();
    java.util.Set var60 = var58.getAcceptStates();
    boolean var61 = var0.retainAll((java.util.Collection)var60);
    boolean var62 = var0.isEmpty();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var68 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var79 = var77.getInitialObsForPid(100);
    var75.removeAllObs(var79);
    dynoptic.model.fifosys.cfsm.fsm.FSM var82 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var68, var73, var79, 100);
    boolean var83 = var0.remove((java.lang.Object)var73);
    java.lang.String var84 = var0.anyEventScmQRe();
    java.util.Iterator var85 = var0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "(_)"+ "'", var84.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test107() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test107"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.util.Set var4 = var1.getTransitioningEvents();
    java.util.Set var5 = var1.getInitialObservations();
    boolean var6 = var1.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test108() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test108"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    var21.removeAllObs(var25);
    dynoptic.model.fifosys.cfsm.fsm.FSM var28 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var14, var19, var25, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var19, var34, var41);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    java.lang.String var48 = var45.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    var71.removeAllObs(var75);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var82 = var80.getInitialObsForPid(100);
    var78.removeAllObs(var82);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var60, var75, var82);
    var45.removeAllObs(var82);
    java.util.Set var87 = var45.getInitialObsForPid(10);
    dynoptic.model.fifosys.cfsm.fsm.FSM var89 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var6, var34, (java.util.Collection)var87, (-1));
    boolean var90 = var89.isDeterministic();
    java.lang.String var91 = var89.toString();
    java.util.Set var92 = var89.getInitStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "FSM[pid=1]\n\tstates: []\n\tinits: []\n\taccepts: [0]"+ "'", var91.equals("FSM[pid=1]\n\tstates: []\n\tinits: []\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test109"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    dynoptic.model.automaton.EventTypeEncodings var8 = new dynoptic.model.automaton.EventTypeEncodings(var7);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var15 = var13.getInitialObsForPid(100);
    var11.removeAllObs(var15);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var28 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.fifosys.cfsm.fsm.FSM var37 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var23, var28, var34, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var28, var43, var50);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    java.lang.String var57 = var54.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var64 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var69 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    var71.removeAllObs(var75);
    dynoptic.model.fifosys.cfsm.fsm.FSM var78 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var64, var69, var75, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var82 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var84 = var82.getInitialObsForPid(100);
    var80.removeAllObs(var84);
    dynoptic.model.fifosys.gfsm.GFSMState var87 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var89 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var91 = var89.getInitialObsForPid(100);
    var87.removeAllObs(var91);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var69, var84, var91);
    var54.removeAllObs(var91);
    java.util.Set var96 = var54.getInitialObsForPid(10);
    dynoptic.model.fifosys.cfsm.fsm.FSM var98 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var15, var43, (java.util.Collection)var96, (-1));
    dynoptic.model.automaton.EncodedAutomaton var99 = new dynoptic.model.automaton.EncodedAutomaton(var8, var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "[]"+ "'", var57.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test110() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test110"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var20 = var18.getInitialObsForPid(100);
    java.lang.String var21 = var18.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var28 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.fifosys.cfsm.fsm.FSM var42 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var28, var33, var39, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var48 = var46.getInitialObsForPid(100);
    var44.removeAllObs(var48);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var33, var48, var55);
    var18.removeAllObs(var55);
    var1.addAllObs(var55);
    dynoptic.model.alphabet.FSMAlphabet var60 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var67 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var72 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var74 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var76 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var78 = var76.getInitialObsForPid(100);
    var74.removeAllObs(var78);
    dynoptic.model.fifosys.cfsm.fsm.FSM var81 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var67, var72, var78, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var83 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var85 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var87 = var85.getInitialObsForPid(100);
    var83.removeAllObs(var87);
    dynoptic.model.fifosys.gfsm.GFSMState var90 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var92 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var94 = var92.getInitialObsForPid(100);
    var90.removeAllObs(var94);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var72, var87, var94);
    boolean var97 = var60.retainAll((java.util.Collection)var94);
    java.lang.String var98 = var60.toString();
    var1.addAllObs((java.util.Set)var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var98 + "' != '" + "[]"+ "'", var98.equals("[]"));

  }

  public void test111() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test111"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var37 = var35.getInitialObsForPid(100);
    var33.removeAllObs(var37);
    dynoptic.model.fifosys.cfsm.fsm.FSM var40 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var26, var31, var37, 100);
    int var41 = var40.getPid();
    java.util.Set var42 = var40.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSM var62 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var48, var53, var59, 100);
    int var63 = var48.getPid();
    int var64 = var48.getScmId();
    int var65 = var48.getPid();
    boolean var66 = var40.equals((java.lang.Object)var65);
    java.lang.String var67 = var40.toString();
    java.util.Set var68 = var40.getStates();
    dynoptic.model.automaton.EncodedAutomaton var69 = new dynoptic.model.automaton.EncodedAutomaton(var20, var40);
    java.lang.String var70 = var40.toString();
    java.util.Set var71 = var40.getStates();
    boolean var72 = var40.isDeterministic();
    dynoptic.model.alphabet.FSMAlphabet var73 = var40.getAlphabet();
    java.util.Set var74 = var40.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var67.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var70.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test112() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test112"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    boolean var42 = var40.isInitial();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var44 = var40.isInitForPid(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test113"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(1, "ObsDAGNode[i_hi!_t]", false, false);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var6 = var5.getObsState();
    boolean var7 = var5.isEnabled();
    java.lang.String var8 = var5.toString();
    boolean var9 = var5.isTermState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ObsDAGNode[ObsDAGNode[i_hi!_t]]"+ "'", var8.equals("ObsDAGNode[ObsDAGNode[i_hi!_t]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test114() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test114"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = var1.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test115() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test115"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    java.lang.String var5 = var4.toShortIntString();
    var4.setAccept();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var14 = var11.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var15 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var11);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var16 = var15.getObsState();
    java.lang.String var17 = var15.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = var15.getObsState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var19 = var15.getObsState();
    boolean var20 = var4.equals((java.lang.Object)var19);
    int var21 = var19.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "0"+ "'", var5.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var17.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));

  }

  public void test116() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test116"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("i_hi!_t");

  }

  public void test117() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test117"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 100);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath(var10);
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var14 = var13.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath(var10, var13);
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var17);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var21 = var20.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(var17, var20);
    dynoptic.model.fifosys.gfsm.GFSMPath var24 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var25 = new dynoptic.model.fifosys.gfsm.GFSMPath(var20, var24);
    boolean var26 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var24);
    dynoptic.model.fifosys.gfsm.GFSMPath var27 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, var24);
    dynoptic.model.fifosys.gfsm.GFSMPath var29 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var30 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var29);
    dynoptic.model.fifosys.gfsm.GFSMPath var31 = new dynoptic.model.fifosys.gfsm.GFSMPath(var24, var29);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    java.util.Set var36 = var33.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var38 = new dynoptic.model.fifosys.gfsm.GFSMPath(var33, (-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var39 = new dynoptic.model.fifosys.gfsm.GFSMPath(var29, var38);
    dynoptic.model.fifosys.gfsm.GFSMPath var40 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var39);
    boolean var41 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);

  }

  public void test118() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test118"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = var40.getFSMState(0);
    boolean var45 = var40.isAcceptForPid(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var47 = var40.isAcceptForPid(10);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test119() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test119"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    java.lang.String var2 = var1.toIntermediateString();
    boolean var3 = var1.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-609299001"+ "'", var2.equals("Part-0-609299001"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test120"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("Part-0-2043276784");

  }

  public void test121() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test121"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 0);
    boolean var11 = var1.isAcceptForPid(10);
    int var12 = var1.getNumProcesses();
    java.lang.String var13 = var1.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));

  }

  public void test122() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test122"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    boolean var8 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var7);
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test123() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test123"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    boolean var48 = var19.isDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);

  }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test124"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.lang.String var21 = var19.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    java.util.Set var42 = var41.getAcceptStates();
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var48 = var46.getInitialObsForPid(100);
    var44.removeAllObs(var48);
    boolean var50 = var44.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    java.util.Set var58 = var52.getTerminalObs();
    var44.removeAllObs(var58);
    dynoptic.model.automaton.EventTypeEncodings var60 = new dynoptic.model.automaton.EventTypeEncodings(var58);
    dynoptic.model.automaton.EncodedAutomaton var61 = var41.getEncodedAutomaton(var60);
    dynoptic.model.automaton.EncodedAutomaton var62 = var19.getEncodedAutomaton(var60);
    var62.minimize();
    dk.brics.automaton.Automaton var64 = var62.getAutomaton();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var21.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test125() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test125"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var8.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = var8.getObsState();
    boolean var12 = var8.isTermState();
    boolean var13 = var8.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var19 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var18);
    java.lang.String var20 = var19.toString();
    boolean var21 = var19.hasOccurred();
    synoptic.model.event.Event var22 = var19.getNextEvent();
    var8.addRemoteDependency(var19);
    synoptic.model.event.Event var24 = var19.getNextEvent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var20.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test126"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.lang.String var16 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var13, true, false);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var24 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.fifosys.cfsm.fsm.FSM var38 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var24, var29, var35, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var51 = var49.getInitialObsForPid(100);
    var47.removeAllObs(var51);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var29, var44, var51);
    dynoptic.model.fifosys.gfsm.GFSMPath var55 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var56 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var55);
    boolean var57 = var29.equals((java.lang.Object)var56);
    dynoptic.model.fifosys.cfsm.CFSMState var58 = new dynoptic.model.fifosys.cfsm.CFSMState(var29);
    boolean var59 = var58.isInitial();
    boolean var60 = var58.isAccept();
    boolean var61 = var58.isAccept();
    java.lang.String var64 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString((-1), (dynoptic.model.AbsFSMState)var58, true, true);
    boolean var65 = var58.isInitial();
    java.util.Set var66 = var58.getTransitioningEvents();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var68 = var58.isInitForPid(1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->0;\n"+ "'", var16.equals("  0 [label=\"[]\",shape=circle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "  -1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@15305680\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->-1;\n"+ "'", var64.equals("  -1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@15305680\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->-1;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test127() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test127"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTerminalObs();
    boolean var8 = var1.isAccept();
    java.util.Set var10 = var1.getTerminalObsForPid(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test128() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test128"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 100);
    int var9 = var8.numEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test129"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var20 = var18.getInitialObsForPid(100);
    java.lang.String var21 = var18.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var28 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.fifosys.cfsm.fsm.FSM var42 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var28, var33, var39, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var48 = var46.getInitialObsForPid(100);
    var44.removeAllObs(var48);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var33, var48, var55);
    var18.removeAllObs(var55);
    var1.addAllObs(var55);
    java.util.Set var61 = var1.getInitialObsForPid(0);
    boolean var62 = var1.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test130() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test130"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    java.util.Set var7 = var1.getInitialObservations();
    boolean var9 = var1.isInitForPid(0);
    boolean var10 = var1.isInitial();
    dynoptic.model.alphabet.FSMAlphabet var12 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(1, (java.util.Set)var12);
    java.lang.String var14 = var12.anyEventScmQRe();
    var1.removeAllObs((java.util.Set)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "(_)"+ "'", var14.equals("(_)"));

  }

  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test131"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var20 = var18.getInitialObsForPid(100);
    java.lang.String var21 = var18.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var28 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.fifosys.cfsm.fsm.FSM var42 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var28, var33, var39, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var48 = var46.getInitialObsForPid(100);
    var44.removeAllObs(var48);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var33, var48, var55);
    var18.removeAllObs(var55);
    var1.addAllObs(var55);
    boolean var60 = var1.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test132() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test132"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    java.util.Set var22 = var14.getTerminalObsForPid(100);
    boolean var23 = var14.isInitial();
    java.util.Set var24 = var14.getTransitioningEvents();
    dynoptic.model.automaton.EventTypeEncodings var25 = new dynoptic.model.automaton.EventTypeEncodings(var24);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    dynoptic.model.fifosys.cfsm.fsm.FSM var45 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var31, var36, var42, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var56 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    dynoptic.model.fifosys.cfsm.fsm.FSM var65 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var51, var56, var62, 100);
    dynoptic.model.automaton.EventTypeEncodings var66 = var65.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var71 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var72 = var66.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var73 = var45.getEncodedAutomaton(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var79 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var84 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var88 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var90 = var88.getInitialObsForPid(100);
    var86.removeAllObs(var90);
    dynoptic.model.fifosys.cfsm.fsm.FSM var93 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var79, var84, var90, 100);
    dynoptic.model.automaton.EventTypeEncodings var94 = var93.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var95 = new dynoptic.model.automaton.EncodedAutomaton(var66, var93);
    java.util.Set var96 = var93.getAcceptStates();
    java.util.Set var97 = var93.getInitStates();
    boolean var98 = var25.equals((java.lang.Object)var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-362638254"+ "'", var15.equals("Part-0-362638254"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);

  }

  public void test133() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test133"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    java.lang.String var13 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var5, false, false);
    java.lang.String var14 = var0.endGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var22 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.fifosys.cfsm.fsm.FSM var36 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var22, var27, var33, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    var45.removeAllObs(var49);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var27, var42, var49);
    dynoptic.model.fifosys.gfsm.GFSMPath var53 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var54 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var53);
    boolean var55 = var27.equals((java.lang.Object)var54);
    dynoptic.model.fifosys.cfsm.CFSMState var56 = new dynoptic.model.fifosys.cfsm.CFSMState(var27);
    boolean var57 = var56.isInitial();
    boolean var58 = var56.isInitial();
    boolean var59 = var56.isAccept();
    java.lang.String var62 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var56, false, true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var64 = var56.getFSMState(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.cfsm.fsm.FSMState var66 = var56.getFSMState(10);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var13.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "} // digraph {\n"+ "'", var14.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "  1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@71861582\",shape=circle,shape=doublecircle];\n"+ "'", var62.equals("  1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@71861582\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test134() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test134"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath(var21, (-1));
    boolean var24 = var17.equals((java.lang.Object)var21);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var29 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var31 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var32 = var29.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var33 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var29);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var34 = var33.getObsState();
    java.lang.String var35 = var33.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var36 = var33.getObsState();
    boolean var37 = var33.isTermState();
    boolean var38 = var33.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var43 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var44 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var43);
    java.lang.String var45 = var44.toString();
    boolean var46 = var44.hasOccurred();
    synoptic.model.event.Event var47 = var44.getNextEvent();
    var33.addRemoteDependency(var44);
    boolean var49 = var17.equals((java.lang.Object)var33);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    int var70 = var69.getPid();
    java.util.Set var71 = var69.getInitStates();
    dynoptic.model.automaton.EncodedAutomaton var72 = new dynoptic.model.automaton.EncodedAutomaton(var17, var69);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var74 = var17.getEventType(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var35.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var45.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test135() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test135"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var11 = var9.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test136() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test136"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.util.Set var4 = var1.getTransitioningEvents();
    java.util.Set var5 = var1.getInitialObservations();
    java.util.Set var6 = var1.getNextStates();
    var1.recreateCachedTransitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test137() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test137"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    dynoptic.model.alphabet.FSMAlphabet var7 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    boolean var15 = var9.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var21 = var19.getInitialObsForPid(100);
    var17.removeAllObs(var21);
    java.util.Set var23 = var17.getTerminalObs();
    var9.removeAllObs(var23);
    boolean var25 = var7.retainAll((java.util.Collection)var23);
    java.lang.String var26 = var7.toString();
    var1.addAllObs((java.util.Set)var7);
    boolean var28 = var1.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test138() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test138"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 0);
    boolean var11 = var1.isAcceptForPid(10);
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 100);
    int var14 = var13.numStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);

  }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test139"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var11);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, var15);
    boolean var17 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var21 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var20);
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15, var20);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    java.util.Set var27 = var24.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var29 = new dynoptic.model.fifosys.gfsm.GFSMPath(var24, (-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var30 = new dynoptic.model.fifosys.gfsm.GFSMPath(var20, var29);
    int var31 = var20.numStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);

  }

  public void test140() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test140"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var52 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    boolean var53 = var47.equals((java.lang.Object)1);
    dk.brics.automaton.Automaton var54 = var47.getAutomaton();
    boolean var56 = var47.equals((java.lang.Object)10);
    var47.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test141() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test141"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 10, (-1));
    int var5 = var4.getScmId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));

  }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test142"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    java.lang.Object[] var2 = var0.toArray();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var8 = var5.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    dynoptic.model.alphabet.FSMAlphabet var16 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    boolean var24 = var18.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var30 = var28.getInitialObsForPid(100);
    var26.removeAllObs(var30);
    java.util.Set var32 = var26.getTerminalObs();
    var18.removeAllObs(var32);
    boolean var34 = var16.retainAll((java.util.Collection)var32);
    java.lang.Object[] var36 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var37 = var16.toArray(var36);
    java.lang.Object[] var38 = var16.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var5, var14, (java.util.Set)var16);
    boolean var40 = var0.removeAll((java.util.Collection)var14);
    boolean var41 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);

  }

  public void test143() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test143"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var8.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = var8.getObsState();
    boolean var12 = var8.isTermState();
    boolean var13 = var8.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var19 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var18);
    java.lang.String var20 = var19.toString();
    boolean var21 = var19.hasOccurred();
    synoptic.model.event.Event var22 = var19.getNextEvent();
    var8.addRemoteDependency(var19);
    boolean var24 = var19.hasOccurred();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var25 = var19.getPrevState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var20.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test144"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    var5.setAccept();
    java.lang.String var21 = var5.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "FSM_state: init[true], accept[true] id[0]"+ "'", var21.equals("FSM_state: init[true], accept[true] id[0]"));

  }

  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test145"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(0, "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n", true, false);
    boolean var5 = var4.isTerminal();
    int var6 = var4.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test146() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test146"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    int var48 = var19.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1));

  }

  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test147"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    var0.clear();
    java.lang.String var3 = var0.toString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    dynoptic.model.alphabet.FSMAlphabet var11 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    boolean var19 = var13.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    var21.removeAllObs(var25);
    java.util.Set var27 = var21.getTerminalObs();
    var13.removeAllObs(var27);
    boolean var29 = var11.retainAll((java.util.Collection)var27);
    java.lang.String var30 = var11.toString();
    var5.addAllObs((java.util.Set)var11);
    dynoptic.model.alphabet.FSMAlphabet var32 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var53 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var39, var44, var50, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var44, var59, var66);
    boolean var69 = var32.retainAll((java.util.Collection)var66);
    int var70 = var32.size();
    boolean var71 = var11.retainAll((java.util.Collection)var32);
    java.util.Iterator var72 = var32.iterator();
    java.lang.String var73 = var32.anyEventScmQRe();
    boolean var74 = var0.removeAll((java.util.Collection)var32);
    java.lang.String var75 = var32.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[]"+ "'", var30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "(_)"+ "'", var73.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "[]"+ "'", var75.equals("[]"));

  }

  public void test148() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test148"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    java.lang.String var20 = var13.toString();
    java.util.Set var22 = var13.getTerminalObsForPid(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-1087040729"+ "'", var14.equals("Part-0-1087040729"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test149() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test149"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    java.util.Set var2 = var1.getTerminalObs();
    dynoptic.model.alphabet.FSMAlphabet var3 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var4 = var3.toScmParametersString();
    dynoptic.model.alphabet.FSMAlphabet var5 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var17, var32, var39);
    boolean var42 = var5.retainAll((java.util.Collection)var39);
    java.lang.Object[] var43 = var5.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var54 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    var56.removeAllObs(var60);
    dynoptic.model.fifosys.cfsm.fsm.FSM var63 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var49, var54, var60, 100);
    int var64 = var63.getPid();
    java.util.Set var65 = var63.getAcceptStates();
    boolean var66 = var5.retainAll((java.util.Collection)var65);
    boolean var67 = var5.isEmpty();
    var5.clear();
    boolean var69 = var3.containsAll((java.util.Collection)var5);
    var1.removeAllObs((java.util.Set)var3);
    boolean var72 = var1.isInitForPid(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test150() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test150"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    java.lang.String var13 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var5, false, false);
    java.lang.String var14 = var0.endGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var22 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.fifosys.cfsm.fsm.FSM var36 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var22, var27, var33, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    var45.removeAllObs(var49);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var27, var42, var49);
    dynoptic.model.fifosys.gfsm.GFSMPath var53 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var54 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var53);
    boolean var55 = var27.equals((java.lang.Object)var54);
    dynoptic.model.fifosys.cfsm.CFSMState var56 = new dynoptic.model.fifosys.cfsm.CFSMState(var27);
    boolean var57 = var56.isInitial();
    boolean var58 = var56.isInitial();
    boolean var59 = var56.isAccept();
    java.lang.String var62 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var56, false, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var64 = var56.isInitForPid(10);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var13.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "} // digraph {\n"+ "'", var14.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "  1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@5314a6e\",shape=circle,shape=doublecircle];\n"+ "'", var62.equals("  1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@5314a6e\",shape=circle,shape=doublecircle];\n"));

  }

  public void test151() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test151"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    boolean var7 = var5.hasOccurred();
    int var8 = var5.getPid();
    boolean var9 = var5.isInitState();
    int var10 = var5.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));

  }

  public void test152() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test152"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var52 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    boolean var53 = var47.equals((java.lang.Object)1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var59 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var64 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var70 = var68.getInitialObsForPid(100);
    var66.removeAllObs(var70);
    dynoptic.model.fifosys.cfsm.fsm.FSM var73 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var59, var64, var70, 100);
    int var74 = var73.getPid();
    java.util.Set var75 = var73.getStates();
    boolean var76 = var47.equals((java.lang.Object)var73);
    dk.brics.automaton.Automaton var77 = var47.getAutomaton();
    var47.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test153"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-196198354");

  }

  public void test154() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test154"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    java.util.Set var22 = var14.getTerminalObsForPid(100);
    boolean var23 = var14.isInitial();
    java.util.Set var24 = var14.getTransitioningEvents();
    dynoptic.model.automaton.EventTypeEncodings var25 = new dynoptic.model.automaton.EventTypeEncodings(var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var27 = var25.getEventType('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-891121814"+ "'", var15.equals("Part-0-891121814"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test155"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var45 = var42.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var46 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var51 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var52 = var51.getName();
    boolean var53 = var42.equals((java.lang.Object)var51);
    boolean var54 = var0.contains((java.lang.Object)var42);
    dynoptic.model.alphabet.FSMAlphabet var55 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var61 = var59.getInitialObsForPid(100);
    var57.removeAllObs(var61);
    boolean var63 = var57.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var65 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var69 = var67.getInitialObsForPid(100);
    var65.removeAllObs(var69);
    java.util.Set var71 = var65.getTerminalObs();
    var57.removeAllObs(var71);
    boolean var73 = var55.retainAll((java.util.Collection)var71);
    java.lang.Object[] var75 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var76 = var55.toArray(var75);
    java.lang.Object[] var77 = var0.toArray(var75);
    java.lang.Object[] var78 = var0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var52.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test156"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var6 = var5.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    int var27 = var12.getPid();
    int var28 = var12.getScmId();
    dynoptic.model.alphabet.FSMAlphabet var29 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var41 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.cfsm.fsm.FSM var50 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var36, var41, var47, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var41, var56, var63);
    boolean var66 = var29.retainAll((java.util.Collection)var63);
    java.lang.String var67 = var29.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var12, (java.util.Set)var29, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var70 = new dynoptic.model.fifosys.cfsm.CFSMState(var12);
    java.util.Set var71 = var70.getTransitioningEvents();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = var70.getFSMState(1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[]"+ "'", var67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test157"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n");

  }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test158"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    int var40 = var11.getPid();
    int var41 = var11.getScmId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);

  }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test159"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.lang.String var4 = var1.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var16, var31, var38);
    var1.removeAllObs(var38);
    java.lang.String var42 = var1.toLongString();
    java.lang.String var43 = var1.toString();
    boolean var44 = var1.isAccept();
    java.util.Set var45 = var1.getObservedStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "[]"+ "'", var43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test160() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test160"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    boolean var6 = var5.hasOccurred();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var7 = var5.getPrevState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test161() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test161"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "  100 [label=\"[]\",shape=circle];\n", false, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test162() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test162"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var2 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var3 = var1.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test163() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test163"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    java.util.Set var21 = var20.getAcceptStates();
    java.util.Set var22 = var20.getInitStates();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(100, var22);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test164"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    java.lang.Object[] var2 = var0.toArray();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.util.Set var8 = var5.getTransitioningEvents();
    java.util.Set var9 = var5.getInitialObservations();
    java.util.Set var10 = var5.getNextStates();
    dynoptic.model.alphabet.FSMAlphabet var11 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    dynoptic.model.fifosys.cfsm.fsm.FSM var32 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var18, var23, var29, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var45 = var43.getInitialObsForPid(100);
    var41.removeAllObs(var45);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var23, var38, var45);
    boolean var48 = var11.retainAll((java.util.Collection)var45);
    java.lang.Object[] var49 = var11.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    int var70 = var69.getPid();
    java.util.Set var71 = var69.getAcceptStates();
    boolean var72 = var11.retainAll((java.util.Collection)var71);
    boolean var73 = var11.isEmpty();
    var11.clear();
    var11.clear();
    dynoptic.model.alphabet.FSMAlphabet var76 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var82 = var80.getInitialObsForPid(100);
    var78.removeAllObs(var82);
    boolean var84 = var78.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var88 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var90 = var88.getInitialObsForPid(100);
    var86.removeAllObs(var90);
    java.util.Set var92 = var86.getTerminalObs();
    var78.removeAllObs(var92);
    boolean var94 = var76.retainAll((java.util.Collection)var92);
    dynoptic.model.fifosys.cfsm.fsm.FSM var96 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var10, (java.util.Set)var11, (java.util.Collection)var76, 100);
    java.lang.Object[] var97 = var76.toArray();
    java.lang.Object[] var98 = var0.toArray(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test165() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test165"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("Part-0-814261062");

  }

  public void test166() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test166"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    var0.clear();
    java.lang.String var3 = var0.toString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var8 = var5.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var15 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var20 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.cfsm.fsm.FSM var29 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var15, var20, var26, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var20, var35, var42);
    var5.removeAllObs(var42);
    boolean var47 = var5.isInitForPid(100);
    java.util.Set var48 = var5.getTransitioningEvents();
    boolean var49 = var0.retainAll((java.util.Collection)var48);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var53 = var51.getTerminalObsForPid(1);
    boolean var54 = var0.removeAll((java.util.Collection)var53);
    java.util.Set var55 = var0.getLocalEventScmStrings();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test167() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test167"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    var4.markTerm();
    var4.markTerm();
    java.lang.String var7 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ObsDAGNode[i_hi!_t]_t"+ "'", var7.equals("ObsDAGNode[i_hi!_t]_t"));

  }

  public void test168() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test168"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getStates();
    java.lang.String var22 = var19.toString();
    int var23 = var19.getPid();
    java.lang.String var24 = var19.toString();
    java.util.Set var25 = var19.getAcceptStates();
    boolean var26 = var19.isDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var22.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var24.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);

  }

  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test169"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var3 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var4 = var3.numStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test170() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test170"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var8);
    boolean var10 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var11 = var4.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test171() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test171"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.lang.String var4 = var1.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var16, var31, var38);
    var1.removeAllObs(var38);
    java.lang.String var42 = var1.toLongString();
    java.lang.String var43 = var1.toString();
    boolean var44 = var1.isAccept();
    java.util.Set var45 = var1.getInitialObservations();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "[]"+ "'", var43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test172() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test172"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var37 = var35.getInitialObsForPid(100);
    var33.removeAllObs(var37);
    dynoptic.model.fifosys.cfsm.fsm.FSM var40 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var26, var31, var37, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var57 = var55.getInitialObsForPid(100);
    var53.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var60 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var46, var51, var57, 100);
    dynoptic.model.automaton.EventTypeEncodings var61 = var60.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var66 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var67 = var61.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var68 = var40.getEncodedAutomaton(var61);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var74 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var79 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var81 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var83 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var85 = var83.getInitialObsForPid(100);
    var81.removeAllObs(var85);
    dynoptic.model.fifosys.cfsm.fsm.FSM var88 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var74, var79, var85, 100);
    dynoptic.model.automaton.EventTypeEncodings var89 = var88.getEventTypeEncodings();
    boolean var90 = var68.equals((java.lang.Object)var88);
    java.util.Set var91 = var88.getStates();
    java.util.Set var92 = var88.getAcceptStates();
    java.lang.String var93 = var88.toString();
    dynoptic.model.automaton.EncodedAutomaton var94 = new dynoptic.model.automaton.EncodedAutomaton(var20, var88);
    dk.brics.automaton.Automaton var95 = var94.getAutomaton();
    dk.brics.automaton.Automaton var96 = var94.getAutomaton();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var93.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test173"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var45 = var42.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var46 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var51 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var52 = var51.getName();
    boolean var53 = var42.equals((java.lang.Object)var51);
    boolean var54 = var0.contains((java.lang.Object)var42);
    java.lang.String var55 = var0.toScmParametersString();
    java.lang.String var56 = var0.toString();
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    java.util.Set var61 = var58.getTransitioningEvents();
    java.util.Set var62 = var58.getInitialObservations();
    java.util.Set var63 = var58.getNextStates();
    java.util.Set var64 = var58.getObservedStates();
    boolean var65 = var0.retainAll((java.util.Collection)var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var52.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + ""+ "'", var55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "[]"+ "'", var56.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test174() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test174"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var6 = var5.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    int var27 = var12.getPid();
    int var28 = var12.getScmId();
    dynoptic.model.alphabet.FSMAlphabet var29 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var41 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.cfsm.fsm.FSM var50 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var36, var41, var47, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var41, var56, var63);
    boolean var66 = var29.retainAll((java.util.Collection)var63);
    java.lang.String var67 = var29.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var12, (java.util.Set)var29, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var70 = new dynoptic.model.fifosys.cfsm.CFSMState(var12);
    dynoptic.model.fifosys.cfsm.CFSMState var71 = new dynoptic.model.fifosys.cfsm.CFSMState(var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var73 = var71.isAcceptForPid((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[]"+ "'", var67.equals("[]"));

  }

  public void test175() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test175"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.util.Set var4 = var1.getTransitioningEvents();
    boolean var6 = var1.isInitForPid(0);
    java.lang.String var7 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[]"+ "'", var7.equals("[]"));

  }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test176"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var9 = var1.numEvents();
    boolean var10 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var12 = var1.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test177() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test177"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-142333344");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-142333344"+ "'", var2.equals("Part-0-142333344"));

  }

  public void test178() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test178"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.util.Set var4 = var1.getTransitioningEvents();
    java.util.Set var6 = var1.getTerminalObsForPid(100);
    dynoptic.model.automaton.EventTypeEncodings var7 = new dynoptic.model.automaton.EventTypeEncodings(var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var9 = var7.getEventType('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test179"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(0, true, false);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var4 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var3);
    boolean var5 = var3.isTerminal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test180"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.automaton.EventTypeEncodings var68 = var67.getEventTypeEncodings();
    boolean var69 = var47.equals((java.lang.Object)var67);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var75 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var80 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var82 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var84 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var86 = var84.getInitialObsForPid(100);
    var82.removeAllObs(var86);
    dynoptic.model.fifosys.cfsm.fsm.FSM var89 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var75, var80, var86, 100);
    java.util.Set var90 = var89.getAcceptStates();
    java.util.Set var91 = var89.getStates();
    boolean var92 = var47.equals((java.lang.Object)var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test181() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test181"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    java.lang.String var13 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var5, false, false);
    java.lang.String var14 = var0.endGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var22 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.fifosys.cfsm.fsm.FSM var36 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var22, var27, var33, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    var45.removeAllObs(var49);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var27, var42, var49);
    dynoptic.model.fifosys.gfsm.GFSMPath var53 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var54 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var53);
    boolean var55 = var27.equals((java.lang.Object)var54);
    dynoptic.model.fifosys.cfsm.CFSMState var56 = new dynoptic.model.fifosys.cfsm.CFSMState(var27);
    boolean var57 = var56.isInitial();
    boolean var58 = var56.isInitial();
    boolean var59 = var56.isAccept();
    java.lang.String var62 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var56, false, true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var64 = var56.getFSMState(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var66 = var56.isAcceptForPid(1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var13.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "} // digraph {\n"+ "'", var14.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "  1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@5565073f\",shape=circle,shape=doublecircle];\n"+ "'", var62.equals("  1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@5565073f\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test182() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test182"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    var21.removeAllObs(var25);
    dynoptic.model.fifosys.cfsm.fsm.FSM var28 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var14, var19, var25, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var19, var34, var41);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    java.lang.String var48 = var45.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    var71.removeAllObs(var75);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var82 = var80.getInitialObsForPid(100);
    var78.removeAllObs(var82);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var60, var75, var82);
    var45.removeAllObs(var82);
    java.util.Set var87 = var45.getInitialObsForPid(10);
    dynoptic.model.fifosys.cfsm.fsm.FSM var89 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var6, var34, (java.util.Collection)var87, (-1));
    boolean var90 = var89.isDeterministic();
    dynoptic.model.alphabet.FSMAlphabet var91 = var89.getAlphabet();
    java.lang.String var92 = var91.toScmParametersString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + ""+ "'", var92.equals(""));

  }

  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test183"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.lang.String var4 = var1.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var16, var31, var38);
    var1.removeAllObs(var38);
    boolean var42 = var1.isInitial();
    java.lang.String var43 = var1.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "[]"+ "'", var43.equals("[]"));

  }

  public void test184() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test184"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var45 = var42.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var46 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var51 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var52 = var51.getName();
    boolean var53 = var42.equals((java.lang.Object)var51);
    boolean var54 = var0.contains((java.lang.Object)var42);
    java.util.Iterator var55 = var0.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var52.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test185() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test185"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    java.lang.String var7 = var6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "GFSMPath : []"+ "'", var7.equals("GFSMPath : []"));

  }

  public void test186() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test186"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var8 = var7.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test187"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    java.lang.String var7 = var4.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    dynoptic.model.alphabet.FSMAlphabet var15 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var21 = var19.getInitialObsForPid(100);
    var17.removeAllObs(var21);
    boolean var23 = var17.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    java.util.Set var31 = var25.getTerminalObs();
    var17.removeAllObs(var31);
    boolean var33 = var15.retainAll((java.util.Collection)var31);
    java.lang.Object[] var35 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var36 = var15.toArray(var35);
    java.lang.Object[] var37 = var15.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var4, var13, (java.util.Set)var15);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    boolean var46 = var40.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var52 = var50.getInitialObsForPid(100);
    var48.removeAllObs(var52);
    java.util.Set var54 = var48.getTerminalObs();
    var40.removeAllObs(var54);
    dynoptic.model.automaton.EventTypeEncodings var56 = new dynoptic.model.automaton.EventTypeEncodings(var54);
    boolean var57 = var15.addAll((java.util.Collection)var54);
    var1.removeAllObs((java.util.Set)var15);
    boolean var59 = var1.isInitial();
    java.util.Set var60 = var1.getTerminalObs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[]"+ "'", var7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test188() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test188"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    int var36 = var11.getScmId();
    int var37 = var11.getScmId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);

  }

  public void test189() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test189"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var52 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    boolean var53 = var47.equals((java.lang.Object)1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var59 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var64 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var70 = var68.getInitialObsForPid(100);
    var66.removeAllObs(var70);
    dynoptic.model.fifosys.cfsm.fsm.FSM var73 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var59, var64, var70, 100);
    int var74 = var73.getPid();
    java.util.Set var75 = var73.getStates();
    boolean var76 = var47.equals((java.lang.Object)var73);
    var47.minimize();
    var47.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test190"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    boolean var7 = var5.hasOccurred();
    synoptic.model.event.Event var8 = var5.getNextEvent();
    java.lang.String var9 = var5.toString();
    var5.setOccurred(false);
    boolean var12 = var5.isInitState();
    int var13 = var5.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var9.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));

  }

  public void test191() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test191"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var17);
    boolean var22 = var21.isInitial();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var28 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.fifosys.cfsm.fsm.FSM var42 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var28, var33, var39, 100);
    var28.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var44 = new dynoptic.model.fifosys.cfsm.CFSMState(var28);
    java.util.Set var45 = var44.getTransitioningEvents();
    int var46 = var44.getNumProcesses();
    java.util.Set var47 = var44.getTransitioningEvents();
    var21.addAllObs(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test192() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test192"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var4 = var2.getInitialObsForPid(100);
    java.lang.String var5 = var2.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var7 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var11 = var9.getInitialObsForPid(100);
    var7.removeAllObs(var11);
    dynoptic.model.alphabet.FSMAlphabet var13 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var19 = var17.getInitialObsForPid(100);
    var15.removeAllObs(var19);
    boolean var21 = var15.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    java.util.Set var29 = var23.getTerminalObs();
    var15.removeAllObs(var29);
    boolean var31 = var13.retainAll((java.util.Collection)var29);
    java.lang.Object[] var33 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var34 = var13.toArray(var33);
    java.lang.Object[] var35 = var13.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var2, var11, (java.util.Set)var13);
    java.lang.String var37 = var2.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMPath var39 = new dynoptic.model.fifosys.gfsm.GFSMPath(var2, 0);
    int var40 = var39.numStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[]"+ "'", var37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);

  }

  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test193"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var3 = var2.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var5 = new dynoptic.model.fifosys.gfsm.GFSMPath(var2, 1);
    java.util.Set var6 = var2.getInitialObservations();
    java.util.Set var7 = var2.getTransitioningEvents();
    boolean var8 = var2.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var12 = var10.getInitialObsForPid(100);
    java.lang.String var13 = var10.toIntermediateString();
    dynoptic.model.alphabet.FSMAlphabet var14 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var15 = var14.toScmParametersString();
    var14.clear();
    var10.addAllObs((java.util.Set)var14);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var20 = var19.toIntermediateString();
    boolean var21 = var19.isAccept();
    java.util.Set var23 = var19.getInitialObsForPid(10);
    java.util.Set var25 = var19.getTerminalObsForPid(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(0, (dynoptic.model.AbsFSMState)var2, (java.util.Set)var14, var25);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Part-0-326397460"+ "'", var3.equals("Part-0-326397460"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Part-0-578614687"+ "'", var13.equals("Part-0-578614687"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + ""+ "'", var15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Part-0-1902627593"+ "'", var20.equals("Part-0-1902627593"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test194() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test194"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var2 = var1.toIntermediateString();
    boolean var3 = var1.isAccept();
    java.util.Set var5 = var1.getInitialObsForPid(10);
    java.lang.String var6 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-2093498002"+ "'", var2.equals("Part-0-2093498002"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));

  }

  public void test195() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test195"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(0);

  }

  public void test196() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test196"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var3 = var2.toIntermediateString();
    boolean var4 = var2.isAccept();
    java.util.Set var5 = var2.getTerminalObs();
    dynoptic.model.fifosys.gfsm.GFSMState var7 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var11 = var9.getInitialObsForPid(100);
    var7.removeAllObs(var11);
    var2.removeAllObs(var11);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Part-0-1145030741"+ "'", var3.equals("Part-0-1145030741"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test197() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test197"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var3 = var1.numEvents();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var4 = var1.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test198"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    int var26 = var11.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var53 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var39, var44, var50, 100);
    var28.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var56 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var5, var11, var50, 1);
    dynoptic.model.automaton.EventTypeEncodings var57 = new dynoptic.model.automaton.EventTypeEncodings(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test199() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test199"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var6 = var5.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    int var27 = var12.getPid();
    int var28 = var12.getScmId();
    dynoptic.model.alphabet.FSMAlphabet var29 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var41 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.cfsm.fsm.FSM var50 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var36, var41, var47, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var41, var56, var63);
    boolean var66 = var29.retainAll((java.util.Collection)var63);
    java.lang.String var67 = var29.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var12, (java.util.Set)var29, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var70 = new dynoptic.model.fifosys.cfsm.CFSMState(var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.cfsm.fsm.FSMState var72 = var70.getFSMState(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[]"+ "'", var67.equals("[]"));

  }

  public void test200() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test200"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    var5.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var21 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    boolean var22 = var5.isAccept();
    java.util.Set var23 = var5.getNextStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test201() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test201"); }


    dynoptic.model.alphabet.FSMAlphabet var1 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var8 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var13 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var19 = var17.getInitialObsForPid(100);
    var15.removeAllObs(var19);
    dynoptic.model.fifosys.cfsm.fsm.FSM var22 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var8, var13, var19, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var28 = var26.getInitialObsForPid(100);
    var24.removeAllObs(var28);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var13, var28, var35);
    boolean var38 = var1.retainAll((java.util.Collection)var35);
    java.lang.Object[] var39 = var1.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var45 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var50 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.cfsm.fsm.FSM var59 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var45, var50, var56, 100);
    int var60 = var59.getPid();
    java.util.Set var61 = var59.getAcceptStates();
    boolean var62 = var1.retainAll((java.util.Collection)var61);
    boolean var63 = var1.isEmpty();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var69 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var74 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var76 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var80 = var78.getInitialObsForPid(100);
    var76.removeAllObs(var80);
    dynoptic.model.fifosys.cfsm.fsm.FSM var83 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var69, var74, var80, 100);
    boolean var84 = var1.remove((java.lang.Object)var74);
    java.lang.String var85 = var1.anyEventScmQRe();
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState((-1), (java.util.Set)var1);
    dynoptic.model.fifosys.gfsm.GFSMState var88 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    boolean var89 = var1.remove((java.lang.Object)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "(_)"+ "'", var85.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test202() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test202"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    boolean var43 = var40.isInitForPid(0);
    boolean var45 = var40.isAcceptForPid(0);
    boolean var46 = var40.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);

  }

  public void test203() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test203"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    java.util.Set var8 = var2.getTerminalObs();
    java.util.Set var10 = var2.getInitialObsForPid(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10, var10);
    java.util.Set var13 = var11.getTerminalObsForPid((-1));
    java.lang.String var14 = var11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));

  }

  public void test204() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test204"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-1948528802");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-1948528802"+ "'", var2.equals("Part-0-1948528802"));

  }

  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test205"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var16 = var13.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var17 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = var17.getObsState();
    boolean var19 = var17.isEnabled();
    var17.setOccurred(false);
    var8.addRemoteDependency(var17);
    synoptic.model.event.Event var23 = var17.getNextEvent();
    synoptic.model.event.Event var24 = var17.getNextEvent();
    boolean var25 = var17.isEnabled();
    boolean var26 = var17.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);

  }

  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test206"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    var5.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var21 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    boolean var23 = var21.isAcceptForPid(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = var21.getFSMState(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test207() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test207"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var34 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var40 = var38.getInitialObsForPid(100);
    var36.removeAllObs(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSM var43 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var29, var34, var40, 100);
    int var44 = var29.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var57 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var62 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var68 = var66.getInitialObsForPid(100);
    var64.removeAllObs(var68);
    dynoptic.model.fifosys.cfsm.fsm.FSM var71 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var57, var62, var68, 100);
    var46.removeAllObs(var68);
    dynoptic.model.fifosys.cfsm.fsm.FSM var74 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var23, var29, var68, 1);
    java.util.Set var75 = var74.getAcceptStates();
    dynoptic.model.automaton.EncodedAutomaton var76 = new dynoptic.model.automaton.EncodedAutomaton(var17, var74);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var79 = var78.toIntermediateString();
    boolean var80 = var78.isAccept();
    java.util.Set var82 = var78.getInitialObsForPid(10);
    java.util.Set var84 = var78.getTerminalObsForPid(0);
    java.util.Set var86 = var78.getTerminalObsForPid((-1));
    boolean var88 = var78.isAcceptForPid(0);
    boolean var89 = var74.equals((java.lang.Object)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "Part-0-509770293"+ "'", var79.equals("Part-0-509770293"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test208() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test208"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    boolean var28 = var22.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    java.util.Set var36 = var30.getTerminalObs();
    var22.removeAllObs(var36);
    dynoptic.model.automaton.EventTypeEncodings var38 = new dynoptic.model.automaton.EventTypeEncodings(var36);
    dynoptic.model.automaton.EncodedAutomaton var39 = var19.getEncodedAutomaton(var38);
    var39.minimize();
    dk.brics.automaton.Automaton var41 = var39.getAutomaton();
    dk.brics.automaton.Automaton var42 = var39.getAutomaton();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test209() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test209"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var58.getPid();
    java.util.Set var60 = var58.getAcceptStates();
    boolean var61 = var0.retainAll((java.util.Collection)var60);
    boolean var62 = var0.isEmpty();
    var0.clear();
    java.lang.Object[] var64 = var0.toArray();
    int var65 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);

  }

  public void test210() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test210"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = var40.getFSMState(0);
    dynoptic.model.fifosys.cfsm.CFSMState var44 = new dynoptic.model.fifosys.cfsm.CFSMState(var43);
    boolean var45 = var44.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);

  }

  public void test211() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test211"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 100, 0);
    int var5 = var4.getPid();
    var4.setAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);

  }

  public void test212() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test212"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    java.util.Set var22 = var14.getTerminalObsForPid(100);
    java.lang.String var23 = var14.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var28 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (-1), 1);
    java.lang.String var29 = var28.toShortIntString();
    java.util.Set var30 = var28.getNextStates();
    var14.removeAllObs(var30);
    boolean var32 = var14.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-1797728320"+ "'", var15.equals("Part-0-1797728320"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "1"+ "'", var29.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test213() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test213"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.lang.String var16 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var13, true, false);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var24 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.fifosys.cfsm.fsm.FSM var38 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var24, var29, var35, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var51 = var49.getInitialObsForPid(100);
    var47.removeAllObs(var51);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var29, var44, var51);
    dynoptic.model.fifosys.gfsm.GFSMPath var55 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var56 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var55);
    boolean var57 = var29.equals((java.lang.Object)var56);
    dynoptic.model.fifosys.cfsm.CFSMState var58 = new dynoptic.model.fifosys.cfsm.CFSMState(var29);
    boolean var59 = var58.isInitial();
    boolean var60 = var58.isAccept();
    boolean var61 = var58.isAccept();
    java.lang.String var64 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString((-1), (dynoptic.model.AbsFSMState)var58, true, true);
    boolean var65 = var58.isInitial();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var67 = var58.isAcceptForPid(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->0;\n"+ "'", var16.equals("  0 [label=\"[]\",shape=circle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "  -1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@4a4718e8\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->-1;\n"+ "'", var64.equals("  -1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@4a4718e8\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->-1;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test214() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test214"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    java.lang.String var36 = var11.toLongString();
    java.lang.String var37 = var11.toLongString();
    java.lang.String var38 = var11.toString();
    java.util.Set var39 = var11.getNextStates();
    int var40 = var11.getScmId();
    java.lang.String var41 = var11.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var36.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var37.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "0"+ "'", var38.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var41.equals("FSM_state: init[true], accept[false] id[0]"));

  }

  public void test215() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test215"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var25 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var26 = var20.equals((java.lang.Object)true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    dynoptic.model.fifosys.cfsm.fsm.FSM var46 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var32, var37, var43, 100);
    int var47 = var32.getPid();
    java.lang.String var48 = var32.toLongString();
    boolean var49 = var20.equals((java.lang.Object)var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var51 = var20.getEventType(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var48.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test216() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test216"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    java.lang.String var13 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var5, false, false);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var18 = var16.getTerminalObsForPid(1);
    java.lang.String var19 = var16.toLongString();
    java.lang.String var22 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var16, false, false);
    java.lang.String var23 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var28 = var26.getInitialObsForPid(100);
    java.lang.String var29 = var26.toLongString();
    java.lang.String var30 = var26.toIntermediateString();
    var26.recreateCachedTransitions();
    java.lang.String var34 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var26, false, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var13.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]_i_t"+ "'", var19.equals("[]_i_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "  100 [label=\"[]\",shape=circle];\n"+ "'", var22.equals("  100 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "digraph {\n"+ "'", var23.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[]"+ "'", var29.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Part-0-45352411"+ "'", var30.equals("Part-0-45352411"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "  0 [label=\"[]\",shape=circle];\n"+ "'", var34.equals("  0 [label=\"[]\",shape=circle];\n"));

  }

  public void test217() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test217"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("  -1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@196dbccb\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->-1;\n");

  }

  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test218"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-388846836");

  }

  public void test219() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test219"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var16 = var13.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var17 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = var17.getObsState();
    boolean var19 = var17.isEnabled();
    var17.setOccurred(false);
    var8.addRemoteDependency(var17);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var23 = var17.getObsState();
    boolean var24 = var17.hasOccurred();
    int var25 = var17.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));

  }

  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test220"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var45 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var50 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.cfsm.fsm.FSM var59 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var45, var50, var56, 100);
    dynoptic.model.automaton.EventTypeEncodings var60 = var59.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var65 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var66 = var60.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var67 = var39.getEncodedAutomaton(var60);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var78 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var82 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var84 = var82.getInitialObsForPid(100);
    var80.removeAllObs(var84);
    dynoptic.model.fifosys.cfsm.fsm.FSM var87 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var73, var78, var84, 100);
    dynoptic.model.automaton.EventTypeEncodings var88 = var87.getEventTypeEncodings();
    boolean var89 = var67.equals((java.lang.Object)var87);
    dynoptic.model.automaton.EncodedAutomaton var90 = new dynoptic.model.automaton.EncodedAutomaton(var17, var87);
    dynoptic.model.alphabet.FSMAlphabet var91 = var87.getAlphabet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test221"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    int var7 = var5.getPid();
    int var8 = var5.getPid();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var14 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var15 = var14.getNextState();
    var5.addRemoteDependency(var14);
    java.lang.String var17 = var14.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var17.equals("ObsDAGNode[i_hi!_t]"));

  }

  public void test222() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test222"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    var0.clear();
    java.lang.String var3 = var0.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var8 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var11 = var8.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var12 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var8);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var17 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var19 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var20 = var17.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var21 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var17);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var22 = var21.getObsState();
    boolean var23 = var21.isEnabled();
    var21.setOccurred(false);
    var12.addRemoteDependency(var21);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var27 = var21.getObsState();
    boolean var28 = var0.remove((java.lang.Object)var27);
    java.lang.String var29 = var0.anyEventScmQRe();
    boolean var30 = var0.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(_)"+ "'", var29.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);

  }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test223"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    var21.removeAllObs(var25);
    dynoptic.model.fifosys.cfsm.fsm.FSM var28 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var14, var19, var25, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var19, var34, var41);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    java.lang.String var48 = var45.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    var71.removeAllObs(var75);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var82 = var80.getInitialObsForPid(100);
    var78.removeAllObs(var82);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var60, var75, var82);
    var45.removeAllObs(var82);
    java.util.Set var87 = var45.getInitialObsForPid(10);
    dynoptic.model.fifosys.cfsm.fsm.FSM var89 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var6, var34, (java.util.Collection)var87, (-1));
    dynoptic.model.automaton.EventTypeEncodings var90 = new dynoptic.model.automaton.EventTypeEncodings(var87);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var92 = var90.getEventType('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test224"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var9);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath(var9);
    int var12 = var9.numStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test225() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test225"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var11);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, var15);
    boolean var17 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var19 = var15.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test226"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var37 = var35.getInitialObsForPid(100);
    var33.removeAllObs(var37);
    dynoptic.model.fifosys.cfsm.fsm.FSM var40 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var26, var31, var37, 100);
    int var41 = var40.getPid();
    java.util.Set var42 = var40.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSM var62 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var48, var53, var59, 100);
    int var63 = var48.getPid();
    int var64 = var48.getScmId();
    int var65 = var48.getPid();
    boolean var66 = var40.equals((java.lang.Object)var65);
    java.lang.String var67 = var40.toString();
    java.util.Set var68 = var40.getStates();
    dynoptic.model.automaton.EncodedAutomaton var69 = new dynoptic.model.automaton.EncodedAutomaton(var20, var40);
    java.lang.String var70 = var40.toString();
    java.util.Set var71 = var40.getStates();
    boolean var72 = var40.isDeterministic();
    dynoptic.model.alphabet.FSMAlphabet var73 = var40.getAlphabet();
    var40.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var67.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var70.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test227() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test227"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var28 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.fifosys.cfsm.fsm.FSM var37 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var23, var28, var34, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.fifosys.cfsm.fsm.FSM var57 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var43, var48, var54, 100);
    dynoptic.model.automaton.EventTypeEncodings var58 = var57.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var63 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var64 = var58.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var65 = var37.getEncodedAutomaton(var58);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var71 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var76 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var82 = var80.getInitialObsForPid(100);
    var78.removeAllObs(var82);
    dynoptic.model.fifosys.cfsm.fsm.FSM var85 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var71, var76, var82, 100);
    dynoptic.model.automaton.EventTypeEncodings var86 = var85.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var87 = new dynoptic.model.automaton.EncodedAutomaton(var58, var85);
    dynoptic.model.automaton.EncodedAutomaton var88 = new dynoptic.model.automaton.EncodedAutomaton(var17, var85);
    int var89 = var85.getPid();
    java.util.Set var90 = var85.getStates();
    java.util.Set var91 = var85.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test228() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test228"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    var0.clear();
    java.lang.String var3 = var0.toString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var8 = var5.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var15 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var20 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.cfsm.fsm.FSM var29 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var15, var20, var26, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var20, var35, var42);
    var5.removeAllObs(var42);
    boolean var47 = var5.isInitForPid(100);
    java.util.Set var48 = var5.getTransitioningEvents();
    boolean var49 = var0.retainAll((java.util.Collection)var48);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var53 = var51.getTerminalObsForPid(1);
    boolean var54 = var0.removeAll((java.util.Collection)var53);
    dynoptic.model.automaton.EventTypeEncodings var55 = new dynoptic.model.automaton.EventTypeEncodings(var53);
    dynoptic.model.fifosys.gfsm.GFSMPath var57 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var58 = new dynoptic.model.fifosys.gfsm.GFSMPath(var57);
    dynoptic.model.fifosys.gfsm.GFSMPath var60 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var61 = var60.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var62 = new dynoptic.model.fifosys.gfsm.GFSMPath(var57, var60);
    dynoptic.model.fifosys.gfsm.GFSMPath var64 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var65 = new dynoptic.model.fifosys.gfsm.GFSMPath(var64);
    dynoptic.model.fifosys.gfsm.GFSMPath var66 = new dynoptic.model.fifosys.gfsm.GFSMPath(var60, var65);
    boolean var67 = var55.equals((java.lang.Object)var60);
    dynoptic.model.fifosys.gfsm.GFSMState var69 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var71 = var69.getInitialObsForPid(100);
    boolean var72 = var55.equals((java.lang.Object)var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test229"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(10, "Part-0-1316151526", false, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test230() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test230"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    int var27 = var12.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var40 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var45 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var51 = var49.getInitialObsForPid(100);
    var47.removeAllObs(var51);
    dynoptic.model.fifosys.cfsm.fsm.FSM var54 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var40, var45, var51, 100);
    var29.removeAllObs(var51);
    dynoptic.model.fifosys.cfsm.fsm.FSM var57 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var6, var12, var51, 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var62 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (-1), 1);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var68 = var66.getInitialObsForPid(100);
    var64.removeAllObs(var68);
    boolean var70 = var64.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var72 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var74 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var76 = var74.getInitialObsForPid(100);
    var72.removeAllObs(var76);
    java.util.Set var78 = var72.getTerminalObs();
    var64.removeAllObs(var78);
    dynoptic.model.automaton.EventTypeEncodings var80 = new dynoptic.model.automaton.EventTypeEncodings(var78);
    dynoptic.model.fifosys.cfsm.fsm.FSM var82 = new dynoptic.model.fifosys.cfsm.fsm.FSM(0, var12, var62, var78, 1);
    java.lang.String var83 = var82.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "FSM[pid=0]\n\tstates: []\n\tinits: [0]\n\taccepts: [1]"+ "'", var83.equals("FSM[pid=0]\n\tstates: []\n\tinits: [0]\n\taccepts: [1]"));

  }

  public void test231() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test231"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var6 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    dynoptic.model.fifosys.cfsm.fsm.FSM var32 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var18, var23, var29, 100);
    int var33 = var18.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var57 = var55.getInitialObsForPid(100);
    var53.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var60 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var46, var51, var57, 100);
    var35.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var63 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var12, var18, var57, 1);
    dynoptic.model.alphabet.FSMAlphabet var64 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var65 = var64.toScmParametersString();
    var64.clear();
    java.lang.String var67 = var64.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var72 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var74 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var75 = var72.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var76 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var72);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var81 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var83 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var84 = var81.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var85 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var81);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var86 = var85.getObsState();
    boolean var87 = var85.isEnabled();
    var85.setOccurred(false);
    var76.addRemoteDependency(var85);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var91 = var85.getObsState();
    boolean var92 = var64.remove((java.lang.Object)var91);
    boolean var93 = var64.isEmpty();
    java.lang.String var94 = var64.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var96 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var5, var18, (java.util.Set)var64, 0);
    boolean var97 = var18.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[]"+ "'", var67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "[]"+ "'", var94.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == true);

  }

  public void test232() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test232"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    int var26 = var11.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var53 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var39, var44, var50, 100);
    var28.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var56 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var5, var11, var50, 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var63 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var68 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var70 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var72 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var74 = var72.getInitialObsForPid(100);
    var70.removeAllObs(var74);
    dynoptic.model.fifosys.cfsm.fsm.FSM var77 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var63, var68, var74, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var79 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var81 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var83 = var81.getInitialObsForPid(100);
    var79.removeAllObs(var83);
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var88 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var90 = var88.getInitialObsForPid(100);
    var86.removeAllObs(var90);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var68, var83, var90);
    dynoptic.model.fifosys.gfsm.GFSMPath var94 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var95 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var94);
    boolean var96 = var68.equals((java.lang.Object)var95);
    boolean var97 = var56.equals((java.lang.Object)var95);
    dynoptic.model.automaton.EventTypeEncodings var98 = var56.getEventTypeEncodings();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test233() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test233"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    java.util.Set var48 = var19.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test234() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test234"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getAcceptStates();
    dynoptic.model.alphabet.FSMAlphabet var22 = var19.getAlphabet();
    java.lang.String var23 = var19.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var23.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));

  }

  public void test235() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test235"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var58.getPid();
    java.util.Set var60 = var58.getAcceptStates();
    boolean var61 = var0.retainAll((java.util.Collection)var60);
    boolean var62 = var0.isEmpty();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var68 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var79 = var77.getInitialObsForPid(100);
    var75.removeAllObs(var79);
    dynoptic.model.fifosys.cfsm.fsm.FSM var82 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var68, var73, var79, 100);
    boolean var83 = var0.remove((java.lang.Object)var73);
    java.lang.String var84 = var0.anyEventScmQRe();
    boolean var85 = var0.isEmpty();
    java.lang.Object[] var86 = var0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "(_)"+ "'", var84.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test236"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.lang.String var4 = var1.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var16, var31, var38);
    var1.removeAllObs(var38);
    java.util.Set var43 = var1.getInitialObsForPid(10);
    dynoptic.model.automaton.EventTypeEncodings var44 = new dynoptic.model.automaton.EventTypeEncodings(var43);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var46 = var44.getEventType('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test237() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test237"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    int var2 = var1.numStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test238() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test238"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    var21.removeAllObs(var25);
    dynoptic.model.fifosys.cfsm.fsm.FSM var28 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var14, var19, var25, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var19, var34, var41);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    java.lang.String var48 = var45.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    var71.removeAllObs(var75);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var82 = var80.getInitialObsForPid(100);
    var78.removeAllObs(var82);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var60, var75, var82);
    var45.removeAllObs(var82);
    java.util.Set var87 = var45.getInitialObsForPid(10);
    dynoptic.model.fifosys.cfsm.fsm.FSM var89 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var6, var34, (java.util.Collection)var87, (-1));
    boolean var90 = var89.isDeterministic();
    dynoptic.model.alphabet.FSMAlphabet var91 = var89.getAlphabet();
    java.util.Iterator var92 = var91.iterator();
    java.lang.Object[] var93 = var91.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test239() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test239"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, (-1));
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    int var26 = var11.getPid();
    int var27 = var11.getScmId();
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    dynoptic.model.fifosys.cfsm.fsm.FSM var33 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var5, var11, var31, 0);
    java.lang.String var34 = var11.toShortIntString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "0"+ "'", var34.equals("0"));

  }

  public void test240() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test240"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    int var5 = var4.getScmId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);

  }

  public void test241() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test241"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isAccept();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var43 = var40.isInitForPid(10);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);

  }

  public void test242() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test242"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(1, "ObsDAGNode[i_hi!_t]", false, false);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var6 = var5.getObsState();
    boolean var7 = var6.isTerminal();
    dynoptic.model.export.DotExportFormatter var8 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var9 = var8.beginGraphString();
    java.lang.String var10 = var8.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var15 = var13.getInitialObsForPid(100);
    boolean var16 = var13.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 10);
    java.lang.String var21 = var8.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var13, false, false);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var26 = var24.getTerminalObsForPid(1);
    java.lang.String var27 = var24.toLongString();
    java.lang.String var30 = var8.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var24, false, false);
    java.lang.String var31 = var8.beginGraphString();
    boolean var32 = var6.equals((java.lang.Object)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "digraph {\n"+ "'", var9.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "} // digraph {\n"+ "'", var10.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var21.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[]_i_t"+ "'", var27.equals("[]_i_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "  100 [label=\"[]\",shape=circle];\n"+ "'", var30.equals("  100 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "digraph {\n"+ "'", var31.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test243() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test243"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    boolean var43 = var40.isInitForPid(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.cfsm.fsm.FSMState var45 = var40.getFSMState((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);

  }

  public void test244() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test244"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    java.util.Iterator var39 = var0.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var42 = var41.toIntermediateString();
    boolean var43 = var41.isAccept();
    boolean var44 = var0.contains((java.lang.Object)var43);
    java.lang.String var45 = var0.toString();
    java.util.Set var46 = var0.getLocalEventScmStrings();
    java.lang.String var47 = var0.anyEventScmQRe();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Part-0-1329203837"+ "'", var42.equals("Part-0-1329203837"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "[]"+ "'", var45.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "(_)"+ "'", var47.equals("(_)"));

  }

  public void test245() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test245"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    int var40 = var39.getPid();
    java.util.Set var41 = var39.getStates();
    dynoptic.model.automaton.EncodedAutomaton var42 = new dynoptic.model.automaton.EncodedAutomaton(var17, var39);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var44 = var17.getEventType(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test246"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    int var10 = var8.getPid();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var15 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var18 = var15.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var19 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var15);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var20 = var19.getObsState();
    java.lang.String var21 = var19.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var22 = var19.getObsState();
    boolean var23 = var19.isTermState();
    boolean var24 = var19.isTermState();
    boolean var25 = var19.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var26 = var19.getObsState();
    var8.addRemoteDependency(var19);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var28 = var19.getPrevState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var21.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test247() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test247"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    java.util.Set var22 = var14.getInitialObsForPid(100);
    java.util.Set var23 = var14.getInitialObservations();
    java.util.Set var25 = var14.getTerminalObsForPid((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-1808351459"+ "'", var15.equals("Part-0-1808351459"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test248() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test248"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isAccept();
    java.util.Set var42 = var40.getTransitioningEvents();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var44 = var40.isInitForPid(1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test249() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test249"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState((-1), true, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test250"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 1, 10);
    var4.setAccept();
    boolean var6 = var4.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test251"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var8 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var13 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var19 = var17.getInitialObsForPid(100);
    var15.removeAllObs(var19);
    dynoptic.model.fifosys.cfsm.fsm.FSM var22 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var8, var13, var19, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var28 = var26.getInitialObsForPid(100);
    var24.removeAllObs(var28);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var13, var28, var35);
    java.lang.String var38 = var13.toLongString();
    java.lang.String var39 = var13.toLongString();
    java.lang.String var40 = var13.toString();
    java.util.Set var41 = var13.getNextStates();
    var1.addAllObs(var41);
    java.util.Set var43 = var1.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var38.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var39.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "0"+ "'", var40.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test252"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 0);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var9);
    boolean var11 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var9);
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var14 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13);
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var17 = var16.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, var16);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var21 = new dynoptic.model.fifosys.gfsm.GFSMPath(var20);
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(var16, var21);
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath(var9, var16);
    dynoptic.model.fifosys.gfsm.GFSMPath var25 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var26 = new dynoptic.model.fifosys.gfsm.GFSMPath(var25);
    dynoptic.model.fifosys.gfsm.GFSMPath var28 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var29 = var28.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var30 = new dynoptic.model.fifosys.gfsm.GFSMPath(var25, var28);
    dynoptic.model.fifosys.gfsm.GFSMPath var31 = new dynoptic.model.fifosys.gfsm.GFSMPath(var25);
    dynoptic.model.fifosys.gfsm.GFSMPath var32 = new dynoptic.model.fifosys.gfsm.GFSMPath(var25);
    int var33 = var25.numEvents();
    boolean var34 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var25);
    int var35 = var25.numStates();
    dynoptic.model.fifosys.gfsm.GFSMPath var36 = new dynoptic.model.fifosys.gfsm.GFSMPath(var23, var25);
    java.lang.String var37 = var23.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "GFSMPath : []"+ "'", var37.equals("GFSMPath : []"));

  }

  public void test253() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test253"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.lang.String var4 = var1.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var16, var31, var38);
    var1.removeAllObs(var38);
    boolean var43 = var1.isInitForPid(100);
    java.lang.String var44 = var1.toString();
    java.util.Set var46 = var1.getInitialObsForPid(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "[]"+ "'", var44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test254"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    var5.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var21 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    java.util.Set var22 = var21.getTransitioningEvents();
    boolean var23 = var21.isInitial();
    java.util.Set var24 = var21.getTransitioningEvents();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = var21.getFSMState((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test255() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test255"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    java.lang.String var20 = var0.beginGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    int var42 = var27.getPid();
    int var43 = var27.getScmId();
    int var44 = var27.getPid();
    java.lang.String var47 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var27, false, false);
    var27.setAccept();
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var52 = var50.getInitialObsForPid(100);
    java.util.Set var54 = var50.getInitialObsForPid(1);
    java.util.Set var55 = var50.getInitialObservations();
    int var56 = var50.getNumProcesses();
    boolean var57 = var27.equals((java.lang.Object)var50);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var63 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var68 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var70 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var72 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var74 = var72.getInitialObsForPid(100);
    var70.removeAllObs(var74);
    dynoptic.model.fifosys.cfsm.fsm.FSM var77 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var63, var68, var74, 100);
    java.util.Set var78 = var77.getAcceptStates();
    java.util.Set var79 = var77.getStates();
    java.lang.String var80 = var77.toString();
    java.util.Set var81 = var77.getStates();
    boolean var82 = var27.equals((java.lang.Object)var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-314043324"+ "'", var14.equals("Part-0-314043324"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "digraph {\n"+ "'", var20.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "  1 [label=\"0\",shape=circle];\n"+ "'", var47.equals("  1 [label=\"0\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var80.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);

  }

  public void test256() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test256"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    dynoptic.model.alphabet.FSMAlphabet var2 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var9 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var20 = var18.getInitialObsForPid(100);
    var16.removeAllObs(var20);
    dynoptic.model.fifosys.cfsm.fsm.FSM var23 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var9, var14, var20, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var14, var29, var36);
    boolean var39 = var2.retainAll((java.util.Collection)var36);
    java.lang.Object[] var40 = var2.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var57 = var55.getInitialObsForPid(100);
    var53.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var60 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var46, var51, var57, 100);
    int var61 = var60.getPid();
    java.util.Set var62 = var60.getAcceptStates();
    boolean var63 = var2.retainAll((java.util.Collection)var62);
    boolean var64 = var2.isEmpty();
    var2.clear();
    boolean var66 = var0.containsAll((java.util.Collection)var2);
    java.util.Iterator var67 = var2.iterator();
    java.lang.Object[] var68 = var2.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test257() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test257"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    int var41 = var11.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);

  }

  public void test258() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test258"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = var40.getFSMState(0);
    boolean var45 = var40.isAcceptForPid(0);
    boolean var47 = var40.isInitForPid(0);
    boolean var48 = var40.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);

  }

  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test259"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var3 = var2.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test260() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test260"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    boolean var8 = var2.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    java.util.Set var16 = var10.getTerminalObs();
    var2.removeAllObs(var16);
    boolean var18 = var0.retainAll((java.util.Collection)var16);
    java.lang.String var19 = var0.toString();
    boolean var20 = var0.isEmpty();
    int var21 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);

  }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test261"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var8.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = var8.getObsState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var12 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test262() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test262"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getObservedStates();
    java.lang.String var8 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));

  }

  public void test263() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test263"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    boolean var28 = var22.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    java.util.Set var36 = var30.getTerminalObs();
    var22.removeAllObs(var36);
    dynoptic.model.automaton.EventTypeEncodings var38 = new dynoptic.model.automaton.EventTypeEncodings(var36);
    dynoptic.model.automaton.EncodedAutomaton var39 = var19.getEncodedAutomaton(var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var41 = var38.getEventType('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test264"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var9 = var1.numEvents();
    boolean var10 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var12 = var11.numEvents();
    int var13 = var11.numStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);

  }

  public void test265() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test265"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    synoptic.model.event.Event var6 = var5.getNextEvent();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var7 = var5.getObsState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = var5.getPrevState();
    boolean var9 = var5.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test266"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    java.lang.Object[] var2 = var0.toArray();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var8 = var5.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    dynoptic.model.alphabet.FSMAlphabet var16 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    boolean var24 = var18.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var30 = var28.getInitialObsForPid(100);
    var26.removeAllObs(var30);
    java.util.Set var32 = var26.getTerminalObs();
    var18.removeAllObs(var32);
    boolean var34 = var16.retainAll((java.util.Collection)var32);
    java.lang.Object[] var36 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var37 = var16.toArray(var36);
    java.lang.Object[] var38 = var16.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var5, var14, (java.util.Set)var16);
    boolean var40 = var0.removeAll((java.util.Collection)var14);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var57 = var55.getInitialObsForPid(100);
    var53.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var60 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var46, var51, var57, 100);
    int var61 = var60.getPid();
    java.util.Set var62 = var60.getAcceptStates();
    dynoptic.model.alphabet.FSMAlphabet var63 = var60.getAlphabet();
    java.lang.String var64 = var63.anyEventScmQRe();
    java.lang.Object[] var65 = var63.toArray();
    java.lang.Object[] var66 = var63.toArray();
    dynoptic.model.automaton.EventTypeEncodings var67 = new dynoptic.model.automaton.EventTypeEncodings((java.util.Set)var63);
    boolean var68 = var0.removeAll((java.util.Collection)var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(_)"+ "'", var64.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);

  }

  public void test267() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test267"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    int var4 = var1.getNumProcesses();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var15 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var21 = var19.getInitialObsForPid(100);
    var17.removeAllObs(var21);
    dynoptic.model.fifosys.cfsm.fsm.FSM var24 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var10, var15, var21, 100);
    dynoptic.model.automaton.EventTypeEncodings var25 = var24.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var30 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var31 = var25.equals((java.lang.Object)true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var42 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var48 = var46.getInitialObsForPid(100);
    var44.removeAllObs(var48);
    dynoptic.model.fifosys.cfsm.fsm.FSM var51 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var37, var42, var48, 100);
    int var52 = var37.getPid();
    java.lang.String var53 = var37.toLongString();
    boolean var54 = var25.equals((java.lang.Object)var53);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var58 = var56.getInitialObsForPid(100);
    java.util.Set var59 = var56.getTransitioningEvents();
    boolean var60 = var25.equals((java.lang.Object)var59);
    var1.addAllObs(var59);
    boolean var63 = var1.isInitForPid(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var53.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test268() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test268"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.util.Set var4 = var1.getTransitioningEvents();
    java.util.Set var5 = var1.getInitialObservations();
    java.util.Set var6 = var1.getNextStates();
    boolean var8 = var1.isAcceptForPid((-1));
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    java.util.Set var16 = var10.getTransitioningEvents();
    boolean var18 = var10.isInitForPid(1);
    boolean var20 = var10.isAcceptForPid(100);
    java.util.Set var22 = var10.getTerminalObsForPid(10);
    var1.addAllObs(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test269"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.util.Set var4 = var1.getTransitioningEvents();
    java.util.Set var6 = var1.getTerminalObsForPid(100);
    dynoptic.model.automaton.EventTypeEncodings var7 = new dynoptic.model.automaton.EventTypeEncodings(var6);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var13 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var14 = var13.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var20 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    dynoptic.model.fifosys.cfsm.fsm.FSM var34 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var20, var25, var31, 100);
    int var35 = var20.getPid();
    int var36 = var20.getScmId();
    dynoptic.model.alphabet.FSMAlphabet var37 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var69 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var71 = var69.getInitialObsForPid(100);
    var67.removeAllObs(var71);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var49, var64, var71);
    boolean var74 = var37.retainAll((java.util.Collection)var71);
    java.lang.String var75 = var37.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var77 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var13, var20, (java.util.Set)var37, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var78 = new dynoptic.model.fifosys.cfsm.CFSMState(var20);
    java.util.Set var79 = var78.getTransitioningEvents();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var81 = var78.getFSMState(0);
    boolean var82 = var7.equals((java.lang.Object)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "[]"+ "'", var75.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);

  }

  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test270"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    var5.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var21 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    java.util.Set var22 = var21.getTransitioningEvents();
    int var23 = var21.getNumProcesses();
    java.util.Set var24 = var21.getTransitioningEvents();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = var21.getFSMState((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test271() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test271"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var58.getPid();
    java.util.Set var60 = var58.getAcceptStates();
    boolean var61 = var0.retainAll((java.util.Collection)var60);
    java.util.Set var62 = var0.getLocalEventScmStrings();
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var68 = var66.getInitialObsForPid(100);
    var64.removeAllObs(var68);
    boolean var70 = var64.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var72 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var74 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var76 = var74.getInitialObsForPid(100);
    var72.removeAllObs(var76);
    java.util.Set var78 = var72.getTerminalObs();
    var64.removeAllObs(var78);
    dynoptic.model.automaton.EventTypeEncodings var80 = new dynoptic.model.automaton.EventTypeEncodings(var78);
    boolean var81 = var0.retainAll((java.util.Collection)var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test272() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test272"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 0);
    boolean var11 = var1.isAcceptForPid(10);
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = var13.lastState();
    int var15 = var13.numStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);

  }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test273"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(0, false, false);
    java.lang.String var4 = var3.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "33"+ "'", var4.equals("33"));

  }

  public void test274() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test274"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    var21.removeAllObs(var25);
    dynoptic.model.fifosys.cfsm.fsm.FSM var28 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var14, var19, var25, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var19, var34, var41);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    java.lang.String var48 = var45.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    var71.removeAllObs(var75);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var82 = var80.getInitialObsForPid(100);
    var78.removeAllObs(var82);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var60, var75, var82);
    var45.removeAllObs(var82);
    java.util.Set var87 = var45.getInitialObsForPid(10);
    dynoptic.model.fifosys.cfsm.fsm.FSM var89 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var6, var34, (java.util.Collection)var87, (-1));
    dynoptic.model.automaton.EventTypeEncodings var90 = new dynoptic.model.automaton.EventTypeEncodings(var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var92 = var90.getEventType('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test275() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test275"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    int var10 = var8.numEvents();
    int var11 = var8.numStates();
    dynoptic.model.fifosys.gfsm.GFSMPath var12 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var13 = var12.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);

  }

  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test276"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    java.lang.String var21 = var5.toLongString();
    java.util.Set var22 = var5.getTransitioningEvents();
    int var23 = var5.getScmId();
    dynoptic.model.fifosys.cfsm.CFSMState var24 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var26 = var24.isInitForPid(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var21.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);

  }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test277"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    boolean var7 = var5.hasOccurred();
    synoptic.model.event.Event var8 = var5.getNextEvent();
    java.lang.String var9 = var5.toString();
    var5.setOccurred(false);
    boolean var12 = var5.isInitState();
    java.lang.String var13 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var9.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var13.equals("ObsDAGNode[i_hi!_t]"));

  }

  public void test278() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test278"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var8.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = var8.getObsState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var12 = var8.getObsState();
    boolean var13 = var12.isTerminal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test279() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test279"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var37 = var35.getInitialObsForPid(100);
    var33.removeAllObs(var37);
    dynoptic.model.fifosys.cfsm.fsm.FSM var40 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var26, var31, var37, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var57 = var55.getInitialObsForPid(100);
    var53.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var60 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var46, var51, var57, 100);
    dynoptic.model.automaton.EventTypeEncodings var61 = var60.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var66 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var67 = var61.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var68 = var40.getEncodedAutomaton(var61);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var74 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var79 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var81 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var83 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var85 = var83.getInitialObsForPid(100);
    var81.removeAllObs(var85);
    dynoptic.model.fifosys.cfsm.fsm.FSM var88 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var74, var79, var85, 100);
    dynoptic.model.automaton.EventTypeEncodings var89 = var88.getEventTypeEncodings();
    boolean var90 = var68.equals((java.lang.Object)var88);
    java.util.Set var91 = var88.getStates();
    java.util.Set var92 = var88.getAcceptStates();
    java.lang.String var93 = var88.toString();
    dynoptic.model.automaton.EncodedAutomaton var94 = new dynoptic.model.automaton.EncodedAutomaton(var20, var88);
    dk.brics.automaton.Automaton var95 = var94.getAutomaton();
    var94.minimize();
    dk.brics.automaton.Automaton var97 = var94.getAutomaton();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var93.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test280() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test280"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var52 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    boolean var53 = var47.equals((java.lang.Object)1);
    boolean var55 = var47.equals((java.lang.Object)"  1 [label=\"0\",shape=circle];\n");
    dk.brics.automaton.Automaton var56 = var47.getAutomaton();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test281"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isAccept();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var43 = var40.isAcceptForPid((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);

  }

  public void test282() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test282"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 0);
    boolean var11 = var1.isAcceptForPid(10);
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 100);
    java.lang.String var14 = var13.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "GFSMPath : []"+ "'", var14.equals("GFSMPath : []"));

  }

  public void test283() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test283"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var45 = var42.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var46 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var51 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var52 = var51.getName();
    boolean var53 = var42.equals((java.lang.Object)var51);
    boolean var54 = var0.contains((java.lang.Object)var42);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var55 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var56 = var55.getPrevState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var52.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);

  }

  public void test284() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test284"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(10, false, true);
    boolean var4 = var3.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test285"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    boolean var10 = var8.isEnabled();
    boolean var11 = var8.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var12 = var8.getObsState();
    boolean var13 = var8.hasOccurred();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test286() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test286"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.cfsm.fsm.FSM var47 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var33, var38, var44, 100);
    var22.removeAllObs(var44);
    java.util.Set var50 = var22.getInitialObsForPid((-1));
    var14.removeAllObs(var50);
    boolean var52 = var14.isAccept();
    java.util.Set var54 = var14.getTerminalObsForPid(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-761584986"+ "'", var15.equals("Part-0-761584986"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test287"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    int var26 = var11.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var53 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var39, var44, var50, 100);
    var28.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var56 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var5, var11, var50, 1);
    java.util.Set var57 = var56.getStates();
    java.util.Set var58 = var56.getInitStates();
    int var59 = var56.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 10);

  }

  public void test288() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test288"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    var0.clear();
    java.lang.String var3 = var0.toString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var8 = var5.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var15 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var20 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.cfsm.fsm.FSM var29 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var15, var20, var26, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var20, var35, var42);
    var5.removeAllObs(var42);
    boolean var47 = var5.isInitForPid(100);
    java.util.Set var48 = var5.getTransitioningEvents();
    boolean var49 = var0.retainAll((java.util.Collection)var48);
    java.lang.String var50 = var0.anyEventScmQRe();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "(_)"+ "'", var50.equals("(_)"));

  }

  public void test289() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test289"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.automaton.EventTypeEncodings var68 = var67.getEventTypeEncodings();
    boolean var69 = var47.equals((java.lang.Object)var67);
    java.util.Set var70 = var67.getStates();
    java.util.Set var71 = var67.getAcceptStates();
    java.lang.String var72 = var67.toString();
    dynoptic.model.alphabet.FSMAlphabet var73 = var67.getAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var79 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var84 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var88 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var90 = var88.getInitialObsForPid(100);
    var86.removeAllObs(var90);
    dynoptic.model.fifosys.cfsm.fsm.FSM var93 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var79, var84, var90, 100);
    var79.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var95 = new dynoptic.model.fifosys.cfsm.CFSMState(var79);
    java.util.Set var96 = var95.getTransitioningEvents();
    boolean var97 = var95.isInitial();
    java.util.Set var98 = var95.getTransitioningEvents();
    boolean var99 = var73.addAll((java.util.Collection)var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var72.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test290() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test290"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    java.lang.String var20 = var0.beginGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    int var42 = var27.getPid();
    int var43 = var27.getScmId();
    int var44 = var27.getPid();
    java.lang.String var47 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var27, false, false);
    java.lang.String var48 = var27.toShortIntString();
    java.util.Set var49 = var27.getTransitioningEvents();
    dynoptic.model.fifosys.cfsm.CFSMState var50 = new dynoptic.model.fifosys.cfsm.CFSMState(var27);
    java.util.Set var51 = var50.getTransitioningEvents();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var53 = var50.isAcceptForPid(10);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-1615001463"+ "'", var14.equals("Part-0-1615001463"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "digraph {\n"+ "'", var20.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "  1 [label=\"0\",shape=circle];\n"+ "'", var47.equals("  1 [label=\"0\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "0"+ "'", var48.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test291() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test291"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var37 = var35.getInitialObsForPid(100);
    var33.removeAllObs(var37);
    dynoptic.model.fifosys.cfsm.fsm.FSM var40 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var26, var31, var37, 100);
    int var41 = var40.getPid();
    java.util.Set var42 = var40.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSM var62 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var48, var53, var59, 100);
    int var63 = var48.getPid();
    int var64 = var48.getScmId();
    int var65 = var48.getPid();
    boolean var66 = var40.equals((java.lang.Object)var65);
    java.lang.String var67 = var40.toString();
    java.util.Set var68 = var40.getStates();
    dynoptic.model.automaton.EncodedAutomaton var69 = new dynoptic.model.automaton.EncodedAutomaton(var20, var40);
    java.lang.String var70 = var40.toString();
    java.util.Set var71 = var40.getStates();
    boolean var72 = var40.isDeterministic();
    java.lang.String var73 = var40.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var67.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var70.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var73.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));

  }

  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test292"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var21 = var17.getEventType('a');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test293"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var4 = var2.getInitialObsForPid(100);
    java.lang.String var5 = var2.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var17, var32, var39);
    var2.removeAllObs(var39);
    java.lang.String var43 = var2.toLongString();
    dynoptic.model.alphabet.FSMAlphabet var44 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var45 = var44.toScmParametersString();
    java.lang.Object[] var46 = var44.toArray();
    boolean var47 = var44.isEmpty();
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var51 = var49.getInitialObsForPid(100);
    boolean var52 = var44.retainAll((java.util.Collection)var51);
    var2.addAllObs(var51);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(100, var51);
    java.util.Set var55 = var54.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "[]"+ "'", var43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + ""+ "'", var45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test294"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var45 = var42.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var46 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var51 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var52 = var51.getName();
    boolean var53 = var42.equals((java.lang.Object)var51);
    boolean var54 = var0.contains((java.lang.Object)var42);
    java.lang.String var55 = var42.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var52.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "i_hi!_t"+ "'", var55.equals("i_hi!_t"));

  }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test295"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var25 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var26 = var20.equals((java.lang.Object)true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    dynoptic.model.fifosys.cfsm.fsm.FSM var46 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var32, var37, var43, 100);
    int var47 = var32.getPid();
    java.lang.String var48 = var32.toLongString();
    boolean var49 = var20.equals((java.lang.Object)var48);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var53 = var51.getInitialObsForPid(100);
    java.util.Set var54 = var51.getTransitioningEvents();
    boolean var55 = var20.equals((java.lang.Object)var54);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var61 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var66 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var70 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var72 = var70.getInitialObsForPid(100);
    var68.removeAllObs(var72);
    dynoptic.model.fifosys.cfsm.fsm.FSM var75 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var61, var66, var72, 100);
    java.util.Set var76 = var75.getAcceptStates();
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var82 = var80.getInitialObsForPid(100);
    var78.removeAllObs(var82);
    boolean var84 = var78.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var88 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var90 = var88.getInitialObsForPid(100);
    var86.removeAllObs(var90);
    java.util.Set var92 = var86.getTerminalObs();
    var78.removeAllObs(var92);
    dynoptic.model.automaton.EventTypeEncodings var94 = new dynoptic.model.automaton.EventTypeEncodings(var92);
    dynoptic.model.automaton.EncodedAutomaton var95 = var75.getEncodedAutomaton(var94);
    dynoptic.model.automaton.EncodedAutomaton var96 = new dynoptic.model.automaton.EncodedAutomaton(var20, var75);
    boolean var97 = var75.isDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var48.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == true);

  }

  public void test296() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test296"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    boolean var20 = var19.isDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);

  }

  public void test297() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test297"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    java.lang.Object[] var2 = var0.toArray();
    boolean var3 = var0.isEmpty();
    var0.clear();
    dynoptic.model.alphabet.FSMAlphabet var5 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var17, var32, var39);
    boolean var42 = var5.retainAll((java.util.Collection)var39);
    java.lang.Object[] var43 = var5.toArray();
    boolean var44 = var0.remove((java.lang.Object)var5);
    java.util.Set var45 = var5.getLocalEventScmStrings();
    java.util.Iterator var46 = var5.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test298() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test298"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getStates();
    java.util.Set var22 = var19.getStates();
    dynoptic.model.automaton.EventTypeEncodings var23 = var19.getEventTypeEncodings();
    java.util.Set var24 = var19.getInitStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test299"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var6 = var5.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    int var27 = var12.getPid();
    int var28 = var12.getScmId();
    dynoptic.model.alphabet.FSMAlphabet var29 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var41 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.cfsm.fsm.FSM var50 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var36, var41, var47, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var41, var56, var63);
    boolean var66 = var29.retainAll((java.util.Collection)var63);
    java.lang.String var67 = var29.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var12, (java.util.Set)var29, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var70 = new dynoptic.model.fifosys.cfsm.CFSMState(var12);
    java.util.Set var71 = var70.getTransitioningEvents();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = var70.getFSMState(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.cfsm.fsm.FSMState var75 = var70.getFSMState((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[]"+ "'", var67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test300"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.lang.String var16 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var13, true, false);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var24 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.fifosys.cfsm.fsm.FSM var38 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var24, var29, var35, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var51 = var49.getInitialObsForPid(100);
    var47.removeAllObs(var51);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var29, var44, var51);
    dynoptic.model.fifosys.gfsm.GFSMPath var55 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var56 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var55);
    boolean var57 = var29.equals((java.lang.Object)var56);
    dynoptic.model.fifosys.cfsm.CFSMState var58 = new dynoptic.model.fifosys.cfsm.CFSMState(var29);
    boolean var59 = var58.isInitial();
    boolean var60 = var58.isAccept();
    boolean var61 = var58.isAccept();
    java.lang.String var64 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString((-1), (dynoptic.model.AbsFSMState)var58, true, true);
    boolean var65 = var58.isInitial();
    java.util.Set var66 = var58.getTransitioningEvents();
    boolean var67 = var58.isAccept();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var69 = var58.isInitForPid(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->0;\n"+ "'", var16.equals("  0 [label=\"[]\",shape=circle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "  -1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@66fa480\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->-1;\n"+ "'", var64.equals("  -1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@66fa480\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->-1;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);

  }

  public void test301() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test301"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    dynoptic.model.alphabet.FSMAlphabet var7 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    boolean var15 = var9.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var21 = var19.getInitialObsForPid(100);
    var17.removeAllObs(var21);
    java.util.Set var23 = var17.getTerminalObs();
    var9.removeAllObs(var23);
    boolean var25 = var7.retainAll((java.util.Collection)var23);
    java.lang.String var26 = var7.toString();
    var1.addAllObs((java.util.Set)var7);
    dynoptic.model.alphabet.FSMAlphabet var28 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var35 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var40 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var46 = var44.getInitialObsForPid(100);
    var42.removeAllObs(var46);
    dynoptic.model.fifosys.cfsm.fsm.FSM var49 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var35, var40, var46, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var40, var55, var62);
    boolean var65 = var28.retainAll((java.util.Collection)var62);
    int var66 = var28.size();
    boolean var67 = var7.retainAll((java.util.Collection)var28);
    java.lang.String var68 = var28.toScmParametersString();
    java.util.Set var69 = var28.getLocalEventScmStrings();
    java.util.Set var70 = var28.getLocalEventScmStrings();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test302() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test302"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var11);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, var15);
    boolean var17 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var21 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var20);
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15, var20);
    int var23 = var15.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var24 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15);
    int var25 = var15.numStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);

  }

  public void test303() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test303"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var5 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var8 = var5.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    java.util.Set var16 = var10.getTransitioningEvents();
    boolean var17 = var5.equals((java.lang.Object)var16);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var16);
    boolean var19 = var18.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test304() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test304"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    boolean var42 = var40.isInitial();
    boolean var43 = var40.isAccept();
    boolean var44 = var40.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);

  }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test305"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var14 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    java.lang.String var15 = var14.toString();
    boolean var16 = var14.hasOccurred();
    int var17 = var14.getPid();
    boolean var18 = var14.isInitState();
    var8.addRemoteDependency(var14);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var20 = var14.getNextState();
    boolean var21 = var14.isTermState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var15.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test306"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.automaton.EventTypeEncodings var68 = var67.getEventTypeEncodings();
    boolean var69 = var47.equals((java.lang.Object)var67);
    java.util.Set var70 = var67.getStates();
    int var71 = var67.getPid();
    var67.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1));

  }

  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test307"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var11);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, var15);
    boolean var17 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var21 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var20);
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15, var20);
    dynoptic.model.fifosys.gfsm.GFSMPath var24 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var25 = new dynoptic.model.fifosys.gfsm.GFSMPath(var24);
    dynoptic.model.fifosys.gfsm.GFSMPath var27 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var28 = var27.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var29 = new dynoptic.model.fifosys.gfsm.GFSMPath(var24, var27);
    dynoptic.model.fifosys.gfsm.GFSMPath var30 = new dynoptic.model.fifosys.gfsm.GFSMPath(var24);
    dynoptic.model.fifosys.gfsm.GFSMPath var31 = new dynoptic.model.fifosys.gfsm.GFSMPath(var24);
    int var32 = var24.numEvents();
    boolean var33 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var24);
    int var34 = var24.numStates();
    dynoptic.model.fifosys.gfsm.GFSMPath var35 = new dynoptic.model.fifosys.gfsm.GFSMPath(var20, var24);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var38 = new dynoptic.model.fifosys.gfsm.GFSMPath(var37);
    dynoptic.model.fifosys.gfsm.GFSMPath var40 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var41 = var40.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var42 = new dynoptic.model.fifosys.gfsm.GFSMPath(var37, var40);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var45 = new dynoptic.model.fifosys.gfsm.GFSMPath(var44);
    dynoptic.model.fifosys.gfsm.GFSMPath var47 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var48 = var47.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var49 = new dynoptic.model.fifosys.gfsm.GFSMPath(var44, var47);
    dynoptic.model.fifosys.gfsm.GFSMPath var51 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var52 = new dynoptic.model.fifosys.gfsm.GFSMPath(var47, var51);
    boolean var53 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var51);
    dynoptic.model.fifosys.gfsm.GFSMPath var54 = new dynoptic.model.fifosys.gfsm.GFSMPath(var40, var51);
    dynoptic.model.fifosys.gfsm.GFSMPath var56 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var57 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var56);
    dynoptic.model.fifosys.gfsm.GFSMPath var58 = new dynoptic.model.fifosys.gfsm.GFSMPath(var51, var56);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    java.util.Set var63 = var60.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var65 = new dynoptic.model.fifosys.gfsm.GFSMPath(var60, (-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var66 = new dynoptic.model.fifosys.gfsm.GFSMPath(var56, var65);
    dynoptic.model.fifosys.gfsm.GFSMPath var67 = new dynoptic.model.fifosys.gfsm.GFSMPath(var24, var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test308"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var11);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, var15);
    boolean var17 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var19 = var15.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test309() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test309"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    java.lang.String var20 = var0.beginGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    int var42 = var27.getPid();
    int var43 = var27.getScmId();
    int var44 = var27.getPid();
    java.lang.String var47 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var27, false, false);
    var27.setAccept();
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var52 = var50.getInitialObsForPid(100);
    java.util.Set var54 = var50.getInitialObsForPid(1);
    java.util.Set var55 = var50.getInitialObservations();
    int var56 = var50.getNumProcesses();
    boolean var57 = var27.equals((java.lang.Object)var50);
    dynoptic.model.fifosys.gfsm.GFSMPath var59 = new dynoptic.model.fifosys.gfsm.GFSMPath(var50, 10);
    java.lang.String var60 = var50.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-2034305568"+ "'", var14.equals("Part-0-2034305568"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "digraph {\n"+ "'", var20.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "  1 [label=\"0\",shape=circle];\n"+ "'", var47.equals("  1 [label=\"0\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "[]"+ "'", var60.equals("[]"));

  }

  public void test310() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test310"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    java.util.Set var8 = var2.getTerminalObs();
    int var9 = var2.getNumProcesses();
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    java.util.Set var14 = var11.getTransitioningEvents();
    java.util.Set var15 = var11.getInitialObservations();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var21 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.cfsm.fsm.FSM var35 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var21, var26, var32, 100);
    dynoptic.model.automaton.EventTypeEncodings var36 = var35.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var41 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var42 = var36.equals((java.lang.Object)true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSM var62 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var48, var53, var59, 100);
    int var63 = var48.getPid();
    java.lang.String var64 = var48.toLongString();
    boolean var65 = var36.equals((java.lang.Object)var64);
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var69 = var67.getInitialObsForPid(100);
    java.util.Set var70 = var67.getTransitioningEvents();
    boolean var71 = var36.equals((java.lang.Object)var70);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(1, (dynoptic.model.AbsFSMState)var2, var15, var70);
    boolean var74 = var2.isInitForPid(10);
    java.util.Set var76 = var2.getInitialObsForPid((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var64.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test311() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test311"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    var4.markTerm();
    boolean var6 = var4.isInitial();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var7 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var12 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var13 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var12);
    java.lang.String var14 = var13.toString();
    boolean var15 = var13.hasOccurred();
    boolean var16 = var13.isInitState();
    boolean var17 = var13.hasOccurred();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var18 = var13.getPrevState();
    synoptic.model.event.Event var19 = var13.getNextEvent();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var20 = var13.getObsState();
    java.lang.String var21 = var13.toString();
    var7.addRemoteDependency(var13);
    synoptic.model.event.Event var23 = var7.getNextEvent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var14.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var21.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test312() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test312"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    java.lang.String var21 = var5.toLongString();
    java.util.Set var22 = var5.getTransitioningEvents();
    int var23 = var5.getScmId();
    dynoptic.model.fifosys.cfsm.CFSMState var24 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    boolean var25 = var24.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = var24.getFSMState(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var29 = var24.isAcceptForPid(1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var21.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test313() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test313"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, (-1));
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    int var26 = var11.getPid();
    int var27 = var11.getScmId();
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    dynoptic.model.fifosys.cfsm.fsm.FSM var33 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var5, var11, var31, 0);
    java.lang.String var34 = var5.toShortIntString();
    boolean var35 = var5.isInitial();
    java.lang.String var36 = var5.toShortIntString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "-1"+ "'", var34.equals("-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "-1"+ "'", var36.equals("-1"));

  }

  public void test314() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test314"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(10, "Part-0-2043276784", true, false);
    boolean var5 = var4.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test315() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test315"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var16 = var13.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var17 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = var17.getObsState();
    boolean var19 = var17.isEnabled();
    var17.setOccurred(false);
    var8.addRemoteDependency(var17);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var23 = var17.getObsState();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var35 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    dynoptic.model.fifosys.cfsm.fsm.FSM var44 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var30, var35, var41, 100);
    java.lang.String var45 = var35.toShortIntString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var50 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (-1), 1);
    java.lang.String var51 = var50.toShortIntString();
    java.util.Set var52 = var50.getNextStates();
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var58 = var56.getInitialObsForPid(100);
    var54.removeAllObs(var58);
    boolean var60 = var54.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    java.util.Set var68 = var62.getTerminalObs();
    var54.removeAllObs(var68);
    dynoptic.model.automaton.EventTypeEncodings var70 = new dynoptic.model.automaton.EventTypeEncodings(var68);
    boolean var72 = var70.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.gfsm.GFSMState var74 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var76 = new dynoptic.model.fifosys.gfsm.GFSMPath(var74, (-1));
    boolean var77 = var70.equals((java.lang.Object)var74);
    java.util.Set var78 = var74.getTerminalObs();
    dynoptic.model.fifosys.cfsm.fsm.FSM var80 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var35, var50, var78, 100);
    boolean var81 = var23.equals((java.lang.Object)var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "0"+ "'", var45.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "1"+ "'", var51.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test316() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test316"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    java.util.Iterator var39 = var0.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var42 = var41.toIntermediateString();
    boolean var43 = var41.isAccept();
    boolean var44 = var0.contains((java.lang.Object)var43);
    dynoptic.model.automaton.EventTypeEncodings var45 = new dynoptic.model.automaton.EventTypeEncodings((java.util.Set)var0);
    dynoptic.model.alphabet.FSMAlphabet var46 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var69 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var73 = var71.getInitialObsForPid(100);
    var69.removeAllObs(var73);
    dynoptic.model.fifosys.gfsm.GFSMState var76 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var80 = var78.getInitialObsForPid(100);
    var76.removeAllObs(var80);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var58, var73, var80);
    boolean var83 = var46.retainAll((java.util.Collection)var80);
    java.lang.String var84 = var46.toString();
    boolean var85 = var0.addAll((java.util.Collection)var46);
    java.lang.String var86 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Part-0-643247587"+ "'", var42.equals("Part-0-643247587"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "[]"+ "'", var84.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "[]"+ "'", var86.equals("[]"));

  }

  public void test317() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test317"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath(var21, (-1));
    boolean var24 = var17.equals((java.lang.Object)var21);
    java.util.Set var25 = var21.getTerminalObs();
    java.util.Set var26 = var21.getInitialObservations();
    boolean var28 = var21.isInitForPid(10);
    boolean var29 = var21.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test318() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test318"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    java.lang.String var37 = var12.toLongString();
    java.lang.String var38 = var12.toLongString();
    java.lang.String var39 = var12.toString();
    java.util.Set var40 = var12.getNextStates();
    java.util.Set var41 = var12.getNextStates();
    int var42 = var12.getScmId();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSM var62 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var48, var53, var59, 100);
    int var63 = var48.getPid();
    java.lang.String var64 = var48.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var70 = var68.getInitialObsForPid(100);
    var66.removeAllObs(var70);
    java.util.Set var72 = var66.getTerminalObs();
    dynoptic.model.fifosys.cfsm.fsm.FSM var74 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var48, var72, (-1));
    boolean var75 = var48.isAccept();
    int var76 = var48.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var37.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var38.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "0"+ "'", var39.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var64.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);

  }

  public void test319() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test319"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var2 = var1.toIntermediateString();
    boolean var3 = var1.isAccept();
    java.util.Set var5 = var1.getInitialObsForPid(10);
    java.util.Set var7 = var1.getTerminalObsForPid(0);
    java.util.Set var9 = var1.getTerminalObsForPid((-1));
    boolean var10 = var1.isAccept();
    boolean var12 = var1.isAcceptForPid(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-296947984"+ "'", var2.equals("Part-0-296947984"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test320() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test320"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-202400033");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-202400033"+ "'", var2.equals("Part-0-202400033"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Part-0-202400033"+ "'", var3.equals("Part-0-202400033"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Part-0-202400033"+ "'", var4.equals("Part-0-202400033"));

  }

  public void test321() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test321"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    int var5 = var4.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));

  }

  public void test322() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test322"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var3 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var5 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var6 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var5);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var5);
    boolean var8 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test323() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test323"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getStates();
    dynoptic.model.alphabet.FSMAlphabet var22 = var19.getAlphabet();
    boolean var23 = var19.isDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test324"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    var5.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var21 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    java.util.Set var22 = var21.getTransitioningEvents();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.cfsm.fsm.FSMState var24 = var21.getFSMState((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test325() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test325"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    java.lang.String var20 = var0.beginGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    int var42 = var27.getPid();
    int var43 = var27.getScmId();
    int var44 = var27.getPid();
    java.lang.String var47 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var27, false, false);
    var27.setAccept();
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var52 = var50.getInitialObsForPid(100);
    java.util.Set var54 = var50.getInitialObsForPid(1);
    java.util.Set var55 = var50.getInitialObservations();
    int var56 = var50.getNumProcesses();
    boolean var57 = var27.equals((java.lang.Object)var50);
    java.util.Set var58 = var50.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-1640521591"+ "'", var14.equals("Part-0-1640521591"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "digraph {\n"+ "'", var20.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "  1 [label=\"0\",shape=circle];\n"+ "'", var47.equals("  1 [label=\"0\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test326() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test326"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState((-1), true, false);
    boolean var4 = var3.isTerminal();
    int var5 = var3.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));

  }

  public void test327() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test327"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var4 = var2.getInitialObsForPid(100);
    java.lang.String var5 = var2.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var7 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var11 = var9.getInitialObsForPid(100);
    var7.removeAllObs(var11);
    dynoptic.model.alphabet.FSMAlphabet var13 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var19 = var17.getInitialObsForPid(100);
    var15.removeAllObs(var19);
    boolean var21 = var15.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    java.util.Set var29 = var23.getTerminalObs();
    var15.removeAllObs(var29);
    boolean var31 = var13.retainAll((java.util.Collection)var29);
    java.lang.Object[] var33 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var34 = var13.toArray(var33);
    java.lang.Object[] var35 = var13.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var2, var11, (java.util.Set)var13);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    boolean var44 = var38.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    java.util.Set var52 = var46.getTerminalObs();
    var38.removeAllObs(var52);
    dynoptic.model.automaton.EventTypeEncodings var54 = new dynoptic.model.automaton.EventTypeEncodings(var52);
    boolean var55 = var13.addAll((java.util.Collection)var52);
    boolean var56 = var13.isEmpty();
    dynoptic.model.alphabet.FSMAlphabet var57 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var58 = var57.toScmParametersString();
    java.lang.Object[] var59 = var57.toArray();
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    java.lang.String var65 = var62.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var69 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var71 = var69.getInitialObsForPid(100);
    var67.removeAllObs(var71);
    dynoptic.model.alphabet.FSMAlphabet var73 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var79 = var77.getInitialObsForPid(100);
    var75.removeAllObs(var79);
    boolean var81 = var75.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var83 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var85 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var87 = var85.getInitialObsForPid(100);
    var83.removeAllObs(var87);
    java.util.Set var89 = var83.getTerminalObs();
    var75.removeAllObs(var89);
    boolean var91 = var73.retainAll((java.util.Collection)var89);
    java.lang.Object[] var93 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var94 = var73.toArray(var93);
    java.lang.Object[] var95 = var73.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var62, var71, (java.util.Set)var73);
    boolean var97 = var57.removeAll((java.util.Collection)var71);
    java.lang.String var98 = var57.anyEventScmQRe();
    boolean var99 = var13.removeAll((java.util.Collection)var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + ""+ "'", var58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "[]"+ "'", var65.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var98 + "' != '" + "(_)"+ "'", var98.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test328"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    boolean var40 = var11.isAccept();
    var11.setAccept();
    boolean var42 = var11.isInitial();
    int var43 = var11.getPid();
    java.util.Set var44 = var11.getTransitioningEvents();
    java.lang.String var45 = var11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "0"+ "'", var45.equals("0"));

  }

  public void test329() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test329"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.cfsm.fsm.FSM var47 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var33, var38, var44, 100);
    var22.removeAllObs(var44);
    java.util.Set var50 = var22.getInitialObsForPid((-1));
    var14.removeAllObs(var50);
    java.util.Set var53 = var14.getInitialObsForPid(0);
    boolean var54 = var14.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-1582813294"+ "'", var15.equals("Part-0-1582813294"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test330() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test330"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var4 = var2.getInitialObsForPid(100);
    java.util.Set var5 = var2.getTransitioningEvents();
    java.util.Set var6 = var2.getInitialObservations();
    java.util.Set var7 = var2.getNextStates();
    dynoptic.model.alphabet.FSMAlphabet var8 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var15 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var20 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.cfsm.fsm.FSM var29 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var15, var20, var26, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var20, var35, var42);
    boolean var45 = var8.retainAll((java.util.Collection)var42);
    java.lang.Object[] var46 = var8.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var52 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var57 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.fifosys.cfsm.fsm.FSM var66 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var52, var57, var63, 100);
    int var67 = var66.getPid();
    java.util.Set var68 = var66.getAcceptStates();
    boolean var69 = var8.retainAll((java.util.Collection)var68);
    boolean var70 = var8.isEmpty();
    var8.clear();
    var8.clear();
    dynoptic.model.alphabet.FSMAlphabet var73 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var79 = var77.getInitialObsForPid(100);
    var75.removeAllObs(var79);
    boolean var81 = var75.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var83 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var85 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var87 = var85.getInitialObsForPid(100);
    var83.removeAllObs(var87);
    java.util.Set var89 = var83.getTerminalObs();
    var75.removeAllObs(var89);
    boolean var91 = var73.retainAll((java.util.Collection)var89);
    dynoptic.model.fifosys.cfsm.fsm.FSM var93 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, (java.util.Set)var8, (java.util.Collection)var73, 100);
    java.util.Set var94 = var93.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test331() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test331"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("  1 [label=\"[]\",shape=circle];\n");

  }

  public void test332() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test332"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    int var26 = var11.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var53 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var39, var44, var50, 100);
    var28.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var56 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var5, var11, var50, 1);
    java.util.Set var57 = var56.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test333() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test333"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 0);
    boolean var11 = var1.isAcceptForPid(10);
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = var13.lastState();
    var14.recreateCachedTransitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test334() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test334"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.automaton.EventTypeEncodings var68 = var67.getEventTypeEncodings();
    boolean var69 = var47.equals((java.lang.Object)var67);
    java.util.Set var70 = var67.getStates();
    java.util.Set var71 = var67.getAcceptStates();
    java.util.Set var72 = var67.getStates();
    boolean var73 = var67.isDeterministic();
    java.util.Set var74 = var67.getStates();
    dynoptic.model.automaton.EventTypeEncodings var75 = var67.getEventTypeEncodings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var77 = var75.getEventType(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test335"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    var5.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var21 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    java.util.Set var42 = var41.getAcceptStates();
    java.util.Set var43 = var41.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var54 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    var56.removeAllObs(var60);
    dynoptic.model.fifosys.cfsm.fsm.FSM var63 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var49, var54, var60, 100);
    dynoptic.model.automaton.EventTypeEncodings var64 = var63.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var65 = var41.getEncodedAutomaton(var64);
    java.util.Set var66 = var41.getAcceptStates();
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var70 = var68.getInitialObsForPid(100);
    java.util.Set var71 = var68.getTransitioningEvents();
    java.util.Set var72 = var68.getInitialObservations();
    java.util.Set var73 = var68.getNextStates();
    java.util.Set var74 = var68.getInitialObservations();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findTransitiveClosure((dynoptic.model.AbsFSMState)var5, var66, var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test336() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test336"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    dynoptic.model.automaton.EventTypeEncodings var8 = new dynoptic.model.automaton.EventTypeEncodings(var7);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var21 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.cfsm.fsm.FSM var30 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var16, var21, var27, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var21, var36, var43);
    java.lang.String var46 = var21.toLongString();
    java.lang.String var47 = var21.toLongString();
    java.lang.String var48 = var21.toString();
    java.util.Set var49 = var21.getNextStates();
    java.util.Set var50 = var21.getNextStates();
    int var51 = var21.getScmId();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var57 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var62 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var68 = var66.getInitialObsForPid(100);
    var64.removeAllObs(var68);
    dynoptic.model.fifosys.cfsm.fsm.FSM var71 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var57, var62, var68, 100);
    int var72 = var57.getPid();
    java.lang.String var73 = var57.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var79 = var77.getInitialObsForPid(100);
    var75.removeAllObs(var79);
    java.util.Set var81 = var75.getTerminalObs();
    dynoptic.model.fifosys.cfsm.fsm.FSM var83 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var21, var57, var81, (-1));
    dynoptic.model.automaton.EncodedAutomaton var84 = new dynoptic.model.automaton.EncodedAutomaton(var8, var83);
    dynoptic.model.fifosys.gfsm.GFSMPath var86 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var87 = new dynoptic.model.fifosys.gfsm.GFSMPath(var86);
    dynoptic.model.fifosys.gfsm.GFSMPath var88 = new dynoptic.model.fifosys.gfsm.GFSMPath(var86);
    boolean var89 = var8.equals((java.lang.Object)var86);
    dynoptic.model.fifosys.gfsm.GFSMState var91 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var93 = new dynoptic.model.fifosys.gfsm.GFSMPath(var91, (-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var94 = new dynoptic.model.fifosys.gfsm.GFSMPath(var86, var93);
    boolean var95 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var46.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var47.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "0"+ "'", var48.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var73.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);

  }

  public void test337() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test337"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, false, 0, (-1));
    int var5 = var4.getScmId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));

  }

  public void test338() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test338"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var58.getPid();
    java.util.Set var60 = var58.getAcceptStates();
    boolean var61 = var0.retainAll((java.util.Collection)var60);
    boolean var62 = var0.isEmpty();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var68 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var79 = var77.getInitialObsForPid(100);
    var75.removeAllObs(var79);
    dynoptic.model.fifosys.cfsm.fsm.FSM var82 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var68, var73, var79, 100);
    boolean var83 = var0.remove((java.lang.Object)var73);
    boolean var84 = var0.isEmpty();
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);

  }

  public void test339() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test339"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    java.lang.String var20 = var0.beginGraphString();
    java.lang.String var21 = var0.endGraphString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-1993770325"+ "'", var14.equals("Part-0-1993770325"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "digraph {\n"+ "'", var20.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "} // digraph {\n"+ "'", var21.equals("} // digraph {\n"));

  }

  public void test340() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test340"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    int var26 = var11.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var53 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var39, var44, var50, 100);
    var28.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var56 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var5, var11, var50, 1);
    java.lang.String var57 = var11.toShortIntString();
    java.util.Set var58 = var11.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "0"+ "'", var57.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test341() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test341"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("Part-0-1948528802");

  }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test342"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getStates();
    java.lang.String var22 = var19.toString();
    java.util.Set var23 = var19.getStates();
    dynoptic.model.alphabet.FSMAlphabet var24 = var19.getAlphabet();
    dynoptic.model.alphabet.FSMAlphabet var25 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    dynoptic.model.fifosys.cfsm.fsm.FSM var46 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var32, var37, var43, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var52 = var50.getInitialObsForPid(100);
    var48.removeAllObs(var52);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var37, var52, var59);
    boolean var62 = var25.retainAll((java.util.Collection)var59);
    java.lang.Object[] var63 = var25.toArray();
    java.util.Iterator var64 = var25.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var67 = var66.toIntermediateString();
    boolean var68 = var66.isAccept();
    boolean var69 = var25.contains((java.lang.Object)var68);
    java.util.Set var70 = var25.getLocalEventScmStrings();
    boolean var71 = var24.addAll((java.util.Collection)var70);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var77 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var79 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var80 = var77.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.GFSMState var82 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var84 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var86 = var84.getInitialObsForPid(100);
    var82.removeAllObs(var86);
    java.util.Set var88 = var82.getTransitioningEvents();
    boolean var89 = var77.equals((java.lang.Object)var88);
    dynoptic.model.fifosys.gfsm.GFSMState var90 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var88);
    boolean var91 = var24.retainAll((java.util.Collection)var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var22.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "Part-0-897119702"+ "'", var67.equals("Part-0-897119702"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test343() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test343"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    boolean var7 = var5.hasOccurred();
    boolean var8 = var5.isInitState();
    boolean var9 = var5.hasOccurred();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var10 = var5.getObsState();
    java.lang.String var11 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var11.equals("ObsDAGNode[i_hi!_t]"));

  }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test344"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 0);
    boolean var11 = var1.isAcceptForPid(10);
    int var12 = var1.getNumProcesses();
    java.util.Set var14 = var1.getTerminalObsForPid(1);
    java.util.Set var15 = var1.getInitialObservations();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test345() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test345"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "Part-0-284291914", false, true);
    int var5 = var4.getPid();
    java.lang.String var6 = var4.toString();
    int var7 = var4.getPid();
    int var8 = var4.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    java.lang.String var14 = var11.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var20 = var18.getInitialObsForPid(100);
    var16.removeAllObs(var20);
    dynoptic.model.alphabet.FSMAlphabet var22 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var28 = var26.getInitialObsForPid(100);
    var24.removeAllObs(var28);
    boolean var30 = var24.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    java.util.Set var38 = var32.getTerminalObs();
    var24.removeAllObs(var38);
    boolean var40 = var22.retainAll((java.util.Collection)var38);
    java.lang.Object[] var42 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var43 = var22.toArray(var42);
    java.lang.Object[] var44 = var22.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var11, var20, (java.util.Set)var22);
    java.lang.String var46 = var11.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMPath var48 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, 0);
    boolean var49 = var4.equals((java.lang.Object)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Part-0-284291914_t"+ "'", var6.equals("Part-0-284291914_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "[]"+ "'", var46.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test346() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test346"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var45 = var42.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var46 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var51 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var52 = var51.getName();
    boolean var53 = var42.equals((java.lang.Object)var51);
    boolean var54 = var0.contains((java.lang.Object)var42);
    java.lang.String var55 = var42.getName();
    var42.markTerm();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var52.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "hi!"+ "'", var55.equals("hi!"));

  }

  public void test347() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test347"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var20 = var18.getInitialObsForPid(100);
    java.lang.String var21 = var18.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var28 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.fifosys.cfsm.fsm.FSM var42 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var28, var33, var39, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var48 = var46.getInitialObsForPid(100);
    var44.removeAllObs(var48);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var33, var48, var55);
    var18.removeAllObs(var55);
    var1.addAllObs(var55);
    java.util.Set var61 = var1.getInitialObsForPid(0);
    boolean var63 = var1.isInitForPid(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test348() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test348"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    java.lang.String var20 = var0.beginGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    int var42 = var27.getPid();
    int var43 = var27.getScmId();
    int var44 = var27.getPid();
    java.lang.String var47 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var27, false, false);
    java.lang.String var48 = var0.beginGraphString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-1245547369"+ "'", var14.equals("Part-0-1245547369"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "digraph {\n"+ "'", var20.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "  1 [label=\"0\",shape=circle];\n"+ "'", var47.equals("  1 [label=\"0\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "digraph {\n"+ "'", var48.equals("digraph {\n"));

  }

  public void test349() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test349"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var45 = var42.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var46 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var51 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var52 = var51.getName();
    boolean var53 = var42.equals((java.lang.Object)var51);
    boolean var54 = var0.contains((java.lang.Object)var42);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var55 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    synoptic.model.event.Event var56 = var55.getNextEvent();
    synoptic.model.event.Event var57 = var55.getNextEvent();
    java.lang.String var58 = var55.toString();
    synoptic.model.event.Event var59 = var55.getNextEvent();
    boolean var60 = var55.hasOccurred();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var61 = var55.getObsState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var52.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var58.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test350() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test350"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    dynoptic.model.automaton.EventTypeEncodings var42 = var41.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var43 = var19.getEncodedAutomaton(var42);
    int var44 = var19.getPid();
    var19.minimize();
    java.util.Set var46 = var19.getStates();
    int var47 = var19.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));

  }

  public void test351() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test351"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    dynoptic.model.alphabet.FSMAlphabet var2 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var9 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var20 = var18.getInitialObsForPid(100);
    var16.removeAllObs(var20);
    dynoptic.model.fifosys.cfsm.fsm.FSM var23 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var9, var14, var20, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var14, var29, var36);
    boolean var39 = var2.retainAll((java.util.Collection)var36);
    java.lang.Object[] var40 = var2.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var57 = var55.getInitialObsForPid(100);
    var53.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var60 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var46, var51, var57, 100);
    int var61 = var60.getPid();
    java.util.Set var62 = var60.getAcceptStates();
    boolean var63 = var2.retainAll((java.util.Collection)var62);
    boolean var64 = var2.isEmpty();
    var2.clear();
    boolean var66 = var0.containsAll((java.util.Collection)var2);
    int var67 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);

  }

  public void test352() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test352"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var4 = var2.getInitialObsForPid(100);
    boolean var5 = var2.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var2, 10);
    dynoptic.model.alphabet.FSMAlphabet var8 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    boolean var16 = var10.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    java.util.Set var24 = var18.getTerminalObs();
    var10.removeAllObs(var24);
    boolean var26 = var8.retainAll((java.util.Collection)var24);
    java.lang.String var27 = var8.toString();
    var2.addAllObs((java.util.Set)var8);
    dynoptic.model.alphabet.FSMAlphabet var29 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var41 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.cfsm.fsm.FSM var50 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var36, var41, var47, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var41, var56, var63);
    boolean var66 = var29.retainAll((java.util.Collection)var63);
    int var67 = var29.size();
    boolean var68 = var8.retainAll((java.util.Collection)var29);
    java.lang.String var69 = var29.toScmParametersString();
    java.lang.String var70 = var29.anyEventScmQRe();
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(0, (java.util.Set)var29);
    var71.recreateCachedTransitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[]"+ "'", var27.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + ""+ "'", var69.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(_)"+ "'", var70.equals("(_)"));

  }

  public void test353() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test353"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    var8.setOccurred(true);
    boolean var11 = var8.isInitState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test354() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test354"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    java.lang.String var5 = var4.toShortIntString();
    java.util.Set var6 = var4.getNextStates();
    boolean var7 = var4.isInitial();
    java.lang.String var8 = var4.toShortIntString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "0"+ "'", var5.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "0"+ "'", var8.equals("0"));

  }

  public void test355() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test355"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    boolean var7 = var5.hasOccurred();
    synoptic.model.event.Event var8 = var5.getNextEvent();
    java.lang.String var9 = var5.toString();
    var5.setOccurred(false);
    boolean var12 = var5.isInitState();
    boolean var13 = var5.isInitState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var9.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test356() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test356"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(1, "Part-0-819957681", true, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test357() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test357"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    java.lang.String var20 = var13.toString();
    java.util.Set var21 = var13.getTerminalObs();
    boolean var22 = var13.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-718069727"+ "'", var14.equals("Part-0-718069727"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test358() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test358"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-1140485348");

  }

  public void test359() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test359"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var37 = var35.getInitialObsForPid(100);
    var33.removeAllObs(var37);
    dynoptic.model.fifosys.cfsm.fsm.FSM var40 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var26, var31, var37, 100);
    int var41 = var40.getPid();
    java.util.Set var42 = var40.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSM var62 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var48, var53, var59, 100);
    int var63 = var48.getPid();
    int var64 = var48.getScmId();
    int var65 = var48.getPid();
    boolean var66 = var40.equals((java.lang.Object)var65);
    java.lang.String var67 = var40.toString();
    java.util.Set var68 = var40.getStates();
    dynoptic.model.automaton.EncodedAutomaton var69 = new dynoptic.model.automaton.EncodedAutomaton(var20, var40);
    java.lang.String var70 = var40.toString();
    java.util.Set var71 = var40.getStates();
    boolean var72 = var40.isDeterministic();
    dynoptic.model.alphabet.FSMAlphabet var73 = var40.getAlphabet();
    java.lang.Object[] var74 = var73.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var67.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var70.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test360() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test360"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    java.lang.String var21 = var5.toLongString();
    java.lang.String var22 = var5.toLongString();
    int var23 = var5.getScmId();
    java.lang.String var24 = var5.toLongString();
    var5.setAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var21.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var22.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var24.equals("FSM_state: init[true], accept[false] id[0]"));

  }

  public void test361() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test361"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("Part-0-693525117");

  }

  public void test362() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test362"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    int var40 = var39.getPid();
    java.util.Set var41 = var39.getStates();
    dynoptic.model.automaton.EncodedAutomaton var42 = new dynoptic.model.automaton.EncodedAutomaton(var17, var39);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    var44.recreateCachedTransitions();
    boolean var47 = var44.isAcceptForPid(1);
    boolean var48 = var39.equals((java.lang.Object)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test363() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test363"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var3 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 0);
    int var4 = var3.numEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test364() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test364"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var34 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var40 = var38.getInitialObsForPid(100);
    var36.removeAllObs(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSM var43 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var29, var34, var40, 100);
    int var44 = var29.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var57 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var62 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var68 = var66.getInitialObsForPid(100);
    var64.removeAllObs(var68);
    dynoptic.model.fifosys.cfsm.fsm.FSM var71 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var57, var62, var68, 100);
    var46.removeAllObs(var68);
    dynoptic.model.fifosys.cfsm.fsm.FSM var74 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var23, var29, var68, 1);
    java.util.Set var75 = var74.getAcceptStates();
    dynoptic.model.automaton.EncodedAutomaton var76 = new dynoptic.model.automaton.EncodedAutomaton(var17, var74);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var78 = var17.getEventType(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test365() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test365"); }


    dynoptic.model.alphabet.FSMAlphabet var1 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var2 = var1.toScmParametersString();
    var1.clear();
    java.lang.String var4 = var1.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var12 = var9.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var13 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var9);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var21 = var18.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var22 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var18);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var23 = var22.getObsState();
    boolean var24 = var22.isEnabled();
    var22.setOccurred(false);
    var13.addRemoteDependency(var22);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var28 = var22.getObsState();
    boolean var29 = var1.remove((java.lang.Object)var28);
    boolean var30 = var1.isEmpty();
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState((-1), (java.util.Set)var1);
    dynoptic.model.alphabet.FSMAlphabet var32 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var33 = var32.toScmParametersString();
    java.lang.Object[] var34 = var32.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var40 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, (-1));
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var57 = var55.getInitialObsForPid(100);
    var53.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var60 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var46, var51, var57, 100);
    int var61 = var46.getPid();
    int var62 = var46.getScmId();
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    dynoptic.model.fifosys.cfsm.fsm.FSM var68 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var40, var46, var66, 0);
    boolean var69 = var32.retainAll((java.util.Collection)var66);
    boolean var70 = var1.containsAll((java.util.Collection)var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + ""+ "'", var33.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);

  }

  public void test366() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test366"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    int var21 = var6.getPid();
    java.lang.String var22 = var6.toLongString();
    java.util.Set var23 = var6.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var22.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test367() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test367"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.lang.String var21 = var19.toString();
    java.util.Set var22 = var19.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var21.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test368() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test368"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    var0.clear();
    java.lang.String var3 = var0.toString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var8 = var5.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var15 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var20 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.cfsm.fsm.FSM var29 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var15, var20, var26, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var20, var35, var42);
    var5.removeAllObs(var42);
    boolean var47 = var5.isInitForPid(100);
    java.util.Set var48 = var5.getTransitioningEvents();
    boolean var49 = var0.retainAll((java.util.Collection)var48);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var53 = var51.getTerminalObsForPid(1);
    boolean var54 = var0.removeAll((java.util.Collection)var53);
    int var55 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);

  }

  public void test369() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test369"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.String var38 = var0.toString();
    boolean var40 = var0.remove((java.lang.Object)' ');
    java.lang.String var41 = var0.toScmParametersString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[]"+ "'", var38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + ""+ "'", var41.equals(""));

  }

  public void test370() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test370"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var11);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, var15);
    boolean var17 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var19 = var18.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test371() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test371"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var2 = var1.toIntermediateString();
    boolean var3 = var1.isAccept();
    java.util.Set var5 = var1.getInitialObsForPid(10);
    java.util.Set var7 = var1.getTerminalObsForPid(0);
    java.util.Set var8 = var1.getTerminalObs();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, (-1));
    java.lang.String var11 = var10.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-1422887789"+ "'", var2.equals("Part-0-1422887789"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "GFSMPath : []"+ "'", var11.equals("GFSMPath : []"));

  }

  public void test372() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test372"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    int var21 = var5.getScmId();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var26 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var28 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var29 = var26.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var30 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var26);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var31 = var30.getObsState();
    int var32 = var30.getPid();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var37 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var39 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var40 = var37.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var41 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var37);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = var41.getObsState();
    java.lang.String var43 = var41.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var44 = var41.getObsState();
    boolean var45 = var41.isTermState();
    boolean var46 = var41.isTermState();
    boolean var47 = var41.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var48 = var41.getObsState();
    var30.addRemoteDependency(var41);
    java.lang.String var50 = var41.toString();
    boolean var51 = var5.equals((java.lang.Object)var50);
    boolean var52 = var5.isInitial();
    java.lang.String var53 = var5.toString();
    java.lang.String var54 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var43.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var50.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "0"+ "'", var53.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "0"+ "'", var54.equals("0"));

  }

  public void test373() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test373"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var9 = var8.lastState();
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var12 = var11.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var14 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, 1);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14);
    int var16 = var15.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var19 = new dynoptic.model.fifosys.gfsm.GFSMPath(var18);
    dynoptic.model.fifosys.gfsm.GFSMPath var21 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var22 = var21.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath(var18, var21);
    dynoptic.model.fifosys.gfsm.GFSMPath var25 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var26 = new dynoptic.model.fifosys.gfsm.GFSMPath(var21, var25);
    boolean var27 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var25);
    dynoptic.model.fifosys.gfsm.GFSMPath var28 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15, var25);
    dynoptic.model.fifosys.gfsm.GFSMPath var29 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var28);
    int var30 = var8.numEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Part-0-1572717662"+ "'", var12.equals("Part-0-1572717662"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);

  }

  public void test374() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test374"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var9 = var1.numEvents();
    boolean var10 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var11 = var1.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test375() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test375"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var58.getPid();
    java.util.Set var60 = var58.getAcceptStates();
    boolean var61 = var0.retainAll((java.util.Collection)var60);
    boolean var62 = var0.isEmpty();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var68 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var79 = var77.getInitialObsForPid(100);
    var75.removeAllObs(var79);
    dynoptic.model.fifosys.cfsm.fsm.FSM var82 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var68, var73, var79, 100);
    boolean var83 = var0.remove((java.lang.Object)var73);
    java.lang.String var84 = var0.anyEventScmQRe();
    java.lang.String var85 = var0.anyEventScmQRe();
    java.util.Iterator var86 = var0.iterator();
    java.util.Iterator var87 = var0.iterator();
    java.util.Set var88 = var0.getLocalEventScmStrings();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "(_)"+ "'", var84.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "(_)"+ "'", var85.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test376() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test376"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    java.lang.String var13 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var5, false, false);
    java.util.Set var14 = var5.getObservedStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var13.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test377() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test377"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    var5.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var21 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    java.util.Set var22 = var21.getTransitioningEvents();
    boolean var23 = var21.isAccept();
    java.util.Set var24 = var21.getTransitioningEvents();
    boolean var25 = var21.isInitial();
    boolean var27 = var21.isInitForPid(0);
    boolean var28 = var21.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);

  }

  public void test378() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test378"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("  1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@6f115104\",shape=circle,shape=doublecircle];\n");

  }

  public void test379() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test379"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.lang.String var4 = var1.toIntermediateString();
    dynoptic.model.alphabet.FSMAlphabet var5 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var6 = var5.toScmParametersString();
    var5.clear();
    var1.addAllObs((java.util.Set)var5);
    dynoptic.model.alphabet.FSMAlphabet var9 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var10 = var9.toScmParametersString();
    java.lang.Object[] var11 = var9.toArray();
    boolean var12 = var9.isEmpty();
    var1.addAllObs((java.util.Set)var9);
    java.util.Set var14 = var1.getInitialObservations();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Part-0-756888828"+ "'", var4.equals("Part-0-756888828"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test380() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test380"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    int var42 = var27.getPid();
    int var43 = var27.getScmId();
    int var44 = var27.getPid();
    boolean var45 = var19.equals((java.lang.Object)var44);
    java.lang.String var46 = var19.toString();
    java.util.Set var47 = var19.getStates();
    dynoptic.model.automaton.EventTypeEncodings var48 = var19.getEventTypeEncodings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var50 = var48.getEventType(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var46.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test381() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test381"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    var0.clear();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    java.util.Set var59 = var58.getAcceptStates();
    java.util.Set var60 = var58.getStates();
    java.lang.String var61 = var58.toString();
    int var62 = var58.getPid();
    java.lang.String var63 = var58.toString();
    java.util.Set var64 = var58.getAcceptStates();
    java.util.Set var65 = var58.getAcceptStates();
    boolean var66 = var0.addAll((java.util.Collection)var65);
    dynoptic.model.alphabet.FSMAlphabet var67 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var68 = var67.toScmParametersString();
    var67.clear();
    java.lang.String var70 = var67.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var75 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var77 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var78 = var75.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var79 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var75);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var84 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var86 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var87 = var84.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var88 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var84);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var89 = var88.getObsState();
    boolean var90 = var88.isEnabled();
    var88.setOccurred(false);
    var79.addRemoteDependency(var88);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var94 = var88.getObsState();
    boolean var95 = var67.remove((java.lang.Object)var94);
    java.lang.String var96 = var67.anyEventScmQRe();
    boolean var97 = var0.containsAll((java.util.Collection)var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var61.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var63.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "[]"+ "'", var70.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "(_)"+ "'", var96.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == true);

  }

  public void test382() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test382"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", false, false);
    boolean var5 = var4.isTerminal();
    var4.markTerm();
    java.lang.String var7 = var4.toString();
    java.lang.String var8 = var4.toString();
    java.lang.String var9 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!_t"+ "'", var7.equals("hi!_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!_t"+ "'", var8.equals("hi!_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!_t"+ "'", var9.equals("hi!_t"));

  }

  public void test383() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test383"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(10, true, true);
    int var4 = var3.getPid();
    boolean var5 = var3.isTerminal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test384() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test384"); }


    dynoptic.model.alphabet.FSMAlphabet var1 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var2 = var1.toScmParametersString();
    var1.clear();
    java.lang.String var4 = var1.toString();
    dynoptic.model.fifosys.gfsm.GFSMState var6 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var8 = var6.getInitialObsForPid(100);
    java.lang.String var9 = var6.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var21 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.cfsm.fsm.FSM var30 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var16, var21, var27, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var21, var36, var43);
    var6.removeAllObs(var43);
    boolean var48 = var6.isInitForPid(100);
    java.util.Set var49 = var6.getTransitioningEvents();
    boolean var50 = var1.retainAll((java.util.Collection)var49);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var54 = var52.getTerminalObsForPid(1);
    boolean var55 = var1.removeAll((java.util.Collection)var54);
    dynoptic.model.automaton.EventTypeEncodings var56 = new dynoptic.model.automaton.EventTypeEncodings(var54);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState((-1), var54);
    java.util.Set var58 = var57.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test385() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test385"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    java.lang.String var5 = var4.toShortIntString();
    var4.setAccept();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var14 = var11.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var15 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var11);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var16 = var15.getObsState();
    java.lang.String var17 = var15.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = var15.getObsState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var19 = var15.getObsState();
    boolean var20 = var4.equals((java.lang.Object)var19);
    int var21 = var4.getPid();
    boolean var22 = var4.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "0"+ "'", var5.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var17.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test386() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test386"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    boolean var7 = var5.hasOccurred();
    synoptic.model.event.Event var8 = var5.getNextEvent();
    var5.setOccurred(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test387() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test387"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var14 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    java.lang.String var15 = var14.toString();
    boolean var16 = var14.hasOccurred();
    int var17 = var14.getPid();
    boolean var18 = var14.isInitState();
    var8.addRemoteDependency(var14);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var26 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var27 = var24.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var28 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var24);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var33 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var35 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var36 = var33.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var37 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var33);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var38 = var37.getObsState();
    boolean var39 = var37.isEnabled();
    var37.setOccurred(false);
    var28.addRemoteDependency(var37);
    synoptic.model.event.Event var43 = var37.getNextEvent();
    synoptic.model.event.Event var44 = var37.getNextEvent();
    var8.addRemoteDependency(var37);
    synoptic.model.event.Event var46 = var8.getNextEvent();
    boolean var47 = var8.isTermState();
    synoptic.model.event.Event var48 = var8.getNextEvent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var15.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);

  }

  public void test388() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test388"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var17);
    java.util.Set var23 = var21.getInitialObsForPid(1);
    java.util.Set var25 = var21.getTerminalObsForPid(100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.cfsm.fsm.FSM var47 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var33, var38, var44, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var53 = var51.getInitialObsForPid(100);
    var49.removeAllObs(var53);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    var56.removeAllObs(var60);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var38, var53, var60);
    dynoptic.model.fifosys.gfsm.GFSMPath var64 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var65 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var64);
    boolean var66 = var38.equals((java.lang.Object)var65);
    boolean var67 = var38.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var72 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.gfsm.GFSMState var74 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var76 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var78 = var76.getInitialObsForPid(100);
    var74.removeAllObs(var78);
    java.util.Set var80 = var74.getTerminalObs();
    dynoptic.model.fifosys.cfsm.fsm.FSM var82 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var38, var72, var80, 1);
    var21.addAllObs(var80);
    java.lang.String var84 = var21.toLongString();
    java.util.Set var85 = var21.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "[]_i_t"+ "'", var84.equals("[]_i_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test389() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test389"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 10, (-1));
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    boolean var33 = var27.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    java.util.Set var41 = var35.getTerminalObs();
    var27.removeAllObs(var41);
    dynoptic.model.automaton.EventTypeEncodings var43 = new dynoptic.model.automaton.EventTypeEncodings(var41);
    dynoptic.model.fifosys.cfsm.fsm.FSM var45 = new dynoptic.model.fifosys.cfsm.fsm.FSM(0, var5, var16, var41, (-1));
    var16.setAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test390() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test390"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var32, var47, var54);
    var32.setAccept();
    boolean var58 = var32.isAccept();
    java.lang.String var61 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var32, true, true);
    java.lang.String var62 = var0.endGraphString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-14947337"+ "'", var14.equals("Part-0-14947337"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "  0 [label=\"0\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->0;\n"+ "'", var61.equals("  0 [label=\"0\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "} // digraph {\n"+ "'", var62.equals("} // digraph {\n"));

  }

  public void test391() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test391"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(0, "FSM_state: init[true], accept[true] id[0]", false, true);
    boolean var5 = var4.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test392() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test392"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var45 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var50 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.cfsm.fsm.FSM var59 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var45, var50, var56, 100);
    dynoptic.model.automaton.EventTypeEncodings var60 = var59.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var65 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var66 = var60.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var67 = var39.getEncodedAutomaton(var60);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var78 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var82 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var84 = var82.getInitialObsForPid(100);
    var80.removeAllObs(var84);
    dynoptic.model.fifosys.cfsm.fsm.FSM var87 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var73, var78, var84, 100);
    dynoptic.model.automaton.EventTypeEncodings var88 = var87.getEventTypeEncodings();
    boolean var89 = var67.equals((java.lang.Object)var87);
    dynoptic.model.automaton.EncodedAutomaton var90 = new dynoptic.model.automaton.EncodedAutomaton(var17, var87);
    boolean var92 = var17.equals((java.lang.Object)"Part-0-1140485348");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test393() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test393"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var25 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var26 = var20.equals((java.lang.Object)true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var28 = var20.getEventType('a');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test394() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test394"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    java.util.Set var22 = var14.getTerminalObsForPid(100);
    java.lang.String var23 = var14.toLongString();
    java.util.Set var24 = var14.getInitialObservations();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var31 = var30.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var42 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var48 = var46.getInitialObsForPid(100);
    var44.removeAllObs(var48);
    dynoptic.model.fifosys.cfsm.fsm.FSM var51 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var37, var42, var48, 100);
    int var52 = var37.getPid();
    int var53 = var37.getScmId();
    dynoptic.model.alphabet.FSMAlphabet var54 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var61 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var66 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var70 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var72 = var70.getInitialObsForPid(100);
    var68.removeAllObs(var72);
    dynoptic.model.fifosys.cfsm.fsm.FSM var75 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var61, var66, var72, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var79 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var81 = var79.getInitialObsForPid(100);
    var77.removeAllObs(var81);
    dynoptic.model.fifosys.gfsm.GFSMState var84 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var88 = var86.getInitialObsForPid(100);
    var84.removeAllObs(var88);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var66, var81, var88);
    boolean var91 = var54.retainAll((java.util.Collection)var88);
    java.lang.String var92 = var54.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var94 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var30, var37, (java.util.Set)var54, 1);
    var14.removeAllObs((java.util.Set)var54);
    java.lang.String var96 = var14.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-769312689"+ "'", var15.equals("Part-0-769312689"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "[]"+ "'", var92.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "[]"+ "'", var96.equals("[]"));

  }

  public void test395() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test395"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "-1", false, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test396() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test396"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("Part-0-1573092703");

  }

  public void test397() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test397"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, false, 10, 10);

  }

  public void test398() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test398"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "Part-0-284291914", false, true);
    int var5 = var4.getPid();
    int var6 = var4.getPid();
    java.lang.String var7 = var4.getName();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var9 = var8.getPrevState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Part-0-284291914"+ "'", var7.equals("Part-0-284291914"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test399() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test399"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    int var42 = var27.getPid();
    int var43 = var27.getScmId();
    int var44 = var27.getPid();
    boolean var45 = var19.equals((java.lang.Object)var44);
    java.lang.String var46 = var19.toString();
    boolean var47 = var19.isDeterministic();
    var19.minimize();
    java.lang.String var49 = var19.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var46.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "FSM[pid=-1]\n\tstates: [0]\n\tinits: [0]\n\taccepts: []"+ "'", var49.equals("FSM[pid=-1]\n\tstates: [0]\n\tinits: [0]\n\taccepts: []"));

  }

  public void test400() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test400"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    boolean var8 = var4.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test401() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test401"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    int var26 = var11.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var53 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var39, var44, var50, 100);
    var28.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var56 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var5, var11, var50, 1);
    java.util.Set var57 = var56.getAcceptStates();
    var56.minimize();
    boolean var59 = var56.isDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);

  }

  public void test402() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test402"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    dynoptic.model.alphabet.FSMAlphabet var7 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    boolean var15 = var9.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var21 = var19.getInitialObsForPid(100);
    var17.removeAllObs(var21);
    java.util.Set var23 = var17.getTerminalObs();
    var9.removeAllObs(var23);
    boolean var25 = var7.retainAll((java.util.Collection)var23);
    java.lang.String var26 = var7.toString();
    var1.addAllObs((java.util.Set)var7);
    dynoptic.model.alphabet.FSMAlphabet var28 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var35 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var40 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var46 = var44.getInitialObsForPid(100);
    var42.removeAllObs(var46);
    dynoptic.model.fifosys.cfsm.fsm.FSM var49 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var35, var40, var46, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var40, var55, var62);
    boolean var65 = var28.retainAll((java.util.Collection)var62);
    int var66 = var28.size();
    boolean var67 = var7.retainAll((java.util.Collection)var28);
    java.lang.Object[] var68 = var28.toArray();
    dynoptic.model.alphabet.FSMAlphabet var69 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    var71.removeAllObs(var75);
    boolean var77 = var71.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var79 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var81 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var83 = var81.getInitialObsForPid(100);
    var79.removeAllObs(var83);
    java.util.Set var85 = var79.getTerminalObs();
    var71.removeAllObs(var85);
    boolean var87 = var69.retainAll((java.util.Collection)var85);
    java.lang.Object[] var89 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var90 = var69.toArray(var89);
    boolean var91 = var28.removeAll((java.util.Collection)var69);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var96 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    java.lang.String var97 = var96.toShortIntString();
    java.util.Set var98 = var96.getNextStates();
    boolean var99 = var69.addAll((java.util.Collection)var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + "0"+ "'", var97.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test403() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test403"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    java.lang.String var21 = var0.endGraphString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-468183704"+ "'", var15.equals("Part-0-468183704"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "} // digraph {\n"+ "'", var21.equals("} // digraph {\n"));

  }

  public void test404() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test404"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(1, false, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test405() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test405"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-1051890292");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-1051890292"+ "'", var2.equals("Part-0-1051890292"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Part-0-1051890292"+ "'", var3.equals("Part-0-1051890292"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Part-0-1051890292"+ "'", var4.equals("Part-0-1051890292"));

  }

  public void test406() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test406"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 0);
    boolean var11 = var1.isAcceptForPid(10);
    int var12 = var1.getNumProcesses();
    java.util.Set var14 = var1.getTerminalObsForPid((-1));
    java.util.Set var16 = var1.getTerminalObsForPid(1);
    java.util.Set var18 = var1.getInitialObsForPid(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test407() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test407"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-562885363");

  }

  public void test408() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test408"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    var0.clear();
    java.lang.String var3 = var0.toString();
    boolean var4 = var0.isEmpty();
    java.lang.String var5 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));

  }

  public void test409() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test409"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("GFSMPath : []");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "GFSMPath : []"+ "'", var2.equals("GFSMPath : []"));

  }

  public void test410() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test410"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    java.lang.String var20 = var13.toString();
    java.util.Set var21 = var13.getTerminalObs();
    java.util.Set var22 = var13.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-1306314430"+ "'", var14.equals("Part-0-1306314430"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test411() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test411"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var6 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    dynoptic.model.fifosys.cfsm.fsm.FSM var32 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var18, var23, var29, 100);
    int var33 = var18.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var57 = var55.getInitialObsForPid(100);
    var53.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var60 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var46, var51, var57, 100);
    var35.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var63 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var12, var18, var57, 1);
    dynoptic.model.alphabet.FSMAlphabet var64 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var65 = var64.toScmParametersString();
    var64.clear();
    java.lang.String var67 = var64.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var72 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var74 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var75 = var72.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var76 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var72);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var81 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var83 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var84 = var81.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var85 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var81);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var86 = var85.getObsState();
    boolean var87 = var85.isEnabled();
    var85.setOccurred(false);
    var76.addRemoteDependency(var85);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var91 = var85.getObsState();
    boolean var92 = var64.remove((java.lang.Object)var91);
    boolean var93 = var64.isEmpty();
    java.lang.String var94 = var64.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var96 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var5, var18, (java.util.Set)var64, 0);
    java.util.Set var97 = var96.getInitStates();
    int var98 = var96.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[]"+ "'", var67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "[]"+ "'", var94.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == 1);

  }

  public void test412() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test412"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var11);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, var15);
    boolean var17 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var21 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var20);
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15, var20);
    int var23 = var15.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var24 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var25 = var15.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);

  }

  public void test413() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test413"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var9.getName();
    var9.markTerm();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var12 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var9);
    java.lang.String var13 = var9.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));

  }

  public void test414() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test414"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var25 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var26 = var20.equals((java.lang.Object)true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    dynoptic.model.fifosys.cfsm.fsm.FSM var46 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var32, var37, var43, 100);
    int var47 = var32.getPid();
    java.lang.String var48 = var32.toLongString();
    boolean var49 = var20.equals((java.lang.Object)var48);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    java.util.Set var70 = var69.getAcceptStates();
    java.util.Set var71 = var69.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var77 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var82 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var84 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var88 = var86.getInitialObsForPid(100);
    var84.removeAllObs(var88);
    dynoptic.model.fifosys.cfsm.fsm.FSM var91 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var77, var82, var88, 100);
    dynoptic.model.automaton.EventTypeEncodings var92 = var91.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var93 = var69.getEncodedAutomaton(var92);
    dynoptic.model.automaton.EncodedAutomaton var94 = new dynoptic.model.automaton.EncodedAutomaton(var20, var69);
    var69.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var48.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test415() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test415"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(1, "ObsDAGNode[i_hi!_t]", false, false);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var6 = var5.getObsState();
    boolean var7 = var5.isEnabled();
    boolean var8 = var5.isInitState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test416() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test416"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    var11.setAccept();
    boolean var37 = var11.isAccept();
    boolean var39 = var11.equals((java.lang.Object)"  100 [label=\"-1\",shape=circle];\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test417() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test417"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var6 = var5.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    int var27 = var12.getPid();
    int var28 = var12.getScmId();
    dynoptic.model.alphabet.FSMAlphabet var29 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var41 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.cfsm.fsm.FSM var50 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var36, var41, var47, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var41, var56, var63);
    boolean var66 = var29.retainAll((java.util.Collection)var63);
    java.lang.String var67 = var29.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var12, (java.util.Set)var29, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var70 = new dynoptic.model.fifosys.cfsm.CFSMState(var12);
    java.util.Set var71 = var70.getTransitioningEvents();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = var70.getFSMState(0);
    java.util.Set var74 = var70.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[]"+ "'", var67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test418() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test418"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.lang.String var4 = var1.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var16, var31, var38);
    var1.removeAllObs(var38);
    boolean var43 = var1.isInitForPid(100);
    java.util.Set var44 = var1.getObservedStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test419() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test419"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.util.Set var4 = var1.getTransitioningEvents();
    boolean var6 = var1.isInitForPid(0);
    java.lang.String var7 = var1.toIntermediateString();
    dynoptic.model.alphabet.FSMAlphabet var8 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    boolean var16 = var10.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    java.util.Set var24 = var18.getTerminalObs();
    var10.removeAllObs(var24);
    boolean var26 = var8.retainAll((java.util.Collection)var24);
    java.lang.Object[] var28 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var29 = var8.toArray(var28);
    var1.removeAllObs((java.util.Set)var8);
    dynoptic.model.export.DotExportFormatter var31 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var32 = var31.beginGraphString();
    java.lang.String var33 = var31.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    boolean var39 = var36.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var41 = new dynoptic.model.fifosys.gfsm.GFSMPath(var36, 10);
    java.lang.String var44 = var31.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var36, false, false);
    java.lang.String var45 = var31.endGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var69 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var73 = var71.getInitialObsForPid(100);
    var69.removeAllObs(var73);
    dynoptic.model.fifosys.gfsm.GFSMState var76 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var80 = var78.getInitialObsForPid(100);
    var76.removeAllObs(var80);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var58, var73, var80);
    dynoptic.model.fifosys.gfsm.GFSMPath var84 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var85 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var84);
    boolean var86 = var58.equals((java.lang.Object)var85);
    dynoptic.model.fifosys.cfsm.CFSMState var87 = new dynoptic.model.fifosys.cfsm.CFSMState(var58);
    boolean var88 = var87.isInitial();
    boolean var89 = var87.isInitial();
    boolean var90 = var87.isAccept();
    java.lang.String var93 = var31.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var87, false, true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var95 = var87.getFSMState(0);
    int var96 = var95.getPid();
    boolean var97 = var8.contains((java.lang.Object)var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Part-0-772163658"+ "'", var7.equals("Part-0-772163658"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "digraph {\n"+ "'", var32.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "} // digraph {\n"+ "'", var33.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var44.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "} // digraph {\n"+ "'", var45.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "  1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@30b32b75\",shape=circle,shape=doublecircle];\n"+ "'", var93.equals("  1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@30b32b75\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test420() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test420"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    int var26 = var11.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var53 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var39, var44, var50, 100);
    var28.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var56 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var5, var11, var50, 1);
    var56.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test421() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test421"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    java.lang.Object[] var2 = var0.toArray();
    boolean var3 = var0.isEmpty();
    var0.clear();
    var0.clear();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var17, var32, var39);
    dynoptic.model.fifosys.gfsm.GFSMPath var43 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var44 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var43);
    boolean var45 = var17.equals((java.lang.Object)var44);
    dynoptic.model.fifosys.cfsm.CFSMState var46 = new dynoptic.model.fifosys.cfsm.CFSMState(var17);
    boolean var47 = var46.isInitial();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = var46.getFSMState(0);
    java.util.Set var50 = var49.getNextStates();
    boolean var51 = var0.contains((java.lang.Object)var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test422() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test422"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, false, 0, (-1));
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.cfsm.fsm.FSM var47 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var33, var38, var44, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var53 = var51.getInitialObsForPid(100);
    var49.removeAllObs(var53);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    var56.removeAllObs(var60);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var38, var53, var60);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    java.util.Set var68 = var64.getInitialObsForPid(1);
    java.util.Set var69 = var64.getInitialObservations();
    dynoptic.model.fifosys.cfsm.fsm.FSM var71 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var17, var38, var69, 10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    java.util.Set var76 = var73.getTransitioningEvents();
    java.util.Set var77 = var73.getInitialObservations();
    java.util.Set var78 = var73.getNextStates();
    dynoptic.model.fifosys.cfsm.fsm.FSM var80 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var5, var38, var78, (-1));
    java.lang.String var81 = var38.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var81.equals("FSM_state: init[true], accept[false] id[0]"));

  }

  public void test423() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test423"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(0, true, false);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var4 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var3);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var3);
    java.lang.String var6 = var3.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "49"+ "'", var6.equals("49"));

  }

  public void test424() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test424"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 10, (-1));
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    boolean var34 = var28.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var40 = var38.getInitialObsForPid(100);
    var36.removeAllObs(var40);
    java.util.Set var42 = var36.getTerminalObs();
    var28.removeAllObs(var42);
    dynoptic.model.automaton.EventTypeEncodings var44 = new dynoptic.model.automaton.EventTypeEncodings(var42);
    dynoptic.model.fifosys.cfsm.fsm.FSM var46 = new dynoptic.model.fifosys.cfsm.fsm.FSM(0, var6, var17, var42, (-1));
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    java.util.Set var51 = var48.getTransitioningEvents();
    java.util.Set var53 = var48.getTerminalObsForPid(100);
    boolean var54 = var17.equals((java.lang.Object)var53);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10, var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test425() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test425"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    java.util.Set var8 = var2.getTransitioningEvents();
    boolean var10 = var2.isInitForPid(1);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    int var15 = var12.getNumProcesses();
    java.util.Set var17 = var12.getInitialObsForPid(10);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var28 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.fifosys.cfsm.fsm.FSM var37 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var23, var28, var34, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.fifosys.cfsm.fsm.FSM var57 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var43, var48, var54, 100);
    dynoptic.model.automaton.EventTypeEncodings var58 = var57.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var63 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var64 = var58.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var65 = var37.getEncodedAutomaton(var58);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var70 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    boolean var71 = var65.equals((java.lang.Object)1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var77 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var82 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var84 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var88 = var86.getInitialObsForPid(100);
    var84.removeAllObs(var88);
    dynoptic.model.fifosys.cfsm.fsm.FSM var91 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var77, var82, var88, 100);
    int var92 = var91.getPid();
    java.util.Set var93 = var91.getStates();
    boolean var94 = var65.equals((java.lang.Object)var91);
    dynoptic.model.alphabet.FSMAlphabet var95 = var91.getAlphabet();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(100, (dynoptic.model.AbsFSMState)var2, var17, (java.util.Set)var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test426() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test426"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    java.util.Set var17 = var1.getTransitioningEvents();
    java.util.Set var18 = var1.getNextStates();
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, (-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test427() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test427"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    java.lang.String var5 = var4.toShortIntString();
    java.util.Set var6 = var4.getNextStates();
    var4.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var8 = new dynoptic.model.fifosys.cfsm.CFSMState(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var10 = var8.isInitForPid(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "0"+ "'", var5.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test428() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test428"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var2 = var1.toIntermediateString();
    boolean var3 = var1.isAccept();
    java.util.Set var5 = var1.getInitialObsForPid(10);
    java.util.Set var7 = var1.getTerminalObsForPid(0);
    java.util.Set var9 = var1.getTerminalObsForPid((-1));
    java.util.Set var11 = var1.getInitialObsForPid(100);
    java.util.Set var12 = var1.getNextStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-377065868"+ "'", var2.equals("Part-0-377065868"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test429() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test429"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.lang.String var4 = var1.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var16, var31, var38);
    var1.removeAllObs(var38);
    java.lang.String var42 = var1.toLongString();
    var1.recreateCachedTransitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));

  }

  public void test430() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test430"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var45 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var50 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.cfsm.fsm.FSM var59 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var45, var50, var56, 100);
    dynoptic.model.automaton.EventTypeEncodings var60 = var59.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var65 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var66 = var60.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var67 = var39.getEncodedAutomaton(var60);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var78 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var82 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var84 = var82.getInitialObsForPid(100);
    var80.removeAllObs(var84);
    dynoptic.model.fifosys.cfsm.fsm.FSM var87 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var73, var78, var84, 100);
    dynoptic.model.automaton.EventTypeEncodings var88 = var87.getEventTypeEncodings();
    boolean var89 = var67.equals((java.lang.Object)var87);
    dynoptic.model.automaton.EncodedAutomaton var90 = new dynoptic.model.automaton.EncodedAutomaton(var17, var87);
    var87.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test431() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test431"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var3 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, (-1));
    java.util.Set var4 = var1.getObservedStates();
    int var5 = var1.getNumProcesses();
    java.lang.String var6 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));

  }

  public void test432() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test432"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    dynoptic.model.alphabet.FSMAlphabet var7 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    boolean var15 = var9.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var21 = var19.getInitialObsForPid(100);
    var17.removeAllObs(var21);
    java.util.Set var23 = var17.getTerminalObs();
    var9.removeAllObs(var23);
    boolean var25 = var7.retainAll((java.util.Collection)var23);
    java.lang.String var26 = var7.toString();
    var1.addAllObs((java.util.Set)var7);
    dynoptic.model.alphabet.FSMAlphabet var28 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var35 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var40 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var46 = var44.getInitialObsForPid(100);
    var42.removeAllObs(var46);
    dynoptic.model.fifosys.cfsm.fsm.FSM var49 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var35, var40, var46, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var40, var55, var62);
    boolean var65 = var28.retainAll((java.util.Collection)var62);
    int var66 = var28.size();
    boolean var67 = var7.retainAll((java.util.Collection)var28);
    boolean var68 = var28.isEmpty();
    dynoptic.model.alphabet.FSMAlphabet var69 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var70 = var69.toScmParametersString();
    var69.clear();
    boolean var72 = var28.removeAll((java.util.Collection)var69);
    int var73 = var28.size();
    java.lang.Object[] var74 = var28.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + ""+ "'", var70.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test433() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test433"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-1999720841");

  }

  public void test434() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test434"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    var5.setAccept();
    java.util.Set var21 = var5.getTransitioningEvents();
    java.lang.String var22 = var5.toString();
    boolean var23 = var5.isInitial();
    int var24 = var5.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "0"+ "'", var22.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);

  }

  public void test435() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test435"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    dynoptic.model.automaton.EventTypeEncodings var8 = new dynoptic.model.automaton.EventTypeEncodings(var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var10 = var8.getEventType('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test436() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test436"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    synoptic.model.event.Event var6 = var5.getNextEvent();
    java.lang.String var7 = var5.toString();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = var5.getNextState();
    synoptic.model.event.Event var9 = var5.getNextEvent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var7.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test437() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test437"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    dynoptic.model.alphabet.FSMAlphabet var7 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    boolean var15 = var9.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var21 = var19.getInitialObsForPid(100);
    var17.removeAllObs(var21);
    java.util.Set var23 = var17.getTerminalObs();
    var9.removeAllObs(var23);
    boolean var25 = var7.retainAll((java.util.Collection)var23);
    java.lang.String var26 = var7.toString();
    var1.addAllObs((java.util.Set)var7);
    dynoptic.model.alphabet.FSMAlphabet var28 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var35 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var40 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var46 = var44.getInitialObsForPid(100);
    var42.removeAllObs(var46);
    dynoptic.model.fifosys.cfsm.fsm.FSM var49 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var35, var40, var46, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var40, var55, var62);
    boolean var65 = var28.retainAll((java.util.Collection)var62);
    int var66 = var28.size();
    boolean var67 = var7.retainAll((java.util.Collection)var28);
    boolean var68 = var28.isEmpty();
    dynoptic.model.export.DotExportFormatter var69 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var70 = var69.beginGraphString();
    java.lang.String var71 = var69.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var74 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var76 = var74.getInitialObsForPid(100);
    java.lang.String var79 = var69.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var74, true, false);
    java.util.Set var80 = var74.getObservedStates();
    boolean var81 = var28.retainAll((java.util.Collection)var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "digraph {\n"+ "'", var70.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "digraph {\n"+ "'", var71.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var79.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test438() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test438"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 0);
    boolean var11 = var1.isAcceptForPid(10);
    int var12 = var1.getNumProcesses();
    java.util.Set var14 = var1.getTerminalObsForPid((-1));
    java.util.Set var16 = var1.getTerminalObsForPid(1);
    java.lang.String var17 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "[]"+ "'", var17.equals("[]"));

  }

  public void test439() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test439"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    dynoptic.model.alphabet.FSMAlphabet var2 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var9 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var20 = var18.getInitialObsForPid(100);
    var16.removeAllObs(var20);
    dynoptic.model.fifosys.cfsm.fsm.FSM var23 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var9, var14, var20, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var14, var29, var36);
    boolean var39 = var2.retainAll((java.util.Collection)var36);
    java.lang.Object[] var40 = var2.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var57 = var55.getInitialObsForPid(100);
    var53.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var60 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var46, var51, var57, 100);
    int var61 = var60.getPid();
    java.util.Set var62 = var60.getAcceptStates();
    boolean var63 = var2.retainAll((java.util.Collection)var62);
    boolean var64 = var2.isEmpty();
    var2.clear();
    boolean var66 = var0.containsAll((java.util.Collection)var2);
    java.util.Iterator var67 = var2.iterator();
    java.lang.String var68 = var2.anyEventScmQRe();
    java.util.Set var69 = var2.getLocalEventScmStrings();
    java.lang.String var70 = var2.anyEventScmQRe();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(_)"+ "'", var68.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(_)"+ "'", var70.equals("(_)"));

  }

  public void test440() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test440"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, false, 1, 1);

  }

  public void test441() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test441"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var16 = var13.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var17 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = var17.getObsState();
    boolean var19 = var17.isEnabled();
    var17.setOccurred(false);
    var8.addRemoteDependency(var17);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var23 = var17.getObsState();
    boolean var24 = var17.isInitState();
    boolean var25 = var17.hasOccurred();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test442() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test442"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    java.util.Iterator var39 = var0.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var42 = var41.toIntermediateString();
    boolean var43 = var41.isAccept();
    boolean var44 = var0.contains((java.lang.Object)var43);
    dynoptic.model.automaton.EventTypeEncodings var45 = new dynoptic.model.automaton.EventTypeEncodings((java.util.Set)var0);
    dynoptic.model.alphabet.FSMAlphabet var46 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var69 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var73 = var71.getInitialObsForPid(100);
    var69.removeAllObs(var73);
    dynoptic.model.fifosys.gfsm.GFSMState var76 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var80 = var78.getInitialObsForPid(100);
    var76.removeAllObs(var80);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var58, var73, var80);
    boolean var83 = var46.retainAll((java.util.Collection)var80);
    java.lang.String var84 = var46.toString();
    boolean var85 = var0.addAll((java.util.Collection)var46);
    java.lang.Object[] var86 = var46.toArray();
    java.lang.String var87 = var46.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Part-0-1635233699"+ "'", var42.equals("Part-0-1635233699"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "[]"+ "'", var84.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "[]"+ "'", var87.equals("[]"));

  }

  public void test443() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test443"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var9 = var8.lastState();
    int var10 = var8.numEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);

  }

  public void test444() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test444"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.util.Set var4 = var1.getTransitioningEvents();
    java.util.Set var6 = var1.getTerminalObsForPid(0);
    java.lang.String var7 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[]"+ "'", var7.equals("[]"));

  }

  public void test445() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test445"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var16 = var13.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var17 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = var17.getObsState();
    boolean var19 = var17.isEnabled();
    var17.setOccurred(false);
    var8.addRemoteDependency(var17);
    synoptic.model.event.Event var23 = var17.getNextEvent();
    boolean var24 = var17.isInitState();
    java.lang.String var25 = var17.toString();
    boolean var26 = var17.hasOccurred();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var25.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test446() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test446"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    var4.markTerm();
    boolean var6 = var4.isInitial();
    boolean var7 = var4.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    java.util.Set var10 = var9.getTerminalObs();
    dynoptic.model.alphabet.FSMAlphabet var11 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var12 = var11.toScmParametersString();
    dynoptic.model.alphabet.FSMAlphabet var13 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var20 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    dynoptic.model.fifosys.cfsm.fsm.FSM var34 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var20, var25, var31, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var40 = var38.getInitialObsForPid(100);
    var36.removeAllObs(var40);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var25, var40, var47);
    boolean var50 = var13.retainAll((java.util.Collection)var47);
    java.lang.Object[] var51 = var13.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var57 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var62 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var68 = var66.getInitialObsForPid(100);
    var64.removeAllObs(var68);
    dynoptic.model.fifosys.cfsm.fsm.FSM var71 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var57, var62, var68, 100);
    int var72 = var71.getPid();
    java.util.Set var73 = var71.getAcceptStates();
    boolean var74 = var13.retainAll((java.util.Collection)var73);
    boolean var75 = var13.isEmpty();
    var13.clear();
    boolean var77 = var11.containsAll((java.util.Collection)var13);
    var9.removeAllObs((java.util.Set)var11);
    boolean var79 = var4.equals((java.lang.Object)var9);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var84 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(0, "[]", true, true);
    java.lang.String var85 = var84.toString();
    dynoptic.model.fifosys.gfsm.GFSMState var87 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var89 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var91 = var89.getInitialObsForPid(100);
    var87.removeAllObs(var91);
    java.util.Set var93 = var87.getTerminalObs();
    java.util.Set var95 = var87.getInitialObsForPid(10);
    boolean var96 = var84.equals((java.lang.Object)var95);
    boolean var97 = var4.equals((java.lang.Object)var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "i_[]_t"+ "'", var85.equals("i_[]_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test447() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test447"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 0);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var9);
    boolean var11 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var9);
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var14 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13);
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var17 = var16.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, var16);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var21 = new dynoptic.model.fifosys.gfsm.GFSMPath(var20);
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(var16, var21);
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath(var9, var16);
    int var24 = var23.numEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);

  }

  public void test448() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test448"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var11);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, var15);
    boolean var17 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var19 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4);
    int var20 = var19.numStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);

  }

  public void test449() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test449"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    java.util.Set var22 = var14.getTerminalObsForPid(100);
    boolean var23 = var14.isInitial();
    java.util.Set var24 = var14.getTransitioningEvents();
    dynoptic.model.automaton.EventTypeEncodings var25 = new dynoptic.model.automaton.EventTypeEncodings(var24);
    dynoptic.model.automaton.EventTypeEncodings var26 = new dynoptic.model.automaton.EventTypeEncodings(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-965715664"+ "'", var15.equals("Part-0-965715664"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test450() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test450"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var37 = var35.getInitialObsForPid(100);
    var33.removeAllObs(var37);
    dynoptic.model.fifosys.cfsm.fsm.FSM var40 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var26, var31, var37, 100);
    int var41 = var40.getPid();
    java.util.Set var42 = var40.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSM var62 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var48, var53, var59, 100);
    int var63 = var48.getPid();
    int var64 = var48.getScmId();
    int var65 = var48.getPid();
    boolean var66 = var40.equals((java.lang.Object)var65);
    java.lang.String var67 = var40.toString();
    java.util.Set var68 = var40.getStates();
    dynoptic.model.automaton.EncodedAutomaton var69 = new dynoptic.model.automaton.EncodedAutomaton(var20, var40);
    java.lang.String var70 = var40.toString();
    boolean var72 = var40.equals((java.lang.Object)"Part-0-1511197131");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var67.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var70.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test451() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test451"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    boolean var28 = var22.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    java.util.Set var36 = var30.getTerminalObs();
    var22.removeAllObs(var36);
    java.lang.String var38 = var22.toLongString();
    java.lang.String var41 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString((-1), (dynoptic.model.AbsFSMState)var22, false, true);
    java.lang.String var42 = var0.beginGraphString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-197707987"+ "'", var14.equals("Part-0-197707987"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[]"+ "'", var38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "  -1 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var41.equals("  -1 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "digraph {\n"+ "'", var42.equals("digraph {\n"));

  }

  public void test452() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test452"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.cfsm.fsm.FSM var47 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var33, var38, var44, 100);
    var22.removeAllObs(var44);
    java.util.Set var50 = var22.getInitialObsForPid((-1));
    var14.removeAllObs(var50);
    java.util.Set var53 = var14.getInitialObsForPid(0);
    java.util.Set var54 = var14.getObservedStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-2133859372"+ "'", var15.equals("Part-0-2133859372"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test453() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test453"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    java.lang.String var36 = var11.toLongString();
    var11.setAccept();
    java.lang.String var38 = var11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var36.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "0"+ "'", var38.equals("0"));

  }

  public void test454() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test454"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath(var21, (-1));
    boolean var24 = var17.equals((java.lang.Object)var21);
    java.util.Set var25 = var21.getTerminalObs();
    java.util.Set var26 = var21.getTransitioningEvents();
    java.util.Set var28 = var21.getInitialObsForPid(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test455() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test455"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var6 = var5.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    int var27 = var12.getPid();
    int var28 = var12.getScmId();
    dynoptic.model.alphabet.FSMAlphabet var29 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var41 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.cfsm.fsm.FSM var50 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var36, var41, var47, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var41, var56, var63);
    boolean var66 = var29.retainAll((java.util.Collection)var63);
    java.lang.String var67 = var29.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var12, (java.util.Set)var29, 1);
    java.util.Iterator var70 = var29.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[]"+ "'", var67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test456() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test456"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var4 = var2.getInitialObsForPid(100);
    java.util.Set var5 = var2.getTransitioningEvents();
    java.util.Set var6 = var2.getInitialObservations();
    java.util.Set var7 = var2.getNextStates();
    dynoptic.model.alphabet.FSMAlphabet var8 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var15 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var20 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.cfsm.fsm.FSM var29 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var15, var20, var26, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var20, var35, var42);
    boolean var45 = var8.retainAll((java.util.Collection)var42);
    java.lang.Object[] var46 = var8.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var52 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var57 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.fifosys.cfsm.fsm.FSM var66 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var52, var57, var63, 100);
    int var67 = var66.getPid();
    java.util.Set var68 = var66.getAcceptStates();
    boolean var69 = var8.retainAll((java.util.Collection)var68);
    boolean var70 = var8.isEmpty();
    var8.clear();
    var8.clear();
    dynoptic.model.alphabet.FSMAlphabet var73 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var79 = var77.getInitialObsForPid(100);
    var75.removeAllObs(var79);
    boolean var81 = var75.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var83 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var85 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var87 = var85.getInitialObsForPid(100);
    var83.removeAllObs(var87);
    java.util.Set var89 = var83.getTerminalObs();
    var75.removeAllObs(var89);
    boolean var91 = var73.retainAll((java.util.Collection)var89);
    dynoptic.model.fifosys.cfsm.fsm.FSM var93 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, (java.util.Set)var8, (java.util.Collection)var73, 100);
    java.util.Set var94 = var73.getLocalEventScmStrings();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test457() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test457"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.cfsm.fsm.FSMState var42 = var40.getFSMState(10);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test458() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test458"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var4 = var2.getInitialObsForPid(100);
    java.util.Set var5 = var2.getTransitioningEvents();
    java.util.Set var6 = var2.getInitialObservations();
    java.util.Set var7 = var2.getNextStates();
    dynoptic.model.alphabet.FSMAlphabet var8 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var15 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var20 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.cfsm.fsm.FSM var29 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var15, var20, var26, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var20, var35, var42);
    boolean var45 = var8.retainAll((java.util.Collection)var42);
    java.lang.Object[] var46 = var8.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var52 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var57 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.fifosys.cfsm.fsm.FSM var66 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var52, var57, var63, 100);
    int var67 = var66.getPid();
    java.util.Set var68 = var66.getAcceptStates();
    boolean var69 = var8.retainAll((java.util.Collection)var68);
    boolean var70 = var8.isEmpty();
    var8.clear();
    var8.clear();
    dynoptic.model.alphabet.FSMAlphabet var73 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var79 = var77.getInitialObsForPid(100);
    var75.removeAllObs(var79);
    boolean var81 = var75.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var83 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var85 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var87 = var85.getInitialObsForPid(100);
    var83.removeAllObs(var87);
    java.util.Set var89 = var83.getTerminalObs();
    var75.removeAllObs(var89);
    boolean var91 = var73.retainAll((java.util.Collection)var89);
    dynoptic.model.fifosys.cfsm.fsm.FSM var93 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, (java.util.Set)var8, (java.util.Collection)var73, 100);
    java.lang.String var94 = var93.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: []\n\taccepts: []"+ "'", var94.equals("FSM[pid=-1]\n\tstates: []\n\tinits: []\n\taccepts: []"));

  }

  public void test459() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test459"); }


    dynoptic.model.alphabet.FSMAlphabet var1 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var2 = var1.toScmParametersString();
    var1.clear();
    java.lang.String var4 = var1.toString();
    boolean var5 = var1.isEmpty();
    dynoptic.model.fifosys.gfsm.GFSMState var6 = new dynoptic.model.fifosys.gfsm.GFSMState(1, (java.util.Set)var1);
    java.lang.String var7 = var6.toString();
    boolean var9 = var6.isAcceptForPid(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[]"+ "'", var7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test460() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test460"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-1191270869");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-1191270869"+ "'", var2.equals("Part-0-1191270869"));

  }

  public void test461() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test461"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    java.util.Set var41 = var40.getNextStates();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var43 = var40.isInitForPid(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test462() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test462"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    java.util.Iterator var39 = var0.iterator();
    boolean var40 = var0.isEmpty();
    java.lang.String var41 = var0.toScmParametersString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + ""+ "'", var41.equals(""));

  }

  public void test463() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test463"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var2 = var1.toIntermediateString();
    boolean var3 = var1.isAccept();
    java.util.Set var5 = var1.getInitialObsForPid(10);
    java.util.Set var7 = var1.getTerminalObsForPid(0);
    boolean var9 = var1.isAcceptForPid(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-376087809"+ "'", var2.equals("Part-0-376087809"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test464() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test464"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(1, "ObsDAGNode[i_hi!_t]", false, false);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    boolean var6 = var5.isEnabled();
    boolean var7 = var5.isInitState();
    boolean var8 = var5.hasOccurred();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var9 = var5.getPrevState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test465() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test465"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    int var7 = var5.getPid();
    int var8 = var5.getPid();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var14 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var15 = var14.getNextState();
    var5.addRemoteDependency(var14);
    var14.setOccurred(true);
    var14.setOccurred(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test466() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test466"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    synoptic.model.event.Event var6 = var5.getNextEvent();
    java.lang.String var7 = var5.toString();
    java.lang.String var8 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var7.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var8.equals("ObsDAGNode[i_hi!_t]"));

  }

  public void test467() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test467"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var8 = var1.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    boolean var10 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var9);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath(var9);
    boolean var12 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test468() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test468"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var11);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, var15);
    boolean var17 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var21 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var20);
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15, var20);
    int var23 = var15.numEvents();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var24 = var15.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);

  }

  public void test469() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test469"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.automaton.EventTypeEncodings var68 = var67.getEventTypeEncodings();
    boolean var69 = var47.equals((java.lang.Object)var67);
    java.util.Set var70 = var67.getStates();
    java.util.Set var71 = var67.getAcceptStates();
    java.lang.String var72 = var67.toString();
    dynoptic.model.alphabet.FSMAlphabet var73 = var67.getAlphabet();
    java.util.Set var74 = var73.getLocalEventScmStrings();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var72.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test470() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test470"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.util.Iterator var38 = var0.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var41 = var40.toIntermediateString();
    boolean var42 = var40.isAccept();
    java.util.Set var44 = var40.getInitialObsForPid(10);
    boolean var45 = var0.addAll((java.util.Collection)var44);
    java.util.Set var46 = var0.getLocalEventScmStrings();
    java.util.Set var47 = var0.getLocalEventScmStrings();
    boolean var49 = var0.remove((java.lang.Object)"Part-0-225226740");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "Part-0-2065560922"+ "'", var41.equals("Part-0-2065560922"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test471() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test471"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.automaton.EventTypeEncodings var68 = var67.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var69 = new dynoptic.model.automaton.EncodedAutomaton(var40, var67);
    java.util.Set var70 = var67.getAcceptStates();
    java.util.Set var71 = var67.getInitStates();
    java.util.Set var72 = var67.getStates();
    int var73 = var67.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == (-1));

  }

  public void test472() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test472"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var37 = var35.getInitialObsForPid(100);
    var33.removeAllObs(var37);
    dynoptic.model.fifosys.cfsm.fsm.FSM var40 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var26, var31, var37, 100);
    int var41 = var40.getPid();
    java.util.Set var42 = var40.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSM var62 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var48, var53, var59, 100);
    int var63 = var48.getPid();
    int var64 = var48.getScmId();
    int var65 = var48.getPid();
    boolean var66 = var40.equals((java.lang.Object)var65);
    java.lang.String var67 = var40.toString();
    java.util.Set var68 = var40.getStates();
    dynoptic.model.automaton.EncodedAutomaton var69 = new dynoptic.model.automaton.EncodedAutomaton(var20, var40);
    var69.minimize();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var74 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(100, true, false);
    var74.markTerm();
    boolean var76 = var69.equals((java.lang.Object)var74);
    var69.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var67.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test473() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test473"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 10, (-1));
    java.lang.String var5 = var4.toShortIntString();
    dynoptic.model.fifosys.cfsm.CFSMState var6 = new dynoptic.model.fifosys.cfsm.CFSMState(var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var11);
    dynoptic.model.fifosys.gfsm.GFSMPath var14 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    int var16 = var8.numEvents();
    boolean var17 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    int var19 = var18.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath(var21, 0);
    dynoptic.model.fifosys.gfsm.GFSMPath var24 = new dynoptic.model.fifosys.gfsm.GFSMPath(var18, var23);
    boolean var25 = var4.equals((java.lang.Object)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "-1"+ "'", var5.equals("-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test474() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test474"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", false, false);
    boolean var5 = var4.isTerminal();
    dynoptic.model.alphabet.FSMAlphabet var6 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var13 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var24 = var22.getInitialObsForPid(100);
    var20.removeAllObs(var24);
    dynoptic.model.fifosys.cfsm.fsm.FSM var27 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var13, var18, var24, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var40 = var38.getInitialObsForPid(100);
    var36.removeAllObs(var40);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var18, var33, var40);
    boolean var43 = var6.retainAll((java.util.Collection)var40);
    java.lang.Object[] var44 = var6.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var50 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var61 = var59.getInitialObsForPid(100);
    var57.removeAllObs(var61);
    dynoptic.model.fifosys.cfsm.fsm.FSM var64 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var50, var55, var61, 100);
    int var65 = var64.getPid();
    java.util.Set var66 = var64.getAcceptStates();
    boolean var67 = var6.retainAll((java.util.Collection)var66);
    boolean var68 = var4.equals((java.lang.Object)var66);
    java.lang.String var69 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "hi!"+ "'", var69.equals("hi!"));

  }

  public void test475() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test475"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    java.lang.String var36 = var11.toLongString();
    java.lang.String var37 = var11.toLongString();
    int var38 = var11.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    boolean var43 = var40.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var45 = new dynoptic.model.fifosys.gfsm.GFSMPath(var40, 10);
    boolean var46 = var11.equals((java.lang.Object)var40);
    java.lang.String var47 = var40.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var36.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var37.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "[]"+ "'", var47.equals("[]"));

  }

  public void test476() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test476"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    java.lang.String var37 = var12.toLongString();
    java.lang.String var38 = var12.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var44.getPid();
    int var60 = var44.getScmId();
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var64 = var62.getTerminalObsForPid(1);
    dynoptic.model.fifosys.cfsm.fsm.FSM var66 = new dynoptic.model.fifosys.cfsm.fsm.FSM(0, var12, var44, var64, 10);
    java.lang.String var67 = var12.toShortIntString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var37.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var38.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "0"+ "'", var67.equals("0"));

  }

  public void test477() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test477"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    java.lang.String var13 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var5, false, false);
    java.lang.String var14 = var0.endGraphString();
    java.lang.String var15 = var0.endGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var22 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var28 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.fifosys.cfsm.fsm.FSM var42 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var28, var33, var39, 100);
    int var43 = var28.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    var45.removeAllObs(var49);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var56 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var61 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var63 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var65 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var67 = var65.getInitialObsForPid(100);
    var63.removeAllObs(var67);
    dynoptic.model.fifosys.cfsm.fsm.FSM var70 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var56, var61, var67, 100);
    var45.removeAllObs(var67);
    dynoptic.model.fifosys.cfsm.fsm.FSM var73 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var22, var28, var67, 1);
    java.lang.String var74 = var28.toShortIntString();
    java.lang.String var77 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var28, true, true);
    java.lang.String var78 = var0.beginGraphString();
    java.lang.String var79 = var0.endGraphString();
    java.lang.String var80 = var0.endGraphString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var13.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "} // digraph {\n"+ "'", var14.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "} // digraph {\n"+ "'", var15.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "0"+ "'", var74.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "  100 [label=\"0\",shape=circle,shape=doublecircle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->100;\n"+ "'", var77.equals("  100 [label=\"0\",shape=circle,shape=doublecircle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "digraph {\n"+ "'", var78.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "} // digraph {\n"+ "'", var79.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "} // digraph {\n"+ "'", var80.equals("} // digraph {\n"));

  }

  public void test478() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test478"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-468183704");

  }

  public void test479() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test479"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    java.util.Set var5 = var4.getTransitioningEvents();
    boolean var7 = var4.equals((java.lang.Object)"Part-0-1581004683");
    boolean var8 = var4.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test480() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test480"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-339793194");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-339793194"+ "'", var2.equals("Part-0-339793194"));

  }

  public void test481() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test481"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    java.util.Set var22 = var14.getTerminalObsForPid(100);
    java.lang.String var23 = var14.toLongString();
    java.util.Set var24 = var14.getInitialObservations();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var31 = var30.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var42 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var48 = var46.getInitialObsForPid(100);
    var44.removeAllObs(var48);
    dynoptic.model.fifosys.cfsm.fsm.FSM var51 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var37, var42, var48, 100);
    int var52 = var37.getPid();
    int var53 = var37.getScmId();
    dynoptic.model.alphabet.FSMAlphabet var54 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var61 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var66 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var70 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var72 = var70.getInitialObsForPid(100);
    var68.removeAllObs(var72);
    dynoptic.model.fifosys.cfsm.fsm.FSM var75 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var61, var66, var72, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var79 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var81 = var79.getInitialObsForPid(100);
    var77.removeAllObs(var81);
    dynoptic.model.fifosys.gfsm.GFSMState var84 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var88 = var86.getInitialObsForPid(100);
    var84.removeAllObs(var88);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var66, var81, var88);
    boolean var91 = var54.retainAll((java.util.Collection)var88);
    java.lang.String var92 = var54.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var94 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var30, var37, (java.util.Set)var54, 1);
    var14.removeAllObs((java.util.Set)var54);
    java.util.Set var96 = var14.getObservedStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-472056361"+ "'", var15.equals("Part-0-472056361"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "[]"+ "'", var92.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test482() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test482"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    java.util.Set var7 = var1.getInitialObservations();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var13 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var24 = var22.getInitialObsForPid(100);
    var20.removeAllObs(var24);
    dynoptic.model.fifosys.cfsm.fsm.FSM var27 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var13, var18, var24, 100);
    java.util.Set var28 = var27.getAcceptStates();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.removeAllObs(var28);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test483() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test483"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var4 = var2.getInitialObsForPid(100);
    java.lang.String var5 = var2.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var7 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var11 = var9.getInitialObsForPid(100);
    var7.removeAllObs(var11);
    dynoptic.model.alphabet.FSMAlphabet var13 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var19 = var17.getInitialObsForPid(100);
    var15.removeAllObs(var19);
    boolean var21 = var15.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    java.util.Set var29 = var23.getTerminalObs();
    var15.removeAllObs(var29);
    boolean var31 = var13.retainAll((java.util.Collection)var29);
    java.lang.Object[] var33 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var34 = var13.toArray(var33);
    java.lang.Object[] var35 = var13.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var2, var11, (java.util.Set)var13);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    boolean var44 = var38.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    java.util.Set var52 = var46.getTerminalObs();
    var38.removeAllObs(var52);
    dynoptic.model.automaton.EventTypeEncodings var54 = new dynoptic.model.automaton.EventTypeEncodings(var52);
    boolean var55 = var13.addAll((java.util.Collection)var52);
    boolean var56 = var13.isEmpty();
    java.lang.Object[] var57 = var13.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test484() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test484"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var58.getPid();
    java.util.Set var60 = var58.getAcceptStates();
    boolean var61 = var0.retainAll((java.util.Collection)var60);
    boolean var62 = var0.isEmpty();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var68 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var79 = var77.getInitialObsForPid(100);
    var75.removeAllObs(var79);
    dynoptic.model.fifosys.cfsm.fsm.FSM var82 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var68, var73, var79, 100);
    boolean var83 = var0.remove((java.lang.Object)var73);
    java.lang.String var84 = var0.anyEventScmQRe();
    boolean var85 = var0.isEmpty();
    java.util.Set var86 = var0.getLocalEventScmStrings();
    boolean var88 = var0.remove((java.lang.Object)"hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "(_)"+ "'", var84.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test485() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test485"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.util.Set var4 = var1.getTransitioningEvents();
    java.util.Set var5 = var1.getInitialObservations();
    java.util.Set var6 = var1.getNextStates();
    java.util.Set var7 = var1.getInitialObservations();
    java.util.Set var8 = var1.getTerminalObs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test486() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test486"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var8 = var1.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    boolean var10 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var9);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var12 = var11.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test487() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test487"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var4 = var2.getInitialObsForPid(100);
    java.lang.String var5 = var2.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var7 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var11 = var9.getInitialObsForPid(100);
    var7.removeAllObs(var11);
    dynoptic.model.alphabet.FSMAlphabet var13 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var19 = var17.getInitialObsForPid(100);
    var15.removeAllObs(var19);
    boolean var21 = var15.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    java.util.Set var29 = var23.getTerminalObs();
    var15.removeAllObs(var29);
    boolean var31 = var13.retainAll((java.util.Collection)var29);
    java.lang.Object[] var33 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var34 = var13.toArray(var33);
    java.lang.Object[] var35 = var13.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var2, var11, (java.util.Set)var13);
    java.lang.String var37 = var2.toLongString();
    boolean var39 = var2.isInitForPid(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[]"+ "'", var37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test488() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test488"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    dynoptic.model.alphabet.FSMAlphabet var7 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    boolean var15 = var9.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var21 = var19.getInitialObsForPid(100);
    var17.removeAllObs(var21);
    java.util.Set var23 = var17.getTerminalObs();
    var9.removeAllObs(var23);
    boolean var25 = var7.retainAll((java.util.Collection)var23);
    java.lang.String var26 = var7.toString();
    var1.addAllObs((java.util.Set)var7);
    dynoptic.model.alphabet.FSMAlphabet var28 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var29 = var28.toScmParametersString();
    java.lang.Object[] var30 = var28.toArray();
    boolean var31 = var28.isEmpty();
    var28.clear();
    dynoptic.model.alphabet.FSMAlphabet var33 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var40 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var45 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var51 = var49.getInitialObsForPid(100);
    var47.removeAllObs(var51);
    dynoptic.model.fifosys.cfsm.fsm.FSM var54 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var40, var45, var51, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    var56.removeAllObs(var60);
    dynoptic.model.fifosys.gfsm.GFSMState var63 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var65 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var67 = var65.getInitialObsForPid(100);
    var63.removeAllObs(var67);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var45, var60, var67);
    boolean var70 = var33.retainAll((java.util.Collection)var67);
    java.lang.Object[] var71 = var33.toArray();
    boolean var72 = var28.remove((java.lang.Object)var33);
    java.util.Set var73 = var33.getLocalEventScmStrings();
    boolean var74 = var7.removeAll((java.util.Collection)var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + ""+ "'", var29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test489() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test489"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getStates();
    java.lang.String var22 = var19.toString();
    int var23 = var19.getPid();
    java.lang.String var24 = var19.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var35 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    dynoptic.model.fifosys.cfsm.fsm.FSM var44 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var30, var35, var41, 100);
    dynoptic.model.automaton.EventTypeEncodings var45 = var44.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var56 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    dynoptic.model.fifosys.cfsm.fsm.FSM var65 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var51, var56, var62, 100);
    int var66 = var65.getPid();
    java.util.Set var67 = var65.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var78 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var82 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var84 = var82.getInitialObsForPid(100);
    var80.removeAllObs(var84);
    dynoptic.model.fifosys.cfsm.fsm.FSM var87 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var73, var78, var84, 100);
    int var88 = var73.getPid();
    int var89 = var73.getScmId();
    int var90 = var73.getPid();
    boolean var91 = var65.equals((java.lang.Object)var90);
    java.lang.String var92 = var65.toString();
    java.util.Set var93 = var65.getStates();
    dynoptic.model.automaton.EncodedAutomaton var94 = new dynoptic.model.automaton.EncodedAutomaton(var45, var65);
    dynoptic.model.automaton.EncodedAutomaton var95 = var19.getEncodedAutomaton(var45);
    var95.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var22.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var24.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var92.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test490() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test490"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTransitioningEvents();
    boolean var16 = var4.equals((java.lang.Object)var15);
    int var17 = var4.getPid();
    int var18 = var4.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));

  }

  public void test491() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test491"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    java.lang.String var7 = var4.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    dynoptic.model.alphabet.FSMAlphabet var15 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var21 = var19.getInitialObsForPid(100);
    var17.removeAllObs(var21);
    boolean var23 = var17.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    java.util.Set var31 = var25.getTerminalObs();
    var17.removeAllObs(var31);
    boolean var33 = var15.retainAll((java.util.Collection)var31);
    java.lang.Object[] var35 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var36 = var15.toArray(var35);
    java.lang.Object[] var37 = var15.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var4, var13, (java.util.Set)var15);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    boolean var46 = var40.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var52 = var50.getInitialObsForPid(100);
    var48.removeAllObs(var52);
    java.util.Set var54 = var48.getTerminalObs();
    var40.removeAllObs(var54);
    dynoptic.model.automaton.EventTypeEncodings var56 = new dynoptic.model.automaton.EventTypeEncodings(var54);
    boolean var57 = var15.addAll((java.util.Collection)var54);
    var1.removeAllObs((java.util.Set)var15);
    java.lang.String var59 = var15.anyEventScmQRe();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[]"+ "'", var7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "(_)"+ "'", var59.equals("(_)"));

  }

  public void test492() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test492"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    var5.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var21 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    java.util.Set var22 = var21.getTransitioningEvents();
    boolean var23 = var21.isInitial();
    java.util.Set var24 = var21.getTransitioningEvents();
    java.util.Set var25 = var21.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test493() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test493"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    var0.clear();
    java.lang.String var3 = var0.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var8 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var11 = var8.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var12 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var8);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var17 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var19 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var20 = var17.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var21 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var17);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var22 = var21.getObsState();
    boolean var23 = var21.isEnabled();
    var21.setOccurred(false);
    var12.addRemoteDependency(var21);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var27 = var21.getObsState();
    boolean var28 = var0.remove((java.lang.Object)var27);
    var27.markTerm();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test494() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test494"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("Part-0-697518195");

  }

  public void test495() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test495"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var58.getPid();
    java.util.Set var60 = var58.getAcceptStates();
    boolean var61 = var0.retainAll((java.util.Collection)var60);
    boolean var62 = var0.isEmpty();
    java.lang.String var63 = var0.anyEventScmQRe();
    boolean var64 = var0.isEmpty();
    dynoptic.model.automaton.EventTypeEncodings var65 = new dynoptic.model.automaton.EventTypeEncodings((java.util.Set)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(_)"+ "'", var63.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);

  }

  public void test496() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test496"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var58.getPid();
    java.util.Set var60 = var58.getAcceptStates();
    boolean var61 = var0.retainAll((java.util.Collection)var60);
    boolean var62 = var0.isEmpty();
    java.lang.String var63 = var0.anyEventScmQRe();
    boolean var64 = var0.isEmpty();
    java.util.Set var65 = var0.getLocalEventScmStrings();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(_)"+ "'", var63.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test497() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test497"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var9 = var1.numEvents();
    boolean var10 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var12 = var11.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test498() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test498"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var8 = var1.numStates();
    boolean var9 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    int var10 = var1.numEvents();
    int var11 = var1.numStates();
    boolean var12 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test499() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test499"); }


    dynoptic.model.alphabet.FSMAlphabet var1 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var8 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var13 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var19 = var17.getInitialObsForPid(100);
    var15.removeAllObs(var19);
    dynoptic.model.fifosys.cfsm.fsm.FSM var22 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var8, var13, var19, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var28 = var26.getInitialObsForPid(100);
    var24.removeAllObs(var28);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var13, var28, var35);
    boolean var38 = var1.retainAll((java.util.Collection)var35);
    java.lang.Object[] var39 = var1.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var45 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var50 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.cfsm.fsm.FSM var59 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var45, var50, var56, 100);
    int var60 = var59.getPid();
    java.util.Set var61 = var59.getAcceptStates();
    boolean var62 = var1.retainAll((java.util.Collection)var61);
    boolean var63 = var1.isEmpty();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var69 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var74 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var76 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var80 = var78.getInitialObsForPid(100);
    var76.removeAllObs(var80);
    dynoptic.model.fifosys.cfsm.fsm.FSM var83 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var69, var74, var80, 100);
    boolean var84 = var1.remove((java.lang.Object)var74);
    java.lang.String var85 = var1.anyEventScmQRe();
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState((-1), (java.util.Set)var1);
    boolean var88 = var86.isAcceptForPid(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "(_)"+ "'", var85.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test500() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest0.test500"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var8 = var7.numEvents();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var9 = var7.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

public List<Test> getTests() {
	// TODO Auto-generated method stub
	return null;
}

public void run(TestResult arg0, List<String> arg1) {
	// TODO Auto-generated method stub
	
}

}
