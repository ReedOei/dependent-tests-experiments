package randoop.synoptic;

import java.util.List;

import junit.framework.*;

public class RandoopTest3 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test1"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    int var7 = var5.getPid();
    int var8 = var5.getPid();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var14 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var15 = var14.getNextState();
    var5.addRemoteDependency(var14);
    var5.setOccurred(true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var19 = var5.getPrevState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test2() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test2"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var14 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    java.lang.String var15 = var14.toString();
    boolean var16 = var14.hasOccurred();
    int var17 = var14.getPid();
    boolean var18 = var14.isInitState();
    var8.addRemoteDependency(var14);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var26 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var27 = var24.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var28 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var24);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var33 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var35 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var36 = var33.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var37 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var33);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var38 = var37.getObsState();
    boolean var39 = var37.isEnabled();
    var37.setOccurred(false);
    var28.addRemoteDependency(var37);
    synoptic.model.event.Event var43 = var37.getNextEvent();
    synoptic.model.event.Event var44 = var37.getNextEvent();
    var8.addRemoteDependency(var37);
    synoptic.model.event.Event var46 = var8.getNextEvent();
    int var47 = var8.getPid();
    boolean var48 = var8.isEnabled();
    boolean var49 = var8.hasOccurred();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var15.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test3"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    boolean var7 = var5.hasOccurred();
    boolean var8 = var5.isInitState();
    boolean var9 = var5.hasOccurred();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var10 = var5.getPrevState();
    synoptic.model.event.Event var11 = var5.getNextEvent();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var12 = var5.getObsState();
    java.lang.String var13 = var5.toString();
    boolean var14 = var5.hasOccurred();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var13.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test4() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test4"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(1);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var2 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var1);
    boolean var3 = var2.isInitState();
    boolean var4 = var2.hasOccurred();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test5() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test5"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("Part-0-1946510873");

  }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test6"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(1, "ObsDAGNode[i_hi!_t]", false, false);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    var4.markTerm();
    boolean var7 = var4.isInitial();
    boolean var8 = var4.isTerminal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test7() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test7"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var45 = var42.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var46 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var51 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var52 = var51.getName();
    boolean var53 = var42.equals((java.lang.Object)var51);
    boolean var54 = var0.contains((java.lang.Object)var42);
    java.lang.Object[] var55 = var0.toArray();
    java.lang.Object[] var56 = var0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var52.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test8"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    java.util.Set var27 = var23.getInitialObsForPid(1);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState((-1), var27);
    java.lang.String var31 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var28, true, false);
    java.lang.String var32 = var0.beginGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var53 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var39, var44, var50, 100);
    int var54 = var39.getPid();
    int var55 = var39.getScmId();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var60 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var62 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var63 = var60.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var64 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var60);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var65 = var64.getObsState();
    int var66 = var64.getPid();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var71 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var73 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var74 = var71.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var75 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var71);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var76 = var75.getObsState();
    java.lang.String var77 = var75.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var78 = var75.getObsState();
    boolean var79 = var75.isTermState();
    boolean var80 = var75.isTermState();
    boolean var81 = var75.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var82 = var75.getObsState();
    var64.addRemoteDependency(var75);
    java.lang.String var84 = var75.toString();
    boolean var85 = var39.equals((java.lang.Object)var84);
    boolean var86 = var39.isInitial();
    java.lang.String var89 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var39, true, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-1884881725"+ "'", var14.equals("Part-0-1884881725"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "  1 [label=\"[]\",shape=circle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->1;\n"+ "'", var31.equals("  1 [label=\"[]\",shape=circle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->1;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "digraph {\n"+ "'", var32.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var77.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var84.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "  1 [label=\"0\",shape=circle];\n  start_3 [label=\"start\",shape=plaintext];\n  start_3->1;\n"+ "'", var89.equals("  1 [label=\"0\",shape=circle];\n  start_3 [label=\"start\",shape=plaintext];\n  start_3->1;\n"));

  }

  public void test9() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test9"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var5 = var4.isAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var6 = new dynoptic.model.fifosys.cfsm.CFSMState(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test10"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var2 = var1.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 1);
    dynoptic.model.fifosys.gfsm.GFSMPath var5 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4);
    int var6 = var5.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var11);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, var15);
    boolean var17 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, var15);
    int var19 = var15.numStates();
    dynoptic.model.fifosys.gfsm.GFSMPath var21 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(var21);
    dynoptic.model.fifosys.gfsm.GFSMPath var24 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var25 = var24.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var26 = new dynoptic.model.fifosys.gfsm.GFSMPath(var21, var24);
    dynoptic.model.fifosys.gfsm.GFSMPath var27 = new dynoptic.model.fifosys.gfsm.GFSMPath(var21);
    int var28 = var21.numStates();
    boolean var29 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var21);
    int var30 = var21.numEvents();
    int var31 = var21.numStates();
    dynoptic.model.fifosys.gfsm.GFSMPath var32 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15, var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-1300058510"+ "'", var2.equals("Part-0-1300058510"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);

  }

  public void test11() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test11"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var11);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, var15);
    boolean var17 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var21 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var20);
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15, var20);
    boolean var23 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var22);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    java.util.Set var31 = var25.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var33 = new dynoptic.model.fifosys.gfsm.GFSMPath(var25, 0);
    dynoptic.model.fifosys.gfsm.GFSMPath var34 = new dynoptic.model.fifosys.gfsm.GFSMPath(var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var35 = new dynoptic.model.fifosys.gfsm.GFSMPath(var22, var34);
    dynoptic.model.fifosys.gfsm.GFSMPath var36 = new dynoptic.model.fifosys.gfsm.GFSMPath(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test12() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test12"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (-1), 1);
    java.lang.String var5 = var4.toShortIntString();
    int var6 = var4.getPid();
    java.lang.String var7 = var4.toShortIntString();
    java.util.Set var8 = var4.getTransitioningEvents();
    int var9 = var4.getScmId();
    java.lang.String var10 = var4.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "1"+ "'", var5.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "1"+ "'", var7.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "FSM_state: init[true], accept[true] id[1]"+ "'", var10.equals("FSM_state: init[true], accept[true] id[1]"));

  }

  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test13"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.lang.String var4 = var1.toLongString();
    int var5 = var1.getNumProcesses();
    java.util.Set var6 = var1.getInitialObservations();
    boolean var7 = var1.isInitial();
    java.lang.String var8 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));

  }

  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test14"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, false, (-1), 100);
    int var5 = var4.getPid();
    int var6 = var4.getScmId();
    java.lang.String var7 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "100"+ "'", var7.equals("100"));

  }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test15"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var2 = var1.toIntermediateString();
    boolean var3 = var1.isAccept();
    java.util.Set var4 = var1.getTerminalObs();
    int var5 = var1.getNumProcesses();
    java.lang.String var6 = var1.toIntermediateString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-182737225"+ "'", var2.equals("Part-0-182737225"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Part-0-182737225"+ "'", var6.equals("Part-0-182737225"));

  }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test16"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var25 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var26 = var20.equals((java.lang.Object)true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    dynoptic.model.fifosys.cfsm.fsm.FSM var46 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var32, var37, var43, 100);
    int var47 = var32.getPid();
    java.lang.String var48 = var32.toLongString();
    boolean var49 = var20.equals((java.lang.Object)var48);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    java.util.Set var70 = var69.getAcceptStates();
    dynoptic.model.fifosys.gfsm.GFSMState var72 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var74 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var76 = var74.getInitialObsForPid(100);
    var72.removeAllObs(var76);
    boolean var78 = var72.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var82 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var84 = var82.getInitialObsForPid(100);
    var80.removeAllObs(var84);
    java.util.Set var86 = var80.getTerminalObs();
    var72.removeAllObs(var86);
    dynoptic.model.automaton.EventTypeEncodings var88 = new dynoptic.model.automaton.EventTypeEncodings(var86);
    dynoptic.model.automaton.EncodedAutomaton var89 = var69.getEncodedAutomaton(var88);
    var69.minimize();
    dynoptic.model.automaton.EncodedAutomaton var91 = new dynoptic.model.automaton.EncodedAutomaton(var20, var69);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var93 = var20.getEventType('a');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var48.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test17"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState((-1), true, false);
    java.lang.String var4 = var3.getName();
    dynoptic.model.export.DotExportFormatter var5 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var6 = var5.beginGraphString();
    java.lang.String var7 = var5.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var12 = var10.getInitialObsForPid(100);
    java.lang.String var15 = var5.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var10, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var19 = var18.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var21 = new dynoptic.model.fifosys.gfsm.GFSMPath(var18, 1);
    java.lang.String var24 = var5.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var18, true, true);
    java.lang.String var25 = var5.beginGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    dynoptic.model.fifosys.cfsm.fsm.FSM var46 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var32, var37, var43, 100);
    int var47 = var32.getPid();
    int var48 = var32.getScmId();
    int var49 = var32.getPid();
    java.lang.String var52 = var5.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var32, false, false);
    var32.setAccept();
    boolean var54 = var3.equals((java.lang.Object)var32);
    var3.markTerm();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var56 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var3);
    java.lang.String var57 = var56.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "122"+ "'", var4.equals("122"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "digraph {\n"+ "'", var6.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "digraph {\n"+ "'", var7.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var15.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Part-0-57775888"+ "'", var19.equals("Part-0-57775888"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var24.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "digraph {\n"+ "'", var25.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "  1 [label=\"0\",shape=circle];\n"+ "'", var52.equals("  1 [label=\"0\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "ObsDAGNode[i_a122_t]"+ "'", var57.equals("ObsDAGNode[i_a122_t]"));

  }

  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test18"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    java.util.Set var22 = var14.getTerminalObsForPid(100);
    boolean var23 = var14.isInitial();
    java.util.Set var24 = var14.getTransitioningEvents();
    dynoptic.model.automaton.EventTypeEncodings var25 = new dynoptic.model.automaton.EventTypeEncodings(var24);
    dynoptic.model.fifosys.gfsm.GFSMPath var27 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var28 = new dynoptic.model.fifosys.gfsm.GFSMPath(var27);
    dynoptic.model.fifosys.gfsm.GFSMPath var30 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var31 = var30.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var32 = new dynoptic.model.fifosys.gfsm.GFSMPath(var27, var30);
    dynoptic.model.fifosys.gfsm.GFSMPath var34 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var35 = new dynoptic.model.fifosys.gfsm.GFSMPath(var34);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var38 = var37.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var39 = new dynoptic.model.fifosys.gfsm.GFSMPath(var34, var37);
    dynoptic.model.fifosys.gfsm.GFSMPath var41 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var42 = new dynoptic.model.fifosys.gfsm.GFSMPath(var37, var41);
    boolean var43 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var41);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath(var30, var41);
    dynoptic.model.fifosys.gfsm.GFSMPath var46 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var47 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var46);
    dynoptic.model.fifosys.gfsm.GFSMPath var48 = new dynoptic.model.fifosys.gfsm.GFSMPath(var41, var46);
    int var49 = var41.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var50 = new dynoptic.model.fifosys.gfsm.GFSMPath(var41);
    boolean var51 = var25.equals((java.lang.Object)var50);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var56 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var58 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var59 = var56.equals((java.lang.Object)(-1));
    java.lang.String var60 = var56.getName();
    dynoptic.model.export.DotExportFormatter var61 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var62 = var61.beginGraphString();
    java.lang.String var63 = var61.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var68 = var66.getInitialObsForPid(100);
    java.lang.String var71 = var61.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var66, true, false);
    java.lang.String var72 = var61.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var76 = var75.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var78 = new dynoptic.model.fifosys.gfsm.GFSMPath(var75, 1);
    java.lang.String var81 = var61.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var75, false, true);
    java.util.Set var83 = var75.getTerminalObsForPid(100);
    java.lang.String var84 = var75.toLongString();
    boolean var85 = var56.equals((java.lang.Object)var84);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var86 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var56);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var87 = var86.getObsState();
    boolean var88 = var25.equals((java.lang.Object)var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-180795385"+ "'", var15.equals("Part-0-180795385"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "digraph {\n"+ "'", var62.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "digraph {\n"+ "'", var63.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var71.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "digraph {\n"+ "'", var72.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "Part-0-1351256470"+ "'", var76.equals("Part-0-1351256470"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var81.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "[]"+ "'", var84.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test19() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test19"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var6 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    synoptic.model.event.Event var7 = var6.getNextEvent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test20() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test20"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    int var40 = var39.getPid();
    java.util.Set var41 = var39.getStates();
    dynoptic.model.automaton.EncodedAutomaton var42 = new dynoptic.model.automaton.EncodedAutomaton(var17, var39);
    java.util.Set var43 = var39.getStates();
    boolean var44 = var39.isDeterministic();
    var39.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);

  }

  public void test21() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test21"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var45 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var50 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.cfsm.fsm.FSM var59 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var45, var50, var56, 100);
    dynoptic.model.automaton.EventTypeEncodings var60 = var59.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var65 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var66 = var60.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var67 = var39.getEncodedAutomaton(var60);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var78 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var82 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var84 = var82.getInitialObsForPid(100);
    var80.removeAllObs(var84);
    dynoptic.model.fifosys.cfsm.fsm.FSM var87 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var73, var78, var84, 100);
    dynoptic.model.automaton.EventTypeEncodings var88 = var87.getEventTypeEncodings();
    boolean var89 = var67.equals((java.lang.Object)var87);
    dynoptic.model.automaton.EncodedAutomaton var90 = new dynoptic.model.automaton.EncodedAutomaton(var17, var87);
    java.util.Set var91 = var87.getAcceptStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test22() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test22"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    java.lang.String var20 = var0.beginGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    int var42 = var27.getPid();
    int var43 = var27.getScmId();
    int var44 = var27.getPid();
    java.lang.String var47 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var27, false, false);
    java.lang.String var48 = var27.toShortIntString();
    java.util.Set var49 = var27.getTransitioningEvents();
    dynoptic.model.fifosys.cfsm.CFSMState var50 = new dynoptic.model.fifosys.cfsm.CFSMState(var27);
    dynoptic.model.fifosys.cfsm.CFSMState var51 = new dynoptic.model.fifosys.cfsm.CFSMState(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-1507770299"+ "'", var14.equals("Part-0-1507770299"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "digraph {\n"+ "'", var20.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "  1 [label=\"0\",shape=circle];\n"+ "'", var47.equals("  1 [label=\"0\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "0"+ "'", var48.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test23() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test23"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    java.lang.String var36 = var11.toLongString();
    java.lang.String var37 = var11.toLongString();
    java.lang.String var38 = var11.toString();
    java.util.Set var39 = var11.getNextStates();
    java.util.Set var40 = var11.getNextStates();
    java.util.Set var41 = var11.getTransitioningEvents();
    java.lang.String var42 = var11.toString();
    dynoptic.model.alphabet.FSMAlphabet var43 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var50 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var61 = var59.getInitialObsForPid(100);
    var57.removeAllObs(var61);
    dynoptic.model.fifosys.cfsm.fsm.FSM var64 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var50, var55, var61, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var70 = var68.getInitialObsForPid(100);
    var66.removeAllObs(var70);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var77 = var75.getInitialObsForPid(100);
    var73.removeAllObs(var77);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var55, var70, var77);
    boolean var80 = var43.retainAll((java.util.Collection)var77);
    java.util.Iterator var81 = var43.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var83 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var84 = var83.toIntermediateString();
    boolean var85 = var83.isAccept();
    java.util.Set var87 = var83.getInitialObsForPid(10);
    boolean var88 = var43.addAll((java.util.Collection)var87);
    java.util.Set var89 = var43.getLocalEventScmStrings();
    java.util.Iterator var90 = var43.iterator();
    java.lang.String var91 = var43.toString();
    java.lang.String var92 = var43.anyEventScmQRe();
    boolean var93 = var43.isEmpty();
    boolean var94 = var11.equals((java.lang.Object)var93);
    java.lang.String var95 = var11.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var36.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var37.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "0"+ "'", var38.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "0"+ "'", var42.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "Part-0-1128270475"+ "'", var84.equals("Part-0-1128270475"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "[]"+ "'", var91.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "(_)"+ "'", var92.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var95.equals("FSM_state: init[true], accept[false] id[0]"));

  }

  public void test24() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test24"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(100, false, true);
    int var4 = var3.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 100);

  }

  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test25"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    boolean var10 = var8.isEnabled();
    boolean var11 = var8.isTermState();
    synoptic.model.event.Event var12 = var8.getNextEvent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test26() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test26"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-116139007");

  }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test27"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var52 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    boolean var53 = var47.equals((java.lang.Object)1);
    dk.brics.automaton.Automaton var54 = var47.getAutomaton();
    dk.brics.automaton.Automaton var55 = var47.getAutomaton();
    dk.brics.automaton.Automaton var56 = var47.getAutomaton();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test28"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var8.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = var8.getObsState();
    boolean var12 = var8.isTermState();
    boolean var13 = var8.isTermState();
    boolean var14 = var8.isInitState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var15 = var8.getObsState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test29() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test29"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var4 = var2.getInitialObsForPid(100);
    java.lang.String var5 = var2.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var7 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var11 = var9.getInitialObsForPid(100);
    var7.removeAllObs(var11);
    dynoptic.model.alphabet.FSMAlphabet var13 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var19 = var17.getInitialObsForPid(100);
    var15.removeAllObs(var19);
    boolean var21 = var15.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    java.util.Set var29 = var23.getTerminalObs();
    var15.removeAllObs(var29);
    boolean var31 = var13.retainAll((java.util.Collection)var29);
    java.lang.Object[] var33 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var34 = var13.toArray(var33);
    java.lang.Object[] var35 = var13.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var2, var11, (java.util.Set)var13);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    boolean var44 = var38.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    java.util.Set var52 = var46.getTerminalObs();
    var38.removeAllObs(var52);
    dynoptic.model.automaton.EventTypeEncodings var54 = new dynoptic.model.automaton.EventTypeEncodings(var52);
    boolean var55 = var13.addAll((java.util.Collection)var52);
    boolean var56 = var13.isEmpty();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var62 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var67 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var69 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var73 = var71.getInitialObsForPid(100);
    var69.removeAllObs(var73);
    dynoptic.model.fifosys.cfsm.fsm.FSM var76 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var62, var67, var73, 100);
    int var77 = var76.getPid();
    java.util.Set var78 = var76.getStates();
    java.util.Set var79 = var76.getStates();
    dynoptic.model.automaton.EventTypeEncodings var80 = var76.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.GFSMState var82 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var83 = var82.toIntermediateString();
    boolean var84 = var82.isAccept();
    java.util.Set var85 = var82.getTerminalObs();
    boolean var86 = var76.equals((java.lang.Object)var85);
    boolean var87 = var13.removeAll((java.util.Collection)var85);
    dynoptic.model.automaton.EventTypeEncodings var88 = new dynoptic.model.automaton.EventTypeEncodings((java.util.Set)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "Part-0-1272809927"+ "'", var83.equals("Part-0-1272809927"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test30() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test30"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    java.util.Set var27 = var23.getInitialObsForPid(1);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState((-1), var27);
    java.lang.String var31 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var28, true, false);
    java.lang.String var32 = var0.beginGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var53 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var39, var44, var50, 100);
    int var54 = var39.getPid();
    java.lang.String var55 = var39.toLongString();
    java.lang.String var56 = var39.toLongString();
    int var57 = var39.getScmId();
    java.lang.String var60 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(10, (dynoptic.model.AbsFSMState)var39, false, true);
    java.lang.String var61 = var0.beginGraphString();
    java.lang.String var62 = var0.endGraphString();
    java.lang.String var63 = var0.beginGraphString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-1363975890"+ "'", var14.equals("Part-0-1363975890"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "  1 [label=\"[]\",shape=circle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->1;\n"+ "'", var31.equals("  1 [label=\"[]\",shape=circle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->1;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "digraph {\n"+ "'", var32.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var55.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var56.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "  10 [label=\"0\",shape=circle,shape=doublecircle];\n"+ "'", var60.equals("  10 [label=\"0\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "digraph {\n"+ "'", var61.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "} // digraph {\n"+ "'", var62.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "digraph {\n"+ "'", var63.equals("digraph {\n"));

  }

  public void test31() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test31"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    var0.clear();
    dynoptic.model.alphabet.FSMAlphabet var39 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var40 = var39.toScmParametersString();
    var39.clear();
    java.lang.String var42 = var39.toString();
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var48 = var46.getInitialObsForPid(100);
    var44.removeAllObs(var48);
    boolean var50 = var44.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    java.util.Set var58 = var52.getTerminalObs();
    var44.removeAllObs(var58);
    java.util.Set var61 = var44.getInitialObsForPid(10);
    boolean var62 = var39.addAll((java.util.Collection)var61);
    boolean var63 = var0.addAll((java.util.Collection)var61);
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test32"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-243842768");

  }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test33"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.lang.String var21 = var19.toString();
    int var22 = var19.getPid();
    dynoptic.model.alphabet.FSMAlphabet var23 = var19.getAlphabet();
    java.util.Set var24 = var23.getLocalEventScmStrings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var35 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    dynoptic.model.fifosys.cfsm.fsm.FSM var44 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var30, var35, var41, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var50 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var61 = var59.getInitialObsForPid(100);
    var57.removeAllObs(var61);
    dynoptic.model.fifosys.cfsm.fsm.FSM var64 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var50, var55, var61, 100);
    dynoptic.model.automaton.EventTypeEncodings var65 = var64.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var70 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var71 = var65.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var72 = var44.getEncodedAutomaton(var65);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var78 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var83 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var85 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var87 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var89 = var87.getInitialObsForPid(100);
    var85.removeAllObs(var89);
    dynoptic.model.fifosys.cfsm.fsm.FSM var92 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var78, var83, var89, 100);
    dynoptic.model.automaton.EventTypeEncodings var93 = var92.getEventTypeEncodings();
    boolean var94 = var72.equals((java.lang.Object)var92);
    java.util.Set var95 = var92.getStates();
    java.util.Set var96 = var92.getAcceptStates();
    java.util.Set var97 = var92.getAcceptStates();
    boolean var98 = var23.retainAll((java.util.Collection)var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var21.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);

  }

  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test34"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.automaton.EventTypeEncodings var68 = var67.getEventTypeEncodings();
    boolean var69 = var47.equals((java.lang.Object)var67);
    java.util.Set var70 = var67.getStates();
    java.util.Set var71 = var67.getAcceptStates();
    java.lang.String var72 = var67.toString();
    var67.minimize();
    var67.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var72.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));

  }

  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test35"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    var1.removeAllObs(var23);
    java.util.Set var29 = var1.getInitialObsForPid((-1));
    boolean var30 = var1.isAccept();
    java.lang.String var31 = var1.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));

  }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test36"); }


    dynoptic.model.alphabet.FSMAlphabet var1 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var2 = var1.toScmParametersString();
    java.lang.Object[] var3 = var1.toArray();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var7 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var9 = var7.getInitialObsForPid(100);
    var5.removeAllObs(var9);
    java.util.Set var11 = var5.getTransitioningEvents();
    boolean var12 = var1.remove((java.lang.Object)var11);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(100, (java.util.Set)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test37"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", false, false);
    java.lang.String var5 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));

  }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test38"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(1);
    java.util.Set var2 = var1.getTransitioningEvents();
    java.util.Set var4 = var1.getTerminalObsForPid(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test39"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState((-1), true, false);
    boolean var4 = var3.isTerminal();
    boolean var5 = var3.isInitial();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (-1), 1);
    java.lang.String var11 = var10.toShortIntString();
    java.util.Set var12 = var10.getNextStates();
    boolean var13 = var3.equals((java.lang.Object)var12);
    var3.markTerm();
    int var15 = var3.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "1"+ "'", var11.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));

  }

  public void test40() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test40"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var8.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = var8.getObsState();
    boolean var12 = var8.isTermState();
    boolean var13 = var8.isTermState();
    boolean var14 = var8.isTermState();
    boolean var15 = var8.isEnabled();
    var8.setOccurred(true);
    int var18 = var8.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));

  }

  public void test41() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test41"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    dynoptic.model.fifosys.gfsm.GFSMPath var38 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var39 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var38);
    boolean var40 = var12.equals((java.lang.Object)var39);
    boolean var41 = var12.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var52 = var50.getInitialObsForPid(100);
    var48.removeAllObs(var52);
    java.util.Set var54 = var48.getTerminalObs();
    dynoptic.model.fifosys.cfsm.fsm.FSM var56 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var12, var46, var54, 1);
    java.lang.String var57 = var46.toShortIntString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "1"+ "'", var57.equals("1"));

  }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test42"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 0);
    boolean var11 = var1.isAcceptForPid(10);
    int var12 = var1.getNumProcesses();
    java.util.Set var14 = var1.getTerminalObsForPid((-1));
    java.util.Set var16 = var1.getTerminalObsForPid(1);
    java.lang.String var17 = var1.toIntermediateString();
    java.util.Set var18 = var1.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Part-0-64070742"+ "'", var17.equals("Part-0-64070742"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test43() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test43"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-1566707493");

  }

  public void test44() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test44"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.alphabet.FSMAlphabet var5 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var17, var32, var39);
    boolean var42 = var5.retainAll((java.util.Collection)var39);
    java.util.Iterator var43 = var5.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var46 = var45.toIntermediateString();
    boolean var47 = var45.isAccept();
    java.util.Set var49 = var45.getInitialObsForPid(10);
    boolean var50 = var5.addAll((java.util.Collection)var49);
    java.util.Set var51 = var5.getLocalEventScmStrings();
    java.util.Iterator var52 = var5.iterator();
    java.lang.String var53 = var5.toString();
    java.lang.String var54 = var5.anyEventScmQRe();
    boolean var55 = var5.isEmpty();
    boolean var56 = var4.equals((java.lang.Object)var5);
    dynoptic.model.automaton.EventTypeEncodings var57 = new dynoptic.model.automaton.EventTypeEncodings((java.util.Set)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "Part-0-1649983094"+ "'", var46.equals("Part-0-1649983094"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "[]"+ "'", var53.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(_)"+ "'", var54.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test45() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test45"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.cfsm.fsm.FSM var47 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var33, var38, var44, 100);
    var22.removeAllObs(var44);
    java.util.Set var50 = var22.getInitialObsForPid((-1));
    var14.removeAllObs(var50);
    java.util.Set var53 = var14.getInitialObsForPid(0);
    java.lang.String var54 = var14.toLongString();
    java.util.Set var55 = var14.getTerminalObs();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-676078408"+ "'", var15.equals("Part-0-676078408"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "[]"+ "'", var54.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test46() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test46"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, (-1));
    dynoptic.model.export.DotExportFormatter var5 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var6 = var5.beginGraphString();
    java.lang.String var7 = var5.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var12 = var10.getInitialObsForPid(100);
    java.lang.String var15 = var5.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var10, true, false);
    java.lang.String var16 = var5.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var20 = var19.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(var19, 1);
    java.lang.String var25 = var5.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var19, false, true);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    var45.removeAllObs(var49);
    dynoptic.model.fifosys.cfsm.fsm.FSM var52 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var38, var43, var49, 100);
    var27.removeAllObs(var49);
    java.util.Set var55 = var27.getInitialObsForPid((-1));
    var19.removeAllObs(var55);
    java.util.Set var58 = var19.getInitialObsForPid(0);
    dynoptic.model.automaton.EventTypeEncodings var59 = new dynoptic.model.automaton.EventTypeEncodings(var58);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var65 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var70 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var72 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var74 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var76 = var74.getInitialObsForPid(100);
    var72.removeAllObs(var76);
    dynoptic.model.fifosys.cfsm.fsm.FSM var79 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var65, var70, var76, 100);
    int var80 = var79.getPid();
    java.util.Set var81 = var79.getStates();
    dynoptic.model.alphabet.FSMAlphabet var82 = var79.getAlphabet();
    int var83 = var82.size();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findTransitiveClosure((dynoptic.model.AbsFSMState)var4, var58, (java.util.Set)var82);
    dynoptic.model.fifosys.cfsm.CFSMState var85 = new dynoptic.model.fifosys.cfsm.CFSMState(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "digraph {\n"+ "'", var6.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "digraph {\n"+ "'", var7.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var15.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "digraph {\n"+ "'", var16.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Part-0-686316493"+ "'", var20.equals("Part-0-686316493"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var25.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);

  }

  public void test47() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test47"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTerminalObs();
    java.lang.String var8 = var1.toIntermediateString();
    java.util.Set var10 = var1.getTerminalObsForPid(10);
    boolean var11 = var1.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Part-0-916792626"+ "'", var8.equals("Part-0-916792626"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test48"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    java.lang.String var13 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var5, false, false);
    java.lang.String var14 = var0.endGraphString();
    java.lang.String var15 = var0.endGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var22 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var28 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.fifosys.cfsm.fsm.FSM var42 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var28, var33, var39, 100);
    int var43 = var28.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    var45.removeAllObs(var49);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var56 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var61 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var63 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var65 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var67 = var65.getInitialObsForPid(100);
    var63.removeAllObs(var67);
    dynoptic.model.fifosys.cfsm.fsm.FSM var70 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var56, var61, var67, 100);
    var45.removeAllObs(var67);
    dynoptic.model.fifosys.cfsm.fsm.FSM var73 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var22, var28, var67, 1);
    java.lang.String var74 = var28.toShortIntString();
    java.lang.String var77 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var28, true, true);
    java.lang.String var78 = var28.toShortIntString();
    int var79 = var28.getScmId();
    java.lang.String var80 = var28.toShortIntString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var13.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "} // digraph {\n"+ "'", var14.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "} // digraph {\n"+ "'", var15.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "0"+ "'", var74.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "  100 [label=\"0\",shape=circle,shape=doublecircle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->100;\n"+ "'", var77.equals("  100 [label=\"0\",shape=circle,shape=doublecircle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "0"+ "'", var78.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "0"+ "'", var80.equals("0"));

  }

  public void test49() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test49"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = var40.getFSMState(0);
    dynoptic.model.fifosys.cfsm.CFSMState var44 = new dynoptic.model.fifosys.cfsm.CFSMState(var43);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var49 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var51 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var52 = var49.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var53 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var49);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var58 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var60 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var61 = var58.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var62 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var58);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var63 = var62.getObsState();
    boolean var64 = var62.isEnabled();
    var62.setOccurred(false);
    var53.addRemoteDependency(var62);
    boolean var68 = var53.hasOccurred();
    var53.setOccurred(true);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var71 = var53.getObsState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var72 = var53.getPrevState();
    java.lang.String var73 = var53.toString();
    boolean var74 = var53.isInitState();
    boolean var75 = var43.equals((java.lang.Object)var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var73.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test50() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test50"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getInitStates();
    java.util.Set var22 = var19.getStates();
    boolean var24 = var19.equals((java.lang.Object)"Part-0-1853704944");
    var19.minimize();
    dynoptic.model.automaton.EventTypeEncodings var26 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    dynoptic.model.fifosys.cfsm.fsm.FSM var46 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var32, var37, var43, 100);
    var32.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var48 = new dynoptic.model.fifosys.cfsm.CFSMState(var32);
    boolean var49 = var19.equals((java.lang.Object)var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test51() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test51"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var11);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, var15);
    boolean var17 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var21 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var20);
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15, var20);
    boolean var23 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var15);
    int var24 = var15.numStates();
    int var25 = var15.numStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);

  }

  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test52"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = var40.getFSMState(0);
    dynoptic.model.fifosys.cfsm.CFSMState var44 = new dynoptic.model.fifosys.cfsm.CFSMState(var43);
    boolean var45 = var43.isInitial();
    java.lang.String var46 = var43.toShortIntString();
    boolean var47 = var43.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "0"+ "'", var46.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);

  }

  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test53"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    java.lang.String var13 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var5, false, false);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var18 = var16.getTerminalObsForPid(1);
    java.lang.String var19 = var16.toLongString();
    java.lang.String var22 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var16, false, false);
    java.lang.String var23 = var0.endGraphString();
    java.lang.String var24 = var0.beginGraphString();
    java.lang.String var25 = var0.endGraphString();
    java.lang.String var26 = var0.endGraphString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var13.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]_i_t"+ "'", var19.equals("[]_i_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "  100 [label=\"[]\",shape=circle];\n"+ "'", var22.equals("  100 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "} // digraph {\n"+ "'", var23.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "digraph {\n"+ "'", var24.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "} // digraph {\n"+ "'", var25.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "} // digraph {\n"+ "'", var26.equals("} // digraph {\n"));

  }

  public void test54() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test54"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(0);
    java.lang.String var2 = var1.toLongString();
    boolean var4 = var1.isInitForPid((-1));
    java.util.Set var5 = var1.getObservedStates();
    java.util.Set var6 = var1.getObservedStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "[]_i_t"+ "'", var2.equals("[]_i_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test55() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test55"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var8.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = var8.getObsState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var12 = var8.getObsState();
    boolean var13 = var8.isEnabled();
    int var14 = var8.getPid();
    boolean var15 = var8.isTermState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var16 = var8.getNextState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test56"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var45 = var42.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var46 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var51 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var52 = var51.getName();
    boolean var53 = var42.equals((java.lang.Object)var51);
    boolean var54 = var0.contains((java.lang.Object)var42);
    java.lang.String var55 = var0.toScmParametersString();
    java.lang.String var56 = var0.toString();
    java.util.Iterator var57 = var0.iterator();
    java.util.Iterator var58 = var0.iterator();
    java.util.Iterator var59 = var0.iterator();
    java.lang.Object[] var60 = var0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var52.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + ""+ "'", var55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "[]"+ "'", var56.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test57() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test57"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    java.lang.Object[] var2 = var0.toArray();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var8 = var5.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    dynoptic.model.alphabet.FSMAlphabet var16 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    boolean var24 = var18.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var30 = var28.getInitialObsForPid(100);
    var26.removeAllObs(var30);
    java.util.Set var32 = var26.getTerminalObs();
    var18.removeAllObs(var32);
    boolean var34 = var16.retainAll((java.util.Collection)var32);
    java.lang.Object[] var36 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var37 = var16.toArray(var36);
    java.lang.Object[] var38 = var16.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var5, var14, (java.util.Set)var16);
    boolean var40 = var0.removeAll((java.util.Collection)var14);
    int var41 = var0.size();
    java.util.Iterator var42 = var0.iterator();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var46 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(0, true, false);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var47 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var46);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var48 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var46);
    boolean var49 = var0.remove((java.lang.Object)var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test58"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, (-1));
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    int var26 = var11.getPid();
    int var27 = var11.getScmId();
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    dynoptic.model.fifosys.cfsm.fsm.FSM var33 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var5, var11, var31, 0);
    java.lang.String var34 = var5.toShortIntString();
    int var35 = var5.getPid();
    java.util.Set var36 = var5.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "-1"+ "'", var34.equals("-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test59() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test59"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    int var27 = var12.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var40 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var45 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var51 = var49.getInitialObsForPid(100);
    var47.removeAllObs(var51);
    dynoptic.model.fifosys.cfsm.fsm.FSM var54 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var40, var45, var51, 100);
    var29.removeAllObs(var51);
    dynoptic.model.fifosys.cfsm.fsm.FSM var57 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var6, var12, var51, 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var62 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (-1), 1);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var68 = var66.getInitialObsForPid(100);
    var64.removeAllObs(var68);
    boolean var70 = var64.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var72 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var74 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var76 = var74.getInitialObsForPid(100);
    var72.removeAllObs(var76);
    java.util.Set var78 = var72.getTerminalObs();
    var64.removeAllObs(var78);
    dynoptic.model.automaton.EventTypeEncodings var80 = new dynoptic.model.automaton.EventTypeEncodings(var78);
    dynoptic.model.fifosys.cfsm.fsm.FSM var82 = new dynoptic.model.fifosys.cfsm.fsm.FSM(0, var12, var62, var78, 1);
    int var83 = var82.getPid();
    dynoptic.model.alphabet.FSMAlphabet var84 = var82.getAlphabet();
    int var85 = var82.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);

  }

  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test60"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    var0.clear();
    java.lang.String var3 = var0.toString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    dynoptic.model.alphabet.FSMAlphabet var11 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    boolean var19 = var13.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    var21.removeAllObs(var25);
    java.util.Set var27 = var21.getTerminalObs();
    var13.removeAllObs(var27);
    boolean var29 = var11.retainAll((java.util.Collection)var27);
    java.lang.String var30 = var11.toString();
    var5.addAllObs((java.util.Set)var11);
    dynoptic.model.alphabet.FSMAlphabet var32 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var53 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var39, var44, var50, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var44, var59, var66);
    boolean var69 = var32.retainAll((java.util.Collection)var66);
    int var70 = var32.size();
    boolean var71 = var11.retainAll((java.util.Collection)var32);
    java.util.Iterator var72 = var32.iterator();
    java.lang.String var73 = var32.anyEventScmQRe();
    boolean var74 = var0.removeAll((java.util.Collection)var32);
    java.lang.String var75 = var32.toScmParametersString();
    java.lang.String var76 = var32.toScmParametersString();
    java.util.Set var77 = var32.getLocalEventScmStrings();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[]"+ "'", var30.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "(_)"+ "'", var73.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + ""+ "'", var75.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + ""+ "'", var76.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test61() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test61"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    java.lang.String var7 = var4.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    dynoptic.model.alphabet.FSMAlphabet var15 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var21 = var19.getInitialObsForPid(100);
    var17.removeAllObs(var21);
    boolean var23 = var17.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    java.util.Set var31 = var25.getTerminalObs();
    var17.removeAllObs(var31);
    boolean var33 = var15.retainAll((java.util.Collection)var31);
    java.lang.Object[] var35 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var36 = var15.toArray(var35);
    java.lang.Object[] var37 = var15.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var4, var13, (java.util.Set)var15);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    boolean var46 = var40.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var52 = var50.getInitialObsForPid(100);
    var48.removeAllObs(var52);
    java.util.Set var54 = var48.getTerminalObs();
    var40.removeAllObs(var54);
    dynoptic.model.automaton.EventTypeEncodings var56 = new dynoptic.model.automaton.EventTypeEncodings(var54);
    boolean var57 = var15.addAll((java.util.Collection)var54);
    var1.removeAllObs((java.util.Set)var15);
    int var59 = var1.getNumProcesses();
    dynoptic.model.fifosys.gfsm.GFSMPath var61 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 100);
    int var62 = var61.numEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[]"+ "'", var7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);

  }

  public void test62() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test62"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    java.lang.String var5 = var4.toShortIntString();
    java.util.Set var6 = var4.getNextStates();
    boolean var7 = var4.isInitial();
    var4.setAccept();
    java.lang.String var9 = var4.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "0"+ "'", var5.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "FSM_state: init[true], accept[true] id[0]"+ "'", var9.equals("FSM_state: init[true], accept[true] id[0]"));

  }

  public void test63() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test63"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, false, 0, 0);

  }

  public void test64() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test64"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTerminalObs();
    java.lang.String var8 = var1.toIntermediateString();
    java.util.Set var10 = var1.getTerminalObsForPid(10);
    java.util.Set var11 = var1.getInitialObservations();
    boolean var13 = var1.isInitForPid(0);
    java.lang.String var14 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Part-0-191039848"+ "'", var8.equals("Part-0-191039848"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));

  }

  public void test65() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test65"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var6 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    dynoptic.model.fifosys.cfsm.fsm.FSM var32 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var18, var23, var29, 100);
    int var33 = var18.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var57 = var55.getInitialObsForPid(100);
    var53.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var60 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var46, var51, var57, 100);
    var35.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var63 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var12, var18, var57, 1);
    dynoptic.model.alphabet.FSMAlphabet var64 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var65 = var64.toScmParametersString();
    var64.clear();
    java.lang.String var67 = var64.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var72 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var74 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var75 = var72.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var76 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var72);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var81 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var83 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var84 = var81.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var85 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var81);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var86 = var85.getObsState();
    boolean var87 = var85.isEnabled();
    var85.setOccurred(false);
    var76.addRemoteDependency(var85);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var91 = var85.getObsState();
    boolean var92 = var64.remove((java.lang.Object)var91);
    boolean var93 = var64.isEmpty();
    java.lang.String var94 = var64.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var96 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var5, var18, (java.util.Set)var64, 0);
    java.lang.String var97 = var18.toString();
    java.lang.String var98 = var18.toShortIntString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[]"+ "'", var67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "[]"+ "'", var94.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + "0"+ "'", var97.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var98 + "' != '" + "0"+ "'", var98.equals("0"));

  }

  public void test66() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test66"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var6 = var5.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    int var27 = var12.getPid();
    int var28 = var12.getScmId();
    dynoptic.model.alphabet.FSMAlphabet var29 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var41 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.cfsm.fsm.FSM var50 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var36, var41, var47, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var41, var56, var63);
    boolean var66 = var29.retainAll((java.util.Collection)var63);
    java.lang.String var67 = var29.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var12, (java.util.Set)var29, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var70 = new dynoptic.model.fifosys.cfsm.CFSMState(var12);
    java.util.Set var71 = var70.getTransitioningEvents();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = var70.getFSMState(0);
    int var74 = var73.getScmId();
    dynoptic.model.fifosys.gfsm.GFSMState var76 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var78 = var76.getInitialObsForPid(100);
    java.lang.String var79 = var76.toIntermediateString();
    dynoptic.model.alphabet.FSMAlphabet var80 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var81 = var80.toScmParametersString();
    var80.clear();
    var76.addAllObs((java.util.Set)var80);
    dynoptic.model.alphabet.FSMAlphabet var84 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var85 = var84.toScmParametersString();
    java.lang.Object[] var86 = var84.toArray();
    boolean var87 = var84.isEmpty();
    var76.addAllObs((java.util.Set)var84);
    java.lang.Object[] var89 = var84.toArray();
    boolean var90 = var73.equals((java.lang.Object)var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[]"+ "'", var67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "Part-0-418806259"+ "'", var79.equals("Part-0-418806259"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + ""+ "'", var81.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + ""+ "'", var85.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test67"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, (-1));
    var4.setAccept();
    boolean var6 = var4.isAccept();
    int var7 = var4.getScmId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));

  }

  public void test68() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test68"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var3 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    boolean var5 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test69() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test69"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    boolean var40 = var11.isAccept();
    var11.setAccept();
    boolean var42 = var11.isInitial();
    var11.setAccept();
    var11.setAccept();
    java.util.Set var45 = var11.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test70() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test70"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(0);
    var1.recreateCachedTransitions();
    var1.recreateCachedTransitions();
    java.lang.String var4 = var1.toIntermediateString();
    boolean var6 = var1.isAcceptForPid(10);
    boolean var8 = var1.isInitForPid(0);
    java.lang.String var9 = var1.toIntermediateString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Part-0-214820256"+ "'", var4.equals("Part-0-214820256"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Part-0-214820256"+ "'", var9.equals("Part-0-214820256"));

  }

  public void test71() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test71"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    int var26 = var11.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var53 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var39, var44, var50, 100);
    var28.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var56 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var5, var11, var50, 1);
    java.util.Set var57 = var56.getStates();
    java.util.Set var58 = var56.getInitStates();
    dynoptic.model.alphabet.FSMAlphabet var59 = var56.getAlphabet();
    java.util.Set var60 = var56.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test72() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test72"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    boolean var8 = var2.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    java.util.Set var16 = var10.getTerminalObs();
    var2.removeAllObs(var16);
    boolean var18 = var0.retainAll((java.util.Collection)var16);
    java.lang.String var19 = var0.anyEventScmQRe();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var26 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var27 = var24.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var28 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var24);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var29 = var28.getObsState();
    java.lang.String var30 = var28.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var31 = var28.getObsState();
    boolean var32 = var0.contains((java.lang.Object)var31);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var35 = var34.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(var34, 1);
    dynoptic.model.fifosys.gfsm.GFSMPath var38 = new dynoptic.model.fifosys.gfsm.GFSMPath(var37);
    boolean var39 = var31.equals((java.lang.Object)var37);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = var37.lastState();
    boolean var41 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    int var42 = var37.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var45 = new dynoptic.model.fifosys.gfsm.GFSMPath(var44);
    dynoptic.model.fifosys.gfsm.GFSMPath var47 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var48 = var47.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var49 = new dynoptic.model.fifosys.gfsm.GFSMPath(var44, var47);
    dynoptic.model.fifosys.gfsm.GFSMPath var50 = new dynoptic.model.fifosys.gfsm.GFSMPath(var44);
    dynoptic.model.fifosys.gfsm.GFSMPath var51 = new dynoptic.model.fifosys.gfsm.GFSMPath(var44);
    int var52 = var44.numEvents();
    boolean var53 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var44);
    dynoptic.model.fifosys.gfsm.GFSMPath var54 = new dynoptic.model.fifosys.gfsm.GFSMPath(var44);
    int var55 = var54.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var56 = new dynoptic.model.fifosys.gfsm.GFSMPath(var54);
    dynoptic.model.fifosys.gfsm.GFSMPath var57 = new dynoptic.model.fifosys.gfsm.GFSMPath(var37, var56);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = var57.lastState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(_)"+ "'", var19.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var30.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "Part-0-429373568"+ "'", var35.equals("Part-0-429373568"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test73"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    var5.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var21 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    java.util.Set var22 = var21.getTransitioningEvents();
    boolean var23 = var21.isInitial();
    boolean var24 = var21.isInitial();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = var21.getFSMState(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);

  }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test74"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var3 = var1.numEvents();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var4 = var1.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test75() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test75"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, false, 0, (-1));
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.cfsm.fsm.FSM var47 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var33, var38, var44, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var53 = var51.getInitialObsForPid(100);
    var49.removeAllObs(var53);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    var56.removeAllObs(var60);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var38, var53, var60);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    java.util.Set var68 = var64.getInitialObsForPid(1);
    java.util.Set var69 = var64.getInitialObservations();
    dynoptic.model.fifosys.cfsm.fsm.FSM var71 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var17, var38, var69, 10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    java.util.Set var76 = var73.getTransitioningEvents();
    java.util.Set var77 = var73.getInitialObservations();
    java.util.Set var78 = var73.getNextStates();
    dynoptic.model.fifosys.cfsm.fsm.FSM var80 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var5, var38, var78, (-1));
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var82 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    boolean var83 = var38.equals((java.lang.Object)var82);
    var82.markTerm();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test76"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 10, (-1));
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    boolean var33 = var27.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    java.util.Set var41 = var35.getTerminalObs();
    var27.removeAllObs(var41);
    dynoptic.model.automaton.EventTypeEncodings var43 = new dynoptic.model.automaton.EventTypeEncodings(var41);
    dynoptic.model.fifosys.cfsm.fsm.FSM var45 = new dynoptic.model.fifosys.cfsm.fsm.FSM(0, var5, var16, var41, (-1));
    dynoptic.model.alphabet.FSMAlphabet var46 = var45.getAlphabet();
    boolean var48 = var46.remove((java.lang.Object)"1");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test77"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "Part-0-284291914", false, true);
    int var5 = var4.getPid();
    java.lang.String var6 = var4.toString();
    boolean var7 = var4.isTerminal();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Part-0-284291914_t"+ "'", var6.equals("Part-0-284291914_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test78() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test78"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    boolean var10 = var8.isEnabled();
    boolean var11 = var8.isTermState();
    int var12 = var8.getPid();
    boolean var13 = var8.hasOccurred();
    boolean var14 = var8.hasOccurred();
    synoptic.model.event.Event var15 = var8.getNextEvent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test79() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test79"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    java.lang.Object[] var2 = var0.toArray();
    boolean var3 = var0.isEmpty();
    var0.clear();
    dynoptic.model.alphabet.FSMAlphabet var5 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var17, var32, var39);
    boolean var42 = var5.retainAll((java.util.Collection)var39);
    java.lang.Object[] var43 = var5.toArray();
    boolean var44 = var0.remove((java.lang.Object)var5);
    java.lang.Object[] var45 = var5.toArray();
    java.lang.String var46 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "[]"+ "'", var46.equals("[]"));

  }

  public void test80() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test80"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(10, true, true);
    int var4 = var3.getPid();
    java.lang.String var5 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "i_a127_t"+ "'", var5.equals("i_a127_t"));

  }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test81"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "Part-0-284291914", false, true);
    int var5 = var4.getPid();
    java.lang.String var6 = var4.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var13 = var12.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var24 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var30 = var28.getInitialObsForPid(100);
    var26.removeAllObs(var30);
    dynoptic.model.fifosys.cfsm.fsm.FSM var33 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var19, var24, var30, 100);
    int var34 = var19.getPid();
    int var35 = var19.getScmId();
    dynoptic.model.alphabet.FSMAlphabet var36 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.fifosys.cfsm.fsm.FSM var57 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var43, var48, var54, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var70 = var68.getInitialObsForPid(100);
    var66.removeAllObs(var70);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var48, var63, var70);
    boolean var73 = var36.retainAll((java.util.Collection)var70);
    java.lang.String var74 = var36.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var76 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var19, (java.util.Set)var36, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var77 = new dynoptic.model.fifosys.cfsm.CFSMState(var19);
    boolean var78 = var4.equals((java.lang.Object)var77);
    boolean var79 = var77.isInitial();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var81 = var77.getFSMState(0);
    boolean var83 = var77.isInitForPid(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Part-0-284291914_t"+ "'", var6.equals("Part-0-284291914_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "[]"+ "'", var74.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);

  }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test82"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(1, "ObsDAGNode[i_hi!_t]", false, false);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var6 = var5.getObsState();
    boolean var7 = var6.isTerminal();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var6);
    int var9 = var8.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);

  }

  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test83"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 10, (-1));
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    boolean var33 = var27.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    java.util.Set var41 = var35.getTerminalObs();
    var27.removeAllObs(var41);
    dynoptic.model.automaton.EventTypeEncodings var43 = new dynoptic.model.automaton.EventTypeEncodings(var41);
    dynoptic.model.fifosys.cfsm.fsm.FSM var45 = new dynoptic.model.fifosys.cfsm.fsm.FSM(0, var5, var16, var41, (-1));
    boolean var46 = var16.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);

  }

  public void test84() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test84"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(10, false, false);
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var6 = var5.toIntermediateString();
    boolean var7 = var5.isAccept();
    java.util.Set var8 = var5.getTerminalObs();
    int var9 = var5.getNumProcesses();
    boolean var11 = var5.isInitForPid(0);
    boolean var12 = var3.equals((java.lang.Object)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Part-0-1807367981"+ "'", var6.equals("Part-0-1807367981"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test85() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test85"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    boolean var7 = var5.hasOccurred();
    boolean var8 = var5.isInitState();
    int var9 = var5.getPid();
    java.lang.String var10 = var5.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var15 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var16 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var15);
    java.lang.String var17 = var16.toString();
    boolean var18 = var16.hasOccurred();
    boolean var19 = var16.isInitState();
    boolean var20 = var16.hasOccurred();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var21 = var16.getPrevState();
    synoptic.model.event.Event var22 = var16.getNextEvent();
    boolean var23 = var16.hasOccurred();
    boolean var24 = var16.isInitState();
    var5.addRemoteDependency(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var17.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);

  }

  public void test86() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test86"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    boolean var7 = var5.hasOccurred();
    synoptic.model.event.Event var8 = var5.getNextEvent();
    java.lang.String var9 = var5.toString();
    boolean var10 = var5.isTermState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var9.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test87"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    dynoptic.model.alphabet.FSMAlphabet var38 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var45 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var50 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.cfsm.fsm.FSM var59 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var45, var50, var56, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var63 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var65 = var63.getInitialObsForPid(100);
    var61.removeAllObs(var65);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var70 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var72 = var70.getInitialObsForPid(100);
    var68.removeAllObs(var72);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var50, var65, var72);
    boolean var75 = var38.retainAll((java.util.Collection)var72);
    java.util.Iterator var76 = var38.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var79 = var78.toIntermediateString();
    boolean var80 = var78.isAccept();
    java.util.Set var82 = var78.getInitialObsForPid(10);
    boolean var83 = var38.addAll((java.util.Collection)var82);
    java.util.Set var84 = var38.getLocalEventScmStrings();
    java.util.Iterator var85 = var38.iterator();
    java.util.Set var86 = var38.getLocalEventScmStrings();
    boolean var87 = var38.isEmpty();
    boolean var88 = var0.containsAll((java.util.Collection)var38);
    java.lang.Object[] var89 = var38.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "Part-0-722169191"+ "'", var79.equals("Part-0-722169191"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test88() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test88"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-1292362385");

  }

  public void test89() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test89"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    java.lang.String var5 = var4.toShortIntString();
    var4.setAccept();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var14 = var11.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var15 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var11);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var16 = var15.getObsState();
    java.lang.String var17 = var15.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = var15.getObsState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var19 = var15.getObsState();
    boolean var20 = var4.equals((java.lang.Object)var19);
    int var21 = var4.getPid();
    dynoptic.model.alphabet.FSMAlphabet var22 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var34 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var40 = var38.getInitialObsForPid(100);
    var36.removeAllObs(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSM var43 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var29, var34, var40, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    var45.removeAllObs(var49);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var34, var49, var56);
    boolean var59 = var22.retainAll((java.util.Collection)var56);
    java.lang.Object[] var60 = var22.toArray();
    java.util.Iterator var61 = var22.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var63 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var64 = var63.toIntermediateString();
    boolean var65 = var63.isAccept();
    boolean var66 = var22.contains((java.lang.Object)var65);
    java.util.Set var67 = var22.getLocalEventScmStrings();
    boolean var68 = var4.equals((java.lang.Object)var22);
    java.lang.String var69 = var4.toShortIntString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "0"+ "'", var5.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var17.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "Part-0-103320229"+ "'", var64.equals("Part-0-103320229"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "0"+ "'", var69.equals("0"));

  }

  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test90"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(0, "Part-0-339793194", true, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test91() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test91"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var6 = var5.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    int var27 = var12.getPid();
    int var28 = var12.getScmId();
    dynoptic.model.alphabet.FSMAlphabet var29 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var41 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.cfsm.fsm.FSM var50 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var36, var41, var47, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var41, var56, var63);
    boolean var66 = var29.retainAll((java.util.Collection)var63);
    java.lang.String var67 = var29.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var12, (java.util.Set)var29, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var70 = new dynoptic.model.fifosys.cfsm.CFSMState(var12);
    java.util.Set var71 = var70.getTransitioningEvents();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = var70.getFSMState(0);
    boolean var74 = var70.isInitial();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.cfsm.fsm.FSMState var76 = var70.getFSMState((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[]"+ "'", var67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test92() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test92"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(10, "Part-0-983817035", true, true);
    dynoptic.model.fifosys.gfsm.GFSMState var6 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var8 = var6.getInitialObsForPid(100);
    java.util.Set var9 = var6.getTransitioningEvents();
    java.util.Set var11 = var6.getTerminalObsForPid(100);
    java.util.Set var13 = var6.getTerminalObsForPid(100);
    int var14 = var6.getNumProcesses();
    boolean var16 = var6.isInitForPid(10);
    boolean var17 = var4.equals((java.lang.Object)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test93() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test93"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.lang.String var4 = var1.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var16, var31, var38);
    var1.removeAllObs(var38);
    java.lang.String var42 = var1.toLongString();
    dynoptic.model.alphabet.FSMAlphabet var43 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var44 = var43.toScmParametersString();
    java.lang.Object[] var45 = var43.toArray();
    boolean var46 = var43.isEmpty();
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    boolean var51 = var43.retainAll((java.util.Collection)var50);
    var1.addAllObs(var50);
    java.util.Set var53 = var1.getInitialObservations();
    java.util.Set var54 = var1.getTerminalObs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + ""+ "'", var44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test94() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test94"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var32, var47, var54);
    var32.setAccept();
    boolean var58 = var32.isAccept();
    java.lang.String var61 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var32, true, true);
    int var62 = var32.getPid();
    boolean var63 = var32.isInitial();
    int var64 = var32.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-1976482183"+ "'", var14.equals("Part-0-1976482183"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "  0 [label=\"0\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->0;\n"+ "'", var61.equals("  0 [label=\"0\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);

  }

  public void test95() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test95"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var58.getPid();
    java.util.Set var60 = var58.getAcceptStates();
    boolean var61 = var0.retainAll((java.util.Collection)var60);
    boolean var62 = var0.isEmpty();
    java.lang.String var63 = var0.anyEventScmQRe();
    java.lang.String var64 = var0.toString();
    var0.clear();
    java.lang.Object[] var66 = var0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "(_)"+ "'", var63.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "[]"+ "'", var64.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test96() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test96"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(1, "ObsDAGNode[i_hi!_t]", false, false);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var6 = var5.getObsState();
    boolean var7 = var5.isEnabled();
    java.lang.String var8 = var5.toString();
    int var9 = var5.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ObsDAGNode[ObsDAGNode[i_hi!_t]]"+ "'", var8.equals("ObsDAGNode[ObsDAGNode[i_hi!_t]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);

  }

  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test97"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    var21.removeAllObs(var25);
    dynoptic.model.fifosys.cfsm.fsm.FSM var28 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var14, var19, var25, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var19, var34, var41);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    java.lang.String var48 = var45.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    var71.removeAllObs(var75);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var82 = var80.getInitialObsForPid(100);
    var78.removeAllObs(var82);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var60, var75, var82);
    var45.removeAllObs(var82);
    java.util.Set var87 = var45.getInitialObsForPid(10);
    dynoptic.model.fifosys.cfsm.fsm.FSM var89 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var6, var34, (java.util.Collection)var87, (-1));
    boolean var90 = var89.isDeterministic();
    dynoptic.model.alphabet.FSMAlphabet var91 = var89.getAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var93 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var94 = var93.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var96 = new dynoptic.model.fifosys.gfsm.GFSMPath(var93, 1);
    java.util.Set var97 = var93.getInitialObservations();
    java.util.Set var98 = var93.getTransitioningEvents();
    boolean var99 = var91.removeAll((java.util.Collection)var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "Part-0-883111338"+ "'", var94.equals("Part-0-883111338"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test98() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test98"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    java.lang.String var5 = var4.toString();
    boolean var6 = var4.isInitial();
    int var7 = var4.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "i_hi!_t"+ "'", var5.equals("i_hi!_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));

  }

  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test99"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(0, "50", true, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test100() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test100"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var11);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, var15);
    boolean var17 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var21 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var20);
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15, var20);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    java.util.Set var27 = var24.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var29 = new dynoptic.model.fifosys.gfsm.GFSMPath(var24, (-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var30 = new dynoptic.model.fifosys.gfsm.GFSMPath(var20, var29);
    boolean var31 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var30);
    dynoptic.model.fifosys.gfsm.GFSMPath var32 = new dynoptic.model.fifosys.gfsm.GFSMPath(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);

  }

  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test101"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getStates();
    java.lang.String var22 = var19.toString();
    int var23 = var19.getPid();
    java.lang.String var24 = var19.toString();
    java.util.Set var25 = var19.getAcceptStates();
    java.lang.String var26 = var19.toString();
    dynoptic.model.automaton.EventTypeEncodings var27 = var19.getEventTypeEncodings();
    boolean var28 = var19.isDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var22.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var24.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var26.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);

  }

  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test102"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    int var27 = var12.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var40 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var45 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var51 = var49.getInitialObsForPid(100);
    var47.removeAllObs(var51);
    dynoptic.model.fifosys.cfsm.fsm.FSM var54 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var40, var45, var51, 100);
    var29.removeAllObs(var51);
    dynoptic.model.fifosys.cfsm.fsm.FSM var57 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var6, var12, var51, 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var62 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (-1), 1);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var68 = var66.getInitialObsForPid(100);
    var64.removeAllObs(var68);
    boolean var70 = var64.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var72 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var74 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var76 = var74.getInitialObsForPid(100);
    var72.removeAllObs(var76);
    java.util.Set var78 = var72.getTerminalObs();
    var64.removeAllObs(var78);
    dynoptic.model.automaton.EventTypeEncodings var80 = new dynoptic.model.automaton.EventTypeEncodings(var78);
    dynoptic.model.fifosys.cfsm.fsm.FSM var82 = new dynoptic.model.fifosys.cfsm.fsm.FSM(0, var12, var62, var78, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var83 = new dynoptic.model.fifosys.cfsm.CFSMState(var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var85 = var83.isInitForPid(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test103"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath(var21, (-1));
    boolean var24 = var17.equals((java.lang.Object)var21);
    java.util.Set var25 = var21.getTerminalObs();
    java.util.Set var26 = var21.getTransitioningEvents();
    java.lang.String var27 = var21.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[]"+ "'", var27.equals("[]"));

  }

  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test104"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var16 = var13.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var17 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = var17.getObsState();
    boolean var19 = var17.isEnabled();
    var17.setOccurred(false);
    var8.addRemoteDependency(var17);
    boolean var23 = var8.hasOccurred();
    var8.setOccurred(true);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var26 = var8.getObsState();
    boolean var27 = var26.isInitial();
    java.lang.String var28 = var26.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "i_hi!_t"+ "'", var28.equals("i_hi!_t"));

  }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test105"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    java.util.Iterator var39 = var0.iterator();
    boolean var40 = var0.isEmpty();
    var0.clear();
    int var42 = var0.size();
    int var43 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);

  }

  public void test106() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test106"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var9 = var1.numEvents();
    boolean var10 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    java.util.Set var18 = var12.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath(var12, 0);
    boolean var22 = var12.isAcceptForPid(10);
    dynoptic.model.fifosys.gfsm.GFSMPath var24 = new dynoptic.model.fifosys.gfsm.GFSMPath(var12, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = var24.lastState();
    dynoptic.model.fifosys.gfsm.GFSMState var26 = var24.lastState();
    dynoptic.model.fifosys.gfsm.GFSMPath var27 = new dynoptic.model.fifosys.gfsm.GFSMPath(var24);
    dynoptic.model.fifosys.gfsm.GFSMPath var28 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var27);
    int var29 = var28.numEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);

  }

  public void test107() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test107"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    java.lang.Object[] var39 = var0.toArray();
    int var40 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);

  }

  public void test108() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test108"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    java.lang.Object[] var2 = var0.toArray();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var8 = var5.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    dynoptic.model.alphabet.FSMAlphabet var16 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    boolean var24 = var18.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var30 = var28.getInitialObsForPid(100);
    var26.removeAllObs(var30);
    java.util.Set var32 = var26.getTerminalObs();
    var18.removeAllObs(var32);
    boolean var34 = var16.retainAll((java.util.Collection)var32);
    java.lang.Object[] var36 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var37 = var16.toArray(var36);
    java.lang.Object[] var38 = var16.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var5, var14, (java.util.Set)var16);
    boolean var40 = var0.removeAll((java.util.Collection)var14);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var46 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var45);
    java.lang.String var47 = var46.toString();
    boolean var48 = var46.hasOccurred();
    int var49 = var46.getPid();
    boolean var50 = var0.remove((java.lang.Object)var46);
    int var51 = var46.getPid();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var52 = var46.getPrevState();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var47.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);

  }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test109"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    java.util.Iterator var39 = var0.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var42 = var41.toIntermediateString();
    boolean var43 = var41.isAccept();
    boolean var44 = var0.contains((java.lang.Object)var43);
    dynoptic.model.automaton.EventTypeEncodings var45 = new dynoptic.model.automaton.EventTypeEncodings((java.util.Set)var0);
    dynoptic.model.alphabet.FSMAlphabet var46 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var69 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var73 = var71.getInitialObsForPid(100);
    var69.removeAllObs(var73);
    dynoptic.model.fifosys.gfsm.GFSMState var76 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var80 = var78.getInitialObsForPid(100);
    var76.removeAllObs(var80);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var58, var73, var80);
    boolean var83 = var46.retainAll((java.util.Collection)var80);
    java.lang.String var84 = var46.toString();
    boolean var85 = var0.addAll((java.util.Collection)var46);
    java.lang.Object[] var86 = var46.toArray();
    java.lang.Object[] var87 = var46.toArray();
    java.util.Set var88 = var46.getLocalEventScmStrings();
    var46.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Part-0-1816018248"+ "'", var42.equals("Part-0-1816018248"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "[]"+ "'", var84.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test110() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test110"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    boolean var9 = var1.isInitForPid(1);
    boolean var11 = var1.isAcceptForPid(100);
    boolean var12 = var1.isAccept();
    java.lang.String var13 = var1.toString();
    boolean var15 = var1.isAcceptForPid(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test111() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test111"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var45 = var42.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var46 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var51 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var52 = var51.getName();
    boolean var53 = var42.equals((java.lang.Object)var51);
    boolean var54 = var0.contains((java.lang.Object)var42);
    dynoptic.model.alphabet.FSMAlphabet var55 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var61 = var59.getInitialObsForPid(100);
    var57.removeAllObs(var61);
    boolean var63 = var57.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var65 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var69 = var67.getInitialObsForPid(100);
    var65.removeAllObs(var69);
    java.util.Set var71 = var65.getTerminalObs();
    var57.removeAllObs(var71);
    boolean var73 = var55.retainAll((java.util.Collection)var71);
    java.lang.Object[] var75 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var76 = var55.toArray(var75);
    java.lang.Object[] var77 = var0.toArray(var75);
    dynoptic.model.alphabet.FSMAlphabet var78 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var79 = var78.toScmParametersString();
    var78.clear();
    java.lang.String var81 = var78.toString();
    boolean var82 = var0.removeAll((java.util.Collection)var78);
    int var83 = var0.size();
    java.lang.Object[] var84 = var0.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var89 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    java.lang.String var90 = var89.toShortIntString();
    java.util.Set var91 = var89.getNextStates();
    boolean var92 = var0.addAll((java.util.Collection)var91);
    java.lang.String var93 = var0.toScmParametersString();
    java.lang.Object[] var94 = var0.toArray();
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var52.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + ""+ "'", var79.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "[]"+ "'", var81.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "0"+ "'", var90.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + ""+ "'", var93.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test112() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test112"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 0);
    boolean var10 = var1.isAccept();
    dynoptic.model.alphabet.FSMAlphabet var11 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    dynoptic.model.fifosys.cfsm.fsm.FSM var32 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var18, var23, var29, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var45 = var43.getInitialObsForPid(100);
    var41.removeAllObs(var45);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var23, var38, var45);
    boolean var48 = var11.retainAll((java.util.Collection)var45);
    java.lang.Object[] var49 = var11.toArray();
    java.util.Iterator var50 = var11.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var53 = var52.toIntermediateString();
    boolean var54 = var52.isAccept();
    boolean var55 = var11.contains((java.lang.Object)var54);
    dynoptic.model.automaton.EventTypeEncodings var56 = new dynoptic.model.automaton.EventTypeEncodings((java.util.Set)var11);
    dynoptic.model.alphabet.FSMAlphabet var57 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var64 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var69 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    var71.removeAllObs(var75);
    dynoptic.model.fifosys.cfsm.fsm.FSM var78 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var64, var69, var75, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var82 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var84 = var82.getInitialObsForPid(100);
    var80.removeAllObs(var84);
    dynoptic.model.fifosys.gfsm.GFSMState var87 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var89 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var91 = var89.getInitialObsForPid(100);
    var87.removeAllObs(var91);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var69, var84, var91);
    boolean var94 = var57.retainAll((java.util.Collection)var91);
    java.lang.String var95 = var57.toString();
    boolean var96 = var11.addAll((java.util.Collection)var57);
    java.util.Set var97 = var11.getLocalEventScmStrings();
    var1.addAllObs(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "Part-0-1898694346"+ "'", var53.equals("Part-0-1898694346"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "[]"+ "'", var95.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test113"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    java.util.Set var22 = var14.getTerminalObsForPid(100);
    java.lang.String var23 = var14.toLongString();
    java.util.Set var24 = var14.getInitialObservations();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var31 = var30.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var42 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var48 = var46.getInitialObsForPid(100);
    var44.removeAllObs(var48);
    dynoptic.model.fifosys.cfsm.fsm.FSM var51 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var37, var42, var48, 100);
    int var52 = var37.getPid();
    int var53 = var37.getScmId();
    dynoptic.model.alphabet.FSMAlphabet var54 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var61 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var66 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var70 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var72 = var70.getInitialObsForPid(100);
    var68.removeAllObs(var72);
    dynoptic.model.fifosys.cfsm.fsm.FSM var75 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var61, var66, var72, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var79 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var81 = var79.getInitialObsForPid(100);
    var77.removeAllObs(var81);
    dynoptic.model.fifosys.gfsm.GFSMState var84 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var88 = var86.getInitialObsForPid(100);
    var84.removeAllObs(var88);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var66, var81, var88);
    boolean var91 = var54.retainAll((java.util.Collection)var88);
    java.lang.String var92 = var54.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var94 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var30, var37, (java.util.Set)var54, 1);
    var14.removeAllObs((java.util.Set)var54);
    java.util.Set var96 = var14.getInitialObservations();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-695794294"+ "'", var15.equals("Part-0-695794294"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "[]"+ "'", var92.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test114() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test114"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    java.util.Set var8 = var2.getTerminalObs();
    int var9 = var2.getNumProcesses();
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    java.util.Set var14 = var11.getTransitioningEvents();
    java.util.Set var15 = var11.getInitialObservations();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var21 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.cfsm.fsm.FSM var35 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var21, var26, var32, 100);
    dynoptic.model.automaton.EventTypeEncodings var36 = var35.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var41 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var42 = var36.equals((java.lang.Object)true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSM var62 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var48, var53, var59, 100);
    int var63 = var48.getPid();
    java.lang.String var64 = var48.toLongString();
    boolean var65 = var36.equals((java.lang.Object)var64);
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var69 = var67.getInitialObsForPid(100);
    java.util.Set var70 = var67.getTransitioningEvents();
    boolean var71 = var36.equals((java.lang.Object)var70);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(1, (dynoptic.model.AbsFSMState)var2, var15, var70);
    boolean var74 = var2.isInitForPid(10);
    dynoptic.model.fifosys.gfsm.GFSMPath var76 = new dynoptic.model.fifosys.gfsm.GFSMPath(var2, 10);
    int var77 = var76.numEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var64.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);

  }

  public void test115() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test115"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.util.Set var12 = var5.getInitialObsForPid((-1));
    java.lang.String var13 = var5.toLongString();
    java.lang.String var14 = var5.toString();
    dynoptic.model.alphabet.FSMAlphabet var15 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var22 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.fifosys.cfsm.fsm.FSM var36 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var22, var27, var33, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    var45.removeAllObs(var49);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var27, var42, var49);
    boolean var52 = var15.retainAll((java.util.Collection)var49);
    java.lang.Object[] var53 = var15.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var59 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var64 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var70 = var68.getInitialObsForPid(100);
    var66.removeAllObs(var70);
    dynoptic.model.fifosys.cfsm.fsm.FSM var73 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var59, var64, var70, 100);
    int var74 = var73.getPid();
    java.util.Set var75 = var73.getAcceptStates();
    boolean var76 = var15.retainAll((java.util.Collection)var75);
    boolean var77 = var15.isEmpty();
    var15.clear();
    java.lang.Object[] var79 = var15.toArray();
    java.lang.Object[] var80 = var15.toArray();
    var5.addAllObs((java.util.Set)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "[]"+ "'", var13.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test116() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test116"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    java.util.Set var17 = var1.getTransitioningEvents();
    java.util.Set var18 = var1.getNextStates();
    java.lang.String var19 = var1.toIntermediateString();
    boolean var21 = var1.isInitForPid(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Part-0-1145134670"+ "'", var19.equals("Part-0-1145134670"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test117() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test117"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var2 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    int var3 = var1.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMState var6 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var8 = var6.getInitialObsForPid(100);
    java.lang.String var9 = var6.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var15 = var13.getInitialObsForPid(100);
    var11.removeAllObs(var15);
    dynoptic.model.alphabet.FSMAlphabet var17 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    boolean var25 = var19.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    java.util.Set var33 = var27.getTerminalObs();
    var19.removeAllObs(var33);
    boolean var35 = var17.retainAll((java.util.Collection)var33);
    java.lang.Object[] var37 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var38 = var17.toArray(var37);
    java.lang.Object[] var39 = var17.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var6, var15, (java.util.Set)var17);
    java.lang.String var41 = var6.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMPath var43 = new dynoptic.model.fifosys.gfsm.GFSMPath(var6, 0);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var43);
    int var45 = var44.numEvents();
    int var46 = var44.numEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "[]"+ "'", var41.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);

  }

  public void test118() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test118"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    java.lang.Object[] var2 = var0.toArray();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var8 = var5.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    dynoptic.model.alphabet.FSMAlphabet var16 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    boolean var24 = var18.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var30 = var28.getInitialObsForPid(100);
    var26.removeAllObs(var30);
    java.util.Set var32 = var26.getTerminalObs();
    var18.removeAllObs(var32);
    boolean var34 = var16.retainAll((java.util.Collection)var32);
    java.lang.Object[] var36 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var37 = var16.toArray(var36);
    java.lang.Object[] var38 = var16.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var5, var14, (java.util.Set)var16);
    boolean var40 = var0.removeAll((java.util.Collection)var14);
    int var41 = var0.size();
    java.util.Set var42 = var0.getLocalEventScmStrings();
    java.lang.Object[] var43 = var0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test119() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test119"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getAcceptStates();
    dynoptic.model.alphabet.FSMAlphabet var22 = var19.getAlphabet();
    java.lang.String var23 = var22.anyEventScmQRe();
    java.lang.String var24 = var22.toString();
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var28 = var26.getInitialObsForPid(100);
    boolean var29 = var26.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var31 = new dynoptic.model.fifosys.gfsm.GFSMPath(var26, 10);
    dynoptic.model.alphabet.FSMAlphabet var32 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    boolean var40 = var34.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var46 = var44.getInitialObsForPid(100);
    var42.removeAllObs(var46);
    java.util.Set var48 = var42.getTerminalObs();
    var34.removeAllObs(var48);
    boolean var50 = var32.retainAll((java.util.Collection)var48);
    java.lang.String var51 = var32.toString();
    var26.addAllObs((java.util.Set)var32);
    dynoptic.model.alphabet.FSMAlphabet var53 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var65 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var69 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var71 = var69.getInitialObsForPid(100);
    var67.removeAllObs(var71);
    dynoptic.model.fifosys.cfsm.fsm.FSM var74 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var60, var65, var71, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var76 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var80 = var78.getInitialObsForPid(100);
    var76.removeAllObs(var80);
    dynoptic.model.fifosys.gfsm.GFSMState var83 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var85 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var87 = var85.getInitialObsForPid(100);
    var83.removeAllObs(var87);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var65, var80, var87);
    boolean var90 = var53.retainAll((java.util.Collection)var87);
    int var91 = var53.size();
    boolean var92 = var32.retainAll((java.util.Collection)var53);
    boolean var93 = var32.isEmpty();
    int var94 = var32.size();
    java.lang.String var95 = var32.toString();
    boolean var96 = var22.addAll((java.util.Collection)var32);
    var22.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(_)"+ "'", var23.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "[]"+ "'", var51.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "[]"+ "'", var95.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);

  }

  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test120"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 100);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath(var10);
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var14 = var13.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath(var10, var13);
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var17);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var21 = var20.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(var17, var20);
    dynoptic.model.fifosys.gfsm.GFSMPath var24 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var25 = new dynoptic.model.fifosys.gfsm.GFSMPath(var20, var24);
    boolean var26 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var24);
    dynoptic.model.fifosys.gfsm.GFSMPath var27 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, var24);
    dynoptic.model.fifosys.gfsm.GFSMPath var29 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var30 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var29);
    dynoptic.model.fifosys.gfsm.GFSMPath var31 = new dynoptic.model.fifosys.gfsm.GFSMPath(var24, var29);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    java.util.Set var36 = var33.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var38 = new dynoptic.model.fifosys.gfsm.GFSMPath(var33, (-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var39 = new dynoptic.model.fifosys.gfsm.GFSMPath(var29, var38);
    dynoptic.model.fifosys.gfsm.GFSMPath var40 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var39);
    dynoptic.model.fifosys.gfsm.GFSMPath var41 = new dynoptic.model.fifosys.gfsm.GFSMPath(var40);
    dynoptic.model.fifosys.gfsm.GFSMPath var42 = new dynoptic.model.fifosys.gfsm.GFSMPath(var40);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var43 = var40.toString();
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test121() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test121"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(0);
    var1.recreateCachedTransitions();
    var1.recreateCachedTransitions();
    java.lang.String var4 = var1.toIntermediateString();
    boolean var6 = var1.isAcceptForPid(10);
    boolean var8 = var1.isInitForPid(0);
    dynoptic.model.alphabet.FSMAlphabet var9 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var10 = var9.toScmParametersString();
    dynoptic.model.alphabet.FSMAlphabet var11 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    dynoptic.model.fifosys.cfsm.fsm.FSM var32 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var18, var23, var29, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var45 = var43.getInitialObsForPid(100);
    var41.removeAllObs(var45);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var23, var38, var45);
    boolean var48 = var11.retainAll((java.util.Collection)var45);
    java.lang.Object[] var49 = var11.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    int var70 = var69.getPid();
    java.util.Set var71 = var69.getAcceptStates();
    boolean var72 = var11.retainAll((java.util.Collection)var71);
    boolean var73 = var11.isEmpty();
    var11.clear();
    boolean var75 = var9.containsAll((java.util.Collection)var11);
    java.util.Iterator var76 = var11.iterator();
    java.lang.String var77 = var11.anyEventScmQRe();
    java.util.Set var78 = var11.getLocalEventScmStrings();
    java.lang.String var79 = var11.toString();
    dynoptic.model.fifosys.gfsm.GFSMState var81 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var82 = var81.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var84 = new dynoptic.model.fifosys.gfsm.GFSMPath(var81, 1);
    java.util.Set var85 = var81.getInitialObservations();
    java.util.Set var86 = var81.getTransitioningEvents();
    boolean var87 = var11.contains((java.lang.Object)var86);
    var1.addAllObs((java.util.Set)var11);
    java.util.Set var90 = var1.getInitialObsForPid(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Part-0-1916010176"+ "'", var4.equals("Part-0-1916010176"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "(_)"+ "'", var77.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "[]"+ "'", var79.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "Part-0-818565643"+ "'", var82.equals("Part-0-818565643"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test122() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test122"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var14 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    java.lang.String var15 = var14.toString();
    boolean var16 = var14.hasOccurred();
    int var17 = var14.getPid();
    boolean var18 = var14.isInitState();
    var8.addRemoteDependency(var14);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var26 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var27 = var24.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var28 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var24);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var33 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var35 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var36 = var33.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var37 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var33);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var38 = var37.getObsState();
    boolean var39 = var37.isEnabled();
    var37.setOccurred(false);
    var28.addRemoteDependency(var37);
    synoptic.model.event.Event var43 = var37.getNextEvent();
    synoptic.model.event.Event var44 = var37.getNextEvent();
    var8.addRemoteDependency(var37);
    synoptic.model.event.Event var46 = var8.getNextEvent();
    int var47 = var8.getPid();
    boolean var48 = var8.isEnabled();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var49 = var8.getNextState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var15.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);

  }

  public void test123() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test123"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var25 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var26 = var20.equals((java.lang.Object)true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    dynoptic.model.fifosys.cfsm.fsm.FSM var46 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var32, var37, var43, 100);
    int var47 = var32.getPid();
    java.lang.String var48 = var32.toLongString();
    boolean var49 = var20.equals((java.lang.Object)var48);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    java.util.Set var70 = var69.getAcceptStates();
    java.util.Set var71 = var69.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var77 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var82 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var84 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var88 = var86.getInitialObsForPid(100);
    var84.removeAllObs(var88);
    dynoptic.model.fifosys.cfsm.fsm.FSM var91 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var77, var82, var88, 100);
    dynoptic.model.automaton.EventTypeEncodings var92 = var91.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var93 = var69.getEncodedAutomaton(var92);
    dynoptic.model.automaton.EncodedAutomaton var94 = new dynoptic.model.automaton.EncodedAutomaton(var20, var69);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var96 = var20.getEventType(' ');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var48.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test124"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, false, 0, 100);
    var4.setAccept();
    java.lang.String var6 = var4.toShortIntString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "100"+ "'", var6.equals("100"));

  }

  public void test125() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test125"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    java.util.Set var18 = var1.getInitialObsForPid(10);
    java.util.Set var20 = var1.getInitialObsForPid(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test126"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var3 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = var3.lastState();
    java.lang.String var5 = var4.toString();
    java.util.Set var6 = var4.getTerminalObs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test127() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test127"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    var1.removeAllObs(var23);
    java.util.Set var29 = var1.getInitialObsForPid((-1));
    dynoptic.model.automaton.EventTypeEncodings var30 = new dynoptic.model.automaton.EventTypeEncodings(var29);
    dynoptic.model.export.DotExportFormatter var31 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var32 = var31.beginGraphString();
    java.lang.String var33 = var31.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    boolean var39 = var36.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var41 = new dynoptic.model.fifosys.gfsm.GFSMPath(var36, 10);
    java.lang.String var44 = var31.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var36, false, false);
    java.lang.String var45 = var31.endGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var69 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var73 = var71.getInitialObsForPid(100);
    var69.removeAllObs(var73);
    dynoptic.model.fifosys.gfsm.GFSMState var76 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var80 = var78.getInitialObsForPid(100);
    var76.removeAllObs(var80);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var58, var73, var80);
    dynoptic.model.fifosys.gfsm.GFSMPath var84 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var85 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var84);
    boolean var86 = var58.equals((java.lang.Object)var85);
    dynoptic.model.fifosys.cfsm.CFSMState var87 = new dynoptic.model.fifosys.cfsm.CFSMState(var58);
    boolean var88 = var87.isInitial();
    boolean var89 = var87.isInitial();
    boolean var90 = var87.isAccept();
    java.lang.String var93 = var31.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var87, false, true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var95 = var87.getFSMState(0);
    boolean var96 = var30.equals((java.lang.Object)var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "digraph {\n"+ "'", var32.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "} // digraph {\n"+ "'", var33.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var44.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "} // digraph {\n"+ "'", var45.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "  1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@4d7f1976\",shape=circle,shape=doublecircle];\n"+ "'", var93.equals("  1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@4d7f1976\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);

  }

  public void test128() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test128"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    int var21 = var5.getScmId();
    int var22 = var5.getPid();
    dynoptic.model.fifosys.cfsm.CFSMState var23 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    java.util.Set var24 = var23.getTransitioningEvents();
    java.util.Set var25 = var23.getTransitioningEvents();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = var23.getFSMState(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test129"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 0);
    boolean var11 = var1.isAcceptForPid(10);
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 100);
    boolean var14 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var13);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var17 = var16.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var19 = new dynoptic.model.fifosys.gfsm.GFSMPath(var16, 1);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath(var19);
    dynoptic.model.fifosys.gfsm.GFSMPath var21 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, var19);
    int var22 = var21.numStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Part-0-213581871"+ "'", var17.equals("Part-0-213581871"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2);

  }

  public void test130() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test130"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    boolean var40 = var11.isAccept();
    var11.setAccept();
    boolean var42 = var11.isInitial();
    var11.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var44 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    var11.setAccept();
    boolean var46 = var11.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);

  }

  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test131"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var20 = var18.getInitialObsForPid(100);
    java.lang.String var21 = var18.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var28 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.fifosys.cfsm.fsm.FSM var42 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var28, var33, var39, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var48 = var46.getInitialObsForPid(100);
    var44.removeAllObs(var48);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var33, var48, var55);
    var18.removeAllObs(var55);
    var1.addAllObs(var55);
    java.util.Set var60 = var1.getTransitioningEvents();
    java.util.Set var61 = var1.getTerminalObs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test132() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test132"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState((-1), true, false);
    java.lang.String var5 = var4.getName();
    dynoptic.model.export.DotExportFormatter var6 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var7 = var6.beginGraphString();
    java.lang.String var8 = var6.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    java.lang.String var16 = var6.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var11, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var20 = var19.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(var19, 1);
    java.lang.String var25 = var6.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var19, true, true);
    java.lang.String var26 = var6.beginGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.cfsm.fsm.FSM var47 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var33, var38, var44, 100);
    int var48 = var33.getPid();
    int var49 = var33.getScmId();
    int var50 = var33.getPid();
    java.lang.String var53 = var6.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var33, false, false);
    var33.setAccept();
    boolean var55 = var4.equals((java.lang.Object)var33);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 100, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var63 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var65 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var67 = var65.getInitialObsForPid(100);
    var63.removeAllObs(var67);
    java.util.Set var69 = var63.getTransitioningEvents();
    dynoptic.model.automaton.EventTypeEncodings var70 = new dynoptic.model.automaton.EventTypeEncodings(var69);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var76 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var81 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var83 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var85 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var87 = var85.getInitialObsForPid(100);
    var83.removeAllObs(var87);
    dynoptic.model.fifosys.cfsm.fsm.FSM var90 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var76, var81, var87, 100);
    var76.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var92 = new dynoptic.model.fifosys.cfsm.CFSMState(var76);
    java.util.Set var93 = var92.getTransitioningEvents();
    boolean var94 = var70.equals((java.lang.Object)var93);
    dynoptic.model.fifosys.gfsm.GFSMState var95 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var93);
    dynoptic.model.fifosys.cfsm.fsm.FSM var97 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var33, var60, var93, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "129"+ "'", var5.equals("129"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "digraph {\n"+ "'", var7.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "digraph {\n"+ "'", var8.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var16.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Part-0-134652319"+ "'", var20.equals("Part-0-134652319"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var25.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "digraph {\n"+ "'", var26.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "  1 [label=\"0\",shape=circle];\n"+ "'", var53.equals("  1 [label=\"0\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test133() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test133"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    java.lang.String var2 = var1.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, (-1));
    boolean var6 = var1.isInitForPid(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-1718433833"+ "'", var2.equals("Part-0-1718433833"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test134() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test134"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, false, 10, (-1));

  }

  public void test135() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test135"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTerminalObs();
    java.lang.String var8 = var1.toIntermediateString();
    java.util.Set var10 = var1.getTerminalObsForPid(10);
    java.util.Set var11 = var1.getInitialObservations();
    java.util.Set var12 = var1.getTerminalObs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Part-0-2001310914"+ "'", var8.equals("Part-0-2001310914"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test136() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test136"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    java.util.Set var8 = var2.getTerminalObs();
    java.util.Set var10 = var2.getInitialObsForPid(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10, var10);
    dynoptic.model.automaton.EventTypeEncodings var12 = new dynoptic.model.automaton.EventTypeEncodings(var10);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    dynoptic.model.fifosys.cfsm.fsm.FSM var32 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var18, var23, var29, 100);
    java.util.Set var33 = var32.getAcceptStates();
    java.util.Set var34 = var32.getStates();
    java.lang.String var35 = var32.toString();
    int var36 = var32.getPid();
    java.lang.String var37 = var32.toString();
    java.util.Set var38 = var32.getAcceptStates();
    dynoptic.model.automaton.EventTypeEncodings var39 = var32.getEventTypeEncodings();
    dynoptic.model.automaton.EventTypeEncodings var40 = var32.getEventTypeEncodings();
    java.util.Set var41 = var32.getAcceptStates();
    dynoptic.model.automaton.EncodedAutomaton var42 = new dynoptic.model.automaton.EncodedAutomaton(var12, var32);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSM var62 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var48, var53, var59, 100);
    java.util.Set var63 = var62.getAcceptStates();
    java.lang.String var64 = var62.toString();
    boolean var65 = var62.isDeterministic();
    boolean var66 = var62.isDeterministic();
    dynoptic.model.automaton.EventTypeEncodings var67 = var62.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var68 = new dynoptic.model.automaton.EncodedAutomaton(var12, var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var35.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var37.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var64.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test137() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test137"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var37 = var35.getInitialObsForPid(100);
    var33.removeAllObs(var37);
    dynoptic.model.fifosys.cfsm.fsm.FSM var40 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var26, var31, var37, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var57 = var55.getInitialObsForPid(100);
    var53.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var60 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var46, var51, var57, 100);
    dynoptic.model.automaton.EventTypeEncodings var61 = var60.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var66 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var67 = var61.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var68 = var40.getEncodedAutomaton(var61);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var74 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var79 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var81 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var83 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var85 = var83.getInitialObsForPid(100);
    var81.removeAllObs(var85);
    dynoptic.model.fifosys.cfsm.fsm.FSM var88 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var74, var79, var85, 100);
    dynoptic.model.automaton.EventTypeEncodings var89 = var88.getEventTypeEncodings();
    boolean var90 = var68.equals((java.lang.Object)var88);
    java.util.Set var91 = var88.getStates();
    java.util.Set var92 = var88.getAcceptStates();
    java.lang.String var93 = var88.toString();
    dynoptic.model.automaton.EncodedAutomaton var94 = new dynoptic.model.automaton.EncodedAutomaton(var20, var88);
    java.util.Set var95 = var88.getStates();
    int var96 = var88.getPid();
    dynoptic.model.alphabet.FSMAlphabet var97 = var88.getAlphabet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var93.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test138() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test138"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    java.lang.String var21 = var11.toShortIntString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (-1), 1);
    java.lang.String var27 = var26.toShortIntString();
    java.util.Set var28 = var26.getNextStates();
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    boolean var36 = var30.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    java.util.Set var44 = var38.getTerminalObs();
    var30.removeAllObs(var44);
    dynoptic.model.automaton.EventTypeEncodings var46 = new dynoptic.model.automaton.EventTypeEncodings(var44);
    boolean var48 = var46.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var52 = new dynoptic.model.fifosys.gfsm.GFSMPath(var50, (-1));
    boolean var53 = var46.equals((java.lang.Object)var50);
    java.util.Set var54 = var50.getTerminalObs();
    dynoptic.model.fifosys.cfsm.fsm.FSM var56 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var11, var26, var54, 100);
    java.lang.String var57 = var26.toShortIntString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var63 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var68 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var70 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var72 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var74 = var72.getInitialObsForPid(100);
    var70.removeAllObs(var74);
    dynoptic.model.fifosys.cfsm.fsm.FSM var77 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var63, var68, var74, 100);
    int var78 = var77.getPid();
    java.util.Set var79 = var77.getStates();
    java.util.Set var80 = var77.getStates();
    dynoptic.model.automaton.EventTypeEncodings var81 = var77.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.GFSMState var83 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var84 = var83.toIntermediateString();
    boolean var85 = var83.isAccept();
    java.util.Set var86 = var83.getTerminalObs();
    boolean var87 = var77.equals((java.lang.Object)var86);
    boolean var88 = var26.equals((java.lang.Object)var77);
    var77.minimize();
    java.util.Set var90 = var77.getAcceptStates();
    dynoptic.model.automaton.EventTypeEncodings var91 = var77.getEventTypeEncodings();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "0"+ "'", var21.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "1"+ "'", var27.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "1"+ "'", var57.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "Part-0-1566463766"+ "'", var84.equals("Part-0-1566463766"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test139"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("ObsDAGNode[i_hi!_t]_t");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ObsDAGNode[i_hi!_t]_t"+ "'", var2.equals("ObsDAGNode[i_hi!_t]_t"));

  }

  public void test140() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test140"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    java.lang.String var8 = var4.getName();
    java.lang.String var9 = var4.getName();
    boolean var11 = var4.equals((java.lang.Object)"Part-0-992492175");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test141() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test141"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var9 = var8.lastState();
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var12 = var11.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var14 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, 1);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14);
    int var16 = var15.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var19 = new dynoptic.model.fifosys.gfsm.GFSMPath(var18);
    dynoptic.model.fifosys.gfsm.GFSMPath var21 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var22 = var21.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath(var18, var21);
    dynoptic.model.fifosys.gfsm.GFSMPath var25 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var26 = new dynoptic.model.fifosys.gfsm.GFSMPath(var21, var25);
    boolean var27 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var25);
    dynoptic.model.fifosys.gfsm.GFSMPath var28 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15, var25);
    dynoptic.model.fifosys.gfsm.GFSMPath var29 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var28);
    int var30 = var8.numStates();
    dynoptic.model.fifosys.gfsm.GFSMPath var32 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var33 = new dynoptic.model.fifosys.gfsm.GFSMPath(var32);
    dynoptic.model.fifosys.gfsm.GFSMPath var35 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var36 = var35.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(var32, var35);
    dynoptic.model.fifosys.gfsm.GFSMPath var39 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var40 = new dynoptic.model.fifosys.gfsm.GFSMPath(var39);
    dynoptic.model.fifosys.gfsm.GFSMPath var42 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var43 = var42.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath(var39, var42);
    dynoptic.model.fifosys.gfsm.GFSMPath var46 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var47 = new dynoptic.model.fifosys.gfsm.GFSMPath(var42, var46);
    boolean var48 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var46);
    dynoptic.model.fifosys.gfsm.GFSMPath var49 = new dynoptic.model.fifosys.gfsm.GFSMPath(var35, var46);
    dynoptic.model.fifosys.gfsm.GFSMPath var50 = new dynoptic.model.fifosys.gfsm.GFSMPath(var35);
    dynoptic.model.fifosys.gfsm.GFSMPath var52 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var53 = new dynoptic.model.fifosys.gfsm.GFSMPath(var52);
    dynoptic.model.fifosys.gfsm.GFSMPath var54 = new dynoptic.model.fifosys.gfsm.GFSMPath(var52);
    dynoptic.model.fifosys.gfsm.GFSMPath var56 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var57 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var56);
    dynoptic.model.fifosys.gfsm.GFSMPath var58 = new dynoptic.model.fifosys.gfsm.GFSMPath(var52, var56);
    dynoptic.model.fifosys.gfsm.GFSMPath var59 = new dynoptic.model.fifosys.gfsm.GFSMPath(var50, var58);
    dynoptic.model.fifosys.gfsm.GFSMPath var60 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Part-0-1472171552"+ "'", var12.equals("Part-0-1472171552"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);

  }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test142"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var2 = var1.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 1);
    dynoptic.model.fifosys.gfsm.GFSMPath var5 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4);
    int var6 = var5.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var11);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, var15);
    boolean var17 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, var15);
    int var19 = var15.numStates();
    dynoptic.model.fifosys.gfsm.GFSMPath var21 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var22 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var21);
    int var23 = var21.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var28 = var26.getInitialObsForPid(100);
    java.lang.String var29 = var26.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.alphabet.FSMAlphabet var37 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    boolean var45 = var39.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var51 = var49.getInitialObsForPid(100);
    var47.removeAllObs(var51);
    java.util.Set var53 = var47.getTerminalObs();
    var39.removeAllObs(var53);
    boolean var55 = var37.retainAll((java.util.Collection)var53);
    java.lang.Object[] var57 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var58 = var37.toArray(var57);
    java.lang.Object[] var59 = var37.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var26, var35, (java.util.Set)var37);
    java.lang.String var61 = var26.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMPath var63 = new dynoptic.model.fifosys.gfsm.GFSMPath(var26, 0);
    dynoptic.model.fifosys.gfsm.GFSMPath var64 = new dynoptic.model.fifosys.gfsm.GFSMPath(var21, var63);
    dynoptic.model.fifosys.gfsm.GFSMPath var65 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15, var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-119615884"+ "'", var2.equals("Part-0-119615884"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "[]"+ "'", var29.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "[]"+ "'", var61.equals("[]"));

  }

  public void test143() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test143"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    java.lang.String var13 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var5, false, false);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var18 = var16.getTerminalObsForPid(1);
    java.lang.String var19 = var16.toLongString();
    java.lang.String var22 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var16, false, false);
    java.lang.String var23 = var0.endGraphString();
    java.lang.String var24 = var0.endGraphString();
    dynoptic.model.export.DotExportFormatter var26 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var27 = var26.beginGraphString();
    java.lang.String var28 = var26.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    java.lang.String var36 = var26.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var31, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var40 = var39.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var42 = new dynoptic.model.fifosys.gfsm.GFSMPath(var39, 1);
    java.lang.String var45 = var26.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var39, true, true);
    java.lang.String var46 = var39.toString();
    java.util.Set var47 = var39.getInitialObservations();
    java.lang.String var50 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString((-1), (dynoptic.model.AbsFSMState)var39, true, true);
    java.lang.String var51 = var39.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var13.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]_i_t"+ "'", var19.equals("[]_i_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "  100 [label=\"[]\",shape=circle];\n"+ "'", var22.equals("  100 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "} // digraph {\n"+ "'", var23.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "} // digraph {\n"+ "'", var24.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "digraph {\n"+ "'", var27.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "digraph {\n"+ "'", var28.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var36.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "Part-0-107249402"+ "'", var40.equals("Part-0-107249402"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var45.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "[]"+ "'", var46.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "  -1 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->-1;\n"+ "'", var50.equals("  -1 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->-1;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "[]"+ "'", var51.equals("[]"));

  }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test144"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    java.lang.String var7 = var4.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    dynoptic.model.alphabet.FSMAlphabet var15 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var21 = var19.getInitialObsForPid(100);
    var17.removeAllObs(var21);
    boolean var23 = var17.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    java.util.Set var31 = var25.getTerminalObs();
    var17.removeAllObs(var31);
    boolean var33 = var15.retainAll((java.util.Collection)var31);
    java.lang.Object[] var35 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var36 = var15.toArray(var35);
    java.lang.Object[] var37 = var15.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var4, var13, (java.util.Set)var15);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    boolean var46 = var40.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var52 = var50.getInitialObsForPid(100);
    var48.removeAllObs(var52);
    java.util.Set var54 = var48.getTerminalObs();
    var40.removeAllObs(var54);
    dynoptic.model.automaton.EventTypeEncodings var56 = new dynoptic.model.automaton.EventTypeEncodings(var54);
    boolean var57 = var15.addAll((java.util.Collection)var54);
    var1.removeAllObs((java.util.Set)var15);
    boolean var60 = var1.isInitForPid(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[]"+ "'", var7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test145"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    java.util.Set var8 = var2.getTerminalObs();
    java.util.Set var10 = var2.getInitialObsForPid(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10, var10);
    dynoptic.model.automaton.EventTypeEncodings var12 = new dynoptic.model.automaton.EventTypeEncodings(var10);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    dynoptic.model.fifosys.cfsm.fsm.FSM var32 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var18, var23, var29, 100);
    java.util.Set var33 = var32.getAcceptStates();
    java.util.Set var34 = var32.getStates();
    java.lang.String var35 = var32.toString();
    int var36 = var32.getPid();
    java.lang.String var37 = var32.toString();
    java.util.Set var38 = var32.getAcceptStates();
    dynoptic.model.automaton.EventTypeEncodings var39 = var32.getEventTypeEncodings();
    dynoptic.model.automaton.EventTypeEncodings var40 = var32.getEventTypeEncodings();
    java.util.Set var41 = var32.getAcceptStates();
    dynoptic.model.automaton.EncodedAutomaton var42 = new dynoptic.model.automaton.EncodedAutomaton(var12, var32);
    dk.brics.automaton.Automaton var43 = var42.getAutomaton();
    dk.brics.automaton.Automaton var44 = var42.getAutomaton();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var35.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var37.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test146() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test146"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath(var21, (-1));
    boolean var24 = var17.equals((java.lang.Object)var21);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var29 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var31 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var32 = var29.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var33 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var29);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var34 = var33.getObsState();
    java.lang.String var35 = var33.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var36 = var33.getObsState();
    boolean var37 = var33.isTermState();
    boolean var38 = var33.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var43 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var44 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var43);
    java.lang.String var45 = var44.toString();
    boolean var46 = var44.hasOccurred();
    synoptic.model.event.Event var47 = var44.getNextEvent();
    var33.addRemoteDependency(var44);
    boolean var49 = var17.equals((java.lang.Object)var33);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    int var70 = var69.getPid();
    java.util.Set var71 = var69.getInitStates();
    dynoptic.model.automaton.EncodedAutomaton var72 = new dynoptic.model.automaton.EncodedAutomaton(var17, var69);
    var72.minimize();
    var72.minimize();
    boolean var76 = var72.equals((java.lang.Object)"Part-0-1073225616");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var35.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var45.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test147"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    boolean var9 = var8.isInitState();
    boolean var10 = var8.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test148() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test148"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var14 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var17 = var14.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var18 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var14);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var19 = var18.getObsState();
    var8.addRemoteDependency(var18);
    var18.setOccurred(true);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var23 = var18.getObsState();
    boolean var24 = var18.isTermState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);

  }

  public void test149() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test149"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    java.lang.String var13 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var5, false, false);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var18 = var16.getTerminalObsForPid(1);
    java.lang.String var19 = var16.toLongString();
    java.lang.String var22 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var16, false, false);
    java.util.Set var23 = var16.getTransitioningEvents();
    java.lang.String var24 = var16.toIntermediateString();
    boolean var26 = var16.isAcceptForPid(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var13.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]_i_t"+ "'", var19.equals("[]_i_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "  100 [label=\"[]\",shape=circle];\n"+ "'", var22.equals("  100 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "Part-0-1067724210"+ "'", var24.equals("Part-0-1067724210"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test150() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test150"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var18);
    boolean var23 = var22.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var27 = var25.getTerminalObsForPid(1);
    java.util.Set var28 = var25.getObservedStates();
    var22.addAllObs(var28);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(100, var28);
    java.lang.String var31 = var30.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));

  }

  public void test151() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test151"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    java.lang.String var36 = var11.toLongString();
    boolean var37 = var11.isAccept();
    boolean var38 = var11.isInitial();
    java.lang.String var39 = var11.toLongString();
    var11.setAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var36.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var39.equals("FSM_state: init[true], accept[false] id[0]"));

  }

  public void test152() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test152"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getInitStates();
    java.util.Set var22 = var19.getStates();
    boolean var24 = var19.equals((java.lang.Object)"Part-0-1853704944");
    var19.minimize();
    java.util.Set var26 = var19.getInitStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    dynoptic.model.fifosys.cfsm.fsm.FSM var46 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var32, var37, var43, 100);
    int var47 = var46.getPid();
    java.util.Set var48 = var46.getStates();
    dynoptic.model.alphabet.FSMAlphabet var49 = var46.getAlphabet();
    dynoptic.model.automaton.EventTypeEncodings var50 = var46.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var51 = var19.getEncodedAutomaton(var50);
    dynoptic.model.alphabet.FSMAlphabet var52 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var58 = var56.getInitialObsForPid(100);
    var54.removeAllObs(var58);
    boolean var60 = var54.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    java.util.Set var68 = var62.getTerminalObs();
    var54.removeAllObs(var68);
    boolean var70 = var52.retainAll((java.util.Collection)var68);
    java.lang.Object[] var72 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var73 = var52.toArray(var72);
    java.lang.Object[] var74 = var52.toArray();
    boolean var75 = var19.equals((java.lang.Object)var52);
    var19.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test153"); }


    dynoptic.model.export.DotExportFormatter var1 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var2 = var1.beginGraphString();
    java.lang.String var3 = var1.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var6 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var8 = var6.getInitialObsForPid(100);
    java.lang.String var11 = var1.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var6, true, false);
    java.lang.String var12 = var1.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var16 = var15.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15, 1);
    java.lang.String var21 = var1.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var15, false, true);
    java.util.Set var23 = var15.getInitialObsForPid(100);
    java.util.Set var24 = var15.getInitialObservations();
    dynoptic.model.export.DotExportFormatter var25 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var26 = var25.beginGraphString();
    java.lang.String var27 = var25.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    java.lang.String var35 = var25.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var30, true, false);
    java.lang.String var36 = var25.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var40 = var39.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var42 = new dynoptic.model.fifosys.gfsm.GFSMPath(var39, 1);
    java.lang.String var45 = var25.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var39, false, true);
    java.util.Set var47 = var39.getInitialObsForPid(100);
    java.util.Set var48 = var39.getInitialObservations();
    dynoptic.model.alphabet.FSMAlphabet var49 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var56 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var61 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var63 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var65 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var67 = var65.getInitialObsForPid(100);
    var63.removeAllObs(var67);
    dynoptic.model.fifosys.cfsm.fsm.FSM var70 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var56, var61, var67, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var72 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var74 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var76 = var74.getInitialObsForPid(100);
    var72.removeAllObs(var76);
    dynoptic.model.fifosys.gfsm.GFSMState var79 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var81 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var83 = var81.getInitialObsForPid(100);
    var79.removeAllObs(var83);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var61, var76, var83);
    boolean var86 = var49.retainAll((java.util.Collection)var83);
    java.lang.Object[] var87 = var49.toArray();
    java.util.Iterator var88 = var49.iterator();
    java.lang.String var89 = var49.toScmParametersString();
    boolean var90 = var49.isEmpty();
    dynoptic.model.fifosys.cfsm.fsm.FSM var92 = new dynoptic.model.fifosys.cfsm.fsm.FSM(100, var24, var48, (java.util.Collection)var49, 10);
    java.lang.String var93 = var49.toScmParametersString();
    var49.clear();
    java.lang.String var95 = var49.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "digraph {\n"+ "'", var3.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var11.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "digraph {\n"+ "'", var12.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "Part-0-248844509"+ "'", var16.equals("Part-0-248844509"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var21.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "digraph {\n"+ "'", var26.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "digraph {\n"+ "'", var27.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var35.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "digraph {\n"+ "'", var36.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "Part-0-1866807265"+ "'", var40.equals("Part-0-1866807265"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var45.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + ""+ "'", var89.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + ""+ "'", var93.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "[]"+ "'", var95.equals("[]"));

  }

  public void test154() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test154"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.util.Set var4 = var1.getTransitioningEvents();
    boolean var6 = var1.isInitForPid(0);
    dynoptic.model.alphabet.FSMAlphabet var7 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    var21.removeAllObs(var25);
    dynoptic.model.fifosys.cfsm.fsm.FSM var28 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var14, var19, var25, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var19, var34, var41);
    boolean var44 = var7.retainAll((java.util.Collection)var41);
    java.lang.Object[] var45 = var7.toArray();
    java.util.Iterator var46 = var7.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var49 = var48.toIntermediateString();
    boolean var50 = var48.isAccept();
    boolean var51 = var7.contains((java.lang.Object)var50);
    java.util.Set var52 = var7.getLocalEventScmStrings();
    var1.addAllObs(var52);
    java.util.Set var54 = var1.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "Part-0-1449411886"+ "'", var49.equals("Part-0-1449411886"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test155"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    int var27 = var12.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var40 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var45 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var51 = var49.getInitialObsForPid(100);
    var47.removeAllObs(var51);
    dynoptic.model.fifosys.cfsm.fsm.FSM var54 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var40, var45, var51, 100);
    var29.removeAllObs(var51);
    dynoptic.model.fifosys.cfsm.fsm.FSM var57 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var6, var12, var51, 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var62 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (-1), 1);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var68 = var66.getInitialObsForPid(100);
    var64.removeAllObs(var68);
    boolean var70 = var64.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var72 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var74 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var76 = var74.getInitialObsForPid(100);
    var72.removeAllObs(var76);
    java.util.Set var78 = var72.getTerminalObs();
    var64.removeAllObs(var78);
    dynoptic.model.automaton.EventTypeEncodings var80 = new dynoptic.model.automaton.EventTypeEncodings(var78);
    dynoptic.model.fifosys.cfsm.fsm.FSM var82 = new dynoptic.model.fifosys.cfsm.fsm.FSM(0, var12, var62, var78, 1);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var87 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var88 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var87);
    boolean var89 = var88.isTermState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var90 = var88.getNextState();
    boolean var91 = var12.equals((java.lang.Object)var88);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var92 = var88.getNextState();
    int var93 = var88.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == (-1));

  }

  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test156"); }


    dynoptic.model.alphabet.FSMAlphabet var1 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var2 = var1.toScmParametersString();
    var1.clear();
    java.lang.String var4 = var1.toString();
    boolean var5 = var1.isEmpty();
    dynoptic.model.fifosys.gfsm.GFSMState var6 = new dynoptic.model.fifosys.gfsm.GFSMState(1, (java.util.Set)var1);
    java.util.Iterator var7 = var1.iterator();
    java.lang.String var8 = var1.toScmParametersString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    var21.removeAllObs(var25);
    dynoptic.model.fifosys.cfsm.fsm.FSM var28 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var14, var19, var25, 100);
    int var29 = var14.getPid();
    java.lang.String var30 = var14.toLongString();
    java.util.Set var31 = var14.getTransitioningEvents();
    int var32 = var14.getScmId();
    dynoptic.model.fifosys.cfsm.CFSMState var33 = new dynoptic.model.fifosys.cfsm.CFSMState(var14);
    boolean var35 = var14.equals((java.lang.Object)"[]");
    boolean var36 = var1.contains((java.lang.Object)var35);
    dynoptic.model.automaton.EventTypeEncodings var37 = new dynoptic.model.automaton.EventTypeEncodings((java.util.Set)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var30.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test157"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var25 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var26 = var20.equals((java.lang.Object)true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    dynoptic.model.fifosys.cfsm.fsm.FSM var46 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var32, var37, var43, 100);
    int var47 = var32.getPid();
    java.lang.String var48 = var32.toLongString();
    boolean var49 = var20.equals((java.lang.Object)var48);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    java.util.Set var70 = var69.getAcceptStates();
    java.util.Set var71 = var69.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var77 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var82 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var84 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var88 = var86.getInitialObsForPid(100);
    var84.removeAllObs(var88);
    dynoptic.model.fifosys.cfsm.fsm.FSM var91 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var77, var82, var88, 100);
    dynoptic.model.automaton.EventTypeEncodings var92 = var91.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var93 = var69.getEncodedAutomaton(var92);
    dynoptic.model.automaton.EncodedAutomaton var94 = new dynoptic.model.automaton.EncodedAutomaton(var20, var69);
    dk.brics.automaton.Automaton var95 = var94.getAutomaton();
    var94.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var48.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test158"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var6 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    var11.markTerm();
    boolean var13 = var11.isInitial();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var14 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var11);
    boolean var15 = var14.isEnabled();
    boolean var16 = var5.equals((java.lang.Object)var15);
    boolean var17 = var5.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var22 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 1, 10);
    var22.setAccept();
    java.util.Set var24 = var22.getTransitioningEvents();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    dynoptic.model.fifosys.cfsm.fsm.FSM var45 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var31, var36, var42, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var51 = var49.getInitialObsForPid(100);
    var47.removeAllObs(var51);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var58 = var56.getInitialObsForPid(100);
    var54.removeAllObs(var58);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var36, var51, var58);
    dynoptic.model.fifosys.gfsm.GFSMPath var62 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var63 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var62);
    boolean var64 = var36.equals((java.lang.Object)var63);
    dynoptic.model.fifosys.cfsm.CFSMState var65 = new dynoptic.model.fifosys.cfsm.CFSMState(var36);
    java.util.Set var66 = var65.getNextStates();
    dynoptic.model.fifosys.cfsm.fsm.FSM var68 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var5, var22, var66, (-1));
    java.util.Set var69 = var68.getAcceptStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test159"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "Part-0-284291914", false, true);
    boolean var5 = var4.isInitial();
    int var6 = var4.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));

  }

  public void test160() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test160"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    java.lang.String var13 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var5, false, false);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var18 = var16.getTerminalObsForPid(1);
    java.lang.String var19 = var16.toLongString();
    java.lang.String var22 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var16, false, false);
    java.lang.String var23 = var0.beginGraphString();
    dynoptic.model.export.DotExportFormatter var25 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var26 = var25.beginGraphString();
    java.lang.String var27 = var25.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    java.lang.String var35 = var25.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var30, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.lang.String var41 = var25.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var38, true, false);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var54 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    var56.removeAllObs(var60);
    dynoptic.model.fifosys.cfsm.fsm.FSM var63 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var49, var54, var60, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var65 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var69 = var67.getInitialObsForPid(100);
    var65.removeAllObs(var69);
    dynoptic.model.fifosys.gfsm.GFSMState var72 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var74 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var76 = var74.getInitialObsForPid(100);
    var72.removeAllObs(var76);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var54, var69, var76);
    dynoptic.model.fifosys.gfsm.GFSMPath var80 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var81 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var80);
    boolean var82 = var54.equals((java.lang.Object)var81);
    dynoptic.model.fifosys.cfsm.CFSMState var83 = new dynoptic.model.fifosys.cfsm.CFSMState(var54);
    boolean var84 = var83.isInitial();
    boolean var85 = var83.isAccept();
    boolean var86 = var83.isAccept();
    java.lang.String var89 = var25.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString((-1), (dynoptic.model.AbsFSMState)var83, true, true);
    boolean var90 = var83.isInitial();
    java.util.Set var91 = var83.getTransitioningEvents();
    boolean var92 = var83.isAccept();
    java.lang.String var95 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(10, (dynoptic.model.AbsFSMState)var83, true, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var97 = var83.isAcceptForPid(1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var13.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]_i_t"+ "'", var19.equals("[]_i_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "  100 [label=\"[]\",shape=circle];\n"+ "'", var22.equals("  100 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "digraph {\n"+ "'", var23.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "digraph {\n"+ "'", var26.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "digraph {\n"+ "'", var27.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var35.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->0;\n"+ "'", var41.equals("  0 [label=\"[]\",shape=circle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "  -1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@447e5ac\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->-1;\n"+ "'", var89.equals("  -1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@447e5ac\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->-1;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "  10 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@447e5ac\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->10;\n"+ "'", var95.equals("  10 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@447e5ac\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->10;\n"));

  }

  public void test161() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test161"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = var40.getFSMState(0);
    dynoptic.model.fifosys.cfsm.CFSMState var44 = new dynoptic.model.fifosys.cfsm.CFSMState(var43);
    boolean var45 = var43.isInitial();
    java.lang.String var46 = var43.toShortIntString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var52 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var57 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.fifosys.cfsm.fsm.FSM var66 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var52, var57, var63, 100);
    java.util.Set var67 = var66.getAcceptStates();
    java.util.Set var68 = var66.getAcceptStates();
    java.util.Set var69 = var66.getStates();
    dynoptic.model.export.DotExportFormatter var70 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var71 = var70.beginGraphString();
    java.lang.String var72 = var70.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var77 = var75.getInitialObsForPid(100);
    java.lang.String var80 = var70.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var75, true, false);
    java.lang.String var81 = var70.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var84 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var85 = var84.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var87 = new dynoptic.model.fifosys.gfsm.GFSMPath(var84, 1);
    java.lang.String var90 = var70.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var84, false, true);
    java.util.Set var92 = var84.getInitialObsForPid(100);
    java.util.Set var93 = var84.getInitialObservations();
    boolean var94 = var84.isAccept();
    java.util.Set var96 = var84.getInitialObsForPid(1);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findTransitiveClosure((dynoptic.model.AbsFSMState)var43, var69, var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "0"+ "'", var46.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "digraph {\n"+ "'", var71.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "digraph {\n"+ "'", var72.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var80.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "digraph {\n"+ "'", var81.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "Part-0-1705927962"+ "'", var85.equals("Part-0-1705927962"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var90.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test162() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test162"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var17);
    java.util.Set var23 = var21.getInitialObsForPid(1);
    java.lang.String var24 = var21.toString();
    boolean var26 = var21.isAcceptForPid(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test163() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test163"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var5 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var8 = var5.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    java.util.Set var16 = var10.getTransitioningEvents();
    boolean var17 = var5.equals((java.lang.Object)var16);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var16);
    boolean var20 = var18.isInitForPid(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test164"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var6 = var5.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    int var27 = var12.getPid();
    int var28 = var12.getScmId();
    dynoptic.model.alphabet.FSMAlphabet var29 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var41 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.cfsm.fsm.FSM var50 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var36, var41, var47, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var41, var56, var63);
    boolean var66 = var29.retainAll((java.util.Collection)var63);
    java.lang.String var67 = var29.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var12, (java.util.Set)var29, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var70 = new dynoptic.model.fifosys.cfsm.CFSMState(var12);
    java.util.Set var71 = var70.getTransitioningEvents();
    boolean var72 = var70.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[]"+ "'", var67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);

  }

  public void test165() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test165"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var32, var47, var54);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    java.util.Set var62 = var58.getInitialObsForPid(1);
    java.util.Set var63 = var58.getInitialObservations();
    dynoptic.model.fifosys.cfsm.fsm.FSM var65 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var32, var63, 10);
    var32.setAccept();
    java.lang.String var67 = var32.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "0"+ "'", var67.equals("0"));

  }

  public void test166() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test166"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTerminalObs();
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, (-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var19 = var18.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15, var18);
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath(var22);
    dynoptic.model.fifosys.gfsm.GFSMPath var25 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var26 = var25.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var27 = new dynoptic.model.fifosys.gfsm.GFSMPath(var22, var25);
    dynoptic.model.fifosys.gfsm.GFSMPath var29 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var30 = new dynoptic.model.fifosys.gfsm.GFSMPath(var25, var29);
    boolean var31 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var29);
    dynoptic.model.fifosys.gfsm.GFSMPath var32 = new dynoptic.model.fifosys.gfsm.GFSMPath(var18, var29);
    dynoptic.model.fifosys.gfsm.GFSMPath var33 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, var29);
    boolean var34 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var13);
    dynoptic.model.fifosys.gfsm.GFSMPath var35 = new dynoptic.model.fifosys.gfsm.GFSMPath(var9, var13);
    int var36 = var13.numStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);

  }

  public void test167() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test167"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var3 = var1.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var5 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test168() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test168"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.lang.String var4 = var1.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var16, var31, var38);
    var1.removeAllObs(var38);
    java.lang.String var42 = var1.toLongString();
    dynoptic.model.alphabet.FSMAlphabet var43 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var44 = var43.toScmParametersString();
    java.lang.Object[] var45 = var43.toArray();
    boolean var46 = var43.isEmpty();
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    boolean var51 = var43.retainAll((java.util.Collection)var50);
    var1.addAllObs(var50);
    boolean var53 = var1.isAccept();
    java.util.Set var55 = var1.getInitialObsForPid(1);
    dynoptic.model.automaton.EventTypeEncodings var56 = new dynoptic.model.automaton.EventTypeEncodings(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + ""+ "'", var44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test169"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, false, 0, (-1));
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.cfsm.fsm.FSM var47 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var33, var38, var44, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var53 = var51.getInitialObsForPid(100);
    var49.removeAllObs(var53);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    var56.removeAllObs(var60);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var38, var53, var60);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    java.util.Set var68 = var64.getInitialObsForPid(1);
    java.util.Set var69 = var64.getInitialObservations();
    dynoptic.model.fifosys.cfsm.fsm.FSM var71 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var17, var38, var69, 10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    java.util.Set var76 = var73.getTransitioningEvents();
    java.util.Set var77 = var73.getInitialObservations();
    java.util.Set var78 = var73.getNextStates();
    dynoptic.model.fifosys.cfsm.fsm.FSM var80 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var5, var38, var78, (-1));
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var82 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    boolean var83 = var38.equals((java.lang.Object)var82);
    java.lang.String var84 = var82.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "0"+ "'", var84.equals("0"));

  }

  public void test170() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test170"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var32, var47, var54);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    java.util.Set var62 = var58.getInitialObsForPid(1);
    java.util.Set var63 = var58.getInitialObservations();
    dynoptic.model.fifosys.cfsm.fsm.FSM var65 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var32, var63, 10);
    boolean var66 = var32.isAccept();
    java.lang.String var67 = var32.toLongString();
    java.util.Set var68 = var32.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var67.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test171() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test171"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(0);
    var3.recreateCachedTransitions();
    var3.recreateCachedTransitions();
    java.util.Set var6 = var3.getTerminalObs();
    java.lang.String var9 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString((-1), (dynoptic.model.AbsFSMState)var3, true, false);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var15 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, (-1));
    java.lang.String var16 = var15.toString();
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(10, (dynoptic.model.AbsFSMState)var15, true, true);
    int var20 = var15.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "  -1 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->-1;\n"+ "'", var9.equals("  -1 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->-1;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "-1"+ "'", var16.equals("-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  10 [label=\"-1\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->10;\n"+ "'", var19.equals("  10 [label=\"-1\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->10;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 100);

  }

  public void test172() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test172"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    int var7 = var5.getPid();
    synoptic.model.event.Event var8 = var5.getNextEvent();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var16 = var13.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var17 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var22 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var24 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var25 = var22.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var26 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var22);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var27 = var26.getObsState();
    boolean var28 = var26.isEnabled();
    var26.setOccurred(false);
    var17.addRemoteDependency(var26);
    boolean var32 = var17.hasOccurred();
    java.lang.String var33 = var17.toString();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var34 = var17.getPrevState();
    boolean var35 = var17.hasOccurred();
    var5.addRemoteDependency(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var33.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test173"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    var5.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var21 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    java.util.Set var22 = var21.getTransitioningEvents();
    int var23 = var21.getNumProcesses();
    java.util.Set var24 = var21.getTransitioningEvents();
    boolean var25 = var21.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test174() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test174"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var14 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var17 = var14.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var18 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var14);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var19 = var18.getObsState();
    var8.addRemoteDependency(var18);
    var8.setOccurred(false);
    var8.setOccurred(true);
    int var25 = var8.getPid();
    var8.setOccurred(true);
    boolean var28 = var8.isEnabled();
    boolean var29 = var8.isTermState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);

  }

  public void test175() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test175"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "Part-0-284291914", false, true);
    int var5 = var4.getPid();
    java.lang.String var6 = var4.toString();
    int var7 = var4.getPid();
    java.lang.String var8 = var4.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Part-0-284291914_t"+ "'", var6.equals("Part-0-284291914_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Part-0-284291914"+ "'", var8.equals("Part-0-284291914"));

  }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test176"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    var5.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var21 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    java.util.Set var22 = var21.getTransitioningEvents();
    boolean var23 = var21.isAccept();
    java.util.Set var24 = var21.getTransitioningEvents();
    boolean var25 = var21.isInitial();
    boolean var27 = var21.isAcceptForPid(0);
    boolean var28 = var21.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);

  }

  public void test177() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test177"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(10, false, false);
    var3.markTerm();
    java.lang.String var5 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "a131_t"+ "'", var5.equals("a131_t"));

  }

  public void test178() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test178"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.automaton.EventTypeEncodings var68 = var67.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var69 = new dynoptic.model.automaton.EncodedAutomaton(var40, var67);
    java.util.Set var70 = var67.getAcceptStates();
    java.util.Set var71 = var67.getInitStates();
    java.util.Set var72 = var67.getStates();
    java.util.Set var73 = var67.getStates();
    java.util.Set var74 = var67.getAcceptStates();
    java.util.Set var75 = var67.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test179"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    int var26 = var11.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var53 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var39, var44, var50, 100);
    var28.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var56 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var5, var11, var50, 1);
    java.lang.String var57 = var11.toLongString();
    int var58 = var11.getScmId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var57.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);

  }

  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test180"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getAcceptStates();
    dynoptic.model.alphabet.FSMAlphabet var22 = var19.getAlphabet();
    java.lang.String var23 = var22.anyEventScmQRe();
    java.lang.Object[] var24 = var22.toArray();
    boolean var25 = var22.isEmpty();
    java.lang.String var26 = var22.anyEventScmQRe();
    dynoptic.model.alphabet.FSMAlphabet var27 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var34 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var45 = var43.getInitialObsForPid(100);
    var41.removeAllObs(var45);
    dynoptic.model.fifosys.cfsm.fsm.FSM var48 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var34, var39, var45, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var61 = var59.getInitialObsForPid(100);
    var57.removeAllObs(var61);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var39, var54, var61);
    boolean var64 = var27.retainAll((java.util.Collection)var61);
    var27.clear();
    dynoptic.model.alphabet.FSMAlphabet var66 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var67 = var66.toScmParametersString();
    var66.clear();
    java.lang.String var69 = var66.toString();
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    var71.removeAllObs(var75);
    boolean var77 = var71.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var79 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var81 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var83 = var81.getInitialObsForPid(100);
    var79.removeAllObs(var83);
    java.util.Set var85 = var79.getTerminalObs();
    var71.removeAllObs(var85);
    java.util.Set var88 = var71.getInitialObsForPid(10);
    boolean var89 = var66.addAll((java.util.Collection)var88);
    boolean var90 = var27.addAll((java.util.Collection)var88);
    boolean var91 = var22.addAll((java.util.Collection)var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(_)"+ "'", var23.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "(_)"+ "'", var26.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + ""+ "'", var67.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "[]"+ "'", var69.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test181() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test181"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var32, var47, var54);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    java.util.Set var62 = var58.getInitialObsForPid(1);
    java.util.Set var63 = var58.getInitialObservations();
    dynoptic.model.fifosys.cfsm.fsm.FSM var65 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var32, var63, 10);
    int var66 = var65.getPid();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var72 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var77 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var79 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var81 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var83 = var81.getInitialObsForPid(100);
    var79.removeAllObs(var83);
    dynoptic.model.fifosys.cfsm.fsm.FSM var86 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var72, var77, var83, 100);
    int var87 = var72.getPid();
    java.lang.String var88 = var72.toLongString();
    boolean var89 = var65.equals((java.lang.Object)var72);
    java.util.Set var90 = var65.getAcceptStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var88.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test182() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test182"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var9 = var8.getPrevState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var14 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var17 = var14.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var18 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var14);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var19 = var18.getObsState();
    boolean var20 = var18.isEnabled();
    var8.addRemoteDependency(var18);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var22 = var18.getObsState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test183"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    int var21 = var5.getScmId();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var26 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var28 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var29 = var26.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var30 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var26);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var31 = var30.getObsState();
    int var32 = var30.getPid();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var37 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var39 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var40 = var37.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var41 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var37);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = var41.getObsState();
    java.lang.String var43 = var41.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var44 = var41.getObsState();
    boolean var45 = var41.isTermState();
    boolean var46 = var41.isTermState();
    boolean var47 = var41.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var48 = var41.getObsState();
    var30.addRemoteDependency(var41);
    java.lang.String var50 = var41.toString();
    boolean var51 = var5.equals((java.lang.Object)var50);
    boolean var52 = var5.isInitial();
    java.util.Set var53 = var5.getTransitioningEvents();
    boolean var54 = var5.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var43.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var50.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);

  }

  public void test184() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test184"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("Part-0-550522099");

  }

  public void test185() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test185"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    java.lang.String var36 = var11.toLongString();
    java.lang.String var37 = var11.toLongString();
    java.lang.String var38 = var11.toString();
    java.util.Set var39 = var11.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var36.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var37.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "0"+ "'", var38.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test186() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test186"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(0, "Part-0-214820256", false, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test187"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTerminalObs();
    boolean var8 = var1.isAccept();
    java.util.Set var10 = var1.getInitialObsForPid(0);
    java.lang.String var11 = var1.toIntermediateString();
    java.util.Set var12 = var1.getTerminalObs();
    boolean var14 = var1.isAcceptForPid((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Part-0-1046896431"+ "'", var11.equals("Part-0-1046896431"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test188() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test188"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    java.lang.String var13 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var5, false, false);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var18 = var16.getTerminalObsForPid(1);
    java.lang.String var19 = var16.toLongString();
    java.lang.String var22 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var16, false, false);
    java.util.Set var23 = var16.getTransitioningEvents();
    java.util.Set var24 = var16.getInitialObservations();
    java.lang.String var25 = var16.toLongString();
    java.util.Set var26 = var16.getTransitioningEvents();
    java.lang.String var27 = var16.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var13.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]_i_t"+ "'", var19.equals("[]_i_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "  100 [label=\"[]\",shape=circle];\n"+ "'", var22.equals("  100 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]_i_t"+ "'", var25.equals("[]_i_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[]_i_t"+ "'", var27.equals("[]_i_t"));

  }

  public void test189() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test189"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    boolean var43 = var40.isInitForPid(0);
    boolean var45 = var40.isAcceptForPid(0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var47 = var40.getFSMState(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var49 = var40.isAcceptForPid((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test190"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(1, "Part-0-1140485348", false, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var6 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    boolean var7 = var6.hasOccurred();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test191() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test191"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    var47.minimize();
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    boolean var56 = var50.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    java.util.Set var64 = var58.getTerminalObs();
    var50.removeAllObs(var64);
    dynoptic.model.automaton.EventTypeEncodings var66 = new dynoptic.model.automaton.EventTypeEncodings(var64);
    boolean var68 = var66.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.gfsm.GFSMState var70 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var72 = new dynoptic.model.fifosys.gfsm.GFSMPath(var70, (-1));
    boolean var73 = var66.equals((java.lang.Object)var70);
    boolean var74 = var47.equals((java.lang.Object)var66);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var76 = var66.getEventType('#');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test192() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test192"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var17);
    java.util.Set var23 = var21.getInitialObsForPid(1);
    java.util.Set var25 = var21.getInitialObsForPid(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test193"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var9 = var1.numEvents();
    boolean var10 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    java.util.Set var18 = var12.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath(var12, 0);
    boolean var22 = var12.isAcceptForPid(10);
    dynoptic.model.fifosys.gfsm.GFSMPath var24 = new dynoptic.model.fifosys.gfsm.GFSMPath(var12, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = var24.lastState();
    dynoptic.model.fifosys.gfsm.GFSMState var26 = var24.lastState();
    dynoptic.model.fifosys.gfsm.GFSMPath var27 = new dynoptic.model.fifosys.gfsm.GFSMPath(var24);
    dynoptic.model.fifosys.gfsm.GFSMPath var28 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var27);
    dynoptic.model.fifosys.gfsm.GFSMPath var29 = new dynoptic.model.fifosys.gfsm.GFSMPath(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test194() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test194"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(1, "ObsDAGNode[i_hi!_t]", false, false);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var6 = var5.getObsState();
    boolean var7 = var6.isTerminal();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var6);
    boolean var9 = var8.isTermState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test195() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test195"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.automaton.EventTypeEncodings var68 = var67.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var69 = new dynoptic.model.automaton.EncodedAutomaton(var40, var67);
    java.util.Set var70 = var67.getAcceptStates();
    java.util.Set var71 = var67.getInitStates();
    java.util.Set var72 = var67.getStates();
    java.util.Set var73 = var67.getStates();
    java.util.Set var74 = var67.getAcceptStates();
    dynoptic.model.automaton.EventTypeEncodings var75 = var67.getEventTypeEncodings();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test196() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test196"); }


    dynoptic.model.alphabet.FSMAlphabet var1 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var8 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var13 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var19 = var17.getInitialObsForPid(100);
    var15.removeAllObs(var19);
    dynoptic.model.fifosys.cfsm.fsm.FSM var22 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var8, var13, var19, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var28 = var26.getInitialObsForPid(100);
    var24.removeAllObs(var28);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var13, var28, var35);
    boolean var38 = var1.retainAll((java.util.Collection)var35);
    var1.clear();
    dynoptic.model.alphabet.FSMAlphabet var40 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var41 = var40.toScmParametersString();
    var40.clear();
    java.lang.String var43 = var40.toString();
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    var45.removeAllObs(var49);
    boolean var51 = var45.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var57 = var55.getInitialObsForPid(100);
    var53.removeAllObs(var57);
    java.util.Set var59 = var53.getTerminalObs();
    var45.removeAllObs(var59);
    java.util.Set var62 = var45.getInitialObsForPid(10);
    boolean var63 = var40.addAll((java.util.Collection)var62);
    boolean var64 = var1.addAll((java.util.Collection)var62);
    dynoptic.model.fifosys.gfsm.GFSMState var65 = new dynoptic.model.fifosys.gfsm.GFSMState(1, (java.util.Set)var1);
    boolean var66 = var65.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + ""+ "'", var41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "[]"+ "'", var43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test197() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test197"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    dynoptic.model.fifosys.gfsm.GFSMPath var38 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var39 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var38);
    boolean var40 = var12.equals((java.lang.Object)var39);
    boolean var41 = var12.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var52 = var50.getInitialObsForPid(100);
    var48.removeAllObs(var52);
    java.util.Set var54 = var48.getTerminalObs();
    dynoptic.model.fifosys.cfsm.fsm.FSM var56 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var12, var46, var54, 1);
    java.util.Set var57 = var56.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test198"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    java.lang.Object[] var39 = var0.toArray();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var43 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(0, true, false);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var44 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var43);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var45 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var43);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var50 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var52 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var53 = var50.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var54 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var50);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var55 = var54.getObsState();
    var45.addRemoteDependency(var54);
    boolean var57 = var0.contains((java.lang.Object)var54);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var62 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var63 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var62);
    java.lang.String var64 = var63.toString();
    boolean var65 = var63.hasOccurred();
    synoptic.model.event.Event var66 = var63.getNextEvent();
    java.lang.String var67 = var63.toString();
    synoptic.model.event.Event var68 = var63.getNextEvent();
    var54.addRemoteDependency(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var64.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var67.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);

  }

  public void test199() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test199"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.cfsm.fsm.FSM var47 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var33, var38, var44, 100);
    var22.removeAllObs(var44);
    java.util.Set var50 = var22.getInitialObsForPid((-1));
    var14.removeAllObs(var50);
    dynoptic.model.fifosys.gfsm.GFSMPath var53 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-210896576"+ "'", var15.equals("Part-0-210896576"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test200() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test200"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("Part-0-1396225591");

  }

  public void test201() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test201"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    var1.removeAllObs(var23);
    java.lang.String var28 = var1.toLongString();
    boolean var29 = var1.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[]"+ "'", var28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test202() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test202"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    dynoptic.model.automaton.EventTypeEncodings var42 = var41.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var43 = var19.getEncodedAutomaton(var42);
    java.lang.String var44 = var19.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var44.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));

  }

  public void test203() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test203"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    var21.removeAllObs(var25);
    dynoptic.model.fifosys.cfsm.fsm.FSM var28 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var14, var19, var25, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var19, var34, var41);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    java.lang.String var48 = var45.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    var71.removeAllObs(var75);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var82 = var80.getInitialObsForPid(100);
    var78.removeAllObs(var82);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var60, var75, var82);
    var45.removeAllObs(var82);
    java.util.Set var87 = var45.getInitialObsForPid(10);
    dynoptic.model.fifosys.cfsm.fsm.FSM var89 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var6, var34, (java.util.Collection)var87, (-1));
    boolean var90 = var89.isDeterministic();
    java.lang.String var91 = var89.toString();
    java.util.Set var92 = var89.getStates();
    java.util.Set var93 = var89.getStates();
    java.util.Set var94 = var89.getStates();
    var89.minimize();
    var89.minimize();
    int var97 = var89.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "FSM[pid=1]\n\tstates: []\n\tinits: []\n\taccepts: [0]"+ "'", var91.equals("FSM[pid=1]\n\tstates: []\n\tinits: []\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == 1);

  }

  public void test204() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test204"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    java.lang.String var21 = var11.toShortIntString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (-1), 1);
    java.lang.String var27 = var26.toShortIntString();
    java.util.Set var28 = var26.getNextStates();
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    boolean var36 = var30.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    java.util.Set var44 = var38.getTerminalObs();
    var30.removeAllObs(var44);
    dynoptic.model.automaton.EventTypeEncodings var46 = new dynoptic.model.automaton.EventTypeEncodings(var44);
    boolean var48 = var46.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var52 = new dynoptic.model.fifosys.gfsm.GFSMPath(var50, (-1));
    boolean var53 = var46.equals((java.lang.Object)var50);
    java.util.Set var54 = var50.getTerminalObs();
    dynoptic.model.fifosys.cfsm.fsm.FSM var56 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var11, var26, var54, 100);
    java.lang.String var57 = var26.toShortIntString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var63 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var68 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var70 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var72 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var74 = var72.getInitialObsForPid(100);
    var70.removeAllObs(var74);
    dynoptic.model.fifosys.cfsm.fsm.FSM var77 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var63, var68, var74, 100);
    int var78 = var77.getPid();
    java.util.Set var79 = var77.getStates();
    java.util.Set var80 = var77.getStates();
    dynoptic.model.automaton.EventTypeEncodings var81 = var77.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.GFSMState var83 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var84 = var83.toIntermediateString();
    boolean var85 = var83.isAccept();
    java.util.Set var86 = var83.getTerminalObs();
    boolean var87 = var77.equals((java.lang.Object)var86);
    boolean var88 = var26.equals((java.lang.Object)var77);
    var77.minimize();
    java.util.Set var90 = var77.getAcceptStates();
    boolean var91 = var77.isDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "0"+ "'", var21.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "1"+ "'", var27.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "1"+ "'", var57.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "Part-0-82107722"+ "'", var84.equals("Part-0-82107722"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);

  }

  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test205"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    boolean var43 = var40.isInitForPid(0);
    boolean var45 = var40.isAcceptForPid(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var47 = var40.isInitForPid(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test206"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    dynoptic.model.automaton.EventTypeEncodings var8 = new dynoptic.model.automaton.EventTypeEncodings(var7);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var21 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.cfsm.fsm.FSM var30 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var16, var21, var27, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var21, var36, var43);
    java.lang.String var46 = var21.toLongString();
    java.lang.String var47 = var21.toLongString();
    java.lang.String var48 = var21.toString();
    java.util.Set var49 = var21.getNextStates();
    java.util.Set var50 = var21.getNextStates();
    int var51 = var21.getScmId();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var57 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var62 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var68 = var66.getInitialObsForPid(100);
    var64.removeAllObs(var68);
    dynoptic.model.fifosys.cfsm.fsm.FSM var71 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var57, var62, var68, 100);
    int var72 = var57.getPid();
    java.lang.String var73 = var57.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var79 = var77.getInitialObsForPid(100);
    var75.removeAllObs(var79);
    java.util.Set var81 = var75.getTerminalObs();
    dynoptic.model.fifosys.cfsm.fsm.FSM var83 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var21, var57, var81, (-1));
    dynoptic.model.automaton.EncodedAutomaton var84 = new dynoptic.model.automaton.EncodedAutomaton(var8, var83);
    dynoptic.model.fifosys.gfsm.GFSMPath var86 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var87 = new dynoptic.model.fifosys.gfsm.GFSMPath(var86);
    dynoptic.model.fifosys.gfsm.GFSMPath var88 = new dynoptic.model.fifosys.gfsm.GFSMPath(var86);
    boolean var89 = var8.equals((java.lang.Object)var86);
    dynoptic.model.fifosys.gfsm.GFSMState var91 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var93 = new dynoptic.model.fifosys.gfsm.GFSMPath(var91, (-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var94 = new dynoptic.model.fifosys.gfsm.GFSMPath(var86, var93);
    int var95 = var93.numStates();
    dynoptic.model.fifosys.gfsm.GFSMPath var96 = new dynoptic.model.fifosys.gfsm.GFSMPath(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var46.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var47.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "0"+ "'", var48.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var73.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 1);

  }

  public void test207() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test207"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    java.lang.String var36 = var11.toLongString();
    java.lang.String var37 = var11.toLongString();
    int var38 = var11.getPid();
    java.util.Set var39 = var11.getTransitioningEvents();
    boolean var40 = var11.isInitial();
    int var41 = var11.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var36.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var37.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);

  }

  public void test208() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test208"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var28 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.fifosys.cfsm.fsm.FSM var37 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var23, var28, var34, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.fifosys.cfsm.fsm.FSM var57 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var43, var48, var54, 100);
    dynoptic.model.automaton.EventTypeEncodings var58 = var57.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var63 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var64 = var58.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var65 = var37.getEncodedAutomaton(var58);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var71 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var76 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var82 = var80.getInitialObsForPid(100);
    var78.removeAllObs(var82);
    dynoptic.model.fifosys.cfsm.fsm.FSM var85 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var71, var76, var82, 100);
    dynoptic.model.automaton.EventTypeEncodings var86 = var85.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var87 = new dynoptic.model.automaton.EncodedAutomaton(var58, var85);
    dynoptic.model.automaton.EncodedAutomaton var88 = new dynoptic.model.automaton.EncodedAutomaton(var17, var85);
    int var89 = var85.getPid();
    dynoptic.model.automaton.EventTypeEncodings var90 = var85.getEventTypeEncodings();
    var85.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test209() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test209"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    java.lang.String var21 = var11.toShortIntString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (-1), 1);
    java.lang.String var27 = var26.toShortIntString();
    java.util.Set var28 = var26.getNextStates();
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    boolean var36 = var30.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    java.util.Set var44 = var38.getTerminalObs();
    var30.removeAllObs(var44);
    dynoptic.model.automaton.EventTypeEncodings var46 = new dynoptic.model.automaton.EventTypeEncodings(var44);
    boolean var48 = var46.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var52 = new dynoptic.model.fifosys.gfsm.GFSMPath(var50, (-1));
    boolean var53 = var46.equals((java.lang.Object)var50);
    java.util.Set var54 = var50.getTerminalObs();
    dynoptic.model.fifosys.cfsm.fsm.FSM var56 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var11, var26, var54, 100);
    dynoptic.model.automaton.EventTypeEncodings var57 = var56.getEventTypeEncodings();
    java.util.Set var58 = var56.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "0"+ "'", var21.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "1"+ "'", var27.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test210() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test210"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    java.util.Set var5 = var4.getTransitioningEvents();
    java.lang.String var6 = var4.toLongString();
    dynoptic.model.fifosys.cfsm.CFSMState var7 = new dynoptic.model.fifosys.cfsm.CFSMState(var4);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var9 = var7.getFSMState(0);
    boolean var10 = var7.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "FSM_state: init[true], accept[false] id[1]"+ "'", var6.equals("FSM_state: init[true], accept[false] id[1]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test211() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test211"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    int var21 = var5.getScmId();
    int var22 = var5.getPid();
    dynoptic.model.fifosys.cfsm.CFSMState var23 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    java.util.Set var24 = var23.getTransitioningEvents();
    dynoptic.model.automaton.EventTypeEncodings var25 = new dynoptic.model.automaton.EventTypeEncodings(var24);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    dynoptic.model.fifosys.cfsm.fsm.FSM var45 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var31, var36, var42, 100);
    int var46 = var45.getPid();
    java.util.Set var47 = var45.getStates();
    java.util.Set var48 = var45.getStates();
    dynoptic.model.automaton.EventTypeEncodings var49 = var45.getEventTypeEncodings();
    int var50 = var45.getPid();
    dynoptic.model.automaton.EncodedAutomaton var51 = new dynoptic.model.automaton.EncodedAutomaton(var25, var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));

  }

  public void test212() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test212"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    boolean var28 = var22.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    java.util.Set var36 = var30.getTerminalObs();
    var22.removeAllObs(var36);
    dynoptic.model.automaton.EventTypeEncodings var38 = new dynoptic.model.automaton.EventTypeEncodings(var36);
    dynoptic.model.automaton.EncodedAutomaton var39 = var19.getEncodedAutomaton(var38);
    var39.minimize();
    dk.brics.automaton.Automaton var41 = var39.getAutomaton();
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    java.util.Set var49 = var43.getTerminalObs();
    boolean var50 = var43.isAccept();
    boolean var51 = var39.equals((java.lang.Object)var43);
    java.util.Set var53 = var43.getInitialObsForPid((-1));
    java.util.Set var54 = var43.getInitialObservations();
    java.util.Set var56 = var43.getTerminalObsForPid(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test213() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test213"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    int var21 = var6.getPid();
    java.lang.String var22 = var6.toLongString();
    java.lang.String var23 = var6.toLongString();
    int var24 = var6.getScmId();
    boolean var25 = var6.isAccept();
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    java.util.Set var33 = var27.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var35 = new dynoptic.model.fifosys.gfsm.GFSMPath(var27, 0);
    boolean var37 = var27.isAcceptForPid(10);
    int var38 = var27.getNumProcesses();
    java.util.Set var40 = var27.getTerminalObsForPid((-1));
    boolean var41 = var6.equals((java.lang.Object)var27);
    java.lang.String var42 = var6.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var54 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    var56.removeAllObs(var60);
    dynoptic.model.fifosys.cfsm.fsm.FSM var63 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var49, var54, var60, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var65 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var69 = var67.getInitialObsForPid(100);
    var65.removeAllObs(var69);
    dynoptic.model.fifosys.gfsm.GFSMState var72 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var74 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var76 = var74.getInitialObsForPid(100);
    var72.removeAllObs(var76);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var54, var69, var76);
    java.lang.String var79 = var54.toLongString();
    boolean var80 = var54.isAccept();
    boolean var81 = var54.isInitial();
    java.lang.String var82 = var54.toLongString();
    dynoptic.model.alphabet.FSMAlphabet var84 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var85 = new dynoptic.model.fifosys.gfsm.GFSMState(1, (java.util.Set)var84);
    java.lang.String var86 = var84.anyEventScmQRe();
    dynoptic.model.fifosys.cfsm.fsm.FSM var88 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var54, (java.util.Set)var84, 10);
    java.lang.String var89 = var84.toScmParametersString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var22.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var23.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var42.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var79.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var82.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "(_)"+ "'", var86.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + ""+ "'", var89.equals(""));

  }

  public void test214() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test214"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    java.lang.String var21 = var5.toLongString();
    java.util.Set var22 = var5.getTransitioningEvents();
    java.util.Set var23 = var5.getTransitioningEvents();
    java.util.Set var24 = var5.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var21.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test215() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test215"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    int var21 = var5.getScmId();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var26 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var28 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var29 = var26.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var30 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var26);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var31 = var30.getObsState();
    int var32 = var30.getPid();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var37 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var39 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var40 = var37.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var41 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var37);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = var41.getObsState();
    java.lang.String var43 = var41.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var44 = var41.getObsState();
    boolean var45 = var41.isTermState();
    boolean var46 = var41.isTermState();
    boolean var47 = var41.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var48 = var41.getObsState();
    var30.addRemoteDependency(var41);
    java.lang.String var50 = var41.toString();
    boolean var51 = var5.equals((java.lang.Object)var50);
    boolean var52 = var5.isInitial();
    java.lang.String var53 = var5.toString();
    dynoptic.model.fifosys.cfsm.CFSMState var54 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    boolean var55 = var54.isAccept();
    boolean var56 = var54.isAccept();
    boolean var57 = var54.isInitial();
    boolean var58 = var54.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var43.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var50.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "0"+ "'", var53.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);

  }

  public void test216() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test216"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getStates();
    java.lang.String var22 = var19.toString();
    int var23 = var19.getPid();
    java.lang.String var24 = var19.toString();
    java.util.Set var25 = var19.getAcceptStates();
    dynoptic.model.automaton.EventTypeEncodings var26 = var19.getEventTypeEncodings();
    dynoptic.model.automaton.EventTypeEncodings var27 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.cfsm.fsm.FSM var47 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var33, var38, var44, 100);
    java.util.Set var48 = var47.getAcceptStates();
    java.util.Set var49 = var47.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    dynoptic.model.automaton.EventTypeEncodings var70 = var69.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var71 = var47.getEncodedAutomaton(var70);
    int var72 = var47.getPid();
    var47.minimize();
    java.util.Set var74 = var47.getStates();
    dynoptic.model.automaton.EncodedAutomaton var75 = new dynoptic.model.automaton.EncodedAutomaton(var27, var47);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var77 = var27.getEventType('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var22.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var24.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test217() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test217"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    java.util.Set var27 = var23.getInitialObsForPid(1);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState((-1), var27);
    java.lang.String var31 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var28, true, false);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    java.lang.String var40 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(10, (dynoptic.model.AbsFSMState)var37, true, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-971617381"+ "'", var14.equals("Part-0-971617381"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "  1 [label=\"[]\",shape=circle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->1;\n"+ "'", var31.equals("  1 [label=\"[]\",shape=circle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->1;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "  10 [label=\"0\",shape=circle,shape=doublecircle];\n  start_3 [label=\"start\",shape=plaintext];\n  start_3->10;\n"+ "'", var40.equals("  10 [label=\"0\",shape=circle,shape=doublecircle];\n  start_3 [label=\"start\",shape=plaintext];\n  start_3->10;\n"));

  }

  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test218"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.lang.String var21 = var19.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    java.util.Set var42 = var41.getAcceptStates();
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var48 = var46.getInitialObsForPid(100);
    var44.removeAllObs(var48);
    boolean var50 = var44.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    java.util.Set var58 = var52.getTerminalObs();
    var44.removeAllObs(var58);
    dynoptic.model.automaton.EventTypeEncodings var60 = new dynoptic.model.automaton.EventTypeEncodings(var58);
    dynoptic.model.automaton.EncodedAutomaton var61 = var41.getEncodedAutomaton(var60);
    dynoptic.model.automaton.EncodedAutomaton var62 = var19.getEncodedAutomaton(var60);
    dynoptic.model.automaton.EventTypeEncodings var63 = var19.getEventTypeEncodings();
    java.lang.String var64 = var19.toString();
    dynoptic.model.alphabet.FSMAlphabet var65 = var19.getAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var69 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var71 = var69.getInitialObsForPid(100);
    var67.removeAllObs(var71);
    java.util.Set var73 = var67.getTerminalObs();
    java.util.Set var74 = var67.getInitialObservations();
    java.util.Set var75 = var67.getObservedStates();
    boolean var76 = var65.contains((java.lang.Object)var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var21.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var64.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test219() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test219"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(10, "Part-0-2043276784", true, false);
    boolean var5 = var4.isTerminal();
    boolean var6 = var4.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test220"); }


    dynoptic.model.alphabet.FSMAlphabet var1 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var2 = var1.toScmParametersString();
    var1.clear();
    java.lang.String var4 = var1.toString();
    boolean var5 = var1.isEmpty();
    dynoptic.model.fifosys.gfsm.GFSMState var6 = new dynoptic.model.fifosys.gfsm.GFSMState(1, (java.util.Set)var1);
    java.util.Iterator var7 = var1.iterator();
    java.lang.String var8 = var1.toScmParametersString();
    java.lang.String var9 = var1.toScmParametersString();
    java.lang.String var10 = var1.anyEventScmQRe();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "(_)"+ "'", var10.equals("(_)"));

  }

  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test221"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    var5.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var21 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    java.util.Set var22 = var21.getTransitioningEvents();
    boolean var23 = var21.isInitial();
    boolean var24 = var21.isInitial();
    java.util.Set var25 = var21.getTransitioningEvents();
    java.util.Set var26 = var21.getTransitioningEvents();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var28 = var21.getFSMState(0);
    boolean var29 = var21.isAccept();
    boolean var31 = var21.isInitForPid(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);

  }

  public void test222() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test222"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    int var42 = var27.getPid();
    int var43 = var27.getScmId();
    int var44 = var27.getPid();
    boolean var45 = var19.equals((java.lang.Object)var44);
    dynoptic.model.alphabet.FSMAlphabet var46 = var19.getAlphabet();
    java.lang.String var47 = var46.toScmParametersString();
    java.util.Iterator var48 = var46.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + ""+ "'", var47.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test223"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    java.util.Set var8 = var2.getTerminalObs();
    java.util.Set var10 = var2.getInitialObsForPid(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10, var10);
    dynoptic.model.automaton.EventTypeEncodings var12 = new dynoptic.model.automaton.EventTypeEncodings(var10);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    dynoptic.model.fifosys.cfsm.fsm.FSM var32 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var18, var23, var29, 100);
    java.util.Set var33 = var32.getAcceptStates();
    java.util.Set var34 = var32.getStates();
    java.lang.String var35 = var32.toString();
    int var36 = var32.getPid();
    java.lang.String var37 = var32.toString();
    java.util.Set var38 = var32.getAcceptStates();
    dynoptic.model.automaton.EventTypeEncodings var39 = var32.getEventTypeEncodings();
    dynoptic.model.automaton.EventTypeEncodings var40 = var32.getEventTypeEncodings();
    java.util.Set var41 = var32.getAcceptStates();
    dynoptic.model.automaton.EncodedAutomaton var42 = new dynoptic.model.automaton.EncodedAutomaton(var12, var32);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var48 = var46.getInitialObsForPid(100);
    var44.removeAllObs(var48);
    java.util.Set var50 = var44.getTerminalObs();
    java.lang.String var51 = var44.toIntermediateString();
    java.util.Set var53 = var44.getTerminalObsForPid(10);
    boolean var54 = var42.equals((java.lang.Object)var53);
    var42.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var35.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var37.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "Part-0-573330706"+ "'", var51.equals("Part-0-573330706"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test224"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, false, 0, (-1));
    java.lang.String var5 = var4.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "FSM_state: init[false], accept[false] id[-1]"+ "'", var5.equals("FSM_state: init[false], accept[false] id[-1]"));

  }

  public void test225() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test225"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    java.lang.String var13 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var5, false, false);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var18 = var16.getTerminalObsForPid(1);
    java.lang.String var19 = var16.toLongString();
    java.lang.String var22 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var16, false, false);
    java.util.Set var23 = var16.getTransitioningEvents();
    java.lang.String var24 = var16.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var13.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]_i_t"+ "'", var19.equals("[]_i_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "  100 [label=\"[]\",shape=circle];\n"+ "'", var22.equals("  100 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));

  }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test226"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var20 = var18.getInitialObsForPid(100);
    java.lang.String var21 = var18.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var28 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.fifosys.cfsm.fsm.FSM var42 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var28, var33, var39, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var48 = var46.getInitialObsForPid(100);
    var44.removeAllObs(var48);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var33, var48, var55);
    var18.removeAllObs(var55);
    var1.addAllObs(var55);
    java.util.Set var60 = var1.getTerminalObs();
    java.util.Set var62 = var1.getInitialObsForPid(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test227() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test227"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    dynoptic.model.alphabet.FSMAlphabet var2 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var9 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var20 = var18.getInitialObsForPid(100);
    var16.removeAllObs(var20);
    dynoptic.model.fifosys.cfsm.fsm.FSM var23 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var9, var14, var20, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var14, var29, var36);
    boolean var39 = var2.retainAll((java.util.Collection)var36);
    java.lang.Object[] var40 = var2.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var57 = var55.getInitialObsForPid(100);
    var53.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var60 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var46, var51, var57, 100);
    int var61 = var60.getPid();
    java.util.Set var62 = var60.getAcceptStates();
    boolean var63 = var2.retainAll((java.util.Collection)var62);
    boolean var64 = var2.isEmpty();
    var2.clear();
    boolean var66 = var0.containsAll((java.util.Collection)var2);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var69 = var68.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var71 = new dynoptic.model.fifosys.gfsm.GFSMPath(var68, 1);
    java.util.Set var72 = var68.getNextStates();
    boolean var73 = var0.removeAll((java.util.Collection)var72);
    java.lang.Object[] var74 = var0.toArray();
    java.lang.String var75 = var0.toScmParametersString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "Part-0-1537882609"+ "'", var69.equals("Part-0-1537882609"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + ""+ "'", var75.equals(""));

  }

  public void test228() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test228"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    java.util.Set var41 = var40.getNextStates();
    boolean var42 = var40.isAccept();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var44 = var40.isAcceptForPid(1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);

  }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test229"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getStates();
    java.lang.String var22 = var19.toString();
    int var23 = var19.getPid();
    java.lang.String var24 = var19.toString();
    java.util.Set var25 = var19.getAcceptStates();
    java.util.Set var26 = var19.getAcceptStates();
    java.util.Set var27 = var19.getAcceptStates();
    java.util.Set var28 = var19.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var22.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var24.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test230() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test230"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    java.lang.String var20 = var0.beginGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    int var42 = var27.getPid();
    int var43 = var27.getScmId();
    int var44 = var27.getPid();
    java.lang.String var47 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var27, false, false);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, (-1));
    var53.setAccept();
    java.lang.String var57 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var53, false, true);
    java.lang.String var58 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    java.lang.String var62 = var61.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var64 = new dynoptic.model.fifosys.gfsm.GFSMPath(var61, (-1));
    java.lang.String var67 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString((-1), (dynoptic.model.AbsFSMState)var61, true, true);
    java.lang.String var68 = var0.beginGraphString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-1245139464"+ "'", var14.equals("Part-0-1245139464"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "digraph {\n"+ "'", var20.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "  1 [label=\"0\",shape=circle];\n"+ "'", var47.equals("  1 [label=\"0\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "  100 [label=\"-1\",shape=circle,shape=doublecircle];\n"+ "'", var57.equals("  100 [label=\"-1\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "digraph {\n"+ "'", var58.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "Part-0-996242078"+ "'", var62.equals("Part-0-996242078"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "  -1 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->-1;\n"+ "'", var67.equals("  -1 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->-1;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "digraph {\n"+ "'", var68.equals("digraph {\n"));

  }

  public void test231() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test231"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    synoptic.model.event.Event var6 = var5.getNextEvent();
    java.lang.String var7 = var5.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var12 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var14 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var15 = var12.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var16 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var12);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var17 = var16.getObsState();
    java.lang.String var18 = var16.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var19 = var16.getObsState();
    boolean var20 = var16.isTermState();
    boolean var21 = var16.isTermState();
    boolean var22 = var16.isTermState();
    var16.setOccurred(false);
    java.lang.String var25 = var16.toString();
    var5.addRemoteDependency(var16);
    boolean var27 = var16.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var7.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var18.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var25.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);

  }

  public void test232() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test232"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getStates();
    dynoptic.model.alphabet.FSMAlphabet var22 = var19.getAlphabet();
    dynoptic.model.automaton.EventTypeEncodings var23 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var34 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var40 = var38.getInitialObsForPid(100);
    var36.removeAllObs(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSM var43 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var29, var34, var40, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var54 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    var56.removeAllObs(var60);
    dynoptic.model.fifosys.cfsm.fsm.FSM var63 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var49, var54, var60, 100);
    dynoptic.model.automaton.EventTypeEncodings var64 = var63.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var69 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var70 = var64.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var71 = var43.getEncodedAutomaton(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var77 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var82 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var84 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var88 = var86.getInitialObsForPid(100);
    var84.removeAllObs(var88);
    dynoptic.model.fifosys.cfsm.fsm.FSM var91 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var77, var82, var88, 100);
    dynoptic.model.automaton.EventTypeEncodings var92 = var91.getEventTypeEncodings();
    boolean var93 = var71.equals((java.lang.Object)var91);
    java.util.Set var94 = var91.getStates();
    java.util.Set var95 = var91.getAcceptStates();
    dynoptic.model.automaton.EventTypeEncodings var96 = var91.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var97 = var19.getEncodedAutomaton(var96);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var99 = var96.getEventType('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test233() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test233"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    var4.markTerm();
    var4.markTerm();
    var4.markTerm();
    var4.markTerm();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test234() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test234"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getStates();
    java.lang.String var22 = var19.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var28 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.fifosys.cfsm.fsm.FSM var42 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var28, var33, var39, 100);
    java.util.Set var43 = var42.getAcceptStates();
    java.lang.String var44 = var42.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var50 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var61 = var59.getInitialObsForPid(100);
    var57.removeAllObs(var61);
    dynoptic.model.fifosys.cfsm.fsm.FSM var64 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var50, var55, var61, 100);
    java.util.Set var65 = var64.getAcceptStates();
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var69 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var71 = var69.getInitialObsForPid(100);
    var67.removeAllObs(var71);
    boolean var73 = var67.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var79 = var77.getInitialObsForPid(100);
    var75.removeAllObs(var79);
    java.util.Set var81 = var75.getTerminalObs();
    var67.removeAllObs(var81);
    dynoptic.model.automaton.EventTypeEncodings var83 = new dynoptic.model.automaton.EventTypeEncodings(var81);
    dynoptic.model.automaton.EncodedAutomaton var84 = var64.getEncodedAutomaton(var83);
    dynoptic.model.automaton.EncodedAutomaton var85 = var42.getEncodedAutomaton(var83);
    dynoptic.model.automaton.EventTypeEncodings var86 = var42.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var87 = var19.getEncodedAutomaton(var86);
    var87.minimize();
    var87.minimize();
    var87.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var22.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var44.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test235() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test235"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    int var26 = var11.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var53 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var39, var44, var50, 100);
    var28.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var56 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var5, var11, var50, 1);
    java.lang.String var57 = var5.toShortIntString();
    java.lang.String var58 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "1"+ "'", var57.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "1"+ "'", var58.equals("1"));

  }

  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test236"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    java.lang.String var13 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var5, false, false);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var18 = var16.getTerminalObsForPid(1);
    java.lang.String var19 = var16.toLongString();
    java.lang.String var22 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var16, false, false);
    java.lang.String var23 = var0.endGraphString();
    java.lang.String var24 = var0.beginGraphString();
    java.lang.String var25 = var0.beginGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.cfsm.fsm.FSM var47 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var33, var38, var44, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var53 = var51.getInitialObsForPid(100);
    var49.removeAllObs(var53);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    var56.removeAllObs(var60);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var38, var53, var60);
    dynoptic.model.fifosys.gfsm.GFSMPath var64 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var65 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var64);
    boolean var66 = var38.equals((java.lang.Object)var65);
    dynoptic.model.fifosys.cfsm.CFSMState var67 = new dynoptic.model.fifosys.cfsm.CFSMState(var38);
    boolean var68 = var67.isInitial();
    boolean var70 = var67.isInitForPid(0);
    java.util.Set var71 = var67.getTransitioningEvents();
    java.lang.String var74 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var67, true, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var13.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]_i_t"+ "'", var19.equals("[]_i_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "  100 [label=\"[]\",shape=circle];\n"+ "'", var22.equals("  100 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "} // digraph {\n"+ "'", var23.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "digraph {\n"+ "'", var24.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "digraph {\n"+ "'", var25.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "  0 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@6ba2e13f\",shape=circle,shape=doublecircle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var74.equals("  0 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@6ba2e13f\",shape=circle,shape=doublecircle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));

  }

  public void test237() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test237"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    int var7 = var5.getPid();
    int var8 = var5.getPid();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var14 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var15 = var14.getNextState();
    var5.addRemoteDependency(var14);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var21 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var24 = var21.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var25 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var21);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var26 = var25.getObsState();
    boolean var27 = var25.isEnabled();
    boolean var28 = var25.isTermState();
    int var29 = var25.getPid();
    boolean var30 = var25.hasOccurred();
    java.lang.String var31 = var25.toString();
    var14.addRemoteDependency(var25);
    boolean var33 = var14.isInitState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var31.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);

  }

  public void test238() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test238"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 10, (-1));
    java.lang.String var5 = var4.toShortIntString();
    dynoptic.model.fifosys.cfsm.CFSMState var6 = new dynoptic.model.fifosys.cfsm.CFSMState(var4);
    java.util.Set var7 = var4.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "-1"+ "'", var5.equals("-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test239() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test239"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState((-1), true, false);
    boolean var4 = var3.isInitial();
    java.lang.String var5 = var3.getName();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var6 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var3);
    boolean var7 = var6.hasOccurred();
    boolean var8 = var6.hasOccurred();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "133"+ "'", var5.equals("133"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test240() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test240"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "Part-0-284291914", false, true);
    boolean var5 = var4.isInitial();
    boolean var6 = var4.isTerminal();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var7 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test241() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test241"); }


    dynoptic.model.alphabet.FSMAlphabet var1 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var2 = var1.toScmParametersString();
    var1.clear();
    java.lang.String var4 = var1.toString();
    boolean var5 = var1.isEmpty();
    dynoptic.model.fifosys.gfsm.GFSMState var6 = new dynoptic.model.fifosys.gfsm.GFSMState(1, (java.util.Set)var1);
    java.util.Iterator var7 = var1.iterator();
    var1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test242() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test242"); }


    dynoptic.model.alphabet.FSMAlphabet var1 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var2 = var1.toScmParametersString();
    var1.clear();
    java.lang.String var4 = var1.toString();
    boolean var5 = var1.isEmpty();
    dynoptic.model.fifosys.gfsm.GFSMState var6 = new dynoptic.model.fifosys.gfsm.GFSMState(1, (java.util.Set)var1);
    boolean var8 = var6.isAcceptForPid((-1));
    java.util.Set var10 = var6.getTerminalObsForPid(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test243() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test243"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    java.lang.String var5 = var4.toShortIntString();
    int var6 = var4.getScmId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "0"+ "'", var5.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test244() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test244"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 100);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath(var10);
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var14 = var13.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath(var10, var13);
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var17);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var21 = var20.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(var17, var20);
    dynoptic.model.fifosys.gfsm.GFSMPath var24 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var25 = new dynoptic.model.fifosys.gfsm.GFSMPath(var20, var24);
    boolean var26 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var24);
    dynoptic.model.fifosys.gfsm.GFSMPath var27 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, var24);
    dynoptic.model.fifosys.gfsm.GFSMPath var29 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var30 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var29);
    dynoptic.model.fifosys.gfsm.GFSMPath var31 = new dynoptic.model.fifosys.gfsm.GFSMPath(var24, var29);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    java.util.Set var36 = var33.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var38 = new dynoptic.model.fifosys.gfsm.GFSMPath(var33, (-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var39 = new dynoptic.model.fifosys.gfsm.GFSMPath(var29, var38);
    dynoptic.model.fifosys.gfsm.GFSMPath var40 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var39);
    java.lang.String var41 = var8.toString();
    int var42 = var8.numEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "GFSMPath : []"+ "'", var41.equals("GFSMPath : []"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);

  }

  public void test245() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test245"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState((-1));
    var1.markTerm();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test246"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var2 = var1.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 1);
    java.util.Set var5 = var1.getInitialObservations();
    java.util.Set var6 = var1.getTransitioningEvents();
    var1.recreateCachedTransitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-159141353"+ "'", var2.equals("Part-0-159141353"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test247() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test247"); }


    dynoptic.model.alphabet.FSMAlphabet var1 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var2 = var1.toScmParametersString();
    var1.clear();
    java.lang.String var4 = var1.toString();
    boolean var5 = var1.isEmpty();
    dynoptic.model.fifosys.gfsm.GFSMState var6 = new dynoptic.model.fifosys.gfsm.GFSMState(1, (java.util.Set)var1);
    dynoptic.model.alphabet.FSMAlphabet var7 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    var21.removeAllObs(var25);
    dynoptic.model.fifosys.cfsm.fsm.FSM var28 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var14, var19, var25, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var19, var34, var41);
    boolean var44 = var7.retainAll((java.util.Collection)var41);
    java.lang.Object[] var45 = var7.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var56 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    dynoptic.model.fifosys.cfsm.fsm.FSM var65 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var51, var56, var62, 100);
    int var66 = var65.getPid();
    java.util.Set var67 = var65.getAcceptStates();
    boolean var68 = var7.retainAll((java.util.Collection)var67);
    boolean var69 = var7.isEmpty();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var75 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var80 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var82 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var84 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var86 = var84.getInitialObsForPid(100);
    var82.removeAllObs(var86);
    dynoptic.model.fifosys.cfsm.fsm.FSM var89 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var75, var80, var86, 100);
    boolean var90 = var7.remove((java.lang.Object)var80);
    java.lang.String var91 = var7.anyEventScmQRe();
    var6.removeAllObs((java.util.Set)var7);
    java.util.Set var93 = var6.getTerminalObs();
    java.util.Set var94 = var6.getNextStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "(_)"+ "'", var91.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test248() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test248"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    boolean var8 = var1.isAccept();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 100);
    int var11 = var10.numEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);

  }

  public void test249() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test249"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    int var26 = var11.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var53 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var39, var44, var50, 100);
    var28.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var56 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var5, var11, var50, 1);
    boolean var57 = var56.isDeterministic();
    dynoptic.model.alphabet.FSMAlphabet var58 = var56.getAlphabet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test250"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    var1.removeAllObs(var23);
    java.lang.String var28 = var1.toLongString();
    java.util.Set var29 = var1.getObservedStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "[]"+ "'", var28.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test251"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    int var27 = var12.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var40 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var45 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var51 = var49.getInitialObsForPid(100);
    var47.removeAllObs(var51);
    dynoptic.model.fifosys.cfsm.fsm.FSM var54 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var40, var45, var51, 100);
    var29.removeAllObs(var51);
    dynoptic.model.fifosys.cfsm.fsm.FSM var57 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var6, var12, var51, 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var63 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var68 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var70 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var72 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var74 = var72.getInitialObsForPid(100);
    var70.removeAllObs(var74);
    dynoptic.model.fifosys.cfsm.fsm.FSM var77 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var63, var68, var74, 100);
    var63.setAccept();
    java.util.Set var79 = var63.getTransitioningEvents();
    dynoptic.model.alphabet.FSMAlphabet var81 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var82 = new dynoptic.model.fifosys.gfsm.GFSMState(1, (java.util.Set)var81);
    dynoptic.model.fifosys.cfsm.fsm.FSM var84 = new dynoptic.model.fifosys.cfsm.fsm.FSM(100, var6, var63, (java.util.Set)var81, 10);
    java.util.Set var85 = var84.getAcceptStates();
    dynoptic.model.automaton.EventTypeEncodings var86 = var84.getEventTypeEncodings();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test252"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-1407772999");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-1407772999"+ "'", var2.equals("Part-0-1407772999"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Part-0-1407772999"+ "'", var3.equals("Part-0-1407772999"));

  }

  public void test253() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test253"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    dynoptic.model.fifosys.gfsm.GFSMPath var38 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var39 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var38);
    boolean var40 = var12.equals((java.lang.Object)var39);
    boolean var41 = var12.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var52 = var50.getInitialObsForPid(100);
    var48.removeAllObs(var52);
    java.util.Set var54 = var48.getTerminalObs();
    dynoptic.model.fifosys.cfsm.fsm.FSM var56 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var12, var46, var54, 1);
    java.util.Set var57 = var56.getAcceptStates();
    dynoptic.model.automaton.EventTypeEncodings var58 = var56.getEventTypeEncodings();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test254"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var14 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var17 = var14.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var18 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var14);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var19 = var18.getObsState();
    var8.addRemoteDependency(var18);
    var18.setOccurred(true);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var23 = var18.getObsState();
    var23.markTerm();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test255() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test255"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.lang.String var20 = var10.toShortIntString();
    java.util.Set var21 = var10.getTransitioningEvents();
    int var22 = var10.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "0"+ "'", var20.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);

  }

  public void test256() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test256"); }


    dynoptic.model.alphabet.FSMAlphabet var1 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(1, (java.util.Set)var1);
    var1.clear();
    java.lang.String var4 = var1.toScmParametersString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));

  }

  public void test257() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test257"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var18);
    boolean var23 = var22.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var27 = var25.getTerminalObsForPid(1);
    java.util.Set var28 = var25.getObservedStates();
    var22.addAllObs(var28);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(100, var28);
    boolean var31 = var30.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test258() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test258"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.util.Set var4 = var1.getTransitioningEvents();
    java.util.Set var6 = var1.getTerminalObsForPid(100);
    var1.recreateCachedTransitions();
    java.lang.String var8 = var1.toString();
    java.lang.String var9 = var1.toString();
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "[]"+ "'", var9.equals("[]"));

  }

  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test259"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var11);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, var15);
    boolean var17 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var21 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var20);
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15, var20);
    dynoptic.model.export.DotExportFormatter var23 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var24 = var23.beginGraphString();
    java.lang.String var25 = var23.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var30 = var28.getInitialObsForPid(100);
    java.lang.String var33 = var23.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var28, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var37 = var36.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var39 = new dynoptic.model.fifosys.gfsm.GFSMPath(var36, 1);
    java.lang.String var42 = var23.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var36, true, true);
    java.lang.String var43 = var36.toString();
    java.util.Set var44 = var36.getTerminalObs();
    java.util.Set var45 = var36.getTerminalObs();
    dynoptic.model.fifosys.gfsm.GFSMPath var47 = new dynoptic.model.fifosys.gfsm.GFSMPath(var36, 0);
    dynoptic.model.fifosys.gfsm.GFSMPath var48 = new dynoptic.model.fifosys.gfsm.GFSMPath(var22, var47);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    boolean var56 = var50.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    java.util.Set var64 = var58.getTerminalObs();
    var50.removeAllObs(var64);
    java.util.Set var66 = var50.getTransitioningEvents();
    java.util.Set var67 = var50.getNextStates();
    dynoptic.model.fifosys.gfsm.GFSMPath var69 = new dynoptic.model.fifosys.gfsm.GFSMPath(var50, (-1));
    int var70 = var69.numStates();
    boolean var71 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var69);
    dynoptic.model.fifosys.gfsm.GFSMPath var72 = new dynoptic.model.fifosys.gfsm.GFSMPath(var22, var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "digraph {\n"+ "'", var24.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "digraph {\n"+ "'", var25.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var33.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Part-0-1103169761"+ "'", var37.equals("Part-0-1103169761"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var42.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "[]"+ "'", var43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);

  }

  public void test260() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test260"); }


    dynoptic.model.alphabet.FSMAlphabet var1 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var2 = var1.toScmParametersString();
    dynoptic.model.alphabet.FSMAlphabet var3 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var15 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var21 = var19.getInitialObsForPid(100);
    var17.removeAllObs(var21);
    dynoptic.model.fifosys.cfsm.fsm.FSM var24 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var10, var15, var21, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var30 = var28.getInitialObsForPid(100);
    var26.removeAllObs(var30);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var37 = var35.getInitialObsForPid(100);
    var33.removeAllObs(var37);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var15, var30, var37);
    boolean var40 = var3.retainAll((java.util.Collection)var37);
    java.lang.Object[] var41 = var3.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var47 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var52 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var58 = var56.getInitialObsForPid(100);
    var54.removeAllObs(var58);
    dynoptic.model.fifosys.cfsm.fsm.FSM var61 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var47, var52, var58, 100);
    int var62 = var61.getPid();
    java.util.Set var63 = var61.getAcceptStates();
    boolean var64 = var3.retainAll((java.util.Collection)var63);
    boolean var65 = var3.isEmpty();
    var3.clear();
    boolean var67 = var1.containsAll((java.util.Collection)var3);
    var3.clear();
    dynoptic.model.fifosys.gfsm.GFSMState var69 = new dynoptic.model.fifosys.gfsm.GFSMState((-1), (java.util.Set)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);

  }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test261"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    java.lang.String var7 = var4.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    dynoptic.model.alphabet.FSMAlphabet var15 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var21 = var19.getInitialObsForPid(100);
    var17.removeAllObs(var21);
    boolean var23 = var17.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    java.util.Set var31 = var25.getTerminalObs();
    var17.removeAllObs(var31);
    boolean var33 = var15.retainAll((java.util.Collection)var31);
    java.lang.Object[] var35 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var36 = var15.toArray(var35);
    java.lang.Object[] var37 = var15.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var4, var13, (java.util.Set)var15);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    boolean var46 = var40.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var52 = var50.getInitialObsForPid(100);
    var48.removeAllObs(var52);
    java.util.Set var54 = var48.getTerminalObs();
    var40.removeAllObs(var54);
    dynoptic.model.automaton.EventTypeEncodings var56 = new dynoptic.model.automaton.EventTypeEncodings(var54);
    boolean var57 = var15.addAll((java.util.Collection)var54);
    var1.removeAllObs((java.util.Set)var15);
    var1.recreateCachedTransitions();
    java.lang.String var60 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "[]"+ "'", var7.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "[]"+ "'", var60.equals("[]"));

  }

  public void test262() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test262"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(1);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var2 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var1);
    boolean var3 = var2.isInitState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var4 = var2.getPrevState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test263() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test263"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var34 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var40 = var38.getInitialObsForPid(100);
    var36.removeAllObs(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSM var43 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var29, var34, var40, 100);
    int var44 = var29.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var57 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var62 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var68 = var66.getInitialObsForPid(100);
    var64.removeAllObs(var68);
    dynoptic.model.fifosys.cfsm.fsm.FSM var71 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var57, var62, var68, 100);
    var46.removeAllObs(var68);
    dynoptic.model.fifosys.cfsm.fsm.FSM var74 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var23, var29, var68, 1);
    java.util.Set var75 = var74.getAcceptStates();
    dynoptic.model.automaton.EncodedAutomaton var76 = new dynoptic.model.automaton.EncodedAutomaton(var17, var74);
    var76.minimize();
    dk.brics.automaton.Automaton var78 = var76.getAutomaton();
    var76.minimize();
    var76.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test264"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 1, (-1));
    int var5 = var4.getScmId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));

  }

  public void test265() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test265"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(100);
    int var2 = var1.numStates();
    boolean var3 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test266"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var18);
    java.util.Set var24 = var22.getInitialObsForPid(1);
    java.util.Set var25 = var22.getTerminalObs();
    java.lang.String var26 = var22.toIntermediateString();
    java.util.Set var27 = var22.getNextStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.cfsm.fsm.FSM var47 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var33, var38, var44, 100);
    int var48 = var47.getPid();
    java.util.Set var49 = var47.getAcceptStates();
    dynoptic.model.alphabet.FSMAlphabet var50 = var47.getAlphabet();
    java.lang.String var51 = var50.anyEventScmQRe();
    java.lang.Object[] var52 = var50.toArray();
    boolean var53 = var50.isEmpty();
    java.lang.String var54 = var50.anyEventScmQRe();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var65 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var69 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var71 = var69.getInitialObsForPid(100);
    var67.removeAllObs(var71);
    dynoptic.model.fifosys.cfsm.fsm.FSM var74 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var60, var65, var71, 100);
    java.util.Set var75 = var74.getAcceptStates();
    java.util.Set var76 = var74.getAcceptStates();
    java.util.Set var77 = var74.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSM var79 = new dynoptic.model.fifosys.cfsm.fsm.FSM(100, var27, (java.util.Set)var50, (java.util.Collection)var77, (-1));
    java.util.Iterator var80 = var50.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Part-0-801070827"+ "'", var26.equals("Part-0-801070827"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "(_)"+ "'", var51.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(_)"+ "'", var54.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test267() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test267"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    java.lang.String var21 = var11.toShortIntString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (-1), 1);
    java.lang.String var27 = var26.toShortIntString();
    java.util.Set var28 = var26.getNextStates();
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    boolean var36 = var30.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    java.util.Set var44 = var38.getTerminalObs();
    var30.removeAllObs(var44);
    dynoptic.model.automaton.EventTypeEncodings var46 = new dynoptic.model.automaton.EventTypeEncodings(var44);
    boolean var48 = var46.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var52 = new dynoptic.model.fifosys.gfsm.GFSMPath(var50, (-1));
    boolean var53 = var46.equals((java.lang.Object)var50);
    java.util.Set var54 = var50.getTerminalObs();
    dynoptic.model.fifosys.cfsm.fsm.FSM var56 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var11, var26, var54, 100);
    boolean var57 = var11.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "0"+ "'", var21.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "1"+ "'", var27.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test268() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test268"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var6 = var5.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    int var27 = var12.getPid();
    int var28 = var12.getScmId();
    dynoptic.model.alphabet.FSMAlphabet var29 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var41 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.cfsm.fsm.FSM var50 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var36, var41, var47, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var41, var56, var63);
    boolean var66 = var29.retainAll((java.util.Collection)var63);
    java.lang.String var67 = var29.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var12, (java.util.Set)var29, 1);
    dynoptic.model.alphabet.FSMAlphabet var70 = var69.getAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var75 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 10, (-1));
    boolean var76 = var75.isAccept();
    java.util.Set var77 = var75.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMState var79 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var80 = var79.toIntermediateString();
    boolean var81 = var79.isAccept();
    java.util.Set var83 = var79.getInitialObsForPid(10);
    java.util.Set var85 = var79.getTerminalObsForPid(0);
    java.util.Set var86 = var79.getTerminalObs();
    dynoptic.model.fifosys.gfsm.GFSMPath var88 = new dynoptic.model.fifosys.gfsm.GFSMPath(var79, (-1));
    boolean var89 = var75.equals((java.lang.Object)var88);
    dynoptic.model.fifosys.gfsm.GFSMState var90 = var88.lastState();
    java.lang.String var91 = var88.toString();
    boolean var92 = var69.equals((java.lang.Object)var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[]"+ "'", var67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "Part-0-1296013197"+ "'", var80.equals("Part-0-1296013197"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "GFSMPath : []"+ "'", var91.equals("GFSMPath : []"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test269"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, (-1));
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    int var26 = var11.getPid();
    int var27 = var11.getScmId();
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    dynoptic.model.fifosys.cfsm.fsm.FSM var33 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var5, var11, var31, 0);
    boolean var34 = var11.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);

  }

  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test270"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "Part-0-284291914", false, true);
    boolean var5 = var4.isInitial();
    boolean var6 = var4.isTerminal();
    java.lang.String var7 = var4.getName();
    boolean var8 = var4.isInitial();
    java.lang.String var9 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Part-0-284291914"+ "'", var7.equals("Part-0-284291914"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Part-0-284291914_t"+ "'", var9.equals("Part-0-284291914_t"));

  }

  public void test271() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test271"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var8.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = var8.getObsState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var12 = var8.getObsState();
    boolean var13 = var8.isEnabled();
    int var14 = var8.getPid();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var15 = var8.getObsState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test272() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test272"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var9 = var8.lastState();
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var12 = var11.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var14 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, 1);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14);
    int var16 = var15.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var19 = new dynoptic.model.fifosys.gfsm.GFSMPath(var18);
    dynoptic.model.fifosys.gfsm.GFSMPath var21 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var22 = var21.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath(var18, var21);
    dynoptic.model.fifosys.gfsm.GFSMPath var25 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var26 = new dynoptic.model.fifosys.gfsm.GFSMPath(var21, var25);
    boolean var27 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var25);
    dynoptic.model.fifosys.gfsm.GFSMPath var28 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15, var25);
    dynoptic.model.fifosys.gfsm.GFSMPath var29 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var28);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = var28.lastState();
    dynoptic.model.fifosys.gfsm.GFSMPath var31 = new dynoptic.model.fifosys.gfsm.GFSMPath(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Part-0-341670154"+ "'", var12.equals("Part-0-341670154"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test273"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    java.lang.String var5 = var4.toShortIntString();
    java.util.Set var6 = var4.getNextStates();
    boolean var7 = var4.isInitial();
    java.lang.String var8 = var4.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "0"+ "'", var5.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var8.equals("FSM_state: init[true], accept[false] id[0]"));

  }

  public void test274() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test274"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.util.Set var4 = var1.getTransitioningEvents();
    java.util.Set var5 = var1.getInitialObservations();
    java.util.Set var6 = var1.getNextStates();
    java.util.Set var7 = var1.getInitialObservations();
    java.util.Set var8 = var1.getInitialObservations();
    java.util.Set var9 = var1.getObservedStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test275() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test275"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    dynoptic.model.alphabet.FSMAlphabet var7 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    boolean var15 = var9.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var21 = var19.getInitialObsForPid(100);
    var17.removeAllObs(var21);
    java.util.Set var23 = var17.getTerminalObs();
    var9.removeAllObs(var23);
    boolean var25 = var7.retainAll((java.util.Collection)var23);
    java.lang.String var26 = var7.toString();
    var1.addAllObs((java.util.Set)var7);
    dynoptic.model.alphabet.FSMAlphabet var28 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var35 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var40 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var46 = var44.getInitialObsForPid(100);
    var42.removeAllObs(var46);
    dynoptic.model.fifosys.cfsm.fsm.FSM var49 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var35, var40, var46, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var40, var55, var62);
    boolean var65 = var28.retainAll((java.util.Collection)var62);
    int var66 = var28.size();
    boolean var67 = var7.retainAll((java.util.Collection)var28);
    boolean var68 = var28.isEmpty();
    var28.clear();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var75 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var80 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var82 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var84 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var86 = var84.getInitialObsForPid(100);
    var82.removeAllObs(var86);
    dynoptic.model.fifosys.cfsm.fsm.FSM var89 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var75, var80, var86, 100);
    int var90 = var89.getPid();
    java.util.Set var91 = var89.getStates();
    dynoptic.model.alphabet.FSMAlphabet var92 = var89.getAlphabet();
    java.util.Set var93 = var92.getLocalEventScmStrings();
    boolean var94 = var28.containsAll((java.util.Collection)var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == true);

  }

  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test276"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getInitStates();
    java.util.Set var22 = var19.getStates();
    boolean var24 = var19.equals((java.lang.Object)"Part-0-1853704944");
    var19.minimize();
    dynoptic.model.automaton.EventTypeEncodings var26 = var19.getEventTypeEncodings();
    java.util.Set var27 = var19.getAcceptStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test277"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var16 = var13.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var17 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = var17.getObsState();
    boolean var19 = var17.isEnabled();
    var17.setOccurred(false);
    var8.addRemoteDependency(var17);
    boolean var23 = var8.hasOccurred();
    var8.setOccurred(true);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var26 = var8.getObsState();
    boolean var27 = var8.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test278() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test278"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    boolean var8 = var2.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    java.util.Set var16 = var10.getTerminalObs();
    var2.removeAllObs(var16);
    boolean var18 = var0.retainAll((java.util.Collection)var16);
    java.lang.Object[] var20 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var21 = var0.toArray(var20);
    java.lang.Object[] var22 = var0.toArray();
    java.lang.Object[] var23 = var0.toArray();
    java.lang.String var24 = var0.anyEventScmQRe();
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var30 = var28.getInitialObsForPid(100);
    var26.removeAllObs(var30);
    boolean var32 = var26.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    java.util.Set var40 = var34.getTerminalObs();
    var26.removeAllObs(var40);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var45 = var43.getInitialObsForPid(100);
    java.lang.String var46 = var43.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var69 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var73 = var71.getInitialObsForPid(100);
    var69.removeAllObs(var73);
    dynoptic.model.fifosys.gfsm.GFSMState var76 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var80 = var78.getInitialObsForPid(100);
    var76.removeAllObs(var80);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var58, var73, var80);
    var43.removeAllObs(var80);
    var26.addAllObs(var80);
    java.util.Set var86 = var26.getInitialObsForPid(0);
    java.util.Set var87 = var26.getTerminalObs();
    boolean var88 = var0.removeAll((java.util.Collection)var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "(_)"+ "'", var24.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "[]"+ "'", var46.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test279() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test279"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var11 = var9.getInitialObsForPid(100);
    java.lang.String var12 = var9.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.alphabet.FSMAlphabet var20 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    boolean var28 = var22.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    java.util.Set var36 = var30.getTerminalObs();
    var22.removeAllObs(var36);
    boolean var38 = var20.retainAll((java.util.Collection)var36);
    java.lang.Object[] var40 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var41 = var20.toArray(var40);
    java.lang.Object[] var42 = var20.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var9, var18, (java.util.Set)var20);
    java.lang.String var44 = var20.toString();
    dynoptic.model.alphabet.FSMAlphabet var45 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var51 = var49.getInitialObsForPid(100);
    var47.removeAllObs(var51);
    boolean var53 = var47.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    java.util.Set var61 = var55.getTerminalObs();
    var47.removeAllObs(var61);
    boolean var63 = var45.retainAll((java.util.Collection)var61);
    java.lang.Object[] var65 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var66 = var45.toArray(var65);
    java.lang.Object[] var67 = var20.toArray(var66);
    java.lang.String var68 = var20.toScmParametersString();
    var1.addAllObs((java.util.Set)var20);
    java.lang.String var70 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "[]"+ "'", var12.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "[]"+ "'", var44.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + ""+ "'", var68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "[]"+ "'", var70.equals("[]"));

  }

  public void test280() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test280"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    int var68 = var67.getPid();
    java.util.Set var69 = var67.getStates();
    java.util.Set var70 = var67.getStates();
    boolean var71 = var47.equals((java.lang.Object)var70);
    boolean var73 = var47.equals((java.lang.Object)"Part-0-68366125");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test281"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    java.lang.String var8 = var4.getName();
    dynoptic.model.export.DotExportFormatter var9 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var10 = var9.beginGraphString();
    java.lang.String var11 = var9.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    java.lang.String var19 = var9.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, true, false);
    java.lang.String var20 = var9.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var24 = var23.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var26 = new dynoptic.model.fifosys.gfsm.GFSMPath(var23, 1);
    java.lang.String var29 = var9.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var23, false, true);
    java.util.Set var31 = var23.getTerminalObsForPid(100);
    java.lang.String var32 = var23.toLongString();
    boolean var33 = var4.equals((java.lang.Object)var32);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var34 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    boolean var35 = var4.isTerminal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "digraph {\n"+ "'", var10.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var19.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "digraph {\n"+ "'", var20.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "Part-0-1751389520"+ "'", var24.equals("Part-0-1751389520"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var29.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);

  }

  public void test282() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test282"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    int var26 = var11.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var53 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var39, var44, var50, 100);
    var28.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var56 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var5, var11, var50, 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var63 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var68 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var70 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var72 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var74 = var72.getInitialObsForPid(100);
    var70.removeAllObs(var74);
    dynoptic.model.fifosys.cfsm.fsm.FSM var77 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var63, var68, var74, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var79 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var81 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var83 = var81.getInitialObsForPid(100);
    var79.removeAllObs(var83);
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var88 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var90 = var88.getInitialObsForPid(100);
    var86.removeAllObs(var90);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var68, var83, var90);
    dynoptic.model.fifosys.gfsm.GFSMPath var94 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var95 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var94);
    boolean var96 = var68.equals((java.lang.Object)var95);
    boolean var97 = var56.equals((java.lang.Object)var95);
    var56.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test283() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test283"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getStates();
    java.util.Set var22 = var19.getStates();
    dynoptic.model.alphabet.FSMAlphabet var23 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var24 = var23.toScmParametersString();
    int var25 = var23.size();
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    boolean var30 = var27.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var32 = new dynoptic.model.fifosys.gfsm.GFSMPath(var27, 10);
    dynoptic.model.alphabet.FSMAlphabet var33 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    boolean var41 = var35.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    java.util.Set var49 = var43.getTerminalObs();
    var35.removeAllObs(var49);
    boolean var51 = var33.retainAll((java.util.Collection)var49);
    java.lang.String var52 = var33.toString();
    var27.addAllObs((java.util.Set)var33);
    dynoptic.model.alphabet.FSMAlphabet var54 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var61 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var66 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var70 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var72 = var70.getInitialObsForPid(100);
    var68.removeAllObs(var72);
    dynoptic.model.fifosys.cfsm.fsm.FSM var75 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var61, var66, var72, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var79 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var81 = var79.getInitialObsForPid(100);
    var77.removeAllObs(var81);
    dynoptic.model.fifosys.gfsm.GFSMState var84 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var88 = var86.getInitialObsForPid(100);
    var84.removeAllObs(var88);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var66, var81, var88);
    boolean var91 = var54.retainAll((java.util.Collection)var88);
    int var92 = var54.size();
    boolean var93 = var33.retainAll((java.util.Collection)var54);
    java.lang.Object[] var94 = var54.toArray();
    java.lang.Object[] var95 = var23.toArray(var94);
    boolean var96 = var23.isEmpty();
    boolean var97 = var19.equals((java.lang.Object)var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + ""+ "'", var24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "[]"+ "'", var52.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test284() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test284"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    java.lang.String var13 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var5, false, false);
    java.lang.String var14 = var0.endGraphString();
    java.lang.String var15 = var0.endGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var22 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var28 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.fifosys.cfsm.fsm.FSM var42 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var28, var33, var39, 100);
    int var43 = var28.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    var45.removeAllObs(var49);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var56 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var61 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var63 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var65 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var67 = var65.getInitialObsForPid(100);
    var63.removeAllObs(var67);
    dynoptic.model.fifosys.cfsm.fsm.FSM var70 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var56, var61, var67, 100);
    var45.removeAllObs(var67);
    dynoptic.model.fifosys.cfsm.fsm.FSM var73 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var22, var28, var67, 1);
    java.lang.String var74 = var28.toShortIntString();
    java.lang.String var77 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var28, true, true);
    java.lang.String var78 = var0.beginGraphString();
    java.lang.String var79 = var0.endGraphString();
    java.lang.String var80 = var0.beginGraphString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var13.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "} // digraph {\n"+ "'", var14.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "} // digraph {\n"+ "'", var15.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "0"+ "'", var74.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "  100 [label=\"0\",shape=circle,shape=doublecircle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->100;\n"+ "'", var77.equals("  100 [label=\"0\",shape=circle,shape=doublecircle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "digraph {\n"+ "'", var78.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "} // digraph {\n"+ "'", var79.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "digraph {\n"+ "'", var80.equals("digraph {\n"));

  }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test285"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-2003307528");

  }

  public void test286() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test286"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    dynoptic.model.alphabet.FSMAlphabet var7 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    boolean var15 = var9.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var21 = var19.getInitialObsForPid(100);
    var17.removeAllObs(var21);
    java.util.Set var23 = var17.getTerminalObs();
    var9.removeAllObs(var23);
    boolean var25 = var7.retainAll((java.util.Collection)var23);
    java.lang.String var26 = var7.toString();
    var1.addAllObs((java.util.Set)var7);
    dynoptic.model.alphabet.FSMAlphabet var28 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var35 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var40 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var46 = var44.getInitialObsForPid(100);
    var42.removeAllObs(var46);
    dynoptic.model.fifosys.cfsm.fsm.FSM var49 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var35, var40, var46, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var40, var55, var62);
    boolean var65 = var28.retainAll((java.util.Collection)var62);
    int var66 = var28.size();
    boolean var67 = var7.retainAll((java.util.Collection)var28);
    java.util.Iterator var68 = var28.iterator();
    dynoptic.model.fifosys.gfsm.GFSMPath var70 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var71 = new dynoptic.model.fifosys.gfsm.GFSMPath(var70);
    dynoptic.model.fifosys.gfsm.GFSMPath var73 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var74 = var73.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var75 = new dynoptic.model.fifosys.gfsm.GFSMPath(var70, var73);
    dynoptic.model.fifosys.gfsm.GFSMPath var76 = new dynoptic.model.fifosys.gfsm.GFSMPath(var70);
    int var77 = var70.numEvents();
    boolean var78 = var28.remove((java.lang.Object)var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);

  }

  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test287"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getAcceptStates();
    java.util.Set var22 = var19.getStates();
    dynoptic.model.alphabet.FSMAlphabet var23 = var19.getAlphabet();
    java.lang.String var24 = var19.toString();
    boolean var25 = var19.isDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var24.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test288() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test288"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("Part-0-330617077");

  }

  public void test289() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test289"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    boolean var8 = var2.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    java.util.Set var16 = var10.getTerminalObs();
    var2.removeAllObs(var16);
    boolean var18 = var0.retainAll((java.util.Collection)var16);
    java.lang.Object[] var20 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var21 = var0.toArray(var20);
    java.lang.Object[] var22 = var0.toArray();
    boolean var24 = var0.remove((java.lang.Object)"a131_t");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test290() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test290"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    boolean var9 = var8.isInitState();
    boolean var10 = var8.isInitState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test291() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test291"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = var40.getFSMState(0);
    dynoptic.model.fifosys.cfsm.CFSMState var44 = new dynoptic.model.fifosys.cfsm.CFSMState(var43);
    boolean var45 = var44.isInitial();
    boolean var46 = var44.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test292"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    boolean var9 = var1.isInitForPid(1);
    dynoptic.model.alphabet.FSMAlphabet var10 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var22 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var28 = var26.getInitialObsForPid(100);
    var24.removeAllObs(var28);
    dynoptic.model.fifosys.cfsm.fsm.FSM var31 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var17, var22, var28, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var37 = var35.getInitialObsForPid(100);
    var33.removeAllObs(var37);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var22, var37, var44);
    boolean var47 = var10.retainAll((java.util.Collection)var44);
    java.util.Iterator var48 = var10.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var51 = var50.toIntermediateString();
    boolean var52 = var50.isAccept();
    java.util.Set var54 = var50.getInitialObsForPid(10);
    boolean var55 = var10.addAll((java.util.Collection)var54);
    java.util.Set var56 = var10.getLocalEventScmStrings();
    java.util.Iterator var57 = var10.iterator();
    java.util.Set var58 = var10.getLocalEventScmStrings();
    var1.removeAllObs(var58);
    boolean var61 = var1.isAcceptForPid(1);
    java.lang.String var62 = var1.toLongString();
    java.util.Set var64 = var1.getInitialObsForPid(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "Part-0-1196486492"+ "'", var51.equals("Part-0-1196486492"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "[]"+ "'", var62.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test293"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    var6.setAccept();
    var6.setAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (-1), 1);
    java.lang.String var28 = var27.toShortIntString();
    dynoptic.model.alphabet.FSMAlphabet var29 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    boolean var37 = var31.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    java.util.Set var45 = var39.getTerminalObs();
    var31.removeAllObs(var45);
    boolean var47 = var29.retainAll((java.util.Collection)var45);
    java.lang.Object[] var49 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var50 = var29.toArray(var49);
    java.lang.Object[] var51 = var29.toArray();
    java.lang.Object[] var52 = var29.toArray();
    java.lang.String var53 = var29.anyEventScmQRe();
    dynoptic.model.fifosys.cfsm.fsm.FSM var55 = new dynoptic.model.fifosys.cfsm.fsm.FSM(0, var6, var27, (java.util.Set)var29, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "1"+ "'", var28.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "(_)"+ "'", var53.equals("(_)"));

  }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test294"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(2);

  }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test295"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    java.lang.Object[] var39 = var0.toArray();
    dynoptic.model.automaton.EventTypeEncodings var40 = new dynoptic.model.automaton.EventTypeEncodings((java.util.Set)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test296() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test296"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(2);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);

  }

  public void test297() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test297"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    java.lang.String var20 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    java.util.Set var26 = var23.getTransitioningEvents();
    java.util.Set var27 = var23.getInitialObservations();
    var23.recreateCachedTransitions();
    java.lang.String var31 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(10, (dynoptic.model.AbsFSMState)var23, true, true);
    java.lang.String var32 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var37 = var35.getInitialObsForPid(100);
    java.util.Set var38 = var35.getTransitioningEvents();
    java.util.Set var39 = var35.getInitialObservations();
    java.util.Set var40 = var35.getNextStates();
    java.util.Set var41 = var35.getObservedStates();
    java.lang.String var42 = var35.toLongString();
    java.util.Set var43 = var35.getObservedStates();
    java.lang.String var46 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var35, true, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-838755074"+ "'", var14.equals("Part-0-838755074"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "} // digraph {\n"+ "'", var20.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "  10 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->10;\n"+ "'", var31.equals("  10 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->10;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "} // digraph {\n"+ "'", var32.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "  1 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_3 [label=\"start\",shape=plaintext];\n  start_3->1;\n"+ "'", var46.equals("  1 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_3 [label=\"start\",shape=plaintext];\n  start_3->1;\n"));

  }

  public void test298() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test298"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    java.lang.String var36 = var11.toLongString();
    java.lang.String var37 = var11.toLongString();
    java.lang.String var38 = var11.toString();
    var11.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var11.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var36.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var37.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "0"+ "'", var38.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);

  }

  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test299"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    int var21 = var5.getScmId();
    boolean var22 = var5.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test300"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    java.lang.String var8 = var4.getName();
    dynoptic.model.export.DotExportFormatter var9 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var10 = var9.beginGraphString();
    java.lang.String var11 = var9.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    java.lang.String var19 = var9.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, true, false);
    java.lang.String var20 = var9.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var24 = var23.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var26 = new dynoptic.model.fifosys.gfsm.GFSMPath(var23, 1);
    java.lang.String var29 = var9.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var23, false, true);
    java.util.Set var31 = var23.getTerminalObsForPid(100);
    java.lang.String var32 = var23.toLongString();
    boolean var33 = var4.equals((java.lang.Object)var32);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var34 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var35 = var34.getObsState();
    int var36 = var35.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "digraph {\n"+ "'", var10.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var19.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "digraph {\n"+ "'", var20.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "Part-0-944603058"+ "'", var24.equals("Part-0-944603058"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var29.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "[]"+ "'", var32.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));

  }

  public void test301() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test301"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var4 = var2.getTerminalObsForPid(1);
    dynoptic.model.fifosys.gfsm.GFSMState var6 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var8 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var10 = var8.getInitialObsForPid(100);
    var6.removeAllObs(var10);
    boolean var12 = var6.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    java.util.Set var20 = var14.getTerminalObs();
    var6.removeAllObs(var20);
    java.util.Set var22 = var6.getTransitioningEvents();
    var2.addAllObs(var22);
    java.util.Set var24 = var2.getObservedStates();
    java.util.Set var25 = var2.getTerminalObs();
    boolean var27 = var2.isAcceptForPid(1);
    java.util.Set var28 = var2.getObservedStates();
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(2, var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test302() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test302"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.lang.String var4 = var1.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var16, var31, var38);
    var1.removeAllObs(var38);
    boolean var42 = var1.isInitial();
    boolean var44 = var1.isInitForPid(100);
    dynoptic.model.alphabet.FSMAlphabet var45 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var51 = var49.getInitialObsForPid(100);
    var47.removeAllObs(var51);
    boolean var53 = var47.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    java.util.Set var61 = var55.getTerminalObs();
    var47.removeAllObs(var61);
    boolean var63 = var45.retainAll((java.util.Collection)var61);
    java.lang.String var64 = var45.anyEventScmQRe();
    java.lang.String var65 = var45.toScmParametersString();
    java.util.Set var66 = var45.getLocalEventScmStrings();
    var1.addAllObs((java.util.Set)var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "(_)"+ "'", var64.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test303() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test303"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var25 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var26 = var20.equals((java.lang.Object)true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    dynoptic.model.fifosys.cfsm.fsm.FSM var46 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var32, var37, var43, 100);
    int var47 = var32.getPid();
    java.lang.String var48 = var32.toLongString();
    boolean var49 = var20.equals((java.lang.Object)var48);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var53 = var51.getInitialObsForPid(100);
    java.util.Set var54 = var51.getTransitioningEvents();
    boolean var55 = var20.equals((java.lang.Object)var54);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var61 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var66 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var70 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var72 = var70.getInitialObsForPid(100);
    var68.removeAllObs(var72);
    dynoptic.model.fifosys.cfsm.fsm.FSM var75 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var61, var66, var72, 100);
    java.util.Set var76 = var75.getAcceptStates();
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var82 = var80.getInitialObsForPid(100);
    var78.removeAllObs(var82);
    boolean var84 = var78.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var88 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var90 = var88.getInitialObsForPid(100);
    var86.removeAllObs(var90);
    java.util.Set var92 = var86.getTerminalObs();
    var78.removeAllObs(var92);
    dynoptic.model.automaton.EventTypeEncodings var94 = new dynoptic.model.automaton.EventTypeEncodings(var92);
    dynoptic.model.automaton.EncodedAutomaton var95 = var75.getEncodedAutomaton(var94);
    dynoptic.model.automaton.EncodedAutomaton var96 = new dynoptic.model.automaton.EncodedAutomaton(var20, var75);
    dynoptic.model.automaton.EventTypeEncodings var97 = var75.getEventTypeEncodings();
    java.util.Set var98 = var75.getInitStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var48.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test304() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test304"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    boolean var8 = var2.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    java.util.Set var16 = var10.getTerminalObs();
    var2.removeAllObs(var16);
    boolean var18 = var0.retainAll((java.util.Collection)var16);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var24 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.fifosys.cfsm.fsm.FSM var38 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var24, var29, var35, 100);
    int var39 = var38.getPid();
    java.util.Set var40 = var38.getStates();
    boolean var41 = var0.addAll((java.util.Collection)var40);
    dynoptic.model.alphabet.FSMAlphabet var42 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var48 = var46.getInitialObsForPid(100);
    var44.removeAllObs(var48);
    boolean var50 = var44.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    java.util.Set var58 = var52.getTerminalObs();
    var44.removeAllObs(var58);
    boolean var60 = var42.retainAll((java.util.Collection)var58);
    java.lang.Object[] var62 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var63 = var42.toArray(var62);
    java.lang.Object[] var64 = var42.toArray();
    java.lang.Object[] var65 = var0.toArray(var64);
    dynoptic.model.alphabet.FSMAlphabet var66 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var70 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var72 = var70.getInitialObsForPid(100);
    var68.removeAllObs(var72);
    boolean var74 = var68.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var76 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var80 = var78.getInitialObsForPid(100);
    var76.removeAllObs(var80);
    java.util.Set var82 = var76.getTerminalObs();
    var68.removeAllObs(var82);
    boolean var84 = var66.retainAll((java.util.Collection)var82);
    java.lang.Object[] var86 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var87 = var66.toArray(var86);
    java.lang.Object[] var88 = var66.toArray();
    java.lang.Object[] var89 = var0.toArray(var88);
    java.lang.String var90 = var0.anyEventScmQRe();
    java.lang.String var91 = var0.toString();
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "(_)"+ "'", var90.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "[]"+ "'", var91.equals("[]"));

  }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test305"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var16 = var13.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var17 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = var17.getObsState();
    boolean var19 = var17.isEnabled();
    var17.setOccurred(false);
    var8.addRemoteDependency(var17);
    boolean var23 = var8.hasOccurred();
    java.lang.String var24 = var8.toString();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var25 = var8.getPrevState();
    boolean var26 = var8.hasOccurred();
    int var27 = var8.getPid();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var28 = var8.getPrevState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var24.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test306"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    var0.clear();
    java.lang.String var3 = var0.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var8 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var11 = var8.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var12 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var8);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var17 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var19 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var20 = var17.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var21 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var17);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var22 = var21.getObsState();
    boolean var23 = var21.isEnabled();
    var21.setOccurred(false);
    var12.addRemoteDependency(var21);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var27 = var21.getObsState();
    boolean var28 = var0.remove((java.lang.Object)var27);
    java.lang.String var29 = var0.anyEventScmQRe();
    dynoptic.model.export.DotExportFormatter var30 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var31 = var30.beginGraphString();
    java.lang.String var32 = var30.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var37 = var35.getInitialObsForPid(100);
    java.lang.String var40 = var30.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var35, true, false);
    java.lang.String var41 = var30.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var45 = var44.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var47 = new dynoptic.model.fifosys.gfsm.GFSMPath(var44, 1);
    java.lang.String var50 = var30.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var44, false, true);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var63 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var68 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var70 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var72 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var74 = var72.getInitialObsForPid(100);
    var70.removeAllObs(var74);
    dynoptic.model.fifosys.cfsm.fsm.FSM var77 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var63, var68, var74, 100);
    var52.removeAllObs(var74);
    java.util.Set var80 = var52.getInitialObsForPid((-1));
    var44.removeAllObs(var80);
    java.lang.String var82 = var44.toLongString();
    dynoptic.model.alphabet.FSMAlphabet var83 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var84 = var83.toScmParametersString();
    java.lang.String var85 = var83.toString();
    java.lang.String var86 = var83.toString();
    var44.removeAllObs((java.util.Set)var83);
    java.lang.String var88 = var83.toString();
    var83.clear();
    boolean var90 = var0.removeAll((java.util.Collection)var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "(_)"+ "'", var29.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "digraph {\n"+ "'", var31.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "digraph {\n"+ "'", var32.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var40.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "digraph {\n"+ "'", var41.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "Part-0-585367005"+ "'", var45.equals("Part-0-585367005"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var50.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "[]"+ "'", var82.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + ""+ "'", var84.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "[]"+ "'", var85.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "[]"+ "'", var86.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "[]"+ "'", var88.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test307"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    var0.clear();
    java.lang.String var3 = var0.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var8 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var11 = var8.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var12 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var8);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var17 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var19 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var20 = var17.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var21 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var17);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var22 = var21.getObsState();
    boolean var23 = var21.isEnabled();
    var21.setOccurred(false);
    var12.addRemoteDependency(var21);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var27 = var21.getObsState();
    boolean var28 = var0.remove((java.lang.Object)var27);
    boolean var29 = var0.isEmpty();
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    boolean var37 = var31.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    java.util.Set var45 = var39.getTerminalObs();
    var31.removeAllObs(var45);
    java.util.Set var47 = var31.getTransitioningEvents();
    boolean var48 = var0.removeAll((java.util.Collection)var47);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var54 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var59 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var63 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var65 = var63.getInitialObsForPid(100);
    var61.removeAllObs(var65);
    dynoptic.model.fifosys.cfsm.fsm.FSM var68 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var54, var59, var65, 100);
    int var69 = var68.getPid();
    java.util.Set var70 = var68.getAcceptStates();
    dynoptic.model.alphabet.FSMAlphabet var71 = var68.getAlphabet();
    boolean var72 = var0.removeAll((java.util.Collection)var71);
    java.util.Iterator var73 = var71.iterator();
    var71.clear();
    java.lang.Object[] var75 = var71.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "[]"+ "'", var3.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test308"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, false, 100, 0);

  }

  public void test309() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test309"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(1, "ObsDAGNode[i_hi!_t]", false, false);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    boolean var6 = var4.isInitial();
    int var7 = var4.getPid();
    int var8 = var4.getPid();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var9 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);

  }

  public void test310() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test310"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    int var42 = var27.getPid();
    int var43 = var27.getScmId();
    int var44 = var27.getPid();
    boolean var45 = var19.equals((java.lang.Object)var44);
    java.lang.String var46 = var19.toString();
    boolean var47 = var19.isDeterministic();
    var19.minimize();
    var19.minimize();
    dynoptic.model.alphabet.FSMAlphabet var50 = var19.getAlphabet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var46.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test311() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test311"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    boolean var10 = var8.isEnabled();
    boolean var11 = var8.isTermState();
    int var12 = var8.getPid();
    boolean var13 = var8.hasOccurred();
    java.lang.String var14 = var8.toString();
    boolean var15 = var8.isTermState();
    boolean var16 = var8.hasOccurred();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var21 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var24 = var21.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var25 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var21);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var30 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var32 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var33 = var30.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var34 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var30);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var35 = var34.getObsState();
    boolean var36 = var34.isEnabled();
    var34.setOccurred(false);
    var25.addRemoteDependency(var34);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var40 = var34.getObsState();
    boolean var41 = var34.isInitState();
    boolean var42 = var34.isTermState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var43 = var34.getPrevState();
    var8.addRemoteDependency(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var14.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);

  }

  public void test312() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test312"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    boolean var10 = var8.isEnabled();
    boolean var11 = var8.isTermState();
    int var12 = var8.getPid();
    boolean var13 = var8.hasOccurred();
    java.lang.String var14 = var8.toString();
    boolean var15 = var8.isTermState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var16 = var8.getNextState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var14.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test313() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test313"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    java.lang.String var13 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var5, false, false);
    java.lang.String var14 = var0.endGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var22 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.fifosys.cfsm.fsm.FSM var36 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var22, var27, var33, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    var45.removeAllObs(var49);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var27, var42, var49);
    dynoptic.model.fifosys.gfsm.GFSMPath var53 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var54 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var53);
    boolean var55 = var27.equals((java.lang.Object)var54);
    dynoptic.model.fifosys.cfsm.CFSMState var56 = new dynoptic.model.fifosys.cfsm.CFSMState(var27);
    boolean var57 = var56.isInitial();
    boolean var58 = var56.isInitial();
    boolean var59 = var56.isAccept();
    java.lang.String var62 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var56, false, true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var64 = var56.getFSMState(0);
    int var65 = var64.getPid();
    java.lang.String var66 = var64.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var13.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "} // digraph {\n"+ "'", var14.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "  1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@18d506fd\",shape=circle,shape=doublecircle];\n"+ "'", var62.equals("  1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@18d506fd\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var66.equals("FSM_state: init[true], accept[false] id[0]"));

  }

  public void test314() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test314"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var45 = var42.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var46 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var51 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var52 = var51.getName();
    boolean var53 = var42.equals((java.lang.Object)var51);
    boolean var54 = var0.contains((java.lang.Object)var42);
    boolean var55 = var42.isTerminal();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var56 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    var42.markTerm();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var52.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);

  }

  public void test315() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test315"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    java.lang.String var37 = var12.toLongString();
    java.lang.String var38 = var12.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var44.getPid();
    int var60 = var44.getScmId();
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var64 = var62.getTerminalObsForPid(1);
    dynoptic.model.fifosys.cfsm.fsm.FSM var66 = new dynoptic.model.fifosys.cfsm.fsm.FSM(0, var12, var44, var64, 10);
    dynoptic.model.alphabet.FSMAlphabet var67 = var66.getAlphabet();
    dynoptic.model.automaton.EventTypeEncodings var68 = var66.getEventTypeEncodings();
    var66.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var37.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var38.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test316() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test316"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.automaton.EventTypeEncodings var68 = var67.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var69 = new dynoptic.model.automaton.EncodedAutomaton(var40, var67);
    var69.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test317() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test317"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    java.lang.String var21 = var5.toLongString();
    java.util.Set var22 = var5.getTransitioningEvents();
    int var23 = var5.getScmId();
    dynoptic.model.fifosys.cfsm.CFSMState var24 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    boolean var26 = var24.isInitForPid(0);
    java.util.Set var27 = var24.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var21.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test318() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test318"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getStates();
    java.lang.String var22 = var19.toString();
    int var23 = var19.getPid();
    java.lang.String var24 = var19.toString();
    java.util.Set var25 = var19.getAcceptStates();
    java.lang.String var26 = var19.toString();
    dynoptic.model.automaton.EventTypeEncodings var27 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    java.util.Set var35 = var29.getTransitioningEvents();
    dynoptic.model.automaton.EventTypeEncodings var36 = new dynoptic.model.automaton.EventTypeEncodings(var35);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var42 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var47 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var53 = var51.getInitialObsForPid(100);
    var49.removeAllObs(var53);
    dynoptic.model.fifosys.cfsm.fsm.FSM var56 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var42, var47, var53, 100);
    var42.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var58 = new dynoptic.model.fifosys.cfsm.CFSMState(var42);
    java.util.Set var59 = var58.getTransitioningEvents();
    boolean var60 = var36.equals((java.lang.Object)var59);
    boolean var61 = var19.equals((java.lang.Object)var60);
    java.util.Set var62 = var19.getAcceptStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var22.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var24.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var26.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test319() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test319"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    dynoptic.model.alphabet.FSMAlphabet var2 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var9 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var20 = var18.getInitialObsForPid(100);
    var16.removeAllObs(var20);
    dynoptic.model.fifosys.cfsm.fsm.FSM var23 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var9, var14, var20, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var14, var29, var36);
    boolean var39 = var2.retainAll((java.util.Collection)var36);
    java.lang.Object[] var40 = var2.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var57 = var55.getInitialObsForPid(100);
    var53.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var60 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var46, var51, var57, 100);
    int var61 = var60.getPid();
    java.util.Set var62 = var60.getAcceptStates();
    boolean var63 = var2.retainAll((java.util.Collection)var62);
    boolean var64 = var2.isEmpty();
    var2.clear();
    boolean var66 = var0.containsAll((java.util.Collection)var2);
    java.util.Iterator var67 = var2.iterator();
    java.lang.String var68 = var2.anyEventScmQRe();
    boolean var69 = var2.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(_)"+ "'", var68.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);

  }

  public void test320() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test320"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var6 = var5.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    int var27 = var12.getPid();
    int var28 = var12.getScmId();
    dynoptic.model.alphabet.FSMAlphabet var29 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var41 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.cfsm.fsm.FSM var50 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var36, var41, var47, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var41, var56, var63);
    boolean var66 = var29.retainAll((java.util.Collection)var63);
    java.lang.String var67 = var29.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var12, (java.util.Set)var29, 1);
    java.util.Set var70 = var69.getAcceptStates();
    int var71 = var69.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[]"+ "'", var67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1));

  }

  public void test321() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test321"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.automaton.EventTypeEncodings var68 = var67.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var69 = new dynoptic.model.automaton.EncodedAutomaton(var40, var67);
    java.util.Set var70 = var67.getAcceptStates();
    java.util.Set var71 = var67.getInitStates();
    java.util.Set var72 = var67.getInitStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test322() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test322"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    var4.setAccept();
    java.lang.String var6 = var4.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    java.util.Set var27 = var26.getAcceptStates();
    java.util.Set var28 = var26.getStates();
    java.lang.String var29 = var26.toString();
    int var30 = var26.getPid();
    java.lang.String var31 = var26.toString();
    java.util.Set var32 = var26.getAcceptStates();
    java.util.Set var33 = var26.getAcceptStates();
    int var34 = var26.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var40 = var38.getInitialObsForPid(100);
    var36.removeAllObs(var40);
    boolean var42 = var36.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var48 = var46.getInitialObsForPid(100);
    var44.removeAllObs(var48);
    java.util.Set var50 = var44.getTerminalObs();
    var36.removeAllObs(var50);
    dynoptic.model.automaton.EventTypeEncodings var52 = new dynoptic.model.automaton.EventTypeEncodings(var50);
    boolean var54 = var52.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var58 = new dynoptic.model.fifosys.gfsm.GFSMPath(var56, (-1));
    boolean var59 = var52.equals((java.lang.Object)var56);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var64 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var66 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var67 = var64.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var68 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var64);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var69 = var68.getObsState();
    java.lang.String var70 = var68.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var71 = var68.getObsState();
    boolean var72 = var68.isTermState();
    boolean var73 = var68.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var78 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var79 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var78);
    java.lang.String var80 = var79.toString();
    boolean var81 = var79.hasOccurred();
    synoptic.model.event.Event var82 = var79.getNextEvent();
    var68.addRemoteDependency(var79);
    boolean var84 = var52.equals((java.lang.Object)var68);
    dynoptic.model.automaton.EncodedAutomaton var85 = var26.getEncodedAutomaton(var52);
    boolean var86 = var4.equals((java.lang.Object)var26);
    dynoptic.model.automaton.EventTypeEncodings var87 = var26.getEventTypeEncodings();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "FSM_state: init[true], accept[true] id[0]"+ "'", var6.equals("FSM_state: init[true], accept[true] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var29.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var31.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var70.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var80.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test323() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test323"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTerminalObs();
    java.lang.String var8 = var1.toIntermediateString();
    boolean var9 = var1.isAccept();
    java.util.Set var10 = var1.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Part-0-1412360749"+ "'", var8.equals("Part-0-1412360749"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test324"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var8.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = var8.getObsState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var12 = var8.getObsState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var17 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var18 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var17);
    synoptic.model.event.Event var19 = var18.getNextEvent();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var20 = var18.getObsState();
    var8.addRemoteDependency(var18);
    boolean var22 = var8.isInitState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test325() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test325"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var11 = var10.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test326() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test326"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var1 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.consistentAnonInitObsFSMState(0);
    java.lang.String var2 = var1.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "0"+ "'", var2.equals("0"));

  }

  public void test327() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test327"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTerminalObs();
    java.lang.String var8 = var1.toIntermediateString();
    boolean var9 = var1.isAccept();
    java.lang.String var10 = var1.toLongString();
    boolean var11 = var1.isAccept();
    java.util.Set var12 = var1.getInitialObservations();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Part-0-1760563311"+ "'", var8.equals("Part-0-1760563311"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test328"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    java.util.Set var17 = var1.getTransitioningEvents();
    java.util.Set var18 = var1.getNextStates();
    var1.recreateCachedTransitions();
    int var20 = var1.getNumProcesses();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 10);

  }

  public void test329() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test329"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var8.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = var8.getObsState();
    boolean var12 = var11.isTerminal();
    boolean var13 = var11.isTerminal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test330() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test330"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, false, (-1), 100);
    int var5 = var4.getScmId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);

  }

  public void test331() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test331"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    int var3 = var1.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    boolean var5 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test332() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test332"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    int var36 = var11.getScmId();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var41 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var43 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var44 = var41.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var45 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var41);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var46 = var45.getObsState();
    java.lang.String var47 = var45.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var48 = var45.getObsState();
    boolean var49 = var45.isTermState();
    boolean var50 = var45.isTermState();
    boolean var51 = var45.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var52 = var45.getObsState();
    java.lang.String var53 = var52.toString();
    java.lang.String var54 = var52.getName();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var55 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var52);
    boolean var56 = var11.equals((java.lang.Object)var52);
    java.util.Set var57 = var11.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var47.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "i_hi!_t"+ "'", var53.equals("i_hi!_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "hi!"+ "'", var54.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test333() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test333"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    synoptic.model.event.Event var6 = var5.getNextEvent();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var7 = var5.getObsState();
    boolean var8 = var5.isInitState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var14 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    synoptic.model.event.Event var15 = var14.getNextEvent();
    java.lang.String var16 = var14.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var21 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var24 = var21.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var25 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var21);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var26 = var25.getObsState();
    java.lang.String var27 = var25.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var28 = var25.getObsState();
    boolean var29 = var25.isTermState();
    boolean var30 = var25.isTermState();
    boolean var31 = var25.isTermState();
    var25.setOccurred(false);
    java.lang.String var34 = var25.toString();
    var14.addRemoteDependency(var25);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var36 = var25.getObsState();
    var25.setOccurred(false);
    var5.addRemoteDependency(var25);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var40 = var5.getPrevState();
    synoptic.model.event.Event var41 = var5.getNextEvent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var16.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var27.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var34.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test334() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test334"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var3 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = var3.lastState();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = var3.lastState();
    java.util.Set var6 = var5.getInitialObservations();
    java.util.Set var8 = var5.getTerminalObsForPid(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test335"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    java.util.Iterator var39 = var0.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var42 = var41.toIntermediateString();
    boolean var43 = var41.isAccept();
    boolean var44 = var0.contains((java.lang.Object)var43);
    java.util.Set var45 = var0.getLocalEventScmStrings();
    java.util.Set var46 = var0.getLocalEventScmStrings();
    java.util.Set var47 = var0.getLocalEventScmStrings();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Part-0-1658004596"+ "'", var42.equals("Part-0-1658004596"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test336() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test336"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getStates();
    java.lang.String var22 = var19.toString();
    int var23 = var19.getPid();
    java.lang.String var24 = var19.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var35 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    dynoptic.model.fifosys.cfsm.fsm.FSM var44 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var30, var35, var41, 100);
    dynoptic.model.automaton.EventTypeEncodings var45 = var44.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var56 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    dynoptic.model.fifosys.cfsm.fsm.FSM var65 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var51, var56, var62, 100);
    int var66 = var65.getPid();
    java.util.Set var67 = var65.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var78 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var82 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var84 = var82.getInitialObsForPid(100);
    var80.removeAllObs(var84);
    dynoptic.model.fifosys.cfsm.fsm.FSM var87 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var73, var78, var84, 100);
    int var88 = var73.getPid();
    int var89 = var73.getScmId();
    int var90 = var73.getPid();
    boolean var91 = var65.equals((java.lang.Object)var90);
    java.lang.String var92 = var65.toString();
    java.util.Set var93 = var65.getStates();
    dynoptic.model.automaton.EncodedAutomaton var94 = new dynoptic.model.automaton.EncodedAutomaton(var45, var65);
    dynoptic.model.automaton.EncodedAutomaton var95 = var19.getEncodedAutomaton(var45);
    dk.brics.automaton.Automaton var96 = var95.getAutomaton();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var22.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var24.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var92.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test337() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test337"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var8.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = var8.getObsState();
    boolean var12 = var8.isTermState();
    boolean var13 = var8.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var19 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var18);
    java.lang.String var20 = var19.toString();
    boolean var21 = var19.hasOccurred();
    synoptic.model.event.Event var22 = var19.getNextEvent();
    var8.addRemoteDependency(var19);
    boolean var24 = var19.isEnabled();
    boolean var25 = var19.isTermState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var20.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test338() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test338"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    java.lang.String var13 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var5, false, false);
    java.lang.String var14 = var0.endGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var22 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.fifosys.cfsm.fsm.FSM var36 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var22, var27, var33, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    var45.removeAllObs(var49);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var27, var42, var49);
    dynoptic.model.fifosys.gfsm.GFSMPath var53 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var54 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var53);
    boolean var55 = var27.equals((java.lang.Object)var54);
    dynoptic.model.fifosys.cfsm.CFSMState var56 = new dynoptic.model.fifosys.cfsm.CFSMState(var27);
    boolean var57 = var56.isInitial();
    boolean var58 = var56.isInitial();
    boolean var59 = var56.isAccept();
    java.lang.String var62 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var56, false, true);
    java.lang.String var63 = var0.endGraphString();
    java.lang.String var64 = var0.beginGraphString();
    java.lang.String var65 = var0.endGraphString();
    java.lang.String var66 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var69 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var71 = var69.getInitialObsForPid(100);
    java.util.Set var72 = var69.getTransitioningEvents();
    java.util.Set var73 = var69.getInitialObservations();
    java.util.Set var74 = var69.getNextStates();
    java.util.Set var75 = var69.getObservedStates();
    java.lang.String var76 = var69.toLongString();
    java.lang.String var79 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var69, false, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var13.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "} // digraph {\n"+ "'", var14.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "  1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@2912ef25\",shape=circle,shape=doublecircle];\n"+ "'", var62.equals("  1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@2912ef25\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "} // digraph {\n"+ "'", var63.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "digraph {\n"+ "'", var64.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "} // digraph {\n"+ "'", var65.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "} // digraph {\n"+ "'", var66.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "[]"+ "'", var76.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var79.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n"));

  }

  public void test339() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test339"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, (-1));
    java.lang.String var29 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var26, false, false);
    java.lang.String var30 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var37 = var35.getInitialObsForPid(100);
    var33.removeAllObs(var37);
    java.lang.String var41 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString((-1), (dynoptic.model.AbsFSMState)var33, true, true);
    java.lang.String var42 = var0.beginGraphString();
    java.lang.String var43 = var0.endGraphString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-1085351190"+ "'", var15.equals("Part-0-1085351190"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "  100 [label=\"-1\",shape=circle];\n"+ "'", var29.equals("  100 [label=\"-1\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "} // digraph {\n"+ "'", var30.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "  -1 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->-1;\n"+ "'", var41.equals("  -1 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->-1;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "digraph {\n"+ "'", var42.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "} // digraph {\n"+ "'", var43.equals("} // digraph {\n"));

  }

  public void test340() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test340"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getStates();
    java.lang.String var22 = var19.toString();
    int var23 = var19.getPid();
    java.lang.String var24 = var19.toString();
    java.util.Set var25 = var19.getAcceptStates();
    dynoptic.model.automaton.EventTypeEncodings var26 = var19.getEventTypeEncodings();
    dynoptic.model.automaton.EventTypeEncodings var27 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var33 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var44 = var42.getInitialObsForPid(100);
    var40.removeAllObs(var44);
    dynoptic.model.fifosys.cfsm.fsm.FSM var47 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var33, var38, var44, 100);
    java.util.Set var48 = var47.getAcceptStates();
    java.util.Set var49 = var47.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    dynoptic.model.automaton.EventTypeEncodings var70 = var69.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var71 = var47.getEncodedAutomaton(var70);
    int var72 = var47.getPid();
    var47.minimize();
    java.util.Set var74 = var47.getStates();
    dynoptic.model.automaton.EncodedAutomaton var75 = new dynoptic.model.automaton.EncodedAutomaton(var27, var47);
    dynoptic.model.alphabet.FSMAlphabet var76 = var47.getAlphabet();
    int var77 = var76.size();
    java.lang.String var78 = var76.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var22.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var24.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "[]"+ "'", var78.equals("[]"));

  }

  public void test341() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test341"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var2 = var1.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 1);
    java.util.Set var5 = var1.getNextStates();
    java.util.Set var7 = var1.getTerminalObsForPid(1);
    java.lang.String var8 = var1.toString();
    boolean var10 = var1.isAcceptForPid(0);
    java.lang.String var11 = var1.toLongString();
    java.util.Set var13 = var1.getInitialObsForPid(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-1908568093"+ "'", var2.equals("Part-0-1908568093"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "[]"+ "'", var11.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test342"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(1, "ObsDAGNode[i_hi!_t]", false, false);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var6 = var5.getObsState();
    boolean var7 = var6.isTerminal();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var6);
    var6.markTerm();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test343() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test343"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", false, false);
    boolean var5 = var4.isTerminal();
    var4.markTerm();
    java.lang.String var7 = var4.toString();
    boolean var8 = var4.isTerminal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!_t"+ "'", var7.equals("hi!_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test344"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var11);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, var15);
    boolean var17 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var21 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var20);
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15, var20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var23 = var20.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test345() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test345"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    boolean var43 = var40.isInitForPid(0);
    boolean var45 = var40.isAcceptForPid(0);
    boolean var46 = var40.isInitial();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var48 = var40.isAcceptForPid(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test346() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test346"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 10, (-1));
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    boolean var33 = var27.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    java.util.Set var41 = var35.getTerminalObs();
    var27.removeAllObs(var41);
    dynoptic.model.automaton.EventTypeEncodings var43 = new dynoptic.model.automaton.EventTypeEncodings(var41);
    dynoptic.model.fifosys.cfsm.fsm.FSM var45 = new dynoptic.model.fifosys.cfsm.fsm.FSM(0, var5, var16, var41, (-1));
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    java.util.Set var50 = var47.getTransitioningEvents();
    java.util.Set var52 = var47.getTerminalObsForPid(100);
    boolean var53 = var16.equals((java.lang.Object)var52);
    int var54 = var16.getScmId();
    int var55 = var16.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);

  }

  public void test347() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test347"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    synoptic.model.event.Event var6 = var5.getNextEvent();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var7 = var5.getObsState();
    boolean var8 = var5.isInitState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var9 = var5.getNextState();
    java.lang.String var10 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));

  }

  public void test348() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test348"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    int var42 = var27.getPid();
    int var43 = var27.getScmId();
    int var44 = var27.getPid();
    boolean var45 = var19.equals((java.lang.Object)var44);
    dynoptic.model.alphabet.FSMAlphabet var46 = var19.getAlphabet();
    dynoptic.model.automaton.EventTypeEncodings var47 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    java.util.Set var68 = var67.getAcceptStates();
    java.lang.String var69 = var67.toString();
    boolean var70 = var67.isDeterministic();
    boolean var71 = var67.isDeterministic();
    boolean var72 = var47.equals((java.lang.Object)var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var69.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test349() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test349"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    java.util.Set var17 = var1.getTransitioningEvents();
    java.util.Set var18 = var1.getNextStates();
    var1.recreateCachedTransitions();
    java.util.Set var20 = var1.getTerminalObs();
    java.util.Set var21 = var1.getObservedStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test350() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test350"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    dynoptic.model.automaton.EventTypeEncodings var8 = new dynoptic.model.automaton.EventTypeEncodings(var7);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var21 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.cfsm.fsm.FSM var30 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var16, var21, var27, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var21, var36, var43);
    java.lang.String var46 = var21.toLongString();
    java.lang.String var47 = var21.toLongString();
    java.lang.String var48 = var21.toString();
    java.util.Set var49 = var21.getNextStates();
    java.util.Set var50 = var21.getNextStates();
    int var51 = var21.getScmId();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var57 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var62 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var68 = var66.getInitialObsForPid(100);
    var64.removeAllObs(var68);
    dynoptic.model.fifosys.cfsm.fsm.FSM var71 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var57, var62, var68, 100);
    int var72 = var57.getPid();
    java.lang.String var73 = var57.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var75 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var79 = var77.getInitialObsForPid(100);
    var75.removeAllObs(var79);
    java.util.Set var81 = var75.getTerminalObs();
    dynoptic.model.fifosys.cfsm.fsm.FSM var83 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var21, var57, var81, (-1));
    dynoptic.model.automaton.EncodedAutomaton var84 = new dynoptic.model.automaton.EncodedAutomaton(var8, var83);
    dynoptic.model.fifosys.gfsm.GFSMPath var86 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var87 = new dynoptic.model.fifosys.gfsm.GFSMPath(var86);
    dynoptic.model.fifosys.gfsm.GFSMPath var88 = new dynoptic.model.fifosys.gfsm.GFSMPath(var86);
    boolean var89 = var8.equals((java.lang.Object)var86);
    dynoptic.model.fifosys.gfsm.GFSMState var91 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var93 = new dynoptic.model.fifosys.gfsm.GFSMPath(var91, (-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var94 = new dynoptic.model.fifosys.gfsm.GFSMPath(var86, var93);
    boolean var95 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var93);
    dynoptic.model.fifosys.gfsm.GFSMPath var96 = new dynoptic.model.fifosys.gfsm.GFSMPath(var93);
    int var97 = var96.numEvents();
    boolean var98 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var46.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var47.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "0"+ "'", var48.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var73.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == true);

  }

  public void test351() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test351"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    java.util.Set var8 = var2.getTerminalObs();
    java.util.Set var10 = var2.getInitialObsForPid(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10, var10);
    java.util.Set var12 = var11.getObservedStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test352() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test352"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var3 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, (-1));
    java.util.Set var4 = var1.getObservedStates();
    java.util.Set var6 = var1.getTerminalObsForPid(0);
    boolean var8 = var1.isAcceptForPid(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test353() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test353"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    boolean var21 = var19.isDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test354() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test354"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    int var40 = var39.getPid();
    java.util.Set var41 = var39.getStates();
    dynoptic.model.automaton.EncodedAutomaton var42 = new dynoptic.model.automaton.EncodedAutomaton(var17, var39);
    var42.minimize();
    var42.minimize();
    dk.brics.automaton.Automaton var45 = var42.getAutomaton();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test355() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test355"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    java.util.Set var27 = var23.getInitialObsForPid(1);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState((-1), var27);
    java.lang.String var31 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var28, true, false);
    java.lang.String var32 = var0.beginGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    var46.removeAllObs(var50);
    dynoptic.model.fifosys.cfsm.fsm.FSM var53 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var39, var44, var50, 100);
    int var54 = var39.getPid();
    java.lang.String var55 = var39.toLongString();
    java.lang.String var56 = var39.toLongString();
    int var57 = var39.getScmId();
    java.lang.String var60 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(10, (dynoptic.model.AbsFSMState)var39, false, true);
    boolean var61 = var39.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-873091300"+ "'", var14.equals("Part-0-873091300"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "  1 [label=\"[]\",shape=circle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->1;\n"+ "'", var31.equals("  1 [label=\"[]\",shape=circle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->1;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "digraph {\n"+ "'", var32.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var55.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var56.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "  10 [label=\"0\",shape=circle,shape=doublecircle];\n"+ "'", var60.equals("  10 [label=\"0\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);

  }

  public void test356() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test356"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var28 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.fifosys.cfsm.fsm.FSM var37 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var23, var28, var34, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.fifosys.cfsm.fsm.FSM var57 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var43, var48, var54, 100);
    dynoptic.model.automaton.EventTypeEncodings var58 = var57.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var63 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var64 = var58.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var65 = var37.getEncodedAutomaton(var58);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var71 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var76 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var82 = var80.getInitialObsForPid(100);
    var78.removeAllObs(var82);
    dynoptic.model.fifosys.cfsm.fsm.FSM var85 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var71, var76, var82, 100);
    dynoptic.model.automaton.EventTypeEncodings var86 = var85.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var87 = new dynoptic.model.automaton.EncodedAutomaton(var58, var85);
    dynoptic.model.automaton.EncodedAutomaton var88 = new dynoptic.model.automaton.EncodedAutomaton(var17, var85);
    int var89 = var85.getPid();
    java.util.Set var90 = var85.getAcceptStates();
    java.util.Set var91 = var85.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test357() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test357"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.lang.String var4 = var1.toLongString();
    java.lang.String var5 = var1.toIntermediateString();
    boolean var7 = var1.isInitForPid(1);
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var11 = var9.getInitialObsForPid(100);
    boolean var12 = var9.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var14 = new dynoptic.model.fifosys.gfsm.GFSMPath(var9, 10);
    dynoptic.model.alphabet.FSMAlphabet var15 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var21 = var19.getInitialObsForPid(100);
    var17.removeAllObs(var21);
    boolean var23 = var17.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    java.util.Set var31 = var25.getTerminalObs();
    var17.removeAllObs(var31);
    boolean var33 = var15.retainAll((java.util.Collection)var31);
    java.lang.String var34 = var15.toString();
    var9.addAllObs((java.util.Set)var15);
    dynoptic.model.alphabet.FSMAlphabet var36 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.fifosys.cfsm.fsm.FSM var57 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var43, var48, var54, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var70 = var68.getInitialObsForPid(100);
    var66.removeAllObs(var70);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var48, var63, var70);
    boolean var73 = var36.retainAll((java.util.Collection)var70);
    int var74 = var36.size();
    boolean var75 = var15.retainAll((java.util.Collection)var36);
    java.lang.Object[] var76 = var36.toArray();
    var1.addAllObs((java.util.Set)var36);
    java.util.Set var78 = var1.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Part-0-1482105717"+ "'", var5.equals("Part-0-1482105717"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "[]"+ "'", var34.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test358() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test358"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    boolean var8 = var1.isAccept();
    boolean var9 = var1.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test359() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test359"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    boolean var8 = var2.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    java.util.Set var16 = var10.getTerminalObs();
    var2.removeAllObs(var16);
    boolean var18 = var0.retainAll((java.util.Collection)var16);
    java.lang.Object[] var20 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var21 = var0.toArray(var20);
    var0.clear();
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(0);
    var24.recreateCachedTransitions();
    var24.recreateCachedTransitions();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    java.util.Set var32 = var31.getTransitioningEvents();
    var24.removeAllObs(var32);
    dynoptic.model.alphabet.FSMAlphabet var34 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var35 = var34.toScmParametersString();
    var34.clear();
    java.lang.String var37 = var34.toString();
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    java.lang.String var42 = var39.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var54 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    var56.removeAllObs(var60);
    dynoptic.model.fifosys.cfsm.fsm.FSM var63 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var49, var54, var60, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var65 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var69 = var67.getInitialObsForPid(100);
    var65.removeAllObs(var69);
    dynoptic.model.fifosys.gfsm.GFSMState var72 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var74 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var76 = var74.getInitialObsForPid(100);
    var72.removeAllObs(var76);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var54, var69, var76);
    var39.removeAllObs(var76);
    boolean var81 = var39.isInitForPid(100);
    java.util.Set var82 = var39.getTransitioningEvents();
    boolean var83 = var34.retainAll((java.util.Collection)var82);
    dynoptic.model.fifosys.gfsm.GFSMState var85 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var87 = var85.getTerminalObsForPid(1);
    boolean var88 = var34.removeAll((java.util.Collection)var87);
    var34.clear();
    var24.addAllObs((java.util.Set)var34);
    boolean var91 = var0.addAll((java.util.Collection)var34);
    boolean var92 = var34.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[]"+ "'", var37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);

  }

  public void test360() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test360"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 10, 100);
    int var5 = var4.getScmId();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100);

  }

  public void test361() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test361"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var3 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, (-1));
    java.util.Set var4 = var1.getObservedStates();
    java.util.Set var5 = var1.getTerminalObs();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    int var26 = var25.getPid();
    java.util.Set var27 = var25.getStates();
    dynoptic.model.alphabet.FSMAlphabet var28 = var25.getAlphabet();
    java.util.Set var29 = var25.getAcceptStates();
    int var30 = var25.getPid();
    dynoptic.model.alphabet.FSMAlphabet var31 = var25.getAlphabet();
    var1.removeAllObs((java.util.Set)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test362() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test362"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(0, "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n", true, false);
    boolean var5 = var4.isTerminal();
    boolean var6 = var4.isTerminal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test363() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test363"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.util.Iterator var38 = var0.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var41 = var40.toIntermediateString();
    boolean var42 = var40.isAccept();
    java.util.Set var44 = var40.getInitialObsForPid(10);
    boolean var45 = var0.addAll((java.util.Collection)var44);
    java.util.Set var46 = var0.getLocalEventScmStrings();
    java.util.Set var47 = var0.getLocalEventScmStrings();
    dynoptic.model.automaton.EventTypeEncodings var48 = new dynoptic.model.automaton.EventTypeEncodings((java.util.Set)var0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var54 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var59 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var63 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var65 = var63.getInitialObsForPid(100);
    var61.removeAllObs(var65);
    dynoptic.model.fifosys.cfsm.fsm.FSM var68 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var54, var59, var65, 100);
    java.util.Set var69 = var68.getAcceptStates();
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    var71.removeAllObs(var75);
    boolean var77 = var71.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var79 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var81 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var83 = var81.getInitialObsForPid(100);
    var79.removeAllObs(var83);
    java.util.Set var85 = var79.getTerminalObs();
    var71.removeAllObs(var85);
    dynoptic.model.automaton.EventTypeEncodings var87 = new dynoptic.model.automaton.EventTypeEncodings(var85);
    dynoptic.model.automaton.EncodedAutomaton var88 = var68.getEncodedAutomaton(var87);
    var68.minimize();
    dynoptic.model.automaton.EventTypeEncodings var90 = var68.getEventTypeEncodings();
    int var91 = var68.getPid();
    dynoptic.model.automaton.EncodedAutomaton var92 = new dynoptic.model.automaton.EncodedAutomaton(var48, var68);
    var92.minimize();
    var92.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "Part-0-1336407931"+ "'", var41.equals("Part-0-1336407931"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == (-1));

  }

  public void test364() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test364"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    java.lang.String var20 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    java.util.Set var26 = var23.getTransitioningEvents();
    java.util.Set var27 = var23.getInitialObservations();
    var23.recreateCachedTransitions();
    java.lang.String var31 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(10, (dynoptic.model.AbsFSMState)var23, true, true);
    java.util.Set var32 = var23.getNextStates();
    java.lang.String var33 = var23.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-820232147"+ "'", var14.equals("Part-0-820232147"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "} // digraph {\n"+ "'", var20.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "  10 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->10;\n"+ "'", var31.equals("  10 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->10;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "[]"+ "'", var33.equals("[]"));

  }

  public void test365() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test365"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "  -1 [label=\"0\",shape=circle];\n", false, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test366() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test366"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    java.util.Iterator var39 = var0.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var42 = var41.toIntermediateString();
    boolean var43 = var41.isAccept();
    boolean var44 = var0.contains((java.lang.Object)var43);
    dynoptic.model.automaton.EventTypeEncodings var45 = new dynoptic.model.automaton.EventTypeEncodings((java.util.Set)var0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var56 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    dynoptic.model.fifosys.cfsm.fsm.FSM var65 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var51, var56, var62, 100);
    int var66 = var65.getPid();
    java.util.Set var67 = var65.getAcceptStates();
    dynoptic.model.alphabet.FSMAlphabet var68 = var65.getAlphabet();
    java.lang.String var69 = var68.anyEventScmQRe();
    java.lang.Object[] var70 = var68.toArray();
    java.lang.Object[] var71 = var68.toArray();
    java.lang.String var72 = var68.toScmParametersString();
    boolean var73 = var45.equals((java.lang.Object)var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Part-0-44089145"+ "'", var42.equals("Part-0-44089145"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(_)"+ "'", var69.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + ""+ "'", var72.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test367() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test367"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    boolean var6 = var5.hasOccurred();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var12 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var11);
    synoptic.model.event.Event var13 = var12.getNextEvent();
    var5.addRemoteDependency(var12);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var15 = var5.getPrevState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test368() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test368"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    java.lang.String var5 = var4.toShortIntString();
    var4.setAccept();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var14 = var11.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var15 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var11);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var16 = var15.getObsState();
    java.lang.String var17 = var15.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = var15.getObsState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var19 = var15.getObsState();
    boolean var20 = var4.equals((java.lang.Object)var19);
    var4.setAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "0"+ "'", var5.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var17.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test369() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test369"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    java.util.Set var8 = var2.getTerminalObs();
    int var9 = var2.getNumProcesses();
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    java.util.Set var14 = var11.getTransitioningEvents();
    java.util.Set var15 = var11.getInitialObservations();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var21 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.cfsm.fsm.FSM var35 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var21, var26, var32, 100);
    dynoptic.model.automaton.EventTypeEncodings var36 = var35.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var41 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var42 = var36.equals((java.lang.Object)true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSM var62 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var48, var53, var59, 100);
    int var63 = var48.getPid();
    java.lang.String var64 = var48.toLongString();
    boolean var65 = var36.equals((java.lang.Object)var64);
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var69 = var67.getInitialObsForPid(100);
    java.util.Set var70 = var67.getTransitioningEvents();
    boolean var71 = var36.equals((java.lang.Object)var70);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(1, (dynoptic.model.AbsFSMState)var2, var15, var70);
    dynoptic.model.fifosys.gfsm.GFSMPath var74 = new dynoptic.model.fifosys.gfsm.GFSMPath(var2, 0);
    dynoptic.model.fifosys.gfsm.GFSMPath var75 = new dynoptic.model.fifosys.gfsm.GFSMPath(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var64.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test370() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test370"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var16 = var13.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var17 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = var17.getObsState();
    boolean var19 = var17.isEnabled();
    var17.setOccurred(false);
    var8.addRemoteDependency(var17);
    boolean var23 = var8.hasOccurred();
    var8.setOccurred(true);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var30 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var32 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var33 = var30.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var34 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var30);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var35 = var34.getObsState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var40 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var42 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var43 = var40.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var44 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var40);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = var44.getObsState();
    var34.addRemoteDependency(var44);
    var34.setOccurred(false);
    var34.setOccurred(true);
    int var51 = var34.getPid();
    var34.setOccurred(true);
    boolean var54 = var34.isEnabled();
    var8.addRemoteDependency(var34);
    var8.setOccurred(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test371() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test371"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var14 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    java.lang.String var15 = var14.toString();
    boolean var16 = var14.hasOccurred();
    int var17 = var14.getPid();
    boolean var18 = var14.isInitState();
    var8.addRemoteDependency(var14);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var20 = var14.getNextState();
    synoptic.model.event.Event var21 = var14.getNextEvent();
    boolean var22 = var14.isInitState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var15.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test372() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test372"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    int var40 = var39.getPid();
    java.util.Set var41 = var39.getStates();
    dynoptic.model.automaton.EncodedAutomaton var42 = new dynoptic.model.automaton.EncodedAutomaton(var17, var39);
    java.util.Set var43 = var39.getStates();
    boolean var44 = var39.isDeterministic();
    java.util.Set var45 = var39.getInitStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test373() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test373"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getStates();
    java.lang.String var22 = var19.toString();
    int var23 = var19.getPid();
    java.lang.String var24 = var19.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var35 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    dynoptic.model.fifosys.cfsm.fsm.FSM var44 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var30, var35, var41, 100);
    dynoptic.model.automaton.EventTypeEncodings var45 = var44.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var56 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    dynoptic.model.fifosys.cfsm.fsm.FSM var65 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var51, var56, var62, 100);
    int var66 = var65.getPid();
    java.util.Set var67 = var65.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var78 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var82 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var84 = var82.getInitialObsForPid(100);
    var80.removeAllObs(var84);
    dynoptic.model.fifosys.cfsm.fsm.FSM var87 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var73, var78, var84, 100);
    int var88 = var73.getPid();
    int var89 = var73.getScmId();
    int var90 = var73.getPid();
    boolean var91 = var65.equals((java.lang.Object)var90);
    java.lang.String var92 = var65.toString();
    java.util.Set var93 = var65.getStates();
    dynoptic.model.automaton.EncodedAutomaton var94 = new dynoptic.model.automaton.EncodedAutomaton(var45, var65);
    dynoptic.model.automaton.EncodedAutomaton var95 = var19.getEncodedAutomaton(var45);
    java.util.Set var96 = var19.getInitStates();
    boolean var97 = var19.isDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var22.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var24.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var92.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == true);

  }

  public void test374() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test374"); }


    dynoptic.model.alphabet.FSMAlphabet var1 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var2 = var1.toScmParametersString();
    var1.clear();
    java.lang.String var4 = var1.toString();
    boolean var5 = var1.isEmpty();
    dynoptic.model.fifosys.gfsm.GFSMState var6 = new dynoptic.model.fifosys.gfsm.GFSMState(1, (java.util.Set)var1);
    boolean var8 = var6.isInitForPid(1);
    java.lang.String var9 = var6.toIntermediateString();
    var6.recreateCachedTransitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Part-0-1918896857"+ "'", var9.equals("Part-0-1918896857"));

  }

  public void test375() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test375"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "Part-0-2132318418", false, false);
    var4.markTerm();
    java.lang.String var6 = var4.toString();
    var4.markTerm();
    var4.markTerm();
    java.lang.String var9 = var4.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Part-0-2132318418_t"+ "'", var6.equals("Part-0-2132318418_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Part-0-2132318418"+ "'", var9.equals("Part-0-2132318418"));

  }

  public void test376() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test376"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    int var42 = var27.getPid();
    int var43 = var27.getScmId();
    int var44 = var27.getPid();
    boolean var45 = var19.equals((java.lang.Object)var44);
    java.lang.String var46 = var19.toString();
    java.util.Set var47 = var19.getStates();
    dynoptic.model.automaton.EventTypeEncodings var48 = var19.getEventTypeEncodings();
    dynoptic.model.automaton.EventTypeEncodings var49 = var19.getEventTypeEncodings();
    java.util.Set var50 = var19.getAcceptStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var46.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test377() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test377"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 0);
    boolean var11 = var1.isAcceptForPid(10);
    int var12 = var1.getNumProcesses();
    java.util.Set var14 = var1.getTerminalObsForPid((-1));
    boolean var15 = var1.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test378() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test378"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    java.util.Set var8 = var7.getTransitioningEvents();
    java.lang.String var11 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var7, true, true);
    java.lang.String var12 = var0.endGraphString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "  0 [label=\"1\",shape=circle,shape=doublecircle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var11.equals("  0 [label=\"1\",shape=circle,shape=doublecircle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "} // digraph {\n"+ "'", var12.equals("} // digraph {\n"));

  }

  public void test379() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test379"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var2 = var1.toIntermediateString();
    boolean var3 = var1.isAccept();
    java.util.Set var5 = var1.getInitialObsForPid(10);
    java.util.Set var7 = var1.getTerminalObsForPid(0);
    java.util.Set var9 = var1.getTerminalObsForPid((-1));
    boolean var11 = var1.isAcceptForPid(0);
    boolean var12 = var1.isInitial();
    java.lang.String var13 = var1.toIntermediateString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-1027769033"+ "'", var2.equals("Part-0-1027769033"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Part-0-1027769033"+ "'", var13.equals("Part-0-1027769033"));

  }

  public void test380() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test380"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var6 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    dynoptic.model.fifosys.cfsm.fsm.FSM var32 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var18, var23, var29, 100);
    int var33 = var18.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var57 = var55.getInitialObsForPid(100);
    var53.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var60 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var46, var51, var57, 100);
    var35.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var63 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var12, var18, var57, 1);
    dynoptic.model.alphabet.FSMAlphabet var64 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var65 = var64.toScmParametersString();
    var64.clear();
    java.lang.String var67 = var64.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var72 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var74 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var75 = var72.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var76 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var72);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var81 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var83 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var84 = var81.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var85 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var81);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var86 = var85.getObsState();
    boolean var87 = var85.isEnabled();
    var85.setOccurred(false);
    var76.addRemoteDependency(var85);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var91 = var85.getObsState();
    boolean var92 = var64.remove((java.lang.Object)var91);
    boolean var93 = var64.isEmpty();
    java.lang.String var94 = var64.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var96 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var5, var18, (java.util.Set)var64, 0);
    java.util.Set var97 = var96.getInitStates();
    boolean var98 = var96.isDeterministic();
    boolean var99 = var96.isDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + ""+ "'", var65.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[]"+ "'", var67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "[]"+ "'", var94.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == true);

  }

  public void test381() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test381"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(0);
    var1.recreateCachedTransitions();
    var1.recreateCachedTransitions();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var8 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    java.util.Set var9 = var8.getTransitioningEvents();
    var1.removeAllObs(var9);
    dynoptic.model.alphabet.FSMAlphabet var11 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var12 = var11.toScmParametersString();
    var11.clear();
    java.lang.String var14 = var11.toString();
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    java.lang.String var19 = var16.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var37 = var35.getInitialObsForPid(100);
    var33.removeAllObs(var37);
    dynoptic.model.fifosys.cfsm.fsm.FSM var40 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var26, var31, var37, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var46 = var44.getInitialObsForPid(100);
    var42.removeAllObs(var46);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var53 = var51.getInitialObsForPid(100);
    var49.removeAllObs(var53);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var31, var46, var53);
    var16.removeAllObs(var53);
    boolean var58 = var16.isInitForPid(100);
    java.util.Set var59 = var16.getTransitioningEvents();
    boolean var60 = var11.retainAll((java.util.Collection)var59);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var64 = var62.getTerminalObsForPid(1);
    boolean var65 = var11.removeAll((java.util.Collection)var64);
    var11.clear();
    var1.addAllObs((java.util.Set)var11);
    java.lang.Object[] var68 = var11.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "[]"+ "'", var19.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test382() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test382"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    java.util.Set var22 = var14.getTerminalObsForPid(100);
    java.lang.String var23 = var14.toLongString();
    java.util.Set var24 = var14.getTerminalObs();
    java.util.Set var25 = var14.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-1654714885"+ "'", var15.equals("Part-0-1654714885"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test383() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test383"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    dynoptic.model.fifosys.cfsm.fsm.FSM var32 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var18, var23, var29, 100);
    var18.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var34 = new dynoptic.model.fifosys.cfsm.CFSMState(var18);
    boolean var35 = var18.isAccept();
    boolean var36 = var18.isInitial();
    java.lang.String var39 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString((-1), (dynoptic.model.AbsFSMState)var18, true, true);
    java.lang.String var40 = var0.endGraphString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "  -1 [label=\"0\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->-1;\n"+ "'", var39.equals("  -1 [label=\"0\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->-1;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "} // digraph {\n"+ "'", var40.equals("} // digraph {\n"));

  }

  public void test384() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test384"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (-1), 1);
    java.lang.String var5 = var4.toShortIntString();
    int var6 = var4.getPid();
    java.lang.String var7 = var4.toShortIntString();
    java.lang.String var8 = var4.toString();
    java.lang.String var9 = var4.toShortIntString();
    java.lang.String var10 = var4.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "1"+ "'", var5.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "1"+ "'", var7.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "1"+ "'", var8.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "1"+ "'", var9.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "FSM_state: init[true], accept[true] id[1]"+ "'", var10.equals("FSM_state: init[true], accept[true] id[1]"));

  }

  public void test385() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test385"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState((-1), true, false);
    java.lang.String var4 = var3.getName();
    dynoptic.model.export.DotExportFormatter var5 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var6 = var5.beginGraphString();
    java.lang.String var7 = var5.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var12 = var10.getInitialObsForPid(100);
    java.lang.String var15 = var5.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var10, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var19 = var18.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var21 = new dynoptic.model.fifosys.gfsm.GFSMPath(var18, 1);
    java.lang.String var24 = var5.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var18, true, true);
    java.lang.String var25 = var5.beginGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    dynoptic.model.fifosys.cfsm.fsm.FSM var46 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var32, var37, var43, 100);
    int var47 = var32.getPid();
    int var48 = var32.getScmId();
    int var49 = var32.getPid();
    java.lang.String var52 = var5.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var32, false, false);
    var32.setAccept();
    boolean var54 = var3.equals((java.lang.Object)var32);
    java.lang.String var55 = var32.toShortIntString();
    var32.setAccept();
    java.lang.String var57 = var32.toShortIntString();
    dynoptic.model.fifosys.cfsm.CFSMState var58 = new dynoptic.model.fifosys.cfsm.CFSMState(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "135"+ "'", var4.equals("135"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "digraph {\n"+ "'", var6.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "digraph {\n"+ "'", var7.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var15.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Part-0-1740296090"+ "'", var19.equals("Part-0-1740296090"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var24.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "digraph {\n"+ "'", var25.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "  1 [label=\"0\",shape=circle];\n"+ "'", var52.equals("  1 [label=\"0\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "0"+ "'", var55.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "0"+ "'", var57.equals("0"));

  }

  public void test386() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test386"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getAcceptStates();
    dynoptic.model.alphabet.FSMAlphabet var22 = var19.getAlphabet();
    java.lang.String var23 = var22.anyEventScmQRe();
    java.lang.String var24 = var22.toString();
    java.lang.String var25 = var22.anyEventScmQRe();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "(_)"+ "'", var23.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "(_)"+ "'", var25.equals("(_)"));

  }

  public void test387() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test387"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    var1.recreateCachedTransitions();
    boolean var4 = var1.isAcceptForPid(1);
    java.util.Set var6 = var1.getInitialObsForPid((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test388() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test388"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getInitStates();
    java.util.Set var22 = var19.getStates();
    boolean var24 = var19.equals((java.lang.Object)"Part-0-1853704944");
    var19.minimize();
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    boolean var33 = var27.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    java.util.Set var41 = var35.getTerminalObs();
    var27.removeAllObs(var41);
    dynoptic.model.automaton.EventTypeEncodings var43 = new dynoptic.model.automaton.EventTypeEncodings(var41);
    boolean var45 = var43.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var56 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    dynoptic.model.fifosys.cfsm.fsm.FSM var65 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var51, var56, var62, 100);
    int var66 = var65.getPid();
    java.util.Set var67 = var65.getStates();
    dynoptic.model.automaton.EncodedAutomaton var68 = new dynoptic.model.automaton.EncodedAutomaton(var43, var65);
    dynoptic.model.automaton.EncodedAutomaton var69 = var19.getEncodedAutomaton(var43);
    boolean var70 = var19.isDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);

  }

  public void test389() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test389"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    java.util.Set var7 = var1.getInitialObservations();
    boolean var9 = var1.isInitForPid(0);
    boolean var10 = var1.isAccept();
    dynoptic.model.alphabet.FSMAlphabet var11 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var23 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    dynoptic.model.fifosys.cfsm.fsm.FSM var32 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var18, var23, var29, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var45 = var43.getInitialObsForPid(100);
    var41.removeAllObs(var45);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var23, var38, var45);
    boolean var48 = var11.retainAll((java.util.Collection)var45);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var53 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var55 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var56 = var53.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var57 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var53);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var62 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var63 = var62.getName();
    boolean var64 = var53.equals((java.lang.Object)var62);
    boolean var65 = var11.contains((java.lang.Object)var53);
    java.lang.String var66 = var11.toScmParametersString();
    java.lang.String var67 = var11.toString();
    dynoptic.model.fifosys.gfsm.GFSMState var69 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var71 = var69.getInitialObsForPid(100);
    java.util.Set var72 = var69.getTransitioningEvents();
    java.util.Set var74 = var69.getTerminalObsForPid(100);
    java.util.Set var76 = var69.getTerminalObsForPid(100);
    boolean var77 = var11.containsAll((java.util.Collection)var76);
    var1.removeAllObs(var76);
    java.util.Set var79 = var1.getTerminalObs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var63.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + ""+ "'", var66.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "[]"+ "'", var67.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test390() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test390"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    java.util.Iterator var39 = var0.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var42 = var41.toIntermediateString();
    boolean var43 = var41.isAccept();
    boolean var44 = var0.contains((java.lang.Object)var43);
    java.util.Set var45 = var0.getLocalEventScmStrings();
    java.util.Set var46 = var0.getLocalEventScmStrings();
    java.lang.String var47 = var0.toString();
    var0.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "Part-0-228608089"+ "'", var42.equals("Part-0-228608089"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "[]"+ "'", var47.equals("[]"));

  }

  public void test391() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test391"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    var9.markTerm();
    boolean var11 = var9.isTerminal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test392() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test392"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    var21.removeAllObs(var25);
    dynoptic.model.fifosys.cfsm.fsm.FSM var28 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var14, var19, var25, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var19, var34, var41);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    java.lang.String var48 = var45.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    var62.removeAllObs(var66);
    dynoptic.model.fifosys.cfsm.fsm.FSM var69 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var55, var60, var66, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var75 = var73.getInitialObsForPid(100);
    var71.removeAllObs(var75);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var82 = var80.getInitialObsForPid(100);
    var78.removeAllObs(var82);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var60, var75, var82);
    var45.removeAllObs(var82);
    java.util.Set var87 = var45.getInitialObsForPid(10);
    dynoptic.model.fifosys.cfsm.fsm.FSM var89 = new dynoptic.model.fifosys.cfsm.fsm.FSM(1, var6, var34, (java.util.Collection)var87, (-1));
    boolean var90 = var89.isDeterministic();
    dynoptic.model.alphabet.FSMAlphabet var91 = var89.getAlphabet();
    dynoptic.model.alphabet.FSMAlphabet var92 = var89.getAlphabet();
    dynoptic.model.automaton.EventTypeEncodings var93 = var89.getEventTypeEncodings();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test393() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test393"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    var4.markTerm();
    boolean var6 = var4.isInitial();
    boolean var7 = var4.isTerminal();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var9 = var8.getPrevState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test394() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test394"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    boolean var6 = var3.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(var3, 10);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var3, 100);
    dynoptic.model.fifosys.gfsm.GFSMPath var12 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var12);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var16 = var15.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var12, var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var19 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath(var19);
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var23 = var22.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var24 = new dynoptic.model.fifosys.gfsm.GFSMPath(var19, var22);
    dynoptic.model.fifosys.gfsm.GFSMPath var26 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var27 = new dynoptic.model.fifosys.gfsm.GFSMPath(var22, var26);
    boolean var28 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var26);
    dynoptic.model.fifosys.gfsm.GFSMPath var29 = new dynoptic.model.fifosys.gfsm.GFSMPath(var15, var26);
    dynoptic.model.fifosys.gfsm.GFSMPath var31 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var32 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var31);
    dynoptic.model.fifosys.gfsm.GFSMPath var33 = new dynoptic.model.fifosys.gfsm.GFSMPath(var26, var31);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var37 = var35.getInitialObsForPid(100);
    java.util.Set var38 = var35.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var40 = new dynoptic.model.fifosys.gfsm.GFSMPath(var35, (-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var41 = new dynoptic.model.fifosys.gfsm.GFSMPath(var31, var40);
    dynoptic.model.fifosys.gfsm.GFSMPath var42 = new dynoptic.model.fifosys.gfsm.GFSMPath(var10, var41);
    dynoptic.model.fifosys.gfsm.GFSMPath var43 = new dynoptic.model.fifosys.gfsm.GFSMPath(var42);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath(var42);
    dynoptic.model.fifosys.gfsm.GFSMPath var45 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test395() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test395"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    boolean var43 = var40.isInitForPid(0);
    java.util.Set var44 = var40.getTransitioningEvents();
    boolean var45 = var40.isInitial();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var47 = var40.isInitForPid(1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test396() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test396"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-823214458");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-823214458"+ "'", var2.equals("Part-0-823214458"));

  }

  public void test397() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test397"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var8.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = var8.getObsState();
    boolean var12 = var8.isTermState();
    boolean var13 = var8.isTermState();
    boolean var14 = var8.isTermState();
    boolean var15 = var8.isEnabled();
    var8.setOccurred(true);
    java.lang.String var18 = var8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var18.equals("ObsDAGNode[i_hi!_t]"));

  }

  public void test398() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test398"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var8.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = var8.getObsState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var12 = var8.getPrevState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test399() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test399"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var4 = var2.getInitialObsForPid(100);
    java.lang.String var5 = var2.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var7 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var11 = var9.getInitialObsForPid(100);
    var7.removeAllObs(var11);
    dynoptic.model.alphabet.FSMAlphabet var13 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var19 = var17.getInitialObsForPid(100);
    var15.removeAllObs(var19);
    boolean var21 = var15.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    java.util.Set var29 = var23.getTerminalObs();
    var15.removeAllObs(var29);
    boolean var31 = var13.retainAll((java.util.Collection)var29);
    java.lang.Object[] var33 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var34 = var13.toArray(var33);
    java.lang.Object[] var35 = var13.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var2, var11, (java.util.Set)var13);
    java.lang.String var37 = var2.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMPath var39 = new dynoptic.model.fifosys.gfsm.GFSMPath(var2, 0);
    dynoptic.model.fifosys.gfsm.GFSMPath var41 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var42 = new dynoptic.model.fifosys.gfsm.GFSMPath(var41);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var45 = var44.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var46 = new dynoptic.model.fifosys.gfsm.GFSMPath(var41, var44);
    dynoptic.model.fifosys.gfsm.GFSMPath var47 = new dynoptic.model.fifosys.gfsm.GFSMPath(var41);
    boolean var48 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var47);
    dynoptic.model.fifosys.gfsm.GFSMPath var49 = new dynoptic.model.fifosys.gfsm.GFSMPath(var39, var47);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    java.util.Set var57 = var51.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var59 = new dynoptic.model.fifosys.gfsm.GFSMPath(var51, 0);
    boolean var61 = var51.isAcceptForPid(10);
    dynoptic.model.fifosys.gfsm.GFSMPath var63 = new dynoptic.model.fifosys.gfsm.GFSMPath(var51, 100);
    dynoptic.model.fifosys.gfsm.GFSMPath var65 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var66 = new dynoptic.model.fifosys.gfsm.GFSMPath(var65);
    dynoptic.model.fifosys.gfsm.GFSMPath var68 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var69 = var68.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var70 = new dynoptic.model.fifosys.gfsm.GFSMPath(var65, var68);
    dynoptic.model.fifosys.gfsm.GFSMPath var72 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var73 = new dynoptic.model.fifosys.gfsm.GFSMPath(var72);
    dynoptic.model.fifosys.gfsm.GFSMPath var74 = new dynoptic.model.fifosys.gfsm.GFSMPath(var68, var73);
    dynoptic.model.fifosys.gfsm.GFSMPath var75 = new dynoptic.model.fifosys.gfsm.GFSMPath(var63, var68);
    int var76 = var68.numStates();
    dynoptic.model.fifosys.gfsm.GFSMPath var77 = new dynoptic.model.fifosys.gfsm.GFSMPath(var49, var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "[]"+ "'", var5.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "[]"+ "'", var37.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);

  }

  public void test400() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test400"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    java.lang.String var20 = var0.beginGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    int var42 = var27.getPid();
    int var43 = var27.getScmId();
    int var44 = var27.getPid();
    java.lang.String var47 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var27, false, false);
    var27.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var49 = new dynoptic.model.fifosys.cfsm.CFSMState(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-886261862"+ "'", var14.equals("Part-0-886261862"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "digraph {\n"+ "'", var20.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "  1 [label=\"0\",shape=circle];\n"+ "'", var47.equals("  1 [label=\"0\",shape=circle];\n"));

  }

  public void test401() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test401"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.util.Iterator var38 = var0.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var41 = var40.toIntermediateString();
    boolean var42 = var40.isAccept();
    java.util.Set var44 = var40.getInitialObsForPid(10);
    boolean var45 = var0.addAll((java.util.Collection)var44);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var56 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    dynoptic.model.fifosys.cfsm.fsm.FSM var65 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var51, var56, var62, 100);
    int var66 = var65.getPid();
    java.util.Set var67 = var65.getAcceptStates();
    dynoptic.model.alphabet.FSMAlphabet var68 = var65.getAlphabet();
    java.lang.String var69 = var68.anyEventScmQRe();
    java.lang.Object[] var70 = var68.toArray();
    java.lang.Object[] var71 = var68.toArray();
    java.lang.Object[] var72 = var0.toArray(var71);
    java.lang.String var73 = var0.toScmParametersString();
    java.lang.Object[] var74 = var0.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "Part-0-2081836291"+ "'", var41.equals("Part-0-2081836291"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "(_)"+ "'", var69.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + ""+ "'", var73.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test402() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test402"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    int var7 = var5.getPid();
    int var8 = var5.getPid();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var14 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var15 = var14.getNextState();
    var5.addRemoteDependency(var14);
    var5.setOccurred(true);
    synoptic.model.event.Event var19 = var5.getNextEvent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test403() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test403"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    boolean var21 = var5.isAccept();
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var24 = var23.toIntermediateString();
    boolean var25 = var23.isAccept();
    java.util.Set var27 = var23.getInitialObsForPid(10);
    java.util.Set var29 = var23.getTerminalObsForPid(0);
    java.util.Set var30 = var23.getTerminalObs();
    dynoptic.model.fifosys.gfsm.GFSMPath var32 = new dynoptic.model.fifosys.gfsm.GFSMPath(var23, (-1));
    java.util.Set var33 = var23.getObservedStates();
    java.util.Set var34 = var23.getObservedStates();
    dynoptic.model.alphabet.FSMAlphabet var35 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    boolean var43 = var37.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    var45.removeAllObs(var49);
    java.util.Set var51 = var45.getTerminalObs();
    var37.removeAllObs(var51);
    boolean var53 = var35.retainAll((java.util.Collection)var51);
    java.lang.String var54 = var35.anyEventScmQRe();
    java.lang.String var55 = var35.toScmParametersString();
    java.util.Iterator var56 = var35.iterator();
    int var57 = var35.size();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findTransitiveClosure((dynoptic.model.AbsFSMState)var5, var34, (java.util.Set)var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "Part-0-628073855"+ "'", var24.equals("Part-0-628073855"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "(_)"+ "'", var54.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + ""+ "'", var55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);

  }

  public void test404() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test404"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.lang.String var4 = var1.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var16, var31, var38);
    var1.removeAllObs(var38);
    java.lang.String var42 = var1.toLongString();
    java.lang.String var43 = var1.toString();
    java.util.Set var44 = var1.getTransitioningEvents();
    java.util.Set var45 = var1.getNextStates();
    java.lang.String var46 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "[]"+ "'", var43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "[]"+ "'", var46.equals("[]"));

  }

  public void test405() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test405"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.automaton.EventTypeEncodings var40 = var39.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var45 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var46 = var40.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var47 = var19.getEncodedAutomaton(var40);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var64 = var62.getInitialObsForPid(100);
    var60.removeAllObs(var64);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var53, var58, var64, 100);
    dynoptic.model.automaton.EventTypeEncodings var68 = var67.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var69 = new dynoptic.model.automaton.EncodedAutomaton(var40, var67);
    java.util.Set var70 = var67.getAcceptStates();
    java.util.Set var71 = var67.getInitStates();
    java.util.Set var72 = var67.getStates();
    java.util.Set var73 = var67.getStates();
    java.util.Set var74 = var67.getAcceptStates();
    int var75 = var67.getPid();
    java.util.Set var76 = var67.getAcceptStates();
    boolean var77 = var67.isDeterministic();
    java.lang.String var78 = var67.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var78.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));

  }

  public void test406() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test406"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState((-1), true, false);
    java.lang.String var4 = var3.getName();
    var3.markTerm();
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(var7);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var11 = var10.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var12 = new dynoptic.model.fifosys.gfsm.GFSMPath(var7, var10);
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var7);
    dynoptic.model.fifosys.gfsm.GFSMPath var14 = new dynoptic.model.fifosys.gfsm.GFSMPath(var7);
    int var15 = var7.numEvents();
    boolean var16 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var7);
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var7);
    int var18 = var17.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var19 = new dynoptic.model.fifosys.gfsm.GFSMPath(var17);
    boolean var20 = var3.equals((java.lang.Object)var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.gfsm.GFSMState var21 = var17.lastState();
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "136"+ "'", var4.equals("136"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test407() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test407"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    boolean var8 = var2.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    java.util.Set var16 = var10.getTerminalObs();
    var2.removeAllObs(var16);
    boolean var18 = var0.retainAll((java.util.Collection)var16);
    java.lang.String var19 = var0.anyEventScmQRe();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var26 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var27 = var24.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var28 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var24);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var29 = var28.getObsState();
    java.lang.String var30 = var28.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var31 = var28.getObsState();
    boolean var32 = var0.contains((java.lang.Object)var31);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var35 = var34.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(var34, 1);
    dynoptic.model.fifosys.gfsm.GFSMPath var38 = new dynoptic.model.fifosys.gfsm.GFSMPath(var37);
    boolean var39 = var31.equals((java.lang.Object)var37);
    dynoptic.model.fifosys.gfsm.GFSMPath var41 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var42 = new dynoptic.model.fifosys.gfsm.GFSMPath(var41);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var45 = var44.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var46 = new dynoptic.model.fifosys.gfsm.GFSMPath(var41, var44);
    dynoptic.model.fifosys.gfsm.GFSMPath var48 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var49 = new dynoptic.model.fifosys.gfsm.GFSMPath(var48);
    dynoptic.model.fifosys.gfsm.GFSMPath var51 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var52 = var51.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var53 = new dynoptic.model.fifosys.gfsm.GFSMPath(var48, var51);
    dynoptic.model.fifosys.gfsm.GFSMPath var55 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var56 = new dynoptic.model.fifosys.gfsm.GFSMPath(var51, var55);
    boolean var57 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var55);
    dynoptic.model.fifosys.gfsm.GFSMPath var58 = new dynoptic.model.fifosys.gfsm.GFSMPath(var44, var55);
    dynoptic.model.fifosys.gfsm.GFSMPath var60 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var61 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var60);
    dynoptic.model.fifosys.gfsm.GFSMPath var62 = new dynoptic.model.fifosys.gfsm.GFSMPath(var55, var60);
    dynoptic.model.fifosys.gfsm.GFSMPath var64 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var65 = new dynoptic.model.fifosys.gfsm.GFSMPath(var64);
    dynoptic.model.fifosys.gfsm.GFSMPath var67 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var68 = var67.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var69 = new dynoptic.model.fifosys.gfsm.GFSMPath(var64, var67);
    dynoptic.model.fifosys.gfsm.GFSMPath var70 = new dynoptic.model.fifosys.gfsm.GFSMPath(var64);
    dynoptic.model.fifosys.gfsm.GFSMPath var71 = new dynoptic.model.fifosys.gfsm.GFSMPath(var64);
    int var72 = var64.numEvents();
    boolean var73 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var64);
    int var74 = var64.numStates();
    dynoptic.model.fifosys.gfsm.GFSMPath var75 = new dynoptic.model.fifosys.gfsm.GFSMPath(var60, var64);
    dynoptic.model.fifosys.gfsm.GFSMPath var76 = new dynoptic.model.fifosys.gfsm.GFSMPath(var37, var75);
    int var77 = var76.numEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(_)"+ "'", var19.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var30.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "Part-0-399455648"+ "'", var35.equals("Part-0-399455648"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);

  }

  public void test408() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test408"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(0, false, true);
    java.lang.String var4 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "a137_t"+ "'", var4.equals("a137_t"));

  }

  public void test409() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test409"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.lang.String var4 = var1.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var16, var31, var38);
    var1.removeAllObs(var38);
    java.lang.String var42 = var1.toLongString();
    boolean var44 = var1.isAcceptForPid(1);
    boolean var46 = var1.isInitForPid(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "[]"+ "'", var42.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test410() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test410"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    boolean var8 = var2.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    java.util.Set var16 = var10.getTerminalObs();
    var2.removeAllObs(var16);
    boolean var18 = var0.retainAll((java.util.Collection)var16);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var24 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    var31.removeAllObs(var35);
    dynoptic.model.fifosys.cfsm.fsm.FSM var38 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var24, var29, var35, 100);
    int var39 = var38.getPid();
    java.util.Set var40 = var38.getStates();
    boolean var41 = var0.addAll((java.util.Collection)var40);
    dynoptic.model.alphabet.FSMAlphabet var42 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var48 = var46.getInitialObsForPid(100);
    var44.removeAllObs(var48);
    boolean var50 = var44.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    java.util.Set var58 = var52.getTerminalObs();
    var44.removeAllObs(var58);
    boolean var60 = var42.retainAll((java.util.Collection)var58);
    java.lang.Object[] var62 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var63 = var42.toArray(var62);
    java.lang.Object[] var64 = var42.toArray();
    java.lang.Object[] var65 = var0.toArray(var64);
    dynoptic.model.alphabet.FSMAlphabet var66 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var70 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var72 = var70.getInitialObsForPid(100);
    var68.removeAllObs(var72);
    boolean var74 = var68.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var76 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var78 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var80 = var78.getInitialObsForPid(100);
    var76.removeAllObs(var80);
    java.util.Set var82 = var76.getTerminalObs();
    var68.removeAllObs(var82);
    boolean var84 = var66.retainAll((java.util.Collection)var82);
    java.lang.Object[] var86 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var87 = var66.toArray(var86);
    java.lang.Object[] var88 = var66.toArray();
    java.lang.Object[] var89 = var0.toArray(var88);
    java.lang.String var90 = var0.anyEventScmQRe();
    java.lang.String var91 = var0.anyEventScmQRe();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "(_)"+ "'", var90.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "(_)"+ "'", var91.equals("(_)"));

  }

  public void test411() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test411"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var45 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var50 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.cfsm.fsm.FSM var59 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var45, var50, var56, 100);
    dynoptic.model.automaton.EventTypeEncodings var60 = var59.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var65 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var66 = var60.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var67 = var39.getEncodedAutomaton(var60);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var73 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var78 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var80 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var82 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var84 = var82.getInitialObsForPid(100);
    var80.removeAllObs(var84);
    dynoptic.model.fifosys.cfsm.fsm.FSM var87 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var73, var78, var84, 100);
    dynoptic.model.automaton.EventTypeEncodings var88 = var87.getEventTypeEncodings();
    boolean var89 = var67.equals((java.lang.Object)var87);
    dynoptic.model.automaton.EncodedAutomaton var90 = new dynoptic.model.automaton.EncodedAutomaton(var17, var87);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var92 = var17.getEventType('4');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test412() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test412"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    boolean var28 = var22.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    java.util.Set var36 = var30.getTerminalObs();
    var22.removeAllObs(var36);
    java.lang.String var38 = var22.toLongString();
    java.lang.String var41 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString((-1), (dynoptic.model.AbsFSMState)var22, false, true);
    java.lang.String var42 = var0.endGraphString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-1126629405"+ "'", var14.equals("Part-0-1126629405"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "[]"+ "'", var38.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "  -1 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var41.equals("  -1 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "} // digraph {\n"+ "'", var42.equals("} // digraph {\n"));

  }

  public void test413() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test413"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    int var21 = var20.getPid();
    java.util.Set var22 = var20.getStates();
    dynoptic.model.alphabet.FSMAlphabet var23 = var20.getAlphabet();
    dynoptic.model.alphabet.FSMAlphabet var24 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var42 = var40.getInitialObsForPid(100);
    var38.removeAllObs(var42);
    dynoptic.model.fifosys.cfsm.fsm.FSM var45 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var31, var36, var42, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var51 = var49.getInitialObsForPid(100);
    var47.removeAllObs(var51);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var58 = var56.getInitialObsForPid(100);
    var54.removeAllObs(var58);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var36, var51, var58);
    boolean var61 = var24.retainAll((java.util.Collection)var58);
    int var62 = var24.size();
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var66 = var64.getInitialObsForPid(100);
    java.util.Set var68 = var64.getInitialObsForPid(1);
    dynoptic.model.fifosys.cfsm.fsm.FSM var70 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, (java.util.Set)var23, (java.util.Set)var24, (java.util.Collection)var68, (-1));
    java.util.Set var71 = var70.getAcceptStates();
    java.util.Set var72 = var70.getInitStates();
    java.util.Set var73 = var70.getStates();
    java.util.Set var74 = var70.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test414() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test414"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    dynoptic.model.automaton.EventTypeEncodings var42 = var41.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var43 = var19.getEncodedAutomaton(var42);
    int var44 = var19.getPid();
    var19.minimize();
    java.util.Set var46 = var19.getStates();
    java.util.Set var47 = var19.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test415() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test415"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var12 = var11.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var11);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, var15);
    boolean var17 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4, var15);
    dynoptic.model.fifosys.gfsm.GFSMPath var19 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4);
    int var21 = var20.numEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);

  }

  public void test416() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test416"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var2 = var1.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 1);
    int var5 = var4.numStates();
    int var6 = var4.numEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-946560345"+ "'", var2.equals("Part-0-946560345"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test417() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test417"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    java.lang.String var36 = var11.toLongString();
    java.lang.String var37 = var11.toLongString();
    java.lang.String var38 = var11.toString();
    java.util.Set var39 = var11.getNextStates();
    java.lang.String var40 = var11.toString();
    int var41 = var11.getPid();
    int var42 = var11.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var36.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var37.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "0"+ "'", var38.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "0"+ "'", var40.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);

  }

  public void test418() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test418"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.lang.String var4 = var1.toLongString();
    java.lang.String var5 = var1.toIntermediateString();
    boolean var7 = var1.isInitForPid(1);
    java.util.Set var8 = var1.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Part-0-134562296"+ "'", var5.equals("Part-0-134562296"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test419() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test419"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 0);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var9);
    boolean var11 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var9);
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var14 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13);
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var17 = var16.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, var16);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var21 = new dynoptic.model.fifosys.gfsm.GFSMPath(var20);
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(var16, var21);
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath(var9, var16);
    int var24 = var9.numStates();
    int var25 = var9.numEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);

  }

  public void test420() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test420"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    dynoptic.model.fifosys.gfsm.GFSMPath var8 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 100);
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var11 = new dynoptic.model.fifosys.gfsm.GFSMPath(var10);
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var14 = var13.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath(var10, var13);
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var18 = new dynoptic.model.fifosys.gfsm.GFSMPath(var17);
    dynoptic.model.fifosys.gfsm.GFSMPath var20 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var21 = var20.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var22 = new dynoptic.model.fifosys.gfsm.GFSMPath(var17, var20);
    dynoptic.model.fifosys.gfsm.GFSMPath var24 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var25 = new dynoptic.model.fifosys.gfsm.GFSMPath(var20, var24);
    boolean var26 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var24);
    dynoptic.model.fifosys.gfsm.GFSMPath var27 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, var24);
    dynoptic.model.fifosys.gfsm.GFSMPath var29 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var30 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var29);
    dynoptic.model.fifosys.gfsm.GFSMPath var31 = new dynoptic.model.fifosys.gfsm.GFSMPath(var24, var29);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var35 = var33.getInitialObsForPid(100);
    java.util.Set var36 = var33.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var38 = new dynoptic.model.fifosys.gfsm.GFSMPath(var33, (-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var39 = new dynoptic.model.fifosys.gfsm.GFSMPath(var29, var38);
    dynoptic.model.fifosys.gfsm.GFSMPath var40 = new dynoptic.model.fifosys.gfsm.GFSMPath(var8, var39);
    dynoptic.model.fifosys.gfsm.GFSMPath var41 = new dynoptic.model.fifosys.gfsm.GFSMPath(var40);
    boolean var42 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);

  }

  public void test421() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test421"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var5.getPid();
    java.lang.String var21 = var5.toLongString();
    java.lang.String var22 = var5.toLongString();
    int var23 = var5.getScmId();
    boolean var24 = var5.isAccept();
    dynoptic.model.fifosys.gfsm.GFSMState var26 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var30 = var28.getInitialObsForPid(100);
    var26.removeAllObs(var30);
    java.util.Set var32 = var26.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var34 = new dynoptic.model.fifosys.gfsm.GFSMPath(var26, 0);
    boolean var36 = var26.isAcceptForPid(10);
    int var37 = var26.getNumProcesses();
    java.util.Set var39 = var26.getTerminalObsForPid((-1));
    boolean var40 = var5.equals((java.lang.Object)var26);
    boolean var41 = var26.isInitial();
    java.util.Set var42 = var26.getObservedStates();
    java.util.Set var43 = var26.getTerminalObs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var21.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var22.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test422() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test422"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    boolean var40 = var11.isAccept();
    boolean var41 = var11.isInitial();
    java.lang.String var42 = var11.toString();
    int var43 = var11.getScmId();
    java.lang.String var44 = var11.toLongString();
    java.lang.String var45 = var11.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "0"+ "'", var42.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var44.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var45.equals("FSM_state: init[true], accept[false] id[0]"));

  }

  public void test423() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test423"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    java.util.Set var41 = var40.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test424() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test424"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var9 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 0);
    boolean var11 = var1.isAcceptForPid(10);
    dynoptic.model.fifosys.gfsm.GFSMPath var13 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = var13.lastState();
    java.util.Set var15 = var14.getInitialObservations();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test425() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test425"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    var5.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var21 = new dynoptic.model.fifosys.cfsm.CFSMState(var5);
    java.util.Set var22 = var21.getTransitioningEvents();
    boolean var23 = var21.isInitial();
    boolean var24 = var21.isInitial();
    java.util.Set var25 = var21.getTransitioningEvents();
    java.util.Set var26 = var21.getTransitioningEvents();
    boolean var27 = var21.isInitial();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);

  }

  public void test426() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test426"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var14 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    java.lang.String var15 = var14.toString();
    boolean var16 = var14.hasOccurred();
    int var17 = var14.getPid();
    boolean var18 = var14.isInitState();
    var8.addRemoteDependency(var14);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var24 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var26 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var27 = var24.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var28 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var24);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var33 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var35 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var36 = var33.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var37 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var33);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var38 = var37.getObsState();
    boolean var39 = var37.isEnabled();
    var37.setOccurred(false);
    var28.addRemoteDependency(var37);
    synoptic.model.event.Event var43 = var37.getNextEvent();
    synoptic.model.event.Event var44 = var37.getNextEvent();
    var8.addRemoteDependency(var37);
    boolean var46 = var8.hasOccurred();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var15.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test427() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test427"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    java.util.Set var8 = var2.getTerminalObs();
    java.util.Set var10 = var2.getInitialObsForPid(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10, var10);
    java.util.Set var13 = var11.getTerminalObsForPid((-1));
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, 10);
    int var16 = var15.numEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test428() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test428"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var18);
    boolean var23 = var22.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var27 = var25.getTerminalObsForPid(1);
    java.util.Set var28 = var25.getObservedStates();
    var22.addAllObs(var28);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(100, var28);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var41 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.cfsm.fsm.FSM var50 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var36, var41, var47, 100);
    java.util.Set var51 = var50.getAcceptStates();
    java.lang.String var52 = var50.toString();
    int var53 = var50.getPid();
    dynoptic.model.alphabet.FSMAlphabet var54 = var50.getAlphabet();
    java.util.Set var55 = var54.getLocalEventScmStrings();
    var30.removeAllObs(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var52.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test429() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test429"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    java.lang.String var13 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var5, false, false);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 100, 0);
    int var20 = var19.getPid();
    java.lang.String var21 = var19.toLongString();
    java.lang.String var24 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(10, (dynoptic.model.AbsFSMState)var19, true, true);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    java.util.Set var33 = var27.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var35 = new dynoptic.model.fifosys.gfsm.GFSMPath(var27, 0);
    boolean var37 = var27.isAcceptForPid(10);
    int var38 = var27.getNumProcesses();
    var27.recreateCachedTransitions();
    java.lang.String var42 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var27, false, false);
    java.lang.String var43 = var0.endGraphString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var13.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "FSM_state: init[true], accept[true] id[0]"+ "'", var21.equals("FSM_state: init[true], accept[true] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "  10 [label=\"0\",shape=circle,shape=doublecircle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->10;\n"+ "'", var24.equals("  10 [label=\"0\",shape=circle,shape=doublecircle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->10;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "  0 [label=\"[]\",shape=circle];\n"+ "'", var42.equals("  0 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "} // digraph {\n"+ "'", var43.equals("} // digraph {\n"));

  }

  public void test430() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test430"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (-1), 0);
    java.util.Set var5 = var4.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test431() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test431"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var32, var47, var54);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var60 = var58.getInitialObsForPid(100);
    java.util.Set var62 = var58.getInitialObsForPid(1);
    java.util.Set var63 = var58.getInitialObservations();
    dynoptic.model.fifosys.cfsm.fsm.FSM var65 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var32, var63, 10);
    dynoptic.model.alphabet.FSMAlphabet var66 = var65.getAlphabet();
    dynoptic.model.automaton.EventTypeEncodings var67 = var65.getEventTypeEncodings();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      synoptic.model.event.DistEventType var69 = var67.getEventType('a');
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test432() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test432"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var8.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = var8.getObsState();
    boolean var12 = var8.isTermState();
    boolean var13 = var8.isTermState();
    java.lang.String var14 = var8.toString();
    synoptic.model.event.Event var15 = var8.getNextEvent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var14.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test433() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test433"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath(var21, (-1));
    boolean var24 = var17.equals((java.lang.Object)var21);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var29 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var31 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var32 = var29.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var33 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var29);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var34 = var33.getObsState();
    java.lang.String var35 = var33.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var36 = var33.getObsState();
    boolean var37 = var33.isTermState();
    boolean var38 = var33.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var43 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var44 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var43);
    java.lang.String var45 = var44.toString();
    boolean var46 = var44.hasOccurred();
    synoptic.model.event.Event var47 = var44.getNextEvent();
    var33.addRemoteDependency(var44);
    boolean var49 = var17.equals((java.lang.Object)var33);
    boolean var50 = var33.isTermState();
    synoptic.model.event.Event var51 = var33.getNextEvent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var35.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var45.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);

  }

  public void test434() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test434"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var2 = var1.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 1);
    int var5 = var4.numStates();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-1365118368"+ "'", var2.equals("Part-0-1365118368"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);

  }

  public void test435() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test435"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var14 = var13.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var16 = new dynoptic.model.fifosys.gfsm.GFSMPath(var13, 1);
    java.lang.String var19 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var13, true, true);
    java.lang.String var20 = var13.toString();
    java.util.Set var21 = var13.getTerminalObs();
    var13.recreateCachedTransitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Part-0-2029737407"+ "'", var14.equals("Part-0-2029737407"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var19.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "[]"+ "'", var20.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test436() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test436"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.util.Iterator var38 = var0.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var41 = var40.toIntermediateString();
    boolean var42 = var40.isAccept();
    java.util.Set var44 = var40.getInitialObsForPid(10);
    boolean var45 = var0.addAll((java.util.Collection)var44);
    java.util.Set var46 = var0.getLocalEventScmStrings();
    java.util.Iterator var47 = var0.iterator();
    java.lang.String var48 = var0.toString();
    java.lang.String var49 = var0.anyEventScmQRe();
    boolean var50 = var0.isEmpty();
    java.lang.String var51 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "Part-0-322057238"+ "'", var41.equals("Part-0-322057238"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "(_)"+ "'", var49.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "[]"+ "'", var51.equals("[]"));

  }

  public void test437() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test437"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    java.util.Set var3 = var2.getTerminalObs();
    dynoptic.model.alphabet.FSMAlphabet var4 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var5 = var4.toScmParametersString();
    dynoptic.model.alphabet.FSMAlphabet var6 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var13 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var24 = var22.getInitialObsForPid(100);
    var20.removeAllObs(var24);
    dynoptic.model.fifosys.cfsm.fsm.FSM var27 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var13, var18, var24, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var38 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var40 = var38.getInitialObsForPid(100);
    var36.removeAllObs(var40);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var18, var33, var40);
    boolean var43 = var6.retainAll((java.util.Collection)var40);
    java.lang.Object[] var44 = var6.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var50 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var55 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var61 = var59.getInitialObsForPid(100);
    var57.removeAllObs(var61);
    dynoptic.model.fifosys.cfsm.fsm.FSM var64 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var50, var55, var61, 100);
    int var65 = var64.getPid();
    java.util.Set var66 = var64.getAcceptStates();
    boolean var67 = var6.retainAll((java.util.Collection)var66);
    boolean var68 = var6.isEmpty();
    var6.clear();
    boolean var70 = var4.containsAll((java.util.Collection)var6);
    var2.removeAllObs((java.util.Set)var4);
    java.util.Set var72 = var4.getLocalEventScmStrings();
    dynoptic.model.fifosys.gfsm.GFSMState var73 = new dynoptic.model.fifosys.gfsm.GFSMState(0, var72);
    java.util.Set var74 = var73.getTransitioningEvents();
    boolean var75 = var73.isAccept();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);

  }

  public void test438() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test438"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var8.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = var8.getObsState();
    boolean var12 = var8.isTermState();
    boolean var13 = var8.isTermState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var14 = var8.getNextState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var15 = var8.getObsState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var16 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test439() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test439"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.String var38 = var0.toScmParametersString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));

  }

  public void test440() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test440"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.lang.String var16 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var13, true, false);
    boolean var17 = var13.isAccept();
    java.util.Set var18 = var13.getTransitioningEvents();
    java.util.Set var19 = var13.getInitialObservations();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->0;\n"+ "'", var16.equals("  0 [label=\"[]\",shape=circle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test441() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test441"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    java.lang.String var37 = var12.toLongString();
    java.lang.String var38 = var12.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var44.getPid();
    int var60 = var44.getScmId();
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var64 = var62.getTerminalObsForPid(1);
    dynoptic.model.fifosys.cfsm.fsm.FSM var66 = new dynoptic.model.fifosys.cfsm.fsm.FSM(0, var12, var44, var64, 10);
    dynoptic.model.alphabet.FSMAlphabet var67 = var66.getAlphabet();
    java.util.Set var68 = var66.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var37.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var38.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test442() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test442"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getStates();
    java.lang.String var22 = var19.toString();
    int var23 = var19.getPid();
    java.lang.String var24 = var19.toString();
    java.util.Set var25 = var19.getAcceptStates();
    java.util.Set var26 = var19.getAcceptStates();
    java.util.Set var27 = var19.getAcceptStates();
    dynoptic.model.automaton.EventTypeEncodings var28 = var19.getEventTypeEncodings();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var22.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var24.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test443() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test443"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var42 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var44 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var45 = var42.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var46 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var51 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    java.lang.String var52 = var51.getName();
    boolean var53 = var42.equals((java.lang.Object)var51);
    boolean var54 = var0.contains((java.lang.Object)var42);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var55 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var42);
    synoptic.model.event.Event var56 = var55.getNextEvent();
    synoptic.model.event.Event var57 = var55.getNextEvent();
    java.lang.String var58 = var55.toString();
    boolean var59 = var55.hasOccurred();
    boolean var60 = var55.hasOccurred();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var52.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var58.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test444() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test444"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.fifosys.cfsm.fsm.FSM var41 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var32, var38, 100);
    int var42 = var27.getPid();
    int var43 = var27.getScmId();
    int var44 = var27.getPid();
    boolean var45 = var19.equals((java.lang.Object)var44);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var50 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var52 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var53 = var50.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var54 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var50);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var59 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var61 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var62 = var59.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var63 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var59);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var64 = var63.getObsState();
    boolean var65 = var63.isEnabled();
    var63.setOccurred(false);
    var54.addRemoteDependency(var63);
    boolean var69 = var54.hasOccurred();
    var54.setOccurred(true);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var72 = var54.getObsState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var73 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var72);
    java.lang.String var74 = var72.toString();
    boolean var75 = var19.equals((java.lang.Object)var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "i_hi!_t"+ "'", var74.equals("i_hi!_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test445() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test445"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    boolean var7 = var5.hasOccurred();
    boolean var8 = var5.isInitState();
    boolean var9 = var5.hasOccurred();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var10 = var5.getPrevState();
    synoptic.model.event.Event var11 = var5.getNextEvent();
    var5.setOccurred(true);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var19 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var18);
    boolean var20 = var19.isTermState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var21 = var19.getNextState();
    var5.addRemoteDependency(var19);
    boolean var23 = var5.hasOccurred();
    boolean var24 = var5.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test446() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test446"); }


    dynoptic.model.fifosys.gfsm.GFSMPath var1 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var2 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    int var5 = var4.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, var4);
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1);
    boolean var8 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var7);
    int var9 = var7.numEvents();
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var15 = var13.getInitialObsForPid(100);
    var11.removeAllObs(var15);
    java.util.Set var17 = var11.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var19 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, 0);
    boolean var21 = var11.isAcceptForPid(10);
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath(var11, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = var23.lastState();
    dynoptic.model.fifosys.gfsm.GFSMState var25 = var23.lastState();
    dynoptic.model.fifosys.gfsm.GFSMPath var26 = new dynoptic.model.fifosys.gfsm.GFSMPath(var23);
    dynoptic.model.fifosys.gfsm.GFSMPath var27 = new dynoptic.model.fifosys.gfsm.GFSMPath(var7, var23);
    int var28 = var7.numEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);

  }

  public void test447() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test447"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var3 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState((-1), true, false);
    java.lang.String var4 = var3.getName();
    dynoptic.model.export.DotExportFormatter var5 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var6 = var5.beginGraphString();
    java.lang.String var7 = var5.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var12 = var10.getInitialObsForPid(100);
    java.lang.String var15 = var5.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var10, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var19 = var18.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var21 = new dynoptic.model.fifosys.gfsm.GFSMPath(var18, 1);
    java.lang.String var24 = var5.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var18, true, true);
    java.lang.String var25 = var5.beginGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var32 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var43 = var41.getInitialObsForPid(100);
    var39.removeAllObs(var43);
    dynoptic.model.fifosys.cfsm.fsm.FSM var46 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var32, var37, var43, 100);
    int var47 = var32.getPid();
    int var48 = var32.getScmId();
    int var49 = var32.getPid();
    java.lang.String var52 = var5.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var32, false, false);
    var32.setAccept();
    boolean var54 = var3.equals((java.lang.Object)var32);
    int var55 = var32.getScmId();
    java.util.Set var56 = var32.getNextStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "139"+ "'", var4.equals("139"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "digraph {\n"+ "'", var6.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "digraph {\n"+ "'", var7.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var15.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Part-0-24780321"+ "'", var19.equals("Part-0-24780321"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var24.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "digraph {\n"+ "'", var25.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "  1 [label=\"0\",shape=circle];\n"+ "'", var52.equals("  1 [label=\"0\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test448() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test448"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (-1), 1);
    java.lang.String var6 = var5.toShortIntString();
    java.util.Set var7 = var5.getNextStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var19 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var25 = var23.getInitialObsForPid(100);
    var21.removeAllObs(var25);
    dynoptic.model.fifosys.cfsm.fsm.FSM var28 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var14, var19, var25, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var19, var34, var41);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var46 = var45.toIntermediateString();
    boolean var47 = var45.isAccept();
    java.util.Set var48 = var45.getTerminalObs();
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    var45.removeAllObs(var54);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var34, (java.util.Collection)var54, 100);
    java.util.Set var59 = var58.getStates();
    java.util.Set var60 = var58.getAcceptStates();
    java.util.Set var61 = var58.getStates();
    dynoptic.model.automaton.EventTypeEncodings var62 = new dynoptic.model.automaton.EventTypeEncodings(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "1"+ "'", var6.equals("1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "Part-0-741909017"+ "'", var46.equals("Part-0-741909017"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test449() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test449"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    boolean var4 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 10);
    dynoptic.model.alphabet.FSMAlphabet var7 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    boolean var15 = var9.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var21 = var19.getInitialObsForPid(100);
    var17.removeAllObs(var21);
    java.util.Set var23 = var17.getTerminalObs();
    var9.removeAllObs(var23);
    boolean var25 = var7.retainAll((java.util.Collection)var23);
    java.lang.String var26 = var7.toString();
    var1.addAllObs((java.util.Set)var7);
    dynoptic.model.alphabet.FSMAlphabet var28 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var35 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var40 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var46 = var44.getInitialObsForPid(100);
    var42.removeAllObs(var46);
    dynoptic.model.fifosys.cfsm.fsm.FSM var49 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var35, var40, var46, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var40, var55, var62);
    boolean var65 = var28.retainAll((java.util.Collection)var62);
    int var66 = var28.size();
    boolean var67 = var7.retainAll((java.util.Collection)var28);
    boolean var68 = var28.isEmpty();
    dynoptic.model.export.DotExportFormatter var69 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var70 = var69.beginGraphString();
    java.lang.String var71 = var69.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var74 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var76 = var74.getInitialObsForPid(100);
    java.lang.String var79 = var69.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var74, true, false);
    java.lang.String var80 = var69.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var83 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var84 = var83.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var86 = new dynoptic.model.fifosys.gfsm.GFSMPath(var83, 1);
    java.lang.String var89 = var69.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var83, false, true);
    java.util.Set var91 = var83.getTerminalObsForPid(100);
    java.lang.String var92 = var83.toLongString();
    java.util.Set var93 = var83.getTerminalObs();
    boolean var94 = var28.addAll((java.util.Collection)var93);
    java.util.Set var95 = var28.getLocalEventScmStrings();
    var28.clear();
    var28.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "[]"+ "'", var26.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "digraph {\n"+ "'", var70.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "digraph {\n"+ "'", var71.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var79.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "digraph {\n"+ "'", var80.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "Part-0-800383325"+ "'", var84.equals("Part-0-800383325"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var89.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "[]"+ "'", var92.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test450() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test450"); }


    dynoptic.model.export.GraphExporter.generatePngFileFromDotFile("  -1 [label=\"dynoptic.model.fifosys.cfsm.CFSMState@7e4ec264\",shape=circle,shape=doublecircle];\n  start_2 [label=\"start\",shape=plaintext];\n  start_2->-1;\n");

  }

  public void test451() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test451"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var16 = var13.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var17 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = var17.getObsState();
    boolean var19 = var17.isEnabled();
    var17.setOccurred(false);
    var8.addRemoteDependency(var17);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var23 = var17.getObsState();
    boolean var24 = var17.isInitState();
    boolean var25 = var17.isInitState();
    var17.setOccurred(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test452() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test452"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    var4.markTerm();
    boolean var6 = var4.isInitial();
    var4.markTerm();
    java.lang.String var8 = var4.getName();
    int var9 = var4.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var8.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 100);

  }

  public void test453() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test453"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    java.util.Set var17 = var1.getTransitioningEvents();
    boolean var19 = var1.isAcceptForPid(0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var25 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.fifosys.cfsm.fsm.FSM var39 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var25, var30, var36, 100);
    int var40 = var25.getPid();
    java.lang.String var41 = var25.toLongString();
    java.util.Set var42 = var25.getTransitioningEvents();
    int var43 = var25.getScmId();
    dynoptic.model.fifosys.cfsm.CFSMState var44 = new dynoptic.model.fifosys.cfsm.CFSMState(var25);
    boolean var46 = var25.equals((java.lang.Object)"[]");
    java.util.Set var47 = var25.getTransitioningEvents();
    var1.removeAllObs(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var41.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test454() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test454"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    java.lang.Object[] var2 = var0.toArray();
    boolean var3 = var0.isEmpty();
    var0.clear();
    dynoptic.model.alphabet.FSMAlphabet var5 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var17, var32, var39);
    boolean var42 = var5.retainAll((java.util.Collection)var39);
    java.lang.Object[] var43 = var5.toArray();
    boolean var44 = var0.remove((java.lang.Object)var5);
    java.lang.Object[] var45 = var0.toArray();
    int var46 = var0.size();
    int var47 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);

  }

  public void test455() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test455"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    java.util.Set var22 = var14.getInitialObsForPid(100);
    boolean var23 = var14.isInitial();
    java.util.Set var24 = var14.getObservedStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-1310245404"+ "'", var15.equals("Part-0-1310245404"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test456() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test456"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    boolean var8 = var2.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    java.util.Set var16 = var10.getTerminalObs();
    var2.removeAllObs(var16);
    boolean var18 = var0.retainAll((java.util.Collection)var16);
    java.lang.String var19 = var0.anyEventScmQRe();
    java.lang.String var20 = var0.toScmParametersString();
    java.lang.String var21 = var0.toString();
    java.lang.String var22 = var0.toScmParametersString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(_)"+ "'", var19.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ""+ "'", var20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "[]"+ "'", var21.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));

  }

  public void test457() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test457"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    java.util.Set var17 = var1.getTransitioningEvents();
    java.util.Set var18 = var1.getNextStates();
    var1.recreateCachedTransitions();
    java.util.Set var20 = var1.getTerminalObs();
    var1.recreateCachedTransitions();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var27 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var28 = var27.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var34 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var39 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var41 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var45 = var43.getInitialObsForPid(100);
    var41.removeAllObs(var45);
    dynoptic.model.fifosys.cfsm.fsm.FSM var48 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var34, var39, var45, 100);
    int var49 = var34.getPid();
    int var50 = var34.getScmId();
    dynoptic.model.alphabet.FSMAlphabet var51 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var63 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var65 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var69 = var67.getInitialObsForPid(100);
    var65.removeAllObs(var69);
    dynoptic.model.fifosys.cfsm.fsm.FSM var72 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var58, var63, var69, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var74 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var76 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var78 = var76.getInitialObsForPid(100);
    var74.removeAllObs(var78);
    dynoptic.model.fifosys.gfsm.GFSMState var81 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var83 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var85 = var83.getInitialObsForPid(100);
    var81.removeAllObs(var85);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var63, var78, var85);
    boolean var88 = var51.retainAll((java.util.Collection)var85);
    java.lang.String var89 = var51.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var91 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var27, var34, (java.util.Set)var51, 1);
    java.lang.String var92 = var51.toScmParametersString();
    java.lang.String var93 = var51.toString();
    var1.removeAllObs((java.util.Set)var51);
    java.lang.Object[] var95 = var51.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "[]"+ "'", var89.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + ""+ "'", var92.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "[]"+ "'", var93.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test458() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test458"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    boolean var8 = var5.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var5, 10);
    java.lang.String var13 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var5, false, false);
    java.lang.String var14 = var5.toString();
    int var15 = var5.getNumProcesses();
    java.lang.String var16 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "} // digraph {\n"+ "'", var2.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var13.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "[]"+ "'", var14.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[]"+ "'", var16.equals("[]"));

  }

  public void test459() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test459"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    java.util.Set var22 = var14.getInitialObsForPid(100);
    boolean var24 = var14.isInitForPid(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-831844167"+ "'", var15.equals("Part-0-831844167"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test460() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test460"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    var6.setAccept();
    java.util.Set var22 = var6.getTransitioningEvents();
    java.lang.String var23 = var6.toString();
    java.util.Set var24 = var6.getTransitioningEvents();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var35 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var39 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var41 = var39.getInitialObsForPid(100);
    var37.removeAllObs(var41);
    dynoptic.model.fifosys.cfsm.fsm.FSM var44 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var30, var35, var41, 100);
    java.lang.String var45 = var35.toShortIntString();
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var48 = var47.toIntermediateString();
    boolean var49 = var47.isAccept();
    java.util.Set var51 = var47.getInitialObsForPid(10);
    java.util.Set var53 = var47.getTerminalObsForPid(0);
    dynoptic.model.fifosys.cfsm.fsm.FSM var55 = new dynoptic.model.fifosys.cfsm.fsm.FSM(100, var6, var35, var53, 10);
    dynoptic.model.fifosys.cfsm.CFSMState var56 = new dynoptic.model.fifosys.cfsm.CFSMState(var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var58 = var56.isInitForPid(2);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "0"+ "'", var23.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "0"+ "'", var45.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "Part-0-39496068"+ "'", var48.equals("Part-0-39496068"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test461() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test461"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    int var27 = var12.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var40 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var45 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var51 = var49.getInitialObsForPid(100);
    var47.removeAllObs(var51);
    dynoptic.model.fifosys.cfsm.fsm.FSM var54 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var40, var45, var51, 100);
    var29.removeAllObs(var51);
    dynoptic.model.fifosys.cfsm.fsm.FSM var57 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var6, var12, var51, 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var63 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var68 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var70 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var72 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var74 = var72.getInitialObsForPid(100);
    var70.removeAllObs(var74);
    dynoptic.model.fifosys.cfsm.fsm.FSM var77 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var63, var68, var74, 100);
    var63.setAccept();
    java.util.Set var79 = var63.getTransitioningEvents();
    dynoptic.model.alphabet.FSMAlphabet var81 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var82 = new dynoptic.model.fifosys.gfsm.GFSMState(1, (java.util.Set)var81);
    dynoptic.model.fifosys.cfsm.fsm.FSM var84 = new dynoptic.model.fifosys.cfsm.fsm.FSM(100, var6, var63, (java.util.Set)var81, 10);
    java.util.Set var85 = var84.getAcceptStates();
    int var86 = var84.getPid();
    java.lang.String var87 = var84.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "FSM[pid=100]\n\tstates: []\n\tinits: [1]\n\taccepts: [0]"+ "'", var87.equals("FSM[pid=100]\n\tstates: []\n\tinits: [1]\n\taccepts: [0]"));

  }

  public void test462() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test462"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    java.util.Set var17 = var1.getTransitioningEvents();
    java.util.Set var18 = var1.getNextStates();
    java.lang.String var19 = var1.toIntermediateString();
    dynoptic.model.export.DotExportFormatter var20 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var21 = var20.beginGraphString();
    java.lang.String var22 = var20.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    boolean var28 = var25.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var30 = new dynoptic.model.fifosys.gfsm.GFSMPath(var25, 10);
    java.lang.String var33 = var20.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(1, (dynoptic.model.AbsFSMState)var25, false, false);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var38 = var36.getTerminalObsForPid(1);
    java.lang.String var39 = var36.toLongString();
    java.lang.String var42 = var20.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var36, false, false);
    java.util.Set var43 = var36.getTransitioningEvents();
    java.util.Set var44 = var36.getInitialObservations();
    java.util.Set var46 = var36.getInitialObsForPid(1);
    var1.addAllObs(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Part-0-1993251032"+ "'", var19.equals("Part-0-1993251032"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "digraph {\n"+ "'", var21.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "} // digraph {\n"+ "'", var22.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "  1 [label=\"[]\",shape=circle];\n"+ "'", var33.equals("  1 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "[]_i_t"+ "'", var39.equals("[]_i_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "  100 [label=\"[]\",shape=circle];\n"+ "'", var42.equals("  100 [label=\"[]\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test463() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test463"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.lang.Object[] var38 = var0.toArray();
    java.util.Iterator var39 = var0.iterator();
    java.lang.String var40 = var0.toScmParametersString();
    java.lang.String var41 = var0.anyEventScmQRe();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + ""+ "'", var40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "(_)"+ "'", var41.equals("(_)"));

  }

  public void test464() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test464"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, false, 1, 10);

  }

  public void test465() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test465"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    boolean var7 = var5.hasOccurred();
    boolean var8 = var5.isInitState();
    boolean var9 = var5.hasOccurred();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var10 = var5.getObsState();
    java.lang.String var11 = var10.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));

  }

  public void test466() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test466"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var5 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    java.lang.String var6 = var5.toString();
    boolean var7 = var5.hasOccurred();
    boolean var8 = var5.isInitState();
    boolean var9 = var5.hasOccurred();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var10 = var5.getPrevState();
    synoptic.model.event.Event var11 = var5.getNextEvent();
    var5.setOccurred(true);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var19 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var18);
    boolean var20 = var19.isTermState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var21 = var19.getNextState();
    var5.addRemoteDependency(var19);
    var19.setOccurred(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var6.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test467() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test467"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.util.Set var5 = var1.getInitialObsForPid(1);
    java.util.Set var6 = var1.getInitialObservations();
    int var7 = var1.getNumProcesses();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var10 = var9.toIntermediateString();
    boolean var11 = var9.isAccept();
    java.util.Set var13 = var9.getInitialObsForPid(10);
    java.util.Set var15 = var9.getTerminalObsForPid(0);
    dynoptic.model.export.DotExportFormatter var16 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var17 = var16.beginGraphString();
    java.lang.String var18 = var16.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    java.lang.String var26 = var16.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var21, true, false);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var30 = var29.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var32 = new dynoptic.model.fifosys.gfsm.GFSMPath(var29, 1);
    java.lang.String var35 = var16.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var29, true, true);
    java.lang.String var36 = var29.toString();
    java.util.Set var37 = var29.getTerminalObs();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findTransitiveClosure((dynoptic.model.AbsFSMState)var1, var15, var37);
    boolean var39 = var1.isAccept();
    dynoptic.model.alphabet.FSMAlphabet var40 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var41 = var40.toScmParametersString();
    java.lang.Object[] var42 = var40.toArray();
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    java.lang.String var48 = var45.toLongString();
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    dynoptic.model.alphabet.FSMAlphabet var56 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var58 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var60 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var62 = var60.getInitialObsForPid(100);
    var58.removeAllObs(var62);
    boolean var64 = var58.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var70 = var68.getInitialObsForPid(100);
    var66.removeAllObs(var70);
    java.util.Set var72 = var66.getTerminalObs();
    var58.removeAllObs(var72);
    boolean var74 = var56.retainAll((java.util.Collection)var72);
    java.lang.Object[] var76 = new java.lang.Object[] { (byte)(-1)};
    java.lang.Object[] var77 = var56.toArray(var76);
    java.lang.Object[] var78 = var56.toArray();
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure(10, (dynoptic.model.AbsFSMState)var45, var54, (java.util.Set)var56);
    boolean var80 = var40.removeAll((java.util.Collection)var54);
    java.lang.String var81 = var40.anyEventScmQRe();
    var1.removeAllObs((java.util.Set)var40);
    java.lang.Object[] var83 = var40.toArray();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Part-0-219464250"+ "'", var10.equals("Part-0-219464250"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "digraph {\n"+ "'", var17.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "digraph {\n"+ "'", var18.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var26.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Part-0-1145928622"+ "'", var30.equals("Part-0-1145928622"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"+ "'", var35.equals("  100 [label=\"[]\",shape=circle,shape=doublecircle];\n  start_1 [label=\"start\",shape=plaintext];\n  start_1->100;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "[]"+ "'", var36.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + ""+ "'", var41.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "(_)"+ "'", var81.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test468() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test468"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    dynoptic.model.automaton.EventTypeEncodings var20 = var19.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var37 = var35.getInitialObsForPid(100);
    var33.removeAllObs(var37);
    dynoptic.model.fifosys.cfsm.fsm.FSM var40 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var26, var31, var37, 100);
    int var41 = var40.getPid();
    java.util.Set var42 = var40.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var48 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var53 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var57 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var59 = var57.getInitialObsForPid(100);
    var55.removeAllObs(var59);
    dynoptic.model.fifosys.cfsm.fsm.FSM var62 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var48, var53, var59, 100);
    int var63 = var48.getPid();
    int var64 = var48.getScmId();
    int var65 = var48.getPid();
    boolean var66 = var40.equals((java.lang.Object)var65);
    java.lang.String var67 = var40.toString();
    java.util.Set var68 = var40.getStates();
    dynoptic.model.automaton.EncodedAutomaton var69 = new dynoptic.model.automaton.EncodedAutomaton(var20, var40);
    var69.minimize();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var74 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState(100, true, false);
    var74.markTerm();
    boolean var76 = var69.equals((java.lang.Object)var74);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var77 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var74);
    boolean var78 = var77.isEnabled();
    int var79 = var77.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var67.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 100);

  }

  public void test469() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test469"); }


    dynoptic.main.OptionException var1 = new dynoptic.main.OptionException("Part-0-649754507");

  }

  public void test470() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test470"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    java.lang.String var1 = var0.toScmParametersString();
    dynoptic.model.alphabet.FSMAlphabet var2 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var9 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var14 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var20 = var18.getInitialObsForPid(100);
    var16.removeAllObs(var20);
    dynoptic.model.fifosys.cfsm.fsm.FSM var23 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var9, var14, var20, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var29 = var27.getInitialObsForPid(100);
    var25.removeAllObs(var29);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    var32.removeAllObs(var36);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var14, var29, var36);
    boolean var39 = var2.retainAll((java.util.Collection)var36);
    java.lang.Object[] var40 = var2.toArray();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var57 = var55.getInitialObsForPid(100);
    var53.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var60 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var46, var51, var57, 100);
    int var61 = var60.getPid();
    java.util.Set var62 = var60.getAcceptStates();
    boolean var63 = var2.retainAll((java.util.Collection)var62);
    boolean var64 = var2.isEmpty();
    var2.clear();
    boolean var66 = var0.containsAll((java.util.Collection)var2);
    java.util.Iterator var67 = var2.iterator();
    java.lang.String var68 = var2.anyEventScmQRe();
    java.util.Set var69 = var2.getLocalEventScmStrings();
    java.lang.String var70 = var2.toString();
    java.lang.String var71 = var2.anyEventScmQRe();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var77 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var82 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var84 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var88 = var86.getInitialObsForPid(100);
    var84.removeAllObs(var88);
    dynoptic.model.fifosys.cfsm.fsm.FSM var91 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var77, var82, var88, 100);
    java.util.Set var92 = var91.getAcceptStates();
    java.util.Set var93 = var91.getStates();
    java.lang.String var94 = var91.toString();
    java.util.Set var95 = var91.getStates();
    dynoptic.model.automaton.EventTypeEncodings var96 = new dynoptic.model.automaton.EventTypeEncodings(var95);
    boolean var97 = var2.addAll((java.util.Collection)var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "(_)"+ "'", var68.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "[]"+ "'", var70.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "(_)"+ "'", var71.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var94 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var94.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test471() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test471"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    boolean var7 = var1.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var9 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var11 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var13 = var11.getInitialObsForPid(100);
    var9.removeAllObs(var13);
    java.util.Set var15 = var9.getTerminalObs();
    var1.removeAllObs(var15);
    dynoptic.model.automaton.EventTypeEncodings var17 = new dynoptic.model.automaton.EventTypeEncodings(var15);
    boolean var19 = var17.equals((java.lang.Object)10.0f);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var23 = new dynoptic.model.fifosys.gfsm.GFSMPath(var21, (-1));
    boolean var24 = var17.equals((java.lang.Object)var21);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var29 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var31 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var32 = var29.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var33 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var29);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var34 = var33.getObsState();
    java.lang.String var35 = var33.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var36 = var33.getObsState();
    boolean var37 = var33.isTermState();
    boolean var38 = var33.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var43 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var44 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var43);
    java.lang.String var45 = var44.toString();
    boolean var46 = var44.hasOccurred();
    synoptic.model.event.Event var47 = var44.getNextEvent();
    var33.addRemoteDependency(var44);
    boolean var49 = var17.equals((java.lang.Object)var33);
    boolean var51 = var17.equals((java.lang.Object)"Part-0-1640521591");
    dynoptic.model.fifosys.cfsm.fsm.FSMState var57 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var62 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var68 = var66.getInitialObsForPid(100);
    var64.removeAllObs(var68);
    dynoptic.model.fifosys.cfsm.fsm.FSM var71 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var57, var62, var68, 100);
    int var72 = var71.getPid();
    var71.minimize();
    dynoptic.model.automaton.EncodedAutomaton var74 = new dynoptic.model.automaton.EncodedAutomaton(var17, var71);
    java.util.Set var75 = var71.getAcceptStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var35.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var45.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test472() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test472"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    java.lang.String var37 = var12.toLongString();
    java.lang.String var38 = var12.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var44 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var49 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var51 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var55 = var53.getInitialObsForPid(100);
    var51.removeAllObs(var55);
    dynoptic.model.fifosys.cfsm.fsm.FSM var58 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var44, var49, var55, 100);
    int var59 = var44.getPid();
    int var60 = var44.getScmId();
    dynoptic.model.fifosys.gfsm.GFSMState var62 = new dynoptic.model.fifosys.gfsm.GFSMState((-1));
    java.util.Set var64 = var62.getTerminalObsForPid(1);
    dynoptic.model.fifosys.cfsm.fsm.FSM var66 = new dynoptic.model.fifosys.cfsm.fsm.FSM(0, var12, var44, var64, 10);
    dynoptic.model.alphabet.FSMAlphabet var67 = var66.getAlphabet();
    java.util.Set var68 = var66.getAcceptStates();
    java.lang.String var69 = var66.toString();
    dynoptic.model.alphabet.FSMAlphabet var70 = var66.getAlphabet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var37.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var38.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "FSM[pid=0]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var69.equals("FSM[pid=0]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test473() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test473"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(0, "[]", true, true);
    java.lang.String var5 = var4.toString();
    java.lang.String var6 = var4.getName();
    var4.markTerm();
    int var8 = var4.getPid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "i_[]_t"+ "'", var5.equals("i_[]_t"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test474() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test474"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var13 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var16 = var13.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var17 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var13);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var18 = var17.getObsState();
    boolean var19 = var17.isEnabled();
    var17.setOccurred(false);
    var8.addRemoteDependency(var17);
    boolean var23 = var8.hasOccurred();
    var8.setOccurred(true);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var26 = var8.getObsState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var27 = var8.getPrevState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var28 = var8.getObsState();
    java.lang.String var29 = var8.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var29.equals("ObsDAGNode[i_hi!_t]"));

  }

  public void test475() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test475"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var3 = var1.getInitialObsForPid(100);
    java.lang.String var4 = var1.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var16, var31, var38);
    var1.removeAllObs(var38);
    boolean var43 = var1.isInitForPid(100);
    java.util.Set var44 = var1.getTransitioningEvents();
    java.util.Set var45 = var1.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "[]"+ "'", var4.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test476() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test476"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(1);
    java.util.Set var2 = var1.getTransitioningEvents();
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 100);
    java.util.Set var5 = var1.getTerminalObs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test477() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test477"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    java.util.Set var22 = var14.getInitialObsForPid(100);
    var14.recreateCachedTransitions();
    boolean var24 = var14.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    java.lang.String var31 = var30.toShortIntString();
    java.util.Set var32 = var30.getNextStates();
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var36 = var34.getInitialObsForPid(100);
    boolean var37 = var34.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var39 = new dynoptic.model.fifosys.gfsm.GFSMPath(var34, 10);
    dynoptic.model.alphabet.FSMAlphabet var40 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var42 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var46 = var44.getInitialObsForPid(100);
    var42.removeAllObs(var46);
    boolean var48 = var42.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var50 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var54 = var52.getInitialObsForPid(100);
    var50.removeAllObs(var54);
    java.util.Set var56 = var50.getTerminalObs();
    var42.removeAllObs(var56);
    boolean var58 = var40.retainAll((java.util.Collection)var56);
    java.lang.String var59 = var40.toString();
    var34.addAllObs((java.util.Set)var40);
    boolean var61 = var40.isEmpty();
    dynoptic.model.fifosys.gfsm.GFSMState var63 = new dynoptic.model.fifosys.gfsm.GFSMState(0);
    java.util.Set var65 = var63.getInitialObsForPid(0);
    dynoptic.model.fifosys.cfsm.fsm.FSM var67 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var32, (java.util.Set)var40, (java.util.Collection)var65, 100);
    var14.removeAllObs((java.util.Set)var40);
    boolean var69 = var40.isEmpty();
    java.util.Set var70 = var40.getLocalEventScmStrings();
    var40.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-271662883"+ "'", var15.equals("Part-0-271662883"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "0"+ "'", var31.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "[]"+ "'", var59.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test478() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test478"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var2 = var1.toIntermediateString();
    boolean var3 = var1.isAccept();
    java.util.Set var5 = var1.getInitialObsForPid(10);
    java.util.Set var7 = var1.getTerminalObsForPid(0);
    java.util.Set var8 = var1.getTerminalObs();
    dynoptic.model.fifosys.gfsm.GFSMPath var10 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, (-1));
    java.util.Set var11 = var1.getObservedStates();
    java.util.Set var12 = var1.getObservedStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var18 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    java.lang.String var19 = var18.toShortIntString();
    java.util.Set var20 = var18.getNextStates();
    var18.setAccept();
    dynoptic.model.fifosys.cfsm.CFSMState var22 = new dynoptic.model.fifosys.cfsm.CFSMState(var18);
    dynoptic.model.fifosys.cfsm.CFSMState var23 = new dynoptic.model.fifosys.cfsm.CFSMState(var18);
    var18.setAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var29 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 10, (-1));
    boolean var30 = var29.isAccept();
    dynoptic.model.alphabet.FSMAlphabet var31 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    var45.removeAllObs(var49);
    dynoptic.model.fifosys.cfsm.fsm.FSM var52 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var38, var43, var49, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var56 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var58 = var56.getInitialObsForPid(100);
    var54.removeAllObs(var58);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var63 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var65 = var63.getInitialObsForPid(100);
    var61.removeAllObs(var65);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var43, var58, var65);
    boolean var68 = var31.retainAll((java.util.Collection)var65);
    java.lang.Object[] var69 = var31.toArray();
    java.util.Iterator var70 = var31.iterator();
    java.lang.Object[] var71 = var31.toArray();
    java.lang.String var72 = var31.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var74 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var18, var29, (java.util.Set)var31, 0);
    var1.addAllObs((java.util.Set)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-1649690425"+ "'", var2.equals("Part-0-1649690425"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "0"+ "'", var19.equals("0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "[]"+ "'", var72.equals("[]"));

  }

  public void test479() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test479"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    java.lang.String var12 = var0.endGraphString();
    java.lang.String var13 = var0.endGraphString();
    java.lang.String var14 = var0.endGraphString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var21 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var28 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var32 = var30.getInitialObsForPid(100);
    var28.removeAllObs(var32);
    dynoptic.model.fifosys.cfsm.fsm.FSM var35 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var21, var26, var32, 100);
    java.lang.String var38 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString((-1), (dynoptic.model.AbsFSMState)var26, false, false);
    java.lang.String var39 = var26.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "} // digraph {\n"+ "'", var12.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "} // digraph {\n"+ "'", var13.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "} // digraph {\n"+ "'", var14.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "  -1 [label=\"0\",shape=circle];\n"+ "'", var38.equals("  -1 [label=\"0\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "0"+ "'", var39.equals("0"));

  }

  public void test480() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test480"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(0);
    var3.recreateCachedTransitions();
    var3.recreateCachedTransitions();
    java.util.Set var6 = var3.getTerminalObs();
    java.lang.String var9 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString((-1), (dynoptic.model.AbsFSMState)var3, true, false);
    java.lang.String var10 = var0.beginGraphString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "  -1 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->-1;\n"+ "'", var9.equals("  -1 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->-1;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "digraph {\n"+ "'", var10.equals("digraph {\n"));

  }

  public void test481() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test481"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    java.lang.String var3 = var0.beginGraphString();
    java.lang.String var4 = var0.endGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var7 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var9 = var7.getInitialObsForPid(100);
    java.util.Set var10 = var7.getTransitioningEvents();
    java.util.Set var11 = var7.getInitialObservations();
    java.util.Set var12 = var7.getNextStates();
    java.util.Set var13 = var7.getObservedStates();
    java.lang.String var16 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var7, true, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "digraph {\n"+ "'", var3.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "} // digraph {\n"+ "'", var4.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var16.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));

  }

  public void test482() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test482"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "Part-0-1716606222", false, false);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var15 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var17 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var21 = var19.getInitialObsForPid(100);
    var17.removeAllObs(var21);
    dynoptic.model.fifosys.cfsm.fsm.FSM var24 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var10, var15, var21, 100);
    java.util.Set var25 = var24.getAcceptStates();
    java.util.Set var26 = var24.getStates();
    java.lang.String var27 = var24.toString();
    int var28 = var24.getPid();
    java.lang.String var29 = var24.toString();
    java.util.Set var30 = var24.getAcceptStates();
    dynoptic.model.automaton.EventTypeEncodings var31 = var24.getEventTypeEncodings();
    dynoptic.model.automaton.EventTypeEncodings var32 = var24.getEventTypeEncodings();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var38 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var43 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var49 = var47.getInitialObsForPid(100);
    var45.removeAllObs(var49);
    dynoptic.model.fifosys.cfsm.fsm.FSM var52 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var38, var43, var49, 100);
    java.util.Set var53 = var52.getAcceptStates();
    java.util.Set var54 = var52.getStates();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var60 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var65 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var69 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var71 = var69.getInitialObsForPid(100);
    var67.removeAllObs(var71);
    dynoptic.model.fifosys.cfsm.fsm.FSM var74 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var60, var65, var71, 100);
    dynoptic.model.automaton.EventTypeEncodings var75 = var74.getEventTypeEncodings();
    dynoptic.model.automaton.EncodedAutomaton var76 = var52.getEncodedAutomaton(var75);
    int var77 = var52.getPid();
    var52.minimize();
    java.util.Set var79 = var52.getStates();
    dynoptic.model.automaton.EncodedAutomaton var80 = new dynoptic.model.automaton.EncodedAutomaton(var32, var52);
    boolean var81 = var4.equals((java.lang.Object)var80);
    var4.markTerm();
    boolean var83 = var4.isTerminal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var27.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var29.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);

  }

  public void test483() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test483"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var2 = var1.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var4 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, 1);
    java.util.Set var5 = var1.getInitialObservations();
    java.util.Set var6 = var1.getTransitioningEvents();
    int var7 = var1.getNumProcesses();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Part-0-2010842152"+ "'", var2.equals("Part-0-2010842152"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 10);

  }

  public void test484() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test484"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, (-1));
    java.lang.String var29 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(100, (dynoptic.model.AbsFSMState)var26, false, false);
    java.lang.String var30 = var0.endGraphString();
    java.lang.String var31 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var34 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var36 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var38 = var36.getInitialObsForPid(100);
    var34.removeAllObs(var38);
    java.util.Set var40 = var34.getTransitioningEvents();
    boolean var42 = var34.isInitForPid(1);
    boolean var44 = var34.isAcceptForPid(100);
    boolean var45 = var34.isAccept();
    java.lang.String var46 = var34.toString();
    java.lang.String var49 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(10, (dynoptic.model.AbsFSMState)var34, false, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var51 = new dynoptic.model.fifosys.gfsm.GFSMPath(var34, 10);
    boolean var53 = var34.isInitForPid(10);
    java.lang.String var54 = var34.toLongString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-85333405"+ "'", var15.equals("Part-0-85333405"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "  100 [label=\"-1\",shape=circle];\n"+ "'", var29.equals("  100 [label=\"-1\",shape=circle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "} // digraph {\n"+ "'", var30.equals("} // digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "digraph {\n"+ "'", var31.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "[]"+ "'", var46.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "  10 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var49.equals("  10 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "[]"+ "'", var54.equals("[]"));

  }

  public void test485() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test485"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.util.Iterator var38 = var0.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var41 = var40.toIntermediateString();
    boolean var42 = var40.isAccept();
    java.util.Set var44 = var40.getInitialObsForPid(10);
    boolean var45 = var0.addAll((java.util.Collection)var44);
    java.util.Set var46 = var0.getLocalEventScmStrings();
    dynoptic.model.fifosys.gfsm.GFSMState var48 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var50 = var48.getInitialObsForPid(100);
    java.lang.String var51 = var48.toLongString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var58 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var63 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var65 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var67 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var69 = var67.getInitialObsForPid(100);
    var65.removeAllObs(var69);
    dynoptic.model.fifosys.cfsm.fsm.FSM var72 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var58, var63, var69, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var74 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var76 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var78 = var76.getInitialObsForPid(100);
    var74.removeAllObs(var78);
    dynoptic.model.fifosys.gfsm.GFSMState var81 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var83 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var85 = var83.getInitialObsForPid(100);
    var81.removeAllObs(var85);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var63, var78, var85);
    var48.removeAllObs(var85);
    boolean var90 = var48.isInitForPid(100);
    java.util.Set var91 = var48.getTerminalObs();
    boolean var92 = var0.contains((java.lang.Object)var48);
    java.lang.String var93 = var0.toScmParametersString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "Part-0-475689324"+ "'", var41.equals("Part-0-475689324"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "[]"+ "'", var51.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + ""+ "'", var93.equals(""));

  }

  public void test486() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test486"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, (-1), 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var17 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var19 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var21 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var23 = var21.getInitialObsForPid(100);
    var19.removeAllObs(var23);
    dynoptic.model.fifosys.cfsm.fsm.FSM var26 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var12, var17, var23, 100);
    int var27 = var12.getPid();
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var40 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var45 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var47 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var49 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var51 = var49.getInitialObsForPid(100);
    var47.removeAllObs(var51);
    dynoptic.model.fifosys.cfsm.fsm.FSM var54 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var40, var45, var51, 100);
    var29.removeAllObs(var51);
    dynoptic.model.fifosys.cfsm.fsm.FSM var57 = new dynoptic.model.fifosys.cfsm.fsm.FSM(10, var6, var12, var51, 1);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var62 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, (-1), 1);
    dynoptic.model.fifosys.gfsm.GFSMState var64 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var66 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var68 = var66.getInitialObsForPid(100);
    var64.removeAllObs(var68);
    boolean var70 = var64.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var72 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var74 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var76 = var74.getInitialObsForPid(100);
    var72.removeAllObs(var76);
    java.util.Set var78 = var72.getTerminalObs();
    var64.removeAllObs(var78);
    dynoptic.model.automaton.EventTypeEncodings var80 = new dynoptic.model.automaton.EventTypeEncodings(var78);
    dynoptic.model.fifosys.cfsm.fsm.FSM var82 = new dynoptic.model.fifosys.cfsm.fsm.FSM(0, var12, var62, var78, 1);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var87 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var88 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var87);
    boolean var89 = var88.isTermState();
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var90 = var88.getNextState();
    boolean var91 = var12.equals((java.lang.Object)var88);
    synoptic.model.event.Event var92 = var88.getNextEvent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);

  }

  public void test487() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test487"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    boolean var40 = var11.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var57 = var55.getInitialObsForPid(100);
    var53.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var60 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var46, var51, var57, 100);
    int var61 = var60.getPid();
    java.util.Set var62 = var60.getStates();
    java.util.Set var63 = var60.getStates();
    java.util.Set var64 = var60.getAcceptStates();
    boolean var65 = var11.equals((java.lang.Object)var64);
    java.lang.String var66 = var11.toLongString();
    java.lang.String var67 = var11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "FSM_state: init[true], accept[false] id[0]"+ "'", var66.equals("FSM_state: init[true], accept[false] id[0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "0"+ "'", var67.equals("0"));

  }

  public void test488() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test488"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var4 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var6 = var4.getInitialObsForPid(100);
    var2.removeAllObs(var6);
    boolean var8 = var2.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    java.util.Set var16 = var10.getTerminalObs();
    var2.removeAllObs(var16);
    boolean var18 = var0.retainAll((java.util.Collection)var16);
    java.lang.String var19 = var0.anyEventScmQRe();
    java.lang.String var20 = var0.toScmParametersString();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var26 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var31 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var33 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var37 = var35.getInitialObsForPid(100);
    var33.removeAllObs(var37);
    dynoptic.model.fifosys.cfsm.fsm.FSM var40 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var26, var31, var37, 100);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var46 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var51 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var53 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var55 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var57 = var55.getInitialObsForPid(100);
    var53.removeAllObs(var57);
    dynoptic.model.fifosys.cfsm.fsm.FSM var60 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var46, var51, var57, 100);
    dynoptic.model.automaton.EventTypeEncodings var61 = var60.getEventTypeEncodings();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var66 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState(100, "ObsDAGNode[i_hi!_t]", false, true);
    boolean var67 = var61.equals((java.lang.Object)true);
    dynoptic.model.automaton.EncodedAutomaton var68 = var40.getEncodedAutomaton(var61);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var74 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var79 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var81 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var83 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var85 = var83.getInitialObsForPid(100);
    var81.removeAllObs(var85);
    dynoptic.model.fifosys.cfsm.fsm.FSM var88 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var74, var79, var85, 100);
    dynoptic.model.automaton.EventTypeEncodings var89 = var88.getEventTypeEncodings();
    boolean var90 = var68.equals((java.lang.Object)var88);
    java.util.Set var91 = var88.getStates();
    java.util.Set var92 = var88.getAcceptStates();
    java.lang.String var93 = var88.toString();
    dynoptic.model.alphabet.FSMAlphabet var94 = var88.getAlphabet();
    java.lang.String var95 = var94.anyEventScmQRe();
    boolean var96 = var0.retainAll((java.util.Collection)var94);
    boolean var97 = var94.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "(_)"+ "'", var19.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ""+ "'", var20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"+ "'", var93.equals("FSM[pid=-1]\n\tstates: []\n\tinits: [0]\n\taccepts: [0]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "(_)"+ "'", var95.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == true);

  }

  public void test489() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test489"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 100, 1);
    dynoptic.model.fifosys.cfsm.CFSMState var5 = new dynoptic.model.fifosys.cfsm.CFSMState(var4);
    java.util.Set var6 = var5.getTransitioningEvents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test490() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test490"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    int var20 = var19.getPid();
    java.util.Set var21 = var19.getStates();
    java.util.Set var22 = var19.getStates();
    dynoptic.model.automaton.EventTypeEncodings var23 = var19.getEventTypeEncodings();
    boolean var24 = var19.isDeterministic();
    java.util.Set var25 = var19.getAcceptStates();
    dynoptic.model.alphabet.FSMAlphabet var26 = var19.getAlphabet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test491() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test491"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(true, true, 10, (-1));
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var16 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    dynoptic.model.fifosys.cfsm.fsm.FSM var25 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var11, var16, var22, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var27 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var31 = var29.getInitialObsForPid(100);
    var27.removeAllObs(var31);
    boolean var33 = var27.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var35 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var37 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var39 = var37.getInitialObsForPid(100);
    var35.removeAllObs(var39);
    java.util.Set var41 = var35.getTerminalObs();
    var27.removeAllObs(var41);
    dynoptic.model.automaton.EventTypeEncodings var43 = new dynoptic.model.automaton.EventTypeEncodings(var41);
    dynoptic.model.fifosys.cfsm.fsm.FSM var45 = new dynoptic.model.fifosys.cfsm.fsm.FSM(0, var5, var16, var41, (-1));
    dynoptic.model.alphabet.FSMAlphabet var46 = var45.getAlphabet();
    var45.minimize();
    var45.minimize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test492() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test492"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    dynoptic.model.fifosys.gfsm.GFSMPath var37 = new dynoptic.model.fifosys.gfsm.GFSMPath(1);
    boolean var38 = dynoptic.model.fifosys.gfsm.GFSMPath.checkPathCompleteness(var37);
    boolean var39 = var11.equals((java.lang.Object)var38);
    dynoptic.model.fifosys.cfsm.CFSMState var40 = new dynoptic.model.fifosys.cfsm.CFSMState(var11);
    boolean var41 = var40.isInitial();
    boolean var43 = var40.isInitForPid(0);
    java.util.Set var44 = var40.getTransitioningEvents();
    boolean var45 = var40.isInitial();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      dynoptic.model.fifosys.cfsm.fsm.FSMState var47 = var40.getFSMState(1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test493() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test493"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var10 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var16 = var14.getInitialObsForPid(100);
    var12.removeAllObs(var16);
    dynoptic.model.fifosys.cfsm.fsm.FSM var19 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var5, var10, var16, 100);
    java.util.Set var20 = var19.getAcceptStates();
    java.util.Set var21 = var19.getInitStates();
    java.util.Set var22 = var19.getStates();
    boolean var24 = var19.equals((java.lang.Object)"Part-0-1853704944");
    var19.minimize();
    java.util.Set var26 = var19.getStates();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test494() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test494"); }


    dynoptic.model.export.DotExportFormatter var0 = new dynoptic.model.export.DotExportFormatter();
    java.lang.String var1 = var0.beginGraphString();
    java.lang.String var2 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var5 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var7 = var5.getInitialObsForPid(100);
    java.lang.String var10 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var5, true, false);
    java.lang.String var11 = var0.beginGraphString();
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var15 = var14.toIntermediateString();
    dynoptic.model.fifosys.gfsm.GFSMPath var17 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 1);
    java.lang.String var20 = var0.<dynoptic.model.AbsFSMState,synoptic.model.event.IDistEventType>nodeToString(0, (dynoptic.model.AbsFSMState)var14, false, true);
    java.util.Set var22 = var14.getTerminalObsForPid(100);
    java.lang.String var23 = var14.toLongString();
    java.util.Set var24 = var14.getInitialObservations();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var30 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    boolean var31 = var30.isAccept();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var37 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var42 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var44 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var46 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var48 = var46.getInitialObsForPid(100);
    var44.removeAllObs(var48);
    dynoptic.model.fifosys.cfsm.fsm.FSM var51 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var37, var42, var48, 100);
    int var52 = var37.getPid();
    int var53 = var37.getScmId();
    dynoptic.model.alphabet.FSMAlphabet var54 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var61 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var66 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var68 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var70 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var72 = var70.getInitialObsForPid(100);
    var68.removeAllObs(var72);
    dynoptic.model.fifosys.cfsm.fsm.FSM var75 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var61, var66, var72, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var77 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var79 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var81 = var79.getInitialObsForPid(100);
    var77.removeAllObs(var81);
    dynoptic.model.fifosys.gfsm.GFSMState var84 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var86 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var88 = var86.getInitialObsForPid(100);
    var84.removeAllObs(var88);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var66, var81, var88);
    boolean var91 = var54.retainAll((java.util.Collection)var88);
    java.lang.String var92 = var54.toString();
    dynoptic.model.fifosys.cfsm.fsm.FSM var94 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var30, var37, (java.util.Set)var54, 1);
    var14.removeAllObs((java.util.Set)var54);
    boolean var97 = var14.isAcceptForPid(100);
    dynoptic.model.fifosys.gfsm.GFSMPath var99 = new dynoptic.model.fifosys.gfsm.GFSMPath(var14, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "digraph {\n"+ "'", var1.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "digraph {\n"+ "'", var2.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"+ "'", var10.equals("  0 [label=\"[]\",shape=circle];\n  start_0 [label=\"start\",shape=plaintext];\n  start_0->0;\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "digraph {\n"+ "'", var11.equals("digraph {\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Part-0-93167271"+ "'", var15.equals("Part-0-93167271"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"+ "'", var20.equals("  0 [label=\"[]\",shape=circle,shape=doublecircle];\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "[]"+ "'", var23.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "[]"+ "'", var92.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test495() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test495"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var4 = var2.getInitialObsForPid(100);
    java.util.Set var6 = var2.getInitialObsForPid(1);
    dynoptic.model.fifosys.gfsm.GFSMState var7 = new dynoptic.model.fifosys.gfsm.GFSMState((-1), var6);
    java.lang.String var8 = var7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "[]"+ "'", var8.equals("[]"));

  }

  public void test496() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test496"); }


    dynoptic.model.fifosys.gfsm.GFSMState var1 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var3 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var5 = var3.getInitialObsForPid(100);
    var1.removeAllObs(var5);
    java.util.Set var7 = var1.getTerminalObs();
    int var8 = var1.getNumProcesses();
    java.util.Set var9 = var1.getInitialObservations();
    java.lang.String var10 = var1.toString();
    java.lang.String var11 = var1.toIntermediateString();
    boolean var13 = var1.isInitForPid(1);
    dynoptic.model.fifosys.gfsm.GFSMPath var15 = new dynoptic.model.fifosys.gfsm.GFSMPath(var1, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Part-0-1252733844"+ "'", var11.equals("Part-0-1252733844"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test497() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test497"); }


    dynoptic.model.alphabet.FSMAlphabet var0 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var7 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var12 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var14 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var16 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var18 = var16.getInitialObsForPid(100);
    var14.removeAllObs(var18);
    dynoptic.model.fifosys.cfsm.fsm.FSM var21 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var7, var12, var18, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var23 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var25 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var27 = var25.getInitialObsForPid(100);
    var23.removeAllObs(var27);
    dynoptic.model.fifosys.gfsm.GFSMState var30 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var32 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var34 = var32.getInitialObsForPid(100);
    var30.removeAllObs(var34);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var12, var27, var34);
    boolean var37 = var0.retainAll((java.util.Collection)var34);
    java.util.Iterator var38 = var0.iterator();
    dynoptic.model.fifosys.gfsm.GFSMState var40 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.lang.String var41 = var40.toIntermediateString();
    boolean var42 = var40.isAccept();
    java.util.Set var44 = var40.getInitialObsForPid(10);
    boolean var45 = var0.addAll((java.util.Collection)var44);
    java.lang.String var46 = var0.anyEventScmQRe();
    java.lang.String var47 = var0.toScmParametersString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "Part-0-1273027131"+ "'", var41.equals("Part-0-1273027131"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "(_)"+ "'", var46.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + ""+ "'", var47.equals(""));

  }

  public void test498() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test498"); }


    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var4 = dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState((-1), "hi!", true, true);
    dynoptic.model.fifosys.gfsm.GFSMPath var6 = new dynoptic.model.fifosys.gfsm.GFSMPath((-1));
    boolean var7 = var4.equals((java.lang.Object)(-1));
    dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode var8 = new dynoptic.model.fifosys.gfsm.observed.dag.ObsDAGNode(var4);
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var9 = var8.getObsState();
    java.lang.String var10 = var8.toString();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var11 = var8.getObsState();
    boolean var12 = var8.isTermState();
    boolean var13 = var8.isTermState();
    boolean var14 = var8.isTermState();
    dynoptic.model.fifosys.gfsm.observed.ObsFSMState var15 = var8.getObsState();
    boolean var16 = var15.isInitial();
    java.lang.String var17 = var15.getName();
    boolean var18 = var15.isTerminal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "ObsDAGNode[i_hi!_t]"+ "'", var10.equals("ObsDAGNode[i_hi!_t]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);

  }

  public void test499() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test499"); }


    dynoptic.model.fifosys.gfsm.GFSMState var2 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var4 = var2.getInitialObsForPid(100);
    boolean var5 = var2.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMPath var7 = new dynoptic.model.fifosys.gfsm.GFSMPath(var2, 10);
    dynoptic.model.alphabet.FSMAlphabet var8 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.gfsm.GFSMState var10 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var12 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var14 = var12.getInitialObsForPid(100);
    var10.removeAllObs(var14);
    boolean var16 = var10.isInitial();
    dynoptic.model.fifosys.gfsm.GFSMState var18 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var20 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var22 = var20.getInitialObsForPid(100);
    var18.removeAllObs(var22);
    java.util.Set var24 = var18.getTerminalObs();
    var10.removeAllObs(var24);
    boolean var26 = var8.retainAll((java.util.Collection)var24);
    java.lang.String var27 = var8.toString();
    var2.addAllObs((java.util.Set)var8);
    dynoptic.model.alphabet.FSMAlphabet var29 = new dynoptic.model.alphabet.FSMAlphabet();
    dynoptic.model.fifosys.cfsm.fsm.FSMState var36 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var41 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var43 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var45 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var47 = var45.getInitialObsForPid(100);
    var43.removeAllObs(var47);
    dynoptic.model.fifosys.cfsm.fsm.FSM var50 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var36, var41, var47, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var52 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var54 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var56 = var54.getInitialObsForPid(100);
    var52.removeAllObs(var56);
    dynoptic.model.fifosys.gfsm.GFSMState var59 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var61 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var63 = var61.getInitialObsForPid(100);
    var59.removeAllObs(var63);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var41, var56, var63);
    boolean var66 = var29.retainAll((java.util.Collection)var63);
    int var67 = var29.size();
    boolean var68 = var8.retainAll((java.util.Collection)var29);
    java.lang.String var69 = var29.toScmParametersString();
    java.lang.String var70 = var29.anyEventScmQRe();
    dynoptic.model.fifosys.gfsm.GFSMState var71 = new dynoptic.model.fifosys.gfsm.GFSMState(0, (java.util.Set)var29);
    java.lang.String var72 = var29.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[]"+ "'", var27.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + ""+ "'", var69.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "(_)"+ "'", var70.equals("(_)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "[]"+ "'", var72.equals("[]"));

  }

  public void test500() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test500"); }


    dynoptic.model.fifosys.cfsm.fsm.FSMState var6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.cfsm.fsm.FSMState var11 = new dynoptic.model.fifosys.cfsm.fsm.FSMState(false, true, 0, 0);
    dynoptic.model.fifosys.gfsm.GFSMState var13 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var15 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var17 = var15.getInitialObsForPid(100);
    var13.removeAllObs(var17);
    dynoptic.model.fifosys.cfsm.fsm.FSM var20 = new dynoptic.model.fifosys.cfsm.fsm.FSM((-1), var6, var11, var17, 100);
    dynoptic.model.fifosys.gfsm.GFSMState var22 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var24 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var26 = var24.getInitialObsForPid(100);
    var22.removeAllObs(var26);
    dynoptic.model.fifosys.gfsm.GFSMState var29 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    dynoptic.model.fifosys.gfsm.GFSMState var31 = new dynoptic.model.fifosys.gfsm.GFSMState(10);
    java.util.Set var33 = var31.getInitialObsForPid(100);
    var29.removeAllObs(var33);
    dynoptic.model.AbsFSMState.<dynoptic.model.AbsFSMState,synoptic.model.event.DistEventType>findNonPidTransitiveClosure((-1), (dynoptic.model.AbsFSMState)var11, var26, var33);
    var11.setAccept();
    java.lang.String var37 = var11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "0"+ "'", var37.equals("0"));

  }

public List<Test> getTests() {
	// TODO Auto-generated method stub
	return null;
}

public void run(TestResult arg0, List<String> arg1) {
	// TODO Auto-generated method stub
	
}

}
