org.joda.time.chrono.GJChronology.withZone : if r1 != null >>>>>>>> org.joda.time.chrono.GJChronology.withZone : r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.GJChronology.withZone : if r1 != null >>>>>>>> org.joda.time.chrono.GJChronology.withZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.GJChronology.withZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.GJChronology.withZone : if r1 != $r2
org.joda.time.chrono.GJChronology.withZone : if r1 != $r2 >>>>>>>> org.joda.time.chrono.GJChronology.withZone : return r0
org.joda.time.chrono.GJChronology.withZone : if r1 != $r2 >>>>>>>> org.joda.time.chrono.GJChronology.withZone : $r3 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant>
org.joda.time.chrono.GJChronology.withZone : $r3 = r0.<org.joda.time.chrono.GJChronology: org.joda.time.Instant iCutoverInstant> >>>>>>>> org.joda.time.chrono.GJChronology.withZone : $i0 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>()
org.joda.time.chrono.GJChronology.withZone : $i0 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: int getMinimumDaysInFirstWeek()>() >>>>>>>> org.joda.time.chrono.GJChronology.withZone : $r4 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>(r1, $r3, $i0)
org.joda.time.chrono.GJChronology.withZone : $r4 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance(org.joda.time.DateTimeZone,org.joda.time.ReadableInstant,int)>(r1, $r3, $i0) >>>>>>>> org.joda.time.chrono.GJChronology.withZone : return $r4
org.joda.time.chrono.GJChronology.withZone : r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.chrono.GJChronology.withZone : $r2 = virtualinvoke r0.<org.joda.time.chrono.GJChronology: org.joda.time.DateTimeZone getZone()>()
