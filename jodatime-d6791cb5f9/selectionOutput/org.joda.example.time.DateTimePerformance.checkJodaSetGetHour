org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : i0 = <org.joda.example.time.DateTimePerformance: int COUNT_VERY_FAST> >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : $r3 = new org.joda.time.MutableDateTime
org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : $r3 = new org.joda.time.MutableDateTime >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : $r1 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance()>()
org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : $r1 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance()>() >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : specialinvoke $r3.<org.joda.time.MutableDateTime: void <init>(org.joda.time.Chronology)>($r1)
org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : specialinvoke $r3.<org.joda.time.MutableDateTime: void <init>(org.joda.time.Chronology)>($r1) >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : r2 = $r3
org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : r2 = $r3 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : i1 = 0
org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : i1 = 0 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : $i4 = <org.joda.example.time.DateTimePerformance: int AVERAGE>
org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : $i4 = <org.joda.example.time.DateTimePerformance: int AVERAGE> >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : if i1 >= $i4
org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : if i1 >= $i4 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : specialinvoke r0.<org.joda.example.time.DateTimePerformance: void start(java.lang.String,java.lang.String)>("Joda", "setGetHour")
org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : if i1 >= $i4 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : return
org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : specialinvoke r0.<org.joda.example.time.DateTimePerformance: void start(java.lang.String,java.lang.String)>("Joda", "setGetHour") >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : i2 = 0
org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : i2 = 0 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : if i2 >= i0
org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : if i2 >= i0 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : virtualinvoke r2.<org.joda.time.MutableDateTime: void setHourOfDay(int)>(13)
org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : if i2 >= i0 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : specialinvoke r0.<org.joda.example.time.DateTimePerformance: void end(int)>(i0)
org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : specialinvoke r0.<org.joda.example.time.DateTimePerformance: void end(int)>(i0) >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : i1 = i1 + 1
org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : i1 = i1 + 1 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : goto [?= $i4 = <org.joda.example.time.DateTimePerformance: int AVERAGE>]
org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : goto [?= $i4 = <org.joda.example.time.DateTimePerformance: int AVERAGE>] >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : $i4 = <org.joda.example.time.DateTimePerformance: int AVERAGE>
org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : virtualinvoke r2.<org.joda.time.MutableDateTime: void setHourOfDay(int)>(13) >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : virtualinvoke r2.<org.joda.time.MutableDateTime: int getHourOfDay()>()
org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : virtualinvoke r2.<org.joda.time.MutableDateTime: int getHourOfDay()>() >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : if r2 != null
org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : if r2 != null >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : $r4 = <java.lang.System: java.io.PrintStream out>
org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : if r2 != null >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : i2 = i2 + 1
org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : i2 = i2 + 1 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : goto [?= (branch)]
org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : goto [?= (branch)] >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : if i2 >= i0
org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : $r4 = <java.lang.System: java.io.PrintStream out> >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Anti optimise")
org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Anti optimise") >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaSetGetHour : i2 = i2 + 1
