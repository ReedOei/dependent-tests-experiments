org.joda.time.convert.ReadableDurationConverter.setInto : r4 = (org.joda.time.ReadableDuration) r2 >>>>>>>> org.joda.time.convert.ReadableDurationConverter.setInto : r6 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r3)
org.joda.time.convert.ReadableDurationConverter.setInto : r6 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>(r3) >>>>>>>> org.joda.time.convert.ReadableDurationConverter.setInto : l0 = interfaceinvoke r4.<org.joda.time.ReadableDuration: long getMillis()>()
org.joda.time.convert.ReadableDurationConverter.setInto : l0 = interfaceinvoke r4.<org.joda.time.ReadableDuration: long getMillis()>() >>>>>>>> org.joda.time.convert.ReadableDurationConverter.setInto : r5 = virtualinvoke r6.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long)>(r1, l0)
org.joda.time.convert.ReadableDurationConverter.setInto : r5 = virtualinvoke r6.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long)>(r1, l0) >>>>>>>> org.joda.time.convert.ReadableDurationConverter.setInto : i1 = 0
org.joda.time.convert.ReadableDurationConverter.setInto : i1 = 0 >>>>>>>> org.joda.time.convert.ReadableDurationConverter.setInto : $i2 = lengthof r5
org.joda.time.convert.ReadableDurationConverter.setInto : $i2 = lengthof r5 >>>>>>>> org.joda.time.convert.ReadableDurationConverter.setInto : if i1 >= $i2
org.joda.time.convert.ReadableDurationConverter.setInto : if i1 >= $i2 >>>>>>>> org.joda.time.convert.ReadableDurationConverter.setInto : $i3 = r5[i1]
org.joda.time.convert.ReadableDurationConverter.setInto : if i1 >= $i2 >>>>>>>> org.joda.time.convert.ReadableDurationConverter.setInto : return
org.joda.time.convert.ReadableDurationConverter.setInto : $i3 = r5[i1] >>>>>>>> org.joda.time.convert.ReadableDurationConverter.setInto : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setValue(int,int)>(i1, $i3)
org.joda.time.convert.ReadableDurationConverter.setInto : interfaceinvoke r1.<org.joda.time.ReadWritablePeriod: void setValue(int,int)>(i1, $i3) >>>>>>>> org.joda.time.convert.ReadableDurationConverter.setInto : i1 = i1 + 1
org.joda.time.convert.ReadableDurationConverter.setInto : i1 = i1 + 1 >>>>>>>> org.joda.time.convert.ReadableDurationConverter.setInto : goto [?= $i2 = lengthof r5]
org.joda.time.convert.ReadableDurationConverter.setInto : goto [?= $i2 = lengthof r5] >>>>>>>> org.joda.time.convert.ReadableDurationConverter.setInto : $i2 = lengthof r5
