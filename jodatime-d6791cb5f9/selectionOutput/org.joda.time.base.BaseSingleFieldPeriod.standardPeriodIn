org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if r0 != null >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : return 0
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if r0 != null >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>()
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : l1 = 0L
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : l1 = 0L >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : i2 = 0
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : i2 = 0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $i4 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $i4 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int size()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if i2 >= $i4
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if i2 >= $i4 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : i3 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int getValue(int)>(i2)
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if i2 >= $i4 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $l7 = l1 / l0
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $l7 = l1 / l0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $i8 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l7)
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $i8 = staticinvoke <org.joda.time.field.FieldUtils: int safeToInt(long)>($l7) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : return $i8
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : i3 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int getValue(int)>(i2) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if i3 == 0
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if i3 == 0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r4 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i2)
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if i3 == 0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : i2 = i2 + 1
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : i2 = i2 + 1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : goto [?= $i4 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int size()>()]
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : goto [?= $i4 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int size()>()] >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $i4 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r4 = interfaceinvoke r0.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i2) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : r2 = virtualinvoke $r4.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r1)
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : r2 = virtualinvoke $r4.<org.joda.time.DurationFieldType: org.joda.time.DurationField getField(org.joda.time.Chronology)>(r1) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $z0 = virtualinvoke r2.<org.joda.time.DurationField: boolean isPrecise()>()
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $z0 = virtualinvoke r2.<org.joda.time.DurationField: boolean isPrecise()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if $z0 != 0
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if $z0 != 0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r5 = new java.lang.IllegalArgumentException
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : if $z0 != 0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $l5 = virtualinvoke r2.<org.joda.time.DurationField: long getUnitMillis()>()
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $l5 = virtualinvoke r2.<org.joda.time.DurationField: long getUnitMillis()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $l6 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,int)>($l5, i3)
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $l6 = staticinvoke <org.joda.time.field.FieldUtils: long safeMultiply(long,int)>($l5, i3) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : l1 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l1, $l6)
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : l1 = staticinvoke <org.joda.time.field.FieldUtils: long safeAdd(long,long)>(l1, $l6) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : i2 = i2 + 1
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r5 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r3 = new java.lang.StringBuilder
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r3 = new java.lang.StringBuilder >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot convert period to duration as ")
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot convert period to duration as ") >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r7 = virtualinvoke r2.<org.joda.time.DurationField: java.lang.String getName()>()
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r7 = virtualinvoke r2.<org.joda.time.DurationField: java.lang.String getName()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not precise in the period ")
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not precise in the period ") >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0)
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11)
org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.standardPeriodIn : throw $r5
