org.joda.time.Period.fieldDifference : if r0 == null >>>>>>>> org.joda.time.Period.fieldDifference : if r1 != null
org.joda.time.Period.fieldDifference : if r0 == null >>>>>>>> org.joda.time.Period.fieldDifference : $r4 = new java.lang.IllegalArgumentException
org.joda.time.Period.fieldDifference : $r4 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.Period.fieldDifference : specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must not be null")
org.joda.time.Period.fieldDifference : specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must not be null") >>>>>>>> org.joda.time.Period.fieldDifference : throw $r4
org.joda.time.Period.fieldDifference : if r1 != null >>>>>>>> org.joda.time.Period.fieldDifference : $r4 = new java.lang.IllegalArgumentException
org.joda.time.Period.fieldDifference : if r1 != null >>>>>>>> org.joda.time.Period.fieldDifference : $i2 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.Period.fieldDifference : $i2 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.Period.fieldDifference : $i3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.Period.fieldDifference : $i3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.Period.fieldDifference : if $i2 == $i3
org.joda.time.Period.fieldDifference : if $i2 == $i3 >>>>>>>> org.joda.time.Period.fieldDifference : $r5 = new java.lang.IllegalArgumentException
org.joda.time.Period.fieldDifference : if $i2 == $i3 >>>>>>>> org.joda.time.Period.fieldDifference : $i4 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.Period.fieldDifference : $i4 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.Period.fieldDifference : r2 = newarray (org.joda.time.DurationFieldType)[$i4]
org.joda.time.Period.fieldDifference : r2 = newarray (org.joda.time.DurationFieldType)[$i4] >>>>>>>> org.joda.time.Period.fieldDifference : $i5 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.Period.fieldDifference : $i5 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.Period.fieldDifference : r3 = newarray (int)[$i5]
org.joda.time.Period.fieldDifference : r3 = newarray (int)[$i5] >>>>>>>> org.joda.time.Period.fieldDifference : i0 = 0
org.joda.time.Period.fieldDifference : i0 = 0 >>>>>>>> org.joda.time.Period.fieldDifference : i1 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.Period.fieldDifference : i1 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.Period.fieldDifference : if i0 >= i1
org.joda.time.Period.fieldDifference : if i0 >= i1 >>>>>>>> org.joda.time.Period.fieldDifference : $r6 = interfaceinvoke r0.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0)
org.joda.time.Period.fieldDifference : if i0 >= i1 >>>>>>>> org.joda.time.Period.fieldDifference : $r14 = new org.joda.time.Period
org.joda.time.Period.fieldDifference : $r14 = new org.joda.time.Period >>>>>>>> org.joda.time.Period.fieldDifference : $r15 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>(r2)
org.joda.time.Period.fieldDifference : $r15 = staticinvoke <org.joda.time.PeriodType: org.joda.time.PeriodType forFields(org.joda.time.DurationFieldType[])>(r2) >>>>>>>> org.joda.time.Period.fieldDifference : specialinvoke $r14.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>(r3, $r15)
org.joda.time.Period.fieldDifference : specialinvoke $r14.<org.joda.time.Period: void <init>(int[],org.joda.time.PeriodType)>(r3, $r15) >>>>>>>> org.joda.time.Period.fieldDifference : return $r14
org.joda.time.Period.fieldDifference : $r6 = interfaceinvoke r0.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.Period.fieldDifference : $r7 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0)
org.joda.time.Period.fieldDifference : $r7 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.Period.fieldDifference : if $r6 == $r7
org.joda.time.Period.fieldDifference : if $r6 == $r7 >>>>>>>> org.joda.time.Period.fieldDifference : $r8 = new java.lang.IllegalArgumentException
org.joda.time.Period.fieldDifference : if $r6 == $r7 >>>>>>>> org.joda.time.Period.fieldDifference : $r9 = interfaceinvoke r0.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0)
org.joda.time.Period.fieldDifference : $r9 = interfaceinvoke r0.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.Period.fieldDifference : $r10 = virtualinvoke $r9.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>()
org.joda.time.Period.fieldDifference : $r10 = virtualinvoke $r9.<org.joda.time.DateTimeFieldType: org.joda.time.DurationFieldType getDurationType()>() >>>>>>>> org.joda.time.Period.fieldDifference : r2[i0] = $r10
org.joda.time.Period.fieldDifference : r2[i0] = $r10 >>>>>>>> org.joda.time.Period.fieldDifference : if i0 <= 0
org.joda.time.Period.fieldDifference : if i0 <= 0 >>>>>>>> org.joda.time.Period.fieldDifference : $i6 = i0 - 1
org.joda.time.Period.fieldDifference : if i0 <= 0 >>>>>>>> org.joda.time.Period.fieldDifference : $i7 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int getValue(int)>(i0)
org.joda.time.Period.fieldDifference : $i7 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int getValue(int)>(i0) >>>>>>>> org.joda.time.Period.fieldDifference : $i8 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int getValue(int)>(i0)
org.joda.time.Period.fieldDifference : $i8 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int getValue(int)>(i0) >>>>>>>> org.joda.time.Period.fieldDifference : $i9 = $i7 - $i8
org.joda.time.Period.fieldDifference : $i9 = $i7 - $i8 >>>>>>>> org.joda.time.Period.fieldDifference : r3[i0] = $i9
org.joda.time.Period.fieldDifference : r3[i0] = $i9 >>>>>>>> org.joda.time.Period.fieldDifference : i0 = i0 + 1
org.joda.time.Period.fieldDifference : i0 = i0 + 1 >>>>>>>> org.joda.time.Period.fieldDifference : goto [?= (branch)]
org.joda.time.Period.fieldDifference : goto [?= (branch)] >>>>>>>> org.joda.time.Period.fieldDifference : if i0 >= i1
org.joda.time.Period.fieldDifference : $i6 = i0 - 1 >>>>>>>> org.joda.time.Period.fieldDifference : $r11 = r2[$i6]
org.joda.time.Period.fieldDifference : $r11 = r2[$i6] >>>>>>>> org.joda.time.Period.fieldDifference : $r12 = r2[i0]
org.joda.time.Period.fieldDifference : $r12 = r2[i0] >>>>>>>> org.joda.time.Period.fieldDifference : if $r11 != $r12
org.joda.time.Period.fieldDifference : if $r11 != $r12 >>>>>>>> org.joda.time.Period.fieldDifference : $r13 = new java.lang.IllegalArgumentException
org.joda.time.Period.fieldDifference : if $r11 != $r12 >>>>>>>> org.joda.time.Period.fieldDifference : $i7 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int getValue(int)>(i0)
org.joda.time.Period.fieldDifference : $r13 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.Period.fieldDifference : specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must not have overlapping fields")
org.joda.time.Period.fieldDifference : specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must not have overlapping fields") >>>>>>>> org.joda.time.Period.fieldDifference : throw $r13
org.joda.time.Period.fieldDifference : $r8 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.Period.fieldDifference : specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must have the same set of fields")
org.joda.time.Period.fieldDifference : specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must have the same set of fields") >>>>>>>> org.joda.time.Period.fieldDifference : throw $r8
org.joda.time.Period.fieldDifference : $r5 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.Period.fieldDifference : specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must have the same set of fields")
org.joda.time.Period.fieldDifference : specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must have the same set of fields") >>>>>>>> org.joda.time.Period.fieldDifference : throw $r5
