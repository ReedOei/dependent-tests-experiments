org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i9 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i1 = $i9 - i0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i1 = $i9 - i0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r3 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $r3 == null
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $r3 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $r3 == null >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i1 > 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i1 > 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i14 = i0 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i1 > 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : c3 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c3 != 45
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c3 != 45 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : z2 = 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c3 != 45 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c3 != 43
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c3 != 43 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : z2 = 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c3 != 43 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i15 = i0 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i15 = i0 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : return $i15
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : z2 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= i16 = i1 + -1]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= i16 = i1 + -1] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i16 = i1 + -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i16 = i1 + -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i17 = i0 + 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i17 = i0 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i18 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i17, 2)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i18 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i17, 2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $i18 >= 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $i18 >= 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i19 = i17 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $i18 >= 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i4 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i17)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i4 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i17) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i4 <= 23
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i4 <= 23 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i20 = i17 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i4 <= 23 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i4 * 3600000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i4 * 3600000 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i21 = i16 + -2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i21 = i16 + -2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i17 + 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i17 + 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i21 > 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i21 > 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i21 > 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : c23 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i22)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : c23 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i22) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c23 != 58
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c23 != 58 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : z0 = 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c23 != 58 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c23 < 48
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c23 < 48 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c23 > 57
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c23 < 48 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z2 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z2 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i50 = neg i5
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z2 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i50 = i5
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i50 = i5 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i50)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i50) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>($r11)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>($r11) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : return i22
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i50 = neg i5 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i50)]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i50)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i50)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c23 > 57 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : z0 = 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c23 > 57 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z2 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : z0 = 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 2)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i6 != 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i6 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z0 != 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i6 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i6 >= 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i6 >= 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i24 = i22 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i6 >= 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i7 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i22)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i7 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i22) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i7 <= 59
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i7 <= 59 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i25 = i22 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i7 <= 59 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i26 = i7 * 60000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i26 = i7 * 60000 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i5 + $i26
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i5 + $i26 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i27 = i21 + -2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i27 = i21 + -2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i27 > 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i27 > 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i27 > 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z0 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $c28 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i22)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i29 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 2)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i29 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 2) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i29 != 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i29 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z0 != 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i29 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i29 >= 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i29 >= 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i30 = i22 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i29 >= 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i8 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i22)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i8 = staticinvoke <org.joda.time.format.FormatUtils: int parseTwoDigits(java.lang.String,int)>(r2, i22) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i8 <= 59
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i8 <= 59 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i31 = i22 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i8 <= 59 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i32 = i8 * 1000
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i32 = i8 * 1000 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i5 + $i32
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i5 + $i32 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i33 = i27 + -2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i33 = i27 + -2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i33 > 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i33 > 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i33 > 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z0 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $c34 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i22)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i37 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 3)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i37 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 3) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i37 != 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i37 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z0 != 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i37 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i37 >= 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i37 >= 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i38 = i22 ^ -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i37 >= 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i39 = i22
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i39 = i22 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $c40 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i39)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $c40 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i39) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i41 = $c40 - 48
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i41 = $c40 - 48 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i42 = $i41 * 100
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i42 = $i41 * 100 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i5 + $i42
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i5 + $i42 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i37 <= 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i37 <= 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i43 = i22
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i37 <= 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z2 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i43 = i22 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $c44 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i43)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $c44 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i43) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i45 = $c44 - 48
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i45 = $c44 - 48 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i46 = $i45 * 10
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i46 = $i45 * 10 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i5 + $i46
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i5 + $i46 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i37 <= 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i37 <= 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i47 = i22
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i37 <= 2 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z2 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i47 = i22 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $c48 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i47)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $c48 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i47) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i49 = $c48 - 48
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i49 = $c48 - 48 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i5 + $i49
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i5 = i5 + $i49 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z2 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i38 = i22 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : return $i38
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z0 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z0 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i37 >= 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z2 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $c34 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i22) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $c34 == 46
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $c34 == 46 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $c35 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i22)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $c34 == 46 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i36 = i33 + -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i36 = i33 + -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i37 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 3)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $c35 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i22) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $c35 == 44
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $c35 == 44 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $c35 == 44 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i36 = i33 + -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z2 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z2 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i31 = i22 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : return $i31
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i30 = i22 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : return $i30
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z0 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z0 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i29 >= 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z2 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $c28 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i22) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $c28 == 58
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $c28 == 58 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $c28 == 58 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i27 = i27 + -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i27 = i27 + -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i29 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 2)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z2 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z2 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i25 = i22 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : return $i25
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i24 = i22 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : return $i24
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z0 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z0 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i6 >= 2
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z2 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : z0 = 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i21 = i21 + -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i21 = i21 + -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i22 = i22 + 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= i6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 2)]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= i6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 2)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i6 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: int digitCount(java.lang.String,int,int)>(r2, i22, 2)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if z2 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i20 = i17 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : return $i20
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i19 = i17 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : return $i19
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : z2 = 1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= i16 = i1 + -1]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= i16 = i1 + -1] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : i16 = i1 + -1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i14 = i0 ^ -1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : return $i14
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r4 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i10 = virtualinvoke $r4.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i10 = virtualinvoke $r4.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $i10 != 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $i10 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i1 <= 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $i10 != 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r6 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r7 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i11 = virtualinvoke $r7.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i11 = virtualinvoke $r7.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $z1 = virtualinvoke r2.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, $r6, 0, $i11)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $z1 = virtualinvoke r2.<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>(1, i0, $r6, 0, $i11) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $z1 == 0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if $z1 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i1 > 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>($r8)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>($r8) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r9 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText>
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r9 = r0.<org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset: java.lang.String iZeroOffsetParseText> >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i12 = virtualinvoke $r9.<java.lang.String: int length()>()
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i12 = virtualinvoke $r9.<java.lang.String: int length()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i13 = i0 + $i12
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $i13 = i0 + $i12 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : return $i13
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i1 <= 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : c2 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i1 <= 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>($r5)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : virtualinvoke r1.<org.joda.time.format.DateTimeParserBucket: void setOffset(java.lang.Integer)>($r5) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : return i0
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : c2 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i0) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c2 == 45
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c2 == 45 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c2 != 43
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c2 == 45 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i1 > 1
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c2 != 43 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= (branch)]
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if c2 != 43 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)
org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder$TimeZoneOffset.parseInto : if i1 > 1
