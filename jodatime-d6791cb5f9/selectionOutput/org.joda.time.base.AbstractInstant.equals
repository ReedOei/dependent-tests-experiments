org.joda.time.base.AbstractInstant.equals : if r0 != r1 >>>>>>>> org.joda.time.base.AbstractInstant.equals : return 1
org.joda.time.base.AbstractInstant.equals : if r0 != r1 >>>>>>>> org.joda.time.base.AbstractInstant.equals : $z0 = r1 instanceof org.joda.time.ReadableInstant
org.joda.time.base.AbstractInstant.equals : $z0 = r1 instanceof org.joda.time.ReadableInstant >>>>>>>> org.joda.time.base.AbstractInstant.equals : if $z0 != 0
org.joda.time.base.AbstractInstant.equals : if $z0 != 0 >>>>>>>> org.joda.time.base.AbstractInstant.equals : return 0
org.joda.time.base.AbstractInstant.equals : if $z0 != 0 >>>>>>>> org.joda.time.base.AbstractInstant.equals : r2 = (org.joda.time.ReadableInstant) r1
org.joda.time.base.AbstractInstant.equals : r2 = (org.joda.time.ReadableInstant) r1 >>>>>>>> org.joda.time.base.AbstractInstant.equals : $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>()
org.joda.time.base.AbstractInstant.equals : $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: long getMillis()>() >>>>>>>> org.joda.time.base.AbstractInstant.equals : $l1 = interfaceinvoke r2.<org.joda.time.ReadableInstant: long getMillis()>()
org.joda.time.base.AbstractInstant.equals : $l1 = interfaceinvoke r2.<org.joda.time.ReadableInstant: long getMillis()>() >>>>>>>> org.joda.time.base.AbstractInstant.equals : $b2 = $l0 cmp $l1
org.joda.time.base.AbstractInstant.equals : $b2 = $l0 cmp $l1 >>>>>>>> org.joda.time.base.AbstractInstant.equals : if $b2 != 0
org.joda.time.base.AbstractInstant.equals : if $b2 != 0 >>>>>>>> org.joda.time.base.AbstractInstant.equals : $r3 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.base.AbstractInstant.equals : if $b2 != 0 >>>>>>>> org.joda.time.base.AbstractInstant.equals : $z2 = 0
org.joda.time.base.AbstractInstant.equals : $z2 = 0 >>>>>>>> org.joda.time.base.AbstractInstant.equals : return $z2
org.joda.time.base.AbstractInstant.equals : $r3 = virtualinvoke r0.<org.joda.time.base.AbstractInstant: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.AbstractInstant.equals : $r4 = interfaceinvoke r2.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>()
org.joda.time.base.AbstractInstant.equals : $r4 = interfaceinvoke r2.<org.joda.time.ReadableInstant: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.AbstractInstant.equals : $z1 = staticinvoke <org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>($r3, $r4)
org.joda.time.base.AbstractInstant.equals : $z1 = staticinvoke <org.joda.time.field.FieldUtils: boolean equals(java.lang.Object,java.lang.Object)>($r3, $r4) >>>>>>>> org.joda.time.base.AbstractInstant.equals : if $z1 == 0
org.joda.time.base.AbstractInstant.equals : if $z1 == 0 >>>>>>>> org.joda.time.base.AbstractInstant.equals : $z2 = 1
org.joda.time.base.AbstractInstant.equals : if $z1 == 0 >>>>>>>> org.joda.time.base.AbstractInstant.equals : $z2 = 0
org.joda.time.base.AbstractInstant.equals : $z2 = 1 >>>>>>>> org.joda.time.base.AbstractInstant.equals : goto [?= return $z2]
org.joda.time.base.AbstractInstant.equals : goto [?= return $z2] >>>>>>>> org.joda.time.base.AbstractInstant.equals : return $z2
