org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : $l5 = l0 - 3L >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : i1 = virtualinvoke r0.<org.joda.time.chrono.gj.TestJulianChronology: int gjYearFromFixed(long)>($l5)
org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : i1 = virtualinvoke r0.<org.joda.time.chrono.gj.TestJulianChronology: int gjYearFromFixed(long)>($l5) >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : if i1 != -1
org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : if i1 != -1 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : i2 = 1
org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : if i1 != -1 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : i2 = i1 + 1
org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : i2 = i1 + 1 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : $l6 = virtualinvoke r0.<org.joda.time.chrono.gj.TestJulianChronology: long fixedFromISO(int,int,int)>(i2, 1, 1)
org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : $l6 = virtualinvoke r0.<org.joda.time.chrono.gj.TestJulianChronology: long fixedFromISO(int,int,int)>(i2, 1, 1) >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : $b7 = l0 cmp $l6
org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : $b7 = l0 cmp $l6 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : if $b7 < 0
org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : if $b7 < 0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : i1 = i2
org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : if $b7 < 0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : $l8 = virtualinvoke r0.<org.joda.time.chrono.gj.TestJulianChronology: long fixedFromISO(int,int,int)>(i1, 1, 1)
org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : $l8 = virtualinvoke r0.<org.joda.time.chrono.gj.TestJulianChronology: long fixedFromISO(int,int,int)>(i1, 1, 1) >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : $l9 = l0 - $l8
org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : $l9 = l0 - $l8 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : $l10 = staticinvoke <org.joda.time.chrono.gj.TestJulianChronology: long div(long,long)>($l9, 7L)
org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : $l10 = staticinvoke <org.joda.time.chrono.gj.TestJulianChronology: long div(long,long)>($l9, 7L) >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : $l11 = $l10 + 1L
org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : $l11 = $l10 + 1L >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : i3 = (int) $l11
org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : i3 = (int) $l11 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : $l12 = staticinvoke <org.joda.time.chrono.gj.TestJulianChronology: long amod(long,long)>(l0, 7L)
org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : $l12 = staticinvoke <org.joda.time.chrono.gj.TestJulianChronology: long amod(long,long)>(l0, 7L) >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : i4 = (int) $l12
org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : i4 = (int) $l12 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : $r1 = newarray (int)[3]
org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : $r1 = newarray (int)[3] >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : $r1[0] = i1
org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : $r1[0] = i1 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : $r1[1] = i3
org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : $r1[1] = i3 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : $r1[2] = i4
org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : $r1[2] = i4 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : return $r1
org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : i1 = i2 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : $l8 = virtualinvoke r0.<org.joda.time.chrono.gj.TestJulianChronology: long fixedFromISO(int,int,int)>(i1, 1, 1)
org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : i2 = 1 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : goto [?= $l6 = virtualinvoke r0.<org.joda.time.chrono.gj.TestJulianChronology: long fixedFromISO(int,int,int)>(i2, 1, 1)]
org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : goto [?= $l6 = virtualinvoke r0.<org.joda.time.chrono.gj.TestJulianChronology: long fixedFromISO(int,int,int)>(i2, 1, 1)] >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isoFromFixed : $l6 = virtualinvoke r0.<org.joda.time.chrono.gj.TestJulianChronology: long fixedFromISO(int,int,int)>(i2, 1, 1)
