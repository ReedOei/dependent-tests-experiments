org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : i0 = <org.joda.example.time.DateTimePerformance: int COUNT_SLOW> >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : $r3 = new org.joda.time.DateTime
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : $r3 = new org.joda.time.DateTime >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : $r1 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance()>()
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : $r1 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance()>() >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : specialinvoke $r3.<org.joda.time.DateTime: void <init>(org.joda.time.Chronology)>($r1)
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : specialinvoke $r3.<org.joda.time.DateTime: void <init>(org.joda.time.Chronology)>($r1) >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : r2 = $r3
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : r2 = $r3 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : i1 = 0
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : i1 = 0 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : i2 = 0
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : i2 = 0 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : $i4 = <org.joda.example.time.DateTimePerformance: int AVERAGE>
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : $i4 = <org.joda.example.time.DateTimePerformance: int AVERAGE> >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : if i2 >= $i4
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : if i2 >= $i4 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : specialinvoke r0.<org.joda.example.time.DateTimePerformance: void start(java.lang.String,java.lang.String)>("Joda", "new()")
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : if i2 >= $i4 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : return
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : specialinvoke r0.<org.joda.example.time.DateTimePerformance: void start(java.lang.String,java.lang.String)>("Joda", "new()") >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : i3 = 0
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : i3 = 0 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : if i3 >= i0
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : if i3 >= i0 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : $r4 = new org.joda.time.DateTime
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : if i3 >= i0 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : specialinvoke r0.<org.joda.example.time.DateTimePerformance: void end(int)>(i0)
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : specialinvoke r0.<org.joda.example.time.DateTimePerformance: void end(int)>(i0) >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : i2 = i2 + 1
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : i2 = i2 + 1 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : goto [?= $i4 = <org.joda.example.time.DateTimePerformance: int AVERAGE>]
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : goto [?= $i4 = <org.joda.example.time.DateTimePerformance: int AVERAGE>] >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : $i4 = <org.joda.example.time.DateTimePerformance: int AVERAGE>
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : $r4 = new org.joda.time.DateTime >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : $r5 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance()>()
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : $r5 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance()>() >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : specialinvoke $r4.<org.joda.time.DateTime: void <init>(org.joda.time.Chronology)>($r5)
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : specialinvoke $r4.<org.joda.time.DateTime: void <init>(org.joda.time.Chronology)>($r5) >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : r6 = $r4
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : r6 = $r4 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : $i5 = i1
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : $i5 = i1 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : i1 = i1 + 1
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : i1 = i1 + 1 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : if $i5 >= 0
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : if $i5 >= 0 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : $r7 = <java.lang.System: java.io.PrintStream out>
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : if $i5 >= 0 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : i3 = i3 + 1
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : i3 = i3 + 1 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : goto [?= (branch)]
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : goto [?= (branch)] >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : if i3 >= i0
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : $r7 = <java.lang.System: java.io.PrintStream out> >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("Anti optimise")
org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("Anti optimise") >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaConstructor1 : i3 = i3 + 1
