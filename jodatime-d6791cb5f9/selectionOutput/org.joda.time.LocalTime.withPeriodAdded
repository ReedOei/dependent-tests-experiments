org.joda.time.LocalTime.withPeriodAdded : if r1 == null >>>>>>>> org.joda.time.LocalTime.withPeriodAdded : if i0 != 0
org.joda.time.LocalTime.withPeriodAdded : if r1 == null >>>>>>>> org.joda.time.LocalTime.withPeriodAdded : return r0
org.joda.time.LocalTime.withPeriodAdded : if i0 != 0 >>>>>>>> org.joda.time.LocalTime.withPeriodAdded : return r0
org.joda.time.LocalTime.withPeriodAdded : if i0 != 0 >>>>>>>> org.joda.time.LocalTime.withPeriodAdded : $r2 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalTime.withPeriodAdded : $r2 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalTime.withPeriodAdded : $l2 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>()
org.joda.time.LocalTime.withPeriodAdded : $l2 = virtualinvoke r0.<org.joda.time.LocalTime: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalTime.withPeriodAdded : l1 = virtualinvoke $r2.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r1, $l2, i0)
org.joda.time.LocalTime.withPeriodAdded : l1 = virtualinvoke $r2.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r1, $l2, i0) >>>>>>>> org.joda.time.LocalTime.withPeriodAdded : $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.LocalTime withLocalMillis(long)>(l1)
org.joda.time.LocalTime.withPeriodAdded : $r3 = virtualinvoke r0.<org.joda.time.LocalTime: org.joda.time.LocalTime withLocalMillis(long)>(l1) >>>>>>>> org.joda.time.LocalTime.withPeriodAdded : return $r3
