org.joda.time.DateTimeZone.setNameProvider : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeZone.setNameProvider : if r1 == null
org.joda.time.DateTimeZone.setNameProvider : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setNameProvider : $r2 = new org.joda.time.JodaTimePermission
org.joda.time.DateTimeZone.setNameProvider : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setNameProvider : staticinvoke <org.joda.time.DateTimeZone: void setNameProvider0(org.joda.time.tz.NameProvider)>(r0)
org.joda.time.DateTimeZone.setNameProvider : staticinvoke <org.joda.time.DateTimeZone: void setNameProvider0(org.joda.time.tz.NameProvider)>(r0) >>>>>>>> org.joda.time.DateTimeZone.setNameProvider : return
org.joda.time.DateTimeZone.setNameProvider : $r2 = new org.joda.time.JodaTimePermission >>>>>>>> org.joda.time.DateTimeZone.setNameProvider : specialinvoke $r2.<org.joda.time.JodaTimePermission: void <init>(java.lang.String)>("DateTimeZone.setNameProvider")
org.joda.time.DateTimeZone.setNameProvider : specialinvoke $r2.<org.joda.time.JodaTimePermission: void <init>(java.lang.String)>("DateTimeZone.setNameProvider") >>>>>>>> org.joda.time.DateTimeZone.setNameProvider : virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2)
org.joda.time.DateTimeZone.setNameProvider : virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2) >>>>>>>> org.joda.time.DateTimeZone.setNameProvider : staticinvoke <org.joda.time.DateTimeZone: void setNameProvider0(org.joda.time.tz.NameProvider)>(r0)
