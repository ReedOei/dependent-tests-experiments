org.joda.time.LocalDateTime.get : if r1 != null >>>>>>>> org.joda.time.LocalDateTime.get : $r2 = new java.lang.IllegalArgumentException
org.joda.time.LocalDateTime.get : if r1 != null >>>>>>>> org.joda.time.LocalDateTime.get : $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.LocalDateTime.get : $r3 = virtualinvoke r0.<org.joda.time.LocalDateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.LocalDateTime.get : $r4 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r3)
org.joda.time.LocalDateTime.get : $r4 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r3) >>>>>>>> org.joda.time.LocalDateTime.get : $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>()
org.joda.time.LocalDateTime.get : $l0 = virtualinvoke r0.<org.joda.time.LocalDateTime: long getLocalMillis()>() >>>>>>>> org.joda.time.LocalDateTime.get : $i1 = virtualinvoke $r4.<org.joda.time.DateTimeField: int get(long)>($l0)
org.joda.time.LocalDateTime.get : $i1 = virtualinvoke $r4.<org.joda.time.DateTimeField: int get(long)>($l0) >>>>>>>> org.joda.time.LocalDateTime.get : return $i1
org.joda.time.LocalDateTime.get : $r2 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.LocalDateTime.get : specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The DateTimeFieldType must not be null")
org.joda.time.LocalDateTime.get : specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The DateTimeFieldType must not be null") >>>>>>>> org.joda.time.LocalDateTime.get : throw $r2
