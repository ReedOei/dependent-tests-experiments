org.joda.time.base.AbstractInterval.toInterval : $r1 = new org.joda.time.Interval >>>>>>>> org.joda.time.base.AbstractInterval.toInterval : $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getStartMillis()>()
org.joda.time.base.AbstractInterval.toInterval : $l0 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getStartMillis()>() >>>>>>>> org.joda.time.base.AbstractInterval.toInterval : $l1 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getEndMillis()>()
org.joda.time.base.AbstractInterval.toInterval : $l1 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: long getEndMillis()>() >>>>>>>> org.joda.time.base.AbstractInterval.toInterval : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: org.joda.time.Chronology getChronology()>()
org.joda.time.base.AbstractInterval.toInterval : $r2 = virtualinvoke r0.<org.joda.time.base.AbstractInterval: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.AbstractInterval.toInterval : specialinvoke $r1.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>($l0, $l1, $r2)
org.joda.time.base.AbstractInterval.toInterval : specialinvoke $r1.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>($l0, $l1, $r2) >>>>>>>> org.joda.time.base.AbstractInterval.toInterval : return $r1
