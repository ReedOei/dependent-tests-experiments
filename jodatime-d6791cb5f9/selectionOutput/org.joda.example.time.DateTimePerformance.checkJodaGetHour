org.joda.example.time.DateTimePerformance.checkJodaGetHour : i0 = <org.joda.example.time.DateTimePerformance: int COUNT_VERY_FAST> >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaGetHour : $r3 = new org.joda.time.DateTime
org.joda.example.time.DateTimePerformance.checkJodaGetHour : $r3 = new org.joda.time.DateTime >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaGetHour : $r1 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance()>()
org.joda.example.time.DateTimePerformance.checkJodaGetHour : $r1 = staticinvoke <org.joda.time.chrono.GJChronology: org.joda.time.chrono.GJChronology getInstance()>() >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaGetHour : specialinvoke $r3.<org.joda.time.DateTime: void <init>(org.joda.time.Chronology)>($r1)
org.joda.example.time.DateTimePerformance.checkJodaGetHour : specialinvoke $r3.<org.joda.time.DateTime: void <init>(org.joda.time.Chronology)>($r1) >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaGetHour : r2 = $r3
org.joda.example.time.DateTimePerformance.checkJodaGetHour : r2 = $r3 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaGetHour : i1 = 0
org.joda.example.time.DateTimePerformance.checkJodaGetHour : i1 = 0 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaGetHour : $i4 = <org.joda.example.time.DateTimePerformance: int AVERAGE>
org.joda.example.time.DateTimePerformance.checkJodaGetHour : $i4 = <org.joda.example.time.DateTimePerformance: int AVERAGE> >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaGetHour : if i1 >= $i4
org.joda.example.time.DateTimePerformance.checkJodaGetHour : if i1 >= $i4 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaGetHour : specialinvoke r0.<org.joda.example.time.DateTimePerformance: void start(java.lang.String,java.lang.String)>("Joda", "getHour")
org.joda.example.time.DateTimePerformance.checkJodaGetHour : if i1 >= $i4 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaGetHour : return
org.joda.example.time.DateTimePerformance.checkJodaGetHour : specialinvoke r0.<org.joda.example.time.DateTimePerformance: void start(java.lang.String,java.lang.String)>("Joda", "getHour") >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaGetHour : i2 = 0
org.joda.example.time.DateTimePerformance.checkJodaGetHour : i2 = 0 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaGetHour : if i2 >= i0
org.joda.example.time.DateTimePerformance.checkJodaGetHour : if i2 >= i0 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaGetHour : i3 = virtualinvoke r2.<org.joda.time.DateTime: int getHourOfDay()>()
org.joda.example.time.DateTimePerformance.checkJodaGetHour : if i2 >= i0 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaGetHour : specialinvoke r0.<org.joda.example.time.DateTimePerformance: void end(int)>(i0)
org.joda.example.time.DateTimePerformance.checkJodaGetHour : specialinvoke r0.<org.joda.example.time.DateTimePerformance: void end(int)>(i0) >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaGetHour : i1 = i1 + 1
org.joda.example.time.DateTimePerformance.checkJodaGetHour : i1 = i1 + 1 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaGetHour : goto [?= $i4 = <org.joda.example.time.DateTimePerformance: int AVERAGE>]
org.joda.example.time.DateTimePerformance.checkJodaGetHour : goto [?= $i4 = <org.joda.example.time.DateTimePerformance: int AVERAGE>] >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaGetHour : $i4 = <org.joda.example.time.DateTimePerformance: int AVERAGE>
org.joda.example.time.DateTimePerformance.checkJodaGetHour : i3 = virtualinvoke r2.<org.joda.time.DateTime: int getHourOfDay()>() >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaGetHour : if i3 != -1
org.joda.example.time.DateTimePerformance.checkJodaGetHour : if i3 != -1 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaGetHour : $r4 = <java.lang.System: java.io.PrintStream out>
org.joda.example.time.DateTimePerformance.checkJodaGetHour : if i3 != -1 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaGetHour : i2 = i2 + 1
org.joda.example.time.DateTimePerformance.checkJodaGetHour : i2 = i2 + 1 >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaGetHour : goto [?= (branch)]
org.joda.example.time.DateTimePerformance.checkJodaGetHour : goto [?= (branch)] >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaGetHour : if i2 >= i0
org.joda.example.time.DateTimePerformance.checkJodaGetHour : $r4 = <java.lang.System: java.io.PrintStream out> >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaGetHour : virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Anti optimise")
org.joda.example.time.DateTimePerformance.checkJodaGetHour : virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Anti optimise") >>>>>>>> org.joda.example.time.DateTimePerformance.checkJodaGetHour : i2 = i2 + 1
