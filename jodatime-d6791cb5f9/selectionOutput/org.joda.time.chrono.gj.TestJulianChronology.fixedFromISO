org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : if i0 != 0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : $r2 = new java.lang.IllegalArgumentException
org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : if i0 != 0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : if i0 != 1
org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : if i0 != 1 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : i3 = -1
org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : if i0 != 1 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : i3 = i0 + -1
org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : i3 = i0 + -1 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : $l4 = virtualinvoke r0.<org.joda.time.chrono.gj.TestJulianChronology: long nthWeekday(int,int,int,int,int)>(i1, 0, i3, 12, 28)
org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : $l4 = virtualinvoke r0.<org.joda.time.chrono.gj.TestJulianChronology: long nthWeekday(int,int,int,int,int)>(i1, 0, i3, 12, 28) >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : $l5 = (long) i2
org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : $l5 = (long) i2 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : $l6 = $l4 + $l5
org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : $l6 = $l4 + $l5 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : return $l6
org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : i3 = -1 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : goto [?= $l4 = virtualinvoke r0.<org.joda.time.chrono.gj.TestJulianChronology: long nthWeekday(int,int,int,int,int)>(i1, 0, i3, 12, 28)]
org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : goto [?= $l4 = virtualinvoke r0.<org.joda.time.chrono.gj.TestJulianChronology: long nthWeekday(int,int,int,int,int)>(i1, 0, i3, 12, 28)] >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : $l4 = virtualinvoke r0.<org.joda.time.chrono.gj.TestJulianChronology: long nthWeekday(int,int,int,int,int)>(i1, 0, i3, 12, 28)
org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : $r2 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : $r1 = new java.lang.StringBuilder
org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : $r1 = new java.lang.StringBuilder >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal weekyear: ")
org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal weekyear: ") >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5)
org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5) >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.fixedFromISO : throw $r2
