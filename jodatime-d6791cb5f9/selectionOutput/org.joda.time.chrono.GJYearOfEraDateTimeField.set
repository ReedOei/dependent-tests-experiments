org.joda.time.chrono.GJYearOfEraDateTimeField.set : $i2 = virtualinvoke r0.<org.joda.time.chrono.GJYearOfEraDateTimeField: int getMaximumValue()>() >>>>>>>> org.joda.time.chrono.GJYearOfEraDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, 1, $i2)
org.joda.time.chrono.GJYearOfEraDateTimeField.set : staticinvoke <org.joda.time.field.FieldUtils: void verifyValueBounds(org.joda.time.DateTimeField,int,int,int)>(r0, i1, 1, $i2) >>>>>>>> org.joda.time.chrono.GJYearOfEraDateTimeField.set : $r1 = r0.<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.chrono.BasicChronology iChronology>
org.joda.time.chrono.GJYearOfEraDateTimeField.set : $r1 = r0.<org.joda.time.chrono.GJYearOfEraDateTimeField: org.joda.time.chrono.BasicChronology iChronology> >>>>>>>> org.joda.time.chrono.GJYearOfEraDateTimeField.set : $i3 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0)
org.joda.time.chrono.GJYearOfEraDateTimeField.set : $i3 = virtualinvoke $r1.<org.joda.time.chrono.BasicChronology: int getYear(long)>(l0) >>>>>>>> org.joda.time.chrono.GJYearOfEraDateTimeField.set : if $i3 > 0
org.joda.time.chrono.GJYearOfEraDateTimeField.set : if $i3 > 0 >>>>>>>> org.joda.time.chrono.GJYearOfEraDateTimeField.set : i1 = 1 - i1
org.joda.time.chrono.GJYearOfEraDateTimeField.set : if $i3 > 0 >>>>>>>> org.joda.time.chrono.GJYearOfEraDateTimeField.set : $l4 = specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>(l0, i1)
org.joda.time.chrono.GJYearOfEraDateTimeField.set : $l4 = specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>(l0, i1) >>>>>>>> org.joda.time.chrono.GJYearOfEraDateTimeField.set : return $l4
org.joda.time.chrono.GJYearOfEraDateTimeField.set : i1 = 1 - i1 >>>>>>>> org.joda.time.chrono.GJYearOfEraDateTimeField.set : $l4 = specialinvoke r0.<org.joda.time.field.DecoratedDateTimeField: long set(long,int)>(l0, i1)
