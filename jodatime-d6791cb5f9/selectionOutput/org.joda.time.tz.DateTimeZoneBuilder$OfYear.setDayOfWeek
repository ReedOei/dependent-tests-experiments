org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $r2 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>(l0)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : i1 = virtualinvoke $r2.<org.joda.time.DateTimeField: int get(long)>(l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: int iDayOfWeek> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : i2 = $i3 - i1
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : i2 = $i3 - i1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if i2 == 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if i2 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $z0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance>
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if i2 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : return l0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $z0 = r0.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean iAdvance> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if i2 >= 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if i2 <= 0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if i2 <= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : i2 = i2 + -7
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if i2 <= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : l0 = virtualinvoke $r3.<org.joda.time.DateTimeField: long add(long,int)>(l0, i2)
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : l0 = virtualinvoke $r3.<org.joda.time.DateTimeField: long add(long,int)>(l0, i2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : return l0
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : i2 = i2 + -7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if i2 >= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : i2 = i2 + 7
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : if i2 >= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : i2 = i2 + 7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : goto [?= $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()]
org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : goto [?= $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$OfYear.setDayOfWeek : $r3 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField dayOfWeek()>()
