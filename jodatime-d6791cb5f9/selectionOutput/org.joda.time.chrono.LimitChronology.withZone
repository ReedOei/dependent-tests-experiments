org.joda.time.chrono.LimitChronology.withZone : if r1 != null >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>()
org.joda.time.chrono.LimitChronology.withZone : if r1 != null >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : $r5 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.LimitChronology.withZone : $r5 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : if r1 != $r5
org.joda.time.chrono.LimitChronology.withZone : if r1 != $r5 >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : return r0
org.joda.time.chrono.LimitChronology.withZone : if r1 != $r5 >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : $r6 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.LimitChronology.withZone : $r6 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : if r1 != $r6
org.joda.time.chrono.LimitChronology.withZone : if r1 != $r6 >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : $r7 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology iWithUTC>
org.joda.time.chrono.LimitChronology.withZone : if r1 != $r6 >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : r2 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iLowerLimit>
org.joda.time.chrono.LimitChronology.withZone : r2 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iLowerLimit> >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : if r2 == null
org.joda.time.chrono.LimitChronology.withZone : if r2 == null >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : r3 = virtualinvoke r2.<org.joda.time.DateTime: org.joda.time.MutableDateTime toMutableDateTime()>()
org.joda.time.chrono.LimitChronology.withZone : if r2 == null >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : r9 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iUpperLimit>
org.joda.time.chrono.LimitChronology.withZone : r9 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iUpperLimit> >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : if r9 == null
org.joda.time.chrono.LimitChronology.withZone : if r9 == null >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : r4 = virtualinvoke r9.<org.joda.time.DateTime: org.joda.time.MutableDateTime toMutableDateTime()>()
org.joda.time.chrono.LimitChronology.withZone : if r9 == null >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : $r10 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.LimitChronology.withZone : $r10 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : $r11 = virtualinvoke $r10.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r1)
org.joda.time.chrono.LimitChronology.withZone : $r11 = virtualinvoke $r10.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r1) >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : r12 = staticinvoke <org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>($r11, r2, r9)
org.joda.time.chrono.LimitChronology.withZone : r12 = staticinvoke <org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology getInstance(org.joda.time.Chronology,org.joda.time.ReadableDateTime,org.joda.time.ReadableDateTime)>($r11, r2, r9) >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : $r13 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.chrono.LimitChronology.withZone : $r13 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : if r1 != $r13
org.joda.time.chrono.LimitChronology.withZone : if r1 != $r13 >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : r0.<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology iWithUTC> = r12
org.joda.time.chrono.LimitChronology.withZone : if r1 != $r13 >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : return r12
org.joda.time.chrono.LimitChronology.withZone : r0.<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology iWithUTC> = r12 >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : return r12
org.joda.time.chrono.LimitChronology.withZone : r4 = virtualinvoke r9.<org.joda.time.DateTime: org.joda.time.MutableDateTime toMutableDateTime()>() >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : virtualinvoke r4.<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>(r1)
org.joda.time.chrono.LimitChronology.withZone : virtualinvoke r4.<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>(r1) >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : r9 = virtualinvoke r4.<org.joda.time.MutableDateTime: org.joda.time.DateTime toDateTime()>()
org.joda.time.chrono.LimitChronology.withZone : r9 = virtualinvoke r4.<org.joda.time.MutableDateTime: org.joda.time.DateTime toDateTime()>() >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : $r10 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.Chronology getBase()>()
org.joda.time.chrono.LimitChronology.withZone : r3 = virtualinvoke r2.<org.joda.time.DateTime: org.joda.time.MutableDateTime toMutableDateTime()>() >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : virtualinvoke r3.<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>(r1)
org.joda.time.chrono.LimitChronology.withZone : virtualinvoke r3.<org.joda.time.MutableDateTime: void setZoneRetainFields(org.joda.time.DateTimeZone)>(r1) >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : r2 = virtualinvoke r3.<org.joda.time.MutableDateTime: org.joda.time.DateTime toDateTime()>()
org.joda.time.chrono.LimitChronology.withZone : r2 = virtualinvoke r3.<org.joda.time.MutableDateTime: org.joda.time.DateTime toDateTime()>() >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : r9 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iUpperLimit>
org.joda.time.chrono.LimitChronology.withZone : $r7 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology iWithUTC> >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : if $r7 == null
org.joda.time.chrono.LimitChronology.withZone : if $r7 == null >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : $r8 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology iWithUTC>
org.joda.time.chrono.LimitChronology.withZone : if $r7 == null >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : r2 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTime iLowerLimit>
org.joda.time.chrono.LimitChronology.withZone : $r8 = r0.<org.joda.time.chrono.LimitChronology: org.joda.time.chrono.LimitChronology iWithUTC> >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : return $r8
org.joda.time.chrono.LimitChronology.withZone : r1 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone getDefault()>() >>>>>>>> org.joda.time.chrono.LimitChronology.withZone : $r5 = virtualinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DateTimeZone getZone()>()
