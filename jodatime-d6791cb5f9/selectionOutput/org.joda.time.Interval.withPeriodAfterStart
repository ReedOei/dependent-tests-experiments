org.joda.time.Interval.withPeriodAfterStart : if r1 != null >>>>>>>> org.joda.time.Interval.withPeriodAfterStart : $r3 = virtualinvoke r0.<org.joda.time.Interval: org.joda.time.Interval withDurationAfterStart(org.joda.time.ReadableDuration)>(null)
org.joda.time.Interval.withPeriodAfterStart : if r1 != null >>>>>>>> org.joda.time.Interval.withPeriodAfterStart : r2 = virtualinvoke r0.<org.joda.time.Interval: org.joda.time.Chronology getChronology()>()
org.joda.time.Interval.withPeriodAfterStart : r2 = virtualinvoke r0.<org.joda.time.Interval: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.Interval.withPeriodAfterStart : l0 = virtualinvoke r0.<org.joda.time.Interval: long getStartMillis()>()
org.joda.time.Interval.withPeriodAfterStart : l0 = virtualinvoke r0.<org.joda.time.Interval: long getStartMillis()>() >>>>>>>> org.joda.time.Interval.withPeriodAfterStart : l1 = virtualinvoke r2.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r1, l0, 1)
org.joda.time.Interval.withPeriodAfterStart : l1 = virtualinvoke r2.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r1, l0, 1) >>>>>>>> org.joda.time.Interval.withPeriodAfterStart : $r4 = new org.joda.time.Interval
org.joda.time.Interval.withPeriodAfterStart : $r4 = new org.joda.time.Interval >>>>>>>> org.joda.time.Interval.withPeriodAfterStart : specialinvoke $r4.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>(l0, l1, r2)
org.joda.time.Interval.withPeriodAfterStart : specialinvoke $r4.<org.joda.time.Interval: void <init>(long,long,org.joda.time.Chronology)>(l0, l1, r2) >>>>>>>> org.joda.time.Interval.withPeriodAfterStart : return $r4
org.joda.time.Interval.withPeriodAfterStart : $r3 = virtualinvoke r0.<org.joda.time.Interval: org.joda.time.Interval withDurationAfterStart(org.joda.time.ReadableDuration)>(null) >>>>>>>> org.joda.time.Interval.withPeriodAfterStart : return $r3
