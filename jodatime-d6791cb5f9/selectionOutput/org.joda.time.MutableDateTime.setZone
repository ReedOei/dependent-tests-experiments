org.joda.time.MutableDateTime.setZone : r3 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.DateTimeZone getZone(org.joda.time.DateTimeZone)>(r1) >>>>>>>> org.joda.time.MutableDateTime.setZone : r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.MutableDateTime.setZone : r2 = virtualinvoke r0.<org.joda.time.MutableDateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.MutableDateTime.setZone : $r4 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.MutableDateTime.setZone : $r4 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.MutableDateTime.setZone : if $r4 == r3
org.joda.time.MutableDateTime.setZone : if $r4 == r3 >>>>>>>> org.joda.time.MutableDateTime.setZone : $r5 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r3)
org.joda.time.MutableDateTime.setZone : if $r4 == r3 >>>>>>>> org.joda.time.MutableDateTime.setZone : return
org.joda.time.MutableDateTime.setZone : $r5 = virtualinvoke r2.<org.joda.time.Chronology: org.joda.time.Chronology withZone(org.joda.time.DateTimeZone)>(r3) >>>>>>>> org.joda.time.MutableDateTime.setZone : virtualinvoke r0.<org.joda.time.MutableDateTime: void setChronology(org.joda.time.Chronology)>($r5)
org.joda.time.MutableDateTime.setZone : virtualinvoke r0.<org.joda.time.MutableDateTime: void setChronology(org.joda.time.Chronology)>($r5) >>>>>>>> org.joda.time.MutableDateTime.setZone : return
