org.joda.time.chrono.GJChronology$CutoverField.add : if i1 != 0 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.add : return r2
org.joda.time.chrono.GJChronology$CutoverField.add : if i1 != 0 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.add : $z0 = staticinvoke <org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>(r1)
org.joda.time.chrono.GJChronology$CutoverField.add : $z0 = staticinvoke <org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>(r1) >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.add : if $z0 == 0
org.joda.time.chrono.GJChronology$CutoverField.add : if $z0 == 0 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.add : l2 = 0L
org.joda.time.chrono.GJChronology$CutoverField.add : if $z0 == 0 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.add : $r8 = specialinvoke r0.<org.joda.time.field.BaseDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r1, i0, r2, i1)
org.joda.time.chrono.GJChronology$CutoverField.add : $r8 = specialinvoke r0.<org.joda.time.field.BaseDateTimeField: int[] add(org.joda.time.ReadablePartial,int,int[],int)>(r1, i0, r2, i1) >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.add : return $r8
org.joda.time.chrono.GJChronology$CutoverField.add : l2 = 0L >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.add : i3 = 0
org.joda.time.chrono.GJChronology$CutoverField.add : i3 = 0 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.add : i4 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.chrono.GJChronology$CutoverField.add : i4 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.add : if i3 >= i4
org.joda.time.chrono.GJChronology$CutoverField.add : if i3 >= i4 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.add : $r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i3)
org.joda.time.chrono.GJChronology$CutoverField.add : if i3 >= i4 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.add : l6 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>(l2, i1)
org.joda.time.chrono.GJChronology$CutoverField.add : l6 = virtualinvoke r0.<org.joda.time.chrono.GJChronology$CutoverField: long add(long,int)>(l2, i1) >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.add : $r6 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>
org.joda.time.chrono.GJChronology$CutoverField.add : $r6 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0> >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.add : $r7 = virtualinvoke $r6.<org.joda.time.chrono.GJChronology: int[] get(org.joda.time.ReadablePartial,long)>(r1, l6)
org.joda.time.chrono.GJChronology$CutoverField.add : $r7 = virtualinvoke $r6.<org.joda.time.chrono.GJChronology: int[] get(org.joda.time.ReadablePartial,long)>(r1, l6) >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.add : return $r7
org.joda.time.chrono.GJChronology$CutoverField.add : $r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i3) >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.add : $r4 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0>
org.joda.time.chrono.GJChronology$CutoverField.add : $r4 = r0.<org.joda.time.chrono.GJChronology$CutoverField: org.joda.time.chrono.GJChronology this$0> >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.add : $r5 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r4)
org.joda.time.chrono.GJChronology$CutoverField.add : $r5 = virtualinvoke $r3.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r4) >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.add : $i5 = r2[i3]
org.joda.time.chrono.GJChronology$CutoverField.add : $i5 = r2[i3] >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.add : l2 = virtualinvoke $r5.<org.joda.time.DateTimeField: long set(long,int)>(l2, $i5)
org.joda.time.chrono.GJChronology$CutoverField.add : l2 = virtualinvoke $r5.<org.joda.time.DateTimeField: long set(long,int)>(l2, $i5) >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.add : i3 = i3 + 1
org.joda.time.chrono.GJChronology$CutoverField.add : i3 = i3 + 1 >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.add : goto [?= (branch)]
org.joda.time.chrono.GJChronology$CutoverField.add : goto [?= (branch)] >>>>>>>> org.joda.time.chrono.GJChronology$CutoverField.add : if i3 >= i4
