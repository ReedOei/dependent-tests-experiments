org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $i0 = virtualinvoke $r4.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : if $i0 != 2
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : if $i0 != 2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : if $i0 != 2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : return null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(0)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : r2 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r6
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : r2 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r6 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r7 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(1)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r8 = virtualinvoke $r7.<java.util.ArrayList: java.lang.Object get(int)>(1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : r3 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r8
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : r3 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $i1 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $i1 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : if $i1 != 2147483647
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : if $i1 != 2147483647 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $i2 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : if $i1 != 2147483647 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : return null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $i2 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Rule: int getToYear()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : if $i2 != 2147483647
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : if $i2 != 2147483647 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r9 = new org.joda.time.tz.DateTimeZoneBuilder$DSTZone
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : if $i2 != 2147483647 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : return null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r9 = new org.joda.time.tz.DateTimeZoneBuilder$DSTZone >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $i3 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r10 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r10 = r2.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r11 = r3.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : $r11 = r3.<org.joda.time.tz.DateTimeZoneBuilder$Rule: org.joda.time.tz.DateTimeZoneBuilder$Recurrence iRecurrence> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : specialinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>(r1, $i3, $r10, $r11)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : specialinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: void <init>(java.lang.String,int,org.joda.time.tz.DateTimeZoneBuilder$Recurrence,org.joda.time.tz.DateTimeZoneBuilder$Recurrence)>(r1, $i3, $r10, $r11) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.buildTailZone : return $r9
