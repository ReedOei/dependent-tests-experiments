org.joda.time.format.ISODateTimeFormat.forFields : if r0 == null >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $i1 = interfaceinvoke r0.<java.util.Collection: int size()>()
org.joda.time.format.ISODateTimeFormat.forFields : if r0 == null >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r4 = new java.lang.IllegalArgumentException
org.joda.time.format.ISODateTimeFormat.forFields : $r4 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The fields must not be null or empty")
org.joda.time.format.ISODateTimeFormat.forFields : specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The fields must not be null or empty") >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : throw $r4
org.joda.time.format.ISODateTimeFormat.forFields : $i1 = interfaceinvoke r0.<java.util.Collection: int size()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if $i1 != 0
org.joda.time.format.ISODateTimeFormat.forFields : if $i1 != 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r4 = new java.lang.IllegalArgumentException
org.joda.time.format.ISODateTimeFormat.forFields : if $i1 != 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r5 = new java.util.HashSet
org.joda.time.format.ISODateTimeFormat.forFields : $r5 = new java.util.HashSet >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : specialinvoke $r5.<java.util.HashSet: void <init>(java.util.Collection)>(r0)
org.joda.time.format.ISODateTimeFormat.forFields : specialinvoke $r5.<java.util.HashSet: void <init>(java.util.Collection)>(r0) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : r1 = $r5
org.joda.time.format.ISODateTimeFormat.forFields : r1 = $r5 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : i0 = interfaceinvoke r1.<java.util.Set: int size()>()
org.joda.time.format.ISODateTimeFormat.forFields : i0 = interfaceinvoke r1.<java.util.Set: int size()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : z2 = 0
org.joda.time.format.ISODateTimeFormat.forFields : z2 = 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r6 = new org.joda.time.format.DateTimeFormatterBuilder
org.joda.time.format.ISODateTimeFormat.forFields : $r6 = new org.joda.time.format.DateTimeFormatterBuilder >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : specialinvoke $r6.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>()
org.joda.time.format.ISODateTimeFormat.forFields : specialinvoke $r6.<org.joda.time.format.DateTimeFormatterBuilder: void <init>()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : r2 = $r6
org.joda.time.format.ISODateTimeFormat.forFields : r2 = $r6 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r7 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>()
org.joda.time.format.ISODateTimeFormat.forFields : $r7 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType monthOfYear()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $z4 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r7)
org.joda.time.format.ISODateTimeFormat.forFields : $z4 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r7) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if $z4 == 0
org.joda.time.format.ISODateTimeFormat.forFields : if $z4 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : z2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>(r2, r1, z0, z1)
org.joda.time.format.ISODateTimeFormat.forFields : if $z4 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r8 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>()
org.joda.time.format.ISODateTimeFormat.forFields : $r8 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfYear()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $z5 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r8)
org.joda.time.format.ISODateTimeFormat.forFields : $z5 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r8) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if $z5 == 0
org.joda.time.format.ISODateTimeFormat.forFields : if $z5 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : z2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>(r2, r1, z0, z1)
org.joda.time.format.ISODateTimeFormat.forFields : if $z5 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r9 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>()
org.joda.time.format.ISODateTimeFormat.forFields : $r9 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekOfWeekyear()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $z6 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r9)
org.joda.time.format.ISODateTimeFormat.forFields : $z6 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r9) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if $z6 == 0
org.joda.time.format.ISODateTimeFormat.forFields : if $z6 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : z2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>(r2, r1, z0, z1)
org.joda.time.format.ISODateTimeFormat.forFields : if $z6 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r10 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>()
org.joda.time.format.ISODateTimeFormat.forFields : $r10 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfMonth()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $z7 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r10)
org.joda.time.format.ISODateTimeFormat.forFields : $z7 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r10) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if $z7 == 0
org.joda.time.format.ISODateTimeFormat.forFields : if $z7 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : z2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>(r2, r1, z0, z1)
org.joda.time.format.ISODateTimeFormat.forFields : if $z7 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r11 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>()
org.joda.time.format.ISODateTimeFormat.forFields : $r11 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType dayOfWeek()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $z8 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r11)
org.joda.time.format.ISODateTimeFormat.forFields : $z8 = interfaceinvoke r1.<java.util.Set: boolean contains(java.lang.Object)>($r11) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if $z8 == 0
org.joda.time.format.ISODateTimeFormat.forFields : if $z8 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : z2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>(r2, r1, z0, z1)
org.joda.time.format.ISODateTimeFormat.forFields : if $z8 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r12 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>()
org.joda.time.format.ISODateTimeFormat.forFields : $r12 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType year()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $z9 = interfaceinvoke r1.<java.util.Set: boolean remove(java.lang.Object)>($r12)
org.joda.time.format.ISODateTimeFormat.forFields : $z9 = interfaceinvoke r1.<java.util.Set: boolean remove(java.lang.Object)>($r12) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if $z9 == 0
org.joda.time.format.ISODateTimeFormat.forFields : if $z9 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r13 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearElement()>()
org.joda.time.format.ISODateTimeFormat.forFields : if $z9 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r15 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>()
org.joda.time.format.ISODateTimeFormat.forFields : $r15 = staticinvoke <org.joda.time.DateTimeFieldType: org.joda.time.DateTimeFieldType weekyear()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $z10 = interfaceinvoke r1.<java.util.Set: boolean remove(java.lang.Object)>($r15)
org.joda.time.format.ISODateTimeFormat.forFields : $z10 = interfaceinvoke r1.<java.util.Set: boolean remove(java.lang.Object)>($r15) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if $z10 == 0
org.joda.time.format.ISODateTimeFormat.forFields : if $z10 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r16 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekyearElement()>()
org.joda.time.format.ISODateTimeFormat.forFields : if $z10 == 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $i2 = interfaceinvoke r1.<java.util.Set: int size()>()
org.joda.time.format.ISODateTimeFormat.forFields : $i2 = interfaceinvoke r1.<java.util.Set: int size()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if $i2 >= i0
org.joda.time.format.ISODateTimeFormat.forFields : if $i2 >= i0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $z11 = 1
org.joda.time.format.ISODateTimeFormat.forFields : if $i2 >= i0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $z11 = 0
org.joda.time.format.ISODateTimeFormat.forFields : $z11 = 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : z3 = $z11
org.joda.time.format.ISODateTimeFormat.forFields : z3 = $z11 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : staticinvoke <org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>(r2, r1, z0, z1, z2, z3)
org.joda.time.format.ISODateTimeFormat.forFields : staticinvoke <org.joda.time.format.ISODateTimeFormat: void time(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean,boolean,boolean)>(r2, r1, z0, z1, z2, z3) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $z12 = virtualinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: boolean canBuildFormatter()>()
org.joda.time.format.ISODateTimeFormat.forFields : $z12 = virtualinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: boolean canBuildFormatter()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : if $z12 != 0
org.joda.time.format.ISODateTimeFormat.forFields : if $z12 != 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r18 = new java.lang.IllegalArgumentException
org.joda.time.format.ISODateTimeFormat.forFields : if $z12 != 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : interfaceinvoke r0.<java.util.Collection: boolean retainAll(java.util.Collection)>(r1)
org.joda.time.format.ISODateTimeFormat.forFields : if $z12 != 0 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r23 := @caughtexception
org.joda.time.format.ISODateTimeFormat.forFields : r3 = $r23 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r24 = virtualinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>()
org.joda.time.format.ISODateTimeFormat.forFields : $r24 = virtualinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : return $r24
org.joda.time.format.ISODateTimeFormat.forFields : interfaceinvoke r0.<java.util.Collection: boolean retainAll(java.util.Collection)>(r1) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : goto [?= $r24 = virtualinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>()]
org.joda.time.format.ISODateTimeFormat.forFields : interfaceinvoke r0.<java.util.Collection: boolean retainAll(java.util.Collection)>(r1) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r23 := @caughtexception
org.joda.time.format.ISODateTimeFormat.forFields : goto [?= $r24 = virtualinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>()] >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r24 = virtualinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatter toFormatter()>()
org.joda.time.format.ISODateTimeFormat.forFields : $r18 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r19 = new java.lang.StringBuilder
org.joda.time.format.ISODateTimeFormat.forFields : $r19 = new java.lang.StringBuilder >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : specialinvoke $r19.<java.lang.StringBuilder: void <init>()>()
org.joda.time.format.ISODateTimeFormat.forFields : specialinvoke $r19.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No valid format for fields: ")
org.joda.time.format.ISODateTimeFormat.forFields : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No valid format for fields: ") >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0)
org.joda.time.format.ISODateTimeFormat.forFields : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.format.ISODateTimeFormat.forFields : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22)
org.joda.time.format.ISODateTimeFormat.forFields : specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : throw $r18
org.joda.time.format.ISODateTimeFormat.forFields : $z11 = 1 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : goto [?= z3 = $z11]
org.joda.time.format.ISODateTimeFormat.forFields : goto [?= z3 = $z11] >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : z3 = $z11
org.joda.time.format.ISODateTimeFormat.forFields : $r16 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter weekyearElement()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : virtualinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r16)
org.joda.time.format.ISODateTimeFormat.forFields : virtualinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r16) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : z2 = 1
org.joda.time.format.ISODateTimeFormat.forFields : z2 = 1 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $i2 = interfaceinvoke r1.<java.util.Set: int size()>()
org.joda.time.format.ISODateTimeFormat.forFields : $r13 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter yearElement()>() >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : virtualinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r13)
org.joda.time.format.ISODateTimeFormat.forFields : virtualinvoke r2.<org.joda.time.format.DateTimeFormatterBuilder: org.joda.time.format.DateTimeFormatterBuilder append(org.joda.time.format.DateTimeFormatter)>($r13) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : z2 = 1
org.joda.time.format.ISODateTimeFormat.forFields : z2 = 1 >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : goto [?= $i2 = interfaceinvoke r1.<java.util.Set: int size()>()]
org.joda.time.format.ISODateTimeFormat.forFields : goto [?= $i2 = interfaceinvoke r1.<java.util.Set: int size()>()] >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $i2 = interfaceinvoke r1.<java.util.Set: int size()>()
org.joda.time.format.ISODateTimeFormat.forFields : z2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>(r2, r1, z0, z1) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : goto [?= $i2 = interfaceinvoke r1.<java.util.Set: int size()>()]
org.joda.time.format.ISODateTimeFormat.forFields : goto [?= $i2 = interfaceinvoke r1.<java.util.Set: int size()>()] >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $i2 = interfaceinvoke r1.<java.util.Set: int size()>()
org.joda.time.format.ISODateTimeFormat.forFields : z2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>(r2, r1, z0, z1) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : goto [?= $i2 = interfaceinvoke r1.<java.util.Set: int size()>()]
org.joda.time.format.ISODateTimeFormat.forFields : goto [?= $i2 = interfaceinvoke r1.<java.util.Set: int size()>()] >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $i2 = interfaceinvoke r1.<java.util.Set: int size()>()
org.joda.time.format.ISODateTimeFormat.forFields : z2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: boolean dateByWeek(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>(r2, r1, z0, z1) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : goto [?= $i2 = interfaceinvoke r1.<java.util.Set: int size()>()]
org.joda.time.format.ISODateTimeFormat.forFields : goto [?= $i2 = interfaceinvoke r1.<java.util.Set: int size()>()] >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $i2 = interfaceinvoke r1.<java.util.Set: int size()>()
org.joda.time.format.ISODateTimeFormat.forFields : z2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: boolean dateByOrdinal(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>(r2, r1, z0, z1) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : goto [?= $i2 = interfaceinvoke r1.<java.util.Set: int size()>()]
org.joda.time.format.ISODateTimeFormat.forFields : goto [?= $i2 = interfaceinvoke r1.<java.util.Set: int size()>()] >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $i2 = interfaceinvoke r1.<java.util.Set: int size()>()
org.joda.time.format.ISODateTimeFormat.forFields : z2 = staticinvoke <org.joda.time.format.ISODateTimeFormat: boolean dateByMonth(org.joda.time.format.DateTimeFormatterBuilder,java.util.Collection,boolean,boolean)>(r2, r1, z0, z1) >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : goto [?= $i2 = interfaceinvoke r1.<java.util.Set: int size()>()]
org.joda.time.format.ISODateTimeFormat.forFields : goto [?= $i2 = interfaceinvoke r1.<java.util.Set: int size()>()] >>>>>>>> org.joda.time.format.ISODateTimeFormat.forFields : $i2 = interfaceinvoke r1.<java.util.Set: int size()>()
