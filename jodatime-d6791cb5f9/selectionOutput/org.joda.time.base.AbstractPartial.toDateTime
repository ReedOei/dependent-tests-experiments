org.joda.time.base.AbstractPartial.toDateTime : r2 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getInstantChronology(org.joda.time.ReadableInstant)>(r1) >>>>>>>> org.joda.time.base.AbstractPartial.toDateTime : l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r1)
org.joda.time.base.AbstractPartial.toDateTime : l0 = staticinvoke <org.joda.time.DateTimeUtils: long getInstantMillis(org.joda.time.ReadableInstant)>(r1) >>>>>>>> org.joda.time.base.AbstractPartial.toDateTime : l1 = virtualinvoke r2.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r0, l0)
org.joda.time.base.AbstractPartial.toDateTime : l1 = virtualinvoke r2.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r0, l0) >>>>>>>> org.joda.time.base.AbstractPartial.toDateTime : $r3 = new org.joda.time.DateTime
org.joda.time.base.AbstractPartial.toDateTime : $r3 = new org.joda.time.DateTime >>>>>>>> org.joda.time.base.AbstractPartial.toDateTime : specialinvoke $r3.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l1, r2)
org.joda.time.base.AbstractPartial.toDateTime : specialinvoke $r3.<org.joda.time.DateTime: void <init>(long,org.joda.time.Chronology)>(l1, r2) >>>>>>>> org.joda.time.base.AbstractPartial.toDateTime : return $r3
