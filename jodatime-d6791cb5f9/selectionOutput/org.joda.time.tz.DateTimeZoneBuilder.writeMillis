org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l2 = l0 % 1800000L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b3 = $l2 cmp 0L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b3 = $l2 cmp 0L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b3 != 0
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b3 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : l1 = l0 / 1800000L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b3 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l9 = l0 % 60000L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l9 = l0 % 60000L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b10 = $l9 cmp 0L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b10 = $l9 cmp 0L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b10 != 0
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b10 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : l11 = l0 / 60000L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b10 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l18 = l0 % 1000L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l18 = l0 % 1000L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b19 = $l18 cmp 0L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b19 = $l18 cmp 0L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b19 != 0
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b19 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : l20 = l0 / 1000L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b19 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b30 = l0 cmp 0L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b30 = l0 cmp 0L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b30 >= 0
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b30 >= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $s31 = 255
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b30 >= 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $s31 = 192
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $s31 = 192 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeByte(int)>($s31)
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeByte(int)>($s31) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeLong(long)>(l0)
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeLong(long)>(l0) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : return
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $s31 = 255 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : goto [?= interfaceinvoke r0.<java.io.DataOutput: void writeByte(int)>($s31)]
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : goto [?= interfaceinvoke r0.<java.io.DataOutput: void writeByte(int)>($s31)] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeByte(int)>($s31)
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : l20 = l0 / 1000L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l21 = l20 << 26
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l21 = l20 << 26 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l22 = $l21 >> 26
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l22 = $l21 >> 26 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b23 = $l22 cmp l20
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b23 = $l22 cmp l20 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b23 != 0
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b23 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l24 = l20 >> 32
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b23 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b30 = l0 cmp 0L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l24 = l20 >> 32 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l25 = $l24 & 63L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l25 = $l24 & 63L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $i26 = (int) $l25
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $i26 = (int) $l25 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $i27 = 128 | $i26
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $i27 = 128 | $i26 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeByte(int)>($i27)
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeByte(int)>($i27) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l28 = l20 & -1L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l28 = l20 & -1L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $i29 = (int) $l28
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $i29 = (int) $l28 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeInt(int)>($i29)
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeInt(int)>($i29) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : return
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : l11 = l0 / 60000L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l12 = l11 << 34
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l12 = l11 << 34 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l13 = $l12 >> 34
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l13 = $l12 >> 34 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b14 = $l13 cmp l11
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b14 = $l13 cmp l11 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b14 != 0
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b14 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l15 = l11 & 1073741823L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b14 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l18 = l0 % 1000L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l15 = l11 & 1073741823L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $i16 = (int) $l15
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $i16 = (int) $l15 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $i17 = 1073741824 | $i16
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $i17 = 1073741824 | $i16 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeInt(int)>($i17)
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeInt(int)>($i17) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : return
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : l1 = l0 / 1800000L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l4 = l1 << 58
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l4 = l1 << 58 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l5 = $l4 >> 58
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l5 = $l4 >> 58 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b6 = $l5 cmp l1
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $b6 = $l5 cmp l1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b6 != 0
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b6 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l7 = l1 & 63L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : if $b6 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l9 = l0 % 60000L
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $l7 = l1 & 63L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $i8 = (int) $l7
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : $i8 = (int) $l7 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeByte(int)>($i8)
org.joda.time.tz.DateTimeZoneBuilder.writeMillis : interfaceinvoke r0.<java.io.DataOutput: void writeByte(int)>($i8) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.writeMillis : return
