org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r1 = staticinvoke <org.joda.time.chrono.ISOChronology: org.joda.time.chrono.ISOChronology getInstanceUTC()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r2 = null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r2 = null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : l2 = 9223372036854775807L
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : l2 = 9223372036854775807L >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r5 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: java.util.ArrayList iRules> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r3 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r3 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $z0 == 0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $z0 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if r2 != null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if r2 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : return null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if r2 != null >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r7 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r7 = virtualinvoke r1.<org.joda.time.Chronology: org.joda.time.DateTimeField year()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i7 = virtualinvoke $r7.<org.joda.time.DateTimeField: int get(long)>(l2)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i7 = virtualinvoke $r7.<org.joda.time.DateTimeField: int get(long)>(l2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i8 = <org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int YEAR_LIMIT>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i8 = <org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int YEAR_LIMIT> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $i7 < $i8
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $i7 < $i8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : return null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $i7 < $i8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i9 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $i9 >= 2147483647
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $i9 >= 2147483647 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $i9 >= 2147483647 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r9 = new org.joda.time.tz.DateTimeZoneBuilder$Transition
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r9 = new org.joda.time.tz.DateTimeZoneBuilder$Transition >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i14 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i14 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : specialinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>(l2, r2, $i14)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : specialinvoke $r9.<org.joda.time.tz.DateTimeZoneBuilder$Transition: void <init>(long,org.joda.time.tz.DateTimeZoneBuilder$Rule,int)>(l2, r2, $i14) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : return $r9
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r8 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: org.joda.time.tz.DateTimeZoneBuilder$OfYear iUpperOfYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i10 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iUpperYear> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i11 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i11 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : l12 = virtualinvoke $r8.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>($i10, $i11, i1)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : l12 = virtualinvoke $r8.<org.joda.time.tz.DateTimeZoneBuilder$OfYear: long setInstant(int,int,int)>($i10, $i11, i1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $b13 = l2 cmp l12
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $b13 = l2 cmp l12 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $b13 < 0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $b13 < 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : return null
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $b13 < 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r9 = new org.joda.time.tz.DateTimeZoneBuilder$Transition
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r4 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r6
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r4 = (org.joda.time.tz.DateTimeZoneBuilder$Rule) $r6 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset>
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $i4 = r0.<org.joda.time.tz.DateTimeZoneBuilder$RuleSet: int iStandardOffset> >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : l3 = virtualinvoke r4.<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>(l0, $i4, i1)
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : l3 = virtualinvoke r4.<org.joda.time.tz.DateTimeZoneBuilder$Rule: long next(long,int,int)>(l0, $i4, i1) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $b5 = l3 cmp l0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $b5 = l3 cmp l0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $b5 > 0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $b5 > 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : interfaceinvoke r3.<java.util.Iterator: void remove()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $b5 > 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $b6 = l3 cmp l2
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $b6 = l3 cmp l2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $b6 > 0
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $b6 > 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r2 = r4
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : if $b6 > 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : r2 = r4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : l2 = l3
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : l2 = l3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : interfaceinvoke r3.<java.util.Iterator: void remove()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder$RuleSet.nextTransition : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
