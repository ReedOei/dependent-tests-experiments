org.joda.time.base.BaseSingleFieldPeriod.between : if r0 == null >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : if r1 != null
org.joda.time.base.BaseSingleFieldPeriod.between : if r0 == null >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : $r3 = new java.lang.IllegalArgumentException
org.joda.time.base.BaseSingleFieldPeriod.between : $r3 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must not be null")
org.joda.time.base.BaseSingleFieldPeriod.between : specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must not be null") >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : throw $r3
org.joda.time.base.BaseSingleFieldPeriod.between : if r1 != null >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : $r3 = new java.lang.IllegalArgumentException
org.joda.time.base.BaseSingleFieldPeriod.between : if r1 != null >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : $i2 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.base.BaseSingleFieldPeriod.between : $i2 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : $i3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.base.BaseSingleFieldPeriod.between : $i3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : if $i2 == $i3
org.joda.time.base.BaseSingleFieldPeriod.between : if $i2 == $i3 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : $r4 = new java.lang.IllegalArgumentException
org.joda.time.base.BaseSingleFieldPeriod.between : if $i2 == $i3 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : i0 = 0
org.joda.time.base.BaseSingleFieldPeriod.between : i0 = 0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : i1 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int size()>()
org.joda.time.base.BaseSingleFieldPeriod.between : i1 = interfaceinvoke r0.<org.joda.time.ReadablePartial: int size()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : if i0 >= i1
org.joda.time.base.BaseSingleFieldPeriod.between : if i0 >= i1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : $r5 = interfaceinvoke r0.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0)
org.joda.time.base.BaseSingleFieldPeriod.between : if i0 >= i1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : $z0 = staticinvoke <org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>(r0)
org.joda.time.base.BaseSingleFieldPeriod.between : $z0 = staticinvoke <org.joda.time.DateTimeUtils: boolean isContiguous(org.joda.time.ReadablePartial)>(r0) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : if $z0 != 0
org.joda.time.base.BaseSingleFieldPeriod.between : if $z0 != 0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : $r8 = new java.lang.IllegalArgumentException
org.joda.time.base.BaseSingleFieldPeriod.between : if $z0 != 0 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : $r9 = interfaceinvoke r0.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>()
org.joda.time.base.BaseSingleFieldPeriod.between : $r9 = interfaceinvoke r0.<org.joda.time.ReadablePartial: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : $r10 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r9)
org.joda.time.base.BaseSingleFieldPeriod.between : $r10 = staticinvoke <org.joda.time.DateTimeUtils: org.joda.time.Chronology getChronology(org.joda.time.Chronology)>($r9) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : r11 = virtualinvoke $r10.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>()
org.joda.time.base.BaseSingleFieldPeriod.between : r11 = virtualinvoke $r10.<org.joda.time.Chronology: org.joda.time.Chronology withUTC()>() >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : $l4 = virtualinvoke r11.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r0, 0L)
org.joda.time.base.BaseSingleFieldPeriod.between : $l4 = virtualinvoke r11.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r0, 0L) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : $l5 = virtualinvoke r11.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r1, 0L)
org.joda.time.base.BaseSingleFieldPeriod.between : $l5 = virtualinvoke r11.<org.joda.time.Chronology: long set(org.joda.time.ReadablePartial,long)>(r1, 0L) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : r12 = virtualinvoke r11.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>(r2, $l4, $l5)
org.joda.time.base.BaseSingleFieldPeriod.between : r12 = virtualinvoke r11.<org.joda.time.Chronology: int[] get(org.joda.time.ReadablePeriod,long,long)>(r2, $l4, $l5) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : $i6 = r12[0]
org.joda.time.base.BaseSingleFieldPeriod.between : $i6 = r12[0] >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : return $i6
org.joda.time.base.BaseSingleFieldPeriod.between : $r8 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must be contiguous")
org.joda.time.base.BaseSingleFieldPeriod.between : specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must be contiguous") >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : throw $r8
org.joda.time.base.BaseSingleFieldPeriod.between : $r5 = interfaceinvoke r0.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : $r6 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0)
org.joda.time.base.BaseSingleFieldPeriod.between : $r6 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : if $r5 == $r6
org.joda.time.base.BaseSingleFieldPeriod.between : if $r5 == $r6 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : $r7 = new java.lang.IllegalArgumentException
org.joda.time.base.BaseSingleFieldPeriod.between : if $r5 == $r6 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : i0 = i0 + 1
org.joda.time.base.BaseSingleFieldPeriod.between : i0 = i0 + 1 >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : goto [?= (branch)]
org.joda.time.base.BaseSingleFieldPeriod.between : goto [?= (branch)] >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : if i0 >= i1
org.joda.time.base.BaseSingleFieldPeriod.between : $r7 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must have the same set of fields")
org.joda.time.base.BaseSingleFieldPeriod.between : specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must have the same set of fields") >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : throw $r7
org.joda.time.base.BaseSingleFieldPeriod.between : $r4 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must have the same set of fields")
org.joda.time.base.BaseSingleFieldPeriod.between : specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("ReadablePartial objects must have the same set of fields") >>>>>>>> org.joda.time.base.BaseSingleFieldPeriod.between : throw $r4
