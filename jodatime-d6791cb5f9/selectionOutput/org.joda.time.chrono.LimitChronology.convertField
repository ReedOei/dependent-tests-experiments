org.joda.time.chrono.LimitChronology.convertField : if r1 == null >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $z0 = virtualinvoke r1.<org.joda.time.DateTimeField: boolean isSupported()>()
org.joda.time.chrono.LimitChronology.convertField : if r1 == null >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : return r1
org.joda.time.chrono.LimitChronology.convertField : $z0 = virtualinvoke r1.<org.joda.time.DateTimeField: boolean isSupported()>() >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : if $z0 != 0
org.joda.time.chrono.LimitChronology.convertField : if $z0 != 0 >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : return r1
org.joda.time.chrono.LimitChronology.convertField : if $z0 != 0 >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $z1 = virtualinvoke r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1)
org.joda.time.chrono.LimitChronology.convertField : $z1 = virtualinvoke r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : if $z1 == 0
org.joda.time.chrono.LimitChronology.convertField : if $z1 == 0 >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r4 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1)
org.joda.time.chrono.LimitChronology.convertField : if $z1 == 0 >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r6 = new org.joda.time.chrono.LimitChronology$LimitDateTimeField
org.joda.time.chrono.LimitChronology.convertField : $r6 = new org.joda.time.chrono.LimitChronology$LimitDateTimeField >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r7 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.chrono.LimitChronology.convertField : $r7 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r8 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r7, r2)
org.joda.time.chrono.LimitChronology.convertField : $r8 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r7, r2) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r9 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.chrono.LimitChronology.convertField : $r9 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getRangeDurationField()>() >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r10 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r9, r2)
org.joda.time.chrono.LimitChronology.convertField : $r10 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r9, r2) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r11 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>()
org.joda.time.chrono.LimitChronology.convertField : $r11 = virtualinvoke r1.<org.joda.time.DateTimeField: org.joda.time.DurationField getLeapDurationField()>() >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r12 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r11, r2)
org.joda.time.chrono.LimitChronology.convertField : $r12 = specialinvoke r0.<org.joda.time.chrono.LimitChronology: org.joda.time.DurationField convertField(org.joda.time.DurationField,java.util.HashMap)>($r11, r2) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : specialinvoke $r6.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>(r0, r1, $r8, $r10, $r12)
org.joda.time.chrono.LimitChronology.convertField : specialinvoke $r6.<org.joda.time.chrono.LimitChronology$LimitDateTimeField: void <init>(org.joda.time.chrono.LimitChronology,org.joda.time.DateTimeField,org.joda.time.DurationField,org.joda.time.DurationField,org.joda.time.DurationField)>(r0, r1, $r8, $r10, $r12) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : r3 = $r6
org.joda.time.chrono.LimitChronology.convertField : r3 = $r6 >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3)
org.joda.time.chrono.LimitChronology.convertField : virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : return r3
org.joda.time.chrono.LimitChronology.convertField : $r4 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : $r5 = (org.joda.time.DateTimeField) $r4
org.joda.time.chrono.LimitChronology.convertField : $r5 = (org.joda.time.DateTimeField) $r4 >>>>>>>> org.joda.time.chrono.LimitChronology.convertField : return $r5
