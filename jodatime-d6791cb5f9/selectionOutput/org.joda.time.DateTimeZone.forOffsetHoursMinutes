org.joda.time.DateTimeZone.forOffsetHoursMinutes : if i0 != 0 >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : if i1 != 0
org.joda.time.DateTimeZone.forOffsetHoursMinutes : if i0 != 0 >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : if i1 < 0
org.joda.time.DateTimeZone.forOffsetHoursMinutes : if i1 < 0 >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : if i1 <= 59
org.joda.time.DateTimeZone.forOffsetHoursMinutes : if i1 < 0 >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r2 = new java.lang.IllegalArgumentException
org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r2 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r0 = new java.lang.StringBuilder
org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r0 = new java.lang.StringBuilder >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
org.joda.time.DateTimeZone.forOffsetHoursMinutes : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Minutes out of range: ")
org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Minutes out of range: ") >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)
org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1) >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5)
org.joda.time.DateTimeZone.forOffsetHoursMinutes : specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5) >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : throw $r2
org.joda.time.DateTimeZone.forOffsetHoursMinutes : if i1 <= 59 >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r2 = new java.lang.IllegalArgumentException
org.joda.time.DateTimeZone.forOffsetHoursMinutes : if i1 <= 59 >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : z0 = 0
org.joda.time.DateTimeZone.forOffsetHoursMinutes : z0 = 0 >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : i2 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>(i0, 60)
org.joda.time.DateTimeZone.forOffsetHoursMinutes : z0 = 0 >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r6 := @caughtexception
org.joda.time.DateTimeZone.forOffsetHoursMinutes : r7 = $r6 >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r8 = new java.lang.IllegalArgumentException
org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r8 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Offset is too large")
org.joda.time.DateTimeZone.forOffsetHoursMinutes : specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Offset is too large") >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : throw $r8
org.joda.time.DateTimeZone.forOffsetHoursMinutes : i2 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>(i0, 60) >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : if i2 >= 0
org.joda.time.DateTimeZone.forOffsetHoursMinutes : i2 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>(i0, 60) >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r6 := @caughtexception
org.joda.time.DateTimeZone.forOffsetHoursMinutes : if i2 >= 0 >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : $i3 = neg i1
org.joda.time.DateTimeZone.forOffsetHoursMinutes : if i2 >= 0 >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : i4 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>(i2, i1)
org.joda.time.DateTimeZone.forOffsetHoursMinutes : if i2 >= 0 >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r6 := @caughtexception
org.joda.time.DateTimeZone.forOffsetHoursMinutes : i4 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>(i2, i1) >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : i5 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>(i4, 60000)
org.joda.time.DateTimeZone.forOffsetHoursMinutes : i4 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>(i2, i1) >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r6 := @caughtexception
org.joda.time.DateTimeZone.forOffsetHoursMinutes : i5 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>(i4, 60000) >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : goto [?= $r9 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>(i5)]
org.joda.time.DateTimeZone.forOffsetHoursMinutes : i5 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>(i4, 60000) >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r6 := @caughtexception
org.joda.time.DateTimeZone.forOffsetHoursMinutes : goto [?= $r9 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>(i5)] >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r9 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>(i5)
org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r9 = staticinvoke <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone forOffsetMillis(int)>(i5) >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : return $r9
org.joda.time.DateTimeZone.forOffsetHoursMinutes : $i3 = neg i1 >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : i4 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>(i2, $i3)
org.joda.time.DateTimeZone.forOffsetHoursMinutes : $i3 = neg i1 >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r6 := @caughtexception
org.joda.time.DateTimeZone.forOffsetHoursMinutes : i4 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>(i2, $i3) >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : goto [?= i5 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>(i4, 60000)]
org.joda.time.DateTimeZone.forOffsetHoursMinutes : i4 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>(i2, $i3) >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r6 := @caughtexception
org.joda.time.DateTimeZone.forOffsetHoursMinutes : goto [?= i5 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>(i4, 60000)] >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : i5 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>(i4, 60000)
org.joda.time.DateTimeZone.forOffsetHoursMinutes : goto [?= i5 = staticinvoke <org.joda.time.field.FieldUtils: int safeMultiply(int,int)>(i4, 60000)] >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r6 := @caughtexception
org.joda.time.DateTimeZone.forOffsetHoursMinutes : if i1 != 0 >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r1 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC>
org.joda.time.DateTimeZone.forOffsetHoursMinutes : if i1 != 0 >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : if i1 < 0
org.joda.time.DateTimeZone.forOffsetHoursMinutes : $r1 = <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone UTC> >>>>>>>> org.joda.time.DateTimeZone.forOffsetHoursMinutes : return $r1
