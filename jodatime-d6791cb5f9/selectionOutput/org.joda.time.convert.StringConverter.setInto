org.joda.time.convert.StringConverter.setInto : r4 = (java.lang.String) r2 >>>>>>>> org.joda.time.convert.StringConverter.setInto : i0 = virtualinvoke r4.<java.lang.String: int indexOf(int)>(47)
org.joda.time.convert.StringConverter.setInto : i0 = virtualinvoke r4.<java.lang.String: int indexOf(int)>(47) >>>>>>>> org.joda.time.convert.StringConverter.setInto : if i0 >= 0
org.joda.time.convert.StringConverter.setInto : if i0 >= 0 >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r13 = new java.lang.IllegalArgumentException
org.joda.time.convert.StringConverter.setInto : if i0 >= 0 >>>>>>>> org.joda.time.convert.StringConverter.setInto : r6 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, i0)
org.joda.time.convert.StringConverter.setInto : r6 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int,int)>(0, i0) >>>>>>>> org.joda.time.convert.StringConverter.setInto : $i4 = virtualinvoke r6.<java.lang.String: int length()>()
org.joda.time.convert.StringConverter.setInto : $i4 = virtualinvoke r6.<java.lang.String: int length()>() >>>>>>>> org.joda.time.convert.StringConverter.setInto : if $i4 > 0
org.joda.time.convert.StringConverter.setInto : if $i4 > 0 >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r17 = new java.lang.IllegalArgumentException
org.joda.time.convert.StringConverter.setInto : if $i4 > 0 >>>>>>>> org.joda.time.convert.StringConverter.setInto : $i5 = i0 + 1
org.joda.time.convert.StringConverter.setInto : $i5 = i0 + 1 >>>>>>>> org.joda.time.convert.StringConverter.setInto : r7 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>($i5)
org.joda.time.convert.StringConverter.setInto : r7 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>($i5) >>>>>>>> org.joda.time.convert.StringConverter.setInto : $i6 = virtualinvoke r7.<java.lang.String: int length()>()
org.joda.time.convert.StringConverter.setInto : $i6 = virtualinvoke r7.<java.lang.String: int length()>() >>>>>>>> org.joda.time.convert.StringConverter.setInto : if $i6 > 0
org.joda.time.convert.StringConverter.setInto : if $i6 > 0 >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r22 = new java.lang.IllegalArgumentException
org.joda.time.convert.StringConverter.setInto : if $i6 > 0 >>>>>>>> org.joda.time.convert.StringConverter.setInto : r8 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>()
org.joda.time.convert.StringConverter.setInto : r8 = staticinvoke <org.joda.time.format.ISODateTimeFormat: org.joda.time.format.DateTimeFormatter dateTimeParser()>() >>>>>>>> org.joda.time.convert.StringConverter.setInto : r27 = virtualinvoke r8.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>(r3)
org.joda.time.convert.StringConverter.setInto : r27 = virtualinvoke r8.<org.joda.time.format.DateTimeFormatter: org.joda.time.format.DateTimeFormatter withChronology(org.joda.time.Chronology)>(r3) >>>>>>>> org.joda.time.convert.StringConverter.setInto : r9 = staticinvoke <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>()
org.joda.time.convert.StringConverter.setInto : r9 = staticinvoke <org.joda.time.format.ISOPeriodFormat: org.joda.time.format.PeriodFormatter standard()>() >>>>>>>> org.joda.time.convert.StringConverter.setInto : l1 = 0L
org.joda.time.convert.StringConverter.setInto : l1 = 0L >>>>>>>> org.joda.time.convert.StringConverter.setInto : l2 = 0L
org.joda.time.convert.StringConverter.setInto : l2 = 0L >>>>>>>> org.joda.time.convert.StringConverter.setInto : r10 = null
org.joda.time.convert.StringConverter.setInto : r10 = null >>>>>>>> org.joda.time.convert.StringConverter.setInto : r11 = null
org.joda.time.convert.StringConverter.setInto : r11 = null >>>>>>>> org.joda.time.convert.StringConverter.setInto : c3 = virtualinvoke r6.<java.lang.String: char charAt(int)>(0)
org.joda.time.convert.StringConverter.setInto : c3 = virtualinvoke r6.<java.lang.String: char charAt(int)>(0) >>>>>>>> org.joda.time.convert.StringConverter.setInto : if c3 == 80
org.joda.time.convert.StringConverter.setInto : if c3 == 80 >>>>>>>> org.joda.time.convert.StringConverter.setInto : if c3 != 112
org.joda.time.convert.StringConverter.setInto : if c3 == 80 >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r28 = virtualinvoke r0.<org.joda.time.convert.StringConverter: org.joda.time.PeriodType getPeriodType(java.lang.Object)>(r6)
org.joda.time.convert.StringConverter.setInto : $r28 = virtualinvoke r0.<org.joda.time.convert.StringConverter: org.joda.time.PeriodType getPeriodType(java.lang.Object)>(r6) >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r29 = virtualinvoke r9.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>($r28)
org.joda.time.convert.StringConverter.setInto : $r29 = virtualinvoke r9.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>($r28) >>>>>>>> org.joda.time.convert.StringConverter.setInto : r10 = virtualinvoke $r29.<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>(r6)
org.joda.time.convert.StringConverter.setInto : r10 = virtualinvoke $r29.<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>(r6) >>>>>>>> org.joda.time.convert.StringConverter.setInto : goto [?= c7 = virtualinvoke r7.<java.lang.String: char charAt(int)>(0)]
org.joda.time.convert.StringConverter.setInto : goto [?= c7 = virtualinvoke r7.<java.lang.String: char charAt(int)>(0)] >>>>>>>> org.joda.time.convert.StringConverter.setInto : c7 = virtualinvoke r7.<java.lang.String: char charAt(int)>(0)
org.joda.time.convert.StringConverter.setInto : c7 = virtualinvoke r7.<java.lang.String: char charAt(int)>(0) >>>>>>>> org.joda.time.convert.StringConverter.setInto : if c7 == 80
org.joda.time.convert.StringConverter.setInto : if c7 == 80 >>>>>>>> org.joda.time.convert.StringConverter.setInto : if c7 != 112
org.joda.time.convert.StringConverter.setInto : if c7 == 80 >>>>>>>> org.joda.time.convert.StringConverter.setInto : if r10 == null
org.joda.time.convert.StringConverter.setInto : if r10 == null >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r30 = new java.lang.IllegalArgumentException
org.joda.time.convert.StringConverter.setInto : if r10 == null >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r35 = virtualinvoke r0.<org.joda.time.convert.StringConverter: org.joda.time.PeriodType getPeriodType(java.lang.Object)>(r7)
org.joda.time.convert.StringConverter.setInto : $r35 = virtualinvoke r0.<org.joda.time.convert.StringConverter: org.joda.time.PeriodType getPeriodType(java.lang.Object)>(r7) >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r36 = virtualinvoke r9.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>($r35)
org.joda.time.convert.StringConverter.setInto : $r36 = virtualinvoke r9.<org.joda.time.format.PeriodFormatter: org.joda.time.format.PeriodFormatter withParseType(org.joda.time.PeriodType)>($r35) >>>>>>>> org.joda.time.convert.StringConverter.setInto : r37 = virtualinvoke $r36.<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>(r7)
org.joda.time.convert.StringConverter.setInto : r37 = virtualinvoke $r36.<org.joda.time.format.PeriodFormatter: org.joda.time.Period parsePeriod(java.lang.String)>(r7) >>>>>>>> org.joda.time.convert.StringConverter.setInto : if r3 == null
org.joda.time.convert.StringConverter.setInto : if r3 == null >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r38 = r3
org.joda.time.convert.StringConverter.setInto : if r3 == null >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r38 = r11
org.joda.time.convert.StringConverter.setInto : $r38 = r11 >>>>>>>> org.joda.time.convert.StringConverter.setInto : r39 = $r38
org.joda.time.convert.StringConverter.setInto : r39 = $r38 >>>>>>>> org.joda.time.convert.StringConverter.setInto : l8 = virtualinvoke r39.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r37, l1, 1)
org.joda.time.convert.StringConverter.setInto : l8 = virtualinvoke r39.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r37, l1, 1) >>>>>>>> org.joda.time.convert.StringConverter.setInto : goto [?= interfaceinvoke r1.<org.joda.time.ReadWritableInterval: void setInterval(long,long)>(l1, l8)]
org.joda.time.convert.StringConverter.setInto : goto [?= interfaceinvoke r1.<org.joda.time.ReadWritableInterval: void setInterval(long,long)>(l1, l8)] >>>>>>>> org.joda.time.convert.StringConverter.setInto : interfaceinvoke r1.<org.joda.time.ReadWritableInterval: void setInterval(long,long)>(l1, l8)
org.joda.time.convert.StringConverter.setInto : interfaceinvoke r1.<org.joda.time.ReadWritableInterval: void setInterval(long,long)>(l1, l8) >>>>>>>> org.joda.time.convert.StringConverter.setInto : interfaceinvoke r1.<org.joda.time.ReadWritableInterval: void setChronology(org.joda.time.Chronology)>(r39)
org.joda.time.convert.StringConverter.setInto : interfaceinvoke r1.<org.joda.time.ReadWritableInterval: void setChronology(org.joda.time.Chronology)>(r39) >>>>>>>> org.joda.time.convert.StringConverter.setInto : return
org.joda.time.convert.StringConverter.setInto : $r38 = r3 >>>>>>>> org.joda.time.convert.StringConverter.setInto : goto [?= r39 = $r38]
org.joda.time.convert.StringConverter.setInto : goto [?= r39 = $r38] >>>>>>>> org.joda.time.convert.StringConverter.setInto : r39 = $r38
org.joda.time.convert.StringConverter.setInto : $r30 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r31 = new java.lang.StringBuilder
org.joda.time.convert.StringConverter.setInto : $r31 = new java.lang.StringBuilder >>>>>>>> org.joda.time.convert.StringConverter.setInto : specialinvoke $r31.<java.lang.StringBuilder: void <init>()>()
org.joda.time.convert.StringConverter.setInto : specialinvoke $r31.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Interval composed of two durations: ")
org.joda.time.convert.StringConverter.setInto : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Interval composed of two durations: ") >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
org.joda.time.convert.StringConverter.setInto : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.convert.StringConverter.setInto : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.convert.StringConverter.setInto : specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r34)
org.joda.time.convert.StringConverter.setInto : specialinvoke $r30.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r34) >>>>>>>> org.joda.time.convert.StringConverter.setInto : throw $r30
org.joda.time.convert.StringConverter.setInto : if c7 != 112 >>>>>>>> org.joda.time.convert.StringConverter.setInto : if r10 == null
org.joda.time.convert.StringConverter.setInto : if c7 != 112 >>>>>>>> org.joda.time.convert.StringConverter.setInto : r40 = virtualinvoke r27.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>(r7)
org.joda.time.convert.StringConverter.setInto : r40 = virtualinvoke r27.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>(r7) >>>>>>>> org.joda.time.convert.StringConverter.setInto : l8 = virtualinvoke r40.<org.joda.time.DateTime: long getMillis()>()
org.joda.time.convert.StringConverter.setInto : l8 = virtualinvoke r40.<org.joda.time.DateTime: long getMillis()>() >>>>>>>> org.joda.time.convert.StringConverter.setInto : if r11 == null
org.joda.time.convert.StringConverter.setInto : if r11 == null >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r41 = r11
org.joda.time.convert.StringConverter.setInto : if r11 == null >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r41 = virtualinvoke r40.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.convert.StringConverter.setInto : $r41 = virtualinvoke r40.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.convert.StringConverter.setInto : r42 = $r41
org.joda.time.convert.StringConverter.setInto : r42 = $r41 >>>>>>>> org.joda.time.convert.StringConverter.setInto : if r3 == null
org.joda.time.convert.StringConverter.setInto : if r3 == null >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r43 = r3
org.joda.time.convert.StringConverter.setInto : if r3 == null >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r43 = r42
org.joda.time.convert.StringConverter.setInto : $r43 = r42 >>>>>>>> org.joda.time.convert.StringConverter.setInto : r39 = $r43
org.joda.time.convert.StringConverter.setInto : r39 = $r43 >>>>>>>> org.joda.time.convert.StringConverter.setInto : if r10 == null
org.joda.time.convert.StringConverter.setInto : if r10 == null >>>>>>>> org.joda.time.convert.StringConverter.setInto : l1 = virtualinvoke r39.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r10, l8, -1)
org.joda.time.convert.StringConverter.setInto : if r10 == null >>>>>>>> org.joda.time.convert.StringConverter.setInto : interfaceinvoke r1.<org.joda.time.ReadWritableInterval: void setInterval(long,long)>(l1, l8)
org.joda.time.convert.StringConverter.setInto : l1 = virtualinvoke r39.<org.joda.time.Chronology: long add(org.joda.time.ReadablePeriod,long,int)>(r10, l8, -1) >>>>>>>> org.joda.time.convert.StringConverter.setInto : interfaceinvoke r1.<org.joda.time.ReadWritableInterval: void setInterval(long,long)>(l1, l8)
org.joda.time.convert.StringConverter.setInto : $r43 = r3 >>>>>>>> org.joda.time.convert.StringConverter.setInto : goto [?= r39 = $r43]
org.joda.time.convert.StringConverter.setInto : goto [?= r39 = $r43] >>>>>>>> org.joda.time.convert.StringConverter.setInto : r39 = $r43
org.joda.time.convert.StringConverter.setInto : $r41 = r11 >>>>>>>> org.joda.time.convert.StringConverter.setInto : goto [?= r42 = $r41]
org.joda.time.convert.StringConverter.setInto : goto [?= r42 = $r41] >>>>>>>> org.joda.time.convert.StringConverter.setInto : r42 = $r41
org.joda.time.convert.StringConverter.setInto : if c3 != 112 >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r28 = virtualinvoke r0.<org.joda.time.convert.StringConverter: org.joda.time.PeriodType getPeriodType(java.lang.Object)>(r6)
org.joda.time.convert.StringConverter.setInto : if c3 != 112 >>>>>>>> org.joda.time.convert.StringConverter.setInto : r12 = virtualinvoke r27.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>(r6)
org.joda.time.convert.StringConverter.setInto : r12 = virtualinvoke r27.<org.joda.time.format.DateTimeFormatter: org.joda.time.DateTime parseDateTime(java.lang.String)>(r6) >>>>>>>> org.joda.time.convert.StringConverter.setInto : l1 = virtualinvoke r12.<org.joda.time.DateTime: long getMillis()>()
org.joda.time.convert.StringConverter.setInto : l1 = virtualinvoke r12.<org.joda.time.DateTime: long getMillis()>() >>>>>>>> org.joda.time.convert.StringConverter.setInto : r11 = virtualinvoke r12.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.convert.StringConverter.setInto : r11 = virtualinvoke r12.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.convert.StringConverter.setInto : c7 = virtualinvoke r7.<java.lang.String: char charAt(int)>(0)
org.joda.time.convert.StringConverter.setInto : $r22 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r23 = new java.lang.StringBuilder
org.joda.time.convert.StringConverter.setInto : $r23 = new java.lang.StringBuilder >>>>>>>> org.joda.time.convert.StringConverter.setInto : specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
org.joda.time.convert.StringConverter.setInto : specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Format invalid: ")
org.joda.time.convert.StringConverter.setInto : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Format invalid: ") >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
org.joda.time.convert.StringConverter.setInto : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.convert.StringConverter.setInto : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.convert.StringConverter.setInto : specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26)
org.joda.time.convert.StringConverter.setInto : specialinvoke $r22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26) >>>>>>>> org.joda.time.convert.StringConverter.setInto : throw $r22
org.joda.time.convert.StringConverter.setInto : $r17 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r18 = new java.lang.StringBuilder
org.joda.time.convert.StringConverter.setInto : $r18 = new java.lang.StringBuilder >>>>>>>> org.joda.time.convert.StringConverter.setInto : specialinvoke $r18.<java.lang.StringBuilder: void <init>()>()
org.joda.time.convert.StringConverter.setInto : specialinvoke $r18.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Format invalid: ")
org.joda.time.convert.StringConverter.setInto : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Format invalid: ") >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
org.joda.time.convert.StringConverter.setInto : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.convert.StringConverter.setInto : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.convert.StringConverter.setInto : specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21)
org.joda.time.convert.StringConverter.setInto : specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21) >>>>>>>> org.joda.time.convert.StringConverter.setInto : throw $r17
org.joda.time.convert.StringConverter.setInto : $r13 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r5 = new java.lang.StringBuilder
org.joda.time.convert.StringConverter.setInto : $r5 = new java.lang.StringBuilder >>>>>>>> org.joda.time.convert.StringConverter.setInto : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
org.joda.time.convert.StringConverter.setInto : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r14 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Format requires a \'/\' separator: ")
org.joda.time.convert.StringConverter.setInto : $r14 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Format requires a \'/\' separator: ") >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
org.joda.time.convert.StringConverter.setInto : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> org.joda.time.convert.StringConverter.setInto : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.convert.StringConverter.setInto : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.convert.StringConverter.setInto : specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16)
org.joda.time.convert.StringConverter.setInto : specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16) >>>>>>>> org.joda.time.convert.StringConverter.setInto : throw $r13
