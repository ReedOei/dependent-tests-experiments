org.joda.time.base.BasePeriod.addPeriodInto : i0 = 0 >>>>>>>> org.joda.time.base.BasePeriod.addPeriodInto : i1 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.base.BasePeriod.addPeriodInto : i1 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int size()>() >>>>>>>> org.joda.time.base.BasePeriod.addPeriodInto : if i0 >= i1
org.joda.time.base.BasePeriod.addPeriodInto : if i0 >= i1 >>>>>>>> org.joda.time.base.BasePeriod.addPeriodInto : r3 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i0)
org.joda.time.base.BasePeriod.addPeriodInto : if i0 >= i1 >>>>>>>> org.joda.time.base.BasePeriod.addPeriodInto : return r1
org.joda.time.base.BasePeriod.addPeriodInto : r3 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.base.BasePeriod.addPeriodInto : i2 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int getValue(int)>(i0)
org.joda.time.base.BasePeriod.addPeriodInto : i2 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int getValue(int)>(i0) >>>>>>>> org.joda.time.base.BasePeriod.addPeriodInto : if i2 == 0
org.joda.time.base.BasePeriod.addPeriodInto : if i2 == 0 >>>>>>>> org.joda.time.base.BasePeriod.addPeriodInto : i3 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r3)
org.joda.time.base.BasePeriod.addPeriodInto : if i2 == 0 >>>>>>>> org.joda.time.base.BasePeriod.addPeriodInto : i0 = i0 + 1
org.joda.time.base.BasePeriod.addPeriodInto : i0 = i0 + 1 >>>>>>>> org.joda.time.base.BasePeriod.addPeriodInto : goto [?= (branch)]
org.joda.time.base.BasePeriod.addPeriodInto : goto [?= (branch)] >>>>>>>> org.joda.time.base.BasePeriod.addPeriodInto : if i0 >= i1
org.joda.time.base.BasePeriod.addPeriodInto : i3 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int indexOf(org.joda.time.DurationFieldType)>(r3) >>>>>>>> org.joda.time.base.BasePeriod.addPeriodInto : if i3 != -1
org.joda.time.base.BasePeriod.addPeriodInto : if i3 != -1 >>>>>>>> org.joda.time.base.BasePeriod.addPeriodInto : $r5 = new java.lang.IllegalArgumentException
org.joda.time.base.BasePeriod.addPeriodInto : if i3 != -1 >>>>>>>> org.joda.time.base.BasePeriod.addPeriodInto : $i4 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int getValue(int)>(i3)
org.joda.time.base.BasePeriod.addPeriodInto : $i4 = virtualinvoke r0.<org.joda.time.base.BasePeriod: int getValue(int)>(i3) >>>>>>>> org.joda.time.base.BasePeriod.addPeriodInto : $i5 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i4, i2)
org.joda.time.base.BasePeriod.addPeriodInto : $i5 = staticinvoke <org.joda.time.field.FieldUtils: int safeAdd(int,int)>($i4, i2) >>>>>>>> org.joda.time.base.BasePeriod.addPeriodInto : r1[i3] = $i5
org.joda.time.base.BasePeriod.addPeriodInto : r1[i3] = $i5 >>>>>>>> org.joda.time.base.BasePeriod.addPeriodInto : i0 = i0 + 1
org.joda.time.base.BasePeriod.addPeriodInto : $r5 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.base.BasePeriod.addPeriodInto : $r4 = new java.lang.StringBuilder
org.joda.time.base.BasePeriod.addPeriodInto : $r4 = new java.lang.StringBuilder >>>>>>>> org.joda.time.base.BasePeriod.addPeriodInto : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()
org.joda.time.base.BasePeriod.addPeriodInto : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.base.BasePeriod.addPeriodInto : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Period does not support field \'")
org.joda.time.base.BasePeriod.addPeriodInto : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Period does not support field \'") >>>>>>>> org.joda.time.base.BasePeriod.addPeriodInto : $r7 = virtualinvoke r3.<org.joda.time.DurationFieldType: java.lang.String getName()>()
org.joda.time.base.BasePeriod.addPeriodInto : $r7 = virtualinvoke r3.<org.joda.time.DurationFieldType: java.lang.String getName()>() >>>>>>>> org.joda.time.base.BasePeriod.addPeriodInto : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
org.joda.time.base.BasePeriod.addPeriodInto : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) >>>>>>>> org.joda.time.base.BasePeriod.addPeriodInto : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'")
org.joda.time.base.BasePeriod.addPeriodInto : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") >>>>>>>> org.joda.time.base.BasePeriod.addPeriodInto : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.base.BasePeriod.addPeriodInto : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.base.BasePeriod.addPeriodInto : specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10)
org.joda.time.base.BasePeriod.addPeriodInto : specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10) >>>>>>>> org.joda.time.base.BasePeriod.addPeriodInto : throw $r5
