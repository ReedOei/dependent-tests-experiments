org.joda.time.field.BaseDateTimeField.addWrapPartial : if i1 != 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : return r2
org.joda.time.field.BaseDateTimeField.addWrapPartial : if i1 != 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : r3 = null
org.joda.time.field.BaseDateTimeField.addWrapPartial : r3 = null >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : if i1 <= 0
org.joda.time.field.BaseDateTimeField.addWrapPartial : if i1 <= 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : i2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.field.BaseDateTimeField.addWrapPartial : if i1 <= 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : if i1 >= 0
org.joda.time.field.BaseDateTimeField.addWrapPartial : if i1 >= 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : i19 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.field.BaseDateTimeField.addWrapPartial : if i1 >= 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i36 = r2[i0]
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i36 = r2[i0] >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $r14 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r1, i0, r2, $i36)
org.joda.time.field.BaseDateTimeField.addWrapPartial : $r14 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int[] set(org.joda.time.ReadablePartial,int,int[],int)>(r1, i0, r2, $i36) >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : return $r14
org.joda.time.field.BaseDateTimeField.addWrapPartial : i19 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i20 = r2[i0]
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i20 = r2[i0] >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i21 = $i20 + i1
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i21 = $i20 + i1 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : l22 = (long) $i21
org.joda.time.field.BaseDateTimeField.addWrapPartial : l22 = (long) $i21 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $l23 = (long) i19
org.joda.time.field.BaseDateTimeField.addWrapPartial : $l23 = (long) i19 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $b24 = l22 cmp $l23
org.joda.time.field.BaseDateTimeField.addWrapPartial : $b24 = l22 cmp $l23 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : if $b24 < 0
org.joda.time.field.BaseDateTimeField.addWrapPartial : if $b24 < 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i25 = (int) l22
org.joda.time.field.BaseDateTimeField.addWrapPartial : if $b24 < 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : if r3 != null
org.joda.time.field.BaseDateTimeField.addWrapPartial : if r3 != null >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : if i0 != 0
org.joda.time.field.BaseDateTimeField.addWrapPartial : if r3 != null >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i31 = i19 - 1
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i31 = i19 - 1 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i32 = r2[i0]
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i32 = r2[i0] >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i33 = $i31 - $i32
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i33 = $i31 - $i32 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : i1 = i1 - $i33
org.joda.time.field.BaseDateTimeField.addWrapPartial : i1 = i1 - $i33 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i34 = i0 - 1
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i34 = i0 - 1 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : r2 = virtualinvoke r3.<org.joda.time.DateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i34, r2, -1)
org.joda.time.field.BaseDateTimeField.addWrapPartial : r2 = virtualinvoke r3.<org.joda.time.DateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i34, r2, -1) >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i35 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i35 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : r2[i0] = $i35
org.joda.time.field.BaseDateTimeField.addWrapPartial : r2[i0] = $i35 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : goto [?= (branch)]
org.joda.time.field.BaseDateTimeField.addWrapPartial : goto [?= (branch)] >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : if i1 >= 0
org.joda.time.field.BaseDateTimeField.addWrapPartial : if i0 != 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i26 = i19 - 1
org.joda.time.field.BaseDateTimeField.addWrapPartial : if i0 != 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i30 = i0 - 1
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i30 = i0 - 1 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>($i30)
org.joda.time.field.BaseDateTimeField.addWrapPartial : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>($i30) >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $r9 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.field.BaseDateTimeField.addWrapPartial : $r9 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getRangeDurationField()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $r10 = virtualinvoke $r9.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>()
org.joda.time.field.BaseDateTimeField.addWrapPartial : $r10 = virtualinvoke $r9.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $r11 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.field.BaseDateTimeField.addWrapPartial : $r11 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $r12 = virtualinvoke $r11.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>()
org.joda.time.field.BaseDateTimeField.addWrapPartial : $r12 = virtualinvoke $r11.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : if $r10 == $r12
org.joda.time.field.BaseDateTimeField.addWrapPartial : if $r10 == $r12 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $r13 = new java.lang.IllegalArgumentException
org.joda.time.field.BaseDateTimeField.addWrapPartial : if $r10 == $r12 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i31 = i19 - 1
org.joda.time.field.BaseDateTimeField.addWrapPartial : $r13 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Fields invalid for add")
org.joda.time.field.BaseDateTimeField.addWrapPartial : specialinvoke $r13.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Fields invalid for add") >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : throw $r13
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i26 = i19 - 1 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i27 = r2[i0]
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i27 = r2[i0] >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i28 = $i26 - $i27
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i28 = $i26 - $i27 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : i1 = i1 - $i28
org.joda.time.field.BaseDateTimeField.addWrapPartial : i1 = i1 - $i28 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i29 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i29 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : r2[i0] = $i29
org.joda.time.field.BaseDateTimeField.addWrapPartial : r2[i0] = $i29 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : goto [?= (branch)]
org.joda.time.field.BaseDateTimeField.addWrapPartial : goto [?= (branch)] >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : if i1 >= 0
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i25 = (int) l22 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : r2[i0] = $i25
org.joda.time.field.BaseDateTimeField.addWrapPartial : r2[i0] = $i25 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : goto [?= $i36 = r2[i0]]
org.joda.time.field.BaseDateTimeField.addWrapPartial : goto [?= $i36 = r2[i0]] >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i36 = r2[i0]
org.joda.time.field.BaseDateTimeField.addWrapPartial : i2 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMaximumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i4 = r2[i0]
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i4 = r2[i0] >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i5 = $i4 + i1
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i5 = $i4 + i1 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : l3 = (long) $i5
org.joda.time.field.BaseDateTimeField.addWrapPartial : l3 = (long) $i5 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $l6 = (long) i2
org.joda.time.field.BaseDateTimeField.addWrapPartial : $l6 = (long) i2 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $b7 = l3 cmp $l6
org.joda.time.field.BaseDateTimeField.addWrapPartial : $b7 = l3 cmp $l6 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : if $b7 > 0
org.joda.time.field.BaseDateTimeField.addWrapPartial : if $b7 > 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i8 = (int) l3
org.joda.time.field.BaseDateTimeField.addWrapPartial : if $b7 > 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : if r3 != null
org.joda.time.field.BaseDateTimeField.addWrapPartial : if r3 != null >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : if i0 != 0
org.joda.time.field.BaseDateTimeField.addWrapPartial : if r3 != null >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i14 = i2 + 1
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i14 = i2 + 1 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i15 = r2[i0]
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i15 = r2[i0] >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i16 = $i14 - $i15
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i16 = $i14 - $i15 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : i1 = i1 - $i16
org.joda.time.field.BaseDateTimeField.addWrapPartial : i1 = i1 - $i16 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i17 = i0 - 1
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i17 = i0 - 1 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : r2 = virtualinvoke r3.<org.joda.time.DateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i17, r2, 1)
org.joda.time.field.BaseDateTimeField.addWrapPartial : r2 = virtualinvoke r3.<org.joda.time.DateTimeField: int[] addWrapPartial(org.joda.time.ReadablePartial,int,int[],int)>(r1, $i17, r2, 1) >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i18 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i18 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : r2[i0] = $i18
org.joda.time.field.BaseDateTimeField.addWrapPartial : r2[i0] = $i18 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : goto [?= (branch)]
org.joda.time.field.BaseDateTimeField.addWrapPartial : goto [?= (branch)] >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : if i1 <= 0
org.joda.time.field.BaseDateTimeField.addWrapPartial : if i0 != 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i9 = i2 + 1
org.joda.time.field.BaseDateTimeField.addWrapPartial : if i0 != 0 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i13 = i0 - 1
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i13 = i0 - 1 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>($i13)
org.joda.time.field.BaseDateTimeField.addWrapPartial : r3 = interfaceinvoke r1.<org.joda.time.ReadablePartial: org.joda.time.DateTimeField getField(int)>($i13) >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $r4 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getRangeDurationField()>()
org.joda.time.field.BaseDateTimeField.addWrapPartial : $r4 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: org.joda.time.DurationField getRangeDurationField()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $r5 = virtualinvoke $r4.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>()
org.joda.time.field.BaseDateTimeField.addWrapPartial : $r5 = virtualinvoke $r4.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $r6 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>()
org.joda.time.field.BaseDateTimeField.addWrapPartial : $r6 = virtualinvoke r3.<org.joda.time.DateTimeField: org.joda.time.DurationField getDurationField()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $r7 = virtualinvoke $r6.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>()
org.joda.time.field.BaseDateTimeField.addWrapPartial : $r7 = virtualinvoke $r6.<org.joda.time.DurationField: org.joda.time.DurationFieldType getType()>() >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : if $r5 == $r7
org.joda.time.field.BaseDateTimeField.addWrapPartial : if $r5 == $r7 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $r8 = new java.lang.IllegalArgumentException
org.joda.time.field.BaseDateTimeField.addWrapPartial : if $r5 == $r7 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i14 = i2 + 1
org.joda.time.field.BaseDateTimeField.addWrapPartial : $r8 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Fields invalid for add")
org.joda.time.field.BaseDateTimeField.addWrapPartial : specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Fields invalid for add") >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : throw $r8
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i9 = i2 + 1 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i10 = r2[i0]
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i10 = r2[i0] >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i11 = $i9 - $i10
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i11 = $i9 - $i10 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : i1 = i1 - $i11
org.joda.time.field.BaseDateTimeField.addWrapPartial : i1 = i1 - $i11 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : $i12 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2)
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i12 = virtualinvoke r0.<org.joda.time.field.BaseDateTimeField: int getMinimumValue(org.joda.time.ReadablePartial,int[])>(r1, r2) >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : r2[i0] = $i12
org.joda.time.field.BaseDateTimeField.addWrapPartial : r2[i0] = $i12 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : goto [?= (branch)]
org.joda.time.field.BaseDateTimeField.addWrapPartial : goto [?= (branch)] >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : if i1 <= 0
org.joda.time.field.BaseDateTimeField.addWrapPartial : $i8 = (int) l3 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : r2[i0] = $i8
org.joda.time.field.BaseDateTimeField.addWrapPartial : r2[i0] = $i8 >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : goto [?= (branch)]
org.joda.time.field.BaseDateTimeField.addWrapPartial : goto [?= (branch)] >>>>>>>> org.joda.time.field.BaseDateTimeField.addWrapPartial : if i1 >= 0
