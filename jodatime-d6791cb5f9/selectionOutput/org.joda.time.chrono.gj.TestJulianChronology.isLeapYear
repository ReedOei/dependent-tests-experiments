org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : if i0 != 0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $r2 = new java.lang.IllegalArgumentException
org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : if i0 != 0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $l1 = (long) i0
org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $l1 = (long) i0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $l2 = staticinvoke <org.joda.time.chrono.gj.TestJulianChronology: long mod(long,long)>($l1, 4L)
org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $l2 = staticinvoke <org.joda.time.chrono.gj.TestJulianChronology: long mod(long,long)>($l1, 4L) >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : if i0 <= 0
org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : if i0 <= 0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $b3 = 0
org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : if i0 <= 0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $b3 = 3
org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $b3 = 3 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $l4 = (long) $b3
org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $l4 = (long) $b3 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $b5 = $l2 cmp $l4
org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $b5 = $l2 cmp $l4 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : if $b5 != 0
org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : if $b5 != 0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $z0 = 1
org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : if $b5 != 0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $z0 = 0
org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $z0 = 0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : return $z0
org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $z0 = 1 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : goto [?= return $z0]
org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : goto [?= return $z0] >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : return $z0
org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $b3 = 0 >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : goto [?= $l4 = (long) $b3]
org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : goto [?= $l4 = (long) $b3] >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $l4 = (long) $b3
org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $r2 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $r1 = new java.lang.StringBuilder
org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $r1 = new java.lang.StringBuilder >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal year: ")
org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Illegal year: ") >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()
org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5)
org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r5) >>>>>>>> org.joda.time.chrono.gj.TestJulianChronology.isLeapYear : throw $r2
