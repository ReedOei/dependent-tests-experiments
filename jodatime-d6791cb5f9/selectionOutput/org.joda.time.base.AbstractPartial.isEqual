org.joda.time.base.AbstractPartial.isEqual : if r1 != null >>>>>>>> org.joda.time.base.AbstractPartial.isEqual : $r2 = new java.lang.IllegalArgumentException
org.joda.time.base.AbstractPartial.isEqual : if r1 != null >>>>>>>> org.joda.time.base.AbstractPartial.isEqual : $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>(r1)
org.joda.time.base.AbstractPartial.isEqual : $i0 = virtualinvoke r0.<org.joda.time.base.AbstractPartial: int compareTo(org.joda.time.ReadablePartial)>(r1) >>>>>>>> org.joda.time.base.AbstractPartial.isEqual : if $i0 != 0
org.joda.time.base.AbstractPartial.isEqual : if $i0 != 0 >>>>>>>> org.joda.time.base.AbstractPartial.isEqual : $z0 = 1
org.joda.time.base.AbstractPartial.isEqual : if $i0 != 0 >>>>>>>> org.joda.time.base.AbstractPartial.isEqual : $z0 = 0
org.joda.time.base.AbstractPartial.isEqual : $z0 = 0 >>>>>>>> org.joda.time.base.AbstractPartial.isEqual : return $z0
org.joda.time.base.AbstractPartial.isEqual : $z0 = 1 >>>>>>>> org.joda.time.base.AbstractPartial.isEqual : goto [?= return $z0]
org.joda.time.base.AbstractPartial.isEqual : goto [?= return $z0] >>>>>>>> org.joda.time.base.AbstractPartial.isEqual : return $z0
org.joda.time.base.AbstractPartial.isEqual : $r2 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.base.AbstractPartial.isEqual : specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Partial cannot be null")
org.joda.time.base.AbstractPartial.isEqual : specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Partial cannot be null") >>>>>>>> org.joda.time.base.AbstractPartial.isEqual : throw $r2
