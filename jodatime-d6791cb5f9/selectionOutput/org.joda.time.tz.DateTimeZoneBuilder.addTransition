org.joda.time.tz.DateTimeZoneBuilder.addTransition : i0 = virtualinvoke r1.<java.util.ArrayList: int size()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : if i0 != 0
org.joda.time.tz.DateTimeZoneBuilder.addTransition : if i0 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r2)
org.joda.time.tz.DateTimeZoneBuilder.addTransition : if i0 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $i5 = i0 - 1
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $i5 = i0 - 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $r4 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>($i5)
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $r4 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>($i5) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : r3 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r4
org.joda.time.tz.DateTimeZoneBuilder.addTransition : r3 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r4 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $z1 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r3)
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $z1 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Transition: boolean isTransitionFrom(org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r3) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : if $z1 != 0
org.joda.time.tz.DateTimeZoneBuilder.addTransition : if $z1 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : return 0
org.joda.time.tz.DateTimeZoneBuilder.addTransition : if $z1 != 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : i1 = 0
org.joda.time.tz.DateTimeZoneBuilder.addTransition : i1 = 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : if i0 < 2
org.joda.time.tz.DateTimeZoneBuilder.addTransition : if i0 < 2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $i6 = i0 - 2
org.joda.time.tz.DateTimeZoneBuilder.addTransition : if i0 < 2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : i2 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>()
org.joda.time.tz.DateTimeZoneBuilder.addTransition : i2 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $l7 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>()
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $l7 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $l8 = (long) i1
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $l8 = (long) i1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : l3 = $l7 + $l8
org.joda.time.tz.DateTimeZoneBuilder.addTransition : l3 = $l7 + $l8 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $l9 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>()
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $l9 = virtualinvoke r2.<org.joda.time.tz.DateTimeZoneBuilder$Transition: long getMillis()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $l10 = (long) i2
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $l10 = (long) i2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : l4 = $l9 + $l10
org.joda.time.tz.DateTimeZoneBuilder.addTransition : l4 = $l9 + $l10 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $b11 = l4 cmp l3
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $b11 = l4 cmp l3 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : if $b11 == 0
org.joda.time.tz.DateTimeZoneBuilder.addTransition : if $b11 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r2)
org.joda.time.tz.DateTimeZoneBuilder.addTransition : if $b11 == 0 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $i12 = i0 - 1
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $i12 = i0 - 1 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : virtualinvoke r1.<java.util.ArrayList: java.lang.Object remove(int)>($i12)
org.joda.time.tz.DateTimeZoneBuilder.addTransition : virtualinvoke r1.<java.util.ArrayList: java.lang.Object remove(int)>($i12) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $z3 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r1, r2)
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $z3 = specialinvoke r0.<org.joda.time.tz.DateTimeZoneBuilder: boolean addTransition(java.util.ArrayList,org.joda.time.tz.DateTimeZoneBuilder$Transition)>(r1, r2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : return $z3
org.joda.time.tz.DateTimeZoneBuilder.addTransition : virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : return 1
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $i6 = i0 - 2 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $r5 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>($i6)
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $r5 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>($i6) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : $r6 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r5
org.joda.time.tz.DateTimeZoneBuilder.addTransition : $r6 = (org.joda.time.tz.DateTimeZoneBuilder$Transition) $r5 >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : i1 = virtualinvoke $r6.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>()
org.joda.time.tz.DateTimeZoneBuilder.addTransition : i1 = virtualinvoke $r6.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>() >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : i2 = virtualinvoke r3.<org.joda.time.tz.DateTimeZoneBuilder$Transition: int getWallOffset()>()
org.joda.time.tz.DateTimeZoneBuilder.addTransition : virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>(r2) >>>>>>>> org.joda.time.tz.DateTimeZoneBuilder.addTransition : return 1
