org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $r1 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.Chronology getBase()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>()
org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $r2 = virtualinvoke r0.<org.joda.time.chrono.ZonedChronology: org.joda.time.DateTimeZone getZone()>() >>>>>>>> org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $i5 = virtualinvoke $r2.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $i5 = virtualinvoke $r2.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) >>>>>>>> org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $l6 = (long) $i5
org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $l6 = (long) $i5 >>>>>>>> org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $l7 = l0 + $l6
org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $l7 = l0 + $l6 >>>>>>>> org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $l8 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(long,int,int,int,int)>($l7, i1, i2, i3, i4)
org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $l8 = virtualinvoke $r1.<org.joda.time.Chronology: long getDateTimeMillis(long,int,int,int,int)>($l7, i1, i2, i3, i4) >>>>>>>> org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $l9 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>($l8)
org.joda.time.chrono.ZonedChronology.getDateTimeMillis : $l9 = specialinvoke r0.<org.joda.time.chrono.ZonedChronology: long localToUTC(long)>($l8) >>>>>>>> org.joda.time.chrono.ZonedChronology.getDateTimeMillis : return $l9
