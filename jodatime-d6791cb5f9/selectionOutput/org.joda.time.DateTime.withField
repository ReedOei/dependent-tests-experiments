org.joda.time.DateTime.withField : if r1 != null >>>>>>>> org.joda.time.DateTime.withField : $r2 = new java.lang.IllegalArgumentException
org.joda.time.DateTime.withField : if r1 != null >>>>>>>> org.joda.time.DateTime.withField : $r3 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>()
org.joda.time.DateTime.withField : $r3 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.Chronology getChronology()>() >>>>>>>> org.joda.time.DateTime.withField : $r4 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r3)
org.joda.time.DateTime.withField : $r4 = virtualinvoke r1.<org.joda.time.DateTimeFieldType: org.joda.time.DateTimeField getField(org.joda.time.Chronology)>($r3) >>>>>>>> org.joda.time.DateTime.withField : $l2 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>()
org.joda.time.DateTime.withField : $l2 = virtualinvoke r0.<org.joda.time.DateTime: long getMillis()>() >>>>>>>> org.joda.time.DateTime.withField : l1 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,int)>($l2, i0)
org.joda.time.DateTime.withField : l1 = virtualinvoke $r4.<org.joda.time.DateTimeField: long set(long,int)>($l2, i0) >>>>>>>> org.joda.time.DateTime.withField : $r5 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>(l1)
org.joda.time.DateTime.withField : $r5 = virtualinvoke r0.<org.joda.time.DateTime: org.joda.time.DateTime withMillis(long)>(l1) >>>>>>>> org.joda.time.DateTime.withField : return $r5
org.joda.time.DateTime.withField : $r2 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.DateTime.withField : specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field must not be null")
org.joda.time.DateTime.withField : specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Field must not be null") >>>>>>>> org.joda.time.DateTime.withField : throw $r2
