org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : $l4 = l0 - 3L >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : i1 = virtualinvoke r0.<org.joda.time.chrono.gj.TestGregorianChronology: int gjYearFromFixed(long)>($l4)
org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : i1 = virtualinvoke r0.<org.joda.time.chrono.gj.TestGregorianChronology: int gjYearFromFixed(long)>($l4) >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : $i5 = i1 + 1
org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : $i5 = i1 + 1 >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : $l6 = virtualinvoke r0.<org.joda.time.chrono.gj.TestGregorianChronology: long fixedFromISO(int,int,int)>($i5, 1, 1)
org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : $l6 = virtualinvoke r0.<org.joda.time.chrono.gj.TestGregorianChronology: long fixedFromISO(int,int,int)>($i5, 1, 1) >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : $b7 = l0 cmp $l6
org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : $b7 = l0 cmp $l6 >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : if $b7 < 0
org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : if $b7 < 0 >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : i1 = i1 + 1
org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : if $b7 < 0 >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : $l8 = virtualinvoke r0.<org.joda.time.chrono.gj.TestGregorianChronology: long fixedFromISO(int,int,int)>(i1, 1, 1)
org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : $l8 = virtualinvoke r0.<org.joda.time.chrono.gj.TestGregorianChronology: long fixedFromISO(int,int,int)>(i1, 1, 1) >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : $l9 = l0 - $l8
org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : $l9 = l0 - $l8 >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : $l10 = staticinvoke <org.joda.time.chrono.gj.TestGregorianChronology: long div(long,long)>($l9, 7L)
org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : $l10 = staticinvoke <org.joda.time.chrono.gj.TestGregorianChronology: long div(long,long)>($l9, 7L) >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : $l11 = $l10 + 1L
org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : $l11 = $l10 + 1L >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : i2 = (int) $l11
org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : i2 = (int) $l11 >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : $l12 = staticinvoke <org.joda.time.chrono.gj.TestGregorianChronology: long amod(long,long)>(l0, 7L)
org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : $l12 = staticinvoke <org.joda.time.chrono.gj.TestGregorianChronology: long amod(long,long)>(l0, 7L) >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : i3 = (int) $l12
org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : i3 = (int) $l12 >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : $r1 = newarray (int)[3]
org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : $r1 = newarray (int)[3] >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : $r1[0] = i1
org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : $r1[0] = i1 >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : $r1[1] = i2
org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : $r1[1] = i2 >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : $r1[2] = i3
org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : $r1[2] = i3 >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : return $r1
org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : i1 = i1 + 1 >>>>>>>> org.joda.time.chrono.gj.TestGregorianChronology.isoFromFixed : $l8 = virtualinvoke r0.<org.joda.time.chrono.gj.TestGregorianChronology: long fixedFromISO(int,int,int)>(i1, 1, 1)
