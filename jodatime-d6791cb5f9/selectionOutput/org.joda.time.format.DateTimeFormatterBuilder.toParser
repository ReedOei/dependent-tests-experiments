org.joda.time.format.DateTimeFormatterBuilder.toParser : r1 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: java.lang.Object getFormatter()>() >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toParser : $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>(r1)
org.joda.time.format.DateTimeFormatterBuilder.toParser : $z0 = specialinvoke r0.<org.joda.time.format.DateTimeFormatterBuilder: boolean isParser(java.lang.Object)>(r1) >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toParser : if $z0 == 0
org.joda.time.format.DateTimeFormatterBuilder.toParser : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toParser : $r2 = (org.joda.time.format.DateTimeParser) r1
org.joda.time.format.DateTimeFormatterBuilder.toParser : if $z0 == 0 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toParser : $r3 = new java.lang.UnsupportedOperationException
org.joda.time.format.DateTimeFormatterBuilder.toParser : $r3 = new java.lang.UnsupportedOperationException >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toParser : specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Parsing is not supported")
org.joda.time.format.DateTimeFormatterBuilder.toParser : specialinvoke $r3.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Parsing is not supported") >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toParser : throw $r3
org.joda.time.format.DateTimeFormatterBuilder.toParser : $r2 = (org.joda.time.format.DateTimeParser) r1 >>>>>>>> org.joda.time.format.DateTimeFormatterBuilder.toParser : return $r2
