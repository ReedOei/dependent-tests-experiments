org.joda.time.base.AbstractPeriod.equals : if r0 != r1 >>>>>>>> org.joda.time.base.AbstractPeriod.equals : return 1
org.joda.time.base.AbstractPeriod.equals : if r0 != r1 >>>>>>>> org.joda.time.base.AbstractPeriod.equals : $z0 = r1 instanceof org.joda.time.ReadablePeriod
org.joda.time.base.AbstractPeriod.equals : $z0 = r1 instanceof org.joda.time.ReadablePeriod >>>>>>>> org.joda.time.base.AbstractPeriod.equals : if $z0 != 0
org.joda.time.base.AbstractPeriod.equals : if $z0 != 0 >>>>>>>> org.joda.time.base.AbstractPeriod.equals : return 0
org.joda.time.base.AbstractPeriod.equals : if $z0 != 0 >>>>>>>> org.joda.time.base.AbstractPeriod.equals : r2 = (org.joda.time.ReadablePeriod) r1
org.joda.time.base.AbstractPeriod.equals : r2 = (org.joda.time.ReadablePeriod) r1 >>>>>>>> org.joda.time.base.AbstractPeriod.equals : $i2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>()
org.joda.time.base.AbstractPeriod.equals : $i2 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.equals : $i3 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.base.AbstractPeriod.equals : $i3 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.equals : if $i2 == $i3
org.joda.time.base.AbstractPeriod.equals : if $i2 == $i3 >>>>>>>> org.joda.time.base.AbstractPeriod.equals : return 0
org.joda.time.base.AbstractPeriod.equals : if $i2 == $i3 >>>>>>>> org.joda.time.base.AbstractPeriod.equals : i0 = 0
org.joda.time.base.AbstractPeriod.equals : i0 = 0 >>>>>>>> org.joda.time.base.AbstractPeriod.equals : i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>()
org.joda.time.base.AbstractPeriod.equals : i1 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int size()>() >>>>>>>> org.joda.time.base.AbstractPeriod.equals : if i0 >= i1
org.joda.time.base.AbstractPeriod.equals : if i0 >= i1 >>>>>>>> org.joda.time.base.AbstractPeriod.equals : $i4 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0)
org.joda.time.base.AbstractPeriod.equals : if i0 >= i1 >>>>>>>> org.joda.time.base.AbstractPeriod.equals : return 1
org.joda.time.base.AbstractPeriod.equals : $i4 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: int getValue(int)>(i0) >>>>>>>> org.joda.time.base.AbstractPeriod.equals : $i5 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int getValue(int)>(i0)
org.joda.time.base.AbstractPeriod.equals : $i5 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int getValue(int)>(i0) >>>>>>>> org.joda.time.base.AbstractPeriod.equals : if $i4 != $i5
org.joda.time.base.AbstractPeriod.equals : if $i4 != $i5 >>>>>>>> org.joda.time.base.AbstractPeriod.equals : $r3 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>(i0)
org.joda.time.base.AbstractPeriod.equals : if $i4 != $i5 >>>>>>>> org.joda.time.base.AbstractPeriod.equals : return 0
org.joda.time.base.AbstractPeriod.equals : $r3 = virtualinvoke r0.<org.joda.time.base.AbstractPeriod: org.joda.time.DurationFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.base.AbstractPeriod.equals : $r4 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i0)
org.joda.time.base.AbstractPeriod.equals : $r4 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.base.AbstractPeriod.equals : if $r3 == $r4
org.joda.time.base.AbstractPeriod.equals : if $r3 == $r4 >>>>>>>> org.joda.time.base.AbstractPeriod.equals : return 0
org.joda.time.base.AbstractPeriod.equals : if $r3 == $r4 >>>>>>>> org.joda.time.base.AbstractPeriod.equals : i0 = i0 + 1
org.joda.time.base.AbstractPeriod.equals : i0 = i0 + 1 >>>>>>>> org.joda.time.base.AbstractPeriod.equals : goto [?= (branch)]
org.joda.time.base.AbstractPeriod.equals : goto [?= (branch)] >>>>>>>> org.joda.time.base.AbstractPeriod.equals : if i0 >= i1
