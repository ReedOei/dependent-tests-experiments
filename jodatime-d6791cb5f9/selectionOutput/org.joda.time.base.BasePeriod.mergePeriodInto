org.joda.time.base.BasePeriod.mergePeriodInto : i0 = 0 >>>>>>>> org.joda.time.base.BasePeriod.mergePeriodInto : i1 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int size()>()
org.joda.time.base.BasePeriod.mergePeriodInto : i1 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int size()>() >>>>>>>> org.joda.time.base.BasePeriod.mergePeriodInto : if i0 >= i1
org.joda.time.base.BasePeriod.mergePeriodInto : if i0 >= i1 >>>>>>>> org.joda.time.base.BasePeriod.mergePeriodInto : r3 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i0)
org.joda.time.base.BasePeriod.mergePeriodInto : if i0 >= i1 >>>>>>>> org.joda.time.base.BasePeriod.mergePeriodInto : return r1
org.joda.time.base.BasePeriod.mergePeriodInto : r3 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: org.joda.time.DurationFieldType getFieldType(int)>(i0) >>>>>>>> org.joda.time.base.BasePeriod.mergePeriodInto : i2 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int getValue(int)>(i0)
org.joda.time.base.BasePeriod.mergePeriodInto : i2 = interfaceinvoke r2.<org.joda.time.ReadablePeriod: int getValue(int)>(i0) >>>>>>>> org.joda.time.base.BasePeriod.mergePeriodInto : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>(r3, r1, i2)
org.joda.time.base.BasePeriod.mergePeriodInto : specialinvoke r0.<org.joda.time.base.BasePeriod: void checkAndUpdate(org.joda.time.DurationFieldType,int[],int)>(r3, r1, i2) >>>>>>>> org.joda.time.base.BasePeriod.mergePeriodInto : i0 = i0 + 1
org.joda.time.base.BasePeriod.mergePeriodInto : i0 = i0 + 1 >>>>>>>> org.joda.time.base.BasePeriod.mergePeriodInto : goto [?= (branch)]
org.joda.time.base.BasePeriod.mergePeriodInto : goto [?= (branch)] >>>>>>>> org.joda.time.base.BasePeriod.mergePeriodInto : if i0 >= i1
