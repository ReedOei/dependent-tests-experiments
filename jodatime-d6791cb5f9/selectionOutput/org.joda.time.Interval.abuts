org.joda.time.Interval.abuts : if r1 != null >>>>>>>> org.joda.time.Interval.abuts : l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>()
org.joda.time.Interval.abuts : if r1 != null >>>>>>>> org.joda.time.Interval.abuts : $l5 = interfaceinvoke r1.<org.joda.time.ReadableInterval: long getEndMillis()>()
org.joda.time.Interval.abuts : $l5 = interfaceinvoke r1.<org.joda.time.ReadableInterval: long getEndMillis()>() >>>>>>>> org.joda.time.Interval.abuts : $l6 = virtualinvoke r0.<org.joda.time.Interval: long getStartMillis()>()
org.joda.time.Interval.abuts : $l6 = virtualinvoke r0.<org.joda.time.Interval: long getStartMillis()>() >>>>>>>> org.joda.time.Interval.abuts : $b7 = $l5 cmp $l6
org.joda.time.Interval.abuts : $b7 = $l5 cmp $l6 >>>>>>>> org.joda.time.Interval.abuts : if $b7 == 0
org.joda.time.Interval.abuts : if $b7 == 0 >>>>>>>> org.joda.time.Interval.abuts : $l8 = virtualinvoke r0.<org.joda.time.Interval: long getEndMillis()>()
org.joda.time.Interval.abuts : if $b7 == 0 >>>>>>>> org.joda.time.Interval.abuts : $z1 = 1
org.joda.time.Interval.abuts : $z1 = 1 >>>>>>>> org.joda.time.Interval.abuts : goto [?= return $z1]
org.joda.time.Interval.abuts : goto [?= return $z1] >>>>>>>> org.joda.time.Interval.abuts : return $z1
org.joda.time.Interval.abuts : $l8 = virtualinvoke r0.<org.joda.time.Interval: long getEndMillis()>() >>>>>>>> org.joda.time.Interval.abuts : $l9 = interfaceinvoke r1.<org.joda.time.ReadableInterval: long getStartMillis()>()
org.joda.time.Interval.abuts : $l9 = interfaceinvoke r1.<org.joda.time.ReadableInterval: long getStartMillis()>() >>>>>>>> org.joda.time.Interval.abuts : $b10 = $l8 cmp $l9
org.joda.time.Interval.abuts : $b10 = $l8 cmp $l9 >>>>>>>> org.joda.time.Interval.abuts : if $b10 != 0
org.joda.time.Interval.abuts : if $b10 != 0 >>>>>>>> org.joda.time.Interval.abuts : $z1 = 1
org.joda.time.Interval.abuts : if $b10 != 0 >>>>>>>> org.joda.time.Interval.abuts : $z1 = 0
org.joda.time.Interval.abuts : $z1 = 0 >>>>>>>> org.joda.time.Interval.abuts : return $z1
org.joda.time.Interval.abuts : l0 = staticinvoke <org.joda.time.DateTimeUtils: long currentTimeMillis()>() >>>>>>>> org.joda.time.Interval.abuts : $l1 = virtualinvoke r0.<org.joda.time.Interval: long getStartMillis()>()
org.joda.time.Interval.abuts : $l1 = virtualinvoke r0.<org.joda.time.Interval: long getStartMillis()>() >>>>>>>> org.joda.time.Interval.abuts : $b2 = $l1 cmp l0
org.joda.time.Interval.abuts : $b2 = $l1 cmp l0 >>>>>>>> org.joda.time.Interval.abuts : if $b2 == 0
org.joda.time.Interval.abuts : if $b2 == 0 >>>>>>>> org.joda.time.Interval.abuts : $l3 = virtualinvoke r0.<org.joda.time.Interval: long getEndMillis()>()
org.joda.time.Interval.abuts : if $b2 == 0 >>>>>>>> org.joda.time.Interval.abuts : $z0 = 1
org.joda.time.Interval.abuts : $z0 = 1 >>>>>>>> org.joda.time.Interval.abuts : goto [?= return $z0]
org.joda.time.Interval.abuts : goto [?= return $z0] >>>>>>>> org.joda.time.Interval.abuts : return $z0
org.joda.time.Interval.abuts : $l3 = virtualinvoke r0.<org.joda.time.Interval: long getEndMillis()>() >>>>>>>> org.joda.time.Interval.abuts : $b4 = $l3 cmp l0
org.joda.time.Interval.abuts : $b4 = $l3 cmp l0 >>>>>>>> org.joda.time.Interval.abuts : if $b4 != 0
org.joda.time.Interval.abuts : if $b4 != 0 >>>>>>>> org.joda.time.Interval.abuts : $z0 = 1
org.joda.time.Interval.abuts : if $b4 != 0 >>>>>>>> org.joda.time.Interval.abuts : $z0 = 0
org.joda.time.Interval.abuts : $z0 = 0 >>>>>>>> org.joda.time.Interval.abuts : return $z0
