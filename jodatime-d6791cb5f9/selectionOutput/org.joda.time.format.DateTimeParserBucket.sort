org.joda.time.format.DateTimeParserBucket.sort : if i0 <= 10 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : staticinvoke <java.util.Arrays: void sort(java.lang.Object[],int,int)>(r0, 0, i0)
org.joda.time.format.DateTimeParserBucket.sort : if i0 <= 10 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : i1 = 0
org.joda.time.format.DateTimeParserBucket.sort : i1 = 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : if i1 >= i0
org.joda.time.format.DateTimeParserBucket.sort : if i1 >= i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : i2 = i1
org.joda.time.format.DateTimeParserBucket.sort : if i1 >= i0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : return
org.joda.time.format.DateTimeParserBucket.sort : i2 = i1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : if i2 <= 0
org.joda.time.format.DateTimeParserBucket.sort : if i2 <= 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : $i3 = i2 - 1
org.joda.time.format.DateTimeParserBucket.sort : if i2 <= 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : i1 = i1 + 1
org.joda.time.format.DateTimeParserBucket.sort : i1 = i1 + 1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : goto [?= (branch)]
org.joda.time.format.DateTimeParserBucket.sort : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : if i1 >= i0
org.joda.time.format.DateTimeParserBucket.sort : $i3 = i2 - 1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : $r2 = r0[$i3]
org.joda.time.format.DateTimeParserBucket.sort : $r2 = r0[$i3] >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : $r3 = r0[i2]
org.joda.time.format.DateTimeParserBucket.sort : $r3 = r0[i2] >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : $i4 = virtualinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>($r3)
org.joda.time.format.DateTimeParserBucket.sort : $i4 = virtualinvoke $r2.<org.joda.time.format.DateTimeParserBucket$SavedField: int compareTo(org.joda.time.format.DateTimeParserBucket$SavedField)>($r3) >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : if $i4 <= 0
org.joda.time.format.DateTimeParserBucket.sort : if $i4 <= 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : r1 = r0[i2]
org.joda.time.format.DateTimeParserBucket.sort : if $i4 <= 0 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : i1 = i1 + 1
org.joda.time.format.DateTimeParserBucket.sort : r1 = r0[i2] >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : $i5 = i2 - 1
org.joda.time.format.DateTimeParserBucket.sort : $i5 = i2 - 1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : $r4 = r0[$i5]
org.joda.time.format.DateTimeParserBucket.sort : $r4 = r0[$i5] >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : r0[i2] = $r4
org.joda.time.format.DateTimeParserBucket.sort : r0[i2] = $r4 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : $i6 = i2 - 1
org.joda.time.format.DateTimeParserBucket.sort : $i6 = i2 - 1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : r0[$i6] = r1
org.joda.time.format.DateTimeParserBucket.sort : r0[$i6] = r1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : i2 = i2 + -1
org.joda.time.format.DateTimeParserBucket.sort : i2 = i2 + -1 >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : goto [?= (branch)]
org.joda.time.format.DateTimeParserBucket.sort : goto [?= (branch)] >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : if i2 <= 0
org.joda.time.format.DateTimeParserBucket.sort : staticinvoke <java.util.Arrays: void sort(java.lang.Object[],int,int)>(r0, 0, i0) >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : goto [?= return]
org.joda.time.format.DateTimeParserBucket.sort : goto [?= return] >>>>>>>> org.joda.time.format.DateTimeParserBucket.sort : return
