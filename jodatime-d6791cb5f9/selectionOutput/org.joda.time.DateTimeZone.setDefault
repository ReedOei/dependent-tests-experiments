org.joda.time.DateTimeZone.setDefault : r1 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r1 == null
org.joda.time.DateTimeZone.setDefault : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r2 = new org.joda.time.JodaTimePermission
org.joda.time.DateTimeZone.setDefault : if r1 == null >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r0 != null
org.joda.time.DateTimeZone.setDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r5 = new java.lang.IllegalArgumentException
org.joda.time.DateTimeZone.setDefault : if r0 != null >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone"
org.joda.time.DateTimeZone.setDefault : $r6 = class "org/joda/time/DateTimeZone" >>>>>>>> org.joda.time.DateTimeZone.setDefault : r3 = $r6
org.joda.time.DateTimeZone.setDefault : r3 = $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : entermonitor $r6
org.joda.time.DateTimeZone.setDefault : entermonitor $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0
org.joda.time.DateTimeZone.setDefault : entermonitor $r6 >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r7 := @caughtexception
org.joda.time.DateTimeZone.setDefault : r4 = $r7 >>>>>>>> org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : r4 = $r7 >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r7 := @caughtexception
org.joda.time.DateTimeZone.setDefault : exitmonitor r3 >>>>>>>> org.joda.time.DateTimeZone.setDefault : throw r4
org.joda.time.DateTimeZone.setDefault : exitmonitor r3 >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r7 := @caughtexception
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : exitmonitor r3
org.joda.time.DateTimeZone.setDefault : <org.joda.time.DateTimeZone: org.joda.time.DateTimeZone cDefault> = r0 >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r7 := @caughtexception
org.joda.time.DateTimeZone.setDefault : exitmonitor r3 >>>>>>>> org.joda.time.DateTimeZone.setDefault : goto [?= return]
org.joda.time.DateTimeZone.setDefault : exitmonitor r3 >>>>>>>> org.joda.time.DateTimeZone.setDefault : $r7 := @caughtexception
org.joda.time.DateTimeZone.setDefault : goto [?= return] >>>>>>>> org.joda.time.DateTimeZone.setDefault : return
org.joda.time.DateTimeZone.setDefault : $r5 = new java.lang.IllegalArgumentException >>>>>>>> org.joda.time.DateTimeZone.setDefault : specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The datetime zone must not be null")
org.joda.time.DateTimeZone.setDefault : specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The datetime zone must not be null") >>>>>>>> org.joda.time.DateTimeZone.setDefault : throw $r5
org.joda.time.DateTimeZone.setDefault : $r2 = new org.joda.time.JodaTimePermission >>>>>>>> org.joda.time.DateTimeZone.setDefault : specialinvoke $r2.<org.joda.time.JodaTimePermission: void <init>(java.lang.String)>("DateTimeZone.setDefault")
org.joda.time.DateTimeZone.setDefault : specialinvoke $r2.<org.joda.time.JodaTimePermission: void <init>(java.lang.String)>("DateTimeZone.setDefault") >>>>>>>> org.joda.time.DateTimeZone.setDefault : virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2)
org.joda.time.DateTimeZone.setDefault : virtualinvoke r1.<java.lang.SecurityManager: void checkPermission(java.security.Permission)>($r2) >>>>>>>> org.joda.time.DateTimeZone.setDefault : if r0 != null
