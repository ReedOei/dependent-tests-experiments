org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $r1 = r0.<org.joda.time.chrono.ZonedChronology$ZonedDateTimeField: org.joda.time.DateTimeZone iZone> >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : i1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l0)
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : i1 = virtualinvoke $r1.<org.joda.time.DateTimeZone: int getOffset(long)>(l0) >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $l3 = (long) i1
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $l3 = (long) i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : l2 = l0 + $l3
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : l2 = l0 + $l3 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $l4 = l0 ^ l2
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $l4 = l0 ^ l2 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $b5 = $l4 cmp 0L
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $b5 = $l4 cmp 0L >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : if $b5 >= 0
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : if $b5 >= 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $l6 = (long) i1
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : if $b5 >= 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : return i1
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $l6 = (long) i1 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $l7 = l0 ^ $l6
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $l7 = l0 ^ $l6 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $b8 = $l7 cmp 0L
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $b8 = $l7 cmp 0L >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : if $b8 < 0
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : if $b8 < 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $r2 = new java.lang.ArithmeticException
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : if $b8 < 0 >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : return i1
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : $r2 = new java.lang.ArithmeticException >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Adding time zone offset caused overflow")
org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : specialinvoke $r2.<java.lang.ArithmeticException: void <init>(java.lang.String)>("Adding time zone offset caused overflow") >>>>>>>> org.joda.time.chrono.ZonedChronology$ZonedDateTimeField.getOffsetToAdd : throw $r2
