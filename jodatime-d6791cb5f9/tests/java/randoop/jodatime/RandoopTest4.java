package randoop.jodatime;

import junit.framework.*;

public class RandoopTest4 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test1"); }


    org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.DateTimeFormat.longDate();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.parse("2013-08-29T03:23:40.426+00:00:00.100/2013-08-29T03:23:40.426+00:00:00.100", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test2() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test2"); }


    org.joda.time.Months var1 = org.joda.time.Months.months((-1));
    org.joda.time.Months var3 = var1.plus(100);
    org.joda.time.MutableInterval var4 = new org.joda.time.MutableInterval();
    long var5 = var4.getEndMillis();
    org.joda.time.Months var6 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var4);
    boolean var7 = var3.isGreaterThan(var6);
    org.joda.time.Months var9 = var6.dividedBy(611);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    org.joda.time.Months var16 = org.joda.time.Months.months((-1));
    org.joda.time.Months var18 = var16.plus(100);
    int var19 = var16.size();
    org.joda.time.LocalDate var20 = var12.plus((org.joda.time.ReadablePeriod)var16);
    org.joda.time.Months var21 = var16.negated();
    org.joda.time.Months var22 = var21.negated();
    boolean var23 = var9.isGreaterThan(var21);
    org.joda.time.Months var25 = var9.multipliedBy(24414169);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test3"); }


    org.joda.time.MutableDateTime var1 = new org.joda.time.MutableDateTime();
    var1.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var1.setChronology((org.joda.time.Chronology)var4);
    org.joda.time.DateTimeField var6 = var4.clockhourOfHalfday();
    org.joda.time.YearMonth var7 = new org.joda.time.YearMonth((org.joda.time.Chronology)var4);
    org.joda.time.Period var8 = new org.joda.time.Period(2762381894421796L, (org.joda.time.Chronology)var4);
    org.joda.time.DateTimeField var9 = var4.yearOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test4() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test4"); }


    org.joda.time.LocalDateTime var1 = org.joda.time.LocalDateTime.now();
    int var2 = var1.getDayOfYear();
    org.joda.time.Chronology var3 = var1.getChronology();
    org.joda.time.chrono.StrictChronology var4 = org.joda.time.chrono.StrictChronology.getInstance(var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.withMonthOfYear(1);
    org.joda.time.LocalDate var11 = var7.withWeekyear(1);
    org.joda.time.LocalDate var13 = var7.withDayOfYear(1);
    org.joda.time.LocalDate var15 = var13.minusMonths(16);
    boolean var16 = var4.equals((java.lang.Object)16);
    org.joda.time.YearMonth var17 = new org.joda.time.YearMonth(0L, (org.joda.time.Chronology)var4);
    java.lang.String var18 = var17.toString();
    org.joda.time.YearMonth var20 = var17.plusYears(21);
    java.lang.String var21 = var17.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "1970-01"+ "'", var18.equals("1970-01"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "1970-01"+ "'", var21.equals("1970-01"));

  }

  public void test5() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test5"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var15.toDateTimeAtMidnight();
    org.joda.time.DateTime var20 = var18.withCenturyOfEra(4);
    org.joda.time.Days var21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var20);
    org.joda.time.DateTime var23 = var20.plusSeconds(10);
    org.joda.time.DateTime var25 = var23.minusMinutes(16);
    org.joda.time.DateTime var27 = var25.withWeekyear(16);
    org.joda.time.DateTime var29 = var25.withWeekOfWeekyear(3);
    org.joda.time.format.DateTimeFormatterBuilder var30 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var32 = var30.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var34 = var30.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var35 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var36 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var35);
    org.joda.time.LocalDate var37 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var35);
    org.joda.time.DateTimeField var38 = var35.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var39 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var40);
    org.joda.time.LocalDate var42 = var41.toLocalDate();
    org.joda.time.LocalDate var44 = var42.minusMonths(0);
    int[] var46 = var39.get((org.joda.time.ReadablePartial)var44, 100L);
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.hours();
    org.joda.time.LocalTime var52 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var50);
    org.joda.time.Period var53 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var50);
    org.joda.time.DateTimeField var54 = var50.millisOfSecond();
    org.joda.time.DateTimeField var55 = var50.secondOfDay();
    org.joda.time.field.SkipDateTimeField var57 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var39, var55, 100);
    org.joda.time.LocalDateTime var58 = org.joda.time.LocalDateTime.now();
    int var59 = var58.getDayOfYear();
    org.joda.time.Chronology var60 = var58.getChronology();
    int var61 = var58.getYearOfCentury();
    int var62 = var57.getMaximumValue((org.joda.time.ReadablePartial)var58);
    boolean var64 = var57.isLeap(1L);
    org.joda.time.LocalDateTime var65 = org.joda.time.LocalDateTime.now();
    int var66 = var65.getDayOfYear();
    int var67 = var57.getMinimumValue((org.joda.time.ReadablePartial)var65);
    org.joda.time.DurationField var68 = var57.getDurationField();
    org.joda.time.DateTimeFieldType var69 = var57.getType();
    org.joda.time.field.OffsetDateTimeField var73 = new org.joda.time.field.OffsetDateTimeField(var38, var69, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var76 = new org.joda.time.IllegalFieldValueException(var69, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var79 = var30.appendFraction(var69, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var80 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var81 = var80.minutes();
    org.joda.time.DateTimeField var82 = var80.year();
    org.joda.time.DurationField var83 = var80.hours();
    org.joda.time.field.UnsupportedDateTimeField var84 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var69, var83);
    org.joda.time.DateTimeFieldType var85 = var84.getType();
    int var86 = var29.get(var85);
    org.joda.time.TimeOfDay var87 = var29.toTimeOfDay();
    org.joda.time.TimeOfDay.Property var88 = var87.hourOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 85450);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test6"); }


    org.joda.time.format.PeriodFormatter var0 = org.joda.time.format.PeriodFormat.getDefault();
    org.joda.time.format.PeriodPrinter var1 = var0.getPrinter();
    org.joda.time.format.PeriodParser var2 = var0.getParser();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test7() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test7"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var2 = var0.withMillis(0L);
    org.joda.time.DateTime var4 = var2.plusHours(2013);
    org.joda.time.chrono.ISOChronology var5 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var10 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var12 = var10.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var14 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstance(var14);
    long var17 = var10.getMillisKeepLocal(var14, 1377746580759L);
    org.joda.time.Chronology var18 = var5.withZone(var14);
    org.joda.time.DateTimeZone var20 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.chrono.ISOChronology var21 = org.joda.time.chrono.ISOChronology.getInstance(var20);
    org.joda.time.Chronology var22 = var5.withZone(var20);
    org.joda.time.DateTime var23 = var2.toDateTime(var20);
    org.joda.time.DateTime.Property var24 = var2.millisOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test8"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusYears((-1));
    org.joda.time.Minutes var7 = var4.toStandardMinutes();
    org.joda.time.Minutes var9 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var10 = var7.minus(var9);
    org.joda.time.Period var15 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var17 = var15.plusYears((-1));
    org.joda.time.Minutes var18 = var15.toStandardMinutes();
    org.joda.time.Minutes var19 = var7.plus(var18);
    org.joda.time.DurationFieldType var20 = var19.getFieldType();
    org.joda.time.Seconds var21 = var19.toStandardSeconds();
    org.joda.time.Hours var22 = var21.toStandardHours();
    org.joda.time.Seconds var23 = var21.negated();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test9() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test9"); }


    org.joda.time.Partial var0 = new org.joda.time.Partial();
    java.lang.String var1 = var0.toString();
    org.joda.time.Duration var3 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    var4.setWeekOfWeekyear(1);
    int var7 = var4.getRoundingMode();
    var4.addMillis(100);
    var4.setSecondOfMinute(10);
    org.joda.time.PeriodType var12 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var13 = new org.joda.time.Period((org.joda.time.ReadableDuration)var3, (org.joda.time.ReadableInstant)var4, var12);
    org.joda.time.Days var14 = var13.toStandardDays();
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.Period var21 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var23 = var21.plusSeconds(100);
    org.joda.time.Period var25 = var21.minusMillis(10);
    boolean var26 = var16.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var27 = var16.dayOfYear();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.LocalDate var30 = var29.toLocalDate();
    org.joda.time.LocalDate var32 = var30.minusMonths(0);
    org.joda.time.DateTime var33 = var30.toDateTimeAtMidnight();
    org.joda.time.DateTime var35 = var33.withCenturyOfEra(4);
    org.joda.time.Days var36 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var16, (org.joda.time.ReadableInstant)var35);
    org.joda.time.Days var38 = var36.dividedBy(1);
    boolean var39 = var14.isGreaterThan(var36);
    org.joda.time.DurationFieldType var40 = var14.getFieldType();
    org.joda.time.Seconds var41 = var14.toStandardSeconds();
    org.joda.time.Partial var42 = var0.minus((org.joda.time.ReadablePeriod)var41);
    org.joda.time.TimeOfDay var43 = new org.joda.time.TimeOfDay();
    int var44 = var43.size();
    org.joda.time.TimeOfDay var46 = var43.withMillisOfSecond(1);
    org.joda.time.Years var48 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var49 = var48.getPeriodType();
    org.joda.time.Years var51 = org.joda.time.Years.years((-1));
    int var52 = var48.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var51);
    org.joda.time.Years var54 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var55 = var54.getPeriodType();
    org.joda.time.Years var56 = var51.minus(var54);
    org.joda.time.TimeOfDay var57 = var46.minus((org.joda.time.ReadablePeriod)var51);
    boolean var58 = var0.isMatch((org.joda.time.ReadablePartial)var46);
    org.joda.time.Period var63 = new org.joda.time.Period(1, 10, 10, 1);
    int var64 = var63.getWeeks();
    org.joda.time.Period var65 = var63.toPeriod();
    int var66 = var65.getMonths();
    org.joda.time.Partial var67 = var0.plus((org.joda.time.ReadablePeriod)var65);
    org.joda.time.Chronology var68 = var0.getChronology();
    org.joda.time.Partial var69 = new org.joda.time.Partial(var68);
    org.joda.time.chrono.ISOChronology var70 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var75 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var77 = var75.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var79 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var80 = org.joda.time.chrono.JulianChronology.getInstance(var79);
    long var82 = var75.getMillisKeepLocal(var79, 1377746580759L);
    org.joda.time.Chronology var83 = var70.withZone(var79);
    org.joda.time.MonthDay var84 = org.joda.time.MonthDay.now(var79);
    boolean var85 = var69.isMatch((org.joda.time.ReadablePartial)var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);

  }

  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test10"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    int var21 = var18.getMaximumValue(2762381894421796L);
    long var24 = var18.getDifferenceAsLong((-7200000L), 35L);
    long var26 = var18.roundCeiling((-7200000L));
    org.joda.time.DurationField var27 = var18.getDurationField();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-7200L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-7199100L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test11() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test11"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var15.toDateTimeAtMidnight();
    org.joda.time.DateTime var20 = var18.withCenturyOfEra(4);
    org.joda.time.Days var21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var20);
    org.joda.time.DateTime var23 = var20.plusSeconds(10);
    org.joda.time.tz.FixedDateTimeZone var28 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.DateTime var29 = var20.toDateTime((org.joda.time.DateTimeZone)var28);
    org.joda.time.Period var34 = new org.joda.time.Period(1, 10, 10, 1);
    int var35 = var34.getWeeks();
    org.joda.time.Period var36 = var34.toPeriod();
    org.joda.time.DateTime var37 = var29.minus((org.joda.time.ReadablePeriod)var36);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var42 = var37.withTime(928, 11, 41, 227);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test12() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test12"); }


    org.joda.time.DateTimeZone var4 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.chrono.ISOChronology var5 = org.joda.time.chrono.ISOChronology.getInstance(var4);
    org.joda.time.DurationField var6 = var5.millis();
    org.joda.time.DateTimeZone var8 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.YearMonth var9 = new org.joda.time.YearMonth(var8);
    org.joda.time.chrono.IslamicChronology var10 = org.joda.time.chrono.IslamicChronology.getInstance(var8);
    org.joda.time.tz.FixedDateTimeZone var15 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    org.joda.time.chrono.ISOChronology var16 = org.joda.time.chrono.ISOChronology.getInstance((org.joda.time.DateTimeZone)var15);
    org.joda.time.Chronology var17 = var10.withZone((org.joda.time.DateTimeZone)var15);
    org.joda.time.Chronology var18 = var5.withZone((org.joda.time.DateTimeZone)var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDate var19 = new org.joda.time.LocalDate(632587, 632587, 1039, var18);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test13"); }


    org.joda.time.DateTimeUtils.setCurrentMillisOffset((-7199100L));

  }

  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test14"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstance(var1);
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.now((org.joda.time.Chronology)var2);
    org.joda.time.PeriodType var4 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var5 = new org.joda.time.MutablePeriod(var4);
    var5.addDays(1);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    var5.add((org.joda.time.ReadableDuration)var11);
    org.joda.time.MutableDateTime var14 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var11, (org.joda.time.ReadableInstant)var14);
    var15.setSeconds(1);
    int var18 = var15.getSeconds();
    org.joda.time.PeriodType var19 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var20 = new org.joda.time.MutablePeriod(var19);
    var20.addDays(1);
    org.joda.time.Duration var24 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var26 = org.joda.time.Duration.standardHours((-1L));
    boolean var27 = var24.isShorterThan((org.joda.time.ReadableDuration)var26);
    var20.add((org.joda.time.ReadableDuration)var26);
    org.joda.time.DateTime var29 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var31 = var29.withMillis(0L);
    org.joda.time.MutablePeriod var32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var26, (org.joda.time.ReadableInstant)var31);
    org.joda.time.Duration var34 = var26.withMillis(1377742981948L);
    var15.add((org.joda.time.ReadableDuration)var26);
    boolean var36 = var3.equals((java.lang.Object)var15);
    org.joda.time.chrono.JulianChronology var38 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var39 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var38);
    org.joda.time.Period var44 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var46 = var44.plusSeconds(100);
    org.joda.time.Period var48 = var44.minusMillis(10);
    boolean var49 = var39.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var50 = var39.dayOfYear();
    org.joda.time.chrono.JulianChronology var51 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var52 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var51);
    org.joda.time.LocalDate var53 = var52.toLocalDate();
    org.joda.time.LocalDate var55 = var53.minusMonths(0);
    org.joda.time.DateTime var56 = var53.toDateTimeAtMidnight();
    org.joda.time.DateTime var58 = var56.withCenturyOfEra(4);
    org.joda.time.Days var59 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var39, (org.joda.time.ReadableInstant)var58);
    org.joda.time.DateTime var61 = var58.plusSeconds(10);
    org.joda.time.tz.FixedDateTimeZone var66 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.DateTime var67 = var58.toDateTime((org.joda.time.DateTimeZone)var66);
    org.joda.time.chrono.CopticChronology var68 = org.joda.time.chrono.CopticChronology.getInstance((org.joda.time.DateTimeZone)var66);
    org.joda.time.YearMonthDay var69 = new org.joda.time.YearMonthDay((-703463L), (org.joda.time.Chronology)var68);
    org.joda.time.DateTimeFieldType[] var70 = var69.getFieldTypes();
    boolean var71 = var15.equals((java.lang.Object)var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test15"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusDays((-1));
    org.joda.time.DateMidnight var5 = var4.toDateMidnight();
    int var6 = var4.getYear();
    org.joda.time.format.DateTimeFormatter var7 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.chrono.LenientChronology var16 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var11);
    org.joda.time.format.DateTimeFormatter var17 = var7.withChronology((org.joda.time.Chronology)var16);
    org.joda.time.chrono.ISOChronology var18 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var23 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var25 = var23.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var26 = var18.withZone((org.joda.time.DateTimeZone)var23);
    long var28 = var23.nextTransition(9L);
    org.joda.time.Chronology var29 = var16.withZone((org.joda.time.DateTimeZone)var23);
    org.joda.time.Interval var30 = var4.toInterval((org.joda.time.DateTimeZone)var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2005);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 9L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test16"); }


    org.joda.time.Instant var0 = new org.joda.time.Instant();
    org.joda.time.Instant var1 = var0.toInstant();
    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var3 = new org.joda.time.MutablePeriod(var2);
    var3.addDays(1);
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    boolean var10 = var7.isShorterThan((org.joda.time.ReadableDuration)var9);
    var3.add((org.joda.time.ReadableDuration)var9);
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    boolean var16 = var13.isShorterThan((org.joda.time.ReadableDuration)var15);
    org.joda.time.Duration var17 = var13.toDuration();
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.MutableDateTime var21 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var22 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var19, (org.joda.time.ReadableInstant)var21);
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var24 = var23.year();
    boolean var25 = var21.isBefore((org.joda.time.ReadableInstant)var23);
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    boolean var30 = var27.isShorterThan((org.joda.time.ReadableDuration)var29);
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    boolean var35 = var32.isShorterThan((org.joda.time.ReadableDuration)var34);
    org.joda.time.Duration var36 = var27.plus((org.joda.time.ReadableDuration)var32);
    var23.add((org.joda.time.ReadableDuration)var32);
    org.joda.time.PeriodType var38 = org.joda.time.PeriodType.months();
    org.joda.time.Period var39 = new org.joda.time.Period((org.joda.time.ReadableDuration)var13, (org.joda.time.ReadableInstant)var23, var38);
    org.joda.time.Period var40 = new org.joda.time.Period((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableDuration)var9, var38);
    int var41 = var40.getWeeks();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Period var43 = var40.withYears(24424);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);

  }

  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test17"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.DateMidnight var6 = var1.withWeekOfWeekyear(35);
    org.joda.time.DateMidnight var8 = var6.minusWeeks((-948));
    long var9 = var6.getMillis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1378944000000L);

  }

  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test18"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var11 = var10.year();
    boolean var12 = var8.isBefore((org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    org.joda.time.Duration var23 = var14.plus((org.joda.time.ReadableDuration)var19);
    var10.add((org.joda.time.ReadableDuration)var19);
    org.joda.time.Seconds var25 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var10);
    java.lang.String var26 = var10.toString();
    org.joda.time.format.DateTimeFormatterBuilder var27 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var29 = var27.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var31 = var27.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var32);
    org.joda.time.DateTimeField var35 = var32.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var36 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var37 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var38 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var37);
    org.joda.time.LocalDate var39 = var38.toLocalDate();
    org.joda.time.LocalDate var41 = var39.minusMonths(0);
    int[] var43 = var36.get((org.joda.time.ReadablePartial)var41, 100L);
    org.joda.time.chrono.EthiopicChronology var47 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var48 = var47.hours();
    org.joda.time.LocalTime var49 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var47);
    org.joda.time.Period var50 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var47);
    org.joda.time.DateTimeField var51 = var47.millisOfSecond();
    org.joda.time.DateTimeField var52 = var47.secondOfDay();
    org.joda.time.field.SkipDateTimeField var54 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var36, var52, 100);
    org.joda.time.LocalDateTime var55 = org.joda.time.LocalDateTime.now();
    int var56 = var55.getDayOfYear();
    org.joda.time.Chronology var57 = var55.getChronology();
    int var58 = var55.getYearOfCentury();
    int var59 = var54.getMaximumValue((org.joda.time.ReadablePartial)var55);
    boolean var61 = var54.isLeap(1L);
    org.joda.time.LocalDateTime var62 = org.joda.time.LocalDateTime.now();
    int var63 = var62.getDayOfYear();
    int var64 = var54.getMinimumValue((org.joda.time.ReadablePartial)var62);
    org.joda.time.DurationField var65 = var54.getDurationField();
    org.joda.time.DateTimeFieldType var66 = var54.getType();
    org.joda.time.field.OffsetDateTimeField var70 = new org.joda.time.field.OffsetDateTimeField(var35, var66, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var73 = new org.joda.time.IllegalFieldValueException(var66, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var76 = var27.appendFraction(var66, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var77 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var78 = var77.minutes();
    org.joda.time.DateTimeField var79 = var77.year();
    org.joda.time.DurationField var80 = var77.hours();
    org.joda.time.field.UnsupportedDateTimeField var81 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var66, var80);
    org.joda.time.MutableDateTime.Property var82 = var10.property(var66);
    org.joda.time.DateTimeComparator var83 = org.joda.time.DateTimeComparator.getInstance(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "2013-08-29T00:23:51.041+00:00:00.100"+ "'", var26.equals("2013-08-29T00:23:51.041+00:00:00.100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test19() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test19"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    org.joda.time.DurationField var20 = var18.getLeapDurationField();
    long var23 = var18.addWrapField((-3600L), 13);
    org.joda.time.DateTimeField var24 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField)var18);
    int var27 = var18.getDifference((-1L), 1377742992241L);
    long var29 = var18.roundFloor(1377746581241L);
    java.lang.String var31 = var18.getAsText(1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-86390600L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1377742992));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1377746580900L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "0"+ "'", var31.equals("0"));

  }

  public void test20() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test20"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    long var57 = var54.add((-1000L), 1377742981L);
    int var60 = var54.getDifference((-1000L), (-3600L));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var62 = var54.roundHalfEven(604800000L);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 4959874731599000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);

  }

  public void test21() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test21"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.DateMidnight var25 = var22.minusWeeks((-1));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    var28.setWeekOfWeekyear(1);
    int var31 = var28.getRoundingMode();
    var28.addMillis(100);
    var28.setSecondOfMinute(10);
    org.joda.time.PeriodType var36 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var37 = new org.joda.time.Period((org.joda.time.ReadableDuration)var27, (org.joda.time.ReadableInstant)var28, var36);
    org.joda.time.Days var38 = var37.toStandardDays();
    org.joda.time.DurationFieldType var39 = var38.getFieldType();
    org.joda.time.DateMidnight var41 = var25.withFieldAdded(var39, 1);
    org.joda.time.DateMidnight var43 = var4.withFieldAdded(var39, 13);
    org.joda.time.DateMidnight var45 = var43.plusDays(35);
    java.lang.String var46 = var45.toString();
    org.joda.time.DateMidnight var48 = var45.minus(1377768182707L);
    org.joda.time.DateMidnight var50 = var48.withYearOfEra(47);
    org.joda.time.Duration var52 = org.joda.time.Duration.standardMinutes((-62156990340999L));
    long var53 = var52.getStandardSeconds();
    org.joda.time.DateMidnight var54 = var48.minus((org.joda.time.ReadableDuration)var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "2013-10-10T00:00:00.000Z"+ "'", var46.equals("2013-10-10T00:00:00.000Z"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-3729419420459940L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test22() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test22"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    int var24 = var19.getSecondOfMinute();
    int var25 = var19.getDayOfYear();
    org.joda.time.LocalDateTime var27 = var19.withMillisOfSecond(692);
    org.joda.time.LocalDateTime.Property var28 = var19.weekyear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test23() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test23"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.DateTimeFormat.shortDateTime();
    org.joda.time.TimeOfDay var1 = new org.joda.time.TimeOfDay();
    int var2 = var1.size();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var5 = var4.hours();
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var4);
    org.joda.time.LocalTime var8 = var6.withMillisOfSecond(1);
    org.joda.time.LocalTime var10 = var8.minusHours((-1));
    org.joda.time.Years var11 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var1, (org.joda.time.ReadablePartial)var10);
    int var12 = var1.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var14 = var1.withChronologyRetainFields((org.joda.time.Chronology)var13);
    org.joda.time.format.DateTimeFormatter var15 = var0.withChronology((org.joda.time.Chronology)var13);
    org.joda.time.DateTimeZone var16 = var13.getZone();
    org.joda.time.chrono.EthiopicChronology var17 = org.joda.time.chrono.EthiopicChronology.getInstance(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 197);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test24() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test24"); }


    org.joda.time.format.PeriodFormatterBuilder var0 = new org.joda.time.format.PeriodFormatterBuilder();
    org.joda.time.format.PeriodFormatterBuilder var2 = var0.maximumParsedDigits(216);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test25"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    long var1 = var0.getMillis();
    org.joda.time.DateTime.Property var2 = var0.yearOfEra();
    org.joda.time.DateTime var4 = var0.withMillisOfDay(216);
    long var5 = var4.getMillis();
    org.joda.time.DateMidnight var6 = var4.toDateMidnight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1377739431138L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1377734400116L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test26() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test26"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var2.withWeekyear(1);
    org.joda.time.LocalDate var8 = var2.withDayOfYear(1);
    org.joda.time.format.DateTimeFormatter var9 = org.joda.time.format.ISODateTimeFormat.weekDateTimeNoMillis();
    java.lang.String var10 = var8.toString(var9);
    int var11 = var8.getMonthOfYear();
    org.joda.time.Minutes var13 = org.joda.time.Minutes.minutes(100);
    org.joda.time.LocalDate var14 = var8.plus((org.joda.time.ReadablePeriod)var13);
    org.joda.time.Minutes var16 = var13.minus(42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "2013-W01-1T\uFFFD\uFFFD:\uFFFD\uFFFD:\uFFFD\uFFFD"+ "'", var10.equals("2013-W01-1T\uFFFD\uFFFD:\uFFFD\uFFFD:\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test27"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    int var13 = var1.getSecondOfDay();
    org.joda.time.DateMidnight var15 = var1.withWeekyear(240);
    org.joda.time.DateMidnight var17 = var15.minusMonths(28);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardSeconds(1377742981948L);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    boolean var32 = var29.isShorterThan((org.joda.time.ReadableDuration)var31);
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    boolean var37 = var34.isShorterThan((org.joda.time.ReadableDuration)var36);
    org.joda.time.Duration var38 = var29.plus((org.joda.time.ReadableDuration)var34);
    var25.add((org.joda.time.ReadableDuration)var34);
    org.joda.time.MutableDateTime.Property var40 = var25.weekyear();
    org.joda.time.MutableDateTime.Property var41 = var25.year();
    boolean var43 = var25.equals((java.lang.Object)(byte)0);
    var25.addDays(216);
    org.joda.time.Period var46 = var19.toPeriodFrom((org.joda.time.ReadableInstant)var25);
    java.util.GregorianCalendar var47 = var25.toGregorianCalendar();
    var25.addMillis(12200);
    org.joda.time.Days var50 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var17, (org.joda.time.ReadableInstant)var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateMidnight var52 = var17.withYearOfCentury(768);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test28"); }


    org.joda.time.Instant var0 = org.joda.time.Instant.now();
    org.joda.time.DateTime var1 = var0.toDateTimeISO();
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = var3.toLocalDate();
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var6 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var5);
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var8 = var7.year();
    boolean var9 = var5.isBefore((org.joda.time.ReadableInstant)var7);
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    boolean var14 = var11.isShorterThan((org.joda.time.ReadableDuration)var13);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    boolean var19 = var16.isShorterThan((org.joda.time.ReadableDuration)var18);
    org.joda.time.Duration var20 = var11.plus((org.joda.time.ReadableDuration)var16);
    var7.add((org.joda.time.ReadableDuration)var16);
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.LocalDate var24 = var23.toLocalDate();
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var26 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableInstant)var25);
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var28 = var27.year();
    boolean var29 = var25.isBefore((org.joda.time.ReadableInstant)var27);
    org.joda.time.Interval var30 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var27);
    org.joda.time.DateTimeZone var31 = var27.getZone();
    org.joda.time.Hours var32 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var27);
    var27.setTime(3600001L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var27.setTime(104, 1970, 452, 948);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test29() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test29"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.MutableDateTime.Property var20 = var5.dayOfWeek();
    var5.addMonths((-9));
    org.joda.time.MutableDateTime.Property var23 = var5.era();
    org.joda.time.MutableDateTime.Property var24 = var5.millisOfDay();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.setSecondOfMinute(86399);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test30() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test30"); }


    org.joda.time.MutableDateTime var0 = org.joda.time.MutableDateTime.now();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.withMonthOfYear(1);
    org.joda.time.LocalDate var7 = var5.withEra(1);
    int var8 = var7.getDayOfYear();
    org.joda.time.chrono.IslamicChronology var9 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
    org.joda.time.format.DateTimeFormatter var10 = org.joda.time.format.ISODateTimeFormat.localDateParser();
    org.joda.time.DateTimeZone var11 = var10.getZone();
    org.joda.time.Chronology var12 = var9.withZone(var11);
    org.joda.time.Interval var13 = var7.toInterval(var11);
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var14);
    org.joda.time.LocalDate var16 = var15.toLocalDate();
    org.joda.time.LocalDate var18 = var16.minusMonths(0);
    org.joda.time.DateTime var19 = var18.toDateTimeAtMidnight();
    int var20 = var7.compareTo((org.joda.time.ReadablePartial)var18);
    org.joda.time.DateTimeZone var22 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var23 = org.joda.time.DateTimeUtils.getZone(var22);
    org.joda.time.LocalDateTime var24 = new org.joda.time.LocalDateTime(var22);
    org.joda.time.MonthDay var25 = new org.joda.time.MonthDay(var22);
    org.joda.time.DateMidnight var26 = var18.toDateMidnight(var22);
    org.joda.time.chrono.EthiopicChronology var27 = org.joda.time.chrono.EthiopicChronology.getInstance(var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableInterval var28 = new org.joda.time.MutableInterval((java.lang.Object)var0, (org.joda.time.Chronology)var27);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test31() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test31"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var2 = org.joda.time.DateTimeUtils.getZone(var1);
    org.joda.time.LocalDateTime var3 = new org.joda.time.LocalDateTime(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.chrono.EthiopicChronology var5 = org.joda.time.chrono.EthiopicChronology.getInstance(var1, 331);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test32"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var2 = org.joda.time.MutableDateTime.now(var1);
    org.joda.time.MonthDay var3 = org.joda.time.MonthDay.now(var1);
    java.lang.String var5 = var3.toString("20:23:00.489");
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var9);
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var12 = var11.year();
    boolean var13 = var9.isBefore((org.joda.time.ReadableInstant)var11);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    var16.setWeekOfWeekyear(1);
    int var19 = var16.getRoundingMode();
    var16.addMillis(100);
    var16.setSecondOfMinute(10);
    org.joda.time.PeriodType var24 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var25 = new org.joda.time.Period((org.joda.time.ReadableDuration)var15, (org.joda.time.ReadableInstant)var16, var24);
    org.joda.time.Days var26 = var25.toStandardDays();
    org.joda.time.Duration var27 = var26.toStandardDuration();
    org.joda.time.MutableInterval var28 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)var11, (org.joda.time.ReadablePeriod)var26);
    org.joda.time.Days var30 = var26.plus(23);
    org.joda.time.MonthDay var31 = var3.minus((org.joda.time.ReadablePeriod)var26);
    org.joda.time.MonthDay var33 = var31.plusMonths(8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "20:23:00.489"+ "'", var5.equals("20:23:00.489"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test33"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.field.PreciseDurationField var22 = new org.joda.time.field.PreciseDurationField(var18, 1L);
    org.joda.time.DurationFieldType var23 = var22.getType();
    org.joda.time.field.UnsupportedDurationField var24 = org.joda.time.field.UnsupportedDurationField.getInstance(var23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var27 = var24.getDifference((-1377734400000L), (-7200L));
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test34"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = var4.toLocalDate();
    org.joda.time.DateMidnight var7 = var4.minusWeeks((-1));
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    var10.setWeekOfWeekyear(1);
    int var13 = var10.getRoundingMode();
    var10.addMillis(100);
    var10.setSecondOfMinute(10);
    org.joda.time.PeriodType var18 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var19 = new org.joda.time.Period((org.joda.time.ReadableDuration)var9, (org.joda.time.ReadableInstant)var10, var18);
    org.joda.time.Days var20 = var19.toStandardDays();
    org.joda.time.DurationFieldType var21 = var20.getFieldType();
    org.joda.time.DateMidnight var23 = var7.withFieldAdded(var21, 1);
    org.joda.time.MutableInterval var24 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var25 = var24.copy();
    org.joda.time.DateTime var26 = var25.getStart();
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var32 = var28.toDuration();
    org.joda.time.chrono.JulianChronology var33 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var34 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var33);
    org.joda.time.LocalDate var35 = var34.toLocalDate();
    org.joda.time.MutableDateTime var36 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var37 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var34, (org.joda.time.ReadableInstant)var36);
    org.joda.time.MutableDateTime var38 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var39 = var38.year();
    boolean var40 = var36.isBefore((org.joda.time.ReadableInstant)var38);
    org.joda.time.Duration var42 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    boolean var45 = var42.isShorterThan((org.joda.time.ReadableDuration)var44);
    org.joda.time.Duration var47 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    boolean var50 = var47.isShorterThan((org.joda.time.ReadableDuration)var49);
    org.joda.time.Duration var51 = var42.plus((org.joda.time.ReadableDuration)var47);
    var38.add((org.joda.time.ReadableDuration)var47);
    org.joda.time.PeriodType var53 = org.joda.time.PeriodType.months();
    org.joda.time.Period var54 = new org.joda.time.Period((org.joda.time.ReadableDuration)var28, (org.joda.time.ReadableInstant)var38, var53);
    org.joda.time.MutablePeriod var55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var26, var53);
    org.joda.time.DateMidnight var57 = var7.withYear(33);
    org.joda.time.MutablePeriod var58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var7);
    var0.addDays(24414959);
    var0.addHours(85516010);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test35"); }


    org.joda.time.chrono.GJChronology var0 = org.joda.time.chrono.GJChronology.getInstanceUTC();
    java.lang.String var1 = var0.toString();
    org.joda.time.DurationField var2 = var0.eras();
    org.joda.time.Period var4 = org.joda.time.Period.days(1);
    org.joda.time.Period var6 = var4.minusHours(0);
    boolean var7 = var0.equals((java.lang.Object)var6);
    org.joda.time.DateTimeField var8 = var0.monthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "GJChronology[UTC]"+ "'", var1.equals("GJChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test36"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var2);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var8 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var7);
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var10 = var9.year();
    boolean var11 = var7.isBefore((org.joda.time.ReadableInstant)var9);
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    boolean var16 = var13.isShorterThan((org.joda.time.ReadableDuration)var15);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    org.joda.time.Duration var22 = var13.plus((org.joda.time.ReadableDuration)var18);
    var9.add((org.joda.time.ReadableDuration)var18);
    var9.setHourOfDay(10);
    org.joda.time.Years var26 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var9);
    org.joda.time.chrono.EthiopicChronology var27 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var28 = var27.minutes();
    org.joda.time.Chronology var29 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology)var27);
    var9.setChronology(var29);
    int var33 = var0.parseInto((org.joda.time.ReadWritableInstant)var9, "2013-08-16", 16);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var35 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var34);
    org.joda.time.LocalDate var36 = var35.toLocalDate();
    org.joda.time.LocalDate var38 = var36.minusMonths(0);
    org.joda.time.DateTime var39 = var36.toDateTimeAtMidnight();
    org.joda.time.DateTime var41 = var39.withMillis(100L);
    int var42 = var39.getWeekyear();
    org.joda.time.LocalDateTime var43 = var39.toLocalDateTime();
    org.joda.time.LocalTime var44 = var39.toLocalTime();
    org.joda.time.DateTime var46 = var39.minusSeconds(35);
    java.lang.String var47 = var0.print((org.joda.time.ReadableInstant)var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-17));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 2013);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "20130816T000000+0000"+ "'", var47.equals("20130816T000000+0000"));

  }

  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test37"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusDays((-1));
    org.joda.time.DateTime var5 = var4.toDateTimeAtCurrentTime();
    org.joda.time.chrono.ISOChronology var6 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var11 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var13 = var11.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var14 = var6.withZone((org.joda.time.DateTimeZone)var11);
    org.joda.time.LocalTime var15 = new org.joda.time.LocalTime((org.joda.time.DateTimeZone)var11);
    org.joda.time.DateTime var16 = var4.toDateTimeAtMidnight((org.joda.time.DateTimeZone)var11);
    long var18 = var11.previousTransition(3600001L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 3600001L);

  }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test38"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstance(var1);
    org.joda.time.chrono.IslamicChronology var3 = org.joda.time.chrono.IslamicChronology.getInstance(var1);
    org.joda.time.DateTime var4 = org.joda.time.DateTime.now(var1);
    org.joda.time.DateTime var5 = org.joda.time.DateTime.now();
    long var6 = var5.getMillis();
    org.joda.time.DateTime.Property var7 = var5.yearOfEra();
    org.joda.time.DateTime var9 = var5.withMillisOfDay(216);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.DateMidnight var14 = var11.minusWeeks((-1));
    org.joda.time.DateMidnight var16 = var14.minusMonths(100);
    org.joda.time.MutableInterval var17 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var14);
    org.joda.time.MutableInterval var18 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1377739431362L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test39"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    boolean var25 = var18.isLeap(1L);
    org.joda.time.LocalDateTime var26 = org.joda.time.LocalDateTime.now();
    int var27 = var26.getDayOfYear();
    int var28 = var18.getMinimumValue((org.joda.time.ReadablePartial)var26);
    org.joda.time.DurationField var29 = var18.getDurationField();
    org.joda.time.DateTimeFieldType var30 = var18.getType();
    org.joda.time.chrono.JulianChronology var33 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var34 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var33);
    org.joda.time.LocalDate var35 = var34.toLocalDate();
    org.joda.time.LocalDate var37 = var35.withMonthOfYear(1);
    org.joda.time.LocalDate var39 = var37.withEra(1);
    org.joda.time.LocalDate.Property var40 = var37.yearOfCentury();
    org.joda.time.Period var45 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var47 = var45.plusYears((-1));
    org.joda.time.Minutes var48 = var45.toStandardMinutes();
    org.joda.time.Minutes var50 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var51 = var48.minus(var50);
    org.joda.time.PeriodType var52 = var48.getPeriodType();
    boolean var53 = var37.equals((java.lang.Object)var52);
    org.joda.time.chrono.JulianChronology var54 = org.joda.time.chrono.JulianChronology.getInstance();
    org.joda.time.MutablePeriod var55 = new org.joda.time.MutablePeriod(9L, var52, (org.joda.time.Chronology)var54);
    org.joda.time.LocalTime var56 = org.joda.time.LocalTime.fromMillisOfDay(1377742993058L, (org.joda.time.Chronology)var54);
    int var57 = var18.getMinimumValue((org.joda.time.ReadablePartial)var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);

  }

  public void test40() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test40"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var11 = var10.year();
    boolean var12 = var8.isBefore((org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    org.joda.time.Duration var23 = var14.plus((org.joda.time.ReadableDuration)var19);
    var10.add((org.joda.time.ReadableDuration)var19);
    org.joda.time.Seconds var25 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var10);
    var10.setWeekOfWeekyear(28);
    org.joda.time.DateTime var28 = org.joda.time.DateTime.now();
    long var29 = var28.getMillis();
    var10.setMillis((org.joda.time.ReadableInstant)var28);
    org.joda.time.DateTimeZone var31 = var10.getZone();
    var10.setWeekyear(38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1377739431392L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test41() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test41"); }


    org.joda.time.Period var4 = new org.joda.time.Period(16, 100, 1, 16);
    org.joda.time.DurationFieldType[] var5 = var4.getFieldTypes();
    org.joda.time.PeriodType var6 = org.joda.time.PeriodType.forFields(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test42"); }


    org.joda.time.tz.FixedDateTimeZone var4 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var6 = var4.getOffsetFromLocal(1377742981323L);
    org.joda.time.tz.FixedDateTimeZone var11 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    boolean var12 = var4.equals((java.lang.Object)13);
    long var14 = var4.previousTransition((-3827L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-3827L));

  }

  public void test43() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test43"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.YearMonthDay var3 = new org.joda.time.YearMonthDay(var2);
    org.joda.time.YearMonthDay var5 = var3.plusYears(2013);
    org.joda.time.TimeOfDay var6 = new org.joda.time.TimeOfDay();
    int var7 = var6.size();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var10 = var9.hours();
    org.joda.time.LocalTime var11 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var9);
    org.joda.time.LocalTime var13 = var11.withMillisOfSecond(1);
    org.joda.time.LocalTime var15 = var13.minusHours((-1));
    org.joda.time.Years var16 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var6, (org.joda.time.ReadablePartial)var15);
    int var17 = var6.getMillisOfSecond();
    org.joda.time.TimeOfDay var19 = var6.minusMillis((-9));
    org.joda.time.chrono.ISOChronology var20 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var25 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var27 = var25.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var29 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstance(var29);
    long var32 = var25.getMillisKeepLocal(var29, 1377746580759L);
    org.joda.time.Chronology var33 = var20.withZone(var29);
    java.util.TimeZone var34 = var29.toTimeZone();
    org.joda.time.DateTime var35 = var5.toDateTime(var19, var29);
    org.joda.time.DateTime.Property var36 = var35.dayOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 510);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test44() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test44"); }


    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.Period var6 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var7 = var3.millisOfSecond();
    org.joda.time.DateTimeField var8 = var3.secondOfDay();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test45() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test45"); }


    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusYears((-1));
    org.joda.time.Years var10 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var11 = var10.getPeriodType();
    org.joda.time.Period var12 = var6.normalizedStandard(var11);
    org.joda.time.PeriodType var13 = var11.withMillisRemoved();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var11);
    org.joda.time.PeriodType var15 = var11.withYearsRemoved();
    org.joda.time.Period var16 = new org.joda.time.Period(86400000L, var15);
    org.joda.time.Period var17 = new org.joda.time.Period(1377746621819L, var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test46() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test46"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var0.appendYear(23, 8);
    org.joda.time.format.DateTimeFormatterBuilder var7 = var5.appendWeekOfWeekyear(13);
    org.joda.time.format.DateTimeFormatter var8 = org.joda.time.format.ISODateTimeFormat.yearMonth();
    org.joda.time.format.DateTimeFormatterBuilder var9 = var7.append(var8);
    org.joda.time.format.DateTimePrinter var10 = var9.toPrinter();
    org.joda.time.format.DateTimeFormatterBuilder var11 = var9.appendHalfdayOfDayText();
    org.joda.time.format.DateTimeFormatterBuilder var13 = var9.appendMinuteOfHour(951);
    org.joda.time.format.DateTimeFormatterBuilder var14 = var13.appendDayOfWeekText();
    org.joda.time.LocalDateTime var15 = org.joda.time.LocalDateTime.now();
    int var16 = var15.getDayOfYear();
    org.joda.time.LocalDateTime var18 = var15.minusSeconds(2005);
    org.joda.time.Chronology var19 = var15.getChronology();
    org.joda.time.DateTimeZone var21 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var22 = org.joda.time.MutableDateTime.now(var21);
    org.joda.time.DateTime var23 = var15.toDateTime(var21);
    int var24 = var15.getSecondOfMinute();
    org.joda.time.DateTime var25 = var15.toDateTime();
    org.joda.time.format.DateTimeFormatterBuilder var26 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var28 = var26.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var30 = var26.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var31 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var32 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var31);
    org.joda.time.LocalDate var33 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var31);
    org.joda.time.DateTimeField var34 = var31.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var35 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var36 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var37 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var36);
    org.joda.time.LocalDate var38 = var37.toLocalDate();
    org.joda.time.LocalDate var40 = var38.minusMonths(0);
    int[] var42 = var35.get((org.joda.time.ReadablePartial)var40, 100L);
    org.joda.time.chrono.EthiopicChronology var46 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var47 = var46.hours();
    org.joda.time.LocalTime var48 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var46);
    org.joda.time.Period var49 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var46);
    org.joda.time.DateTimeField var50 = var46.millisOfSecond();
    org.joda.time.DateTimeField var51 = var46.secondOfDay();
    org.joda.time.field.SkipDateTimeField var53 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var35, var51, 100);
    org.joda.time.LocalDateTime var54 = org.joda.time.LocalDateTime.now();
    int var55 = var54.getDayOfYear();
    org.joda.time.Chronology var56 = var54.getChronology();
    int var57 = var54.getYearOfCentury();
    int var58 = var53.getMaximumValue((org.joda.time.ReadablePartial)var54);
    boolean var60 = var53.isLeap(1L);
    org.joda.time.LocalDateTime var61 = org.joda.time.LocalDateTime.now();
    int var62 = var61.getDayOfYear();
    int var63 = var53.getMinimumValue((org.joda.time.ReadablePartial)var61);
    org.joda.time.DurationField var64 = var53.getDurationField();
    org.joda.time.DateTimeFieldType var65 = var53.getType();
    org.joda.time.field.OffsetDateTimeField var69 = new org.joda.time.field.OffsetDateTimeField(var34, var65, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var72 = new org.joda.time.IllegalFieldValueException(var65, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var75 = var26.appendFraction(var65, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var76 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var77 = var76.minutes();
    org.joda.time.DateTimeField var78 = var76.year();
    org.joda.time.DurationField var79 = var76.hours();
    org.joda.time.field.UnsupportedDateTimeField var80 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var65, var79);
    boolean var81 = var15.isSupported(var65);
    org.joda.time.format.DateTimeFormatterBuilder var84 = var14.appendDecimal(var65, 15, 44);
    org.joda.time.DateTimeComparator var85 = org.joda.time.DateTimeComparator.getInstance(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test47() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test47"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusYears((-1));
    org.joda.time.Minutes var7 = var4.toStandardMinutes();
    org.joda.time.Minutes var9 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var10 = var7.minus(var9);
    org.joda.time.DurationFieldType var11 = var10.getFieldType();
    org.joda.time.Period var16 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var18 = var16.plusYears((-1));
    org.joda.time.Minutes var19 = var16.toStandardMinutes();
    org.joda.time.Minutes var21 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var22 = var19.minus(var21);
    org.joda.time.DurationFieldType var23 = var22.getFieldType();
    org.joda.time.Duration var24 = var22.toStandardDuration();
    boolean var25 = var10.isLessThan(var22);
    org.joda.time.Hours var26 = var10.toStandardHours();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test48"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var56 = var54.roundFloor(20792L);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test49() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test49"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var15.toDateTimeAtMidnight();
    org.joda.time.DateTime var20 = var18.withCenturyOfEra(4);
    org.joda.time.Days var21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var20);
    org.joda.time.DateMidnight var23 = var1.plusMonths(10);
    org.joda.time.DateTimeZone var25 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var26 = org.joda.time.MutableDateTime.now(var25);
    org.joda.time.DateMidnight var27 = var1.withZoneRetainFields(var25);
    org.joda.time.chrono.EthiopicChronology var28 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var29 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var30 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var29);
    org.joda.time.LocalDate var31 = var30.toLocalDate();
    org.joda.time.LocalDate var33 = var31.minusMonths(0);
    int[] var35 = var28.get((org.joda.time.ReadablePartial)var33, 100L);
    org.joda.time.chrono.EthiopicChronology var39 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var40 = var39.hours();
    org.joda.time.LocalTime var41 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var39);
    org.joda.time.Period var42 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var39);
    org.joda.time.DateTimeField var43 = var39.millisOfSecond();
    org.joda.time.DateTimeField var44 = var39.secondOfDay();
    org.joda.time.field.SkipDateTimeField var46 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var28, var44, 100);
    org.joda.time.DurationField var47 = var46.getRangeDurationField();
    java.lang.String var48 = var46.toString();
    int var49 = var46.getMinimumValue();
    int var50 = var27.get((org.joda.time.DateTimeField)var46);
    org.joda.time.Instant var51 = org.joda.time.Instant.now();
    org.joda.time.Weeks var52 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var27, (org.joda.time.ReadableInstant)var51);
    org.joda.time.chrono.JulianChronology var53 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var54 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var53);
    org.joda.time.LocalDate var55 = var54.toLocalDate();
    org.joda.time.MutableDateTime var56 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var57 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var54, (org.joda.time.ReadableInstant)var56);
    org.joda.time.MutableDateTime var58 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var59 = var58.year();
    boolean var60 = var56.isBefore((org.joda.time.ReadableInstant)var58);
    org.joda.time.Duration var62 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var64 = org.joda.time.Duration.standardHours((-1L));
    boolean var65 = var62.isShorterThan((org.joda.time.ReadableDuration)var64);
    org.joda.time.Duration var67 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var69 = org.joda.time.Duration.standardHours((-1L));
    boolean var70 = var67.isShorterThan((org.joda.time.ReadableDuration)var69);
    org.joda.time.Duration var71 = var62.plus((org.joda.time.ReadableDuration)var67);
    var58.add((org.joda.time.ReadableDuration)var67);
    org.joda.time.chrono.JulianChronology var73 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var74 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var73);
    org.joda.time.LocalDate var75 = var74.toLocalDate();
    org.joda.time.MutableDateTime var76 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var77 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var74, (org.joda.time.ReadableInstant)var76);
    org.joda.time.MutableDateTime var78 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var79 = var78.year();
    boolean var80 = var76.isBefore((org.joda.time.ReadableInstant)var78);
    org.joda.time.Interval var81 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var58, (org.joda.time.ReadableInstant)var78);
    boolean var82 = var81.isBeforeNow();
    org.joda.time.Duration var83 = var81.toDuration();
    org.joda.time.Duration var84 = var83.toDuration();
    org.joda.time.Instant var85 = var51.minus((org.joda.time.ReadableDuration)var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "DateTimeField[secondOfDay]"+ "'", var48.equals("DateTimeField[secondOfDay]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test50() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test50"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withCenturyOfEra(4);
    org.joda.time.DateTime.Property var8 = var7.monthOfYear();
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.Period var15 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var17 = var15.plusSeconds(100);
    org.joda.time.Period var19 = var15.minusMillis(10);
    boolean var20 = var10.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var21 = var10.dayOfYear();
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.LocalDate var24 = var23.toLocalDate();
    org.joda.time.LocalDate var26 = var24.minusMonths(0);
    org.joda.time.DateTime var27 = var24.toDateTimeAtMidnight();
    org.joda.time.DateTime var29 = var27.withCenturyOfEra(4);
    org.joda.time.Days var30 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var29);
    org.joda.time.DateTime var32 = var29.plusSeconds(10);
    boolean var33 = var7.isAfter((org.joda.time.ReadableInstant)var29);
    org.joda.time.MutableDateTime var34 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var35 = var34.year();
    org.joda.time.MutableDateTime.Property var36 = var34.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var37 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var38 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var37);
    org.joda.time.Period var43 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var45 = var43.plusSeconds(100);
    org.joda.time.Period var47 = var43.minusMillis(10);
    boolean var48 = var38.equals((java.lang.Object)10);
    org.joda.time.Weeks var49 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var34, (org.joda.time.ReadableInstant)var38);
    org.joda.time.DateTime var50 = var38.toDateTime();
    org.joda.time.DateTime var52 = var50.plusDays(15);
    org.joda.time.Period var57 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var59 = var57.plusYears((-1));
    org.joda.time.Years var61 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var62 = var61.getPeriodType();
    org.joda.time.Period var63 = var57.normalizedStandard(var62);
    org.joda.time.PeriodType var64 = var62.withMillisRemoved();
    org.joda.time.MutablePeriod var65 = new org.joda.time.MutablePeriod(var62);
    org.joda.time.PeriodType var66 = var62.withYearsRemoved();
    org.joda.time.Period var67 = new org.joda.time.Period((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var50, var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test51() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test51"); }


    org.joda.time.Instant var0 = new org.joda.time.Instant();
    org.joda.time.Instant var1 = var0.toInstant();
    org.joda.time.DateTime var2 = var1.toDateTime();
    org.joda.time.DateTime var3 = org.joda.time.DateTime.now();
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var8 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var7);
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var10 = var9.year();
    boolean var11 = var7.isBefore((org.joda.time.ReadableInstant)var9);
    org.joda.time.MutableDateTime.Property var12 = var9.minuteOfHour();
    org.joda.time.MutableDateTime.Property var13 = var9.millisOfSecond();
    org.joda.time.Chronology var14 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var9);
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime(var14);
    int var16 = var2.compareTo((org.joda.time.ReadableInstant)var15);
    var15.addHours(682);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));

  }

  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test52"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var0.appendYear(23, 8);
    org.joda.time.format.DateTimeFormatterBuilder var8 = var5.appendFractionOfSecond(21, 51);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var8.appendTwoDigitWeekyear(9);
    org.joda.time.format.DateTimeFormatterBuilder var12 = var10.appendDayOfYear(15795333);
    boolean var13 = var10.canBuildPrinter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test53"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Days var12 = var11.toStandardDays();
    org.joda.time.Hours var13 = var12.toStandardHours();
    java.lang.String var14 = var13.toString();
    org.joda.time.Days var15 = var13.toStandardDays();
    org.joda.time.Minutes var16 = var15.toStandardMinutes();
    int var17 = var15.size();
    org.joda.time.Minutes var18 = var15.toStandardMinutes();
    org.joda.time.Days var20 = var15.minus(228);
    org.joda.time.DurationFieldType var21 = var20.getFieldType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PT0H"+ "'", var14.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test54() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test54"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DurationField var3 = var0.hours();
    org.joda.time.Chronology var4 = var0.withUTC();
    org.joda.time.chrono.LenientChronology var5 = org.joda.time.chrono.LenientChronology.getInstance(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test55() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test55"); }


    org.joda.time.Years var1 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var2 = var1.getPeriodType();
    org.joda.time.Years var4 = org.joda.time.Years.years((-1));
    int var5 = var1.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var4);
    org.joda.time.MutablePeriod var6 = var4.toMutablePeriod();
    int var7 = var6.getMonths();
    org.joda.time.MutableInterval var8 = new org.joda.time.MutableInterval();
    var8.setStartMillis((-1L));
    org.joda.time.Chronology var11 = var8.getChronology();
    org.joda.time.MutableInterval var12 = new org.joda.time.MutableInterval();
    long var13 = var12.getEndMillis();
    org.joda.time.Months var14 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var12);
    org.joda.time.Chronology var15 = var12.getChronology();
    boolean var16 = var8.isAfter((org.joda.time.ReadableInterval)var12);
    var6.setPeriod((org.joda.time.ReadableInterval)var12);
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.MutableDateTime var21 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var22 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var19, (org.joda.time.ReadableInstant)var21);
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var24 = var23.year();
    boolean var25 = var21.isBefore((org.joda.time.ReadableInstant)var23);
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    boolean var30 = var27.isShorterThan((org.joda.time.ReadableDuration)var29);
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    boolean var35 = var32.isShorterThan((org.joda.time.ReadableDuration)var34);
    org.joda.time.Duration var36 = var27.plus((org.joda.time.ReadableDuration)var32);
    var23.add((org.joda.time.ReadableDuration)var32);
    org.joda.time.chrono.JulianChronology var38 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var39 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var38);
    org.joda.time.LocalDate var40 = var39.toLocalDate();
    org.joda.time.MutableDateTime var41 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var42 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var39, (org.joda.time.ReadableInstant)var41);
    org.joda.time.MutableDateTime var43 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var44 = var43.year();
    boolean var45 = var41.isBefore((org.joda.time.ReadableInstant)var43);
    org.joda.time.Interval var46 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableInstant)var43);
    boolean var48 = var46.isAfter(10L);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    var49.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var52 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var49.setChronology((org.joda.time.Chronology)var52);
    org.joda.time.Interval var54 = var46.withChronology((org.joda.time.Chronology)var52);
    boolean var55 = var12.overlaps((org.joda.time.ReadableInterval)var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test56"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var5 = new org.joda.time.DateTime(659, 147, 529, 353, 452);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test57() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test57"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    boolean var25 = var18.isLeap(1L);
    org.joda.time.LocalDateTime var26 = org.joda.time.LocalDateTime.now();
    int var27 = var26.getDayOfYear();
    int var28 = var18.getMinimumValue((org.joda.time.ReadablePartial)var26);
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    int var34 = var31.getRoundingMode();
    var31.addMillis(100);
    var31.setSecondOfMinute(10);
    org.joda.time.PeriodType var39 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var40 = new org.joda.time.Period((org.joda.time.ReadableDuration)var30, (org.joda.time.ReadableInstant)var31, var39);
    org.joda.time.Days var41 = var40.toStandardDays();
    org.joda.time.DurationFieldType var42 = var41.getFieldType();
    org.joda.time.LocalDateTime var44 = var26.withFieldAdded(var42, 100);
    org.joda.time.LocalDateTime var46 = var44.withCenturyOfEra(28);
    org.joda.time.LocalDateTime var48 = var46.plusMillis(62);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var50 = var46.withDayOfYear(2057);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test58"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.parse("PT4210.001S");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test59() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test59"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var3 = var0.appendCenturyOfEra(35, 10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.format.DateTimeFormatterBuilder var8 = var0.appendTimeZoneOffset("--08-29", true, 661, 70);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test60"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var7 = var5.minusHours((-1));
    org.joda.time.LocalTime var9 = var5.plusSeconds((-1));
    org.joda.time.Period var14 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var16 = var14.plusYears((-1));
    org.joda.time.Years var18 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var19 = var18.getPeriodType();
    org.joda.time.Period var20 = var14.normalizedStandard(var19);
    org.joda.time.PeriodType var21 = var19.withMillisRemoved();
    org.joda.time.MutablePeriod var22 = new org.joda.time.MutablePeriod(var19);
    org.joda.time.MutablePeriod var23 = new org.joda.time.MutablePeriod(var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Period var24 = new org.joda.time.Period((java.lang.Object)(-1), var19);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test61() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test61"); }


    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearMonthDay();
    org.joda.time.Period var3 = new org.joda.time.Period(15946L, 1377746581334L, var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test62() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test62"); }


    org.joda.time.DateTimeZone var2 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var3 = org.joda.time.DateTimeUtils.getZone(var2);
    org.joda.time.LocalDate var4 = new org.joda.time.LocalDate(35L, var2);
    org.joda.time.LocalDate.Property var5 = var4.centuryOfEra();
    org.joda.time.chrono.EthiopicChronology var7 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var8 = var7.hours();
    org.joda.time.LocalTime var9 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var7);
    org.joda.time.LocalTime var11 = var9.withMillisOfSecond(1);
    org.joda.time.LocalTime var12 = org.joda.time.LocalTime.now();
    boolean var13 = var11.isAfter((org.joda.time.ReadablePartial)var12);
    org.joda.time.Chronology var14 = var12.getChronology();
    org.joda.time.LocalDate var15 = var4.withFields((org.joda.time.ReadablePartial)var12);
    org.joda.time.LocalTime.Property var16 = var12.minuteOfHour();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test63() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test63"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var1 = var0.minutes();
    org.joda.time.DateTimeField var2 = var0.year();
    org.joda.time.DateTimeField var3 = var0.millisOfDay();
    org.joda.time.format.DateTimeFormatterBuilder var4 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var6 = var4.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var8 = var4.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.LocalDate var11 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var9);
    org.joda.time.DateTimeField var12 = var9.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var13 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var14);
    org.joda.time.LocalDate var16 = var15.toLocalDate();
    org.joda.time.LocalDate var18 = var16.minusMonths(0);
    int[] var20 = var13.get((org.joda.time.ReadablePartial)var18, 100L);
    org.joda.time.chrono.EthiopicChronology var24 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var25 = var24.hours();
    org.joda.time.LocalTime var26 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var24);
    org.joda.time.Period var27 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var24);
    org.joda.time.DateTimeField var28 = var24.millisOfSecond();
    org.joda.time.DateTimeField var29 = var24.secondOfDay();
    org.joda.time.field.SkipDateTimeField var31 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var13, var29, 100);
    org.joda.time.LocalDateTime var32 = org.joda.time.LocalDateTime.now();
    int var33 = var32.getDayOfYear();
    org.joda.time.Chronology var34 = var32.getChronology();
    int var35 = var32.getYearOfCentury();
    int var36 = var31.getMaximumValue((org.joda.time.ReadablePartial)var32);
    boolean var38 = var31.isLeap(1L);
    org.joda.time.LocalDateTime var39 = org.joda.time.LocalDateTime.now();
    int var40 = var39.getDayOfYear();
    int var41 = var31.getMinimumValue((org.joda.time.ReadablePartial)var39);
    org.joda.time.DurationField var42 = var31.getDurationField();
    org.joda.time.DateTimeFieldType var43 = var31.getType();
    org.joda.time.field.OffsetDateTimeField var47 = new org.joda.time.field.OffsetDateTimeField(var12, var43, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var50 = new org.joda.time.IllegalFieldValueException(var43, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var53 = var4.appendFraction(var43, 33, (-948));
    org.joda.time.field.OffsetDateTimeField var55 = new org.joda.time.field.OffsetDateTimeField(var3, var43, 69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test64() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test64"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    long var1 = var0.getMillis();
    org.joda.time.DateTime.Property var2 = var0.yearOfEra();
    org.joda.time.PeriodType var4 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    var5.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var5.setChronology((org.joda.time.Chronology)var8);
    org.joda.time.MutablePeriod var10 = new org.joda.time.MutablePeriod(0L, var4, (org.joda.time.Chronology)var8);
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var13 = new org.joda.time.MutableDateTime();
    var13.setWeekOfWeekyear(1);
    int var16 = var13.getRoundingMode();
    var13.addMillis(100);
    var13.setSecondOfMinute(10);
    org.joda.time.PeriodType var21 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var22 = new org.joda.time.Period((org.joda.time.ReadableDuration)var12, (org.joda.time.ReadableInstant)var13, var21);
    org.joda.time.Days var23 = var22.toStandardDays();
    org.joda.time.Duration var24 = var23.toStandardDuration();
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.DateTimeField var28 = var26.minuteOfHour();
    org.joda.time.LocalDate var29 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var26);
    var10.setPeriod((org.joda.time.ReadableDuration)var24, (org.joda.time.Chronology)var26);
    org.joda.time.DateTime var32 = var0.withDurationAdded((org.joda.time.ReadableDuration)var24, 228);
    org.joda.time.LocalDate var33 = var0.toLocalDate();
    org.joda.time.DateTime var35 = var0.minusYears(228);
    org.joda.time.chrono.EthiopicChronology var36 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var37 = var36.dayOfYear();
    org.joda.time.YearMonthDay var38 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var36);
    org.joda.time.YearMonthDay var40 = var38.plusYears(13);
    org.joda.time.DateTimeZone var42 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.Interval var43 = var38.toInterval(var42);
    org.joda.time.DateMidnight var44 = var38.toDateMidnight();
    org.joda.time.Interval var45 = var38.toInterval();
    org.joda.time.Years var46 = org.joda.time.Years.yearsIn((org.joda.time.ReadableInterval)var45);
    org.joda.time.PeriodType var47 = var46.getPeriodType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutablePeriod var48 = new org.joda.time.MutablePeriod((java.lang.Object)228, var47);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1377739431743L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test65() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test65"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Instant var1 = org.joda.time.Instant.parse("\uFFFD\uFFFD\uFFFD\uFFFD-W\uFFFD\uFFFD-\uFFFDT03:23:01");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test66() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test66"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.LocalDate var3 = new org.joda.time.LocalDate(var2);
    org.joda.time.LocalDate var5 = var3.withDayOfYear(1);
    org.joda.time.LocalDate.Property var6 = var3.yearOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test67"); }


    org.joda.time.chrono.GregorianChronology var0 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.year();
    org.joda.time.Chronology var2 = var0.withUTC();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test68() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test68"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    long var26 = var18.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var27 = var18.getRangeDurationField();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.DateMidnight var31 = var29.plusDays(2013);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.DateMidnight var36 = var33.minusWeeks((-1));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.DurationFieldType var50 = var49.getFieldType();
    org.joda.time.DateMidnight var52 = var36.withFieldAdded(var50, 1);
    org.joda.time.field.PreciseDurationField var54 = new org.joda.time.field.PreciseDurationField(var50, 1L);
    org.joda.time.DateMidnight var56 = var31.withFieldAdded(var50, 228);
    org.joda.time.field.DecoratedDurationField var57 = new org.joda.time.field.DecoratedDurationField(var27, var50);
    long var60 = var57.add(1377746681334L, 9);
    org.joda.time.Duration var62 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    var63.setWeekOfWeekyear(1);
    int var66 = var63.getRoundingMode();
    var63.addMillis(100);
    var63.setSecondOfMinute(10);
    org.joda.time.PeriodType var71 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var72 = new org.joda.time.Period((org.joda.time.ReadableDuration)var62, (org.joda.time.ReadableInstant)var63, var71);
    org.joda.time.Days var73 = var72.toStandardDays();
    org.joda.time.DurationFieldType var74 = var73.getFieldType();
    org.joda.time.field.DecoratedDurationField var75 = new org.joda.time.field.DecoratedDurationField((org.joda.time.DurationField)var57, var74);
    org.joda.time.field.UnsupportedDurationField var76 = org.joda.time.field.UnsupportedDurationField.getInstance(var74);
    java.lang.String var77 = var76.getName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var79 = var76.getValue(1377746594066L);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1378524281334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "days"+ "'", var77.equals("days"));

  }

  public void test69() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test69"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    org.joda.time.DateTimeFieldType var55 = var54.getType();
    org.joda.time.DurationField var56 = var54.getRangeDurationField();
    org.joda.time.DurationField var57 = var54.getDurationField();
    org.joda.time.PeriodType var58 = org.joda.time.PeriodType.months();
    java.lang.String var59 = var58.toString();
    org.joda.time.PeriodType var60 = org.joda.time.PeriodType.months();
    org.joda.time.Duration var62 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    var63.setWeekOfWeekyear(1);
    int var66 = var63.getRoundingMode();
    var63.addMillis(100);
    var63.setSecondOfMinute(10);
    org.joda.time.PeriodType var71 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var72 = new org.joda.time.Period((org.joda.time.ReadableDuration)var62, (org.joda.time.ReadableInstant)var63, var71);
    org.joda.time.Days var73 = var72.toStandardDays();
    org.joda.time.DurationFieldType var74 = var73.getFieldType();
    int var75 = var60.indexOf(var74);
    boolean var76 = var58.isSupported(var74);
    org.joda.time.field.ScaledDurationField var78 = new org.joda.time.field.ScaledDurationField(var57, var74, 8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var81 = var78.getMillis(2755489629153L, 1377739431138L);
      fail("Expected exception of type java.lang.ArithmeticException");
    } catch (java.lang.ArithmeticException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "PeriodType[Months]"+ "'", var59.equals("PeriodType[Months]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test70() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test70"); }


    org.joda.time.DateTime var1 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var3 = var1.withMillis(0L);
    org.joda.time.DateTime var5 = var3.plusHours(2013);
    org.joda.time.chrono.ISOChronology var6 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var11 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var13 = var11.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var15 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstance(var15);
    long var18 = var11.getMillisKeepLocal(var15, 1377746580759L);
    org.joda.time.Chronology var19 = var6.withZone(var15);
    org.joda.time.DateTimeZone var21 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.chrono.ISOChronology var22 = org.joda.time.chrono.ISOChronology.getInstance(var21);
    org.joda.time.Chronology var23 = var6.withZone(var21);
    org.joda.time.DateTime var24 = var3.toDateTime(var21);
    org.joda.time.LocalTime var25 = new org.joda.time.LocalTime(104L, var21);
    org.joda.time.MutableDateTime var26 = new org.joda.time.MutableDateTime(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test71() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test71"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    int var13 = var1.getMinuteOfHour();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);

  }

  public void test72() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test72"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    org.joda.time.Interval var1 = var0.toInterval();
    boolean var3 = var1.contains(15946L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test73"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    long var1 = var0.getMillis();
    org.joda.time.DateTime.Property var2 = var0.yearOfEra();
    org.joda.time.PeriodType var4 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    var5.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var5.setChronology((org.joda.time.Chronology)var8);
    org.joda.time.MutablePeriod var10 = new org.joda.time.MutablePeriod(0L, var4, (org.joda.time.Chronology)var8);
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var13 = new org.joda.time.MutableDateTime();
    var13.setWeekOfWeekyear(1);
    int var16 = var13.getRoundingMode();
    var13.addMillis(100);
    var13.setSecondOfMinute(10);
    org.joda.time.PeriodType var21 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var22 = new org.joda.time.Period((org.joda.time.ReadableDuration)var12, (org.joda.time.ReadableInstant)var13, var21);
    org.joda.time.Days var23 = var22.toStandardDays();
    org.joda.time.Duration var24 = var23.toStandardDuration();
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.DateTimeField var28 = var26.minuteOfHour();
    org.joda.time.LocalDate var29 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var26);
    var10.setPeriod((org.joda.time.ReadableDuration)var24, (org.joda.time.Chronology)var26);
    org.joda.time.DateTime var32 = var0.withDurationAdded((org.joda.time.ReadableDuration)var24, 228);
    org.joda.time.DateTime.Property var33 = var0.weekOfWeekyear();
    org.joda.time.DateMidnight var34 = var0.toDateMidnight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1377739431829L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test74"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    long var57 = var54.add((-1000L), 1377742981L);
    java.lang.String var58 = var54.getName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var60 = var54.roundCeiling(104L);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 4959874731599000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "secondOfDay"+ "'", var58.equals("secondOfDay"));

  }

  public void test75() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test75"); }


    org.joda.time.Partial var0 = new org.joda.time.Partial();
    java.lang.String var1 = var0.toString();
    org.joda.time.Duration var3 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    var4.setWeekOfWeekyear(1);
    int var7 = var4.getRoundingMode();
    var4.addMillis(100);
    var4.setSecondOfMinute(10);
    org.joda.time.PeriodType var12 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var13 = new org.joda.time.Period((org.joda.time.ReadableDuration)var3, (org.joda.time.ReadableInstant)var4, var12);
    org.joda.time.Days var14 = var13.toStandardDays();
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.Period var21 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var23 = var21.plusSeconds(100);
    org.joda.time.Period var25 = var21.minusMillis(10);
    boolean var26 = var16.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var27 = var16.dayOfYear();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.LocalDate var30 = var29.toLocalDate();
    org.joda.time.LocalDate var32 = var30.minusMonths(0);
    org.joda.time.DateTime var33 = var30.toDateTimeAtMidnight();
    org.joda.time.DateTime var35 = var33.withCenturyOfEra(4);
    org.joda.time.Days var36 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var16, (org.joda.time.ReadableInstant)var35);
    org.joda.time.Days var38 = var36.dividedBy(1);
    boolean var39 = var14.isGreaterThan(var36);
    org.joda.time.DurationFieldType var40 = var14.getFieldType();
    org.joda.time.Seconds var41 = var14.toStandardSeconds();
    org.joda.time.Partial var42 = var0.minus((org.joda.time.ReadablePeriod)var41);
    org.joda.time.TimeOfDay var43 = new org.joda.time.TimeOfDay();
    int var44 = var43.size();
    org.joda.time.TimeOfDay var46 = var43.withMillisOfSecond(1);
    org.joda.time.Years var48 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var49 = var48.getPeriodType();
    org.joda.time.Years var51 = org.joda.time.Years.years((-1));
    int var52 = var48.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var51);
    org.joda.time.Years var54 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var55 = var54.getPeriodType();
    org.joda.time.Years var56 = var51.minus(var54);
    org.joda.time.TimeOfDay var57 = var46.minus((org.joda.time.ReadablePeriod)var51);
    boolean var58 = var0.isMatch((org.joda.time.ReadablePartial)var46);
    org.joda.time.Period var63 = new org.joda.time.Period(1, 10, 10, 1);
    int var64 = var63.getWeeks();
    org.joda.time.Period var65 = var63.toPeriod();
    int var66 = var65.getMonths();
    org.joda.time.Partial var67 = var0.plus((org.joda.time.ReadablePeriod)var65);
    org.joda.time.Chronology var68 = var0.getChronology();
    org.joda.time.Partial var69 = new org.joda.time.Partial(var68);
    org.joda.time.Instant var70 = new org.joda.time.Instant();
    org.joda.time.Instant var71 = var70.toInstant();
    org.joda.time.Duration var73 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var75 = org.joda.time.Duration.standardHours((-1L));
    boolean var76 = var73.isShorterThan((org.joda.time.ReadableDuration)var75);
    org.joda.time.Duration var78 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var80 = org.joda.time.Duration.standardHours((-1L));
    boolean var81 = var78.isShorterThan((org.joda.time.ReadableDuration)var80);
    org.joda.time.Duration var82 = var73.plus((org.joda.time.ReadableDuration)var78);
    org.joda.time.Instant var84 = var71.withDurationAdded((org.joda.time.ReadableDuration)var73, 1);
    org.joda.time.Duration var87 = new org.joda.time.Duration(99L, (-1L));
    org.joda.time.Instant var88 = var84.minus((org.joda.time.ReadableDuration)var87);
    boolean var89 = var69.isMatch((org.joda.time.ReadableInstant)var84);
    int var90 = var69.size();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTimeFieldType var92 = var69.getFieldType(24430);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);

  }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test76"); }


    org.joda.time.IllegalFieldValueException var4 = new org.joda.time.IllegalFieldValueException("8581 seconds", (java.lang.Number)51, (java.lang.Number)948, (java.lang.Number)69);
    java.lang.Number var5 = var4.getIllegalNumberValue();
    java.lang.Throwable[] var6 = var4.getSuppressed();
    java.lang.Throwable[] var7 = var4.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + 51+ "'", var5.equals(51));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test77"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    var5.addMinutes(104);
    org.joda.time.MutableDateTime.Property var10 = var5.minuteOfDay();
    int var11 = var5.getYearOfCentury();
    var5.addSeconds(23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 13);

  }

  public void test78() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test78"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getYearOfCentury();
    org.joda.time.LocalDateTime var5 = var0.withCenturyOfEra(2);
    org.joda.time.LocalDateTime var7 = var0.plusMinutes(70541200);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var9 = var7.getValue(57);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test79() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test79"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    int var3 = var2.getYear();
    org.joda.time.Period var6 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var8 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    var9.setWeekOfWeekyear(1);
    int var12 = var9.getRoundingMode();
    var9.addMillis(100);
    var9.setSecondOfMinute(10);
    org.joda.time.PeriodType var17 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var18 = new org.joda.time.Period((org.joda.time.ReadableDuration)var8, (org.joda.time.ReadableInstant)var9, var17);
    org.joda.time.Days var19 = var18.toStandardDays();
    org.joda.time.DurationFieldType var20 = var19.getFieldType();
    int var21 = var6.get(var20);
    org.joda.time.YearMonthDay var22 = var2.minus((org.joda.time.ReadablePeriod)var6);
    org.joda.time.Period var23 = new org.joda.time.Period();
    org.joda.time.Period var25 = var23.minusMinutes((-1));
    org.joda.time.YearMonthDay var26 = var2.plus((org.joda.time.ReadablePeriod)var25);
    java.lang.String var27 = var25.toString();
    int var28 = var25.getMinutes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2005);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "PT1M"+ "'", var27.equals("PT1M"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);

  }

  public void test80() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test80"); }


    org.joda.time.YearMonth var1 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var2 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var3 = var1.withChronologyRetainFields((org.joda.time.Chronology)var2);
    org.joda.time.YearMonth var5 = var3.withMonthOfYear(10);
    org.joda.time.Interval var6 = var3.toInterval();
    org.joda.time.YearMonth var8 = var3.minusMonths(23);
    org.joda.time.DateTime var16 = new org.joda.time.DateTime(0, 4, 28, 1, 28, 1, 1);
    org.joda.time.LocalDate var17 = var16.toLocalDate();
    org.joda.time.LocalDate var19 = var17.minusMonths(80);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Minutes var20 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadablePartial)var3, (org.joda.time.ReadablePartial)var19);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test81"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    org.joda.time.DateTimeFieldType var55 = var54.getType();
    org.joda.time.DurationField var56 = var54.getRangeDurationField();
    org.joda.time.DurationField var57 = var54.getDurationField();
    org.joda.time.PeriodType var58 = org.joda.time.PeriodType.months();
    java.lang.String var59 = var58.toString();
    org.joda.time.PeriodType var60 = org.joda.time.PeriodType.months();
    org.joda.time.Duration var62 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    var63.setWeekOfWeekyear(1);
    int var66 = var63.getRoundingMode();
    var63.addMillis(100);
    var63.setSecondOfMinute(10);
    org.joda.time.PeriodType var71 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var72 = new org.joda.time.Period((org.joda.time.ReadableDuration)var62, (org.joda.time.ReadableInstant)var63, var71);
    org.joda.time.Days var73 = var72.toStandardDays();
    org.joda.time.DurationFieldType var74 = var73.getFieldType();
    int var75 = var60.indexOf(var74);
    boolean var76 = var58.isSupported(var74);
    org.joda.time.field.ScaledDurationField var78 = new org.joda.time.field.ScaledDurationField(var57, var74, 845);
    org.joda.time.Partial var79 = new org.joda.time.Partial();
    java.lang.String var80 = var79.toString();
    org.joda.time.PeriodType var81 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var82 = new org.joda.time.MutablePeriod(var81);
    org.joda.time.DurationFieldType[] var83 = var82.getFieldTypes();
    org.joda.time.Partial var84 = var79.plus((org.joda.time.ReadablePeriod)var82);
    var82.add(2762381894421796L);
    org.joda.time.chrono.EthiopicChronology var87 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var88 = var87.minutes();
    org.joda.time.DateTime var89 = new org.joda.time.DateTime((java.lang.Object)2762381894421796L, (org.joda.time.Chronology)var87);
    boolean var90 = var78.equals((java.lang.Object)2762381894421796L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var93 = var78.add(9L, 2755489629153L);
      fail("Expected exception of type java.lang.ArithmeticException");
    } catch (java.lang.ArithmeticException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "PeriodType[Months]"+ "'", var59.equals("PeriodType[Months]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "[]"+ "'", var80.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test82"); }


    org.joda.time.Period var2 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var4 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    var5.setWeekOfWeekyear(1);
    int var8 = var5.getRoundingMode();
    var5.addMillis(100);
    var5.setSecondOfMinute(10);
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var14 = new org.joda.time.Period((org.joda.time.ReadableDuration)var4, (org.joda.time.ReadableInstant)var5, var13);
    org.joda.time.Days var15 = var14.toStandardDays();
    org.joda.time.DurationFieldType var16 = var15.getFieldType();
    int var17 = var2.get(var16);
    org.joda.time.IllegalFieldValueException var21 = new org.joda.time.IllegalFieldValueException(var16, (java.lang.Number)(-3), (java.lang.Number)1377746617222L, (java.lang.Number)1377742993058L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);

  }

  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test83"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    boolean var30 = var28.isAfter(10L);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var31.setChronology((org.joda.time.Chronology)var34);
    org.joda.time.Interval var36 = var28.withChronology((org.joda.time.Chronology)var34);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.Hours var50 = var49.toStandardHours();
    java.lang.String var51 = var50.toString();
    org.joda.time.Days var52 = var50.toStandardDays();
    org.joda.time.Minutes var53 = var52.toStandardMinutes();
    org.joda.time.Duration var54 = var53.toStandardDuration();
    org.joda.time.Interval var55 = var28.withDurationAfterStart((org.joda.time.ReadableDuration)var54);
    org.joda.time.chrono.JulianChronology var56 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var57 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var56);
    org.joda.time.Period var62 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var64 = var62.plusSeconds(100);
    org.joda.time.Period var66 = var62.minusMillis(10);
    boolean var67 = var57.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var68 = var57.dayOfYear();
    org.joda.time.chrono.JulianChronology var69 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var70 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var69);
    org.joda.time.LocalDate var71 = var70.toLocalDate();
    org.joda.time.LocalDate var73 = var71.minusMonths(0);
    org.joda.time.DateTime var74 = var71.toDateTimeAtMidnight();
    org.joda.time.DateTime var76 = var74.withCenturyOfEra(4);
    org.joda.time.Days var77 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var57, (org.joda.time.ReadableInstant)var76);
    org.joda.time.DateTime var79 = var76.plusSeconds(10);
    org.joda.time.DateTime var81 = var79.minusMinutes(16);
    org.joda.time.DateTime var83 = var81.withWeekyear(16);
    boolean var84 = var28.contains((org.joda.time.ReadableInstant)var83);
    org.joda.time.DateTime.Property var85 = var83.dayOfWeek();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "PT0H"+ "'", var51.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test84() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test84"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var2.appendDayOfWeek(8400);
    org.joda.time.format.DateTimeFormatterBuilder var6 = var4.appendLiteral("-1 hours");
    org.joda.time.format.DateTimeFormatterBuilder var8 = var4.appendMinuteOfHour(51);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var8.appendLiteral('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test85() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test85"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getYearOfCentury();
    int var4 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var6 = var0.minusMinutes(1);
    org.joda.time.LocalDateTime.Property var7 = var6.dayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test86() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test86"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    int var24 = var19.getSecondOfMinute();
    int var25 = var19.getDayOfYear();
    org.joda.time.LocalDateTime var27 = var19.minusHours(35);
    org.joda.time.LocalDateTime var29 = var19.plusDays(86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test87"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    int var5 = var4.getYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2013);

  }

  public void test88() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test88"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var4.toDateTimeAtMidnight();
    java.util.GregorianCalendar var6 = var5.toGregorianCalendar();
    org.joda.time.MonthDay var7 = org.joda.time.MonthDay.fromCalendarFields((java.util.Calendar)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test89() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test89"); }


    org.joda.time.TimeOfDay var1 = new org.joda.time.TimeOfDay(2755493227898L);

  }

  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test90"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Hours var1 = org.joda.time.Hours.parseHours("1970-01-01T00:00:00.110+00:00:00.100/1970-01-01T00:00:00.110+00:00:00.100");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test91() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test91"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.YearMonth var2 = new org.joda.time.YearMonth(var1);
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var4 = var3.dayOfYear();
    org.joda.time.YearMonthDay var5 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var3);
    int var6 = var5.getYear();
    org.joda.time.Period var9 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    var12.setWeekOfWeekyear(1);
    int var15 = var12.getRoundingMode();
    var12.addMillis(100);
    var12.setSecondOfMinute(10);
    org.joda.time.PeriodType var20 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var21 = new org.joda.time.Period((org.joda.time.ReadableDuration)var11, (org.joda.time.ReadableInstant)var12, var20);
    org.joda.time.Days var22 = var21.toStandardDays();
    org.joda.time.DurationFieldType var23 = var22.getFieldType();
    int var24 = var9.get(var23);
    org.joda.time.YearMonthDay var25 = var5.minus((org.joda.time.ReadablePeriod)var9);
    org.joda.time.DateTime var26 = var25.toDateTimeAtCurrentTime();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var28);
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = var31.toLocalDate();
    org.joda.time.MutableDateTime var33 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var34 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var31, (org.joda.time.ReadableInstant)var33);
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var36 = var35.year();
    boolean var37 = var33.isBefore((org.joda.time.ReadableInstant)var35);
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    boolean var42 = var39.isShorterThan((org.joda.time.ReadableDuration)var41);
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    boolean var47 = var44.isShorterThan((org.joda.time.ReadableDuration)var46);
    org.joda.time.Duration var48 = var39.plus((org.joda.time.ReadableDuration)var44);
    var35.add((org.joda.time.ReadableDuration)var44);
    var35.setHourOfDay(10);
    org.joda.time.Years var52 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var35);
    org.joda.time.YearMonthDay var53 = var25.minus((org.joda.time.ReadablePeriod)var52);
    org.joda.time.YearMonth var55 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var56 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var57 = var55.withChronologyRetainFields((org.joda.time.Chronology)var56);
    org.joda.time.Years var59 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var60 = var59.getPeriodType();
    org.joda.time.Years var62 = org.joda.time.Years.years((-1));
    int var63 = var59.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var62);
    int[] var66 = var56.get((org.joda.time.ReadablePeriod)var62, 0L, 0L);
    org.joda.time.Years var67 = var52.minus(var62);
    org.joda.time.YearMonth var68 = var2.minus((org.joda.time.ReadablePeriod)var62);
    int var69 = var2.getYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2005);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 2013);

  }

  public void test92() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test92"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.Instant var3 = var1.toInstant();
    org.joda.time.LocalDateTime var4 = org.joda.time.LocalDateTime.now();
    int var5 = var4.getDayOfYear();
    org.joda.time.Chronology var6 = var4.getChronology();
    org.joda.time.YearMonthDay var7 = new org.joda.time.YearMonthDay(var6);
    org.joda.time.YearMonthDay var9 = var7.plusYears(2013);
    org.joda.time.TimeOfDay var10 = new org.joda.time.TimeOfDay();
    int var11 = var10.size();
    org.joda.time.chrono.EthiopicChronology var13 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var14 = var13.hours();
    org.joda.time.LocalTime var15 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var13);
    org.joda.time.LocalTime var17 = var15.withMillisOfSecond(1);
    org.joda.time.LocalTime var19 = var17.minusHours((-1));
    org.joda.time.Years var20 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var10, (org.joda.time.ReadablePartial)var19);
    int var21 = var10.getMillisOfSecond();
    org.joda.time.TimeOfDay var23 = var10.minusMillis((-9));
    org.joda.time.chrono.ISOChronology var24 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var29 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var31 = var29.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var33 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstance(var33);
    long var36 = var29.getMillisKeepLocal(var33, 1377746580759L);
    org.joda.time.Chronology var37 = var24.withZone(var33);
    java.util.TimeZone var38 = var33.toTimeZone();
    org.joda.time.DateTime var39 = var9.toDateTime(var23, var33);
    org.joda.time.DateTime var40 = var3.toDateTime(var33);
    org.joda.time.Chronology var41 = var3.getChronology();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 215);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test93() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test93"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.DateMidnight var12 = var9.minusWeeks((-1));
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Days var25 = var24.toStandardDays();
    org.joda.time.DurationFieldType var26 = var25.getFieldType();
    org.joda.time.DateMidnight var28 = var12.withFieldAdded(var26, 1);
    org.joda.time.DateMidnight.Property var29 = var12.monthOfYear();
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    var32.setWeekOfWeekyear(1);
    int var35 = var32.getRoundingMode();
    var32.addMillis(100);
    var32.setSecondOfMinute(10);
    org.joda.time.PeriodType var40 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var41 = new org.joda.time.Period((org.joda.time.ReadableDuration)var31, (org.joda.time.ReadableInstant)var32, var40);
    org.joda.time.PeriodType var42 = var40.withWeeksRemoved();
    org.joda.time.Period var43 = new org.joda.time.Period((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var12, var40);
    org.joda.time.Instant var44 = new org.joda.time.Instant();
    org.joda.time.Instant var45 = var44.toInstant();
    org.joda.time.PeriodType var46 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var47 = new org.joda.time.MutablePeriod(var46);
    var47.addDays(1);
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    boolean var54 = var51.isShorterThan((org.joda.time.ReadableDuration)var53);
    var47.add((org.joda.time.ReadableDuration)var53);
    org.joda.time.Duration var57 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var59 = org.joda.time.Duration.standardHours((-1L));
    boolean var60 = var57.isShorterThan((org.joda.time.ReadableDuration)var59);
    org.joda.time.Duration var61 = var57.toDuration();
    org.joda.time.chrono.JulianChronology var62 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var63 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var62);
    org.joda.time.LocalDate var64 = var63.toLocalDate();
    org.joda.time.MutableDateTime var65 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var66 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var63, (org.joda.time.ReadableInstant)var65);
    org.joda.time.MutableDateTime var67 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var68 = var67.year();
    boolean var69 = var65.isBefore((org.joda.time.ReadableInstant)var67);
    org.joda.time.Duration var71 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var73 = org.joda.time.Duration.standardHours((-1L));
    boolean var74 = var71.isShorterThan((org.joda.time.ReadableDuration)var73);
    org.joda.time.Duration var76 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var78 = org.joda.time.Duration.standardHours((-1L));
    boolean var79 = var76.isShorterThan((org.joda.time.ReadableDuration)var78);
    org.joda.time.Duration var80 = var71.plus((org.joda.time.ReadableDuration)var76);
    var67.add((org.joda.time.ReadableDuration)var76);
    org.joda.time.PeriodType var82 = org.joda.time.PeriodType.months();
    org.joda.time.Period var83 = new org.joda.time.Period((org.joda.time.ReadableDuration)var57, (org.joda.time.ReadableInstant)var67, var82);
    org.joda.time.Period var84 = new org.joda.time.Period((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableDuration)var53, var82);
    org.joda.time.DateTime var85 = var7.plus((org.joda.time.ReadableDuration)var53);
    org.joda.time.DateTime var87 = var85.minusYears(37);
    org.joda.time.DateTime var89 = var85.plusDays(452);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test94() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test94"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.TimeOfDay var3 = var0.withMillisOfSecond(1);
    org.joda.time.Years var5 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var6 = var5.getPeriodType();
    org.joda.time.Years var8 = org.joda.time.Years.years((-1));
    int var9 = var5.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var8);
    org.joda.time.Years var11 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var12 = var11.getPeriodType();
    org.joda.time.Years var13 = var8.minus(var11);
    org.joda.time.TimeOfDay var14 = var3.minus((org.joda.time.ReadablePeriod)var8);
    org.joda.time.TimeOfDay var16 = var3.plusMinutes(13);
    org.joda.time.LocalTime var17 = var3.toLocalTime();
    org.joda.time.TimeOfDay var19 = var3.plusSeconds(69);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.Period var26 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var28 = var26.plusSeconds(100);
    org.joda.time.Period var30 = var26.minusMillis(10);
    boolean var31 = var21.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var32 = var21.dayOfYear();
    org.joda.time.chrono.JulianChronology var33 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var34 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var33);
    org.joda.time.LocalDate var35 = var34.toLocalDate();
    org.joda.time.LocalDate var37 = var35.minusMonths(0);
    org.joda.time.DateTime var38 = var35.toDateTimeAtMidnight();
    org.joda.time.DateTime var40 = var38.withCenturyOfEra(4);
    org.joda.time.Days var41 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var40);
    org.joda.time.chrono.EthiopicChronology var43 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var44 = var43.hours();
    org.joda.time.LocalTime var45 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var43);
    org.joda.time.LocalTime var47 = var45.withMillisOfSecond(1);
    org.joda.time.LocalTime var48 = org.joda.time.LocalTime.now();
    boolean var49 = var47.isAfter((org.joda.time.ReadablePartial)var48);
    org.joda.time.chrono.JulianChronology var50 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var51 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var50);
    org.joda.time.LocalDate var52 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var50);
    org.joda.time.DurationField var53 = var50.hours();
    boolean var54 = var48.equals((java.lang.Object)var50);
    org.joda.time.Duration var56 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var57 = new org.joda.time.MutableDateTime();
    var57.setWeekOfWeekyear(1);
    int var60 = var57.getRoundingMode();
    var57.addMillis(100);
    var57.setSecondOfMinute(10);
    org.joda.time.PeriodType var65 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var66 = new org.joda.time.Period((org.joda.time.ReadableDuration)var56, (org.joda.time.ReadableInstant)var57, var65);
    org.joda.time.Days var67 = var66.toStandardDays();
    org.joda.time.LocalTime var68 = var48.minus((org.joda.time.ReadablePeriod)var66);
    org.joda.time.DateMidnight var69 = var21.plus((org.joda.time.ReadablePeriod)var66);
    org.joda.time.Period var71 = var66.withMinutes(216);
    org.joda.time.TimeOfDay var72 = var19.plus((org.joda.time.ReadablePeriod)var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test95() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test95"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var0.appendYear(23, 8);
    org.joda.time.format.DateTimeFormatterBuilder var7 = var0.appendMonthOfYear(948);
    org.joda.time.format.DateTimeFormatterBuilder var9 = var7.appendDayOfWeek(24);
    org.joda.time.format.DateTimeFormatterBuilder var12 = var9.appendFractionOfSecond(33, 42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test96() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test96"); }


    org.joda.time.Minutes var1 = org.joda.time.Minutes.minutes(86399);
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "PT86399M"+ "'", var2.equals("PT86399M"));

  }

  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test97"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.DateMidnight var3 = new org.joda.time.DateMidnight(9L, (org.joda.time.Chronology)var1);
    org.joda.time.DateMidnight var5 = var3.withWeekOfWeekyear(13);
    int var6 = var3.getYear();
    org.joda.time.Interval var7 = var3.toInterval();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1962);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test98() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test98"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    int var3 = var0.getRoundingMode();
    var0.addMillis(100);
    var0.addWeekyears(21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setTime(100, (-1377742992), 12182, 22);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test99"); }


    org.joda.time.chrono.BuddhistChronology var2 = org.joda.time.chrono.BuddhistChronology.getInstance();
    org.joda.time.DurationField var3 = var2.minutes();
    java.lang.String var4 = var2.toString();
    org.joda.time.MutablePeriod var5 = new org.joda.time.MutablePeriod(1377746595607L, 80003L, (org.joda.time.Chronology)var2);
    org.joda.time.DateTimeField var6 = var2.centuryOfEra();
    org.joda.time.Chronology var7 = var2.withUTC();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "BuddhistChronology[PT0H]"+ "'", var4.equals("BuddhistChronology[PT0H]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test100() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test100"); }


    org.joda.time.chrono.BuddhistChronology var0 = org.joda.time.chrono.BuddhistChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.secondOfDay();
    org.joda.time.Chronology var2 = var0.withUTC();
    org.joda.time.DurationField var3 = var0.minutes();
    org.joda.time.chrono.EthiopicChronology var7 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var8 = var7.hours();
    org.joda.time.LocalTime var9 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var7);
    org.joda.time.Period var10 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var7);
    org.joda.time.DateTimeField var11 = var7.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var13 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var14);
    org.joda.time.LocalDate var16 = var15.toLocalDate();
    org.joda.time.LocalDate var18 = var16.minusMonths(0);
    int[] var20 = var13.get((org.joda.time.ReadablePartial)var18, 100L);
    org.joda.time.DateTime var21 = new org.joda.time.DateTime(1377746581334L, (org.joda.time.Chronology)var13);
    org.joda.time.chrono.EthiopicChronology var25 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var26 = var25.hours();
    org.joda.time.LocalTime var27 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var25);
    org.joda.time.Period var28 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var25);
    org.joda.time.DateTimeField var29 = var25.millisOfSecond();
    org.joda.time.field.SkipDateTimeField var30 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var13, var29);
    org.joda.time.DateTimeField var31 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField)var30);
    int var32 = var30.getMinimumValue();
    org.joda.time.field.SkipUndoDateTimeField var34 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology)var7, (org.joda.time.DateTimeField)var30, 19);
    long var36 = var30.roundHalfCeiling(1325559981L);
    org.joda.time.field.SkipUndoDateTimeField var37 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology)var0, (org.joda.time.DateTimeField)var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1325559981L);

  }

  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test101"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.LocalTime var7 = var5.withMillisOfSecond(1);
    org.joda.time.LocalTime var9 = var7.minusHours((-1));
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var0, (org.joda.time.ReadablePartial)var9);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var12 = var11.dayOfYear();
    org.joda.time.YearMonthDay var13 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var11);
    org.joda.time.TimeOfDay var14 = var0.withChronologyRetainFields((org.joda.time.Chronology)var11);
    org.joda.time.TimeOfDay var16 = var14.plusMillis(2005);
    java.lang.String var17 = var14.toString();
    org.joda.time.TimeOfDay var19 = var14.plusSeconds(4);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.chrono.JulianChronology var25 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var26 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var25);
    org.joda.time.LocalDate var27 = var26.toLocalDate();
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var29 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var26, (org.joda.time.ReadableInstant)var28);
    org.joda.time.MutableDateTime var30 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var31 = var30.year();
    boolean var32 = var28.isBefore((org.joda.time.ReadableInstant)var30);
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    boolean var37 = var34.isShorterThan((org.joda.time.ReadableDuration)var36);
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    boolean var42 = var39.isShorterThan((org.joda.time.ReadableDuration)var41);
    org.joda.time.Duration var43 = var34.plus((org.joda.time.ReadableDuration)var39);
    var30.add((org.joda.time.ReadableDuration)var39);
    org.joda.time.Seconds var45 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var30);
    org.joda.time.Seconds var46 = var45.negated();
    org.joda.time.Seconds var48 = var46.plus(240);
    org.joda.time.TimeOfDay var49 = var14.plus((org.joda.time.ReadablePeriod)var46);
    org.joda.time.TimeOfDay var51 = var14.plusMillis(216);
    org.joda.time.TimeOfDay var53 = var51.minusMinutes(19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "T01:23:52.365"+ "'", var17.equals("T01:23:52.365"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test102"); }


    org.joda.time.tz.DefaultNameProvider var0 = new org.joda.time.tz.DefaultNameProvider();
    org.joda.time.DateTimeZone.setNameProvider((org.joda.time.tz.NameProvider)var0);

  }

  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test103"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    int var4 = var3.getSecondOfMinute();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.Period var11 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var13 = var11.plusSeconds(100);
    org.joda.time.Period var15 = var11.minusMillis(10);
    boolean var16 = var6.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var17 = var6.dayOfYear();
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.LocalDate var22 = var20.minusMonths(0);
    org.joda.time.DateTime var23 = var20.toDateTimeAtMidnight();
    org.joda.time.DateTime var25 = var23.withCenturyOfEra(4);
    org.joda.time.Days var26 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var25);
    org.joda.time.chrono.EthiopicChronology var28 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var29 = var28.hours();
    org.joda.time.LocalTime var30 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var28);
    org.joda.time.LocalTime var32 = var30.withMillisOfSecond(1);
    org.joda.time.LocalTime var33 = org.joda.time.LocalTime.now();
    boolean var34 = var32.isAfter((org.joda.time.ReadablePartial)var33);
    org.joda.time.chrono.JulianChronology var35 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var36 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var35);
    org.joda.time.LocalDate var37 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var35);
    org.joda.time.DurationField var38 = var35.hours();
    boolean var39 = var33.equals((java.lang.Object)var35);
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var42 = new org.joda.time.MutableDateTime();
    var42.setWeekOfWeekyear(1);
    int var45 = var42.getRoundingMode();
    var42.addMillis(100);
    var42.setSecondOfMinute(10);
    org.joda.time.PeriodType var50 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var51 = new org.joda.time.Period((org.joda.time.ReadableDuration)var41, (org.joda.time.ReadableInstant)var42, var50);
    org.joda.time.Days var52 = var51.toStandardDays();
    org.joda.time.LocalTime var53 = var33.minus((org.joda.time.ReadablePeriod)var51);
    org.joda.time.DateMidnight var54 = var6.plus((org.joda.time.ReadablePeriod)var51);
    org.joda.time.Period var56 = var51.withMinutes(216);
    org.joda.time.Period var58 = var51.withMinutes(9);
    org.joda.time.LocalTime var60 = var3.withPeriodAdded((org.joda.time.ReadablePeriod)var51, 7);
    org.joda.time.Period var62 = var51.minusDays(402);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test104"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.parse("DateTimeField[secondOfDay]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test105"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var5 = var0.withYear(21);
    java.lang.String var6 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "2013-08-29T01:23:52.427"+ "'", var6.equals("2013-08-29T01:23:52.427"));

  }

  public void test106() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test106"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var15.toDateTimeAtMidnight();
    org.joda.time.DateTime var20 = var18.withCenturyOfEra(4);
    org.joda.time.Days var21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var20);
    org.joda.time.chrono.EthiopicChronology var23 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var24 = var23.hours();
    org.joda.time.LocalTime var25 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var23);
    org.joda.time.LocalTime var27 = var25.withMillisOfSecond(1);
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.now();
    boolean var29 = var27.isAfter((org.joda.time.ReadablePartial)var28);
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var30);
    org.joda.time.DurationField var33 = var30.hours();
    boolean var34 = var28.equals((java.lang.Object)var30);
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var37 = new org.joda.time.MutableDateTime();
    var37.setWeekOfWeekyear(1);
    int var40 = var37.getRoundingMode();
    var37.addMillis(100);
    var37.setSecondOfMinute(10);
    org.joda.time.PeriodType var45 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var46 = new org.joda.time.Period((org.joda.time.ReadableDuration)var36, (org.joda.time.ReadableInstant)var37, var45);
    org.joda.time.Days var47 = var46.toStandardDays();
    org.joda.time.LocalTime var48 = var28.minus((org.joda.time.ReadablePeriod)var46);
    org.joda.time.DateMidnight var49 = var1.plus((org.joda.time.ReadablePeriod)var46);
    org.joda.time.DateMidnight var51 = var1.plus(1L);
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var54 = new org.joda.time.MutableDateTime();
    var54.setWeekOfWeekyear(1);
    int var57 = var54.getRoundingMode();
    var54.addMillis(100);
    var54.setSecondOfMinute(10);
    org.joda.time.PeriodType var62 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var63 = new org.joda.time.Period((org.joda.time.ReadableDuration)var53, (org.joda.time.ReadableInstant)var54, var62);
    org.joda.time.Days var64 = var63.toStandardDays();
    org.joda.time.Hours var65 = var64.toStandardHours();
    org.joda.time.DateMidnight var66 = var1.minus((org.joda.time.ReadablePeriod)var64);
    int var67 = var1.getSecondOfDay();
    org.joda.time.LocalDate var68 = var1.toLocalDate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test107() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test107"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.DateMidnight var5 = var2.toDateMidnight();
    int var6 = var2.getWeekyear();
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var8 = var7.year();
    org.joda.time.MutableDateTime.Property var9 = var7.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.Period var16 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var18 = var16.plusSeconds(100);
    org.joda.time.Period var20 = var16.minusMillis(10);
    boolean var21 = var11.equals((java.lang.Object)10);
    org.joda.time.Weeks var22 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var11);
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var24 = var23.year();
    org.joda.time.MutableDateTime.Property var25 = var23.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.Period var32 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var34 = var32.plusSeconds(100);
    org.joda.time.Period var36 = var32.minusMillis(10);
    boolean var37 = var27.equals((java.lang.Object)10);
    org.joda.time.Weeks var38 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableInstant)var27);
    org.joda.time.Weeks var39 = var22.minus(var38);
    org.joda.time.MutableDateTime var40 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var41 = var40.year();
    org.joda.time.MutableDateTime.Property var42 = var40.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var43 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var44 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var43);
    org.joda.time.Period var49 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var51 = var49.plusSeconds(100);
    org.joda.time.Period var53 = var49.minusMillis(10);
    boolean var54 = var44.equals((java.lang.Object)10);
    org.joda.time.Weeks var55 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var40, (org.joda.time.ReadableInstant)var44);
    org.joda.time.MutableDateTime var56 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var57 = var56.year();
    org.joda.time.MutableDateTime.Property var58 = var56.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var59 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var60 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var59);
    org.joda.time.Period var65 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var67 = var65.plusSeconds(100);
    org.joda.time.Period var69 = var65.minusMillis(10);
    boolean var70 = var60.equals((java.lang.Object)10);
    org.joda.time.Weeks var71 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var56, (org.joda.time.ReadableInstant)var60);
    org.joda.time.Weeks var72 = var55.minus(var71);
    boolean var73 = var39.isGreaterThan(var55);
    org.joda.time.LocalDate var74 = var2.minus((org.joda.time.ReadablePeriod)var39);
    org.joda.time.LocalDate var76 = var2.withYear(70541200);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2013);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test108() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test108"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.LocalTime var7 = var5.withMillisOfSecond(1);
    org.joda.time.LocalTime var9 = var7.minusHours((-1));
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var0, (org.joda.time.ReadablePartial)var9);
    int var11 = var0.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var12 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var13 = var0.withChronologyRetainFields((org.joda.time.Chronology)var12);
    org.joda.time.TimeOfDay var15 = var13.minusMinutes(0);
    org.joda.time.TimeOfDay var17 = var15.plusMinutes(35);
    org.joda.time.TimeOfDay var19 = var17.minusHours(22);
    org.joda.time.DateTime var20 = var19.toDateTimeToday();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 524);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test109"); }


    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = var4.toLocalDate();
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var7 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var6);
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var9 = var8.year();
    boolean var10 = var6.isBefore((org.joda.time.ReadableInstant)var8);
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    boolean var15 = var12.isShorterThan((org.joda.time.ReadableDuration)var14);
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    boolean var20 = var17.isShorterThan((org.joda.time.ReadableDuration)var19);
    org.joda.time.Duration var21 = var12.plus((org.joda.time.ReadableDuration)var17);
    var8.add((org.joda.time.ReadableDuration)var17);
    var8.setHourOfDay(10);
    org.joda.time.Years var25 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var8);
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.minutes();
    org.joda.time.Chronology var28 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology)var26);
    var8.setChronology(var28);
    org.joda.time.MutableDateTime var30 = new org.joda.time.MutableDateTime(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test110() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test110"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getYearOfCentury();
    int var4 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var6 = var0.minusWeeks(759);
    int var7 = var6.getMinuteOfHour();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 23);

  }

  public void test111() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test111"); }


    org.joda.time.Days var1 = org.joda.time.Days.parseDays("P0M");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test112() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test112"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var1 = var0.hours();
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var2);
    org.joda.time.DateTimeField var5 = var2.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var6 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = var8.toLocalDate();
    org.joda.time.LocalDate var11 = var9.minusMonths(0);
    int[] var13 = var6.get((org.joda.time.ReadablePartial)var11, 100L);
    org.joda.time.chrono.EthiopicChronology var17 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var18 = var17.hours();
    org.joda.time.LocalTime var19 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var17);
    org.joda.time.Period var20 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var17);
    org.joda.time.DateTimeField var21 = var17.millisOfSecond();
    org.joda.time.DateTimeField var22 = var17.secondOfDay();
    org.joda.time.field.SkipDateTimeField var24 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var6, var22, 100);
    org.joda.time.LocalDateTime var25 = org.joda.time.LocalDateTime.now();
    int var26 = var25.getDayOfYear();
    org.joda.time.Chronology var27 = var25.getChronology();
    int var28 = var25.getYearOfCentury();
    int var29 = var24.getMaximumValue((org.joda.time.ReadablePartial)var25);
    boolean var31 = var24.isLeap(1L);
    org.joda.time.LocalDateTime var32 = org.joda.time.LocalDateTime.now();
    int var33 = var32.getDayOfYear();
    int var34 = var24.getMinimumValue((org.joda.time.ReadablePartial)var32);
    org.joda.time.DurationField var35 = var24.getDurationField();
    org.joda.time.DateTimeFieldType var36 = var24.getType();
    org.joda.time.field.OffsetDateTimeField var40 = new org.joda.time.field.OffsetDateTimeField(var5, var36, 884, 3, 948);
    long var42 = var40.roundCeiling(3L);
    org.joda.time.field.SkipUndoDateTimeField var44 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology)var0, (org.joda.time.DateTimeField)var40, 18);
    int var45 = var44.getMinimumValue();
    int var47 = var44.getMinimumValue(1378524280900L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 884);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 884);

  }

  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test113"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.LocalTime var7 = var5.withMillisOfSecond(1);
    org.joda.time.LocalTime var9 = var7.minusHours((-1));
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var0, (org.joda.time.ReadablePartial)var9);
    int var11 = var0.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var12 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var13 = var0.withChronologyRetainFields((org.joda.time.Chronology)var12);
    org.joda.time.TimeOfDay var15 = var13.minusMinutes(0);
    org.joda.time.TimeOfDay var17 = var15.plusMinutes(35);
    org.joda.time.TimeOfDay var19 = var17.minusHours(22);
    org.joda.time.TimeOfDay var21 = var17.plusSeconds(16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 571);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test114() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test114"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    org.joda.time.DurationField var20 = var18.getLeapDurationField();
    long var23 = var18.add(35L, 1377768182707L);
    int var25 = var18.getLeapAmount(1377746581948L);
    long var28 = var18.addWrapField((-3600000L), 1883);
    long var31 = var18.add(10L, 104L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1377768182707035L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1717000L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 104010L);

  }

  public void test115() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test115"); }


    org.joda.time.chrono.CopticChronology var0 = org.joda.time.chrono.CopticChronology.getInstanceUTC();
    org.joda.time.DateTimeField var1 = var0.clockhourOfHalfday();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test116() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test116"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    java.lang.String var20 = var18.toString();
    int var21 = var18.getMinimumValue();
    org.joda.time.field.OffsetDateTimeField var23 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField)var18, 2005);
    boolean var24 = var23.isSupported();
    org.joda.time.DateTimeFieldType var25 = var23.getType();
    org.joda.time.IllegalFieldValueException var27 = new org.joda.time.IllegalFieldValueException(var25, "P0D");
    org.joda.time.DateTimeComparator var28 = org.joda.time.DateTimeComparator.getInstance(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "DateTimeField[secondOfDay]"+ "'", var20.equals("DateTimeField[secondOfDay]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test117() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test117"); }


    org.joda.time.chrono.ISOChronology var0 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var5 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var7 = var5.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var9 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstance(var9);
    long var12 = var5.getMillisKeepLocal(var9, 1377746580759L);
    org.joda.time.Chronology var13 = var0.withZone(var9);
    org.joda.time.LocalDateTime var14 = org.joda.time.LocalDateTime.now();
    int var15 = var14.getDayOfYear();
    org.joda.time.Chronology var16 = var14.getChronology();
    org.joda.time.chrono.StrictChronology var17 = org.joda.time.chrono.StrictChronology.getInstance(var16);
    org.joda.time.DateTime var25 = new org.joda.time.DateTime(0, 4, 28, 1, 28, 1, 1);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.LocalDate.Property var27 = var26.weekyear();
    long var29 = var17.set((org.joda.time.ReadablePartial)var26, 104L);
    org.joda.time.DateTimeField var30 = var17.dayOfYear();
    org.joda.time.field.SkipDateTimeField var31 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var30);
    org.joda.time.DateTimeZone var33 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstance(var33);
    org.joda.time.Chronology var35 = var0.withZone(var33);
    org.joda.time.LocalDateTime var36 = new org.joda.time.LocalDateTime(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == (-62157023999896L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test118() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test118"); }


    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var2.setChronology((org.joda.time.Chronology)var5);
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(0L, var1, (org.joda.time.Chronology)var5);
    org.joda.time.LocalTime var8 = new org.joda.time.LocalTime((org.joda.time.Chronology)var5);
    org.joda.time.LocalTime var10 = var8.withHourOfDay(14);
    int var11 = var10.getSecondOfMinute();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 52);

  }

  public void test119() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test119"); }


    org.joda.time.format.PeriodFormatterBuilder var0 = new org.joda.time.format.PeriodFormatterBuilder();
    org.joda.time.format.PeriodFormatterBuilder var3 = var0.appendSeparator("T07:00:08", "P121961710312T697819483414166.171");
    org.joda.time.format.PeriodFormatterBuilder var5 = var0.appendSeparatorIfFieldsAfter("days");
    org.joda.time.format.PeriodFormatterBuilder var7 = var0.minimumPrintedDigits(17);
    org.joda.time.format.PeriodFormatterBuilder var8 = var7.appendHours();
    org.joda.time.format.PeriodFormatter var9 = org.joda.time.format.ISOPeriodFormat.alternate();
    org.joda.time.format.PeriodPrinter var10 = var9.getPrinter();
    org.joda.time.format.PeriodFormatter var11 = org.joda.time.format.PeriodFormat.getDefault();
    org.joda.time.format.PeriodParser var12 = var11.getParser();
    org.joda.time.format.PeriodFormatterBuilder var13 = var7.append(var10, var12);
    org.joda.time.format.PeriodFormatterBuilder var14 = var7.printZeroAlways();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.format.PeriodFormatterBuilder var16 = var14.appendSeparatorIfFieldsAfter("8581 seconds");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test120"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    long var40 = var38.roundCeiling(3L);
    long var42 = var38.roundHalfEven((-208L));
    org.joda.time.DurationField var43 = var38.getLeapDurationField();
    org.joda.time.DurationField var44 = var38.getLeapDurationField();
    boolean var46 = var38.isLeap(1377746617466L);
    long var48 = var38.roundHalfEven(100L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-208L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 100L);

  }

  public void test121() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test121"); }


    org.joda.time.chrono.ISOChronology var0 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var5 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var7 = var5.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var9 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstance(var9);
    long var12 = var5.getMillisKeepLocal(var9, 1377746580759L);
    org.joda.time.Chronology var13 = var0.withZone(var9);
    java.lang.String var14 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "ISOChronology[PT0H]"+ "'", var14.equals("ISOChronology[PT0H]"));

  }

  public void test122() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test122"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var5 = var0.withDayOfWeek(2);
    org.joda.time.LocalDateTime.Property var6 = var5.yearOfCentury();
    org.joda.time.LocalDateTime var8 = var5.plusWeeks(240);
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.LocalDate var11 = var10.toLocalDate();
    org.joda.time.LocalDate var13 = var11.minusMonths(0);
    org.joda.time.Months var15 = org.joda.time.Months.months((-1));
    org.joda.time.Months var17 = var15.plus(100);
    int var18 = var15.size();
    org.joda.time.LocalDate var19 = var11.plus((org.joda.time.ReadablePeriod)var15);
    org.joda.time.LocalDate var21 = var11.withYearOfEra(216);
    org.joda.time.LocalDateTime var22 = var8.withFields((org.joda.time.ReadablePartial)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test123() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test123"); }


    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var2.setChronology((org.joda.time.Chronology)var5);
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(0L, var1, (org.joda.time.Chronology)var5);
    org.joda.time.LocalTime var8 = new org.joda.time.LocalTime((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var9 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    int var10 = var9.getDayOfMonth();
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = var12.toLocalDate();
    org.joda.time.LocalDate var15 = var13.withMonthOfYear(1);
    int var16 = var13.getWeekOfWeekyear();
    org.joda.time.LocalDate.Property var17 = var13.weekOfWeekyear();
    org.joda.time.LocalDate var18 = var9.withFields((org.joda.time.ReadablePartial)var13);
    java.util.Date var19 = var18.toDate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test124"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.LocalDate var3 = new org.joda.time.LocalDate(var2);
    org.joda.time.LocalDate var5 = var3.withDayOfYear(1);
    org.joda.time.LocalDate.Property var6 = var3.weekOfWeekyear();
    java.util.Date var7 = var3.toDate();
    org.joda.time.TimeOfDay var8 = org.joda.time.TimeOfDay.fromDateFields(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test125() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test125"); }


    org.joda.time.LocalTime var1 = new org.joda.time.LocalTime(10L);
    org.joda.time.chrono.EthiopicChronology var2 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = var4.toLocalDate();
    org.joda.time.LocalDate var7 = var5.minusMonths(0);
    int[] var9 = var2.get((org.joda.time.ReadablePartial)var7, 100L);
    org.joda.time.chrono.EthiopicChronology var13 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var14 = var13.hours();
    org.joda.time.LocalTime var15 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var13);
    org.joda.time.Period var16 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var13);
    org.joda.time.DateTimeField var17 = var13.millisOfSecond();
    org.joda.time.DateTimeField var18 = var13.secondOfDay();
    org.joda.time.field.SkipDateTimeField var20 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var2, var18, 100);
    org.joda.time.LocalDateTime var21 = org.joda.time.LocalDateTime.now();
    int var22 = var21.getDayOfYear();
    org.joda.time.Chronology var23 = var21.getChronology();
    int var24 = var21.getYearOfCentury();
    int var25 = var20.getMaximumValue((org.joda.time.ReadablePartial)var21);
    long var28 = var20.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var29 = var20.getRangeDurationField();
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.DateMidnight var33 = var31.plusDays(2013);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var35 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var34);
    org.joda.time.LocalDate var36 = var35.toLocalDate();
    org.joda.time.DateMidnight var38 = var35.minusWeeks((-1));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var41 = new org.joda.time.MutableDateTime();
    var41.setWeekOfWeekyear(1);
    int var44 = var41.getRoundingMode();
    var41.addMillis(100);
    var41.setSecondOfMinute(10);
    org.joda.time.PeriodType var49 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var50 = new org.joda.time.Period((org.joda.time.ReadableDuration)var40, (org.joda.time.ReadableInstant)var41, var49);
    org.joda.time.Days var51 = var50.toStandardDays();
    org.joda.time.DurationFieldType var52 = var51.getFieldType();
    org.joda.time.DateMidnight var54 = var38.withFieldAdded(var52, 1);
    org.joda.time.field.PreciseDurationField var56 = new org.joda.time.field.PreciseDurationField(var52, 1L);
    org.joda.time.DateMidnight var58 = var33.withFieldAdded(var52, 228);
    org.joda.time.field.DecoratedDurationField var59 = new org.joda.time.field.DecoratedDurationField(var29, var52);
    long var62 = var59.add(1377746681334L, 9);
    org.joda.time.Duration var64 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var65 = new org.joda.time.MutableDateTime();
    var65.setWeekOfWeekyear(1);
    int var68 = var65.getRoundingMode();
    var65.addMillis(100);
    var65.setSecondOfMinute(10);
    org.joda.time.PeriodType var73 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var74 = new org.joda.time.Period((org.joda.time.ReadableDuration)var64, (org.joda.time.ReadableInstant)var65, var73);
    org.joda.time.Days var75 = var74.toStandardDays();
    org.joda.time.DurationFieldType var76 = var75.getFieldType();
    org.joda.time.field.DecoratedDurationField var77 = new org.joda.time.field.DecoratedDurationField((org.joda.time.DurationField)var59, var76);
    boolean var78 = var1.isSupported(var76);
    org.joda.time.LocalTime var80 = var1.minusMinutes(47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1378524281334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test126"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.MutableDateTime.Property var2 = var0.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.Period var9 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var11 = var9.plusSeconds(100);
    org.joda.time.Period var13 = var9.minusMillis(10);
    boolean var14 = var4.equals((java.lang.Object)10);
    org.joda.time.Weeks var15 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var4);
    org.joda.time.chrono.JulianChronology var17 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var18 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var17);
    java.util.Date var19 = var18.toDate();
    org.joda.time.Months var20 = org.joda.time.Months.monthsBetween((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test127() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test127"); }


    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearDay();
    org.joda.time.LocalDateTime var3 = org.joda.time.LocalDateTime.now();
    int var4 = var3.getDayOfYear();
    org.joda.time.Chronology var5 = var3.getChronology();
    org.joda.time.chrono.StrictChronology var6 = org.joda.time.chrono.StrictChronology.getInstance(var5);
    org.joda.time.DateTime var14 = new org.joda.time.DateTime(0, 4, 28, 1, 28, 1, 1);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate.Property var16 = var15.weekyear();
    long var18 = var6.set((org.joda.time.ReadablePartial)var15, 104L);
    org.joda.time.LocalTime var19 = new org.joda.time.LocalTime((org.joda.time.Chronology)var6);
    org.joda.time.MutablePeriod var20 = new org.joda.time.MutablePeriod((-62156990340999L), 1378524281334L, var2, (org.joda.time.Chronology)var6);
    java.lang.String var21 = var6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-62157023999896L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "StrictChronology[ISOChronology[UTC]]"+ "'", var21.equals("StrictChronology[ISOChronology[UTC]]"));

  }

  public void test128() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test128"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var5 = var0.withDayOfWeek(2);
    org.joda.time.LocalDateTime var6 = org.joda.time.LocalDateTime.now();
    int var7 = var6.getDayOfYear();
    org.joda.time.LocalDateTime var9 = var6.minusSeconds(2005);
    org.joda.time.Chronology var10 = var6.getChronology();
    org.joda.time.DateTimeZone var12 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var13 = org.joda.time.MutableDateTime.now(var12);
    org.joda.time.DateTime var14 = var6.toDateTime(var12);
    org.joda.time.DateTime var15 = var5.toDateTime(var12);
    org.joda.time.PeriodType var16 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var17 = new org.joda.time.MutablePeriod(var16);
    var17.addDays(1);
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    boolean var24 = var21.isShorterThan((org.joda.time.ReadableDuration)var23);
    var17.add((org.joda.time.ReadableDuration)var23);
    org.joda.time.MutableDateTime var26 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var23, (org.joda.time.ReadableInstant)var26);
    var27.clear();
    org.joda.time.PeriodType var29 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var30 = new org.joda.time.MutablePeriod(var29);
    var30.addDays(1);
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    boolean var37 = var34.isShorterThan((org.joda.time.ReadableDuration)var36);
    var30.add((org.joda.time.ReadableDuration)var36);
    var27.add((org.joda.time.ReadablePeriod)var30);
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var40);
    org.joda.time.LocalDate var42 = var41.toLocalDate();
    org.joda.time.MutableDateTime var43 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var44 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var43);
    org.joda.time.MutableDateTime var45 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var46 = var45.year();
    boolean var47 = var43.isBefore((org.joda.time.ReadableInstant)var45);
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    boolean var52 = var49.isShorterThan((org.joda.time.ReadableDuration)var51);
    org.joda.time.Duration var54 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var56 = org.joda.time.Duration.standardHours((-1L));
    boolean var57 = var54.isShorterThan((org.joda.time.ReadableDuration)var56);
    org.joda.time.Duration var58 = var49.plus((org.joda.time.ReadableDuration)var54);
    var45.add((org.joda.time.ReadableDuration)var54);
    org.joda.time.Hours var60 = var54.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var61 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var30.setPeriod((org.joda.time.ReadableDuration)var54, (org.joda.time.Chronology)var61);
    org.joda.time.DateTime var64 = var15.withDurationAdded((org.joda.time.ReadableDuration)var54, 2);
    org.joda.time.DateTime.Property var65 = var64.era();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test129"); }


    org.joda.time.LocalDateTime var1 = org.joda.time.LocalDateTime.now();
    int var2 = var1.getDayOfYear();
    org.joda.time.Chronology var3 = var1.getChronology();
    org.joda.time.chrono.StrictChronology var4 = org.joda.time.chrono.StrictChronology.getInstance(var3);
    org.joda.time.chrono.EthiopicChronology var5 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var6 = var5.hours();
    org.joda.time.DateTimeField var7 = var5.minuteOfHour();
    boolean var8 = var4.equals((java.lang.Object)var5);
    org.joda.time.Chronology var9 = var5.withUTC();
    org.joda.time.LocalTime var10 = org.joda.time.LocalTime.fromMillisOfDay((-3600L), (org.joda.time.Chronology)var5);
    org.joda.time.TimeOfDay var11 = new org.joda.time.TimeOfDay();
    int var12 = var11.size();
    org.joda.time.chrono.EthiopicChronology var14 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var15 = var14.hours();
    org.joda.time.LocalTime var16 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var14);
    org.joda.time.LocalTime var18 = var16.withMillisOfSecond(1);
    org.joda.time.LocalTime var20 = var18.minusHours((-1));
    org.joda.time.Years var21 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var11, (org.joda.time.ReadablePartial)var20);
    int var22 = var11.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var23 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var24 = var11.withChronologyRetainFields((org.joda.time.Chronology)var23);
    org.joda.time.TimeOfDay var26 = var24.minusMinutes(0);
    org.joda.time.TimeOfDay var28 = var26.plusMinutes(35);
    org.joda.time.Period var29 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial)var10, (org.joda.time.ReadablePartial)var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 876);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test130() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test130"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusYears((-1));
    org.joda.time.Years var8 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var9 = var8.getPeriodType();
    org.joda.time.Period var10 = var4.normalizedStandard(var9);
    org.joda.time.PeriodType var11 = var9.withMonthsRemoved();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test131"); }


    org.joda.time.Partial var0 = new org.joda.time.Partial();
    java.lang.String var1 = var0.toString();
    org.joda.time.Duration var3 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    var4.setWeekOfWeekyear(1);
    int var7 = var4.getRoundingMode();
    var4.addMillis(100);
    var4.setSecondOfMinute(10);
    org.joda.time.PeriodType var12 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var13 = new org.joda.time.Period((org.joda.time.ReadableDuration)var3, (org.joda.time.ReadableInstant)var4, var12);
    org.joda.time.Days var14 = var13.toStandardDays();
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.Period var21 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var23 = var21.plusSeconds(100);
    org.joda.time.Period var25 = var21.minusMillis(10);
    boolean var26 = var16.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var27 = var16.dayOfYear();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.LocalDate var30 = var29.toLocalDate();
    org.joda.time.LocalDate var32 = var30.minusMonths(0);
    org.joda.time.DateTime var33 = var30.toDateTimeAtMidnight();
    org.joda.time.DateTime var35 = var33.withCenturyOfEra(4);
    org.joda.time.Days var36 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var16, (org.joda.time.ReadableInstant)var35);
    org.joda.time.Days var38 = var36.dividedBy(1);
    boolean var39 = var14.isGreaterThan(var36);
    org.joda.time.DurationFieldType var40 = var14.getFieldType();
    org.joda.time.Seconds var41 = var14.toStandardSeconds();
    org.joda.time.Partial var42 = var0.minus((org.joda.time.ReadablePeriod)var41);
    org.joda.time.TimeOfDay var43 = new org.joda.time.TimeOfDay();
    int var44 = var43.size();
    org.joda.time.TimeOfDay var46 = var43.withMillisOfSecond(1);
    org.joda.time.Years var48 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var49 = var48.getPeriodType();
    org.joda.time.Years var51 = org.joda.time.Years.years((-1));
    int var52 = var48.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var51);
    org.joda.time.Years var54 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var55 = var54.getPeriodType();
    org.joda.time.Years var56 = var51.minus(var54);
    org.joda.time.TimeOfDay var57 = var46.minus((org.joda.time.ReadablePeriod)var51);
    boolean var58 = var0.isMatch((org.joda.time.ReadablePartial)var46);
    org.joda.time.Period var63 = new org.joda.time.Period(1, 10, 10, 1);
    int var64 = var63.getWeeks();
    org.joda.time.Period var65 = var63.toPeriod();
    int var66 = var65.getMonths();
    org.joda.time.Partial var67 = var0.plus((org.joda.time.ReadablePeriod)var65);
    org.joda.time.Chronology var68 = var0.getChronology();
    int[] var69 = var0.getValues();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test132() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test132"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var6 = new org.joda.time.LocalDateTime(4, 46, 215, 2, 884, 36);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test133() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test133"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    boolean var51 = var47.isBefore((org.joda.time.ReadableInstant)var49);
    org.joda.time.Interval var52 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var49);
    boolean var54 = var52.isAfter(10L);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    var55.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var55.setChronology((org.joda.time.Chronology)var58);
    org.joda.time.Interval var60 = var52.withChronology((org.joda.time.Chronology)var58);
    var11.setPeriod((org.joda.time.ReadableInterval)var52);
    var11.addMillis((-1));
    int var64 = var11.getWeeks();
    var11.setPeriod(1377746681334L);
    org.joda.time.MutablePeriod var67 = var11.copy();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var67.setValue(26, 100);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test134() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test134"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var5 = var0.plusWeeks(452);
    org.joda.time.LocalDateTime var7 = var5.plusDays(41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test135() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test135"); }


    org.joda.time.DateTimeZone var2 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstance(var2);
    org.joda.time.chrono.IslamicChronology var4 = org.joda.time.chrono.IslamicChronology.getInstance(var2);
    org.joda.time.LocalDateTime var5 = new org.joda.time.LocalDateTime(1377746593922L, (org.joda.time.Chronology)var4);
    org.joda.time.chrono.StrictChronology var6 = org.joda.time.chrono.StrictChronology.getInstance((org.joda.time.Chronology)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test136() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test136"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = var4.toLocalDate();
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var7 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var6);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var12 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var9, (org.joda.time.ReadableInstant)var11);
    org.joda.time.MutableDateTime var13 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var14 = var13.year();
    boolean var15 = var11.isBefore((org.joda.time.ReadableInstant)var13);
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    boolean var20 = var17.isShorterThan((org.joda.time.ReadableDuration)var19);
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var24 = org.joda.time.Duration.standardHours((-1L));
    boolean var25 = var22.isShorterThan((org.joda.time.ReadableDuration)var24);
    org.joda.time.Duration var26 = var17.plus((org.joda.time.ReadableDuration)var22);
    var13.add((org.joda.time.ReadableDuration)var22);
    org.joda.time.Seconds var28 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var13);
    org.joda.time.Weeks var29 = var28.toStandardWeeks();
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    boolean var34 = var31.isShorterThan((org.joda.time.ReadableDuration)var33);
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    boolean var39 = var36.isShorterThan((org.joda.time.ReadableDuration)var38);
    org.joda.time.Duration var40 = var31.plus((org.joda.time.ReadableDuration)var36);
    boolean var41 = var29.equals((java.lang.Object)var40);
    org.joda.time.LocalDateTime var43 = var0.withDurationAdded((org.joda.time.ReadableDuration)var40, 10);
    int var44 = var43.getYearOfCentury();
    int var45 = var43.getWeekOfWeekyear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 35);

  }

  public void test137() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test137"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    boolean var30 = var28.isAfter(10L);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var31.setChronology((org.joda.time.Chronology)var34);
    org.joda.time.Interval var36 = var28.withChronology((org.joda.time.Chronology)var34);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.Hours var50 = var49.toStandardHours();
    java.lang.String var51 = var50.toString();
    org.joda.time.Days var52 = var50.toStandardDays();
    org.joda.time.Minutes var53 = var52.toStandardMinutes();
    org.joda.time.Duration var54 = var53.toStandardDuration();
    org.joda.time.Interval var55 = var28.withDurationAfterStart((org.joda.time.ReadableDuration)var54);
    org.joda.time.LocalDateTime var56 = org.joda.time.LocalDateTime.now();
    int var57 = var56.getDayOfYear();
    org.joda.time.LocalDateTime var59 = var56.minusSeconds(2005);
    org.joda.time.LocalDateTime var61 = var59.withMillisOfSecond(16);
    int var62 = var61.getMillisOfSecond();
    org.joda.time.tz.FixedDateTimeZone var67 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var69 = var67.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var71 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var72 = org.joda.time.chrono.JulianChronology.getInstance(var71);
    long var74 = var67.getMillisKeepLocal(var71, 1377746580759L);
    org.joda.time.DateTime var75 = var61.toDateTime((org.joda.time.DateTimeZone)var67);
    boolean var76 = var55.isBefore((org.joda.time.ReadableInstant)var75);
    org.joda.time.DateTime var78 = var75.minus(382728L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "PT0H"+ "'", var51.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test138() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test138"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = var4.toLocalDate();
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var7 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var6);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var12 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var9, (org.joda.time.ReadableInstant)var11);
    org.joda.time.MutableDateTime var13 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var14 = var13.year();
    boolean var15 = var11.isBefore((org.joda.time.ReadableInstant)var13);
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    boolean var20 = var17.isShorterThan((org.joda.time.ReadableDuration)var19);
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var24 = org.joda.time.Duration.standardHours((-1L));
    boolean var25 = var22.isShorterThan((org.joda.time.ReadableDuration)var24);
    org.joda.time.Duration var26 = var17.plus((org.joda.time.ReadableDuration)var22);
    var13.add((org.joda.time.ReadableDuration)var22);
    org.joda.time.Seconds var28 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var13);
    org.joda.time.Weeks var29 = var28.toStandardWeeks();
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    boolean var34 = var31.isShorterThan((org.joda.time.ReadableDuration)var33);
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    boolean var39 = var36.isShorterThan((org.joda.time.ReadableDuration)var38);
    org.joda.time.Duration var40 = var31.plus((org.joda.time.ReadableDuration)var36);
    boolean var41 = var29.equals((java.lang.Object)var40);
    org.joda.time.LocalDateTime var43 = var0.withDurationAdded((org.joda.time.ReadableDuration)var40, 10);
    int var44 = var43.getYearOfCentury();
    java.util.Date var45 = var43.toDate();
    org.joda.time.LocalDate var46 = org.joda.time.LocalDate.fromDateFields(var45);
    org.joda.time.LocalDate.Property var47 = var46.era();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test139"); }


    org.joda.time.LocalDate var1 = org.joda.time.LocalDate.parse("1969-12");
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = var3.toLocalDate();
    org.joda.time.LocalDate var6 = var4.withMonthOfYear(1);
    org.joda.time.LocalDate var8 = var6.withEra(1);
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.Period var15 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var17 = var15.plusSeconds(100);
    org.joda.time.Period var19 = var15.minusMillis(10);
    boolean var20 = var10.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var21 = var10.dayOfYear();
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.LocalDate var24 = var23.toLocalDate();
    org.joda.time.LocalDate var26 = var24.minusMonths(0);
    org.joda.time.DateTime var27 = var24.toDateTimeAtMidnight();
    org.joda.time.DateTime var29 = var27.withCenturyOfEra(4);
    org.joda.time.Days var30 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var29);
    org.joda.time.DateMidnight var32 = var10.plusMonths(10);
    org.joda.time.DateTimeZone var34 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var35 = org.joda.time.MutableDateTime.now(var34);
    org.joda.time.DateMidnight var36 = var10.withZoneRetainFields(var34);
    org.joda.time.DateTime var37 = var8.toDateTimeAtMidnight(var34);
    org.joda.time.DateTime var38 = var1.toDateTimeAtCurrentTime(var34);
    org.joda.time.DateTime.Property var39 = var38.year();
    org.joda.time.DateTime var41 = var38.plusDays(36);
    org.joda.time.DateTime.Property var42 = var38.secondOfMinute();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test140() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test140"); }


    org.joda.time.format.PeriodFormatterBuilder var0 = new org.joda.time.format.PeriodFormatterBuilder();
    org.joda.time.format.PeriodFormatterBuilder var3 = var0.appendSeparator("T07:00:08", "P121961710312T697819483414166.171");
    org.joda.time.format.PeriodFormatterBuilder var5 = var0.appendSeparatorIfFieldsAfter("days");
    org.joda.time.format.PeriodFormatterBuilder var7 = var0.minimumPrintedDigits(17);
    org.joda.time.format.PeriodFormatterBuilder var8 = var7.appendHours();
    var7.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test141() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test141"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    long var57 = var54.add((-1000L), 1377742981L);
    boolean var58 = var54.isLenient();
    long var61 = var54.add(1377742999393L, 12194);
    int var64 = var54.getDifference(2762376429621796L, (-703463L));
    org.joda.time.DateTimeFieldType var65 = var54.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 4959874731599000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1421641399393L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 767326786);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test142"); }


    org.joda.time.chrono.ISOChronology var0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    java.lang.String var1 = var0.toString();
    org.joda.time.Chronology var2 = var0.withUTC();
    org.joda.time.DurationField var3 = var0.months();
    long var6 = var3.subtract(1377768182707L, 15946L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "ISOChronology[UTC]"+ "'", var1.equals("ISOChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-40556126217293L));

  }

  public void test143() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test143"); }


    org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var5 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var6 = var5.hours();
    org.joda.time.LocalTime var7 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var5);
    org.joda.time.Period var8 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var9 = var5.millisOfSecond();
    org.joda.time.chrono.LenientChronology var10 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var5);
    org.joda.time.format.DateTimeFormatter var11 = var1.withChronology((org.joda.time.Chronology)var10);
    org.joda.time.chrono.ISOChronology var12 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var17 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var19 = var17.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var20 = var12.withZone((org.joda.time.DateTimeZone)var17);
    long var22 = var17.nextTransition(9L);
    org.joda.time.Chronology var23 = var10.withZone((org.joda.time.DateTimeZone)var17);
    org.joda.time.YearMonth var24 = new org.joda.time.YearMonth(1377746580754L, (org.joda.time.Chronology)var10);
    org.joda.time.chrono.JulianChronology var25 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var26 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var25);
    org.joda.time.DateMidnight var28 = var26.plusDays(2013);
    org.joda.time.chrono.JulianChronology var29 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var30 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var29);
    org.joda.time.LocalDate var31 = var30.toLocalDate();
    org.joda.time.DateMidnight var33 = var30.minusWeeks((-1));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var36 = new org.joda.time.MutableDateTime();
    var36.setWeekOfWeekyear(1);
    int var39 = var36.getRoundingMode();
    var36.addMillis(100);
    var36.setSecondOfMinute(10);
    org.joda.time.PeriodType var44 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var45 = new org.joda.time.Period((org.joda.time.ReadableDuration)var35, (org.joda.time.ReadableInstant)var36, var44);
    org.joda.time.Days var46 = var45.toStandardDays();
    org.joda.time.DurationFieldType var47 = var46.getFieldType();
    org.joda.time.DateMidnight var49 = var33.withFieldAdded(var47, 1);
    org.joda.time.field.PreciseDurationField var51 = new org.joda.time.field.PreciseDurationField(var47, 1L);
    org.joda.time.DateMidnight var53 = var28.withFieldAdded(var47, 228);
    boolean var54 = var10.equals((java.lang.Object)228);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test144"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.MutableDateTime.Property var2 = var0.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.Period var9 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var11 = var9.plusSeconds(100);
    org.joda.time.Period var13 = var9.minusMillis(10);
    boolean var14 = var4.equals((java.lang.Object)10);
    org.joda.time.Weeks var15 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var4);
    org.joda.time.DateTime var16 = var4.toDateTime();
    org.joda.time.DateTime var18 = var16.plusDays(15);
    org.joda.time.Instant var19 = new org.joda.time.Instant();
    org.joda.time.Instant var20 = var19.toInstant();
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var24 = org.joda.time.Duration.standardHours((-1L));
    boolean var25 = var22.isShorterThan((org.joda.time.ReadableDuration)var24);
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    boolean var30 = var27.isShorterThan((org.joda.time.ReadableDuration)var29);
    org.joda.time.Duration var31 = var22.plus((org.joda.time.ReadableDuration)var27);
    org.joda.time.Instant var33 = var20.withDurationAdded((org.joda.time.ReadableDuration)var22, 1);
    org.joda.time.Duration var36 = new org.joda.time.Duration(99L, (-1L));
    org.joda.time.Instant var37 = var33.minus((org.joda.time.ReadableDuration)var36);
    org.joda.time.Duration var39 = var36.plus(1377746598382L);
    org.joda.time.DateTime var40 = new org.joda.time.DateTime();
    org.joda.time.chrono.JulianChronology var42 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var43 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var42);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    boolean var51 = var47.isBefore((org.joda.time.ReadableInstant)var49);
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var55 = org.joda.time.Duration.standardHours((-1L));
    boolean var56 = var53.isShorterThan((org.joda.time.ReadableDuration)var55);
    org.joda.time.Duration var58 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var60 = org.joda.time.Duration.standardHours((-1L));
    boolean var61 = var58.isShorterThan((org.joda.time.ReadableDuration)var60);
    org.joda.time.Duration var62 = var53.plus((org.joda.time.ReadableDuration)var58);
    var49.add((org.joda.time.ReadableDuration)var58);
    var49.setHourOfDay(10);
    org.joda.time.Years var66 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var43, (org.joda.time.ReadableInstant)var49);
    org.joda.time.Period var67 = new org.joda.time.Period((org.joda.time.ReadableInstant)var40, (org.joda.time.ReadableInstant)var49);
    org.joda.time.DateTime var69 = var40.plus(1377768182707L);
    org.joda.time.PeriodType var70 = org.joda.time.PeriodType.yearMonthDay();
    org.joda.time.PeriodType var71 = var70.withMillisRemoved();
    org.joda.time.MutablePeriod var72 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var36, (org.joda.time.ReadableInstant)var40, var71);
    org.joda.time.MutablePeriod var73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var18, (org.joda.time.ReadableDuration)var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test145"); }


    org.joda.time.Years var1 = org.joda.time.Years.years(659);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test146() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test146"); }


    org.joda.time.chrono.ISOChronology var0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.DateTimeField var1 = var0.millisOfSecond();
    org.joda.time.PeriodType var3 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.DateTime var4 = org.joda.time.DateTime.now();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var11 = var10.year();
    boolean var12 = var8.isBefore((org.joda.time.ReadableInstant)var10);
    org.joda.time.MutableDateTime.Property var13 = var10.minuteOfHour();
    org.joda.time.MutableDateTime.Property var14 = var10.millisOfSecond();
    org.joda.time.Chronology var15 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var10);
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod(9L, var3, var15);
    org.joda.time.YearMonthDay var17 = new org.joda.time.YearMonthDay(var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var18 = new org.joda.time.LocalDateTime((java.lang.Object)var0, var15);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test147"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    org.joda.time.DateTimeFieldType var55 = var54.getType();
    org.joda.time.DurationField var56 = var54.getRangeDurationField();
    org.joda.time.DurationField var57 = var54.getDurationField();
    org.joda.time.PeriodType var58 = org.joda.time.PeriodType.months();
    java.lang.String var59 = var58.toString();
    org.joda.time.PeriodType var60 = org.joda.time.PeriodType.months();
    org.joda.time.Duration var62 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    var63.setWeekOfWeekyear(1);
    int var66 = var63.getRoundingMode();
    var63.addMillis(100);
    var63.setSecondOfMinute(10);
    org.joda.time.PeriodType var71 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var72 = new org.joda.time.Period((org.joda.time.ReadableDuration)var62, (org.joda.time.ReadableInstant)var63, var71);
    org.joda.time.Days var73 = var72.toStandardDays();
    org.joda.time.DurationFieldType var74 = var73.getFieldType();
    int var75 = var60.indexOf(var74);
    boolean var76 = var58.isSupported(var74);
    org.joda.time.field.ScaledDurationField var78 = new org.joda.time.field.ScaledDurationField(var57, var74, 845);
    java.lang.String var79 = var78.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "PeriodType[Months]"+ "'", var59.equals("PeriodType[Months]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "DurationField[days]"+ "'", var79.equals("DurationField[days]"));

  }

  public void test148() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test148"); }


    org.joda.time.Instant var1 = new org.joda.time.Instant(1377746597622L);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusYears((-1));
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.LocalDate var11 = var10.toLocalDate();
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var13 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var12);
    org.joda.time.MutableDateTime var14 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var15 = var14.year();
    boolean var16 = var12.isBefore((org.joda.time.ReadableInstant)var14);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    boolean var26 = var23.isShorterThan((org.joda.time.ReadableDuration)var25);
    org.joda.time.Duration var27 = var18.plus((org.joda.time.ReadableDuration)var23);
    var14.add((org.joda.time.ReadableDuration)var23);
    org.joda.time.MutableDateTime.Property var29 = var14.weekyear();
    org.joda.time.MutableDateTime.Property var30 = var14.year();
    boolean var32 = var14.equals((java.lang.Object)(byte)0);
    org.joda.time.chrono.JulianChronology var33 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var34 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var33);
    org.joda.time.LocalDate var35 = var34.toLocalDate();
    org.joda.time.LocalDate var37 = var35.withMonthOfYear(1);
    org.joda.time.DateMidnight var38 = var35.toDateMidnight();
    var14.setTime((org.joda.time.ReadableInstant)var38);
    org.joda.time.Duration var40 = var6.toDurationFrom((org.joda.time.ReadableInstant)var14);
    org.joda.time.Interval var41 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadablePeriod)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test149() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test149"); }


    org.joda.time.Period var2 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Period var4 = var2.withHours(216);
    org.joda.time.Minutes var5 = var2.toStandardMinutes();
    int var6 = var2.getMonths();
    org.joda.time.Period var8 = var2.minusMillis(69);
    org.joda.time.Period var10 = var2.withMinutes(21);
    org.joda.time.Weeks var11 = var2.toStandardWeeks();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test150() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test150"); }


    org.joda.time.Period var8 = new org.joda.time.Period(42, 73394, 452, 659, 200, 42, 8, 47);

  }

  public void test151() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test151"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    boolean var30 = var28.isAfter(10L);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    var31.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var31.setChronology((org.joda.time.Chronology)var34);
    org.joda.time.Interval var36 = var28.withChronology((org.joda.time.Chronology)var34);
    org.joda.time.Weeks var37 = org.joda.time.Weeks.weeksIn((org.joda.time.ReadableInterval)var36);
    org.joda.time.PeriodType var38 = org.joda.time.PeriodType.hours();
    org.joda.time.Period var39 = var36.toPeriod(var38);
    org.joda.time.PeriodType var40 = var38.withSecondsRemoved();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test152() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test152"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    org.joda.time.DateTime.Property var8 = var7.era();
    org.joda.time.TimeOfDay var9 = var7.toTimeOfDay();
    org.joda.time.TimeOfDay var11 = var9.plusSeconds(100);
    org.joda.time.chrono.JulianChronology var12 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var13 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var12);
    org.joda.time.LocalDate var14 = var13.toLocalDate();
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var16 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var13, (org.joda.time.ReadableInstant)var15);
    org.joda.time.chrono.JulianChronology var17 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var18 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var17);
    org.joda.time.LocalDate var19 = var18.toLocalDate();
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var21 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var18, (org.joda.time.ReadableInstant)var20);
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var23 = var22.year();
    boolean var24 = var20.isBefore((org.joda.time.ReadableInstant)var22);
    org.joda.time.Duration var26 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    boolean var29 = var26.isShorterThan((org.joda.time.ReadableDuration)var28);
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    boolean var34 = var31.isShorterThan((org.joda.time.ReadableDuration)var33);
    org.joda.time.Duration var35 = var26.plus((org.joda.time.ReadableDuration)var31);
    var22.add((org.joda.time.ReadableDuration)var31);
    org.joda.time.Seconds var37 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var13, (org.joda.time.ReadableInstant)var22);
    org.joda.time.Duration var38 = var37.toStandardDuration();
    org.joda.time.TimeOfDay var40 = var11.withPeriodAdded((org.joda.time.ReadablePeriod)var37, 948);
    org.joda.time.LocalTime var41 = var11.toLocalTime();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTimeFieldType var43 = var41.getFieldType(999);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test153"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.DateTime var10 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var12 = var10.withMillis(0L);
    org.joda.time.MutablePeriod var13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var12);
    org.joda.time.Period var15 = org.joda.time.Period.hours(34);
    org.joda.time.DateTime var16 = var12.minus((org.joda.time.ReadablePeriod)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test154() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test154"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Days var12 = var11.toStandardDays();
    org.joda.time.Hours var13 = var12.toStandardHours();
    java.lang.String var14 = var13.toString();
    org.joda.time.Days var15 = var13.toStandardDays();
    org.joda.time.Hours var17 = var13.multipliedBy(2013);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    var20.setWeekOfWeekyear(1);
    int var23 = var20.getRoundingMode();
    var20.addMillis(100);
    var20.setSecondOfMinute(10);
    org.joda.time.PeriodType var28 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var29 = new org.joda.time.Period((org.joda.time.ReadableDuration)var19, (org.joda.time.ReadableInstant)var20, var28);
    org.joda.time.Days var30 = var29.toStandardDays();
    org.joda.time.Hours var31 = var30.toStandardHours();
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var34 = new org.joda.time.MutableDateTime();
    var34.setWeekOfWeekyear(1);
    int var37 = var34.getRoundingMode();
    var34.addMillis(100);
    var34.setSecondOfMinute(10);
    org.joda.time.PeriodType var42 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var43 = new org.joda.time.Period((org.joda.time.ReadableDuration)var33, (org.joda.time.ReadableInstant)var34, var42);
    org.joda.time.Days var44 = var43.toStandardDays();
    org.joda.time.Hours var45 = var44.toStandardHours();
    java.lang.String var46 = var45.toString();
    org.joda.time.Hours var47 = var31.plus(var45);
    org.joda.time.Hours var48 = var13.plus(var45);
    org.joda.time.DateTime var49 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var51 = var49.withMillis(0L);
    org.joda.time.DateTime var53 = var49.minusMonths(33);
    org.joda.time.chrono.JulianChronology var54 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var55 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var54);
    org.joda.time.LocalDate var56 = var55.toLocalDate();
    org.joda.time.LocalDate var58 = var56.minusMonths(0);
    org.joda.time.DateTime var59 = var56.toDateTimeAtMidnight();
    org.joda.time.DateTime var61 = var59.withMillis(100L);
    int var62 = var59.getWeekyear();
    org.joda.time.DateTime var64 = var59.withYear(86399);
    org.joda.time.DateTime.Property var65 = var64.year();
    org.joda.time.Hours var66 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant)var49, (org.joda.time.ReadableInstant)var64);
    boolean var67 = var48.isGreaterThan(var66);
    org.joda.time.Hours var69 = var66.minus(37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PT0H"+ "'", var14.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "PT0H"+ "'", var46.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 2013);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test155"); }


    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = var4.toLocalDate();
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var7 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var6);
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var9 = var8.year();
    boolean var10 = var6.isBefore((org.joda.time.ReadableInstant)var8);
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    boolean var15 = var12.isShorterThan((org.joda.time.ReadableDuration)var14);
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    boolean var20 = var17.isShorterThan((org.joda.time.ReadableDuration)var19);
    org.joda.time.Duration var21 = var12.plus((org.joda.time.ReadableDuration)var17);
    var8.add((org.joda.time.ReadableDuration)var17);
    var8.setHourOfDay(10);
    org.joda.time.Years var25 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var8);
    org.joda.time.Years var27 = var25.minus(69);
    org.joda.time.Years var29 = var27.multipliedBy(23544431);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test156"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var5 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var4);
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var7 = var6.year();
    boolean var8 = var4.isBefore((org.joda.time.ReadableInstant)var6);
    org.joda.time.MutableDateTime.Property var9 = var6.minuteOfHour();
    org.joda.time.MutableDateTime.Property var10 = var6.millisOfSecond();
    org.joda.time.Chronology var11 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var6);
    org.joda.time.DateTime.Property var12 = var0.minuteOfDay();
    org.joda.time.DateTime var14 = var0.minusDays(661);
    int var15 = var0.getEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1);

  }

  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test157"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.Hours var44 = var38.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var45 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var14.setPeriod((org.joda.time.ReadableDuration)var38, (org.joda.time.Chronology)var45);
    org.joda.time.DateTimeZone var47 = var45.getZone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test158"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    int var2 = var1.getSeconds();
    int var3 = var1.getMonths();
    var1.setWeeks((-1));
    org.joda.time.Weeks var6 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod)var1);
    org.joda.time.Days var7 = var6.toStandardDays();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var9 = var8.year();
    org.joda.time.MutableDateTime.Property var10 = var8.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.Period var17 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var19 = var17.plusSeconds(100);
    org.joda.time.Period var21 = var17.minusMillis(10);
    boolean var22 = var12.equals((java.lang.Object)10);
    org.joda.time.Weeks var23 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var8, (org.joda.time.ReadableInstant)var12);
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var25 = var24.year();
    org.joda.time.MutableDateTime.Property var26 = var24.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var27 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var28 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var27);
    org.joda.time.Period var33 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var35 = var33.plusSeconds(100);
    org.joda.time.Period var37 = var33.minusMillis(10);
    boolean var38 = var28.equals((java.lang.Object)10);
    org.joda.time.Weeks var39 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var24, (org.joda.time.ReadableInstant)var28);
    org.joda.time.Weeks var40 = var23.minus(var39);
    org.joda.time.Weeks var42 = var40.multipliedBy(147);
    boolean var43 = var6.isLessThan(var40);
    org.joda.time.DurationFieldType var44 = var40.getFieldType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test159"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.DateTime var10 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var12 = var10.withMillis(0L);
    org.joda.time.MutablePeriod var13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var12);
    int var14 = var13.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 8);

  }

  public void test160() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test160"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    org.joda.time.DurationField var20 = var18.getLeapDurationField();
    long var23 = var18.add(35L, 1377768182707L);
    int var25 = var18.getLeapAmount(1377746581948L);
    long var28 = var18.addWrapField((-3600000L), 1883);
    org.joda.time.chrono.JulianChronology var29 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var30 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var29);
    org.joda.time.LocalDate var31 = var30.toLocalDate();
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var33 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var30, (org.joda.time.ReadableInstant)var32);
    org.joda.time.DateTimeComparator var34 = org.joda.time.DateTimeComparator.getTimeOnlyInstance();
    org.joda.time.DateTimeFieldType var35 = var34.getUpperLimit();
    org.joda.time.MutableDateTime.Property var36 = var32.property(var35);
    org.joda.time.MutableInterval var37 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var38 = var37.copy();
    org.joda.time.DateTime var39 = var38.getStart();
    java.util.Date var40 = var39.toDate();
    int var41 = var39.getWeekyear();
    org.joda.time.format.DateTimeFormatterBuilder var42 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var44 = var42.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var46 = var42.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var47 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var48 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var47);
    org.joda.time.LocalDate var49 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var47);
    org.joda.time.DateTimeField var50 = var47.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var51 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var52 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var53 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var52);
    org.joda.time.LocalDate var54 = var53.toLocalDate();
    org.joda.time.LocalDate var56 = var54.minusMonths(0);
    int[] var58 = var51.get((org.joda.time.ReadablePartial)var56, 100L);
    org.joda.time.chrono.EthiopicChronology var62 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var63 = var62.hours();
    org.joda.time.LocalTime var64 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var62);
    org.joda.time.Period var65 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var62);
    org.joda.time.DateTimeField var66 = var62.millisOfSecond();
    org.joda.time.DateTimeField var67 = var62.secondOfDay();
    org.joda.time.field.SkipDateTimeField var69 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var51, var67, 100);
    org.joda.time.LocalDateTime var70 = org.joda.time.LocalDateTime.now();
    int var71 = var70.getDayOfYear();
    org.joda.time.Chronology var72 = var70.getChronology();
    int var73 = var70.getYearOfCentury();
    int var74 = var69.getMaximumValue((org.joda.time.ReadablePartial)var70);
    boolean var76 = var69.isLeap(1L);
    org.joda.time.LocalDateTime var77 = org.joda.time.LocalDateTime.now();
    int var78 = var77.getDayOfYear();
    int var79 = var69.getMinimumValue((org.joda.time.ReadablePartial)var77);
    org.joda.time.DurationField var80 = var69.getDurationField();
    org.joda.time.DateTimeFieldType var81 = var69.getType();
    org.joda.time.field.OffsetDateTimeField var85 = new org.joda.time.field.OffsetDateTimeField(var50, var81, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var88 = new org.joda.time.IllegalFieldValueException(var81, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var91 = var42.appendFraction(var81, 33, (-948));
    org.joda.time.DateTime.Property var92 = var39.property(var81);
    org.joda.time.DateTimeComparator var93 = org.joda.time.DateTimeComparator.getInstance(var35, var81);
    org.joda.time.field.DividedDateTimeField var95 = new org.joda.time.field.DividedDateTimeField((org.joda.time.DateTimeField)var18, var81, 842);
    int var97 = var18.getMaximumValue(1377746595607L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1377768182707035L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1717000L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1970);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == 86399);

  }

  public void test161() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test161"); }


    org.joda.time.format.PeriodFormatterBuilder var0 = new org.joda.time.format.PeriodFormatterBuilder();
    org.joda.time.format.PeriodFormatterBuilder var3 = var0.appendSeparator("T07:00:08", "P121961710312T697819483414166.171");
    org.joda.time.format.PeriodFormatterBuilder var5 = var0.appendSeparatorIfFieldsAfter("days");
    org.joda.time.format.PeriodFormatterBuilder var7 = var0.minimumPrintedDigits(17);
    org.joda.time.format.PeriodFormatterBuilder var8 = var7.appendHours();
    org.joda.time.format.PeriodFormatterBuilder var9 = var7.appendDays();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test162() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test162"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var15.toDateTimeAtMidnight();
    org.joda.time.DateTime var20 = var18.withCenturyOfEra(4);
    org.joda.time.Days var21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var20);
    org.joda.time.DateTime var23 = var20.plusSeconds(10);
    org.joda.time.DateTime var25 = var23.minusMinutes(16);
    org.joda.time.DateTime.Property var26 = var23.era();
    org.joda.time.chrono.EthiopicChronology var27 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var28 = var27.minutes();
    org.joda.time.DateTimeField var29 = var27.year();
    org.joda.time.DurationField var30 = var27.hours();
    org.joda.time.DateTime var31 = var23.withChronology((org.joda.time.Chronology)var27);
    org.joda.time.DateTime var33 = var31.plusMinutes(2);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    org.joda.time.Chronology var37 = var35.getChronology();
    org.joda.time.chrono.StrictChronology var38 = org.joda.time.chrono.StrictChronology.getInstance(var37);
    org.joda.time.chrono.JulianChronology var39 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var40 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var39);
    org.joda.time.LocalDate var41 = var40.toLocalDate();
    org.joda.time.LocalDate var43 = var41.withMonthOfYear(1);
    org.joda.time.LocalDate var45 = var41.withWeekyear(1);
    org.joda.time.LocalDate var47 = var41.withDayOfYear(1);
    org.joda.time.LocalDate var49 = var47.minusMonths(16);
    boolean var50 = var38.equals((java.lang.Object)16);
    org.joda.time.YearMonth var51 = new org.joda.time.YearMonth(0L, (org.joda.time.Chronology)var38);
    org.joda.time.Chronology var52 = var38.withUTC();
    org.joda.time.DateTime var53 = var31.toDateTime(var52);
    org.joda.time.DateTime var55 = var53.withYearOfEra(14);
    org.joda.time.DateTime.Property var56 = var55.monthOfYear();
    org.joda.time.chrono.JulianChronology var57 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var58 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var57);
    org.joda.time.LocalDate var59 = var58.toLocalDate();
    org.joda.time.LocalDate var61 = var59.minusMonths(0);
    org.joda.time.DateTime var62 = var59.toDateTimeAtMidnight();
    org.joda.time.DateTime var64 = var62.withMillis(100L);
    org.joda.time.DateTime.Property var65 = var64.era();
    org.joda.time.TimeOfDay var66 = var64.toTimeOfDay();
    org.joda.time.TimeOfDay var68 = var66.plusSeconds(100);
    org.joda.time.chrono.JulianChronology var69 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var70 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var69);
    org.joda.time.LocalDate var71 = var70.toLocalDate();
    org.joda.time.MutableDateTime var72 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var73 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var70, (org.joda.time.ReadableInstant)var72);
    org.joda.time.chrono.JulianChronology var74 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var75 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var74);
    org.joda.time.LocalDate var76 = var75.toLocalDate();
    org.joda.time.MutableDateTime var77 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var78 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var75, (org.joda.time.ReadableInstant)var77);
    org.joda.time.MutableDateTime var79 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var80 = var79.year();
    boolean var81 = var77.isBefore((org.joda.time.ReadableInstant)var79);
    org.joda.time.Duration var83 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var85 = org.joda.time.Duration.standardHours((-1L));
    boolean var86 = var83.isShorterThan((org.joda.time.ReadableDuration)var85);
    org.joda.time.Duration var88 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var90 = org.joda.time.Duration.standardHours((-1L));
    boolean var91 = var88.isShorterThan((org.joda.time.ReadableDuration)var90);
    org.joda.time.Duration var92 = var83.plus((org.joda.time.ReadableDuration)var88);
    var79.add((org.joda.time.ReadableDuration)var88);
    org.joda.time.Seconds var94 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var70, (org.joda.time.ReadableInstant)var79);
    org.joda.time.Duration var95 = var94.toStandardDuration();
    org.joda.time.TimeOfDay var97 = var68.withPeriodAdded((org.joda.time.ReadablePeriod)var94, 948);
    org.joda.time.Chronology var98 = var68.getChronology();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableInterval var99 = new org.joda.time.MutableInterval((java.lang.Object)var56, var98);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test163() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test163"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var1 = org.joda.time.DateTime.parse("\uFFFD\uFFFD");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test164"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var4.withEra(1);
    int var7 = var6.getDayOfYear();
    org.joda.time.chrono.IslamicChronology var8 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
    org.joda.time.format.DateTimeFormatter var9 = org.joda.time.format.ISODateTimeFormat.localDateParser();
    org.joda.time.DateTimeZone var10 = var9.getZone();
    org.joda.time.Chronology var11 = var8.withZone(var10);
    org.joda.time.Interval var12 = var6.toInterval(var10);
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var17.toDateTimeAtMidnight();
    int var19 = var6.compareTo((org.joda.time.ReadablePartial)var17);
    org.joda.time.DateTimeZone var21 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var22 = org.joda.time.DateTimeUtils.getZone(var21);
    org.joda.time.LocalDateTime var23 = new org.joda.time.LocalDateTime(var21);
    org.joda.time.MonthDay var24 = new org.joda.time.MonthDay(var21);
    org.joda.time.DateMidnight var25 = var17.toDateMidnight(var21);
    org.joda.time.Period var30 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var32 = var30.plusYears((-1));
    org.joda.time.Minutes var33 = var30.toStandardMinutes();
    org.joda.time.Minutes var35 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var36 = var33.minus(var35);
    org.joda.time.DurationFieldType var37 = var36.getFieldType();
    org.joda.time.Duration var38 = var36.toStandardDuration();
    org.joda.time.Seconds var39 = var36.toStandardSeconds();
    org.joda.time.DateMidnight var41 = var25.withPeriodAdded((org.joda.time.ReadablePeriod)var36, 6);
    org.joda.time.Period var46 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var48 = var46.plusYears((-1));
    org.joda.time.Minutes var49 = var46.toStandardMinutes();
    org.joda.time.Minutes var51 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var52 = var49.minus(var51);
    org.joda.time.DurationFieldType var53 = var52.getFieldType();
    org.joda.time.Duration var54 = var52.toStandardDuration();
    boolean var55 = var36.isGreaterThan(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test165() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test165"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var5 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var4);
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var7 = var6.year();
    boolean var8 = var4.isBefore((org.joda.time.ReadableInstant)var6);
    org.joda.time.MutableDateTime.Property var9 = var6.minuteOfHour();
    org.joda.time.MutableDateTime.Property var10 = var6.millisOfSecond();
    org.joda.time.Chronology var11 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var6);
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime(var11);
    var12.addMinutes(28);
    org.joda.time.chrono.EthiopicChronology var18 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var19 = var18.hours();
    org.joda.time.LocalTime var20 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var18);
    org.joda.time.Period var21 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var18);
    org.joda.time.DateTimeField var22 = var18.millisOfSecond();
    org.joda.time.DateTimeField var23 = var18.secondOfMinute();
    var12.setRounding(var23);
    int var25 = var12.getWeekOfWeekyear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 35);

  }

  public void test166() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test166"); }


    org.joda.time.Period var2 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var4 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    var5.setWeekOfWeekyear(1);
    int var8 = var5.getRoundingMode();
    var5.addMillis(100);
    var5.setSecondOfMinute(10);
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var14 = new org.joda.time.Period((org.joda.time.ReadableDuration)var4, (org.joda.time.ReadableInstant)var5, var13);
    org.joda.time.Days var15 = var14.toStandardDays();
    org.joda.time.DurationFieldType var16 = var15.getFieldType();
    int var17 = var2.get(var16);
    org.joda.time.Period var19 = var2.withMillis(1);
    org.joda.time.Period var21 = var19.minusHours(34);
    org.joda.time.Weeks var22 = var21.toStandardWeeks();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test167() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test167"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var2 = org.joda.time.DateTimeUtils.getZone(var1);
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now(var1);
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now(var1);
    org.joda.time.DateTime var5 = org.joda.time.DateTime.now();
    long var6 = var5.getMillis();
    org.joda.time.DateTime.Property var7 = var5.yearOfEra();
    org.joda.time.PeriodType var9 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    var10.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var10.setChronology((org.joda.time.Chronology)var13);
    org.joda.time.MutablePeriod var15 = new org.joda.time.MutablePeriod(0L, var9, (org.joda.time.Chronology)var13);
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var18 = new org.joda.time.MutableDateTime();
    var18.setWeekOfWeekyear(1);
    int var21 = var18.getRoundingMode();
    var18.addMillis(100);
    var18.setSecondOfMinute(10);
    org.joda.time.PeriodType var26 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var27 = new org.joda.time.Period((org.joda.time.ReadableDuration)var17, (org.joda.time.ReadableInstant)var18, var26);
    org.joda.time.Days var28 = var27.toStandardDays();
    org.joda.time.Duration var29 = var28.toStandardDuration();
    org.joda.time.chrono.EthiopicChronology var31 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var32 = var31.hours();
    org.joda.time.DateTimeField var33 = var31.minuteOfHour();
    org.joda.time.LocalDate var34 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var31);
    var15.setPeriod((org.joda.time.ReadableDuration)var29, (org.joda.time.Chronology)var31);
    org.joda.time.DateTime var37 = var5.withDurationAdded((org.joda.time.ReadableDuration)var29, 228);
    org.joda.time.LocalDate var38 = var5.toLocalDate();
    org.joda.time.DateTime var40 = var5.minusYears(228);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.chrono.GJChronology var42 = org.joda.time.chrono.GJChronology.getInstance(var1, (org.joda.time.ReadableInstant)var5, 12200);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1377739433586L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test168() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test168"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Duration var1 = org.joda.time.Duration.parse("03:23:15.815");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test169"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    boolean var51 = var47.isBefore((org.joda.time.ReadableInstant)var49);
    org.joda.time.Interval var52 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var49);
    boolean var54 = var52.isAfter(10L);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    var55.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var55.setChronology((org.joda.time.Chronology)var58);
    org.joda.time.Interval var60 = var52.withChronology((org.joda.time.Chronology)var58);
    var11.setPeriod((org.joda.time.ReadableInterval)var52);
    org.joda.time.Duration var63 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var64 = new org.joda.time.MutableDateTime();
    var64.setWeekOfWeekyear(1);
    int var67 = var64.getRoundingMode();
    var64.addMillis(100);
    var64.setSecondOfMinute(10);
    org.joda.time.PeriodType var72 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var73 = new org.joda.time.Period((org.joda.time.ReadableDuration)var63, (org.joda.time.ReadableInstant)var64, var72);
    org.joda.time.Days var74 = var73.toStandardDays();
    org.joda.time.Hours var75 = var74.toStandardHours();
    org.joda.time.Interval var76 = var52.withPeriodBeforeEnd((org.joda.time.ReadablePeriod)var74);
    org.joda.time.Duration var77 = var76.toDuration();
    org.joda.time.Years var78 = org.joda.time.Years.yearsIn((org.joda.time.ReadableInterval)var76);
    java.lang.String var79 = var76.toString();
    org.joda.time.Period var84 = new org.joda.time.Period(16, 100, 1, 16);
    org.joda.time.Interval var85 = var76.withPeriodBeforeEnd((org.joda.time.ReadablePeriod)var84);
    org.joda.time.Weeks var86 = var84.toStandardWeeks();
    org.joda.time.MutablePeriod var87 = var84.toMutablePeriod();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "2013-08-29T01:23:53.696+00:00:00.100/2013-08-29T01:23:53.696+00:00:00.100"+ "'", var79.equals("2013-08-29T01:23:53.696+00:00:00.100/2013-08-29T01:23:53.696+00:00:00.100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test170() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test170"); }


    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.Period var6 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var7 = var3.millisOfSecond();
    org.joda.time.chrono.LenientChronology var8 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var3);
    org.joda.time.LocalDateTime var9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology)var3);
    org.joda.time.chrono.StrictChronology var10 = org.joda.time.chrono.StrictChronology.getInstance((org.joda.time.Chronology)var3);
    org.joda.time.Chronology var11 = var10.withUTC();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test171() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test171"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    int var3 = var1.getDayOfYear();
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.DateMidnight var8 = var5.minusWeeks((-1));
    int var9 = var8.getMillisOfSecond();
    boolean var10 = var1.isEqual((org.joda.time.ReadableInstant)var8);
    org.joda.time.DateMidnight var12 = var8.plusMonths(37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 228);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test172() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test172"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.field.PreciseDurationField var22 = new org.joda.time.field.PreciseDurationField(var18, 1L);
    long var24 = var22.getMillis(104);
    long var27 = var22.getDifferenceAsLong(1377746617466L, 15946L);
    int var30 = var22.getValue((-7199100L), 1386408182707L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 104L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1377746601520L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-7199100));

  }

  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test173"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var4.withEra(1);
    org.joda.time.DateTime var7 = var6.toDateTimeAtMidnight();
    org.joda.time.LocalDate var9 = var6.minusYears(24424);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.LocalTime var11 = new org.joda.time.LocalTime((org.joda.time.Chronology)var10);
    org.joda.time.LocalDateTime var12 = org.joda.time.LocalDateTime.now();
    int var13 = var12.getDayOfYear();
    org.joda.time.Chronology var14 = var12.getChronology();
    int var15 = var12.getYearOfCentury();
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var18 = new org.joda.time.MutableDateTime();
    var18.setWeekOfWeekyear(1);
    int var21 = var18.getRoundingMode();
    var18.addMillis(100);
    var18.setSecondOfMinute(10);
    org.joda.time.PeriodType var26 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var27 = new org.joda.time.Period((org.joda.time.ReadableDuration)var17, (org.joda.time.ReadableInstant)var18, var26);
    org.joda.time.Days var28 = var27.toStandardDays();
    boolean var29 = var12.equals((java.lang.Object)var28);
    org.joda.time.LocalTime var30 = var11.plus((org.joda.time.ReadablePeriod)var28);
    org.joda.time.LocalDate var31 = var9.withFields((org.joda.time.ReadablePartial)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test174() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test174"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.months();
    java.lang.String var1 = var0.toString();
    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.months();
    org.joda.time.Duration var4 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    var5.setWeekOfWeekyear(1);
    int var8 = var5.getRoundingMode();
    var5.addMillis(100);
    var5.setSecondOfMinute(10);
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var14 = new org.joda.time.Period((org.joda.time.ReadableDuration)var4, (org.joda.time.ReadableInstant)var5, var13);
    org.joda.time.Days var15 = var14.toStandardDays();
    org.joda.time.DurationFieldType var16 = var15.getFieldType();
    int var17 = var2.indexOf(var16);
    boolean var18 = var0.isSupported(var16);
    org.joda.time.PeriodType var19 = var0.withYearsRemoved();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "PeriodType[Months]"+ "'", var1.equals("PeriodType[Months]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test175() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test175"); }


    org.joda.time.Instant var0 = new org.joda.time.Instant();
    org.joda.time.Instant var1 = var0.toInstant();
    org.joda.time.Instant var3 = var0.plus(100L);
    org.joda.time.Instant var5 = var3.minus(20801L);
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var9);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = var12.toLocalDate();
    org.joda.time.MutableDateTime var14 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var15 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var12, (org.joda.time.ReadableInstant)var14);
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var17 = var16.year();
    boolean var18 = var14.isBefore((org.joda.time.ReadableInstant)var16);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    boolean var28 = var25.isShorterThan((org.joda.time.ReadableDuration)var27);
    org.joda.time.Duration var29 = var20.plus((org.joda.time.ReadableDuration)var25);
    var16.add((org.joda.time.ReadableDuration)var25);
    org.joda.time.Seconds var31 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var16);
    org.joda.time.Duration var32 = var31.toStandardDuration();
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    boolean var37 = var34.isShorterThan((org.joda.time.ReadableDuration)var36);
    org.joda.time.Duration var38 = var34.toDuration();
    boolean var39 = var32.isShorterThan((org.joda.time.ReadableDuration)var38);
    org.joda.time.Duration var41 = var38.withMillis(228009L);
    org.joda.time.Instant var43 = var3.withDurationAdded((org.joda.time.ReadableDuration)var41, 70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test176"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.LocalDateTime var3 = var0.minusSeconds(2005);
    org.joda.time.LocalDateTime var5 = var3.withMillisOfSecond(16);
    int var6 = var5.getMillisOfSecond();
    org.joda.time.tz.FixedDateTimeZone var11 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var13 = var11.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var15 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstance(var15);
    long var18 = var11.getMillisKeepLocal(var15, 1377746580759L);
    org.joda.time.DateTime var19 = var5.toDateTime((org.joda.time.DateTimeZone)var11);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.chrono.JulianChronology var25 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var26 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var25);
    org.joda.time.LocalDate var27 = var26.toLocalDate();
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var29 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var26, (org.joda.time.ReadableInstant)var28);
    org.joda.time.MutableDateTime var30 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var31 = var30.year();
    boolean var32 = var28.isBefore((org.joda.time.ReadableInstant)var30);
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    boolean var37 = var34.isShorterThan((org.joda.time.ReadableDuration)var36);
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    boolean var42 = var39.isShorterThan((org.joda.time.ReadableDuration)var41);
    org.joda.time.Duration var43 = var34.plus((org.joda.time.ReadableDuration)var39);
    var30.add((org.joda.time.ReadableDuration)var39);
    org.joda.time.Seconds var45 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var30);
    org.joda.time.Duration var46 = var45.toStandardDuration();
    org.joda.time.Duration var48 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var50 = org.joda.time.Duration.standardHours((-1L));
    boolean var51 = var48.isShorterThan((org.joda.time.ReadableDuration)var50);
    org.joda.time.Duration var52 = var48.toDuration();
    boolean var53 = var46.isShorterThan((org.joda.time.ReadableDuration)var52);
    org.joda.time.Hours var54 = var52.toStandardHours();
    org.joda.time.DateTime var55 = var19.plus((org.joda.time.ReadablePeriod)var54);
    org.joda.time.DateTime var57 = var19.plusHours(884);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test177() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test177"); }


    org.joda.time.tz.FixedDateTimeZone var4 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var5 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var6 = new org.joda.time.MutablePeriod(var5);
    var6.addDays(1);
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    boolean var13 = var10.isShorterThan((org.joda.time.ReadableDuration)var12);
    var6.add((org.joda.time.ReadableDuration)var12);
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var12, (org.joda.time.ReadableInstant)var15);
    var16.clear();
    org.joda.time.MutableDateTime var18 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.LocalDate var21 = var20.toLocalDate();
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var23 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var20, (org.joda.time.ReadableInstant)var22);
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var25 = var24.year();
    boolean var26 = var22.isBefore((org.joda.time.ReadableInstant)var24);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var37 = var28.plus((org.joda.time.ReadableDuration)var33);
    var24.add((org.joda.time.ReadableDuration)var33);
    org.joda.time.MutableDateTime.Property var39 = var24.dayOfWeek();
    var16.setPeriod((org.joda.time.ReadableInstant)var18, (org.joda.time.ReadableInstant)var24);
    boolean var41 = var4.equals((java.lang.Object)var16);
    var16.clear();
    int var43 = var16.getHours();
    org.joda.time.MutableInterval var44 = new org.joda.time.MutableInterval();
    long var45 = var44.getEndMillis();
    var16.add((org.joda.time.ReadableInterval)var44);
    org.joda.time.Seconds var47 = org.joda.time.Seconds.secondsIn((org.joda.time.ReadableInterval)var44);
    org.joda.time.chrono.JulianChronology var48 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var49 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var48);
    org.joda.time.Period var54 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var56 = var54.plusSeconds(100);
    org.joda.time.Period var58 = var54.minusMillis(10);
    boolean var59 = var49.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var60 = var49.dayOfYear();
    org.joda.time.chrono.JulianChronology var61 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var62 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var61);
    org.joda.time.LocalDate var63 = var62.toLocalDate();
    org.joda.time.LocalDate var65 = var63.minusMonths(0);
    org.joda.time.DateTime var66 = var63.toDateTimeAtMidnight();
    org.joda.time.DateTime var68 = var66.withCenturyOfEra(4);
    org.joda.time.Days var69 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var49, (org.joda.time.ReadableInstant)var68);
    org.joda.time.DateTime var71 = var68.plusSeconds(10);
    org.joda.time.DateTime var73 = var71.minusMinutes(16);
    org.joda.time.DateTime var75 = var73.withWeekyear(16);
    org.joda.time.DateTime var77 = var73.withWeekOfWeekyear(3);
    var44.setStart((org.joda.time.ReadableInstant)var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test178() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test178"); }


    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = var4.toLocalDate();
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var7 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var6);
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var9 = var8.year();
    boolean var10 = var6.isBefore((org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime.Property var11 = var8.minuteOfHour();
    var8.addDays((-948));
    org.joda.time.Months var14 = org.joda.time.Months.monthsBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var8);
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var16);
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.MutableDateTime var21 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var22 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var19, (org.joda.time.ReadableInstant)var21);
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var24 = var23.year();
    boolean var25 = var21.isBefore((org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime.Property var26 = var23.minuteOfHour();
    var23.addDays((-948));
    org.joda.time.Months var29 = org.joda.time.Months.monthsBetween((org.joda.time.ReadableInstant)var17, (org.joda.time.ReadableInstant)var23);
    org.joda.time.Weeks var30 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test179"); }


    org.joda.time.DateTimeComparator var0 = org.joda.time.DateTimeComparator.getDateOnlyInstance();
    java.lang.String var1 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "DateTimeComparator[dayOfYear-]"+ "'", var1.equals("DateTimeComparator[dayOfYear-]"));

  }

  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test180"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusYears((-1));
    org.joda.time.Minutes var7 = var4.toStandardMinutes();
    org.joda.time.Minutes var9 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var10 = var7.minus(var9);
    org.joda.time.DurationFieldType var11 = var10.getFieldType();
    org.joda.time.Duration var12 = var10.toStandardDuration();
    org.joda.time.PeriodType var13 = var10.getPeriodType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test181() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test181"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var1 = var0.copy();
    org.joda.time.DateTime var2 = var1.getStart();
    java.util.Date var3 = var2.toDate();
    org.joda.time.DateTime var4 = var2.withLaterOffsetAtOverlap();
    org.joda.time.DateTime var5 = var2.withTimeAtStartOfDay();
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.DateMidnight var9 = var7.plusDays(2013);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.DateMidnight var14 = var11.minusWeeks((-1));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var17 = new org.joda.time.MutableDateTime();
    var17.setWeekOfWeekyear(1);
    int var20 = var17.getRoundingMode();
    var17.addMillis(100);
    var17.setSecondOfMinute(10);
    org.joda.time.PeriodType var25 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var26 = new org.joda.time.Period((org.joda.time.ReadableDuration)var16, (org.joda.time.ReadableInstant)var17, var25);
    org.joda.time.Days var27 = var26.toStandardDays();
    org.joda.time.DurationFieldType var28 = var27.getFieldType();
    org.joda.time.DateMidnight var30 = var14.withFieldAdded(var28, 1);
    org.joda.time.field.PreciseDurationField var32 = new org.joda.time.field.PreciseDurationField(var28, 1L);
    org.joda.time.DateMidnight var34 = var9.withFieldAdded(var28, 228);
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    boolean var39 = var36.isShorterThan((org.joda.time.ReadableDuration)var38);
    org.joda.time.Duration var40 = var36.toDuration();
    org.joda.time.Duration var42 = org.joda.time.Duration.standardHours((-1L));
    boolean var43 = var40.isShorterThan((org.joda.time.ReadableDuration)var42);
    org.joda.time.DateMidnight var44 = var34.minus((org.joda.time.ReadableDuration)var42);
    org.joda.time.MutableDateTime var45 = var34.toMutableDateTimeISO();
    org.joda.time.Years var46 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var45);
    org.joda.time.chrono.BuddhistChronology var47 = org.joda.time.chrono.BuddhistChronology.getInstance();
    org.joda.time.DateTimeField var48 = var47.secondOfDay();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var45.setRounding(var48, 318);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test182() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test182"); }


    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.Period var6 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var7 = var3.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.DateTime var17 = new org.joda.time.DateTime(1377746581334L, (org.joda.time.Chronology)var9);
    org.joda.time.chrono.EthiopicChronology var21 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var22 = var21.hours();
    org.joda.time.LocalTime var23 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var21);
    org.joda.time.Period var24 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var21);
    org.joda.time.DateTimeField var25 = var21.millisOfSecond();
    org.joda.time.field.SkipDateTimeField var26 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25);
    org.joda.time.DateTimeField var27 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField)var26);
    int var28 = var26.getMinimumValue();
    org.joda.time.field.SkipUndoDateTimeField var30 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology)var3, (org.joda.time.DateTimeField)var26, 19);
    org.joda.time.DurationField var31 = var30.getLeapDurationField();
    long var34 = var30.set(9L, 19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-82L));

  }

  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test183"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDate var3 = new org.joda.time.LocalDate(73392, 402, (-59));
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test184() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test184"); }


    org.joda.time.Instant var1 = new org.joda.time.Instant(2762381894421796L);
    long var2 = var1.getMillis();
    org.joda.time.Duration var4 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    boolean var7 = var4.isShorterThan((org.joda.time.ReadableDuration)var6);
    org.joda.time.Duration var8 = var4.toDuration();
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    boolean var11 = var8.isShorterThan((org.joda.time.ReadableDuration)var10);
    org.joda.time.Years var13 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var14 = var13.getPeriodType();
    org.joda.time.Period var15 = new org.joda.time.Period((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableDuration)var8, var14);
    org.joda.time.MutableDateTime var16 = var1.toMutableDateTime();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2762381894421796L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test185() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test185"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.DateTimeFormat.mediumDate();
    boolean var1 = var0.isOffsetParsed();
    org.joda.time.format.DateTimeParser var2 = var0.getParser();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test186() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test186"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.now();
    boolean var7 = var5.isAfter((org.joda.time.ReadablePartial)var6);
    org.joda.time.LocalTime var9 = var5.withHourOfDay(4);
    org.joda.time.LocalTime var11 = var9.plusMillis(0);
    org.joda.time.DateTime var12 = var9.toDateTimeToday();
    org.joda.time.DateTime var14 = var12.withYear(765);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test187"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.MutableDateTime.Property var2 = var0.weekOfWeekyear();
    var0.setMillisOfDay(16);
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours(99L);
    var0.add((org.joda.time.ReadableDuration)var6, 3);
    org.joda.time.Duration var10 = org.joda.time.Duration.standardSeconds(1377742981948L);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = var12.toLocalDate();
    org.joda.time.MutableDateTime var14 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var15 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var12, (org.joda.time.ReadableInstant)var14);
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var17 = var16.year();
    boolean var18 = var14.isBefore((org.joda.time.ReadableInstant)var16);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    boolean var28 = var25.isShorterThan((org.joda.time.ReadableDuration)var27);
    org.joda.time.Duration var29 = var20.plus((org.joda.time.ReadableDuration)var25);
    var16.add((org.joda.time.ReadableDuration)var25);
    org.joda.time.MutableDateTime.Property var31 = var16.weekyear();
    org.joda.time.MutableDateTime.Property var32 = var16.year();
    boolean var34 = var16.equals((java.lang.Object)(byte)0);
    var16.addDays(216);
    org.joda.time.Period var37 = var10.toPeriodFrom((org.joda.time.ReadableInstant)var16);
    java.util.GregorianCalendar var38 = var16.toGregorianCalendar();
    var16.addMillis(12200);
    org.joda.time.DateTime var41 = new org.joda.time.DateTime();
    org.joda.time.chrono.JulianChronology var43 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var44 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var43);
    org.joda.time.chrono.JulianChronology var45 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var46 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var45);
    org.joda.time.LocalDate var47 = var46.toLocalDate();
    org.joda.time.MutableDateTime var48 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var49 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var46, (org.joda.time.ReadableInstant)var48);
    org.joda.time.MutableDateTime var50 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var51 = var50.year();
    boolean var52 = var48.isBefore((org.joda.time.ReadableInstant)var50);
    org.joda.time.Duration var54 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var56 = org.joda.time.Duration.standardHours((-1L));
    boolean var57 = var54.isShorterThan((org.joda.time.ReadableDuration)var56);
    org.joda.time.Duration var59 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var61 = org.joda.time.Duration.standardHours((-1L));
    boolean var62 = var59.isShorterThan((org.joda.time.ReadableDuration)var61);
    org.joda.time.Duration var63 = var54.plus((org.joda.time.ReadableDuration)var59);
    var50.add((org.joda.time.ReadableDuration)var59);
    var50.setHourOfDay(10);
    org.joda.time.Years var67 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var44, (org.joda.time.ReadableInstant)var50);
    org.joda.time.Period var68 = new org.joda.time.Period((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var50);
    org.joda.time.Duration var70 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var72 = org.joda.time.Duration.standardHours((-1L));
    boolean var73 = var70.isShorterThan((org.joda.time.ReadableDuration)var72);
    org.joda.time.Duration var75 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var77 = org.joda.time.Duration.standardHours((-1L));
    boolean var78 = var75.isShorterThan((org.joda.time.ReadableDuration)var77);
    org.joda.time.Duration var79 = var70.plus((org.joda.time.ReadableDuration)var75);
    java.lang.String var80 = var79.toString();
    org.joda.time.DateTime var82 = var41.withDurationAdded((org.joda.time.ReadableDuration)var79, 80);
    org.joda.time.MutablePeriod var83 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var16, (org.joda.time.ReadableInstant)var41);
    boolean var84 = var0.isEqual((org.joda.time.ReadableInstant)var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "PT-7200S"+ "'", var80.equals("PT-7200S"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);

  }

  public void test188() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test188"); }


    org.joda.time.tz.FixedDateTimeZone var4 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    java.lang.String var6 = var4.getNameKey((-703463L));
    boolean var7 = var4.isFixed();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ISOChronology[UTC]"+ "'", var6.equals("ISOChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test189() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test189"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    int var6 = var5.getHourOfDay();
    org.joda.time.DateTime var8 = var5.withSecondOfMinute(10);
    org.joda.time.DateTime.Property var9 = var8.secondOfMinute();
    org.joda.time.DateTime var10 = org.joda.time.DateTime.now();
    long var11 = var10.getMillis();
    org.joda.time.DateTime.Property var12 = var10.yearOfEra();
    org.joda.time.DateTime var14 = var10.withMillisOfDay(216);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod(var15);
    var16.addDays(1);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    var16.add((org.joda.time.ReadableDuration)var22);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var22, (org.joda.time.ReadableInstant)var25);
    var26.clear();
    org.joda.time.PeriodType var28 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var29 = new org.joda.time.MutablePeriod(var28);
    var29.addDays(1);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    var29.add((org.joda.time.ReadableDuration)var35);
    var26.add((org.joda.time.ReadablePeriod)var29);
    org.joda.time.chrono.JulianChronology var39 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var40 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var39);
    org.joda.time.LocalDate var41 = var40.toLocalDate();
    org.joda.time.MutableDateTime var42 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var43 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var40, (org.joda.time.ReadableInstant)var42);
    org.joda.time.MutableDateTime var44 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var45 = var44.year();
    boolean var46 = var42.isBefore((org.joda.time.ReadableInstant)var44);
    org.joda.time.Duration var48 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var50 = org.joda.time.Duration.standardHours((-1L));
    boolean var51 = var48.isShorterThan((org.joda.time.ReadableDuration)var50);
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var55 = org.joda.time.Duration.standardHours((-1L));
    boolean var56 = var53.isShorterThan((org.joda.time.ReadableDuration)var55);
    org.joda.time.Duration var57 = var48.plus((org.joda.time.ReadableDuration)var53);
    var44.add((org.joda.time.ReadableDuration)var53);
    org.joda.time.Hours var59 = var53.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var60 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var29.setPeriod((org.joda.time.ReadableDuration)var53, (org.joda.time.Chronology)var60);
    org.joda.time.DateTime var62 = var14.plus((org.joda.time.ReadableDuration)var53);
    org.joda.time.DateTime var63 = var8.plus((org.joda.time.ReadableDuration)var53);
    int var64 = var63.getYearOfCentury();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1377739434003L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 13);

  }

  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test190"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.YearMonth var1 = org.joda.time.YearMonth.parse("T04:27:00");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test191() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test191"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    int var5 = var2.getWeekyear();
    int var6 = var2.getDayOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2013);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 228);

  }

  public void test192() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test192"); }


    org.joda.time.Period var1 = org.joda.time.Period.millis(379);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test193"); }


    org.joda.time.convert.ConverterManager var0 = org.joda.time.convert.ConverterManager.getInstance();
    java.lang.String var1 = var0.toString();
    org.joda.time.convert.IntervalConverter[] var2 = var0.getIntervalConverters();
    org.joda.time.convert.PartialConverter[] var3 = var0.getPartialConverters();
    org.joda.time.convert.InstantConverter[] var4 = var0.getInstantConverters();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "ConverterManager[5 instant,6 partial,5 duration,5 period,3 interval]"+ "'", var1.equals("ConverterManager[5 instant,6 partial,5 duration,5 period,3 interval]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test194() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test194"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    boolean var51 = var47.isBefore((org.joda.time.ReadableInstant)var49);
    org.joda.time.Interval var52 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var49);
    boolean var54 = var52.isAfter(10L);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    var55.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var55.setChronology((org.joda.time.Chronology)var58);
    org.joda.time.Interval var60 = var52.withChronology((org.joda.time.Chronology)var58);
    var11.setPeriod((org.joda.time.ReadableInterval)var52);
    org.joda.time.Duration var63 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var64 = new org.joda.time.MutableDateTime();
    var64.setWeekOfWeekyear(1);
    int var67 = var64.getRoundingMode();
    var64.addMillis(100);
    var64.setSecondOfMinute(10);
    org.joda.time.PeriodType var72 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var73 = new org.joda.time.Period((org.joda.time.ReadableDuration)var63, (org.joda.time.ReadableInstant)var64, var72);
    org.joda.time.Days var74 = var73.toStandardDays();
    org.joda.time.Hours var75 = var74.toStandardHours();
    org.joda.time.Interval var76 = var52.withPeriodBeforeEnd((org.joda.time.ReadablePeriod)var74);
    org.joda.time.Months var77 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var52);
    org.joda.time.DateTime var78 = var52.getStart();
    org.joda.time.DateTime.Property var79 = var78.monthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test195() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test195"); }


    org.joda.time.Instant var0 = new org.joda.time.Instant();
    org.joda.time.Instant var1 = var0.toInstant();
    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var3 = new org.joda.time.MutablePeriod(var2);
    var3.addDays(1);
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    boolean var10 = var7.isShorterThan((org.joda.time.ReadableDuration)var9);
    var3.add((org.joda.time.ReadableDuration)var9);
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    boolean var16 = var13.isShorterThan((org.joda.time.ReadableDuration)var15);
    org.joda.time.Duration var17 = var13.toDuration();
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.MutableDateTime var21 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var22 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var19, (org.joda.time.ReadableInstant)var21);
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var24 = var23.year();
    boolean var25 = var21.isBefore((org.joda.time.ReadableInstant)var23);
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    boolean var30 = var27.isShorterThan((org.joda.time.ReadableDuration)var29);
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    boolean var35 = var32.isShorterThan((org.joda.time.ReadableDuration)var34);
    org.joda.time.Duration var36 = var27.plus((org.joda.time.ReadableDuration)var32);
    var23.add((org.joda.time.ReadableDuration)var32);
    org.joda.time.PeriodType var38 = org.joda.time.PeriodType.months();
    org.joda.time.Period var39 = new org.joda.time.Period((org.joda.time.ReadableDuration)var13, (org.joda.time.ReadableInstant)var23, var38);
    org.joda.time.Period var40 = new org.joda.time.Period((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableDuration)var9, var38);
    org.joda.time.DateTime var41 = var1.toDateTimeISO();
    org.joda.time.DateTime var43 = var41.minusMillis(20);
    org.joda.time.MutableDateTime var44 = var43.toMutableDateTime();
    org.joda.time.DateTime var45 = var43.toDateTime();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test196() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test196"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var2 = var0.withMillis(0L);
    org.joda.time.DateTime var4 = var2.plusHours(2013);
    org.joda.time.chrono.ISOChronology var5 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var10 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var12 = var10.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var14 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstance(var14);
    long var17 = var10.getMillisKeepLocal(var14, 1377746580759L);
    org.joda.time.Chronology var18 = var5.withZone(var14);
    org.joda.time.DateTimeZone var20 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.chrono.ISOChronology var21 = org.joda.time.chrono.ISOChronology.getInstance(var20);
    org.joda.time.Chronology var22 = var5.withZone(var20);
    org.joda.time.DateTime var23 = var2.toDateTime(var20);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.Period var30 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var32 = var30.plusSeconds(100);
    org.joda.time.Period var34 = var30.minusMillis(10);
    boolean var35 = var25.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var36 = var25.dayOfYear();
    int var37 = var25.getSecondOfDay();
    org.joda.time.DateMidnight var39 = var25.withWeekyear(240);
    org.joda.time.DateMidnight var41 = var39.minusMonths(28);
    org.joda.time.Duration var43 = org.joda.time.Duration.standardSeconds(1377742981948L);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    boolean var51 = var47.isBefore((org.joda.time.ReadableInstant)var49);
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var55 = org.joda.time.Duration.standardHours((-1L));
    boolean var56 = var53.isShorterThan((org.joda.time.ReadableDuration)var55);
    org.joda.time.Duration var58 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var60 = org.joda.time.Duration.standardHours((-1L));
    boolean var61 = var58.isShorterThan((org.joda.time.ReadableDuration)var60);
    org.joda.time.Duration var62 = var53.plus((org.joda.time.ReadableDuration)var58);
    var49.add((org.joda.time.ReadableDuration)var58);
    org.joda.time.MutableDateTime.Property var64 = var49.weekyear();
    org.joda.time.MutableDateTime.Property var65 = var49.year();
    boolean var67 = var49.equals((java.lang.Object)(byte)0);
    var49.addDays(216);
    org.joda.time.Period var70 = var43.toPeriodFrom((org.joda.time.ReadableInstant)var49);
    java.util.GregorianCalendar var71 = var49.toGregorianCalendar();
    var49.addMillis(12200);
    org.joda.time.Days var74 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var49);
    org.joda.time.Hours var75 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableInstant)var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test197() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test197"); }


    org.joda.time.format.PeriodFormatterBuilder var0 = new org.joda.time.format.PeriodFormatterBuilder();
    org.joda.time.format.PeriodFormatterBuilder var1 = var0.appendMillis();
    org.joda.time.format.PeriodFormatterBuilder var2 = var1.printZeroNever();
    org.joda.time.format.PeriodFormatterBuilder var4 = var1.appendSeparatorIfFieldsAfter("0 years");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test198"); }


    org.joda.time.LocalDateTime var1 = org.joda.time.LocalDateTime.now();
    int var2 = var1.getDayOfYear();
    org.joda.time.Chronology var3 = var1.getChronology();
    org.joda.time.chrono.StrictChronology var4 = org.joda.time.chrono.StrictChronology.getInstance(var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.withMonthOfYear(1);
    org.joda.time.LocalDate var11 = var7.withWeekyear(1);
    org.joda.time.LocalDate var13 = var7.withDayOfYear(1);
    org.joda.time.LocalDate var15 = var13.minusMonths(16);
    boolean var16 = var4.equals((java.lang.Object)16);
    org.joda.time.YearMonth var17 = new org.joda.time.YearMonth(0L, (org.joda.time.Chronology)var4);
    org.joda.time.Chronology var18 = var4.withUTC();
    org.joda.time.chrono.GregorianChronology var19 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var20);
    org.joda.time.DurationField var23 = var20.hours();
    org.joda.time.Chronology var24 = var20.withUTC();
    org.joda.time.chrono.JulianChronology var25 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var26 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var25);
    org.joda.time.LocalDate var27 = var26.toLocalDate();
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var29 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var26, (org.joda.time.ReadableInstant)var28);
    org.joda.time.MutableDateTime var30 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var31 = var30.year();
    boolean var32 = var28.isBefore((org.joda.time.ReadableInstant)var30);
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    boolean var37 = var34.isShorterThan((org.joda.time.ReadableDuration)var36);
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    boolean var42 = var39.isShorterThan((org.joda.time.ReadableDuration)var41);
    org.joda.time.Duration var43 = var34.plus((org.joda.time.ReadableDuration)var39);
    var30.add((org.joda.time.ReadableDuration)var39);
    org.joda.time.chrono.JulianChronology var45 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var46 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var45);
    org.joda.time.LocalDate var47 = var46.toLocalDate();
    org.joda.time.MutableDateTime var48 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var49 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var46, (org.joda.time.ReadableInstant)var48);
    org.joda.time.MutableDateTime var50 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var51 = var50.year();
    boolean var52 = var48.isBefore((org.joda.time.ReadableInstant)var50);
    org.joda.time.Interval var53 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var30, (org.joda.time.ReadableInstant)var50);
    org.joda.time.DateTimeZone var54 = var50.getZone();
    org.joda.time.Chronology var55 = var20.withZone(var54);
    org.joda.time.Chronology var56 = var19.withZone(var54);
    org.joda.time.Chronology var57 = var4.withZone(var54);
    boolean var59 = var54.isStandardOffset((-40556126217293L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test199() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test199"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.TimeOfDay var3 = var0.withMillisOfSecond(1);
    org.joda.time.TimeOfDay var5 = var0.minusMinutes(1);
    org.joda.time.TimeOfDay var7 = var5.plusHours(2013);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var12 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var9, (org.joda.time.ReadableInstant)var11);
    org.joda.time.Years var14 = var12.dividedBy(2);
    org.joda.time.Years var16 = var12.multipliedBy(241);
    org.joda.time.TimeOfDay var17 = var7.plus((org.joda.time.ReadablePeriod)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test200() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test200"); }


    org.joda.time.Hours var1 = org.joda.time.Hours.hours(1962);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test201() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test201"); }


    org.joda.time.YearMonth var1 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var2 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var3 = var1.withChronologyRetainFields((org.joda.time.Chronology)var2);
    org.joda.time.YearMonth var5 = var3.withMonthOfYear(10);
    org.joda.time.Interval var6 = var3.toInterval();
    org.joda.time.YearMonth var8 = var3.minusMonths(23);
    org.joda.time.YearMonth var10 = var8.minusMonths(529);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test202() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test202"); }


    org.joda.time.tz.FixedDateTimeZone var4 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var5 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var6 = new org.joda.time.MutablePeriod(var5);
    var6.addDays(1);
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    boolean var13 = var10.isShorterThan((org.joda.time.ReadableDuration)var12);
    var6.add((org.joda.time.ReadableDuration)var12);
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var12, (org.joda.time.ReadableInstant)var15);
    var16.clear();
    org.joda.time.MutableDateTime var18 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.LocalDate var21 = var20.toLocalDate();
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var23 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var20, (org.joda.time.ReadableInstant)var22);
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var25 = var24.year();
    boolean var26 = var22.isBefore((org.joda.time.ReadableInstant)var24);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var37 = var28.plus((org.joda.time.ReadableDuration)var33);
    var24.add((org.joda.time.ReadableDuration)var33);
    org.joda.time.MutableDateTime.Property var39 = var24.dayOfWeek();
    var16.setPeriod((org.joda.time.ReadableInstant)var18, (org.joda.time.ReadableInstant)var24);
    boolean var41 = var4.equals((java.lang.Object)var16);
    var16.clear();
    int var43 = var16.getHours();
    org.joda.time.MutableInterval var44 = new org.joda.time.MutableInterval();
    long var45 = var44.getEndMillis();
    var16.add((org.joda.time.ReadableInterval)var44);
    org.joda.time.Period var51 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var53 = var51.plusSeconds(100);
    org.joda.time.DurationFieldType[] var54 = var53.getFieldTypes();
    org.joda.time.Period var56 = var53.minusMinutes(34);
    var44.setPeriodAfterStart((org.joda.time.ReadablePeriod)var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test203() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test203"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.field.PreciseDurationField var22 = new org.joda.time.field.PreciseDurationField(var18, 1L);
    org.joda.time.DurationFieldType var23 = var22.getType();
    org.joda.time.field.UnsupportedDurationField var24 = org.joda.time.field.UnsupportedDurationField.getInstance(var23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var27 = var24.getMillis(70541200, 80003L);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test204() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test204"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.DateMidnight var12 = var9.minusWeeks((-1));
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Days var25 = var24.toStandardDays();
    org.joda.time.DurationFieldType var26 = var25.getFieldType();
    org.joda.time.DateMidnight var28 = var12.withFieldAdded(var26, 1);
    org.joda.time.DateMidnight.Property var29 = var12.monthOfYear();
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    var32.setWeekOfWeekyear(1);
    int var35 = var32.getRoundingMode();
    var32.addMillis(100);
    var32.setSecondOfMinute(10);
    org.joda.time.PeriodType var40 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var41 = new org.joda.time.Period((org.joda.time.ReadableDuration)var31, (org.joda.time.ReadableInstant)var32, var40);
    org.joda.time.PeriodType var42 = var40.withWeeksRemoved();
    org.joda.time.Period var43 = new org.joda.time.Period((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var12, var40);
    org.joda.time.Instant var44 = new org.joda.time.Instant();
    org.joda.time.Instant var45 = var44.toInstant();
    org.joda.time.PeriodType var46 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var47 = new org.joda.time.MutablePeriod(var46);
    var47.addDays(1);
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    boolean var54 = var51.isShorterThan((org.joda.time.ReadableDuration)var53);
    var47.add((org.joda.time.ReadableDuration)var53);
    org.joda.time.Duration var57 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var59 = org.joda.time.Duration.standardHours((-1L));
    boolean var60 = var57.isShorterThan((org.joda.time.ReadableDuration)var59);
    org.joda.time.Duration var61 = var57.toDuration();
    org.joda.time.chrono.JulianChronology var62 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var63 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var62);
    org.joda.time.LocalDate var64 = var63.toLocalDate();
    org.joda.time.MutableDateTime var65 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var66 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var63, (org.joda.time.ReadableInstant)var65);
    org.joda.time.MutableDateTime var67 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var68 = var67.year();
    boolean var69 = var65.isBefore((org.joda.time.ReadableInstant)var67);
    org.joda.time.Duration var71 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var73 = org.joda.time.Duration.standardHours((-1L));
    boolean var74 = var71.isShorterThan((org.joda.time.ReadableDuration)var73);
    org.joda.time.Duration var76 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var78 = org.joda.time.Duration.standardHours((-1L));
    boolean var79 = var76.isShorterThan((org.joda.time.ReadableDuration)var78);
    org.joda.time.Duration var80 = var71.plus((org.joda.time.ReadableDuration)var76);
    var67.add((org.joda.time.ReadableDuration)var76);
    org.joda.time.PeriodType var82 = org.joda.time.PeriodType.months();
    org.joda.time.Period var83 = new org.joda.time.Period((org.joda.time.ReadableDuration)var57, (org.joda.time.ReadableInstant)var67, var82);
    org.joda.time.Period var84 = new org.joda.time.Period((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableDuration)var53, var82);
    org.joda.time.DateTime var85 = var7.plus((org.joda.time.ReadableDuration)var53);
    org.joda.time.LocalTime var86 = var7.toLocalTime();
    org.joda.time.LocalTime var88 = var86.minusSeconds(240);
    org.joda.time.LocalTime var90 = var88.withMillisOfSecond(379);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test205"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.YearMonthDay var3 = new org.joda.time.YearMonthDay(1, (-13), 69781948);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test206"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardSeconds((-703990L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test207() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test207"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    var5.addDays(104);
    org.joda.time.chrono.EthiopicChronology var22 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var23 = var22.dayOfYear();
    org.joda.time.YearMonthDay var24 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var22);
    int var25 = var24.getDayOfMonth();
    int var26 = var24.getDayOfMonth();
    org.joda.time.tz.FixedDateTimeZone var31 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var32 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var33 = new org.joda.time.MutablePeriod(var32);
    var33.addDays(1);
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    boolean var40 = var37.isShorterThan((org.joda.time.ReadableDuration)var39);
    var33.add((org.joda.time.ReadableDuration)var39);
    org.joda.time.MutableDateTime var42 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var39, (org.joda.time.ReadableInstant)var42);
    var43.clear();
    org.joda.time.MutableDateTime var45 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var46 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var47 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var46);
    org.joda.time.LocalDate var48 = var47.toLocalDate();
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var50 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var47, (org.joda.time.ReadableInstant)var49);
    org.joda.time.MutableDateTime var51 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var52 = var51.year();
    boolean var53 = var49.isBefore((org.joda.time.ReadableInstant)var51);
    org.joda.time.Duration var55 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var57 = org.joda.time.Duration.standardHours((-1L));
    boolean var58 = var55.isShorterThan((org.joda.time.ReadableDuration)var57);
    org.joda.time.Duration var60 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var62 = org.joda.time.Duration.standardHours((-1L));
    boolean var63 = var60.isShorterThan((org.joda.time.ReadableDuration)var62);
    org.joda.time.Duration var64 = var55.plus((org.joda.time.ReadableDuration)var60);
    var51.add((org.joda.time.ReadableDuration)var60);
    org.joda.time.MutableDateTime.Property var66 = var51.dayOfWeek();
    var43.setPeriod((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var51);
    boolean var68 = var31.equals((java.lang.Object)var43);
    boolean var69 = var31.isFixed();
    boolean var70 = var31.isFixed();
    org.joda.time.DateTime var71 = var24.toDateTimeAtMidnight((org.joda.time.DateTimeZone)var31);
    org.joda.time.DateMidnight var72 = new org.joda.time.DateMidnight((org.joda.time.DateTimeZone)var31);
    org.joda.time.MutableDateTime var73 = org.joda.time.MutableDateTime.now((org.joda.time.DateTimeZone)var31);
    long var76 = var31.convertLocalToUTC(1377746580759L, true);
    var5.setZoneRetainFields((org.joda.time.DateTimeZone)var31);
    var5.setSecondOfDay(2013);
    org.joda.time.MutableDateTime.Property var80 = var5.year();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 1377746580659L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test208() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test208"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.LocalTime var7 = var5.withMillisOfSecond(1);
    org.joda.time.LocalTime var9 = var7.minusHours((-1));
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var0, (org.joda.time.ReadablePartial)var9);
    int var11 = var0.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var12 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var13 = var0.withChronologyRetainFields((org.joda.time.Chronology)var12);
    org.joda.time.TimeOfDay var15 = var13.minusMinutes(0);
    org.joda.time.chrono.ISOChronology var16 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var21 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var23 = var21.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var24 = var16.withZone((org.joda.time.DateTimeZone)var21);
    org.joda.time.Chronology var25 = var16.withUTC();
    org.joda.time.TimeOfDay var26 = var13.withChronologyRetainFields((org.joda.time.Chronology)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 526);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test209() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test209"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.YearMonth var2 = new org.joda.time.YearMonth(var1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.Period var9 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var11 = var9.plusSeconds(100);
    org.joda.time.Period var13 = var9.minusMillis(10);
    boolean var14 = var4.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var15 = var4.dayOfYear();
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = var17.toLocalDate();
    org.joda.time.LocalDate var20 = var18.minusMonths(0);
    org.joda.time.DateTime var21 = var18.toDateTimeAtMidnight();
    org.joda.time.DateTime var23 = var21.withCenturyOfEra(4);
    org.joda.time.Days var24 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var23);
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var26);
    org.joda.time.LocalTime var30 = var28.withMillisOfSecond(1);
    org.joda.time.LocalTime var31 = org.joda.time.LocalTime.now();
    boolean var32 = var30.isAfter((org.joda.time.ReadablePartial)var31);
    org.joda.time.chrono.JulianChronology var33 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var34 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var33);
    org.joda.time.LocalDate var35 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var33);
    org.joda.time.DurationField var36 = var33.hours();
    boolean var37 = var31.equals((java.lang.Object)var33);
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var40 = new org.joda.time.MutableDateTime();
    var40.setWeekOfWeekyear(1);
    int var43 = var40.getRoundingMode();
    var40.addMillis(100);
    var40.setSecondOfMinute(10);
    org.joda.time.PeriodType var48 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var49 = new org.joda.time.Period((org.joda.time.ReadableDuration)var39, (org.joda.time.ReadableInstant)var40, var48);
    org.joda.time.Days var50 = var49.toStandardDays();
    org.joda.time.LocalTime var51 = var31.minus((org.joda.time.ReadablePeriod)var49);
    org.joda.time.DateMidnight var52 = var4.plus((org.joda.time.ReadablePeriod)var49);
    org.joda.time.YearMonth var54 = var2.withPeriodAdded((org.joda.time.ReadablePeriod)var49, 10);
    org.joda.time.Hours var55 = org.joda.time.Hours.standardHoursIn((org.joda.time.ReadablePeriod)var49);
    org.joda.time.Hours var57 = var55.multipliedBy(44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test210() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test210"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var11 = var10.year();
    boolean var12 = var8.isBefore((org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    org.joda.time.Duration var23 = var14.plus((org.joda.time.ReadableDuration)var19);
    var10.add((org.joda.time.ReadableDuration)var19);
    org.joda.time.Seconds var25 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var10);
    var10.setWeekOfWeekyear(28);
    org.joda.time.DateTime var28 = org.joda.time.DateTime.now();
    long var29 = var28.getMillis();
    var10.setMillis((org.joda.time.ReadableInstant)var28);
    org.joda.time.DateTimeZone var31 = var10.getZone();
    org.joda.time.LocalDateTime var32 = org.joda.time.LocalDateTime.now(var31);
    org.joda.time.LocalDateTime.Property var33 = var32.secondOfMinute();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1377739434462L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test211() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test211"); }


    org.joda.time.Years var1 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var2 = var1.getPeriodType();
    org.joda.time.Years var4 = org.joda.time.Years.years((-1));
    int var5 = var1.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var4);
    org.joda.time.MutablePeriod var6 = var4.toMutablePeriod();
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = var8.toLocalDate();
    org.joda.time.LocalDate var11 = var9.minusMonths(0);
    org.joda.time.DateTime var12 = var9.toDateTimeAtMidnight();
    org.joda.time.DateTime var14 = var12.withMillis(100L);
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.LocalDate var17 = var16.toLocalDate();
    org.joda.time.DateMidnight var19 = var16.minusWeeks((-1));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    var22.setWeekOfWeekyear(1);
    int var25 = var22.getRoundingMode();
    var22.addMillis(100);
    var22.setSecondOfMinute(10);
    org.joda.time.PeriodType var30 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var31 = new org.joda.time.Period((org.joda.time.ReadableDuration)var21, (org.joda.time.ReadableInstant)var22, var30);
    org.joda.time.Days var32 = var31.toStandardDays();
    org.joda.time.DurationFieldType var33 = var32.getFieldType();
    org.joda.time.DateMidnight var35 = var19.withFieldAdded(var33, 1);
    org.joda.time.DateMidnight.Property var36 = var19.monthOfYear();
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.PeriodType var49 = var47.withWeeksRemoved();
    org.joda.time.Period var50 = new org.joda.time.Period((org.joda.time.ReadableInstant)var14, (org.joda.time.ReadableInstant)var19, var47);
    org.joda.time.Duration var51 = var6.toDurationTo((org.joda.time.ReadableInstant)var14);
    var6.addDays(70541200);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test212() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test212"); }


    org.joda.time.convert.ConverterManager var0 = org.joda.time.convert.ConverterManager.getInstance();
    java.lang.String var1 = var0.toString();
    org.joda.time.convert.DurationConverter[] var2 = var0.getDurationConverters();
    org.joda.time.convert.PartialConverter[] var3 = var0.getPartialConverters();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "ConverterManager[5 instant,6 partial,5 duration,5 period,3 interval]"+ "'", var1.equals("ConverterManager[5 instant,6 partial,5 duration,5 period,3 interval]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test213() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test213"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var0.setChronology((org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var5 = var3.clockhourOfHalfday();
    org.joda.time.format.DateTimeFormatterBuilder var6 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var8 = var6.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var6.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var14 = var11.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = var17.toLocalDate();
    org.joda.time.LocalDate var20 = var18.minusMonths(0);
    int[] var22 = var15.get((org.joda.time.ReadablePartial)var20, 100L);
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var26);
    org.joda.time.Period var29 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var26);
    org.joda.time.DateTimeField var30 = var26.millisOfSecond();
    org.joda.time.DateTimeField var31 = var26.secondOfDay();
    org.joda.time.field.SkipDateTimeField var33 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var15, var31, 100);
    org.joda.time.LocalDateTime var34 = org.joda.time.LocalDateTime.now();
    int var35 = var34.getDayOfYear();
    org.joda.time.Chronology var36 = var34.getChronology();
    int var37 = var34.getYearOfCentury();
    int var38 = var33.getMaximumValue((org.joda.time.ReadablePartial)var34);
    boolean var40 = var33.isLeap(1L);
    org.joda.time.LocalDateTime var41 = org.joda.time.LocalDateTime.now();
    int var42 = var41.getDayOfYear();
    int var43 = var33.getMinimumValue((org.joda.time.ReadablePartial)var41);
    org.joda.time.DurationField var44 = var33.getDurationField();
    org.joda.time.DateTimeFieldType var45 = var33.getType();
    org.joda.time.field.OffsetDateTimeField var49 = new org.joda.time.field.OffsetDateTimeField(var14, var45, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var52 = new org.joda.time.IllegalFieldValueException(var45, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var55 = var6.appendFraction(var45, 33, (-948));
    org.joda.time.field.DividedDateTimeField var57 = new org.joda.time.field.DividedDateTimeField(var5, var45, 100);
    int var60 = var57.getDifference(1377742992740L, 1377746591916L);
    int var63 = var57.getDifference(1377769560460016L, (-86386600L));
    long var66 = var57.getDifferenceAsLong(1377746599386L, 2755493215861L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var69 = var57.set(1377739431829L, 12217692);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 3827137);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-3827L));

  }

  public void test214() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test214"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withCenturyOfEra(4);
    org.joda.time.DateTime.Property var8 = var7.monthOfYear();
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.Period var15 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var17 = var15.plusSeconds(100);
    org.joda.time.Period var19 = var15.minusMillis(10);
    boolean var20 = var10.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var21 = var10.dayOfYear();
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.LocalDate var24 = var23.toLocalDate();
    org.joda.time.LocalDate var26 = var24.minusMonths(0);
    org.joda.time.DateTime var27 = var24.toDateTimeAtMidnight();
    org.joda.time.DateTime var29 = var27.withCenturyOfEra(4);
    org.joda.time.Days var30 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var29);
    org.joda.time.DateTime var32 = var29.plusSeconds(10);
    boolean var33 = var7.isAfter((org.joda.time.ReadableInstant)var29);
    org.joda.time.DateTime var35 = var29.withWeekOfWeekyear(2);
    org.joda.time.Instant var36 = new org.joda.time.Instant();
    org.joda.time.Instant var37 = var36.toInstant();
    org.joda.time.PeriodType var38 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var39 = new org.joda.time.MutablePeriod(var38);
    var39.addDays(1);
    org.joda.time.Duration var43 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var45 = org.joda.time.Duration.standardHours((-1L));
    boolean var46 = var43.isShorterThan((org.joda.time.ReadableDuration)var45);
    var39.add((org.joda.time.ReadableDuration)var45);
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    boolean var52 = var49.isShorterThan((org.joda.time.ReadableDuration)var51);
    org.joda.time.Duration var53 = var49.toDuration();
    org.joda.time.chrono.JulianChronology var54 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var55 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var54);
    org.joda.time.LocalDate var56 = var55.toLocalDate();
    org.joda.time.MutableDateTime var57 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var58 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var55, (org.joda.time.ReadableInstant)var57);
    org.joda.time.MutableDateTime var59 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var60 = var59.year();
    boolean var61 = var57.isBefore((org.joda.time.ReadableInstant)var59);
    org.joda.time.Duration var63 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var65 = org.joda.time.Duration.standardHours((-1L));
    boolean var66 = var63.isShorterThan((org.joda.time.ReadableDuration)var65);
    org.joda.time.Duration var68 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var70 = org.joda.time.Duration.standardHours((-1L));
    boolean var71 = var68.isShorterThan((org.joda.time.ReadableDuration)var70);
    org.joda.time.Duration var72 = var63.plus((org.joda.time.ReadableDuration)var68);
    var59.add((org.joda.time.ReadableDuration)var68);
    org.joda.time.PeriodType var74 = org.joda.time.PeriodType.months();
    org.joda.time.Period var75 = new org.joda.time.Period((org.joda.time.ReadableDuration)var49, (org.joda.time.ReadableInstant)var59, var74);
    org.joda.time.Period var76 = new org.joda.time.Period((org.joda.time.ReadableInstant)var37, (org.joda.time.ReadableDuration)var45, var74);
    org.joda.time.Period var77 = new org.joda.time.Period((org.joda.time.ReadableInstant)var35, (org.joda.time.ReadableInstant)var37);
    org.joda.time.Period var79 = var77.plusYears(948);
    org.joda.time.Period var81 = var79.plusSeconds(62);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Seconds var82 = var79.toStandardSeconds();
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test215() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test215"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.MutableDateTime.Property var20 = var5.dayOfWeek();
    var5.addMonths((-9));
    org.joda.time.MutableDateTime.Property var23 = var5.era();
    org.joda.time.chrono.EthiopicChronology var25 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.LocalDate var28 = var27.toLocalDate();
    org.joda.time.LocalDate var30 = var28.minusMonths(0);
    int[] var32 = var25.get((org.joda.time.ReadablePartial)var30, 100L);
    org.joda.time.DateTime var33 = new org.joda.time.DateTime(1377746581334L, (org.joda.time.Chronology)var25);
    org.joda.time.chrono.EthiopicChronology var37 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var38 = var37.hours();
    org.joda.time.LocalTime var39 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var37);
    org.joda.time.Period var40 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var37);
    org.joda.time.DateTimeField var41 = var37.millisOfSecond();
    org.joda.time.field.SkipDateTimeField var42 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var25, var41);
    var5.setRounding((org.joda.time.DateTimeField)var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test216() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test216"); }


    org.joda.time.LocalDateTime var3 = org.joda.time.LocalDateTime.now();
    int var4 = var3.getDayOfYear();
    org.joda.time.Chronology var5 = var3.getChronology();
    org.joda.time.chrono.StrictChronology var6 = org.joda.time.chrono.StrictChronology.getInstance(var5);
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = var8.toLocalDate();
    org.joda.time.LocalDate var11 = var9.withMonthOfYear(1);
    org.joda.time.LocalDate var13 = var9.withWeekyear(1);
    org.joda.time.LocalDate var15 = var9.withDayOfYear(1);
    org.joda.time.LocalDate var17 = var15.minusMonths(16);
    boolean var18 = var6.equals((java.lang.Object)16);
    org.joda.time.YearMonth var19 = new org.joda.time.YearMonth(0L, (org.joda.time.Chronology)var6);
    org.joda.time.DateTime var20 = new org.joda.time.DateTime(1377742981948L, (org.joda.time.Chronology)var6);
    org.joda.time.Chronology var21 = var6.withUTC();
    org.joda.time.MutablePeriod var22 = new org.joda.time.MutablePeriod(1377746617222L, var21);
    org.joda.time.Partial var23 = new org.joda.time.Partial();
    java.lang.String var24 = var23.toString();
    org.joda.time.PeriodType var25 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var26 = new org.joda.time.MutablePeriod(var25);
    org.joda.time.DurationFieldType[] var27 = var26.getFieldTypes();
    org.joda.time.Partial var28 = var23.plus((org.joda.time.ReadablePeriod)var26);
    var26.add(2762381894421796L);
    var22.add((org.joda.time.ReadablePeriod)var26);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableInterval var32 = new org.joda.time.MutableInterval((java.lang.Object)var26);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "[]"+ "'", var24.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test217() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test217"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.LocalTime var7 = var5.withMillisOfSecond(1);
    org.joda.time.LocalTime var9 = var7.minusHours((-1));
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var0, (org.joda.time.ReadablePartial)var9);
    int var11 = var0.getMillisOfSecond();
    org.joda.time.TimeOfDay var13 = var0.minusMillis((-9));
    org.joda.time.tz.FixedDateTimeZone var18 = new org.joda.time.tz.FixedDateTimeZone("ConverterManager[6 instant,7 partial,5 duration,5 period,3 interval]", "ConverterManager[6 instant,7 partial,5 duration,5 period,3 interval]", 2, 759);
    org.joda.time.DateTime var19 = var13.toDateTimeToday((org.joda.time.DateTimeZone)var18);
    org.joda.time.LocalTime var21 = new org.joda.time.LocalTime(10L);
    org.joda.time.chrono.EthiopicChronology var23 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var24 = var23.hours();
    org.joda.time.LocalTime var25 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var23);
    org.joda.time.LocalTime var27 = var25.withMillisOfSecond(1);
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.now();
    boolean var29 = var27.isAfter((org.joda.time.ReadablePartial)var28);
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var30);
    org.joda.time.DurationField var33 = var30.hours();
    boolean var34 = var28.equals((java.lang.Object)var30);
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var37 = new org.joda.time.MutableDateTime();
    var37.setWeekOfWeekyear(1);
    int var40 = var37.getRoundingMode();
    var37.addMillis(100);
    var37.setSecondOfMinute(10);
    org.joda.time.PeriodType var45 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var46 = new org.joda.time.Period((org.joda.time.ReadableDuration)var36, (org.joda.time.ReadableInstant)var37, var45);
    org.joda.time.Days var47 = var46.toStandardDays();
    org.joda.time.LocalTime var48 = var28.minus((org.joda.time.ReadablePeriod)var46);
    int var49 = var21.compareTo((org.joda.time.ReadablePartial)var48);
    org.joda.time.Years var51 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var52 = var51.getPeriodType();
    org.joda.time.Years var54 = org.joda.time.Years.years((-1));
    int var55 = var51.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var54);
    org.joda.time.LocalTime var56 = var48.minus((org.joda.time.ReadablePeriod)var51);
    org.joda.time.YearMonth var58 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var59 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var60 = var58.withChronologyRetainFields((org.joda.time.Chronology)var59);
    org.joda.time.Years var62 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var63 = var62.getPeriodType();
    org.joda.time.Years var65 = org.joda.time.Years.years((-1));
    int var66 = var62.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var65);
    int[] var69 = var59.get((org.joda.time.ReadablePeriod)var65, 0L, 0L);
    boolean var70 = var51.isLessThan(var65);
    org.joda.time.DurationFieldType var71 = var51.getFieldType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.TimeOfDay var73 = var13.withFieldAdded(var71, 36);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 632);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test218"); }


    org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var5 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var6 = var5.hours();
    org.joda.time.LocalTime var7 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var5);
    org.joda.time.Period var8 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var9 = var5.millisOfSecond();
    org.joda.time.chrono.LenientChronology var10 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var5);
    org.joda.time.format.DateTimeFormatter var11 = var1.withChronology((org.joda.time.Chronology)var10);
    org.joda.time.chrono.ISOChronology var12 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var17 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var19 = var17.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var20 = var12.withZone((org.joda.time.DateTimeZone)var17);
    long var22 = var17.nextTransition(9L);
    org.joda.time.Chronology var23 = var10.withZone((org.joda.time.DateTimeZone)var17);
    org.joda.time.MonthDay var24 = new org.joda.time.MonthDay(1386411782707L, var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 9L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test219() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test219"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    boolean var51 = var47.isBefore((org.joda.time.ReadableInstant)var49);
    org.joda.time.Interval var52 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var49);
    boolean var54 = var52.isAfter(10L);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    var55.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var55.setChronology((org.joda.time.Chronology)var58);
    org.joda.time.Interval var60 = var52.withChronology((org.joda.time.Chronology)var58);
    var11.setPeriod((org.joda.time.ReadableInterval)var52);
    org.joda.time.Duration var63 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var64 = new org.joda.time.MutableDateTime();
    var64.setWeekOfWeekyear(1);
    int var67 = var64.getRoundingMode();
    var64.addMillis(100);
    var64.setSecondOfMinute(10);
    org.joda.time.PeriodType var72 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var73 = new org.joda.time.Period((org.joda.time.ReadableDuration)var63, (org.joda.time.ReadableInstant)var64, var72);
    org.joda.time.Days var74 = var73.toStandardDays();
    org.joda.time.Hours var75 = var74.toStandardHours();
    org.joda.time.Interval var76 = var52.withPeriodBeforeEnd((org.joda.time.ReadablePeriod)var74);
    org.joda.time.Duration var77 = var76.toDuration();
    org.joda.time.Years var78 = org.joda.time.Years.yearsIn((org.joda.time.ReadableInterval)var76);
    java.lang.String var79 = var76.toString();
    org.joda.time.Period var84 = new org.joda.time.Period(16, 100, 1, 16);
    org.joda.time.Interval var85 = var76.withPeriodBeforeEnd((org.joda.time.ReadablePeriod)var84);
    org.joda.time.DurationFieldType[] var86 = var84.getFieldTypes();
    org.joda.time.Period var87 = var84.toPeriod();
    java.lang.String var88 = var84.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "2013-08-29T01:23:54.650+00:00:00.100/2013-08-29T01:23:54.650+00:00:00.100"+ "'", var79.equals("2013-08-29T01:23:54.650+00:00:00.100/2013-08-29T01:23:54.650+00:00:00.100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "PT16H100M1.016S"+ "'", var88.equals("PT16H100M1.016S"));

  }

  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test220"); }


    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.Period var8 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var10 = var8.plusSeconds(100);
    org.joda.time.Period var12 = var8.minusMillis(10);
    boolean var13 = var3.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var14 = var3.dayOfYear();
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.LocalDate var17 = var16.toLocalDate();
    org.joda.time.LocalDate var19 = var17.minusMonths(0);
    org.joda.time.DateTime var20 = var17.toDateTimeAtMidnight();
    org.joda.time.DateTime var22 = var20.withCenturyOfEra(4);
    org.joda.time.Days var23 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var22);
    org.joda.time.DateTime var25 = var22.plusSeconds(10);
    org.joda.time.DateTime var27 = var25.minusMinutes(16);
    org.joda.time.DateTime.Property var28 = var25.era();
    org.joda.time.chrono.EthiopicChronology var29 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var30 = var29.minutes();
    org.joda.time.DateTimeField var31 = var29.year();
    org.joda.time.DurationField var32 = var29.hours();
    org.joda.time.DateTime var33 = var25.withChronology((org.joda.time.Chronology)var29);
    org.joda.time.MutableInterval var34 = new org.joda.time.MutableInterval(100L, 1378524280900L, (org.joda.time.Chronology)var29);
    var34.setDurationBeforeEnd(70534000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test221"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    org.joda.time.field.OffsetDateTimeField var21 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField)var18, 228);
    java.lang.String var23 = var21.getAsShortText(1377746593932L);
    java.lang.String var24 = var21.toString();
    long var27 = var21.getDifferenceAsLong(1377746597622L, (-79L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "12422"+ "'", var23.equals("12422"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "DateTimeField[secondOfDay]"+ "'", var24.equals("DateTimeField[secondOfDay]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1377746597L);

  }

  public void test222() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test222"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.LocalDateTime var3 = var0.minusSeconds(2005);
    org.joda.time.LocalDateTime var5 = var3.withMillisOfSecond(16);
    int var6 = var5.getMillisOfSecond();
    org.joda.time.tz.FixedDateTimeZone var11 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var13 = var11.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var15 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstance(var15);
    long var18 = var11.getMillisKeepLocal(var15, 1377746580759L);
    org.joda.time.DateTime var19 = var5.toDateTime((org.joda.time.DateTimeZone)var11);
    org.joda.time.DateMidnight var20 = new org.joda.time.DateMidnight((org.joda.time.DateTimeZone)var11);
    org.joda.time.DateMidnight var22 = var20.minusYears(12217692);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateMidnight var24 = var20.withYearOfCentury((-1440));
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test223"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.DateMidnight var25 = var22.minusWeeks((-1));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    var28.setWeekOfWeekyear(1);
    int var31 = var28.getRoundingMode();
    var28.addMillis(100);
    var28.setSecondOfMinute(10);
    org.joda.time.PeriodType var36 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var37 = new org.joda.time.Period((org.joda.time.ReadableDuration)var27, (org.joda.time.ReadableInstant)var28, var36);
    org.joda.time.Days var38 = var37.toStandardDays();
    org.joda.time.DurationFieldType var39 = var38.getFieldType();
    org.joda.time.DateMidnight var41 = var25.withFieldAdded(var39, 1);
    org.joda.time.DateMidnight var43 = var4.withFieldAdded(var39, 13);
    org.joda.time.IllegalFieldValueException var47 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)(-1), (java.lang.Number)(short)(-1), (java.lang.Number)0);
    org.joda.time.IllegalFieldValueException var49 = new org.joda.time.IllegalFieldValueException(var39, "P759MT382707H24M41.334S");
    java.lang.String var50 = var49.getFieldName();
    org.joda.time.DateTimeFieldType var51 = var49.getDateTimeFieldType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "days"+ "'", var50.equals("days"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);

  }

  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test224"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var29 = var28.toInterval();
    boolean var30 = var29.isBeforeNow();
    org.joda.time.Interval var31 = var29.toInterval();
    org.joda.time.Chronology var32 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInterval)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test225() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test225"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardSeconds(1377742981948L);
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = var3.toLocalDate();
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var6 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var5);
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var8 = var7.year();
    boolean var9 = var5.isBefore((org.joda.time.ReadableInstant)var7);
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    boolean var14 = var11.isShorterThan((org.joda.time.ReadableDuration)var13);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    boolean var19 = var16.isShorterThan((org.joda.time.ReadableDuration)var18);
    org.joda.time.Duration var20 = var11.plus((org.joda.time.ReadableDuration)var16);
    var7.add((org.joda.time.ReadableDuration)var16);
    org.joda.time.MutableDateTime.Property var22 = var7.weekyear();
    org.joda.time.MutableDateTime.Property var23 = var7.year();
    boolean var25 = var7.equals((java.lang.Object)(byte)0);
    var7.addDays(216);
    org.joda.time.Period var28 = var1.toPeriodFrom((org.joda.time.ReadableInstant)var7);
    java.util.GregorianCalendar var29 = var7.toGregorianCalendar();
    org.joda.time.chrono.EthiopicChronology var30 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var31 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var32 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var31);
    org.joda.time.LocalDate var33 = var32.toLocalDate();
    org.joda.time.LocalDate var35 = var33.minusMonths(0);
    int[] var37 = var30.get((org.joda.time.ReadablePartial)var35, 100L);
    org.joda.time.chrono.EthiopicChronology var41 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var42 = var41.hours();
    org.joda.time.LocalTime var43 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var41);
    org.joda.time.Period var44 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var41);
    org.joda.time.DateTimeField var45 = var41.millisOfSecond();
    org.joda.time.DateTimeField var46 = var41.secondOfDay();
    org.joda.time.field.SkipDateTimeField var48 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var30, var46, 100);
    org.joda.time.DurationField var49 = var48.getRangeDurationField();
    java.lang.String var50 = var48.toString();
    int var51 = var48.getMinimumValue();
    var7.setRounding((org.joda.time.DateTimeField)var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "DateTimeField[secondOfDay]"+ "'", var50.equals("DateTimeField[secondOfDay]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));

  }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test226"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    var0.setStartMillis((-1L));
    org.joda.time.Chronology var3 = var0.getChronology();
    org.joda.time.MutableInterval var4 = new org.joda.time.MutableInterval();
    long var5 = var4.getEndMillis();
    org.joda.time.Months var6 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var4);
    org.joda.time.Chronology var7 = var4.getChronology();
    boolean var8 = var0.isAfter((org.joda.time.ReadableInterval)var4);
    org.joda.time.Months var9 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var0);
    var0.setDurationAfterStart(86400000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test227() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test227"); }


    org.joda.time.format.PeriodFormatter var0 = org.joda.time.format.PeriodFormat.getDefault();
    org.joda.time.format.PeriodParser var1 = var0.getParser();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutablePeriod var3 = var0.parseMutablePeriod("P-1Y");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test228() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test228"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    int var3 = var0.getRoundingMode();
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var8 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var7);
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var10 = var9.year();
    boolean var11 = var7.isBefore((org.joda.time.ReadableInstant)var9);
    var0.setDate((org.joda.time.ReadableInstant)var7);
    java.util.Date var13 = var0.toDate();
    org.joda.time.LocalDateTime var14 = org.joda.time.LocalDateTime.fromDateFields(var13);
    org.joda.time.YearMonthDay var15 = org.joda.time.YearMonthDay.fromDateFields(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test229"); }


    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.withMonthOfYear(1);
    org.joda.time.LocalDate var7 = var5.withEra(1);
    org.joda.time.LocalDate.Property var8 = var5.yearOfCentury();
    org.joda.time.Period var13 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var15 = var13.plusYears((-1));
    org.joda.time.Minutes var16 = var13.toStandardMinutes();
    org.joda.time.Minutes var18 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var19 = var16.minus(var18);
    org.joda.time.PeriodType var20 = var16.getPeriodType();
    boolean var21 = var5.equals((java.lang.Object)var20);
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstance();
    org.joda.time.MutablePeriod var23 = new org.joda.time.MutablePeriod(9L, var20, (org.joda.time.Chronology)var22);
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    boolean var28 = var25.isShorterThan((org.joda.time.ReadableDuration)var27);
    org.joda.time.Duration var29 = var25.toDuration();
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    boolean var32 = var29.isShorterThan((org.joda.time.ReadableDuration)var31);
    org.joda.time.chrono.GJChronology var33 = org.joda.time.chrono.GJChronology.getInstanceUTC();
    java.lang.String var34 = var33.toString();
    org.joda.time.DurationField var35 = var33.eras();
    org.joda.time.Chronology var36 = var33.withUTC();
    var23.setPeriod((org.joda.time.ReadableDuration)var31, (org.joda.time.Chronology)var33);
    org.joda.time.Instant var38 = var33.getGregorianCutover();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "GJChronology[UTC]"+ "'", var34.equals("GJChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test230() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test230"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var4.withEra(1);
    org.joda.time.LocalDate.Property var7 = var4.yearOfCentury();
    java.lang.String var8 = var4.toString();
    org.joda.time.format.DateTimeFormatterBuilder var9 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var11 = var9.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var13 = var9.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var14);
    org.joda.time.LocalDate var16 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var14);
    org.joda.time.DateTimeField var17 = var14.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var18 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.LocalDate var21 = var20.toLocalDate();
    org.joda.time.LocalDate var23 = var21.minusMonths(0);
    int[] var25 = var18.get((org.joda.time.ReadablePartial)var23, 100L);
    org.joda.time.chrono.EthiopicChronology var29 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var30 = var29.hours();
    org.joda.time.LocalTime var31 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var29);
    org.joda.time.Period var32 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var29);
    org.joda.time.DateTimeField var33 = var29.millisOfSecond();
    org.joda.time.DateTimeField var34 = var29.secondOfDay();
    org.joda.time.field.SkipDateTimeField var36 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var18, var34, 100);
    org.joda.time.LocalDateTime var37 = org.joda.time.LocalDateTime.now();
    int var38 = var37.getDayOfYear();
    org.joda.time.Chronology var39 = var37.getChronology();
    int var40 = var37.getYearOfCentury();
    int var41 = var36.getMaximumValue((org.joda.time.ReadablePartial)var37);
    boolean var43 = var36.isLeap(1L);
    org.joda.time.LocalDateTime var44 = org.joda.time.LocalDateTime.now();
    int var45 = var44.getDayOfYear();
    int var46 = var36.getMinimumValue((org.joda.time.ReadablePartial)var44);
    org.joda.time.DurationField var47 = var36.getDurationField();
    org.joda.time.DateTimeFieldType var48 = var36.getType();
    org.joda.time.field.OffsetDateTimeField var52 = new org.joda.time.field.OffsetDateTimeField(var17, var48, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var55 = new org.joda.time.IllegalFieldValueException(var48, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var58 = var9.appendFraction(var48, 33, (-948));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDate.Property var59 = var4.property(var48);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "2013-01-16"+ "'", var8.equals("2013-01-16"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test231() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test231"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var5 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var4);
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var7 = var6.year();
    boolean var8 = var4.isBefore((org.joda.time.ReadableInstant)var6);
    org.joda.time.MutableDateTime.Property var9 = var6.minuteOfHour();
    org.joda.time.MutableDateTime.Property var10 = var6.millisOfSecond();
    org.joda.time.Chronology var11 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var6);
    org.joda.time.DateTime.Property var12 = var0.minuteOfDay();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var14 = var0.withEra(12217);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test232() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test232"); }


    org.joda.time.Months var1 = org.joda.time.Months.months((-1));
    org.joda.time.Months var3 = var1.plus(100);
    int var4 = var1.size();
    org.joda.time.MutableInterval var5 = new org.joda.time.MutableInterval();
    long var6 = var5.getEndMillis();
    org.joda.time.Months var7 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var5);
    org.joda.time.Months var9 = var7.plus(2013);
    org.joda.time.TimeOfDay var10 = new org.joda.time.TimeOfDay();
    int var11 = var10.size();
    org.joda.time.chrono.EthiopicChronology var13 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var14 = var13.hours();
    org.joda.time.LocalTime var15 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var13);
    org.joda.time.LocalTime var17 = var15.withMillisOfSecond(1);
    org.joda.time.LocalTime var19 = var17.minusHours((-1));
    org.joda.time.Years var20 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var10, (org.joda.time.ReadablePartial)var19);
    int var21 = var10.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var23 = var10.withChronologyRetainFields((org.joda.time.Chronology)var22);
    org.joda.time.Months var25 = org.joda.time.Months.months((-1));
    org.joda.time.Months var27 = var25.plus(100);
    int var28 = var25.size();
    org.joda.time.TimeOfDay var30 = var10.withPeriodAdded((org.joda.time.ReadablePeriod)var25, 2013);
    org.joda.time.Months var31 = var9.plus(var25);
    boolean var32 = var1.isLessThan(var31);
    org.joda.time.Months var33 = var1.negated();
    org.joda.time.Months var34 = var33.negated();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 830);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test233() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test233"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    var0.setStartMillis((-1L));
    org.joda.time.Chronology var3 = var0.getChronology();
    org.joda.time.MutableInterval var4 = new org.joda.time.MutableInterval();
    long var5 = var4.getEndMillis();
    org.joda.time.Months var6 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var4);
    org.joda.time.Chronology var7 = var4.getChronology();
    boolean var8 = var0.isAfter((org.joda.time.ReadableInterval)var4);
    org.joda.time.Instant var9 = new org.joda.time.Instant();
    org.joda.time.Instant var10 = var9.toInstant();
    org.joda.time.Chronology var11 = var10.getChronology();
    var4.setEnd((org.joda.time.ReadableInstant)var10);
    org.joda.time.Instant var15 = var10.withDurationAdded((-86400208L), 14400001);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test234() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test234"); }


    org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.ISODateTimeFormat.localDateParser();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.parse("PT-1H", var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test235() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test235"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.LocalDateTime.Property var3 = var0.centuryOfEra();
    org.joda.time.LocalDateTime var5 = var0.plusMinutes(2013);
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var9);
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var12 = var11.year();
    boolean var13 = var9.isBefore((org.joda.time.ReadableInstant)var11);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    boolean var18 = var15.isShorterThan((org.joda.time.ReadableDuration)var17);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    org.joda.time.Duration var24 = var15.plus((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadableDuration)var20);
    var11.addDays(104);
    org.joda.time.MutableDateTime.Property var28 = var11.minuteOfDay();
    org.joda.time.DateTimeZone var30 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var31 = org.joda.time.DateTimeUtils.getZone(var30);
    java.lang.String var32 = var30.toString();
    var11.setZone(var30);
    org.joda.time.format.DateTimeFormatterBuilder var34 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var36 = var34.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var38 = var34.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var39 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var40 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var39);
    org.joda.time.LocalDate var41 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var39);
    org.joda.time.DateTimeField var42 = var39.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var43 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.LocalDate var48 = var46.minusMonths(0);
    int[] var50 = var43.get((org.joda.time.ReadablePartial)var48, 100L);
    org.joda.time.chrono.EthiopicChronology var54 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var55 = var54.hours();
    org.joda.time.LocalTime var56 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var54);
    org.joda.time.Period var57 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var54);
    org.joda.time.DateTimeField var58 = var54.millisOfSecond();
    org.joda.time.DateTimeField var59 = var54.secondOfDay();
    org.joda.time.field.SkipDateTimeField var61 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var43, var59, 100);
    org.joda.time.LocalDateTime var62 = org.joda.time.LocalDateTime.now();
    int var63 = var62.getDayOfYear();
    org.joda.time.Chronology var64 = var62.getChronology();
    int var65 = var62.getYearOfCentury();
    int var66 = var61.getMaximumValue((org.joda.time.ReadablePartial)var62);
    boolean var68 = var61.isLeap(1L);
    org.joda.time.LocalDateTime var69 = org.joda.time.LocalDateTime.now();
    int var70 = var69.getDayOfYear();
    int var71 = var61.getMinimumValue((org.joda.time.ReadablePartial)var69);
    org.joda.time.DurationField var72 = var61.getDurationField();
    org.joda.time.DateTimeFieldType var73 = var61.getType();
    org.joda.time.field.OffsetDateTimeField var77 = new org.joda.time.field.OffsetDateTimeField(var42, var73, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var80 = new org.joda.time.IllegalFieldValueException(var73, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var83 = var34.appendFraction(var73, 33, (-948));
    boolean var84 = var11.isSupported(var73);
    org.joda.time.LocalDateTime var86 = var5.withField(var73, 10);
    int var87 = var86.size();
    int var88 = var86.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var90 = var86.plusHours(22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "+00:00:00.759"+ "'", var32.equals("+00:00:00.759"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test236"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Years var1 = org.joda.time.Years.parseYears("BuddhistChronology[PT0H]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test237() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test237"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var7 = var5.minusHours((-1));
    org.joda.time.Partial var8 = new org.joda.time.Partial((org.joda.time.ReadablePartial)var5);
    org.joda.time.format.DateTimeFormatterBuilder var9 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var11 = var9.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var13 = var9.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var14);
    org.joda.time.LocalDate var16 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var14);
    org.joda.time.DateTimeField var17 = var14.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var18 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.LocalDate var21 = var20.toLocalDate();
    org.joda.time.LocalDate var23 = var21.minusMonths(0);
    int[] var25 = var18.get((org.joda.time.ReadablePartial)var23, 100L);
    org.joda.time.chrono.EthiopicChronology var29 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var30 = var29.hours();
    org.joda.time.LocalTime var31 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var29);
    org.joda.time.Period var32 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var29);
    org.joda.time.DateTimeField var33 = var29.millisOfSecond();
    org.joda.time.DateTimeField var34 = var29.secondOfDay();
    org.joda.time.field.SkipDateTimeField var36 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var18, var34, 100);
    org.joda.time.LocalDateTime var37 = org.joda.time.LocalDateTime.now();
    int var38 = var37.getDayOfYear();
    org.joda.time.Chronology var39 = var37.getChronology();
    int var40 = var37.getYearOfCentury();
    int var41 = var36.getMaximumValue((org.joda.time.ReadablePartial)var37);
    boolean var43 = var36.isLeap(1L);
    org.joda.time.LocalDateTime var44 = org.joda.time.LocalDateTime.now();
    int var45 = var44.getDayOfYear();
    int var46 = var36.getMinimumValue((org.joda.time.ReadablePartial)var44);
    org.joda.time.DurationField var47 = var36.getDurationField();
    org.joda.time.DateTimeFieldType var48 = var36.getType();
    org.joda.time.field.OffsetDateTimeField var52 = new org.joda.time.field.OffsetDateTimeField(var17, var48, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var55 = new org.joda.time.IllegalFieldValueException(var48, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var58 = var9.appendFraction(var48, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var59 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var60 = var59.minutes();
    org.joda.time.DateTimeField var61 = var59.year();
    org.joda.time.DurationField var62 = var59.hours();
    org.joda.time.field.UnsupportedDateTimeField var63 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var48, var62);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Partial.Property var64 = var8.property(var48);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test238() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test238"); }


    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.Period var6 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var7 = var3.millisOfSecond();
    org.joda.time.chrono.LenientChronology var8 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var3);
    org.joda.time.LocalDateTime var9 = new org.joda.time.LocalDateTime((org.joda.time.Chronology)var3);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var10);
    org.joda.time.DateTimeField var13 = var10.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var14 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.LocalDate var17 = var16.toLocalDate();
    org.joda.time.LocalDate var19 = var17.minusMonths(0);
    int[] var21 = var14.get((org.joda.time.ReadablePartial)var19, 100L);
    org.joda.time.chrono.EthiopicChronology var25 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var26 = var25.hours();
    org.joda.time.LocalTime var27 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var25);
    org.joda.time.Period var28 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var25);
    org.joda.time.DateTimeField var29 = var25.millisOfSecond();
    org.joda.time.DateTimeField var30 = var25.secondOfDay();
    org.joda.time.field.SkipDateTimeField var32 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var14, var30, 100);
    org.joda.time.LocalDateTime var33 = org.joda.time.LocalDateTime.now();
    int var34 = var33.getDayOfYear();
    org.joda.time.Chronology var35 = var33.getChronology();
    int var36 = var33.getYearOfCentury();
    int var37 = var32.getMaximumValue((org.joda.time.ReadablePartial)var33);
    boolean var39 = var32.isLeap(1L);
    org.joda.time.LocalDateTime var40 = org.joda.time.LocalDateTime.now();
    int var41 = var40.getDayOfYear();
    int var42 = var32.getMinimumValue((org.joda.time.ReadablePartial)var40);
    org.joda.time.DurationField var43 = var32.getDurationField();
    org.joda.time.DateTimeFieldType var44 = var32.getType();
    org.joda.time.field.OffsetDateTimeField var48 = new org.joda.time.field.OffsetDateTimeField(var13, var44, 884, 3, 948);
    int var49 = var9.get(var44);
    int var50 = var9.getMillisOfSecond();
    org.joda.time.Duration var52 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var54 = org.joda.time.Duration.standardHours((-1L));
    boolean var55 = var52.isShorterThan((org.joda.time.ReadableDuration)var54);
    org.joda.time.Duration var56 = var52.toDuration();
    org.joda.time.Duration var58 = org.joda.time.Duration.standardHours((-1L));
    boolean var59 = var56.isShorterThan((org.joda.time.ReadableDuration)var58);
    org.joda.time.chrono.JulianChronology var60 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var61 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var60);
    org.joda.time.LocalDate var62 = var61.toLocalDate();
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var64 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var61, (org.joda.time.ReadableInstant)var63);
    org.joda.time.chrono.JulianChronology var65 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var66 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var65);
    org.joda.time.LocalDate var67 = var66.toLocalDate();
    org.joda.time.MutableDateTime var68 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var69 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var66, (org.joda.time.ReadableInstant)var68);
    org.joda.time.MutableDateTime var70 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var71 = var70.year();
    boolean var72 = var68.isBefore((org.joda.time.ReadableInstant)var70);
    org.joda.time.Duration var74 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var76 = org.joda.time.Duration.standardHours((-1L));
    boolean var77 = var74.isShorterThan((org.joda.time.ReadableDuration)var76);
    org.joda.time.Duration var79 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var81 = org.joda.time.Duration.standardHours((-1L));
    boolean var82 = var79.isShorterThan((org.joda.time.ReadableDuration)var81);
    org.joda.time.Duration var83 = var74.plus((org.joda.time.ReadableDuration)var79);
    var70.add((org.joda.time.ReadableDuration)var79);
    org.joda.time.Seconds var85 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var61, (org.joda.time.ReadableInstant)var70);
    org.joda.time.Duration var86 = var85.toStandardDuration();
    org.joda.time.Duration var88 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var90 = org.joda.time.Duration.standardHours((-1L));
    boolean var91 = var88.isShorterThan((org.joda.time.ReadableDuration)var90);
    org.joda.time.Duration var92 = var88.toDuration();
    boolean var93 = var86.isShorterThan((org.joda.time.ReadableDuration)var92);
    long var94 = var92.getStandardDays();
    int var95 = var58.compareTo((org.joda.time.ReadableDuration)var92);
    java.lang.String var96 = var58.toString();
    org.joda.time.LocalDateTime var97 = var9.minus((org.joda.time.ReadableDuration)var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 5034);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 906);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "PT-3600S"+ "'", var96.equals("PT-3600S"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test239() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test239"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var5 = var0.withDayOfWeek(2);
    org.joda.time.LocalDateTime var6 = org.joda.time.LocalDateTime.now();
    int var7 = var6.getDayOfYear();
    org.joda.time.Chronology var8 = var6.getChronology();
    int var9 = var6.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var11 = var6.withDayOfWeek(2);
    org.joda.time.LocalDateTime.Property var12 = var11.yearOfCentury();
    org.joda.time.LocalDateTime var14 = var11.plusWeeks(240);
    boolean var15 = var5.isAfter((org.joda.time.ReadablePartial)var11);
    int var16 = var5.getYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2013);

  }

  public void test240() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test240"); }


    org.joda.time.DateTimeComparator var0 = org.joda.time.DateTimeComparator.getTimeOnlyInstance();
    org.joda.time.DateTimeFieldType var1 = var0.getUpperLimit();
    org.joda.time.DateTimeComparator var2 = org.joda.time.DateTimeComparator.getInstance(var1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.Period var9 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var11 = var9.plusSeconds(100);
    org.joda.time.Period var13 = var9.minusMillis(10);
    boolean var14 = var4.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var15 = var4.dayOfYear();
    int var16 = var4.getSecondOfDay();
    org.joda.time.DateMidnight var18 = var4.withWeekyear(240);
    org.joda.time.DateMidnight var20 = var18.minusMonths(28);
    org.joda.time.DateMidnight var22 = var18.plusWeeks(104);
    org.joda.time.TimeOfDay var23 = new org.joda.time.TimeOfDay();
    int var24 = var23.size();
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var26);
    org.joda.time.LocalTime var30 = var28.withMillisOfSecond(1);
    org.joda.time.LocalTime var32 = var30.minusHours((-1));
    org.joda.time.Years var33 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var23, (org.joda.time.ReadablePartial)var32);
    org.joda.time.DurationFieldType var34 = var33.getFieldType();
    org.joda.time.IllegalFieldValueException var36 = new org.joda.time.IllegalFieldValueException(var34, "[]");
    org.joda.time.DateMidnight var38 = var18.withFieldAdded(var34, 14400001);
    org.joda.time.field.PreciseDurationField var40 = new org.joda.time.field.PreciseDurationField(var34, 2755493227112L);
    org.joda.time.chrono.EthiopicChronology var42 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var43 = var42.hours();
    org.joda.time.DateTimeField var44 = var42.minuteOfHour();
    org.joda.time.LocalDate var45 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var42);
    org.joda.time.LocalDate.Property var46 = var45.weekyear();
    org.joda.time.LocalDate.Property var47 = var45.dayOfMonth();
    org.joda.time.chrono.JulianChronology var48 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var49 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var48);
    org.joda.time.LocalDate var50 = var49.toLocalDate();
    org.joda.time.DateMidnight var52 = var49.minusWeeks((-1));
    org.joda.time.Duration var54 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    var55.setWeekOfWeekyear(1);
    int var58 = var55.getRoundingMode();
    var55.addMillis(100);
    var55.setSecondOfMinute(10);
    org.joda.time.PeriodType var63 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var64 = new org.joda.time.Period((org.joda.time.ReadableDuration)var54, (org.joda.time.ReadableInstant)var55, var63);
    org.joda.time.Days var65 = var64.toStandardDays();
    org.joda.time.DurationFieldType var66 = var65.getFieldType();
    org.joda.time.DateMidnight var68 = var52.withFieldAdded(var66, 1);
    org.joda.time.chrono.JulianChronology var69 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var70 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var69);
    org.joda.time.LocalDate var71 = var70.toLocalDate();
    org.joda.time.DateMidnight var73 = var70.minusWeeks((-1));
    org.joda.time.Duration var75 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var76 = new org.joda.time.MutableDateTime();
    var76.setWeekOfWeekyear(1);
    int var79 = var76.getRoundingMode();
    var76.addMillis(100);
    var76.setSecondOfMinute(10);
    org.joda.time.PeriodType var84 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var85 = new org.joda.time.Period((org.joda.time.ReadableDuration)var75, (org.joda.time.ReadableInstant)var76, var84);
    org.joda.time.Days var86 = var85.toStandardDays();
    org.joda.time.DurationFieldType var87 = var86.getFieldType();
    org.joda.time.DateMidnight var89 = var73.withFieldAdded(var87, 1);
    org.joda.time.DateMidnight var91 = var52.withFieldAdded(var87, 13);
    org.joda.time.IllegalFieldValueException var95 = new org.joda.time.IllegalFieldValueException(var87, (java.lang.Number)(-1), (java.lang.Number)(short)(-1), (java.lang.Number)0);
    org.joda.time.LocalDate var97 = var45.withFieldAdded(var87, 13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var98 = var2.compare((java.lang.Object)var34, (java.lang.Object)13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test241() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test241"); }


    org.joda.time.Period var2 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var4 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    var5.setWeekOfWeekyear(1);
    int var8 = var5.getRoundingMode();
    var5.addMillis(100);
    var5.setSecondOfMinute(10);
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var14 = new org.joda.time.Period((org.joda.time.ReadableDuration)var4, (org.joda.time.ReadableInstant)var5, var13);
    org.joda.time.Days var15 = var14.toStandardDays();
    org.joda.time.DurationFieldType var16 = var15.getFieldType();
    int var17 = var2.get(var16);
    org.joda.time.Period var19 = var2.withMillis(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableInterval var20 = new org.joda.time.MutableInterval((java.lang.Object)var19);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test242() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test242"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    long var1 = var0.getEndMillis();
    org.joda.time.Months var2 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime((java.lang.Object)var0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test243() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test243"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var1 = var0.copy();
    org.joda.time.DateTime var2 = var1.getStart();
    java.util.Date var3 = var2.toDate();
    int var4 = var2.getWeekyear();
    org.joda.time.format.DateTimeFormatterBuilder var5 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var7 = var5.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var9 = var5.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var10);
    org.joda.time.DateTimeField var13 = var10.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var14 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.LocalDate var17 = var16.toLocalDate();
    org.joda.time.LocalDate var19 = var17.minusMonths(0);
    int[] var21 = var14.get((org.joda.time.ReadablePartial)var19, 100L);
    org.joda.time.chrono.EthiopicChronology var25 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var26 = var25.hours();
    org.joda.time.LocalTime var27 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var25);
    org.joda.time.Period var28 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var25);
    org.joda.time.DateTimeField var29 = var25.millisOfSecond();
    org.joda.time.DateTimeField var30 = var25.secondOfDay();
    org.joda.time.field.SkipDateTimeField var32 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var14, var30, 100);
    org.joda.time.LocalDateTime var33 = org.joda.time.LocalDateTime.now();
    int var34 = var33.getDayOfYear();
    org.joda.time.Chronology var35 = var33.getChronology();
    int var36 = var33.getYearOfCentury();
    int var37 = var32.getMaximumValue((org.joda.time.ReadablePartial)var33);
    boolean var39 = var32.isLeap(1L);
    org.joda.time.LocalDateTime var40 = org.joda.time.LocalDateTime.now();
    int var41 = var40.getDayOfYear();
    int var42 = var32.getMinimumValue((org.joda.time.ReadablePartial)var40);
    org.joda.time.DurationField var43 = var32.getDurationField();
    org.joda.time.DateTimeFieldType var44 = var32.getType();
    org.joda.time.field.OffsetDateTimeField var48 = new org.joda.time.field.OffsetDateTimeField(var13, var44, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var51 = new org.joda.time.IllegalFieldValueException(var44, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var54 = var5.appendFraction(var44, 33, (-948));
    org.joda.time.DateTime.Property var55 = var2.property(var44);
    org.joda.time.tz.FixedDateTimeZone var60 = new org.joda.time.tz.FixedDateTimeZone("ConverterManager[6 instant,7 partial,5 duration,5 period,3 interval]", "ConverterManager[6 instant,7 partial,5 duration,5 period,3 interval]", 2, 759);
    long var62 = var60.previousTransition(3L);
    org.joda.time.LocalDateTime var63 = new org.joda.time.LocalDateTime((org.joda.time.DateTimeZone)var60);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var64 = new org.joda.time.LocalDateTime((java.lang.Object)var55, (org.joda.time.DateTimeZone)var60);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1970);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 3L);

  }

  public void test244() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test244"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    org.joda.time.DurationField var20 = var18.getLeapDurationField();
    int var22 = var18.getMinimumValue(100L);
    long var25 = var18.set((-86390600L), 12);
    long var28 = var18.getDifferenceAsLong(1377742995355L, 1377739434462L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-86386600L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 3560L);

  }

  public void test245() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test245"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getYearOfCentury();
    org.joda.time.LocalDateTime var5 = var0.withCenturyOfEra(2);
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var9);
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var12 = var11.year();
    boolean var13 = var9.isBefore((org.joda.time.ReadableInstant)var11);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    boolean var18 = var15.isShorterThan((org.joda.time.ReadableDuration)var17);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    org.joda.time.Duration var24 = var15.plus((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadableDuration)var20);
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.LocalDate var28 = var27.toLocalDate();
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var30 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var27, (org.joda.time.ReadableInstant)var29);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var32 = var31.year();
    boolean var33 = var29.isBefore((org.joda.time.ReadableInstant)var31);
    org.joda.time.Interval var34 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var11, (org.joda.time.ReadableInstant)var31);
    org.joda.time.Interval var35 = var34.toInterval();
    boolean var36 = var35.isBeforeNow();
    long var37 = var35.getStartMillis();
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var40 = new org.joda.time.MutableDateTime();
    var40.setWeekOfWeekyear(1);
    int var43 = var40.getRoundingMode();
    var40.addMillis(100);
    var40.setSecondOfMinute(10);
    org.joda.time.PeriodType var48 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var49 = new org.joda.time.Period((org.joda.time.ReadableDuration)var39, (org.joda.time.ReadableInstant)var40, var48);
    org.joda.time.Days var50 = var49.toStandardDays();
    org.joda.time.Duration var51 = var50.toStandardDuration();
    org.joda.time.Interval var52 = var35.withDurationBeforeEnd((org.joda.time.ReadableDuration)var51);
    org.joda.time.LocalDateTime var54 = var5.withDurationAdded((org.joda.time.ReadableDuration)var51, 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1377735834901L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test246"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    org.joda.time.DateTimeZone var29 = var25.getZone();
    org.joda.time.chrono.ISOChronology var30 = org.joda.time.chrono.ISOChronology.getInstance(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test247() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test247"); }


    org.joda.time.tz.FixedDateTimeZone var5 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    org.joda.time.LocalDate var6 = new org.joda.time.LocalDate(1378524281334L, (org.joda.time.DateTimeZone)var5);
    boolean var7 = var5.isFixed();
    int var9 = var5.getOffset(0L);
    org.joda.time.chrono.EthiopicChronology var10 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var11 = var10.dayOfYear();
    org.joda.time.YearMonthDay var12 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var10);
    int var13 = var12.getYear();
    org.joda.time.YearMonthDay var15 = var12.withYear(28);
    org.joda.time.tz.FixedDateTimeZone var20 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var22 = var20.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var24 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var25 = org.joda.time.chrono.JulianChronology.getInstance(var24);
    long var27 = var20.getMillisKeepLocal(var24, 1377746580759L);
    org.joda.time.DateTime var28 = var12.toDateTimeAtMidnight(var24);
    long var30 = var5.getMillisKeepLocal(var24, (-86390600L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2005);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-86390605L));

  }

  public void test248() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test248"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var0.setChronology((org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var5 = var3.clockhourOfHalfday();
    org.joda.time.format.DateTimeFormatterBuilder var6 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var8 = var6.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var6.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var14 = var11.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = var17.toLocalDate();
    org.joda.time.LocalDate var20 = var18.minusMonths(0);
    int[] var22 = var15.get((org.joda.time.ReadablePartial)var20, 100L);
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var26);
    org.joda.time.Period var29 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var26);
    org.joda.time.DateTimeField var30 = var26.millisOfSecond();
    org.joda.time.DateTimeField var31 = var26.secondOfDay();
    org.joda.time.field.SkipDateTimeField var33 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var15, var31, 100);
    org.joda.time.LocalDateTime var34 = org.joda.time.LocalDateTime.now();
    int var35 = var34.getDayOfYear();
    org.joda.time.Chronology var36 = var34.getChronology();
    int var37 = var34.getYearOfCentury();
    int var38 = var33.getMaximumValue((org.joda.time.ReadablePartial)var34);
    boolean var40 = var33.isLeap(1L);
    org.joda.time.LocalDateTime var41 = org.joda.time.LocalDateTime.now();
    int var42 = var41.getDayOfYear();
    int var43 = var33.getMinimumValue((org.joda.time.ReadablePartial)var41);
    org.joda.time.DurationField var44 = var33.getDurationField();
    org.joda.time.DateTimeFieldType var45 = var33.getType();
    org.joda.time.field.OffsetDateTimeField var49 = new org.joda.time.field.OffsetDateTimeField(var14, var45, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var52 = new org.joda.time.IllegalFieldValueException(var45, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var55 = var6.appendFraction(var45, 33, (-948));
    org.joda.time.field.DividedDateTimeField var57 = new org.joda.time.field.DividedDateTimeField(var5, var45, 100);
    long var60 = var57.add((-86386600L), 13);
    org.joda.time.field.RemainderDateTimeField var61 = new org.joda.time.field.RemainderDateTimeField(var57);
    int var64 = var57.getDifference(1377739432486L, 2755493214888L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 4593613400L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-3827));

  }

  public void test249() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test249"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var0.appendYear(23, 8);
    org.joda.time.format.DateTimeFormatterBuilder var8 = var5.appendFractionOfSecond(21, 51);
    org.joda.time.format.DateTimeFormatter var9 = org.joda.time.format.ISODateTimeFormat.dateHour();
    java.lang.Integer var10 = var9.getPivotYear();
    org.joda.time.format.DateTimeFormatterBuilder var11 = var8.append(var9);
    org.joda.time.format.DateTimeFormatterBuilder var12 = var11.appendMonthOfYearText();
    org.joda.time.format.DateTimeFormatterBuilder var13 = var12.appendDayOfWeekShortText();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test250"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    long var57 = var54.add((-1000L), 1377742981L);
    java.lang.String var58 = var54.getName();
    long var61 = var54.add((-9L), 12194);
    long var64 = var54.add(1377746598784L, 1377742982607L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var66 = var54.remainder((-7092000100L));
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 4959874731599000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "secondOfDay"+ "'", var58.equals("secondOfDay"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 43898399991L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 4959876115131798784L);

  }

  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test251"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var0.appendYear(23, 8);
    org.joda.time.format.DateTimeFormatterBuilder var8 = var5.appendFractionOfSecond(21, 51);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var8.appendTwoDigitWeekyear(9);
    org.joda.time.format.DateTimeFormatterBuilder var12 = var8.appendWeekOfWeekyear(16);
    org.joda.time.format.DateTimeFormatterBuilder var15 = var8.appendCenturyOfEra(356, (-7199100));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test252"); }


    org.joda.time.LocalDate var1 = org.joda.time.LocalDate.parse("1969-12");
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = var3.toLocalDate();
    org.joda.time.LocalDate var6 = var4.withMonthOfYear(1);
    org.joda.time.LocalDate var8 = var6.withEra(1);
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.Period var15 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var17 = var15.plusSeconds(100);
    org.joda.time.Period var19 = var15.minusMillis(10);
    boolean var20 = var10.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var21 = var10.dayOfYear();
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.LocalDate var24 = var23.toLocalDate();
    org.joda.time.LocalDate var26 = var24.minusMonths(0);
    org.joda.time.DateTime var27 = var24.toDateTimeAtMidnight();
    org.joda.time.DateTime var29 = var27.withCenturyOfEra(4);
    org.joda.time.Days var30 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var29);
    org.joda.time.DateMidnight var32 = var10.plusMonths(10);
    org.joda.time.DateTimeZone var34 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var35 = org.joda.time.MutableDateTime.now(var34);
    org.joda.time.DateMidnight var36 = var10.withZoneRetainFields(var34);
    org.joda.time.DateTime var37 = var8.toDateTimeAtMidnight(var34);
    org.joda.time.DateTime var38 = var1.toDateTimeAtCurrentTime(var34);
    org.joda.time.DateTime.Property var39 = var38.year();
    org.joda.time.DateTime var41 = var38.plusDays(36);
    int var42 = var38.getYearOfCentury();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 69);

  }

  public void test253() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test253"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.MutableDateTime var13 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var14);
    org.joda.time.LocalDate var16 = var15.toLocalDate();
    org.joda.time.MutableDateTime var17 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var18 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var15, (org.joda.time.ReadableInstant)var17);
    org.joda.time.MutableDateTime var19 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var20 = var19.year();
    boolean var21 = var17.isBefore((org.joda.time.ReadableInstant)var19);
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    boolean var26 = var23.isShorterThan((org.joda.time.ReadableDuration)var25);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var32 = var23.plus((org.joda.time.ReadableDuration)var28);
    var19.add((org.joda.time.ReadableDuration)var28);
    org.joda.time.MutableDateTime.Property var34 = var19.dayOfWeek();
    var11.setPeriod((org.joda.time.ReadableInstant)var13, (org.joda.time.ReadableInstant)var19);
    org.joda.time.chrono.JulianChronology var36 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var37 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var36);
    org.joda.time.LocalDate var38 = var37.toLocalDate();
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var40 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var37, (org.joda.time.ReadableInstant)var39);
    org.joda.time.chrono.JulianChronology var41 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var42 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var41);
    org.joda.time.LocalDate var43 = var42.toLocalDate();
    org.joda.time.MutableDateTime var44 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var45 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var42, (org.joda.time.ReadableInstant)var44);
    org.joda.time.MutableDateTime var46 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var47 = var46.year();
    boolean var48 = var44.isBefore((org.joda.time.ReadableInstant)var46);
    org.joda.time.Duration var50 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var52 = org.joda.time.Duration.standardHours((-1L));
    boolean var53 = var50.isShorterThan((org.joda.time.ReadableDuration)var52);
    org.joda.time.Duration var55 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var57 = org.joda.time.Duration.standardHours((-1L));
    boolean var58 = var55.isShorterThan((org.joda.time.ReadableDuration)var57);
    org.joda.time.Duration var59 = var50.plus((org.joda.time.ReadableDuration)var55);
    var46.add((org.joda.time.ReadableDuration)var55);
    org.joda.time.Seconds var61 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var37, (org.joda.time.ReadableInstant)var46);
    org.joda.time.Seconds var62 = var61.negated();
    var11.mergePeriod((org.joda.time.ReadablePeriod)var62);
    org.joda.time.chrono.JulianChronology var64 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var65 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var64);
    org.joda.time.LocalDate var66 = var65.toLocalDate();
    org.joda.time.MutableDateTime var67 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var68 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var65, (org.joda.time.ReadableInstant)var67);
    org.joda.time.chrono.JulianChronology var69 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var70 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var69);
    org.joda.time.LocalDate var71 = var70.toLocalDate();
    org.joda.time.MutableDateTime var72 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var73 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var70, (org.joda.time.ReadableInstant)var72);
    org.joda.time.MutableDateTime var74 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var75 = var74.year();
    boolean var76 = var72.isBefore((org.joda.time.ReadableInstant)var74);
    org.joda.time.Duration var78 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var80 = org.joda.time.Duration.standardHours((-1L));
    boolean var81 = var78.isShorterThan((org.joda.time.ReadableDuration)var80);
    org.joda.time.Duration var83 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var85 = org.joda.time.Duration.standardHours((-1L));
    boolean var86 = var83.isShorterThan((org.joda.time.ReadableDuration)var85);
    org.joda.time.Duration var87 = var78.plus((org.joda.time.ReadableDuration)var83);
    var74.add((org.joda.time.ReadableDuration)var83);
    org.joda.time.Seconds var89 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var65, (org.joda.time.ReadableInstant)var74);
    org.joda.time.Seconds var90 = var62.minus(var89);
    org.joda.time.Minutes var91 = var89.toStandardMinutes();
    java.lang.String var92 = var89.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "PT1435S"+ "'", var92.equals("PT1435S"));

  }

  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test254"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    org.joda.time.DateTimeFieldType var55 = var54.getType();
    org.joda.time.DurationField var56 = var54.getRangeDurationField();
    java.lang.String var57 = var54.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "secondOfDay"+ "'", var57.equals("secondOfDay"));

  }

  public void test255() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test255"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.DateMidnight var10 = var8.minusMonths(240);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var12 = var11.dayOfYear();
    org.joda.time.YearMonthDay var13 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var11);
    int var14 = var13.getYear();
    org.joda.time.Period var17 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    var20.setWeekOfWeekyear(1);
    int var23 = var20.getRoundingMode();
    var20.addMillis(100);
    var20.setSecondOfMinute(10);
    org.joda.time.PeriodType var28 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var29 = new org.joda.time.Period((org.joda.time.ReadableDuration)var19, (org.joda.time.ReadableInstant)var20, var28);
    org.joda.time.Days var30 = var29.toStandardDays();
    org.joda.time.DurationFieldType var31 = var30.getFieldType();
    int var32 = var17.get(var31);
    org.joda.time.YearMonthDay var33 = var13.minus((org.joda.time.ReadablePeriod)var17);
    org.joda.time.DateTime var34 = var33.toDateTimeAtCurrentTime();
    org.joda.time.chrono.JulianChronology var36 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var37 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var36);
    org.joda.time.chrono.JulianChronology var38 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var39 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var38);
    org.joda.time.LocalDate var40 = var39.toLocalDate();
    org.joda.time.MutableDateTime var41 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var42 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var39, (org.joda.time.ReadableInstant)var41);
    org.joda.time.MutableDateTime var43 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var44 = var43.year();
    boolean var45 = var41.isBefore((org.joda.time.ReadableInstant)var43);
    org.joda.time.Duration var47 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    boolean var50 = var47.isShorterThan((org.joda.time.ReadableDuration)var49);
    org.joda.time.Duration var52 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var54 = org.joda.time.Duration.standardHours((-1L));
    boolean var55 = var52.isShorterThan((org.joda.time.ReadableDuration)var54);
    org.joda.time.Duration var56 = var47.plus((org.joda.time.ReadableDuration)var52);
    var43.add((org.joda.time.ReadableDuration)var52);
    var43.setHourOfDay(10);
    org.joda.time.Years var60 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var37, (org.joda.time.ReadableInstant)var43);
    org.joda.time.YearMonthDay var61 = var33.minus((org.joda.time.ReadablePeriod)var60);
    org.joda.time.DateMidnight var62 = var8.minus((org.joda.time.ReadablePeriod)var60);
    org.joda.time.Period var67 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var69 = var67.plusYears((-1));
    org.joda.time.Minutes var70 = var67.toStandardMinutes();
    org.joda.time.Minutes var72 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var73 = var70.minus(var72);
    org.joda.time.Period var78 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var80 = var78.plusYears((-1));
    org.joda.time.Minutes var81 = var78.toStandardMinutes();
    org.joda.time.Minutes var82 = var70.plus(var81);
    org.joda.time.DateMidnight var84 = var62.withPeriodAdded((org.joda.time.ReadablePeriod)var70, 69781948);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2005);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test256() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test256"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var2 = var0.withMillis(0L);
    org.joda.time.DateTime var4 = var2.plusHours(2013);
    org.joda.time.chrono.ISOChronology var5 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var10 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var12 = var10.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var14 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstance(var14);
    long var17 = var10.getMillisKeepLocal(var14, 1377746580759L);
    org.joda.time.Chronology var18 = var5.withZone(var14);
    org.joda.time.DateTimeZone var20 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.chrono.ISOChronology var21 = org.joda.time.chrono.ISOChronology.getInstance(var20);
    org.joda.time.Chronology var22 = var5.withZone(var20);
    org.joda.time.DateTime var23 = var2.toDateTime(var20);
    org.joda.time.DateTime var25 = var2.withMillis(1296758981L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test257() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test257"); }


    org.joda.time.LocalTime var1 = new org.joda.time.LocalTime(10L);
    org.joda.time.chrono.EthiopicChronology var2 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = var4.toLocalDate();
    org.joda.time.LocalDate var7 = var5.minusMonths(0);
    int[] var9 = var2.get((org.joda.time.ReadablePartial)var7, 100L);
    org.joda.time.chrono.EthiopicChronology var13 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var14 = var13.hours();
    org.joda.time.LocalTime var15 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var13);
    org.joda.time.Period var16 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var13);
    org.joda.time.DateTimeField var17 = var13.millisOfSecond();
    org.joda.time.DateTimeField var18 = var13.secondOfDay();
    org.joda.time.field.SkipDateTimeField var20 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var2, var18, 100);
    org.joda.time.LocalDateTime var21 = org.joda.time.LocalDateTime.now();
    int var22 = var21.getDayOfYear();
    org.joda.time.Chronology var23 = var21.getChronology();
    int var24 = var21.getYearOfCentury();
    int var25 = var20.getMaximumValue((org.joda.time.ReadablePartial)var21);
    long var28 = var20.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var29 = var20.getRangeDurationField();
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.DateMidnight var33 = var31.plusDays(2013);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var35 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var34);
    org.joda.time.LocalDate var36 = var35.toLocalDate();
    org.joda.time.DateMidnight var38 = var35.minusWeeks((-1));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var41 = new org.joda.time.MutableDateTime();
    var41.setWeekOfWeekyear(1);
    int var44 = var41.getRoundingMode();
    var41.addMillis(100);
    var41.setSecondOfMinute(10);
    org.joda.time.PeriodType var49 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var50 = new org.joda.time.Period((org.joda.time.ReadableDuration)var40, (org.joda.time.ReadableInstant)var41, var49);
    org.joda.time.Days var51 = var50.toStandardDays();
    org.joda.time.DurationFieldType var52 = var51.getFieldType();
    org.joda.time.DateMidnight var54 = var38.withFieldAdded(var52, 1);
    org.joda.time.field.PreciseDurationField var56 = new org.joda.time.field.PreciseDurationField(var52, 1L);
    org.joda.time.DateMidnight var58 = var33.withFieldAdded(var52, 228);
    org.joda.time.field.DecoratedDurationField var59 = new org.joda.time.field.DecoratedDurationField(var29, var52);
    long var62 = var59.add(1377746681334L, 9);
    org.joda.time.Duration var64 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var65 = new org.joda.time.MutableDateTime();
    var65.setWeekOfWeekyear(1);
    int var68 = var65.getRoundingMode();
    var65.addMillis(100);
    var65.setSecondOfMinute(10);
    org.joda.time.PeriodType var73 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var74 = new org.joda.time.Period((org.joda.time.ReadableDuration)var64, (org.joda.time.ReadableInstant)var65, var73);
    org.joda.time.Days var75 = var74.toStandardDays();
    org.joda.time.DurationFieldType var76 = var75.getFieldType();
    org.joda.time.field.DecoratedDurationField var77 = new org.joda.time.field.DecoratedDurationField((org.joda.time.DurationField)var59, var76);
    boolean var78 = var1.isSupported(var76);
    org.joda.time.LocalTime var80 = var1.minusSeconds(18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1378524281334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test258() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test258"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var2.appendDayOfWeek(8400);
    org.joda.time.format.DateTimeFormatterBuilder var6 = var4.appendMonthOfYear(529);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test259"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    java.lang.String var20 = var18.getAsShortText(80003L);
    org.joda.time.DateTimeField var21 = var18.getWrappedField();
    org.joda.time.field.DelegatedDateTimeField var22 = new org.joda.time.field.DelegatedDateTimeField((org.joda.time.DateTimeField)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "80"+ "'", var20.equals("80"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test260() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test260"); }


    org.joda.time.chrono.ISOChronology var0 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var2 = var1.dayOfYear();
    org.joda.time.YearMonthDay var3 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var1);
    org.joda.time.YearMonthDay var5 = var3.plusDays((-1));
    org.joda.time.YearMonthDay.Property var6 = var3.year();
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = var8.toLocalDate();
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var11 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var8, (org.joda.time.ReadableInstant)var10);
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var13 = var12.year();
    boolean var14 = var10.isBefore((org.joda.time.ReadableInstant)var12);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    boolean var19 = var16.isShorterThan((org.joda.time.ReadableDuration)var18);
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    boolean var24 = var21.isShorterThan((org.joda.time.ReadableDuration)var23);
    org.joda.time.Duration var25 = var16.plus((org.joda.time.ReadableDuration)var21);
    var12.add((org.joda.time.ReadableDuration)var21);
    org.joda.time.Hours var27 = var21.toStandardHours();
    org.joda.time.YearMonthDay var29 = var3.withPeriodAdded((org.joda.time.ReadablePeriod)var27, 2013);
    org.joda.time.YearMonthDay var31 = var3.minusYears(7);
    boolean var32 = var0.equals((java.lang.Object)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test261"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    long var57 = var54.add((-1000L), 1377742981L);
    boolean var58 = var54.isLenient();
    long var61 = var54.add(1377742999393L, 12194);
    int var64 = var54.getDifference(2762376429621796L, (-703463L));
    long var67 = var54.getDifferenceAsLong(1377735830915L, (-86390600L));
    long var70 = var54.getDifferenceAsLong(2755489629828L, 2755493225160L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var72 = var54.roundCeiling((-60779281008478L));
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 4959874731599000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1421641399393L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 767326786);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 382728L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0L);

  }

  public void test262() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test262"); }


    org.joda.time.Period var8 = new org.joda.time.Period(12217, (-22), 1970, 765, 1, 62, 28, 13);
    org.joda.time.MutableInterval var9 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var10 = var9.copy();
    org.joda.time.DateTime var11 = var10.getStart();
    java.util.Date var12 = var11.toDate();
    org.joda.time.DateTime var13 = var11.withLaterOffsetAtOverlap();
    org.joda.time.Duration var14 = var8.toDurationTo((org.joda.time.ReadableInstant)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test263() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test263"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusSeconds(100);
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.DateMidnight var10 = var8.plusDays(2013);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = var12.toLocalDate();
    org.joda.time.DateMidnight var15 = var12.minusWeeks((-1));
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var18 = new org.joda.time.MutableDateTime();
    var18.setWeekOfWeekyear(1);
    int var21 = var18.getRoundingMode();
    var18.addMillis(100);
    var18.setSecondOfMinute(10);
    org.joda.time.PeriodType var26 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var27 = new org.joda.time.Period((org.joda.time.ReadableDuration)var17, (org.joda.time.ReadableInstant)var18, var26);
    org.joda.time.Days var28 = var27.toStandardDays();
    org.joda.time.DurationFieldType var29 = var28.getFieldType();
    org.joda.time.DateMidnight var31 = var15.withFieldAdded(var29, 1);
    org.joda.time.field.PreciseDurationField var33 = new org.joda.time.field.PreciseDurationField(var29, 1L);
    org.joda.time.DateMidnight var35 = var10.withFieldAdded(var29, 228);
    org.joda.time.Period var37 = var4.withField(var29, 759);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test264"); }


    org.joda.time.Duration var2 = new org.joda.time.Duration(1377768182707035L, 1386411782707L);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = var4.toLocalDate();
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var7 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var6);
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var9 = var8.year();
    boolean var10 = var6.isBefore((org.joda.time.ReadableInstant)var8);
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    boolean var15 = var12.isShorterThan((org.joda.time.ReadableDuration)var14);
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    boolean var20 = var17.isShorterThan((org.joda.time.ReadableDuration)var19);
    org.joda.time.Duration var21 = var12.plus((org.joda.time.ReadableDuration)var17);
    var8.add((org.joda.time.ReadableDuration)var17);
    org.joda.time.MutableDateTime.Property var23 = var8.weekyear();
    org.joda.time.MutableDateTime.Property var24 = var8.year();
    boolean var26 = var8.isAfter(1L);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    var29.setWeekOfWeekyear(1);
    int var32 = var29.getRoundingMode();
    var29.addMillis(100);
    var29.setSecondOfMinute(10);
    org.joda.time.PeriodType var37 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var38 = new org.joda.time.Period((org.joda.time.ReadableDuration)var28, (org.joda.time.ReadableInstant)var29, var37);
    org.joda.time.Days var39 = var38.toStandardDays();
    org.joda.time.Hours var40 = var39.toStandardHours();
    java.lang.String var41 = var40.toString();
    org.joda.time.Days var42 = var40.toStandardDays();
    org.joda.time.Minutes var43 = var42.toStandardMinutes();
    org.joda.time.Duration var44 = var43.toStandardDuration();
    org.joda.time.chrono.JulianChronology var45 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var46 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var45);
    org.joda.time.LocalDate var47 = var46.toLocalDate();
    org.joda.time.MutableDateTime var48 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var49 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var46, (org.joda.time.ReadableInstant)var48);
    org.joda.time.MutableDateTime var50 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var51 = var50.year();
    boolean var52 = var48.isBefore((org.joda.time.ReadableInstant)var50);
    var50.addMonths(104);
    org.joda.time.PeriodType var55 = org.joda.time.PeriodType.yearDay();
    org.joda.time.Period var56 = var44.toPeriodTo((org.joda.time.ReadableInstant)var50, var55);
    org.joda.time.Period var57 = new org.joda.time.Period((org.joda.time.ReadableDuration)var2, (org.joda.time.ReadableInstant)var8, var55);
    org.joda.time.MutableDateTime.Property var58 = var8.dayOfMonth();
    var8.setMillisOfDay(216);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "PT0H"+ "'", var41.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test265() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test265"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.MutableDateTime.Property var2 = var0.weekOfWeekyear();
    var0.setMillisOfDay(16);
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours(99L);
    var0.add((org.joda.time.ReadableDuration)var6, 3);
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.LocalDate var11 = var10.toLocalDate();
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var13 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var12);
    org.joda.time.MutableDateTime var14 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var15 = var14.year();
    boolean var16 = var12.isBefore((org.joda.time.ReadableInstant)var14);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    boolean var26 = var23.isShorterThan((org.joda.time.ReadableDuration)var25);
    org.joda.time.Duration var27 = var18.plus((org.joda.time.ReadableDuration)var23);
    var14.add((org.joda.time.ReadableDuration)var23);
    org.joda.time.chrono.JulianChronology var29 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var30 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var29);
    org.joda.time.LocalDate var31 = var30.toLocalDate();
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var33 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var30, (org.joda.time.ReadableInstant)var32);
    org.joda.time.MutableDateTime var34 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var35 = var34.year();
    boolean var36 = var32.isBefore((org.joda.time.ReadableInstant)var34);
    org.joda.time.Interval var37 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var14, (org.joda.time.ReadableInstant)var34);
    boolean var39 = var37.isAfter(10L);
    org.joda.time.MutableDateTime var40 = new org.joda.time.MutableDateTime();
    var40.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var43 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var40.setChronology((org.joda.time.Chronology)var43);
    org.joda.time.Interval var45 = var37.withChronology((org.joda.time.Chronology)var43);
    org.joda.time.Duration var47 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var48 = new org.joda.time.MutableDateTime();
    var48.setWeekOfWeekyear(1);
    int var51 = var48.getRoundingMode();
    var48.addMillis(100);
    var48.setSecondOfMinute(10);
    org.joda.time.PeriodType var56 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var57 = new org.joda.time.Period((org.joda.time.ReadableDuration)var47, (org.joda.time.ReadableInstant)var48, var56);
    org.joda.time.Days var58 = var57.toStandardDays();
    org.joda.time.Hours var59 = var58.toStandardHours();
    java.lang.String var60 = var59.toString();
    org.joda.time.Days var61 = var59.toStandardDays();
    org.joda.time.Minutes var62 = var61.toStandardMinutes();
    org.joda.time.Duration var63 = var62.toStandardDuration();
    org.joda.time.Interval var64 = var37.withDurationAfterStart((org.joda.time.ReadableDuration)var63);
    org.joda.time.Duration var65 = var6.minus((org.joda.time.ReadableDuration)var63);
    org.joda.time.Hours var66 = var6.toStandardHours();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "PT0H"+ "'", var60.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test266"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var1 = var0.copy();
    org.joda.time.DateTime var2 = var1.getStart();
    java.util.Date var3 = var2.toDate();
    org.joda.time.MonthDay var4 = org.joda.time.MonthDay.fromDateFields(var3);
    org.joda.time.Period var9 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var11 = var9.plusSeconds(100);
    org.joda.time.Period var13 = var11.withSeconds(0);
    int var14 = var13.getMonths();
    org.joda.time.MonthDay var15 = var4.minus((org.joda.time.ReadablePeriod)var13);
    int var16 = var15.getMonthOfYear();
    java.lang.String var18 = var15.toString("2013-01-16");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "2013-01-16"+ "'", var18.equals("2013-01-16"));

  }

  public void test267() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test267"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var1 = var0.copy();
    org.joda.time.DateTime var2 = var1.getStart();
    java.util.Date var3 = var2.toDate();
    org.joda.time.LocalTime var4 = org.joda.time.LocalTime.fromDateFields(var3);
    org.joda.time.LocalDateTime var5 = org.joda.time.LocalDateTime.fromDateFields(var3);
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var9);
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var12 = var11.year();
    boolean var13 = var9.isBefore((org.joda.time.ReadableInstant)var11);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    boolean var18 = var15.isShorterThan((org.joda.time.ReadableDuration)var17);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    org.joda.time.Duration var24 = var15.plus((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadableDuration)var20);
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.LocalDate var28 = var27.toLocalDate();
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var30 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var27, (org.joda.time.ReadableInstant)var29);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var32 = var31.year();
    boolean var33 = var29.isBefore((org.joda.time.ReadableInstant)var31);
    org.joda.time.Interval var34 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var11, (org.joda.time.ReadableInstant)var31);
    org.joda.time.DateTime var35 = var11.toDateTime();
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours(1377746581334L);
    org.joda.time.DateTime var38 = var35.plus((org.joda.time.ReadableDuration)var37);
    org.joda.time.LocalDateTime var39 = var5.minus((org.joda.time.ReadableDuration)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test268() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test268"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusYears((-1));
    org.joda.time.Minutes var7 = var4.toStandardMinutes();
    org.joda.time.Minutes var9 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var10 = var7.minus(var9);
    org.joda.time.Minutes var12 = var9.minus(57600100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test269"); }


    org.joda.time.MutablePeriod var4 = new org.joda.time.MutablePeriod(13, 20, 86399, 2);
    org.joda.time.Partial var5 = new org.joda.time.Partial();
    java.lang.String var6 = var5.toString();
    org.joda.time.PeriodType var7 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var8 = new org.joda.time.MutablePeriod(var7);
    org.joda.time.DurationFieldType[] var9 = var8.getFieldTypes();
    org.joda.time.Partial var10 = var5.plus((org.joda.time.ReadablePeriod)var8);
    var8.add(2762381894421796L);
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.withMonthOfYear(1);
    org.joda.time.LocalDate var19 = var15.withWeekyear(1);
    org.joda.time.LocalDate var21 = var15.withDayOfYear(1);
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    var24.setWeekOfWeekyear(1);
    int var27 = var24.getRoundingMode();
    var24.addMillis(100);
    var24.setSecondOfMinute(10);
    org.joda.time.PeriodType var32 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var33 = new org.joda.time.Period((org.joda.time.ReadableDuration)var23, (org.joda.time.ReadableInstant)var24, var32);
    org.joda.time.Days var34 = var33.toStandardDays();
    org.joda.time.DurationFieldType var35 = var34.getFieldType();
    boolean var36 = var15.isSupported(var35);
    org.joda.time.field.PreciseDurationField var38 = new org.joda.time.field.PreciseDurationField(var35, 1325559981L);
    int var39 = var8.indexOf(var35);
    int var40 = var4.get(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "[]"+ "'", var6.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);

  }

  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test270"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    int var3 = var0.getSecondOfDay();
    org.joda.time.Instant var4 = new org.joda.time.Instant();
    org.joda.time.Instant var5 = var4.toInstant();
    org.joda.time.PeriodType var6 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(var6);
    var7.addDays(1);
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    boolean var14 = var11.isShorterThan((org.joda.time.ReadableDuration)var13);
    var7.add((org.joda.time.ReadableDuration)var13);
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    boolean var20 = var17.isShorterThan((org.joda.time.ReadableDuration)var19);
    org.joda.time.Duration var21 = var17.toDuration();
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.LocalDate var24 = var23.toLocalDate();
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var26 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableInstant)var25);
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var28 = var27.year();
    boolean var29 = var25.isBefore((org.joda.time.ReadableInstant)var27);
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    boolean var34 = var31.isShorterThan((org.joda.time.ReadableDuration)var33);
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    boolean var39 = var36.isShorterThan((org.joda.time.ReadableDuration)var38);
    org.joda.time.Duration var40 = var31.plus((org.joda.time.ReadableDuration)var36);
    var27.add((org.joda.time.ReadableDuration)var36);
    org.joda.time.PeriodType var42 = org.joda.time.PeriodType.months();
    org.joda.time.Period var43 = new org.joda.time.Period((org.joda.time.ReadableDuration)var17, (org.joda.time.ReadableInstant)var27, var42);
    org.joda.time.Period var44 = new org.joda.time.Period((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableDuration)var13, var42);
    org.joda.time.DateTime var45 = var5.toDateTimeISO();
    org.joda.time.DateTime var47 = var45.minusMillis(20);
    org.joda.time.MutableDateTime var48 = var47.toMutableDateTime();
    org.joda.time.Hours var49 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 5035);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test271() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test271"); }


    org.joda.time.Period var1 = org.joda.time.Period.seconds(80);
    int var2 = var1.getMinutes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test272() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test272"); }


    org.joda.time.Period var7 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var9 = var7.plusYears((-1));
    org.joda.time.Years var11 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var12 = var11.getPeriodType();
    org.joda.time.Period var13 = var7.normalizedStandard(var12);
    org.joda.time.PeriodType var14 = var12.withMillisRemoved();
    org.joda.time.MutablePeriod var15 = new org.joda.time.MutablePeriod(var12);
    org.joda.time.PeriodType var16 = var12.withYearsRemoved();
    org.joda.time.Period var17 = new org.joda.time.Period(86400000L, var16);
    org.joda.time.LocalDateTime var18 = org.joda.time.LocalDateTime.now();
    int var19 = var18.getDayOfYear();
    org.joda.time.Chronology var20 = var18.getChronology();
    org.joda.time.chrono.StrictChronology var21 = org.joda.time.chrono.StrictChronology.getInstance(var20);
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.LocalDate var24 = var23.toLocalDate();
    org.joda.time.LocalDate var26 = var24.withMonthOfYear(1);
    org.joda.time.LocalDate var28 = var24.withWeekyear(1);
    org.joda.time.LocalDate var30 = var24.withDayOfYear(1);
    org.joda.time.LocalDate var32 = var30.minusMonths(16);
    boolean var33 = var21.equals((java.lang.Object)16);
    java.lang.String var34 = var21.toString();
    org.joda.time.Period var35 = new org.joda.time.Period(1000L, 1377742982607L, var16, (org.joda.time.Chronology)var21);
    org.joda.time.PeriodType var36 = var16.withWeeksRemoved();
    org.joda.time.PeriodType var37 = var16.withYearsRemoved();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "StrictChronology[ISOChronology[UTC]]"+ "'", var34.equals("StrictChronology[ISOChronology[UTC]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test273"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    long var26 = var18.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var27 = var18.getRangeDurationField();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.DateMidnight var31 = var29.plusDays(2013);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.DateMidnight var36 = var33.minusWeeks((-1));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.DurationFieldType var50 = var49.getFieldType();
    org.joda.time.DateMidnight var52 = var36.withFieldAdded(var50, 1);
    org.joda.time.field.PreciseDurationField var54 = new org.joda.time.field.PreciseDurationField(var50, 1L);
    org.joda.time.DateMidnight var56 = var31.withFieldAdded(var50, 228);
    org.joda.time.field.DecoratedDurationField var57 = new org.joda.time.field.DecoratedDurationField(var27, var50);
    long var60 = var57.add(1377746681334L, 9);
    org.joda.time.Duration var62 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    var63.setWeekOfWeekyear(1);
    int var66 = var63.getRoundingMode();
    var63.addMillis(100);
    var63.setSecondOfMinute(10);
    org.joda.time.PeriodType var71 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var72 = new org.joda.time.Period((org.joda.time.ReadableDuration)var62, (org.joda.time.ReadableInstant)var63, var71);
    org.joda.time.Days var73 = var72.toStandardDays();
    org.joda.time.DurationFieldType var74 = var73.getFieldType();
    org.joda.time.field.DecoratedDurationField var75 = new org.joda.time.field.DecoratedDurationField((org.joda.time.DurationField)var57, var74);
    org.joda.time.field.UnsupportedDurationField var76 = org.joda.time.field.UnsupportedDurationField.getInstance(var74);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var79 = var76.getDifferenceAsLong((-1377743011429L), 1377739431138L);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1378524281334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test274() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test274"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.LocalTime var9 = new org.joda.time.LocalTime((org.joda.time.Chronology)var8);
    org.joda.time.LocalDateTime var10 = org.joda.time.LocalDateTime.now();
    int var11 = var10.getDayOfYear();
    org.joda.time.Chronology var12 = var10.getChronology();
    int var13 = var10.getYearOfCentury();
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    var16.setWeekOfWeekyear(1);
    int var19 = var16.getRoundingMode();
    var16.addMillis(100);
    var16.setSecondOfMinute(10);
    org.joda.time.PeriodType var24 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var25 = new org.joda.time.Period((org.joda.time.ReadableDuration)var15, (org.joda.time.ReadableInstant)var16, var24);
    org.joda.time.Days var26 = var25.toStandardDays();
    boolean var27 = var10.equals((java.lang.Object)var26);
    org.joda.time.LocalTime var28 = var9.plus((org.joda.time.ReadablePeriod)var26);
    org.joda.time.format.DateTimeFormatter var29 = org.joda.time.format.ISODateTimeFormat.weekDateTimeNoMillis();
    java.util.Locale var30 = var29.getLocale();
    java.lang.String var31 = var28.toString(var29);
    org.joda.time.DateTime var32 = var5.toDateTime(var28);
    org.joda.time.DateTime.Property var33 = var32.millisOfSecond();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "\uFFFD\uFFFD\uFFFD\uFFFD-W\uFFFD\uFFFD-\uFFFDT01:23:55"+ "'", var31.equals("\uFFFD\uFFFD\uFFFD\uFFFD-W\uFFFD\uFFFD-\uFFFDT01:23:55"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test275() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test275"); }


    org.joda.time.DateTime var0 = new org.joda.time.DateTime();
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var2);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var8 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var7);
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var10 = var9.year();
    boolean var11 = var7.isBefore((org.joda.time.ReadableInstant)var9);
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    boolean var16 = var13.isShorterThan((org.joda.time.ReadableDuration)var15);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    org.joda.time.Duration var22 = var13.plus((org.joda.time.ReadableDuration)var18);
    var9.add((org.joda.time.ReadableDuration)var18);
    var9.setHourOfDay(10);
    org.joda.time.Years var26 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var9);
    org.joda.time.Period var27 = new org.joda.time.Period((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var9);
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    boolean var32 = var29.isShorterThan((org.joda.time.ReadableDuration)var31);
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    boolean var37 = var34.isShorterThan((org.joda.time.ReadableDuration)var36);
    org.joda.time.Duration var38 = var29.plus((org.joda.time.ReadableDuration)var34);
    java.lang.String var39 = var38.toString();
    org.joda.time.DateTime var41 = var0.withDurationAdded((org.joda.time.ReadableDuration)var38, 80);
    org.joda.time.chrono.BuddhistChronology var42 = org.joda.time.chrono.BuddhistChronology.getInstanceUTC();
    org.joda.time.DateTime var43 = var41.toDateTime((org.joda.time.Chronology)var42);
    org.joda.time.DateTime var45 = var41.plusYears(70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "PT-7200S"+ "'", var39.equals("PT-7200S"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test276"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.Hours var44 = var38.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var45 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var14.setPeriod((org.joda.time.ReadableDuration)var38, (org.joda.time.Chronology)var45);
    var14.clear();
    org.joda.time.MutableDateTime var48 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var49 = var48.year();
    org.joda.time.MutableDateTime.Property var50 = var48.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var51 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var52 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var51);
    org.joda.time.Period var57 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var59 = var57.plusSeconds(100);
    org.joda.time.Period var61 = var57.minusMillis(10);
    boolean var62 = var52.equals((java.lang.Object)10);
    org.joda.time.Weeks var63 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var48, (org.joda.time.ReadableInstant)var52);
    org.joda.time.Duration var64 = var14.toDurationFrom((org.joda.time.ReadableInstant)var52);
    org.joda.time.chrono.JulianChronology var67 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var68 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var67);
    var14.add(1L, (org.joda.time.Chronology)var67);
    org.joda.time.DateTimeField var70 = var67.yearOfCentury();
    org.joda.time.LocalDateTime var71 = new org.joda.time.LocalDateTime((org.joda.time.Chronology)var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test277"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forID("2013-08-29T03:23:18.492+00:00:00.759/2013-08-29T03:23:18.492+00:00:00.759");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test278() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test278"); }


    org.joda.time.format.PeriodFormatterBuilder var0 = new org.joda.time.format.PeriodFormatterBuilder();
    org.joda.time.format.PeriodFormatterBuilder var3 = var0.appendSeparator("T07:00:08", "P121961710312T697819483414166.171");
    org.joda.time.format.PeriodFormatterBuilder var5 = var0.appendSeparatorIfFieldsAfter("days");
    org.joda.time.format.PeriodFormatterBuilder var7 = var5.appendPrefix("20:23:00.489");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test279() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test279"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var1 = var0.copy();
    boolean var2 = var0.containsNow();
    org.joda.time.LocalDateTime var3 = org.joda.time.LocalDateTime.now();
    int var4 = var3.getDayOfYear();
    org.joda.time.Chronology var5 = var3.getChronology();
    org.joda.time.YearMonthDay var6 = new org.joda.time.YearMonthDay(var5);
    org.joda.time.MonthDay var7 = new org.joda.time.MonthDay(var5);
    var0.setChronology(var5);
    var0.setStartMillis((-703463L));
    var0.setEndMillis(2762381894421796L);
    org.joda.time.TimeOfDay var13 = new org.joda.time.TimeOfDay();
    int var14 = var13.size();
    org.joda.time.chrono.EthiopicChronology var16 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var17 = var16.hours();
    org.joda.time.LocalTime var18 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var16);
    org.joda.time.LocalTime var20 = var18.withMillisOfSecond(1);
    org.joda.time.LocalTime var22 = var20.minusHours((-1));
    org.joda.time.Years var23 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var13, (org.joda.time.ReadablePartial)var22);
    int var24 = var13.getMillisOfSecond();
    org.joda.time.TimeOfDay var26 = var13.minusMillis((-9));
    org.joda.time.tz.FixedDateTimeZone var31 = new org.joda.time.tz.FixedDateTimeZone("ConverterManager[6 instant,7 partial,5 duration,5 period,3 interval]", "ConverterManager[6 instant,7 partial,5 duration,5 period,3 interval]", 2, 759);
    org.joda.time.DateTime var32 = var26.toDateTimeToday((org.joda.time.DateTimeZone)var31);
    org.joda.time.DateTime.Property var33 = var32.millisOfSecond();
    var0.setEnd((org.joda.time.ReadableInstant)var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 841);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test280() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test280"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    boolean var51 = var47.isBefore((org.joda.time.ReadableInstant)var49);
    org.joda.time.Interval var52 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var49);
    boolean var54 = var52.isAfter(10L);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    var55.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var55.setChronology((org.joda.time.Chronology)var58);
    org.joda.time.Interval var60 = var52.withChronology((org.joda.time.Chronology)var58);
    var11.setPeriod((org.joda.time.ReadableInterval)var52);
    org.joda.time.Duration var63 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var64 = new org.joda.time.MutableDateTime();
    var64.setWeekOfWeekyear(1);
    int var67 = var64.getRoundingMode();
    var64.addMillis(100);
    var64.setSecondOfMinute(10);
    org.joda.time.PeriodType var72 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var73 = new org.joda.time.Period((org.joda.time.ReadableDuration)var63, (org.joda.time.ReadableInstant)var64, var72);
    org.joda.time.Days var74 = var73.toStandardDays();
    org.joda.time.Hours var75 = var74.toStandardHours();
    org.joda.time.Interval var76 = var52.withPeriodBeforeEnd((org.joda.time.ReadablePeriod)var74);
    org.joda.time.LocalDateTime var77 = org.joda.time.LocalDateTime.now();
    int var78 = var77.getDayOfYear();
    org.joda.time.Chronology var79 = var77.getChronology();
    int var80 = var77.getYearOfCentury();
    org.joda.time.Duration var82 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var83 = new org.joda.time.MutableDateTime();
    var83.setWeekOfWeekyear(1);
    int var86 = var83.getRoundingMode();
    var83.addMillis(100);
    var83.setSecondOfMinute(10);
    org.joda.time.PeriodType var91 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var92 = new org.joda.time.Period((org.joda.time.ReadableDuration)var82, (org.joda.time.ReadableInstant)var83, var91);
    org.joda.time.Days var93 = var92.toStandardDays();
    boolean var94 = var77.equals((java.lang.Object)var93);
    boolean var95 = var74.isGreaterThan(var93);
    org.joda.time.Days var97 = var93.minus(4);
    java.lang.String var98 = var97.toString();
    org.joda.time.DurationFieldType var99 = var97.getFieldType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var98 + "' != '" + "P-4D"+ "'", var98.equals("P-4D"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test281"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var4.appendTimeZoneId();
    org.joda.time.format.DateTimeFormatterBuilder var6 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var8 = var6.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var6.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var14 = var11.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = var17.toLocalDate();
    org.joda.time.LocalDate var20 = var18.minusMonths(0);
    int[] var22 = var15.get((org.joda.time.ReadablePartial)var20, 100L);
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var26);
    org.joda.time.Period var29 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var26);
    org.joda.time.DateTimeField var30 = var26.millisOfSecond();
    org.joda.time.DateTimeField var31 = var26.secondOfDay();
    org.joda.time.field.SkipDateTimeField var33 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var15, var31, 100);
    org.joda.time.LocalDateTime var34 = org.joda.time.LocalDateTime.now();
    int var35 = var34.getDayOfYear();
    org.joda.time.Chronology var36 = var34.getChronology();
    int var37 = var34.getYearOfCentury();
    int var38 = var33.getMaximumValue((org.joda.time.ReadablePartial)var34);
    boolean var40 = var33.isLeap(1L);
    org.joda.time.LocalDateTime var41 = org.joda.time.LocalDateTime.now();
    int var42 = var41.getDayOfYear();
    int var43 = var33.getMinimumValue((org.joda.time.ReadablePartial)var41);
    org.joda.time.DurationField var44 = var33.getDurationField();
    org.joda.time.DateTimeFieldType var45 = var33.getType();
    org.joda.time.field.OffsetDateTimeField var49 = new org.joda.time.field.OffsetDateTimeField(var14, var45, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var52 = new org.joda.time.IllegalFieldValueException(var45, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var55 = var6.appendFraction(var45, 33, (-948));
    org.joda.time.format.DateTimeFormatterBuilder var56 = var5.appendText(var45);
    org.joda.time.format.DateTimeParser var57 = var5.toParser();
    org.joda.time.format.DateTimeFormatterBuilder var59 = var5.appendMinuteOfHour(69);
    org.joda.time.format.DateTimeFormatterBuilder var61 = var5.appendMillisOfDay(12217692);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test282() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test282"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var29 = var28.toInterval();
    org.joda.time.Partial var30 = new org.joda.time.Partial();
    java.lang.String var31 = var30.toString();
    org.joda.time.PeriodType var32 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var33 = new org.joda.time.MutablePeriod(var32);
    org.joda.time.DurationFieldType[] var34 = var33.getFieldTypes();
    org.joda.time.Partial var35 = var30.plus((org.joda.time.ReadablePeriod)var33);
    org.joda.time.Interval var36 = var29.withPeriodAfterStart((org.joda.time.ReadablePeriod)var33);
    boolean var37 = var36.isBeforeNow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);

  }

  public void test283() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test283"); }


    org.joda.time.LocalDate var1 = new org.joda.time.LocalDate(1377746581948L);
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = var3.toLocalDate();
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var6 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var5);
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = var8.toLocalDate();
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var11 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var8, (org.joda.time.ReadableInstant)var10);
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var13 = var12.year();
    boolean var14 = var10.isBefore((org.joda.time.ReadableInstant)var12);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    boolean var19 = var16.isShorterThan((org.joda.time.ReadableDuration)var18);
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    boolean var24 = var21.isShorterThan((org.joda.time.ReadableDuration)var23);
    org.joda.time.Duration var25 = var16.plus((org.joda.time.ReadableDuration)var21);
    var12.add((org.joda.time.ReadableDuration)var21);
    org.joda.time.Seconds var27 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var12);
    org.joda.time.Seconds var29 = var27.plus(2005);
    org.joda.time.Minutes var30 = var27.toStandardMinutes();
    org.joda.time.Seconds var32 = var27.multipliedBy(3);
    org.joda.time.LocalDate var33 = var1.minus((org.joda.time.ReadablePeriod)var32);
    org.joda.time.Period var34 = var32.toPeriod();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test284() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test284"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    int var2 = var1.getSeconds();
    int var3 = var1.getMonths();
    var1.setWeeks((-1));
    org.joda.time.Weeks var6 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod)var1);
    var1.add(1377742991418L);
    var1.setYears(765);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test285"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var0.appendYear(23, 8);
    org.joda.time.format.DateTimeFormatterBuilder var8 = var5.appendFractionOfSecond(21, 51);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var8.appendTwoDigitWeekyear(9);
    org.joda.time.format.DateTimeFormatterBuilder var12 = var8.appendWeekOfWeekyear(16);
    boolean var13 = var8.canBuildPrinter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test286() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test286"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.YearMonthDay var3 = new org.joda.time.YearMonthDay(126, 23544431, 853);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }

  }

  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test287"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var1 = var0.minutes();
    org.joda.time.Chronology var2 = org.joda.time.DateTimeUtils.getChronology((org.joda.time.Chronology)var0);
    org.joda.time.Chronology var3 = var0.withUTC();
    org.joda.time.MutableDateTime var4 = org.joda.time.MutableDateTime.now(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test288() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test288"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.yearMonth();
    java.lang.String var2 = var0.print(1377746580754L);
    org.joda.time.DateTimeZone var3 = var0.getZone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "2013-08"+ "'", var2.equals("2013-08"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test289() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test289"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var4.appendTimeZoneId();
    org.joda.time.format.DateTimeParser var6 = var5.toParser();
    org.joda.time.format.DateTimeFormatterBuilder var8 = var5.appendDayOfYear(34);
    org.joda.time.format.DateTimeFormatterBuilder var9 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var11 = var9.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimePrinter var12 = var9.toPrinter();
    org.joda.time.format.DateTimeFormatter var13 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var17 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var18 = var17.hours();
    org.joda.time.LocalTime var19 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var17);
    org.joda.time.Period var20 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var17);
    org.joda.time.DateTimeField var21 = var17.millisOfSecond();
    org.joda.time.chrono.LenientChronology var22 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var17);
    org.joda.time.format.DateTimeFormatter var23 = var13.withChronology((org.joda.time.Chronology)var22);
    org.joda.time.format.DateTimeFormatter var24 = var23.withZoneUTC();
    org.joda.time.format.DateTimeParser var25 = var23.getParser();
    org.joda.time.format.DateTimeFormatterBuilder var26 = var8.append(var12, var25);
    org.joda.time.format.DateTimeFormatterBuilder var27 = var26.appendDayOfWeekText();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test290() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test290"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    var5.addDays(104);
    var5.addMillis(216);
    int var24 = var5.getRoundingMode();
    org.joda.time.chrono.JulianChronology var25 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var26 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var25);
    org.joda.time.DateMidnight var28 = var26.plusDays(2013);
    org.joda.time.DateMidnight var30 = var28.withDayOfMonth(10);
    org.joda.time.DateMidnight.Property var31 = var30.yearOfCentury();
    org.joda.time.Chronology var32 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var30);
    org.joda.time.DateMidnight var34 = var30.withMillis(2755493227240L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test291() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test291"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var2.withWeekyear(1);
    org.joda.time.LocalDate var8 = var2.withDayOfYear(1);
    org.joda.time.format.DateTimeFormatter var9 = org.joda.time.format.ISODateTimeFormat.weekDateTimeNoMillis();
    java.lang.String var10 = var8.toString(var9);
    int var11 = var8.getMonthOfYear();
    org.joda.time.LocalDate.Property var12 = var8.yearOfCentury();
    org.joda.time.LocalDate var14 = var8.withYearOfCentury(51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "2013-W01-1T\uFFFD\uFFFD:\uFFFD\uFFFD:\uFFFD\uFFFD"+ "'", var10.equals("2013-W01-1T\uFFFD\uFFFD:\uFFFD\uFFFD:\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test292"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var2.plusDays(10);
    org.joda.time.Interval var7 = var2.toInterval();
    org.joda.time.LocalDate var9 = var2.minusDays(11);
    int var10 = var9.getMonthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 8);

  }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test293"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
    org.joda.time.MutableDateTime var1 = new org.joda.time.MutableDateTime();
    var1.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.DateMidnight var8 = var5.minusWeeks((-1));
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    var11.setWeekOfWeekyear(1);
    int var14 = var11.getRoundingMode();
    var11.addMillis(100);
    var11.setSecondOfMinute(10);
    org.joda.time.PeriodType var19 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var20 = new org.joda.time.Period((org.joda.time.ReadableDuration)var10, (org.joda.time.ReadableInstant)var11, var19);
    org.joda.time.Days var21 = var20.toStandardDays();
    org.joda.time.DurationFieldType var22 = var21.getFieldType();
    org.joda.time.DateMidnight var24 = var8.withFieldAdded(var22, 1);
    org.joda.time.MutableInterval var25 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var26 = var25.copy();
    org.joda.time.DateTime var27 = var26.getStart();
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    boolean var32 = var29.isShorterThan((org.joda.time.ReadableDuration)var31);
    org.joda.time.Duration var33 = var29.toDuration();
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var35 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var34);
    org.joda.time.LocalDate var36 = var35.toLocalDate();
    org.joda.time.MutableDateTime var37 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var38 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var35, (org.joda.time.ReadableInstant)var37);
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var40 = var39.year();
    boolean var41 = var37.isBefore((org.joda.time.ReadableInstant)var39);
    org.joda.time.Duration var43 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var45 = org.joda.time.Duration.standardHours((-1L));
    boolean var46 = var43.isShorterThan((org.joda.time.ReadableDuration)var45);
    org.joda.time.Duration var48 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var50 = org.joda.time.Duration.standardHours((-1L));
    boolean var51 = var48.isShorterThan((org.joda.time.ReadableDuration)var50);
    org.joda.time.Duration var52 = var43.plus((org.joda.time.ReadableDuration)var48);
    var39.add((org.joda.time.ReadableDuration)var48);
    org.joda.time.PeriodType var54 = org.joda.time.PeriodType.months();
    org.joda.time.Period var55 = new org.joda.time.Period((org.joda.time.ReadableDuration)var29, (org.joda.time.ReadableInstant)var39, var54);
    org.joda.time.MutablePeriod var56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var8, (org.joda.time.ReadableInstant)var27, var54);
    org.joda.time.DateMidnight var58 = var8.withYear(33);
    org.joda.time.MutablePeriod var59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var8);
    int var62 = var0.parseInto((org.joda.time.ReadWritableInstant)var1, "T\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD.000", 21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setDate(20, 331, 12217692);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-22));

  }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test294"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    boolean var40 = var38.isLeap(4133240044002L);
    org.joda.time.DurationField var41 = var38.getLeapDurationField();
    java.lang.String var43 = var38.getAsText(208L);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.LocalDate var48 = var46.withMonthOfYear(1);
    org.joda.time.LocalDate var50 = var46.withWeekyear(1);
    org.joda.time.LocalDate var52 = var46.withDayOfYear(1);
    org.joda.time.LocalDate var54 = var52.minusMonths(16);
    int var55 = var38.getMaximumValue((org.joda.time.ReadablePartial)var52);
    org.joda.time.field.FieldUtils.verifyValueBounds((org.joda.time.DateTimeField)var38, 682, 13, 12196171);
    int var60 = var38.getOffset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "1092"+ "'", var43.equals("1092"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 948);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 884);

  }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test295"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    long var40 = var38.roundCeiling(3L);
    long var42 = var38.roundHalfEven((-208L));
    org.joda.time.DurationField var43 = var38.getLeapDurationField();
    org.joda.time.DurationField var44 = var38.getLeapDurationField();
    boolean var46 = var38.isLeap(1377746617466L);
    int var47 = var38.getMinimumValue();
    long var50 = var38.getDifferenceAsLong(80003L, 1377746617222L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-208L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 884);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1377746537219L));

  }

  public void test296() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test296"); }


    org.joda.time.Partial var0 = new org.joda.time.Partial();
    java.lang.String var1 = var0.toString();
    org.joda.time.Duration var3 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    var4.setWeekOfWeekyear(1);
    int var7 = var4.getRoundingMode();
    var4.addMillis(100);
    var4.setSecondOfMinute(10);
    org.joda.time.PeriodType var12 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var13 = new org.joda.time.Period((org.joda.time.ReadableDuration)var3, (org.joda.time.ReadableInstant)var4, var12);
    org.joda.time.Days var14 = var13.toStandardDays();
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.Period var21 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var23 = var21.plusSeconds(100);
    org.joda.time.Period var25 = var21.minusMillis(10);
    boolean var26 = var16.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var27 = var16.dayOfYear();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.LocalDate var30 = var29.toLocalDate();
    org.joda.time.LocalDate var32 = var30.minusMonths(0);
    org.joda.time.DateTime var33 = var30.toDateTimeAtMidnight();
    org.joda.time.DateTime var35 = var33.withCenturyOfEra(4);
    org.joda.time.Days var36 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var16, (org.joda.time.ReadableInstant)var35);
    org.joda.time.Days var38 = var36.dividedBy(1);
    boolean var39 = var14.isGreaterThan(var36);
    org.joda.time.DurationFieldType var40 = var14.getFieldType();
    org.joda.time.Seconds var41 = var14.toStandardSeconds();
    org.joda.time.Partial var42 = var0.minus((org.joda.time.ReadablePeriod)var41);
    org.joda.time.TimeOfDay var43 = new org.joda.time.TimeOfDay();
    int var44 = var43.size();
    org.joda.time.TimeOfDay var46 = var43.withMillisOfSecond(1);
    org.joda.time.Years var48 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var49 = var48.getPeriodType();
    org.joda.time.Years var51 = org.joda.time.Years.years((-1));
    int var52 = var48.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var51);
    org.joda.time.Years var54 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var55 = var54.getPeriodType();
    org.joda.time.Years var56 = var51.minus(var54);
    org.joda.time.TimeOfDay var57 = var46.minus((org.joda.time.ReadablePeriod)var51);
    boolean var58 = var0.isMatch((org.joda.time.ReadablePartial)var46);
    org.joda.time.Period var63 = new org.joda.time.Period(1, 10, 10, 1);
    int var64 = var63.getWeeks();
    org.joda.time.Period var65 = var63.toPeriod();
    int var66 = var65.getMonths();
    org.joda.time.Partial var67 = var0.plus((org.joda.time.ReadablePeriod)var65);
    org.joda.time.DateTimeFieldType[] var68 = var67.getFieldTypes();
    org.joda.time.LocalDateTime var70 = org.joda.time.LocalDateTime.now();
    int var71 = var70.getDayOfYear();
    org.joda.time.Chronology var72 = var70.getChronology();
    org.joda.time.YearMonthDay var73 = new org.joda.time.YearMonthDay(1325559981L, var72);
    org.joda.time.DateTimeFieldType[] var74 = var73.getFieldTypes();
    boolean var75 = var67.isMatch((org.joda.time.ReadablePartial)var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);

  }

  public void test297() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test297"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    boolean var51 = var47.isBefore((org.joda.time.ReadableInstant)var49);
    org.joda.time.Interval var52 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var49);
    boolean var54 = var52.isAfter(10L);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    var55.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var55.setChronology((org.joda.time.Chronology)var58);
    org.joda.time.Interval var60 = var52.withChronology((org.joda.time.Chronology)var58);
    var11.setPeriod((org.joda.time.ReadableInterval)var52);
    var11.addMillis((-1));
    int var64 = var11.getWeeks();
    var11.setPeriod(1377746681334L);
    var11.setMonths(759);
    var11.setPeriod((-1), 4, 3, 22, 759, 2013, 13, 3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var79 = var11.getValue((-3827));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);

  }

  public void test298() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test298"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var29 = var28.toInterval();
    org.joda.time.Partial var30 = new org.joda.time.Partial();
    java.lang.String var31 = var30.toString();
    org.joda.time.PeriodType var32 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var33 = new org.joda.time.MutablePeriod(var32);
    org.joda.time.DurationFieldType[] var34 = var33.getFieldTypes();
    org.joda.time.Partial var35 = var30.plus((org.joda.time.ReadablePeriod)var33);
    org.joda.time.Interval var36 = var29.withPeriodAfterStart((org.joda.time.ReadablePeriod)var33);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Interval var38 = var29.withStartMillis(2755493214888L);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "[]"+ "'", var31.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test299"); }


    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearMonthDay();
    org.joda.time.MutablePeriod var2 = new org.joda.time.MutablePeriod(1377746601520L, var1);
    org.joda.time.PeriodType var3 = var1.withDaysRemoved();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test300"); }


    org.joda.time.Partial var0 = new org.joda.time.Partial();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var5 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var4);
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var9);
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var12 = var11.year();
    boolean var13 = var9.isBefore((org.joda.time.ReadableInstant)var11);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    boolean var18 = var15.isShorterThan((org.joda.time.ReadableDuration)var17);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    org.joda.time.Duration var24 = var15.plus((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadableDuration)var20);
    org.joda.time.Seconds var26 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var11);
    org.joda.time.Weeks var27 = var26.toStandardWeeks();
    org.joda.time.Partial var28 = var0.minus((org.joda.time.ReadablePeriod)var27);
    org.joda.time.chrono.EthiopicChronology var30 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var31 = var30.hours();
    org.joda.time.DateTimeField var32 = var30.minuteOfHour();
    org.joda.time.LocalDate var33 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var30);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var35 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var34);
    org.joda.time.LocalDate var36 = var35.toLocalDate();
    org.joda.time.MutableDateTime var37 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var38 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var35, (org.joda.time.ReadableInstant)var37);
    org.joda.time.chrono.JulianChronology var39 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var40 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var39);
    org.joda.time.LocalDate var41 = var40.toLocalDate();
    org.joda.time.MutableDateTime var42 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var43 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var40, (org.joda.time.ReadableInstant)var42);
    org.joda.time.MutableDateTime var44 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var45 = var44.year();
    boolean var46 = var42.isBefore((org.joda.time.ReadableInstant)var44);
    org.joda.time.Duration var48 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var50 = org.joda.time.Duration.standardHours((-1L));
    boolean var51 = var48.isShorterThan((org.joda.time.ReadableDuration)var50);
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var55 = org.joda.time.Duration.standardHours((-1L));
    boolean var56 = var53.isShorterThan((org.joda.time.ReadableDuration)var55);
    org.joda.time.Duration var57 = var48.plus((org.joda.time.ReadableDuration)var53);
    var44.add((org.joda.time.ReadableDuration)var53);
    org.joda.time.Seconds var59 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var35, (org.joda.time.ReadableInstant)var44);
    org.joda.time.Seconds var61 = var59.plus(2005);
    org.joda.time.LocalDate var63 = var33.withPeriodAdded((org.joda.time.ReadablePeriod)var59, 104);
    org.joda.time.chrono.EthiopicChronology var65 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var66 = var65.hours();
    org.joda.time.LocalTime var67 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var65);
    org.joda.time.LocalTime var69 = var67.withMillisOfSecond(1);
    org.joda.time.LocalTime var70 = org.joda.time.LocalTime.now();
    boolean var71 = var69.isAfter((org.joda.time.ReadablePartial)var70);
    org.joda.time.LocalTime var73 = var69.withHourOfDay(4);
    org.joda.time.LocalTime var75 = var69.minusMinutes(33);
    org.joda.time.chrono.EthiopicChronology var76 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    org.joda.time.DateTimeZone var78 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.YearMonth var79 = new org.joda.time.YearMonth(var78);
    org.joda.time.Chronology var80 = var76.withZone(var78);
    org.joda.time.DateTime var81 = var33.toDateTime(var75, var78);
    boolean var82 = var28.isMatch((org.joda.time.ReadablePartial)var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);

  }

  public void test301() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test301"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DurationField var3 = var0.hours();
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var8 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var7);
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.LocalDate var11 = var10.toLocalDate();
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var13 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var12);
    org.joda.time.MutableDateTime var14 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var15 = var14.year();
    boolean var16 = var12.isBefore((org.joda.time.ReadableInstant)var14);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    boolean var26 = var23.isShorterThan((org.joda.time.ReadableDuration)var25);
    org.joda.time.Duration var27 = var18.plus((org.joda.time.ReadableDuration)var23);
    var14.add((org.joda.time.ReadableDuration)var23);
    org.joda.time.Seconds var29 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var14);
    var14.setWeekOfWeekyear(28);
    org.joda.time.DateTime var32 = org.joda.time.DateTime.now();
    long var33 = var32.getMillis();
    var14.setMillis((org.joda.time.ReadableInstant)var32);
    org.joda.time.DateTimeZone var35 = var14.getZone();
    org.joda.time.Chronology var36 = var0.withZone(var35);
    org.joda.time.LocalDateTime var37 = org.joda.time.LocalDateTime.now();
    int var38 = var37.getDayOfYear();
    org.joda.time.LocalDateTime var40 = var37.minusSeconds(2005);
    org.joda.time.Chronology var41 = var37.getChronology();
    org.joda.time.DateTimeZone var43 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var44 = org.joda.time.MutableDateTime.now(var43);
    org.joda.time.DateTime var45 = var37.toDateTime(var43);
    int var46 = var37.getSecondOfMinute();
    org.joda.time.LocalDateTime var48 = var37.minusHours(240);
    long var50 = var0.set((org.joda.time.ReadablePartial)var37, 3560L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1377739436170L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1378862636271L);

  }

  public void test302() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test302"); }


    org.joda.time.LocalDateTime var8 = org.joda.time.LocalDateTime.now();
    int var9 = var8.getDayOfYear();
    org.joda.time.Chronology var10 = var8.getChronology();
    int var11 = var8.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var13 = var8.withDayOfWeek(2);
    org.joda.time.LocalDateTime.Property var14 = var13.yearOfCentury();
    org.joda.time.LocalDateTime var15 = org.joda.time.LocalDateTime.now();
    int var16 = var15.getDayOfYear();
    org.joda.time.Chronology var17 = var15.getChronology();
    int var18 = var15.getYearOfCentury();
    int var19 = var15.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var21 = var15.minusMinutes(1);
    org.joda.time.Years var22 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var13, (org.joda.time.ReadablePartial)var15);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    org.joda.time.Period var30 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var32 = var30.plusSeconds(100);
    org.joda.time.Period var34 = var30.minusMillis(10);
    org.joda.time.LocalDateTime var35 = var23.plus((org.joda.time.ReadablePeriod)var34);
    org.joda.time.Instant var37 = new org.joda.time.Instant(2762381894421796L);
    long var38 = var37.getMillis();
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var42 = org.joda.time.Duration.standardHours((-1L));
    boolean var43 = var40.isShorterThan((org.joda.time.ReadableDuration)var42);
    org.joda.time.Duration var44 = var40.toDuration();
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    boolean var47 = var44.isShorterThan((org.joda.time.ReadableDuration)var46);
    org.joda.time.Years var49 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var50 = var49.getPeriodType();
    org.joda.time.Period var51 = new org.joda.time.Period((org.joda.time.ReadableInstant)var37, (org.joda.time.ReadableDuration)var44, var50);
    org.joda.time.Period var52 = new org.joda.time.Period((org.joda.time.ReadablePartial)var13, (org.joda.time.ReadablePartial)var23, var50);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Period var53 = new org.joda.time.Period(12200, 19, 20, 765, 5034, 14400001, 35, 62, var50);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2762381894421796L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test303() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test303"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    long var26 = var18.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var27 = var18.getRangeDurationField();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.DateMidnight var31 = var29.plusDays(2013);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.DateMidnight var36 = var33.minusWeeks((-1));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.DurationFieldType var50 = var49.getFieldType();
    org.joda.time.DateMidnight var52 = var36.withFieldAdded(var50, 1);
    org.joda.time.field.PreciseDurationField var54 = new org.joda.time.field.PreciseDurationField(var50, 1L);
    org.joda.time.DateMidnight var56 = var31.withFieldAdded(var50, 228);
    org.joda.time.field.DecoratedDurationField var57 = new org.joda.time.field.DecoratedDurationField(var27, var50);
    long var60 = var57.add(1377768182707L, 100L);
    boolean var61 = var57.isPrecise();
    java.lang.String var62 = var57.getName();
    long var65 = var57.getValueAsLong(1980000000L, 1378524281334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1386408182707L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "days"+ "'", var62.equals("days"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 22L);

  }

  public void test304() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test304"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.minusMonths(0);
    org.joda.time.DateTime var18 = var15.toDateTimeAtMidnight();
    org.joda.time.DateTime var20 = var18.withCenturyOfEra(4);
    org.joda.time.Days var21 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var20);
    int var22 = var21.size();
    org.joda.time.Days var24 = var21.plus(85516010);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test305"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    long var26 = var18.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var27 = var18.getRangeDurationField();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.DateMidnight var31 = var29.plusDays(2013);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.DateMidnight var36 = var33.minusWeeks((-1));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.DurationFieldType var50 = var49.getFieldType();
    org.joda.time.DateMidnight var52 = var36.withFieldAdded(var50, 1);
    org.joda.time.field.PreciseDurationField var54 = new org.joda.time.field.PreciseDurationField(var50, 1L);
    org.joda.time.DateMidnight var56 = var31.withFieldAdded(var50, 228);
    org.joda.time.field.DecoratedDurationField var57 = new org.joda.time.field.DecoratedDurationField(var27, var50);
    long var60 = var57.add(1377768182707L, 100L);
    boolean var61 = var57.isPrecise();
    org.joda.time.DurationField var62 = var57.getWrappedField();
    long var65 = var57.getValueAsLong((-1100L), 1377742991900L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var68 = var57.subtract(1378944000000L, 4959876115131798784L);
      fail("Expected exception of type java.lang.ArithmeticException");
    } catch (java.lang.ArithmeticException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1386408182707L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0L);

  }

  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test306"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var7 = var5.minusHours((-1));
    org.joda.time.LocalTime var9 = var5.plusMillis(4);
    org.joda.time.TimeOfDay var10 = new org.joda.time.TimeOfDay();
    int var11 = var10.size();
    org.joda.time.chrono.EthiopicChronology var13 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var14 = var13.hours();
    org.joda.time.LocalTime var15 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var13);
    org.joda.time.LocalTime var17 = var15.withMillisOfSecond(1);
    org.joda.time.LocalTime var19 = var17.minusHours((-1));
    org.joda.time.Years var20 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var10, (org.joda.time.ReadablePartial)var19);
    org.joda.time.chrono.EthiopicChronology var21 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var22 = var21.dayOfYear();
    org.joda.time.YearMonthDay var23 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var21);
    org.joda.time.TimeOfDay var24 = var10.withChronologyRetainFields((org.joda.time.Chronology)var21);
    org.joda.time.TimeOfDay var26 = var24.plusMillis(2005);
    java.lang.String var27 = var24.toString();
    org.joda.time.TimeOfDay var29 = var24.plusSeconds(4);
    boolean var30 = var9.isBefore((org.joda.time.ReadablePartial)var24);
    org.joda.time.TimeOfDay var32 = var24.minusMillis(884);
    org.joda.time.TimeOfDay var34 = var24.withHourOfDay(8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "T01:23:56.333"+ "'", var27.equals("T01:23:56.333"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test307"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.Period var6 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var8 = var6.plusSeconds(100);
    org.joda.time.Period var10 = var6.minusMillis(10);
    boolean var11 = var1.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var12 = var1.dayOfYear();
    int var13 = var1.getSecondOfDay();
    org.joda.time.DateMidnight var15 = var1.withWeekyear(240);
    org.joda.time.DateMidnight var17 = var15.minusMonths(28);
    org.joda.time.PeriodType var18 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var19 = new org.joda.time.MutablePeriod(var18);
    var19.addDays(1);
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    boolean var26 = var23.isShorterThan((org.joda.time.ReadableDuration)var25);
    var19.add((org.joda.time.ReadableDuration)var25);
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var25, (org.joda.time.ReadableInstant)var28);
    var29.clear();
    org.joda.time.DateMidnight var31 = var17.minus((org.joda.time.ReadablePeriod)var29);
    org.joda.time.TimeOfDay var32 = new org.joda.time.TimeOfDay();
    int var33 = var32.size();
    org.joda.time.chrono.EthiopicChronology var35 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var36 = var35.hours();
    org.joda.time.LocalTime var37 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var35);
    org.joda.time.LocalTime var39 = var37.withMillisOfSecond(1);
    org.joda.time.LocalTime var41 = var39.minusHours((-1));
    org.joda.time.Years var42 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var32, (org.joda.time.ReadablePartial)var41);
    org.joda.time.Years var44 = var42.minus(16);
    org.joda.time.DateMidnight var45 = var31.plus((org.joda.time.ReadablePeriod)var44);
    org.joda.time.DateMidnight.Property var46 = var31.yearOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test308"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.Hours var44 = var38.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var45 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var14.setPeriod((org.joda.time.ReadableDuration)var38, (org.joda.time.Chronology)var45);
    var14.clear();
    org.joda.time.MutableDateTime var48 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var49 = var48.year();
    org.joda.time.MutableDateTime.Property var50 = var48.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var51 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var52 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var51);
    org.joda.time.Period var57 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var59 = var57.plusSeconds(100);
    org.joda.time.Period var61 = var57.minusMillis(10);
    boolean var62 = var52.equals((java.lang.Object)10);
    org.joda.time.Weeks var63 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var48, (org.joda.time.ReadableInstant)var52);
    org.joda.time.Duration var64 = var14.toDurationFrom((org.joda.time.ReadableInstant)var52);
    org.joda.time.chrono.JulianChronology var67 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var68 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var67);
    var14.add(1L, (org.joda.time.Chronology)var67);
    org.joda.time.DurationField var70 = var67.millis();
    org.joda.time.DateTimeField var71 = var67.halfdayOfDay();
    long var75 = var67.add(4959874731599000L, (-60779281008478L), 853);
    org.joda.time.DateTimeZone var78 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var79 = org.joda.time.DateTimeUtils.getZone(var78);
    org.joda.time.LocalDateTime var80 = new org.joda.time.LocalDateTime(var78);
    org.joda.time.LocalDateTime var81 = new org.joda.time.LocalDateTime(1377742981000L, var78);
    org.joda.time.Chronology var82 = var67.withZone(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == (-46884851968632734L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test309() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test309"); }


    org.joda.time.LocalTime var0 = new org.joda.time.LocalTime();
    org.joda.time.LocalTime var2 = var0.plusSeconds(100);
    int[] var3 = var0.getValues();
    org.joda.time.LocalTime var5 = var0.minusHours(1883);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test310() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test310"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.Period var7 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var9 = var7.plusSeconds(100);
    org.joda.time.Period var11 = var7.minusMillis(10);
    org.joda.time.LocalDateTime var12 = var0.plus((org.joda.time.ReadablePeriod)var11);
    int var13 = var0.getYearOfEra();
    int var14 = var0.getYearOfCentury();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2013);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 13);

  }

  public void test311() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test311"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    var0.setStartMillis((-1L));
    org.joda.time.Chronology var3 = var0.getChronology();
    var0.setEndMillis(99L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test312() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test312"); }


    org.joda.time.format.PeriodFormatter var0 = org.joda.time.format.PeriodFormat.getDefault();
    org.joda.time.format.PeriodPrinter var1 = var0.getPrinter();
    boolean var2 = var0.isParser();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test313() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test313"); }


    org.joda.time.DateMidnight var1 = new org.joda.time.DateMidnight(104L);
    org.joda.time.Duration var3 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var4 = new org.joda.time.MutableDateTime();
    var4.setWeekOfWeekyear(1);
    int var7 = var4.getRoundingMode();
    var4.addMillis(100);
    var4.setSecondOfMinute(10);
    org.joda.time.PeriodType var12 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var13 = new org.joda.time.Period((org.joda.time.ReadableDuration)var3, (org.joda.time.ReadableInstant)var4, var12);
    org.joda.time.Days var14 = var13.toStandardDays();
    org.joda.time.Hours var15 = var14.toStandardHours();
    org.joda.time.Weeks var16 = var15.toStandardWeeks();
    org.joda.time.DateMidnight var17 = var1.minus((org.joda.time.ReadablePeriod)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test314() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test314"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.format.DateTimeFormatter var1 = org.joda.time.format.DateTimeFormat.forPattern("2013-08-29T02:23:15.601+00:00:00.759");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test315() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test315"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    int var3 = var2.getDayOfMonth();
    int var4 = var2.getDayOfMonth();
    org.joda.time.Instant var6 = new org.joda.time.Instant(2762381894421796L);
    long var7 = var6.getMillis();
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var13 = var9.toDuration();
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    boolean var16 = var13.isShorterThan((org.joda.time.ReadableDuration)var15);
    org.joda.time.Years var18 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var19 = var18.getPeriodType();
    org.joda.time.Period var20 = new org.joda.time.Period((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableDuration)var13, var19);
    org.joda.time.YearMonthDay var21 = var2.minus((org.joda.time.ReadablePeriod)var20);
    org.joda.time.YearMonthDay.Property var22 = var21.year();
    org.joda.time.chrono.JulianChronology var23 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var24 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var23);
    org.joda.time.LocalDate var25 = var24.toLocalDate();
    org.joda.time.MutableDateTime var26 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var27 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var24, (org.joda.time.ReadableInstant)var26);
    org.joda.time.Years var29 = var27.multipliedBy(69781948);
    boolean var30 = var21.equals((java.lang.Object)69781948);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2762381894421796L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test316() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test316"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var3 = new org.joda.time.MutablePeriod(var2);
    var3.addDays(1);
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    boolean var10 = var7.isShorterThan((org.joda.time.ReadableDuration)var9);
    var3.add((org.joda.time.ReadableDuration)var9);
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var9, (org.joda.time.ReadableInstant)var12);
    var13.clear();
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod(var15);
    var16.addDays(1);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    var16.add((org.joda.time.ReadableDuration)var22);
    var13.add((org.joda.time.ReadablePeriod)var16);
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.LocalDate var28 = var27.toLocalDate();
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var30 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var27, (org.joda.time.ReadableInstant)var29);
    org.joda.time.MutableDateTime var31 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var32 = var31.year();
    boolean var33 = var29.isBefore((org.joda.time.ReadableInstant)var31);
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    boolean var38 = var35.isShorterThan((org.joda.time.ReadableDuration)var37);
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var42 = org.joda.time.Duration.standardHours((-1L));
    boolean var43 = var40.isShorterThan((org.joda.time.ReadableDuration)var42);
    org.joda.time.Duration var44 = var35.plus((org.joda.time.ReadableDuration)var40);
    var31.add((org.joda.time.ReadableDuration)var40);
    org.joda.time.Hours var46 = var40.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var47 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var16.setPeriod((org.joda.time.ReadableDuration)var40, (org.joda.time.Chronology)var47);
    var0.add((org.joda.time.ReadableDuration)var40, 241);
    var0.addWeekyears(630);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test317() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test317"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    long var1 = var0.getMillis();
    org.joda.time.DateTime.Property var2 = var0.yearOfEra();
    org.joda.time.DateTime var4 = var0.withMillisOfDay(216);
    org.joda.time.PeriodType var5 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var6 = new org.joda.time.MutablePeriod(var5);
    var6.addDays(1);
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    boolean var13 = var10.isShorterThan((org.joda.time.ReadableDuration)var12);
    var6.add((org.joda.time.ReadableDuration)var12);
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var12, (org.joda.time.ReadableInstant)var15);
    var16.clear();
    org.joda.time.PeriodType var18 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var19 = new org.joda.time.MutablePeriod(var18);
    var19.addDays(1);
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    boolean var26 = var23.isShorterThan((org.joda.time.ReadableDuration)var25);
    var19.add((org.joda.time.ReadableDuration)var25);
    var16.add((org.joda.time.ReadablePeriod)var19);
    org.joda.time.chrono.JulianChronology var29 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var30 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var29);
    org.joda.time.LocalDate var31 = var30.toLocalDate();
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var33 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var30, (org.joda.time.ReadableInstant)var32);
    org.joda.time.MutableDateTime var34 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var35 = var34.year();
    boolean var36 = var32.isBefore((org.joda.time.ReadableInstant)var34);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var43 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var45 = org.joda.time.Duration.standardHours((-1L));
    boolean var46 = var43.isShorterThan((org.joda.time.ReadableDuration)var45);
    org.joda.time.Duration var47 = var38.plus((org.joda.time.ReadableDuration)var43);
    var34.add((org.joda.time.ReadableDuration)var43);
    org.joda.time.Hours var49 = var43.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var19.setPeriod((org.joda.time.ReadableDuration)var43, (org.joda.time.Chronology)var50);
    org.joda.time.DateTime var52 = var4.plus((org.joda.time.ReadableDuration)var43);
    org.joda.time.Chronology var53 = var4.getChronology();
    org.joda.time.DateTime.Property var54 = var4.era();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1377739436411L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test318() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test318"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    int var39 = var38.getOffset();
    long var41 = var38.roundCeiling(104L);
    org.joda.time.DurationField var42 = var38.getDurationField();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 884);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 104L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test319() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test319"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.Period var9 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var11 = var9.plusSeconds(100);
    org.joda.time.Period var13 = var9.minusMillis(10);
    boolean var14 = var4.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var15 = var4.dayOfYear();
    int var16 = var4.getSecondOfDay();
    org.joda.time.DateMidnight var18 = var4.withWeekyear(240);
    org.joda.time.DateMidnight var20 = var18.minusMonths(28);
    org.joda.time.DateTimeZone var21 = var20.getZone();
    org.joda.time.DateMidnight.Property var22 = var20.yearOfCentury();
    org.joda.time.MutablePeriod var23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var20);
    org.joda.time.chrono.GregorianChronology var24 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.chrono.JulianChronology var25 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var26 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var25);
    org.joda.time.LocalDate var27 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var25);
    org.joda.time.DurationField var28 = var25.hours();
    org.joda.time.Chronology var29 = var25.withUTC();
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = var31.toLocalDate();
    org.joda.time.MutableDateTime var33 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var34 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var31, (org.joda.time.ReadableInstant)var33);
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var36 = var35.year();
    boolean var37 = var33.isBefore((org.joda.time.ReadableInstant)var35);
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    boolean var42 = var39.isShorterThan((org.joda.time.ReadableDuration)var41);
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    boolean var47 = var44.isShorterThan((org.joda.time.ReadableDuration)var46);
    org.joda.time.Duration var48 = var39.plus((org.joda.time.ReadableDuration)var44);
    var35.add((org.joda.time.ReadableDuration)var44);
    org.joda.time.chrono.JulianChronology var50 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var51 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var50);
    org.joda.time.LocalDate var52 = var51.toLocalDate();
    org.joda.time.MutableDateTime var53 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var54 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var51, (org.joda.time.ReadableInstant)var53);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var56 = var55.year();
    boolean var57 = var53.isBefore((org.joda.time.ReadableInstant)var55);
    org.joda.time.Interval var58 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var35, (org.joda.time.ReadableInstant)var55);
    org.joda.time.DateTimeZone var59 = var55.getZone();
    org.joda.time.Chronology var60 = var25.withZone(var59);
    org.joda.time.Chronology var61 = var24.withZone(var59);
    org.joda.time.TimeOfDay var62 = new org.joda.time.TimeOfDay(var59);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalTime var63 = new org.joda.time.LocalTime((java.lang.Object)var23, var59);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test320() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test320"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    org.joda.time.DateTimeFieldType var55 = var54.getType();
    org.joda.time.DurationField var56 = var54.getRangeDurationField();
    org.joda.time.DurationField var57 = var54.getDurationField();
    org.joda.time.PeriodType var58 = org.joda.time.PeriodType.months();
    java.lang.String var59 = var58.toString();
    org.joda.time.PeriodType var60 = org.joda.time.PeriodType.months();
    org.joda.time.Duration var62 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    var63.setWeekOfWeekyear(1);
    int var66 = var63.getRoundingMode();
    var63.addMillis(100);
    var63.setSecondOfMinute(10);
    org.joda.time.PeriodType var71 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var72 = new org.joda.time.Period((org.joda.time.ReadableDuration)var62, (org.joda.time.ReadableInstant)var63, var71);
    org.joda.time.Days var73 = var72.toStandardDays();
    org.joda.time.DurationFieldType var74 = var73.getFieldType();
    int var75 = var60.indexOf(var74);
    boolean var76 = var58.isSupported(var74);
    org.joda.time.field.ScaledDurationField var78 = new org.joda.time.field.ScaledDurationField(var57, var74, 845);
    org.joda.time.Partial var79 = new org.joda.time.Partial();
    java.lang.String var80 = var79.toString();
    org.joda.time.PeriodType var81 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var82 = new org.joda.time.MutablePeriod(var81);
    org.joda.time.DurationFieldType[] var83 = var82.getFieldTypes();
    org.joda.time.Partial var84 = var79.plus((org.joda.time.ReadablePeriod)var82);
    var82.add(2762381894421796L);
    org.joda.time.chrono.EthiopicChronology var87 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var88 = var87.minutes();
    org.joda.time.DateTime var89 = new org.joda.time.DateTime((java.lang.Object)2762381894421796L, (org.joda.time.Chronology)var87);
    boolean var90 = var78.equals((java.lang.Object)2762381894421796L);
    int var93 = var78.getValue((-7092000100L), 2755499466141L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "PeriodType[Months]"+ "'", var59.equals("PeriodType[Months]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "[]"+ "'", var80.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == (-2));

  }

  public void test321() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test321"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.standard();
    org.joda.time.PeriodType var1 = org.joda.time.DateTimeUtils.getPeriodType(var0);
    org.joda.time.PeriodType var2 = var0.withWeeksRemoved();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test322() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test322"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.yearMonth();
    org.joda.time.format.DateTimeFormatter var1 = var0.withZoneUTC();
    org.joda.time.format.DateTimeFormatter var3 = var0.withPivotYear(928);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test323() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test323"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusYears((-1));
    org.joda.time.Years var8 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var9 = var8.getPeriodType();
    org.joda.time.Period var10 = var4.normalizedStandard(var9);
    org.joda.time.PeriodType var11 = var9.withMillisRemoved();
    org.joda.time.PeriodType var12 = var9.withYearsRemoved();
    java.lang.String var13 = var12.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "YearsNoYears"+ "'", var13.equals("YearsNoYears"));

  }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test324"); }


    org.joda.time.DateTimeComparator var0 = org.joda.time.DateTimeComparator.getInstance();
    org.joda.time.DateTimeFieldType var1 = var0.getLowerLimit();
    org.joda.time.DateTimeFieldType var2 = var0.getUpperLimit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test325() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test325"); }


    org.joda.time.LocalDateTime var1 = org.joda.time.LocalDateTime.now();
    int var2 = var1.getDayOfYear();
    org.joda.time.LocalDateTime var4 = var1.minusSeconds(2005);
    org.joda.time.LocalDateTime var6 = var4.withMillisOfSecond(16);
    int var7 = var6.getMillisOfSecond();
    org.joda.time.tz.FixedDateTimeZone var12 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var14 = var12.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var16 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var17 = org.joda.time.chrono.JulianChronology.getInstance(var16);
    long var19 = var12.getMillisKeepLocal(var16, 1377746580759L);
    org.joda.time.DateTime var20 = var6.toDateTime((org.joda.time.DateTimeZone)var12);
    org.joda.time.DateMidnight var21 = new org.joda.time.DateMidnight((org.joda.time.DateTimeZone)var12);
    boolean var22 = var12.isFixed();
    org.joda.time.LocalDate var23 = new org.joda.time.LocalDate(1053749174400000L, (org.joda.time.DateTimeZone)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test326() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test326"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableInterval var2 = new org.joda.time.MutableInterval(2755493225160L, 43898399991L);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test327() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test327"); }


    org.joda.time.Months var1 = org.joda.time.Months.months((-1));
    org.joda.time.Months var3 = var1.plus(100);
    org.joda.time.MutableInterval var4 = new org.joda.time.MutableInterval();
    long var5 = var4.getEndMillis();
    org.joda.time.Months var6 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var4);
    boolean var7 = var3.isGreaterThan(var6);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.DateMidnight var12 = var9.minusWeeks((-1));
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Days var25 = var24.toStandardDays();
    org.joda.time.DurationFieldType var26 = var25.getFieldType();
    org.joda.time.DateMidnight var28 = var12.withFieldAdded(var26, 1);
    org.joda.time.chrono.JulianChronology var29 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var30 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var29);
    org.joda.time.LocalDate var31 = var30.toLocalDate();
    org.joda.time.DateMidnight var33 = var30.minusWeeks((-1));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var36 = new org.joda.time.MutableDateTime();
    var36.setWeekOfWeekyear(1);
    int var39 = var36.getRoundingMode();
    var36.addMillis(100);
    var36.setSecondOfMinute(10);
    org.joda.time.PeriodType var44 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var45 = new org.joda.time.Period((org.joda.time.ReadableDuration)var35, (org.joda.time.ReadableInstant)var36, var44);
    org.joda.time.Days var46 = var45.toStandardDays();
    org.joda.time.DurationFieldType var47 = var46.getFieldType();
    org.joda.time.DateMidnight var49 = var33.withFieldAdded(var47, 1);
    org.joda.time.DateMidnight var51 = var12.withFieldAdded(var47, 13);
    org.joda.time.DateMidnight var54 = var12.withDurationAdded(9L, 21);
    org.joda.time.MutableInterval var55 = new org.joda.time.MutableInterval();
    long var56 = var55.getEndMillis();
    org.joda.time.Months var57 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var55);
    org.joda.time.Months var59 = var57.plus(2013);
    org.joda.time.TimeOfDay var60 = new org.joda.time.TimeOfDay();
    int var61 = var60.size();
    org.joda.time.chrono.EthiopicChronology var63 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var64 = var63.hours();
    org.joda.time.LocalTime var65 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var63);
    org.joda.time.LocalTime var67 = var65.withMillisOfSecond(1);
    org.joda.time.LocalTime var69 = var67.minusHours((-1));
    org.joda.time.Years var70 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var60, (org.joda.time.ReadablePartial)var69);
    int var71 = var60.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var72 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var73 = var60.withChronologyRetainFields((org.joda.time.Chronology)var72);
    org.joda.time.Months var75 = org.joda.time.Months.months((-1));
    org.joda.time.Months var77 = var75.plus(100);
    int var78 = var75.size();
    org.joda.time.TimeOfDay var80 = var60.withPeriodAdded((org.joda.time.ReadablePeriod)var75, 2013);
    org.joda.time.Months var81 = var59.plus(var75);
    org.joda.time.DateMidnight var83 = var12.withPeriodAdded((org.joda.time.ReadablePeriod)var59, (-948));
    boolean var84 = var6.isLessThan(var59);
    org.joda.time.Months var86 = var59.multipliedBy(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 620);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test328"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var5 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var7 = var5.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var9 = var5.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var10);
    org.joda.time.DateTimeField var13 = var10.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var14 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.LocalDate var17 = var16.toLocalDate();
    org.joda.time.LocalDate var19 = var17.minusMonths(0);
    int[] var21 = var14.get((org.joda.time.ReadablePartial)var19, 100L);
    org.joda.time.chrono.EthiopicChronology var25 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var26 = var25.hours();
    org.joda.time.LocalTime var27 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var25);
    org.joda.time.Period var28 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var25);
    org.joda.time.DateTimeField var29 = var25.millisOfSecond();
    org.joda.time.DateTimeField var30 = var25.secondOfDay();
    org.joda.time.field.SkipDateTimeField var32 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var14, var30, 100);
    org.joda.time.LocalDateTime var33 = org.joda.time.LocalDateTime.now();
    int var34 = var33.getDayOfYear();
    org.joda.time.Chronology var35 = var33.getChronology();
    int var36 = var33.getYearOfCentury();
    int var37 = var32.getMaximumValue((org.joda.time.ReadablePartial)var33);
    boolean var39 = var32.isLeap(1L);
    org.joda.time.LocalDateTime var40 = org.joda.time.LocalDateTime.now();
    int var41 = var40.getDayOfYear();
    int var42 = var32.getMinimumValue((org.joda.time.ReadablePartial)var40);
    org.joda.time.DurationField var43 = var32.getDurationField();
    org.joda.time.DateTimeFieldType var44 = var32.getType();
    org.joda.time.field.OffsetDateTimeField var48 = new org.joda.time.field.OffsetDateTimeField(var13, var44, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var51 = new org.joda.time.IllegalFieldValueException(var44, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var54 = var5.appendFraction(var44, 33, (-948));
    org.joda.time.format.DateTimeFormatterBuilder var57 = var4.appendFraction(var44, 15795333, 57);
    org.joda.time.format.DateTimeFormatterBuilder var58 = var57.appendMonthOfYearText();
    org.joda.time.format.DateTimeFormatterBuilder var59 = var57.appendDayOfWeekText();
    org.joda.time.format.DateTimeFormatterBuilder var61 = var59.appendWeekOfWeekyear(318);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test329() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test329"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.MutableDateTime.Property var20 = var5.weekyear();
    org.joda.time.MutableDateTime.Property var21 = var5.year();
    boolean var23 = var5.equals((java.lang.Object)(byte)0);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.LocalDate var28 = var26.withMonthOfYear(1);
    org.joda.time.DateMidnight var29 = var26.toDateMidnight();
    var5.setTime((org.joda.time.ReadableInstant)var29);
    org.joda.time.chrono.GJChronology var31 = org.joda.time.chrono.GJChronology.getInstanceUTC();
    org.joda.time.DateTimeZone var32 = var31.getZone();
    int var33 = var31.getMinimumDaysInFirstWeek();
    org.joda.time.DateMidnight var34 = var29.withChronology((org.joda.time.Chronology)var31);
    org.joda.time.LocalDate var35 = var34.toLocalDate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test330() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test330"); }


    org.joda.time.MutableDateTime var1 = new org.joda.time.MutableDateTime();
    var1.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var1.setChronology((org.joda.time.Chronology)var4);
    org.joda.time.DateTimeField var6 = var4.clockhourOfHalfday();
    org.joda.time.YearMonth var7 = new org.joda.time.YearMonth((org.joda.time.Chronology)var4);
    org.joda.time.Period var8 = new org.joda.time.Period(2762381894421796L, (org.joda.time.Chronology)var4);
    org.joda.time.MonthDay var9 = new org.joda.time.MonthDay((org.joda.time.Chronology)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test331() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test331"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.YearMonth var19 = org.joda.time.YearMonth.now((org.joda.time.Chronology)var0);
    org.joda.time.YearMonth.Property var20 = var19.monthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test332() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test332"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var0.setChronology((org.joda.time.Chronology)var3);
    var0.addMillis((-1440));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test333() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test333"); }


    org.joda.time.chrono.GJChronology var7 = org.joda.time.chrono.GJChronology.getInstanceUTC();
    java.lang.String var8 = var7.toString();
    org.joda.time.DurationField var9 = var7.eras();
    org.joda.time.Period var11 = org.joda.time.Period.days(1);
    org.joda.time.Period var13 = var11.minusHours(0);
    boolean var14 = var7.equals((java.lang.Object)var13);
    org.joda.time.chrono.GregorianChronology var15 = org.joda.time.chrono.GregorianChronology.getInstance();
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var16);
    org.joda.time.DurationField var19 = var16.hours();
    org.joda.time.Chronology var20 = var16.withUTC();
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var25 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var22, (org.joda.time.ReadableInstant)var24);
    org.joda.time.MutableDateTime var26 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var27 = var26.year();
    boolean var28 = var24.isBefore((org.joda.time.ReadableInstant)var26);
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    boolean var33 = var30.isShorterThan((org.joda.time.ReadableDuration)var32);
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    boolean var38 = var35.isShorterThan((org.joda.time.ReadableDuration)var37);
    org.joda.time.Duration var39 = var30.plus((org.joda.time.ReadableDuration)var35);
    var26.add((org.joda.time.ReadableDuration)var35);
    org.joda.time.chrono.JulianChronology var41 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var42 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var41);
    org.joda.time.LocalDate var43 = var42.toLocalDate();
    org.joda.time.MutableDateTime var44 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var45 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var42, (org.joda.time.ReadableInstant)var44);
    org.joda.time.MutableDateTime var46 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var47 = var46.year();
    boolean var48 = var44.isBefore((org.joda.time.ReadableInstant)var46);
    org.joda.time.Interval var49 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var26, (org.joda.time.ReadableInstant)var46);
    org.joda.time.DateTimeZone var50 = var46.getZone();
    org.joda.time.Chronology var51 = var16.withZone(var50);
    org.joda.time.Chronology var52 = var15.withZone(var50);
    org.joda.time.TimeOfDay var53 = new org.joda.time.TimeOfDay(var50);
    org.joda.time.Chronology var54 = var7.withZone(var50);
    org.joda.time.DateTime var55 = org.joda.time.DateTime.now(var54);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var56 = new org.joda.time.LocalDateTime(85516010, 659, 216, (-1), 216, 16, 2063, var54);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "GJChronology[UTC]"+ "'", var8.equals("GJChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test334() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test334"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Hours var1 = org.joda.time.Hours.parseHours("PT-7200S");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test335"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    int var8 = var5.getWeekyear();
    org.joda.time.LocalDateTime var9 = var5.toLocalDateTime();
    org.joda.time.MutableInterval var10 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var11 = var10.copy();
    org.joda.time.DateTime var12 = var11.getStart();
    java.util.Date var13 = var12.toDate();
    int var14 = var12.getWeekyear();
    org.joda.time.format.DateTimeFormatterBuilder var15 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var17 = var15.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var19 = var15.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var23 = var20.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var24 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var25 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var26 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var25);
    org.joda.time.LocalDate var27 = var26.toLocalDate();
    org.joda.time.LocalDate var29 = var27.minusMonths(0);
    int[] var31 = var24.get((org.joda.time.ReadablePartial)var29, 100L);
    org.joda.time.chrono.EthiopicChronology var35 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var36 = var35.hours();
    org.joda.time.LocalTime var37 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var35);
    org.joda.time.Period var38 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var35);
    org.joda.time.DateTimeField var39 = var35.millisOfSecond();
    org.joda.time.DateTimeField var40 = var35.secondOfDay();
    org.joda.time.field.SkipDateTimeField var42 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var24, var40, 100);
    org.joda.time.LocalDateTime var43 = org.joda.time.LocalDateTime.now();
    int var44 = var43.getDayOfYear();
    org.joda.time.Chronology var45 = var43.getChronology();
    int var46 = var43.getYearOfCentury();
    int var47 = var42.getMaximumValue((org.joda.time.ReadablePartial)var43);
    boolean var49 = var42.isLeap(1L);
    org.joda.time.LocalDateTime var50 = org.joda.time.LocalDateTime.now();
    int var51 = var50.getDayOfYear();
    int var52 = var42.getMinimumValue((org.joda.time.ReadablePartial)var50);
    org.joda.time.DurationField var53 = var42.getDurationField();
    org.joda.time.DateTimeFieldType var54 = var42.getType();
    org.joda.time.field.OffsetDateTimeField var58 = new org.joda.time.field.OffsetDateTimeField(var23, var54, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var61 = new org.joda.time.IllegalFieldValueException(var54, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var64 = var15.appendFraction(var54, 33, (-948));
    org.joda.time.DateTime.Property var65 = var12.property(var54);
    org.joda.time.LocalDateTime var67 = var9.withField(var54, 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2013);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1970);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test336() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test336"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.DateMidnight var12 = var9.minusWeeks((-1));
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Days var25 = var24.toStandardDays();
    org.joda.time.DurationFieldType var26 = var25.getFieldType();
    org.joda.time.DateMidnight var28 = var12.withFieldAdded(var26, 1);
    org.joda.time.DateMidnight.Property var29 = var12.monthOfYear();
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    var32.setWeekOfWeekyear(1);
    int var35 = var32.getRoundingMode();
    var32.addMillis(100);
    var32.setSecondOfMinute(10);
    org.joda.time.PeriodType var40 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var41 = new org.joda.time.Period((org.joda.time.ReadableDuration)var31, (org.joda.time.ReadableInstant)var32, var40);
    org.joda.time.PeriodType var42 = var40.withWeeksRemoved();
    org.joda.time.Period var43 = new org.joda.time.Period((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var12, var40);
    org.joda.time.Instant var44 = new org.joda.time.Instant();
    org.joda.time.Instant var45 = var44.toInstant();
    org.joda.time.PeriodType var46 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var47 = new org.joda.time.MutablePeriod(var46);
    var47.addDays(1);
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    boolean var54 = var51.isShorterThan((org.joda.time.ReadableDuration)var53);
    var47.add((org.joda.time.ReadableDuration)var53);
    org.joda.time.Duration var57 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var59 = org.joda.time.Duration.standardHours((-1L));
    boolean var60 = var57.isShorterThan((org.joda.time.ReadableDuration)var59);
    org.joda.time.Duration var61 = var57.toDuration();
    org.joda.time.chrono.JulianChronology var62 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var63 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var62);
    org.joda.time.LocalDate var64 = var63.toLocalDate();
    org.joda.time.MutableDateTime var65 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var66 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var63, (org.joda.time.ReadableInstant)var65);
    org.joda.time.MutableDateTime var67 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var68 = var67.year();
    boolean var69 = var65.isBefore((org.joda.time.ReadableInstant)var67);
    org.joda.time.Duration var71 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var73 = org.joda.time.Duration.standardHours((-1L));
    boolean var74 = var71.isShorterThan((org.joda.time.ReadableDuration)var73);
    org.joda.time.Duration var76 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var78 = org.joda.time.Duration.standardHours((-1L));
    boolean var79 = var76.isShorterThan((org.joda.time.ReadableDuration)var78);
    org.joda.time.Duration var80 = var71.plus((org.joda.time.ReadableDuration)var76);
    var67.add((org.joda.time.ReadableDuration)var76);
    org.joda.time.PeriodType var82 = org.joda.time.PeriodType.months();
    org.joda.time.Period var83 = new org.joda.time.Period((org.joda.time.ReadableDuration)var57, (org.joda.time.ReadableInstant)var67, var82);
    org.joda.time.Period var84 = new org.joda.time.Period((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableDuration)var53, var82);
    org.joda.time.DateTime var85 = var7.plus((org.joda.time.ReadableDuration)var53);
    org.joda.time.DateTime var87 = var85.minusYears(37);
    int var88 = var87.getYearOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 1932);

  }

  public void test337() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test337"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    int var24 = var19.getSecondOfMinute();
    int var25 = var19.getDayOfYear();
    org.joda.time.LocalDateTime var27 = var19.withMillisOfSecond(692);
    org.joda.time.LocalDateTime var29 = var19.withMillisOfSecond(269);
    int var30 = var19.getDayOfWeek();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 4);

  }

  public void test338() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test338"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardMinutes((-62156990340999L));
    long var2 = var1.getStandardSeconds();
    org.joda.time.MutableInterval var3 = new org.joda.time.MutableInterval();
    var3.setDurationBeforeEnd(1L);
    org.joda.time.Duration var7 = org.joda.time.Duration.millis(957L);
    var3.setDurationBeforeEnd((org.joda.time.ReadableDuration)var7);
    boolean var9 = var1.isEqual((org.joda.time.ReadableDuration)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-3729419420459940L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test339() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test339"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.MutableDateTime.Property var2 = var0.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.Period var9 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var11 = var9.plusSeconds(100);
    org.joda.time.Period var13 = var9.minusMillis(10);
    boolean var14 = var4.equals((java.lang.Object)10);
    org.joda.time.Weeks var15 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var4);
    org.joda.time.Chronology var16 = org.joda.time.DateTimeUtils.getInstantChronology((org.joda.time.ReadableInstant)var0);
    org.joda.time.DateTime var17 = org.joda.time.DateTime.now(var16);
    org.joda.time.DateTimeZone var19 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var20 = org.joda.time.DateTimeUtils.getZone(var19);
    org.joda.time.DateTime var21 = var17.toDateTime(var19);
    org.joda.time.DateTime var23 = var21.plusMinutes(985);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.DateMidnight var28 = var25.minusWeeks((-1));
    org.joda.time.DateMidnight.Property var29 = var25.dayOfYear();
    org.joda.time.Period var30 = new org.joda.time.Period();
    org.joda.time.DateMidnight var31 = var25.minus((org.joda.time.ReadablePeriod)var30);
    org.joda.time.Period var32 = new org.joda.time.Period((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableInstant)var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test340() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test340"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    boolean var39 = var38.isSupported();
    int var40 = var38.getMaximumValue();
    org.joda.time.LocalDateTime var41 = org.joda.time.LocalDateTime.now();
    int var42 = var41.getDayOfYear();
    org.joda.time.Chronology var43 = var41.getChronology();
    org.joda.time.Period var48 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var50 = var48.plusSeconds(100);
    org.joda.time.Period var52 = var48.minusMillis(10);
    org.joda.time.LocalDateTime var53 = var41.plus((org.joda.time.ReadablePeriod)var52);
    int var54 = var38.getMinimumValue((org.joda.time.ReadablePartial)var41);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var59 = var41.withTime(1962, 12200, 5035, 571);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 948);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 884);

  }

  public void test341() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test341"); }


    org.joda.time.LocalDateTime var2 = org.joda.time.LocalDateTime.now();
    int var3 = var2.getDayOfYear();
    org.joda.time.Chronology var4 = var2.getChronology();
    org.joda.time.chrono.StrictChronology var5 = org.joda.time.chrono.StrictChronology.getInstance(var4);
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.LocalDate var10 = var8.withMonthOfYear(1);
    org.joda.time.LocalDate var12 = var8.withWeekyear(1);
    org.joda.time.LocalDate var14 = var8.withDayOfYear(1);
    org.joda.time.LocalDate var16 = var14.minusMonths(16);
    boolean var17 = var5.equals((java.lang.Object)16);
    org.joda.time.YearMonth var18 = new org.joda.time.YearMonth(0L, (org.joda.time.Chronology)var5);
    org.joda.time.DateTime var19 = new org.joda.time.DateTime(1377742981948L, (org.joda.time.Chronology)var5);
    org.joda.time.Chronology var20 = var5.withUTC();
    org.joda.time.format.DateTimeFormatter var21 = org.joda.time.format.DateTimeFormat.mediumDateTime();
    org.joda.time.chrono.EthiopicChronology var22 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var23 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var24 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var23);
    org.joda.time.LocalDate var25 = var24.toLocalDate();
    org.joda.time.LocalDate var27 = var25.minusMonths(0);
    int[] var29 = var22.get((org.joda.time.ReadablePartial)var27, 100L);
    org.joda.time.chrono.EthiopicChronology var33 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var34 = var33.hours();
    org.joda.time.LocalTime var35 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var33);
    org.joda.time.Period var36 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var33);
    org.joda.time.DateTimeField var37 = var33.millisOfSecond();
    org.joda.time.DateTimeField var38 = var33.secondOfDay();
    org.joda.time.field.SkipDateTimeField var40 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var22, var38, 100);
    org.joda.time.LocalDateTime var41 = org.joda.time.LocalDateTime.now();
    int var42 = var41.getDayOfYear();
    org.joda.time.Chronology var43 = var41.getChronology();
    int var44 = var41.getYearOfCentury();
    int var45 = var40.getMaximumValue((org.joda.time.ReadablePartial)var41);
    int var46 = var41.getSecondOfMinute();
    org.joda.time.LocalDateTime var48 = var41.plusSeconds(228);
    org.joda.time.Chronology var49 = var41.getChronology();
    java.lang.String var50 = var21.print((org.joda.time.ReadablePartial)var41);
    boolean var51 = var5.equals((java.lang.Object)var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "Aug 29, 2013 1:23:56 AM"+ "'", var50.equals("Aug 29, 2013 1:23:56 AM"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test342"); }


    org.joda.time.MutableDateTime var0 = org.joda.time.MutableDateTime.now();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.DateMidnight var4 = var2.plusDays(2013);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.DateMidnight var9 = var6.minusWeeks((-1));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    var12.setWeekOfWeekyear(1);
    int var15 = var12.getRoundingMode();
    var12.addMillis(100);
    var12.setSecondOfMinute(10);
    org.joda.time.PeriodType var20 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var21 = new org.joda.time.Period((org.joda.time.ReadableDuration)var11, (org.joda.time.ReadableInstant)var12, var20);
    org.joda.time.Days var22 = var21.toStandardDays();
    org.joda.time.DurationFieldType var23 = var22.getFieldType();
    org.joda.time.DateMidnight var25 = var9.withFieldAdded(var23, 1);
    org.joda.time.field.PreciseDurationField var27 = new org.joda.time.field.PreciseDurationField(var23, 1L);
    org.joda.time.DateMidnight var29 = var4.withFieldAdded(var23, 228);
    org.joda.time.PeriodType var30 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var31 = new org.joda.time.MutablePeriod(var30);
    var31.addDays(1);
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    boolean var38 = var35.isShorterThan((org.joda.time.ReadableDuration)var37);
    var31.add((org.joda.time.ReadableDuration)var37);
    org.joda.time.MutableDateTime var40 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var37, (org.joda.time.ReadableInstant)var40);
    org.joda.time.PeriodType var42 = var41.getPeriodType();
    org.joda.time.MutablePeriod var43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableInstant)var29, var42);
    java.lang.String var44 = var42.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "Standard"+ "'", var44.equals("Standard"));

  }

  public void test343() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test343"); }


    org.joda.time.Period var2 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Period var4 = var2.withHours(216);
    org.joda.time.Minutes var5 = var2.toStandardMinutes();
    int var6 = var2.getMonths();
    org.joda.time.Period var8 = var2.minusMillis(69);
    org.joda.time.Period var10 = var2.withMinutes(21);
    org.joda.time.Period var12 = var2.plusSeconds(928);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test344"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.DateTimeFormat.shortDateTime();
    org.joda.time.TimeOfDay var1 = new org.joda.time.TimeOfDay();
    int var2 = var1.size();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var5 = var4.hours();
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var4);
    org.joda.time.LocalTime var8 = var6.withMillisOfSecond(1);
    org.joda.time.LocalTime var10 = var8.minusHours((-1));
    org.joda.time.Years var11 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var1, (org.joda.time.ReadablePartial)var10);
    int var12 = var1.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var14 = var1.withChronologyRetainFields((org.joda.time.Chronology)var13);
    org.joda.time.format.DateTimeFormatter var15 = var0.withChronology((org.joda.time.Chronology)var13);
    org.joda.time.format.DateTimePrinter var16 = var15.getPrinter();
    org.joda.time.MutableDateTime var17 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var18 = var17.year();
    org.joda.time.MutableDateTime.Property var19 = var17.weekOfWeekyear();
    var17.setMillisOfDay(16);
    org.joda.time.DateTimeField var22 = var17.getRoundingField();
    org.joda.time.MutableDateTime.Property var23 = var17.millisOfSecond();
    org.joda.time.DateTime var24 = var17.toDateTimeISO();
    int var27 = var15.parseInto((org.joda.time.ReadWritableInstant)var17, "ISOChronology[+00:00:00.759]", 85450);
    org.joda.time.MutableDateTime.Property var28 = var17.era();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 929);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-85451));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test345() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test345"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var2 = org.joda.time.field.FieldUtils.safeMultiply(1377746597L, 43898399991L);
      fail("Expected exception of type java.lang.ArithmeticException");
    } catch (java.lang.ArithmeticException e) {
      // Expected exception.
    }

  }

  public void test346() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test346"); }


    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var2.setChronology((org.joda.time.Chronology)var5);
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(0L, var1, (org.joda.time.Chronology)var5);
    org.joda.time.LocalTime var8 = new org.joda.time.LocalTime((org.joda.time.Chronology)var5);
    org.joda.time.LocalTime.Property var9 = var8.millisOfSecond();
    int var10 = var8.getMillisOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 5036841);

  }

  public void test347() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test347"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.YearMonthDay var5 = var1.toYearMonthDay();
    org.joda.time.YearMonthDay.Property var6 = var5.year();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test348() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test348"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var9 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var6, (org.joda.time.ReadableInstant)var8);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var11 = var10.year();
    boolean var12 = var8.isBefore((org.joda.time.ReadableInstant)var10);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    boolean var22 = var19.isShorterThan((org.joda.time.ReadableDuration)var21);
    org.joda.time.Duration var23 = var14.plus((org.joda.time.ReadableDuration)var19);
    var10.add((org.joda.time.ReadableDuration)var19);
    org.joda.time.Seconds var25 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var10);
    var10.setWeekOfWeekyear(28);
    org.joda.time.DateTime var28 = org.joda.time.DateTime.now();
    long var29 = var28.getMillis();
    var10.setMillis((org.joda.time.ReadableInstant)var28);
    org.joda.time.DateTimeZone var31 = var10.getZone();
    org.joda.time.LocalTime var32 = org.joda.time.LocalTime.now(var31);
    org.joda.time.LocalTime var34 = var32.withMillisOfSecond(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1377739436863L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test349() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test349"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    long var40 = var38.roundCeiling(3L);
    long var42 = var38.roundHalfEven((-208L));
    org.joda.time.DurationField var43 = var38.getLeapDurationField();
    int var45 = var38.getMaximumValue(2755493215861L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-208L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 948);

  }

  public void test350() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test350"); }


    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var4 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var3);
    org.joda.time.LocalDate var5 = var4.toLocalDate();
    org.joda.time.MutableDateTime var6 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var7 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var4, (org.joda.time.ReadableInstant)var6);
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var9 = var8.year();
    boolean var10 = var6.isBefore((org.joda.time.ReadableInstant)var8);
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    boolean var15 = var12.isShorterThan((org.joda.time.ReadableDuration)var14);
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var19 = org.joda.time.Duration.standardHours((-1L));
    boolean var20 = var17.isShorterThan((org.joda.time.ReadableDuration)var19);
    org.joda.time.Duration var21 = var12.plus((org.joda.time.ReadableDuration)var17);
    var8.add((org.joda.time.ReadableDuration)var17);
    var8.setHourOfDay(10);
    org.joda.time.Years var25 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var2, (org.joda.time.ReadableInstant)var8);
    org.joda.time.DateMidnight.Property var26 = var2.yearOfEra();
    org.joda.time.DateMidnight.Property var27 = var2.monthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test351() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test351"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Days var12 = var11.toStandardDays();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.Period var19 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var21 = var19.plusSeconds(100);
    org.joda.time.Period var23 = var19.minusMillis(10);
    boolean var24 = var14.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var25 = var14.dayOfYear();
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.LocalDate var28 = var27.toLocalDate();
    org.joda.time.LocalDate var30 = var28.minusMonths(0);
    org.joda.time.DateTime var31 = var28.toDateTimeAtMidnight();
    org.joda.time.DateTime var33 = var31.withCenturyOfEra(4);
    org.joda.time.Days var34 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var14, (org.joda.time.ReadableInstant)var33);
    org.joda.time.Days var36 = var34.dividedBy(1);
    boolean var37 = var12.isGreaterThan(var34);
    org.joda.time.Weeks var38 = var34.toStandardWeeks();
    org.joda.time.MutablePeriod var39 = var34.toMutablePeriod();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test352() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test352"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var29 = var28.toInterval();
    boolean var30 = var29.isBeforeNow();
    long var31 = var29.getStartMillis();
    boolean var33 = var29.contains((-3600L));
    org.joda.time.YearMonth var35 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var36 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var37 = var35.withChronologyRetainFields((org.joda.time.Chronology)var36);
    org.joda.time.YearMonth var39 = var37.withMonthOfYear(10);
    org.joda.time.Interval var40 = var37.toInterval();
    boolean var41 = var29.overlaps((org.joda.time.ReadableInterval)var40);
    org.joda.time.MutableInterval var42 = new org.joda.time.MutableInterval();
    long var43 = var42.getEndMillis();
    var42.setDurationBeforeEnd(1L);
    long var46 = var42.toDurationMillis();
    org.joda.time.MutableInterval var47 = new org.joda.time.MutableInterval();
    boolean var48 = var42.isBefore((org.joda.time.ReadableInterval)var47);
    org.joda.time.Chronology var49 = var42.getChronology();
    org.joda.time.Interval var50 = var40.gap((org.joda.time.ReadableInterval)var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1377735836917L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test353() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test353"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.DateTimeField var3 = var1.minuteOfHour();
    org.joda.time.LocalDate var4 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalDate.Property var5 = var4.weekyear();
    java.lang.String var6 = var4.toString();
    org.joda.time.LocalDateTime var8 = org.joda.time.LocalDateTime.now();
    int var9 = var8.getDayOfYear();
    org.joda.time.Chronology var10 = var8.getChronology();
    org.joda.time.chrono.StrictChronology var11 = org.joda.time.chrono.StrictChronology.getInstance(var10);
    org.joda.time.chrono.EthiopicChronology var12 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var13 = var12.hours();
    org.joda.time.DateTimeField var14 = var12.minuteOfHour();
    boolean var15 = var11.equals((java.lang.Object)var12);
    org.joda.time.Chronology var16 = var12.withUTC();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay((-3600L), (org.joda.time.Chronology)var12);
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.Period var24 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var26 = var24.plusSeconds(100);
    org.joda.time.Period var28 = var24.minusMillis(10);
    boolean var29 = var19.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var30 = var19.dayOfYear();
    int var31 = var19.getSecondOfDay();
    org.joda.time.DateMidnight var33 = var19.withWeekyear(240);
    org.joda.time.DateMidnight var35 = var33.minusMonths(28);
    org.joda.time.DateTimeZone var36 = var35.getZone();
    org.joda.time.DateTime var37 = var4.toDateTime(var17, var36);
    org.joda.time.LocalTime.Property var38 = var17.millisOfSecond();
    org.joda.time.format.DateTimeFormatter var39 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var43 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var44 = var43.hours();
    org.joda.time.LocalTime var45 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var43);
    org.joda.time.Period var46 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var43);
    org.joda.time.DateTimeField var47 = var43.millisOfSecond();
    org.joda.time.chrono.LenientChronology var48 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var43);
    org.joda.time.format.DateTimeFormatter var49 = var39.withChronology((org.joda.time.Chronology)var48);
    org.joda.time.YearMonthDay var50 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Days var51 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial)var17, (org.joda.time.ReadablePartial)var50);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "1962-04-23"+ "'", var6.equals("1962-04-23"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test354() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test354"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.TimeOfDay var3 = var0.withMillisOfSecond(1);
    org.joda.time.Years var5 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var6 = var5.getPeriodType();
    org.joda.time.Years var8 = org.joda.time.Years.years((-1));
    int var9 = var5.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var8);
    org.joda.time.Years var11 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var12 = var11.getPeriodType();
    org.joda.time.Years var13 = var8.minus(var11);
    org.joda.time.TimeOfDay var14 = var3.minus((org.joda.time.ReadablePeriod)var8);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var17 = new org.joda.time.MutableDateTime();
    var17.setWeekOfWeekyear(1);
    int var20 = var17.getRoundingMode();
    var17.addMillis(100);
    var17.setSecondOfMinute(10);
    org.joda.time.PeriodType var25 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var26 = new org.joda.time.Period((org.joda.time.ReadableDuration)var16, (org.joda.time.ReadableInstant)var17, var25);
    org.joda.time.MutableDateTime var27 = var17.copy();
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    var28.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var31 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var28.setChronology((org.joda.time.Chronology)var31);
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var31);
    var27.setChronology((org.joda.time.Chronology)var31);
    org.joda.time.TimeOfDay var35 = var14.withChronologyRetainFields((org.joda.time.Chronology)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test355() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test355"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.field.PreciseDurationField var22 = new org.joda.time.field.PreciseDurationField(var18, 1L);
    long var25 = var22.getMillis(3, 9L);
    int var28 = var22.getValue(9L, 2762381894421796L);
    long var29 = var22.getUnitMillis();
    long var32 = var22.add((-208L), 24430687);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 24430479L);

  }

  public void test356() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test356"); }


    org.joda.time.TimeOfDay var1 = new org.joda.time.TimeOfDay(1377746597835L);

  }

  public void test357() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test357"); }


    org.joda.time.LocalTime var1 = new org.joda.time.LocalTime((-86400208L));

  }

  public void test358() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test358"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.YearMonth var2 = new org.joda.time.YearMonth(var1);
    org.joda.time.chrono.IslamicChronology var3 = org.joda.time.chrono.IslamicChronology.getInstance(var1);
    org.joda.time.Chronology var4 = var3.withUTC();
    org.joda.time.Chronology var5 = var3.withUTC();
    org.joda.time.DateTimeField var6 = var3.secondOfMinute();
    org.joda.time.chrono.IslamicChronology.LeapYearPatternType var7 = var3.getLeapYearPatternType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test359() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test359"); }


    org.joda.time.convert.ConverterManager var0 = org.joda.time.convert.ConverterManager.getInstance();
    java.lang.String var1 = var0.toString();
    java.lang.String var2 = var0.toString();
    org.joda.time.convert.PartialConverter[] var3 = var0.getPartialConverters();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "ConverterManager[5 instant,6 partial,5 duration,5 period,3 interval]"+ "'", var1.equals("ConverterManager[5 instant,6 partial,5 duration,5 period,3 interval]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ConverterManager[5 instant,6 partial,5 duration,5 period,3 interval]"+ "'", var2.equals("ConverterManager[5 instant,6 partial,5 duration,5 period,3 interval]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test360() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test360"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var3 = org.joda.time.Duration.standardHours((-1L));
    boolean var4 = var1.isShorterThan((org.joda.time.ReadableDuration)var3);
    org.joda.time.Duration var5 = var1.toDuration();
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.LocalDate var11 = var10.toLocalDate();
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var13 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var12);
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var14);
    org.joda.time.LocalDate var16 = var15.toLocalDate();
    org.joda.time.MutableDateTime var17 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var18 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var15, (org.joda.time.ReadableInstant)var17);
    org.joda.time.MutableDateTime var19 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var20 = var19.year();
    boolean var21 = var17.isBefore((org.joda.time.ReadableInstant)var19);
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    boolean var26 = var23.isShorterThan((org.joda.time.ReadableDuration)var25);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var32 = var23.plus((org.joda.time.ReadableDuration)var28);
    var19.add((org.joda.time.ReadableDuration)var28);
    org.joda.time.Seconds var34 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var19);
    org.joda.time.Duration var35 = var34.toStandardDuration();
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    boolean var40 = var37.isShorterThan((org.joda.time.ReadableDuration)var39);
    org.joda.time.Duration var41 = var37.toDuration();
    boolean var42 = var35.isShorterThan((org.joda.time.ReadableDuration)var41);
    long var43 = var41.getStandardDays();
    int var44 = var7.compareTo((org.joda.time.ReadableDuration)var41);
    org.joda.time.Seconds var45 = var7.toStandardSeconds();
    org.joda.time.PeriodType var46 = var45.getPeriodType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test361() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test361"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var5 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var7 = var5.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var9 = var5.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var10);
    org.joda.time.DateTimeField var13 = var10.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var14 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.LocalDate var17 = var16.toLocalDate();
    org.joda.time.LocalDate var19 = var17.minusMonths(0);
    int[] var21 = var14.get((org.joda.time.ReadablePartial)var19, 100L);
    org.joda.time.chrono.EthiopicChronology var25 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var26 = var25.hours();
    org.joda.time.LocalTime var27 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var25);
    org.joda.time.Period var28 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var25);
    org.joda.time.DateTimeField var29 = var25.millisOfSecond();
    org.joda.time.DateTimeField var30 = var25.secondOfDay();
    org.joda.time.field.SkipDateTimeField var32 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var14, var30, 100);
    org.joda.time.LocalDateTime var33 = org.joda.time.LocalDateTime.now();
    int var34 = var33.getDayOfYear();
    org.joda.time.Chronology var35 = var33.getChronology();
    int var36 = var33.getYearOfCentury();
    int var37 = var32.getMaximumValue((org.joda.time.ReadablePartial)var33);
    boolean var39 = var32.isLeap(1L);
    org.joda.time.LocalDateTime var40 = org.joda.time.LocalDateTime.now();
    int var41 = var40.getDayOfYear();
    int var42 = var32.getMinimumValue((org.joda.time.ReadablePartial)var40);
    org.joda.time.DurationField var43 = var32.getDurationField();
    org.joda.time.DateTimeFieldType var44 = var32.getType();
    org.joda.time.field.OffsetDateTimeField var48 = new org.joda.time.field.OffsetDateTimeField(var13, var44, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var51 = new org.joda.time.IllegalFieldValueException(var44, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var54 = var5.appendFraction(var44, 33, (-948));
    org.joda.time.format.DateTimeFormatterBuilder var57 = var4.appendFraction(var44, 15795333, 57);
    org.joda.time.format.DateTimeFormatterBuilder var58 = var57.appendMonthOfYearText();
    boolean var59 = var58.canBuildParser();
    boolean var60 = var58.canBuildPrinter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);

  }

  public void test362() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test362"); }


    org.joda.time.Period var1 = org.joda.time.Period.minutes(1962);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test363() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test363"); }


    org.joda.time.chrono.EthiopicChronology var5 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var6 = var5.dayOfYear();
    org.joda.time.YearMonthDay var7 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var5);
    org.joda.time.YearMonthDay var9 = var7.plusDays((-1));
    org.joda.time.DateMidnight var10 = var9.toDateMidnight();
    org.joda.time.DateTime var18 = new org.joda.time.DateTime(0, 4, 28, 1, 28, 1, 1);
    int var19 = var18.getHourOfDay();
    org.joda.time.DateTime.Property var20 = var18.yearOfCentury();
    org.joda.time.LocalDate var21 = var18.toLocalDate();
    org.joda.time.tz.FixedDateTimeZone var26 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    org.joda.time.chrono.ISOChronology var27 = org.joda.time.chrono.ISOChronology.getInstance((org.joda.time.DateTimeZone)var26);
    org.joda.time.DateTime var28 = var18.withZoneRetainFields((org.joda.time.DateTimeZone)var26);
    int var30 = var26.getOffset((-86379208L));
    org.joda.time.DateTime var31 = var9.toDateTimeAtMidnight((org.joda.time.DateTimeZone)var26);
    org.joda.time.chrono.CopticChronology var32 = org.joda.time.chrono.CopticChronology.getInstance((org.joda.time.DateTimeZone)var26);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var33 = new org.joda.time.DateTime(216, 23544431, 200, 452, 13, (org.joda.time.DateTimeZone)var26);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test364() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test364"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    long var57 = var54.add((-1000L), 1377742981L);
    boolean var58 = var54.isLenient();
    long var61 = var54.add(1377742999393L, 12194);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var64 = var54.set(0L, 80);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 4959874731599000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1421641399393L);

  }

  public void test365() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test365"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Days var12 = var11.toStandardDays();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.Period var19 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var21 = var19.plusSeconds(100);
    org.joda.time.Period var23 = var19.minusMillis(10);
    boolean var24 = var14.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var25 = var14.dayOfYear();
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.LocalDate var28 = var27.toLocalDate();
    org.joda.time.LocalDate var30 = var28.minusMonths(0);
    org.joda.time.DateTime var31 = var28.toDateTimeAtMidnight();
    org.joda.time.DateTime var33 = var31.withCenturyOfEra(4);
    org.joda.time.Days var34 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var14, (org.joda.time.ReadableInstant)var33);
    org.joda.time.Days var36 = var34.dividedBy(1);
    boolean var37 = var12.isGreaterThan(var34);
    org.joda.time.DurationFieldType var38 = var12.getFieldType();
    org.joda.time.Days var40 = var12.plus(759);
    org.joda.time.PeriodType var41 = var12.getPeriodType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test366() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test366"); }


    org.joda.time.Period var2 = new org.joda.time.Period(10L, 1L);
    int var3 = var2.getMillis();
    int var4 = var2.getHours();
    org.joda.time.Days var5 = var2.toStandardDays();
    org.joda.time.Days var6 = var5.negated();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-9));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test367() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test367"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.basicTime();
    boolean var1 = var0.isPrinter();
    org.joda.time.format.DateTimeFormatter var2 = var0.withOffsetParsed();
    org.joda.time.Chronology var3 = var0.getChronolgy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test368() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test368"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    int var2 = var1.getSeconds();
    int var3 = var1.getMonths();
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.chrono.ISOChronology var7 = org.joda.time.chrono.ISOChronology.getInstance(var6);
    org.joda.time.DurationField var8 = var7.millis();
    var1.add((-7200000L), (org.joda.time.Chronology)var7);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.Period var16 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var18 = var16.plusSeconds(100);
    org.joda.time.Period var20 = var16.minusMillis(10);
    boolean var21 = var11.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var22 = var11.dayOfYear();
    org.joda.time.chrono.JulianChronology var23 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var24 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var23);
    org.joda.time.LocalDate var25 = var24.toLocalDate();
    org.joda.time.LocalDate var27 = var25.minusMonths(0);
    org.joda.time.DateTime var28 = var25.toDateTimeAtMidnight();
    org.joda.time.DateTime var30 = var28.withCenturyOfEra(4);
    org.joda.time.Days var31 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var11, (org.joda.time.ReadableInstant)var30);
    org.joda.time.DateMidnight var33 = var11.plusMonths(10);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var35 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var34);
    org.joda.time.LocalDate var36 = var35.toLocalDate();
    org.joda.time.MutableDateTime var37 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var38 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var35, (org.joda.time.ReadableInstant)var37);
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var40 = var39.year();
    boolean var41 = var37.isBefore((org.joda.time.ReadableInstant)var39);
    org.joda.time.Duration var43 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var45 = org.joda.time.Duration.standardHours((-1L));
    boolean var46 = var43.isShorterThan((org.joda.time.ReadableDuration)var45);
    org.joda.time.Duration var48 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var50 = org.joda.time.Duration.standardHours((-1L));
    boolean var51 = var48.isShorterThan((org.joda.time.ReadableDuration)var50);
    org.joda.time.Duration var52 = var43.plus((org.joda.time.ReadableDuration)var48);
    var39.add((org.joda.time.ReadableDuration)var48);
    org.joda.time.Years var54 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var33, (org.joda.time.ReadableInstant)var39);
    var1.add((org.joda.time.ReadablePeriod)var54);
    var1.addMinutes(15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test369() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test369"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    int var3 = var2.getDayOfMonth();
    int var4 = var2.getDayOfMonth();
    org.joda.time.tz.FixedDateTimeZone var9 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod(var10);
    var11.addDays(1);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var17 = org.joda.time.Duration.standardHours((-1L));
    boolean var18 = var15.isShorterThan((org.joda.time.ReadableDuration)var17);
    var11.add((org.joda.time.ReadableDuration)var17);
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var17, (org.joda.time.ReadableInstant)var20);
    var21.clear();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.MutableDateTime.Property var44 = var29.dayOfWeek();
    var21.setPeriod((org.joda.time.ReadableInstant)var23, (org.joda.time.ReadableInstant)var29);
    boolean var46 = var9.equals((java.lang.Object)var21);
    boolean var47 = var9.isFixed();
    boolean var48 = var9.isFixed();
    org.joda.time.DateTime var49 = var2.toDateTimeAtMidnight((org.joda.time.DateTimeZone)var9);
    org.joda.time.DateMidnight var50 = new org.joda.time.DateMidnight((org.joda.time.DateTimeZone)var9);
    java.util.TimeZone var51 = var9.toTimeZone();
    org.joda.time.chrono.GregorianChronology var52 = org.joda.time.chrono.GregorianChronology.getInstance((org.joda.time.DateTimeZone)var9);
    org.joda.time.Chronology var53 = var52.withUTC();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test370() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test370"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var2.appendDayOfWeek(8400);
    org.joda.time.format.DateTimeFormatterBuilder var6 = var4.appendLiteral("-1 hours");
    org.joda.time.format.DateTimeFormatterBuilder var8 = var4.appendClockhourOfDay(2005);
    org.joda.time.format.DateTimeFormatterBuilder var13 = var8.appendTimeZoneOffset("Jan 1, 1970 12:00:00 AM", false, 41, 765);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test371() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test371"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var0.setChronology((org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var5 = var3.clockhourOfHalfday();
    org.joda.time.format.DateTimeFormatterBuilder var6 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var8 = var6.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var6.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var14 = var11.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = var17.toLocalDate();
    org.joda.time.LocalDate var20 = var18.minusMonths(0);
    int[] var22 = var15.get((org.joda.time.ReadablePartial)var20, 100L);
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var26);
    org.joda.time.Period var29 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var26);
    org.joda.time.DateTimeField var30 = var26.millisOfSecond();
    org.joda.time.DateTimeField var31 = var26.secondOfDay();
    org.joda.time.field.SkipDateTimeField var33 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var15, var31, 100);
    org.joda.time.LocalDateTime var34 = org.joda.time.LocalDateTime.now();
    int var35 = var34.getDayOfYear();
    org.joda.time.Chronology var36 = var34.getChronology();
    int var37 = var34.getYearOfCentury();
    int var38 = var33.getMaximumValue((org.joda.time.ReadablePartial)var34);
    boolean var40 = var33.isLeap(1L);
    org.joda.time.LocalDateTime var41 = org.joda.time.LocalDateTime.now();
    int var42 = var41.getDayOfYear();
    int var43 = var33.getMinimumValue((org.joda.time.ReadablePartial)var41);
    org.joda.time.DurationField var44 = var33.getDurationField();
    org.joda.time.DateTimeFieldType var45 = var33.getType();
    org.joda.time.field.OffsetDateTimeField var49 = new org.joda.time.field.OffsetDateTimeField(var14, var45, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var52 = new org.joda.time.IllegalFieldValueException(var45, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var55 = var6.appendFraction(var45, 33, (-948));
    org.joda.time.field.DividedDateTimeField var57 = new org.joda.time.field.DividedDateTimeField(var5, var45, 100);
    org.joda.time.field.RemainderDateTimeField var58 = new org.joda.time.field.RemainderDateTimeField(var57);
    long var61 = var57.getDifferenceAsLong(15946406L, 81326L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0L);

  }

  public void test372() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test372"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.DateMidnight var6 = var4.minusMonths(100);
    org.joda.time.DateMidnight var8 = var4.withYearOfEra(2013);
    org.joda.time.DateMidnight var10 = var4.withYearOfCentury(13);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.Period var17 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var19 = var17.plusSeconds(100);
    org.joda.time.Period var21 = var17.minusMillis(10);
    boolean var22 = var12.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var23 = var12.dayOfYear();
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.LocalDate var28 = var26.minusMonths(0);
    org.joda.time.DateTime var29 = var26.toDateTimeAtMidnight();
    org.joda.time.DateTime var31 = var29.withCenturyOfEra(4);
    org.joda.time.Days var32 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var12, (org.joda.time.ReadableInstant)var31);
    org.joda.time.DateMidnight var34 = var12.plusMonths(10);
    org.joda.time.DateTimeZone var36 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var37 = org.joda.time.MutableDateTime.now(var36);
    org.joda.time.DateMidnight var38 = var12.withZoneRetainFields(var36);
    org.joda.time.DateMidnight var39 = var10.withZoneRetainFields(var36);
    org.joda.time.chrono.EthiopicChronology var40 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var41 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var42 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var41);
    org.joda.time.LocalDate var43 = var42.toLocalDate();
    org.joda.time.LocalDate var45 = var43.minusMonths(0);
    int[] var47 = var40.get((org.joda.time.ReadablePartial)var45, 100L);
    org.joda.time.chrono.EthiopicChronology var51 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var52 = var51.hours();
    org.joda.time.LocalTime var53 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var51);
    org.joda.time.Period var54 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var51);
    org.joda.time.DateTimeField var55 = var51.millisOfSecond();
    org.joda.time.DateTimeField var56 = var51.secondOfDay();
    org.joda.time.field.SkipDateTimeField var58 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var40, var56, 100);
    org.joda.time.DurationField var59 = var58.getRangeDurationField();
    java.lang.String var60 = var58.toString();
    int var61 = var58.getMinimumValue();
    org.joda.time.field.OffsetDateTimeField var63 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField)var58, 2005);
    boolean var64 = var63.isSupported();
    org.joda.time.DateTimeFieldType var65 = var63.getType();
    org.joda.time.DateMidnight var67 = var10.withField(var65, 20);
    org.joda.time.DateMidnight.Property var68 = var67.monthOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "DateTimeField[secondOfDay]"+ "'", var60.equals("DateTimeField[secondOfDay]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test373() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test373"); }


    org.joda.time.format.PeriodFormatter var0 = org.joda.time.format.ISOPeriodFormat.standard();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test374() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test374"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    long var26 = var18.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var27 = var18.getRangeDurationField();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.DateMidnight var31 = var29.plusDays(2013);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.DateMidnight var36 = var33.minusWeeks((-1));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.DurationFieldType var50 = var49.getFieldType();
    org.joda.time.DateMidnight var52 = var36.withFieldAdded(var50, 1);
    org.joda.time.field.PreciseDurationField var54 = new org.joda.time.field.PreciseDurationField(var50, 1L);
    org.joda.time.DateMidnight var56 = var31.withFieldAdded(var50, 228);
    org.joda.time.field.DecoratedDurationField var57 = new org.joda.time.field.DecoratedDurationField(var27, var50);
    long var60 = var57.add(1377768182707L, 100L);
    long var63 = var57.add((-7200000L), 23);
    long var65 = var57.getValueAsLong((-60779281008478L));
    org.joda.time.chrono.JulianChronology var66 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var67 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var66);
    org.joda.time.LocalDate var68 = var67.toLocalDate();
    org.joda.time.DateMidnight var70 = var67.minusWeeks((-1));
    org.joda.time.Duration var72 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var73 = new org.joda.time.MutableDateTime();
    var73.setWeekOfWeekyear(1);
    int var76 = var73.getRoundingMode();
    var73.addMillis(100);
    var73.setSecondOfMinute(10);
    org.joda.time.PeriodType var81 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var82 = new org.joda.time.Period((org.joda.time.ReadableDuration)var72, (org.joda.time.ReadableInstant)var73, var81);
    org.joda.time.Days var83 = var82.toStandardDays();
    org.joda.time.DurationFieldType var84 = var83.getFieldType();
    org.joda.time.DateMidnight var86 = var70.withFieldAdded(var84, 1);
    org.joda.time.field.PreciseDurationField var88 = new org.joda.time.field.PreciseDurationField(var84, 1L);
    long var91 = var88.getMillis(3, 9L);
    int var92 = var57.compareTo((org.joda.time.DurationField)var88);
    long var95 = var57.getValueAsLong(1377742992241L, 1377768182707035L);
    org.joda.time.DurationField var96 = var57.getWrappedField();
    long var99 = var57.getDifferenceAsLong(1378944000000L, 1377746599106L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1386408182707L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1980000000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-703463L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 15946L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == 13L);

  }

  public void test375() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test375"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.LocalDateTime var3 = var0.minusSeconds(2005);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.DateMidnight var7 = var5.plusDays(2013);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.DateMidnight var12 = var9.minusWeeks((-1));
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Days var25 = var24.toStandardDays();
    org.joda.time.DurationFieldType var26 = var25.getFieldType();
    org.joda.time.DateMidnight var28 = var12.withFieldAdded(var26, 1);
    org.joda.time.field.PreciseDurationField var30 = new org.joda.time.field.PreciseDurationField(var26, 1L);
    org.joda.time.DateMidnight var32 = var7.withFieldAdded(var26, 228);
    org.joda.time.field.PreciseDurationField var34 = new org.joda.time.field.PreciseDurationField(var26, (-9L));
    org.joda.time.LocalDateTime var36 = var3.withFieldAdded(var26, 7);
    org.joda.time.LocalDateTime var38 = var36.withMillisOfSecond(2);
    org.joda.time.LocalDateTime.Property var39 = var36.yearOfEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test376() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test376"); }


    org.joda.time.DateTime var0 = org.joda.time.DateTime.now();
    long var1 = var0.getMillis();
    org.joda.time.DateTime.Property var2 = var0.yearOfEra();
    org.joda.time.DateTime var4 = var0.withMillisOfDay(216);
    org.joda.time.PeriodType var5 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var6 = new org.joda.time.MutablePeriod(var5);
    var6.addDays(1);
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    boolean var13 = var10.isShorterThan((org.joda.time.ReadableDuration)var12);
    var6.add((org.joda.time.ReadableDuration)var12);
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var12, (org.joda.time.ReadableInstant)var15);
    var16.clear();
    org.joda.time.PeriodType var18 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var19 = new org.joda.time.MutablePeriod(var18);
    var19.addDays(1);
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    boolean var26 = var23.isShorterThan((org.joda.time.ReadableDuration)var25);
    var19.add((org.joda.time.ReadableDuration)var25);
    var16.add((org.joda.time.ReadablePeriod)var19);
    org.joda.time.chrono.JulianChronology var29 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var30 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var29);
    org.joda.time.LocalDate var31 = var30.toLocalDate();
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var33 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var30, (org.joda.time.ReadableInstant)var32);
    org.joda.time.MutableDateTime var34 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var35 = var34.year();
    boolean var36 = var32.isBefore((org.joda.time.ReadableInstant)var34);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var43 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var45 = org.joda.time.Duration.standardHours((-1L));
    boolean var46 = var43.isShorterThan((org.joda.time.ReadableDuration)var45);
    org.joda.time.Duration var47 = var38.plus((org.joda.time.ReadableDuration)var43);
    var34.add((org.joda.time.ReadableDuration)var43);
    org.joda.time.Hours var49 = var43.toStandardHours();
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    var19.setPeriod((org.joda.time.ReadableDuration)var43, (org.joda.time.Chronology)var50);
    org.joda.time.DateTime var52 = var4.plus((org.joda.time.ReadableDuration)var43);
    org.joda.time.DateTime var55 = var52.withDurationAdded(1L, 15795333);
    org.joda.time.format.DateTimeFormatter var56 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var60 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var61 = var60.hours();
    org.joda.time.LocalTime var62 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var60);
    org.joda.time.Period var63 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var60);
    org.joda.time.DateTimeField var64 = var60.millisOfSecond();
    org.joda.time.chrono.LenientChronology var65 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var60);
    org.joda.time.format.DateTimeFormatter var66 = var56.withChronology((org.joda.time.Chronology)var65);
    org.joda.time.chrono.ISOChronology var67 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var72 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var74 = var72.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var75 = var67.withZone((org.joda.time.DateTimeZone)var72);
    long var77 = var72.nextTransition(9L);
    org.joda.time.Chronology var78 = var65.withZone((org.joda.time.DateTimeZone)var72);
    org.joda.time.DateTime var79 = var55.withZone((org.joda.time.DateTimeZone)var72);
    org.joda.time.DateTime.Property var80 = var55.minuteOfHour();
    org.joda.time.DateTime var81 = var55.withLaterOffsetAtOverlap();
    org.joda.time.DateTime.Property var82 = var55.dayOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1377739437255L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 9L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test377() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test377"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var1 = var0.copy();
    org.joda.time.DateTime var2 = var1.getStart();
    java.util.Date var3 = var2.toDate();
    org.joda.time.PeriodType var6 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.DateTime var7 = org.joda.time.DateTime.now();
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var12 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var9, (org.joda.time.ReadableInstant)var11);
    org.joda.time.MutableDateTime var13 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var14 = var13.year();
    boolean var15 = var11.isBefore((org.joda.time.ReadableInstant)var13);
    org.joda.time.MutableDateTime.Property var16 = var13.minuteOfHour();
    org.joda.time.MutableDateTime.Property var17 = var13.millisOfSecond();
    org.joda.time.Chronology var18 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var13);
    org.joda.time.MutablePeriod var19 = new org.joda.time.MutablePeriod(9L, var6, var18);
    org.joda.time.YearMonth var20 = new org.joda.time.YearMonth(99L, var18);
    org.joda.time.DateTime var21 = var2.toDateTime(var18);
    org.joda.time.DateTime var23 = var21.minus(12196171L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test378() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test378"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.time();
    org.joda.time.DateTimeZone var1 = var0.getZone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test379() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test379"); }


    org.joda.time.LocalDateTime var1 = org.joda.time.LocalDateTime.now();
    int var2 = var1.getDayOfYear();
    org.joda.time.Chronology var3 = var1.getChronology();
    org.joda.time.chrono.StrictChronology var4 = org.joda.time.chrono.StrictChronology.getInstance(var3);
    org.joda.time.DateTime var12 = new org.joda.time.DateTime(0, 4, 28, 1, 28, 1, 1);
    org.joda.time.LocalDate var13 = var12.toLocalDate();
    org.joda.time.LocalDate.Property var14 = var13.weekyear();
    long var16 = var4.set((org.joda.time.ReadablePartial)var13, 104L);
    org.joda.time.MutablePeriod var17 = new org.joda.time.MutablePeriod(2755493225160L, (org.joda.time.Chronology)var4);
    var17.setPeriod(2013, 3975, 353, 52, 11, 524, 356, 124);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-62157023999896L));

  }

  public void test380() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test380"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Days var12 = var11.toStandardDays();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.Period var19 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var21 = var19.plusSeconds(100);
    org.joda.time.Period var23 = var19.minusMillis(10);
    boolean var24 = var14.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var25 = var14.dayOfYear();
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.LocalDate var28 = var27.toLocalDate();
    org.joda.time.LocalDate var30 = var28.minusMonths(0);
    org.joda.time.DateTime var31 = var28.toDateTimeAtMidnight();
    org.joda.time.DateTime var33 = var31.withCenturyOfEra(4);
    org.joda.time.Days var34 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var14, (org.joda.time.ReadableInstant)var33);
    org.joda.time.Days var36 = var34.dividedBy(1);
    boolean var37 = var12.isGreaterThan(var34);
    org.joda.time.DurationFieldType var38 = var12.getFieldType();
    org.joda.time.Days var40 = var12.plus(759);
    org.joda.time.Period var43 = new org.joda.time.Period(10L, 1L);
    int var44 = var43.getMillis();
    int var45 = var43.getHours();
    org.joda.time.Days var46 = var43.toStandardDays();
    org.joda.time.Days var47 = var40.plus(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-9));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test381() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test381"); }


    org.joda.time.format.DateTimeFormatter var6 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var10 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var11 = var10.hours();
    org.joda.time.LocalTime var12 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var10);
    org.joda.time.Period var13 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var10);
    org.joda.time.DateTimeField var14 = var10.millisOfSecond();
    org.joda.time.chrono.LenientChronology var15 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var10);
    org.joda.time.format.DateTimeFormatter var16 = var6.withChronology((org.joda.time.Chronology)var15);
    org.joda.time.tz.FixedDateTimeZone var21 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var22 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var23 = new org.joda.time.MutablePeriod(var22);
    var23.addDays(1);
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    boolean var30 = var27.isShorterThan((org.joda.time.ReadableDuration)var29);
    var23.add((org.joda.time.ReadableDuration)var29);
    org.joda.time.MutableDateTime var32 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var29, (org.joda.time.ReadableInstant)var32);
    var33.clear();
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var36 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var37 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var36);
    org.joda.time.LocalDate var38 = var37.toLocalDate();
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var40 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var37, (org.joda.time.ReadableInstant)var39);
    org.joda.time.MutableDateTime var41 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var42 = var41.year();
    boolean var43 = var39.isBefore((org.joda.time.ReadableInstant)var41);
    org.joda.time.Duration var45 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var47 = org.joda.time.Duration.standardHours((-1L));
    boolean var48 = var45.isShorterThan((org.joda.time.ReadableDuration)var47);
    org.joda.time.Duration var50 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var52 = org.joda.time.Duration.standardHours((-1L));
    boolean var53 = var50.isShorterThan((org.joda.time.ReadableDuration)var52);
    org.joda.time.Duration var54 = var45.plus((org.joda.time.ReadableDuration)var50);
    var41.add((org.joda.time.ReadableDuration)var50);
    org.joda.time.MutableDateTime.Property var56 = var41.dayOfWeek();
    var33.setPeriod((org.joda.time.ReadableInstant)var35, (org.joda.time.ReadableInstant)var41);
    boolean var58 = var21.equals((java.lang.Object)var33);
    org.joda.time.Chronology var59 = var15.withZone((org.joda.time.DateTimeZone)var21);
    org.joda.time.DateTime var60 = new org.joda.time.DateTime(3975, 241, 12196, (-59), 431, 12196, (org.joda.time.Chronology)var15);
    org.joda.time.TimeOfDay var61 = new org.joda.time.TimeOfDay();
    int var62 = var61.size();
    org.joda.time.TimeOfDay var64 = var61.withMillisOfSecond(1);
    org.joda.time.Years var66 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var67 = var66.getPeriodType();
    org.joda.time.Years var69 = org.joda.time.Years.years((-1));
    int var70 = var66.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var69);
    org.joda.time.Years var72 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var73 = var72.getPeriodType();
    org.joda.time.Years var74 = var69.minus(var72);
    org.joda.time.TimeOfDay var75 = var64.minus((org.joda.time.ReadablePeriod)var69);
    org.joda.time.DateTime var76 = var60.withFields((org.joda.time.ReadablePartial)var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test382() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test382"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var0.setChronology((org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var5 = var3.clockhourOfHalfday();
    org.joda.time.format.DateTimeFormatterBuilder var6 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var8 = var6.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var6.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var14 = var11.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = var17.toLocalDate();
    org.joda.time.LocalDate var20 = var18.minusMonths(0);
    int[] var22 = var15.get((org.joda.time.ReadablePartial)var20, 100L);
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var26);
    org.joda.time.Period var29 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var26);
    org.joda.time.DateTimeField var30 = var26.millisOfSecond();
    org.joda.time.DateTimeField var31 = var26.secondOfDay();
    org.joda.time.field.SkipDateTimeField var33 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var15, var31, 100);
    org.joda.time.LocalDateTime var34 = org.joda.time.LocalDateTime.now();
    int var35 = var34.getDayOfYear();
    org.joda.time.Chronology var36 = var34.getChronology();
    int var37 = var34.getYearOfCentury();
    int var38 = var33.getMaximumValue((org.joda.time.ReadablePartial)var34);
    boolean var40 = var33.isLeap(1L);
    org.joda.time.LocalDateTime var41 = org.joda.time.LocalDateTime.now();
    int var42 = var41.getDayOfYear();
    int var43 = var33.getMinimumValue((org.joda.time.ReadablePartial)var41);
    org.joda.time.DurationField var44 = var33.getDurationField();
    org.joda.time.DateTimeFieldType var45 = var33.getType();
    org.joda.time.field.OffsetDateTimeField var49 = new org.joda.time.field.OffsetDateTimeField(var14, var45, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var52 = new org.joda.time.IllegalFieldValueException(var45, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var55 = var6.appendFraction(var45, 33, (-948));
    org.joda.time.field.DividedDateTimeField var57 = new org.joda.time.field.DividedDateTimeField(var5, var45, 100);
    int var60 = var57.getDifference(1377742992740L, 1377746591916L);
    int var63 = var57.getDifference(1377769560460016L, (-86386600L));
    long var66 = var57.getDifferenceAsLong(1377746599386L, 2755493215861L);
    long var68 = var57.remainder(15946L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 3827137);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-3827L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 15946L);

  }

  public void test383() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test383"); }


    org.joda.time.tz.FixedDateTimeZone var4 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var5 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var6 = new org.joda.time.MutablePeriod(var5);
    var6.addDays(1);
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    boolean var13 = var10.isShorterThan((org.joda.time.ReadableDuration)var12);
    var6.add((org.joda.time.ReadableDuration)var12);
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var12, (org.joda.time.ReadableInstant)var15);
    var16.clear();
    org.joda.time.MutableDateTime var18 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var19 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var20 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var19);
    org.joda.time.LocalDate var21 = var20.toLocalDate();
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var23 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var20, (org.joda.time.ReadableInstant)var22);
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var25 = var24.year();
    boolean var26 = var22.isBefore((org.joda.time.ReadableInstant)var24);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var37 = var28.plus((org.joda.time.ReadableDuration)var33);
    var24.add((org.joda.time.ReadableDuration)var33);
    org.joda.time.MutableDateTime.Property var39 = var24.dayOfWeek();
    var16.setPeriod((org.joda.time.ReadableInstant)var18, (org.joda.time.ReadableInstant)var24);
    boolean var41 = var4.equals((java.lang.Object)var16);
    var16.clear();
    int var43 = var16.getHours();
    int var44 = var16.getWeeks();
    var16.addDays(24430687);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);

  }

  public void test384() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test384"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    long var40 = var38.roundCeiling(3L);
    int var42 = var38.getMaximumValue((-7200000L));
    long var45 = var38.add((-703990L), 4133240044002L);
    org.joda.time.DateTimeFieldType var46 = var38.getType();
    int var47 = var38.getOffset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 948);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 4133239340012L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 884);

  }

  public void test385() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test385"); }


    org.joda.time.MutableDateTime var1 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var2 = var1.year();
    org.joda.time.YearMonth var3 = new org.joda.time.YearMonth((java.lang.Object)var1);
    org.joda.time.YearMonth var5 = var3.plusMonths(100);
    int var6 = var5.size();
    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var7);
    org.joda.time.DurationField var10 = var7.hours();
    org.joda.time.YearMonth var11 = var5.withChronologyRetainFields((org.joda.time.Chronology)var7);
    org.joda.time.DateTime var12 = new org.joda.time.DateTime(100L, (org.joda.time.Chronology)var7);
    org.joda.time.DateTimeZone var14 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.YearMonth var15 = new org.joda.time.YearMonth(var14);
    org.joda.time.chrono.IslamicChronology var16 = org.joda.time.chrono.IslamicChronology.getInstance(var14);
    org.joda.time.Chronology var17 = var16.withUTC();
    org.joda.time.Chronology var18 = var16.withUTC();
    org.joda.time.DateTime var19 = var12.toDateTime(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test386() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test386"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    long var26 = var18.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var27 = var18.getRangeDurationField();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.DateMidnight var31 = var29.plusDays(2013);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.DateMidnight var36 = var33.minusWeeks((-1));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.DurationFieldType var50 = var49.getFieldType();
    org.joda.time.DateMidnight var52 = var36.withFieldAdded(var50, 1);
    org.joda.time.field.PreciseDurationField var54 = new org.joda.time.field.PreciseDurationField(var50, 1L);
    org.joda.time.DateMidnight var56 = var31.withFieldAdded(var50, 228);
    org.joda.time.field.DecoratedDurationField var57 = new org.joda.time.field.DecoratedDurationField(var27, var50);
    long var60 = var57.add(1377746681334L, 9);
    org.joda.time.Duration var62 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    var63.setWeekOfWeekyear(1);
    int var66 = var63.getRoundingMode();
    var63.addMillis(100);
    var63.setSecondOfMinute(10);
    org.joda.time.PeriodType var71 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var72 = new org.joda.time.Period((org.joda.time.ReadableDuration)var62, (org.joda.time.ReadableInstant)var63, var71);
    org.joda.time.Days var73 = var72.toStandardDays();
    org.joda.time.DurationFieldType var74 = var73.getFieldType();
    org.joda.time.field.DecoratedDurationField var75 = new org.joda.time.field.DecoratedDurationField((org.joda.time.DurationField)var57, var74);
    org.joda.time.field.UnsupportedDurationField var76 = org.joda.time.field.UnsupportedDurationField.getInstance(var74);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var79 = var76.add(43898399991L, 69);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1378524281334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test387() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test387"); }


    org.joda.time.format.DateTimeFormatter var7 = org.joda.time.format.DateTimeFormat.shortDateTime();
    org.joda.time.TimeOfDay var8 = new org.joda.time.TimeOfDay();
    int var9 = var8.size();
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.LocalTime var15 = var13.withMillisOfSecond(1);
    org.joda.time.LocalTime var17 = var15.minusHours((-1));
    org.joda.time.Years var18 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var8, (org.joda.time.ReadablePartial)var17);
    int var19 = var8.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var21 = var8.withChronologyRetainFields((org.joda.time.Chronology)var20);
    org.joda.time.format.DateTimeFormatter var22 = var7.withChronology((org.joda.time.Chronology)var20);
    org.joda.time.DateTimeZone var23 = var20.getZone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var24 = new org.joda.time.LocalDateTime(24430687, 524, 526, 9, 893, 948, 452, (org.joda.time.Chronology)var20);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 604);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test388() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test388"); }


    long var2 = org.joda.time.field.FieldUtils.safeMultiply(1377746581334L, 893L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1230327697131262L);

  }

  public void test389() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test389"); }


    org.joda.time.DateTimeZone var7 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var8 = org.joda.time.DateTimeUtils.getZone(var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var9 = new org.joda.time.DateTime(620, 830, 23, 12194, 70541200, 80, var8);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test390() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test390"); }


    org.joda.time.LocalDateTime var1 = org.joda.time.LocalDateTime.now();
    int var2 = var1.getDayOfYear();
    org.joda.time.Chronology var3 = var1.getChronology();
    org.joda.time.chrono.StrictChronology var4 = org.joda.time.chrono.StrictChronology.getInstance(var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.withMonthOfYear(1);
    org.joda.time.LocalDate var11 = var7.withWeekyear(1);
    org.joda.time.LocalDate var13 = var7.withDayOfYear(1);
    org.joda.time.LocalDate var15 = var13.minusMonths(16);
    boolean var16 = var4.equals((java.lang.Object)16);
    org.joda.time.YearMonth var17 = new org.joda.time.YearMonth(0L, (org.joda.time.Chronology)var4);
    org.joda.time.format.DateTimeFormatter var18 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var22 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var23 = var22.hours();
    org.joda.time.LocalTime var24 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var22);
    org.joda.time.Period var25 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var22);
    org.joda.time.DateTimeField var26 = var22.millisOfSecond();
    org.joda.time.chrono.LenientChronology var27 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var22);
    org.joda.time.format.DateTimeFormatter var28 = var18.withChronology((org.joda.time.Chronology)var27);
    org.joda.time.format.DateTimeFormatter var29 = var28.withZoneUTC();
    java.lang.String var30 = var17.toString(var29);
    org.joda.time.chrono.JulianChronology var31 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var32 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var31);
    org.joda.time.Period var37 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var39 = var37.plusSeconds(100);
    org.joda.time.Period var41 = var37.minusMillis(10);
    boolean var42 = var32.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var43 = var32.dayOfYear();
    int var44 = var32.getSecondOfDay();
    org.joda.time.DateMidnight var46 = var32.withWeekyear(240);
    org.joda.time.DateMidnight var48 = var46.minusMonths(28);
    org.joda.time.DateTimeZone var49 = var48.getZone();
    org.joda.time.Interval var50 = var17.toInterval(var49);
    org.joda.time.chrono.EthiopicChronology var52 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var53 = var52.hours();
    org.joda.time.LocalTime var54 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var52);
    org.joda.time.LocalTime var56 = var54.withMillisOfSecond(1);
    org.joda.time.LocalTime var58 = var54.withMinuteOfHour(3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Minutes var59 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadablePartial)var17, (org.joda.time.ReadablePartial)var54);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "\uFFFD\uFFFD"+ "'", var30.equals("\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test391() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test391"); }


    org.joda.time.format.DateTimeFormatter var2 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var6 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var7 = var6.hours();
    org.joda.time.LocalTime var8 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var6);
    org.joda.time.Period var9 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var6);
    org.joda.time.DateTimeField var10 = var6.millisOfSecond();
    org.joda.time.chrono.LenientChronology var11 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var6);
    org.joda.time.format.DateTimeFormatter var12 = var2.withChronology((org.joda.time.Chronology)var11);
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.LocalDate var17 = var15.withMonthOfYear(1);
    org.joda.time.LocalDate var19 = var15.withWeekyear(1);
    org.joda.time.LocalDate var21 = var15.withDayOfYear(1);
    boolean var22 = var11.equals((java.lang.Object)var21);
    org.joda.time.LocalDate var23 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MonthDay var24 = new org.joda.time.MonthDay(1039, 14, (org.joda.time.Chronology)var11);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test392() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test392"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var2 = var1.dayOfYear();
    org.joda.time.YearMonthDay var3 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var1);
    org.joda.time.YearMonthDay var5 = var3.plusDays((-1));
    org.joda.time.tz.FixedDateTimeZone var10 = new org.joda.time.tz.FixedDateTimeZone("57680", "\uFFFD\uFFFD\uFFFD\uFFFD-W\uFFFD\uFFFD-\uFFFDT03:23:01", (-13), 35);
    org.joda.time.DateTime var11 = var5.toDateTimeAtCurrentTime((org.joda.time.DateTimeZone)var10);
    org.joda.time.DateMidnight var12 = new org.joda.time.DateMidnight((-7092000100L), (org.joda.time.DateTimeZone)var10);
    boolean var13 = var10.isFixed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test393() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test393"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    org.joda.time.Interval var1 = var0.toInterval();
    org.joda.time.Duration var3 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    boolean var6 = var3.isShorterThan((org.joda.time.ReadableDuration)var5);
    org.joda.time.Duration var7 = var3.toDuration();
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    boolean var10 = var7.isShorterThan((org.joda.time.ReadableDuration)var9);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = var12.toLocalDate();
    org.joda.time.MutableDateTime var14 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var15 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var12, (org.joda.time.ReadableInstant)var14);
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = var17.toLocalDate();
    org.joda.time.MutableDateTime var19 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var20 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var17, (org.joda.time.ReadableInstant)var19);
    org.joda.time.MutableDateTime var21 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var22 = var21.year();
    boolean var23 = var19.isBefore((org.joda.time.ReadableInstant)var21);
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    boolean var28 = var25.isShorterThan((org.joda.time.ReadableDuration)var27);
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    boolean var33 = var30.isShorterThan((org.joda.time.ReadableDuration)var32);
    org.joda.time.Duration var34 = var25.plus((org.joda.time.ReadableDuration)var30);
    var21.add((org.joda.time.ReadableDuration)var30);
    org.joda.time.Seconds var36 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var12, (org.joda.time.ReadableInstant)var21);
    org.joda.time.Duration var37 = var36.toStandardDuration();
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    boolean var42 = var39.isShorterThan((org.joda.time.ReadableDuration)var41);
    org.joda.time.Duration var43 = var39.toDuration();
    boolean var44 = var37.isShorterThan((org.joda.time.ReadableDuration)var43);
    long var45 = var43.getStandardDays();
    int var46 = var9.compareTo((org.joda.time.ReadableDuration)var43);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Interval var47 = var1.withDurationAfterStart((org.joda.time.ReadableDuration)var43);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);

  }

  public void test394() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test394"); }


    org.joda.time.Period var7 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var9 = var7.plusYears((-1));
    org.joda.time.Years var11 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var12 = var11.getPeriodType();
    org.joda.time.Period var13 = var7.normalizedStandard(var12);
    org.joda.time.PeriodType var14 = var12.withMillisRemoved();
    org.joda.time.MutablePeriod var15 = new org.joda.time.MutablePeriod(var12);
    org.joda.time.PeriodType var16 = var12.withYearsRemoved();
    org.joda.time.Period var17 = new org.joda.time.Period(86400000L, var16);
    org.joda.time.LocalDateTime var18 = org.joda.time.LocalDateTime.now();
    int var19 = var18.getDayOfYear();
    org.joda.time.Chronology var20 = var18.getChronology();
    org.joda.time.chrono.StrictChronology var21 = org.joda.time.chrono.StrictChronology.getInstance(var20);
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.LocalDate var24 = var23.toLocalDate();
    org.joda.time.LocalDate var26 = var24.withMonthOfYear(1);
    org.joda.time.LocalDate var28 = var24.withWeekyear(1);
    org.joda.time.LocalDate var30 = var24.withDayOfYear(1);
    org.joda.time.LocalDate var32 = var30.minusMonths(16);
    boolean var33 = var21.equals((java.lang.Object)16);
    java.lang.String var34 = var21.toString();
    org.joda.time.Period var35 = new org.joda.time.Period(1000L, 1377742982607L, var16, (org.joda.time.Chronology)var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Period var37 = var35.minusDays(85450);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "StrictChronology[ISOChronology[UTC]]"+ "'", var34.equals("StrictChronology[ISOChronology[UTC]]"));

  }

  public void test395() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test395"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    boolean var40 = var38.isLeap(4133240044002L);
    org.joda.time.DurationField var41 = var38.getLeapDurationField();
    long var44 = var38.add(1377742992740L, 318);
    long var46 = var38.roundHalfFloor(1377742995215L);
    int var48 = var38.getLeapAmount(1377746597900L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1377742993058L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1377742995215L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);

  }

  public void test396() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test396"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.DateMidnight var4 = var1.minusWeeks((-1));
    org.joda.time.Duration var6 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    var7.setWeekOfWeekyear(1);
    int var10 = var7.getRoundingMode();
    var7.addMillis(100);
    var7.setSecondOfMinute(10);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var16 = new org.joda.time.Period((org.joda.time.ReadableDuration)var6, (org.joda.time.ReadableInstant)var7, var15);
    org.joda.time.Days var17 = var16.toStandardDays();
    org.joda.time.DurationFieldType var18 = var17.getFieldType();
    org.joda.time.DateMidnight var20 = var4.withFieldAdded(var18, 1);
    org.joda.time.field.PreciseDurationField var22 = new org.joda.time.field.PreciseDurationField(var18, 1L);
    long var25 = var22.getMillis(3, 9L);
    int var28 = var22.getValue(9L, 2762381894421796L);
    long var29 = var22.getUnitMillis();
    boolean var30 = var22.isPrecise();
    boolean var31 = var22.isPrecise();
    long var34 = var22.getDifferenceAsLong(1377746581334L, 1377746594906L);
    int var36 = var22.getValue((-13572L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-13572L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-13572));

  }

  public void test397() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test397"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var5 = var0.withDayOfWeek(2);
    org.joda.time.LocalDateTime.Property var6 = var5.yearOfCentury();
    org.joda.time.LocalDateTime var8 = var5.plusHours(69);
    int var9 = var5.getYearOfEra();
    int var10 = var5.size();
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var12 = var11.year();
    org.joda.time.MutableDateTime.Property var13 = var11.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var14);
    org.joda.time.Period var20 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var22 = var20.plusSeconds(100);
    org.joda.time.Period var24 = var20.minusMillis(10);
    boolean var25 = var15.equals((java.lang.Object)10);
    org.joda.time.Weeks var26 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var11, (org.joda.time.ReadableInstant)var15);
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var28 = var27.year();
    org.joda.time.MutableDateTime.Property var29 = var27.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.Period var36 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var38 = var36.plusSeconds(100);
    org.joda.time.Period var40 = var36.minusMillis(10);
    boolean var41 = var31.equals((java.lang.Object)10);
    org.joda.time.Weeks var42 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var27, (org.joda.time.ReadableInstant)var31);
    org.joda.time.Weeks var43 = var26.minus(var42);
    org.joda.time.Weeks var45 = var42.minus(3);
    org.joda.time.LocalDateTime var47 = var5.withPeriodAdded((org.joda.time.ReadablePeriod)var42, 57600100);
    org.joda.time.Hours var48 = var42.toStandardHours();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2013);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test398() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test398"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.YearMonth var2 = new org.joda.time.YearMonth((java.lang.Object)var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test399() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test399"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusSeconds(100);
    org.joda.time.DurationFieldType[] var7 = var6.getFieldTypes();
    org.joda.time.Period var9 = var6.minusMinutes(34);
    org.joda.time.Period var11 = var6.plusMillis(24414959);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test400() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test400"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    boolean var51 = var47.isBefore((org.joda.time.ReadableInstant)var49);
    org.joda.time.Interval var52 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var49);
    boolean var54 = var52.isAfter(10L);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    var55.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var55.setChronology((org.joda.time.Chronology)var58);
    org.joda.time.Interval var60 = var52.withChronology((org.joda.time.Chronology)var58);
    var11.setPeriod((org.joda.time.ReadableInterval)var52);
    var11.addMillis((-1));
    var11.setYears(10);
    var11.clear();
    org.joda.time.chrono.JulianChronology var67 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var68 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var67);
    org.joda.time.LocalDate var69 = var68.toLocalDate();
    org.joda.time.DateMidnight var71 = var68.minusWeeks((-1));
    org.joda.time.Duration var73 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var74 = new org.joda.time.MutableDateTime();
    var74.setWeekOfWeekyear(1);
    int var77 = var74.getRoundingMode();
    var74.addMillis(100);
    var74.setSecondOfMinute(10);
    org.joda.time.PeriodType var82 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var83 = new org.joda.time.Period((org.joda.time.ReadableDuration)var73, (org.joda.time.ReadableInstant)var74, var82);
    org.joda.time.Days var84 = var83.toStandardDays();
    org.joda.time.DurationFieldType var85 = var84.getFieldType();
    org.joda.time.DateMidnight var87 = var71.withFieldAdded(var85, 1);
    var11.add(var85, (-22));
    org.joda.time.chrono.JulianChronology var91 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var92 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var91);
    org.joda.time.LocalDate var93 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var91);
    org.joda.time.DurationField var94 = var91.years();
    var11.add(900L, (org.joda.time.Chronology)var91);
    int var96 = var11.getMonths();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 0);

  }

  public void test401() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test401"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.YearMonth var2 = new org.joda.time.YearMonth(var1);
    org.joda.time.chrono.IslamicChronology var3 = org.joda.time.chrono.IslamicChronology.getInstance(var1);
    org.joda.time.Chronology var4 = var3.withUTC();
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateTimeZone var7 = org.joda.time.DateTimeUtils.getZone(var6);
    org.joda.time.Chronology var8 = var3.withZone(var6);
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.DurationField var28 = var27.getRangeDurationField();
    java.lang.String var29 = var27.toString();
    int var30 = var27.getMinimumValue();
    org.joda.time.field.OffsetDateTimeField var32 = new org.joda.time.field.OffsetDateTimeField((org.joda.time.DateTimeField)var27, 2005);
    java.lang.String var34 = var32.getAsShortText(104L);
    int var37 = var32.getDifference(1377746580759L, 1377746593932L);
    org.joda.time.field.SkipUndoDateTimeField var39 = new org.joda.time.field.SkipUndoDateTimeField(var8, (org.joda.time.DateTimeField)var32, 51);
    org.joda.time.field.DelegatedDateTimeField var40 = new org.joda.time.field.DelegatedDateTimeField((org.joda.time.DateTimeField)var32);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var43 = var32.set(1377768182707L, 38);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "DateTimeField[secondOfDay]"+ "'", var29.equals("DateTimeField[secondOfDay]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "2004"+ "'", var34.equals("2004"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-13));

  }

  public void test402() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test402"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    boolean var51 = var47.isBefore((org.joda.time.ReadableInstant)var49);
    org.joda.time.Interval var52 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var49);
    boolean var54 = var52.isAfter(10L);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    var55.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var55.setChronology((org.joda.time.Chronology)var58);
    org.joda.time.Interval var60 = var52.withChronology((org.joda.time.Chronology)var58);
    var11.setPeriod((org.joda.time.ReadableInterval)var52);
    var11.addMonths(62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test403() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test403"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var2.withWeekyear(1);
    org.joda.time.chrono.EthiopicChronology var7 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var8 = var7.dayOfYear();
    org.joda.time.YearMonthDay var9 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var7);
    int var10 = var9.getYear();
    org.joda.time.Period var13 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var15 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    var16.setWeekOfWeekyear(1);
    int var19 = var16.getRoundingMode();
    var16.addMillis(100);
    var16.setSecondOfMinute(10);
    org.joda.time.PeriodType var24 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var25 = new org.joda.time.Period((org.joda.time.ReadableDuration)var15, (org.joda.time.ReadableInstant)var16, var24);
    org.joda.time.Days var26 = var25.toStandardDays();
    org.joda.time.DurationFieldType var27 = var26.getFieldType();
    int var28 = var13.get(var27);
    org.joda.time.YearMonthDay var29 = var9.minus((org.joda.time.ReadablePeriod)var13);
    org.joda.time.DateTime var30 = var29.toDateTimeAtCurrentTime();
    org.joda.time.chrono.JulianChronology var31 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var32 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var31);
    org.joda.time.LocalDate var33 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var31);
    org.joda.time.DateTimeField var34 = var31.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var35 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var36 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var37 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var36);
    org.joda.time.LocalDate var38 = var37.toLocalDate();
    org.joda.time.LocalDate var40 = var38.minusMonths(0);
    int[] var42 = var35.get((org.joda.time.ReadablePartial)var40, 100L);
    org.joda.time.chrono.EthiopicChronology var46 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var47 = var46.hours();
    org.joda.time.LocalTime var48 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var46);
    org.joda.time.Period var49 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var46);
    org.joda.time.DateTimeField var50 = var46.millisOfSecond();
    org.joda.time.DateTimeField var51 = var46.secondOfDay();
    org.joda.time.field.SkipDateTimeField var53 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var35, var51, 100);
    org.joda.time.LocalDateTime var54 = org.joda.time.LocalDateTime.now();
    int var55 = var54.getDayOfYear();
    org.joda.time.Chronology var56 = var54.getChronology();
    int var57 = var54.getYearOfCentury();
    int var58 = var53.getMaximumValue((org.joda.time.ReadablePartial)var54);
    boolean var60 = var53.isLeap(1L);
    org.joda.time.LocalDateTime var61 = org.joda.time.LocalDateTime.now();
    int var62 = var61.getDayOfYear();
    int var63 = var53.getMinimumValue((org.joda.time.ReadablePartial)var61);
    org.joda.time.DurationField var64 = var53.getDurationField();
    org.joda.time.DateTimeFieldType var65 = var53.getType();
    org.joda.time.field.OffsetDateTimeField var69 = new org.joda.time.field.OffsetDateTimeField(var34, var65, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var72 = new org.joda.time.IllegalFieldValueException(var65, (java.lang.Number)35L, "secondOfDay");
    int var73 = var30.get(var65);
    boolean var74 = var6.isSupported(var65);
    org.joda.time.IllegalFieldValueException var78 = new org.joda.time.IllegalFieldValueException(var65, (java.lang.Number)28, (java.lang.Number)13, (java.lang.Number)402);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2005);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 5037);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test404() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test404"); }


    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var2.setChronology((org.joda.time.Chronology)var5);
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(0L, var1, (org.joda.time.Chronology)var5);
    org.joda.time.DurationField var8 = var5.minutes();
    org.joda.time.MonthDay var9 = org.joda.time.MonthDay.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var10 = var5.centuryOfEra();
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var12 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var13 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var12);
    org.joda.time.LocalDate var14 = var13.toLocalDate();
    org.joda.time.LocalDate var16 = var14.minusMonths(0);
    int[] var18 = var11.get((org.joda.time.ReadablePartial)var16, 100L);
    org.joda.time.chrono.EthiopicChronology var22 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var23 = var22.hours();
    org.joda.time.LocalTime var24 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var22);
    org.joda.time.Period var25 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var22);
    org.joda.time.DateTimeField var26 = var22.millisOfSecond();
    org.joda.time.DateTimeField var27 = var22.secondOfDay();
    org.joda.time.field.SkipDateTimeField var29 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var11, var27, 100);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    org.joda.time.Chronology var32 = var30.getChronology();
    int var33 = var30.getYearOfCentury();
    int var34 = var29.getMaximumValue((org.joda.time.ReadablePartial)var30);
    boolean var36 = var29.isLeap(1L);
    org.joda.time.LocalDateTime var37 = org.joda.time.LocalDateTime.now();
    int var38 = var37.getDayOfYear();
    int var39 = var29.getMinimumValue((org.joda.time.ReadablePartial)var37);
    long var42 = var29.addWrapField(1000L, 15795333);
    int var43 = var29.getMaximumValue();
    java.lang.String var45 = var29.getAsShortText(15946L);
    org.joda.time.field.SkipUndoDateTimeField var46 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology)var5, (org.joda.time.DateTimeField)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 70534000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "16"+ "'", var45.equals("16"));

  }

  public void test405() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test405"); }


    org.joda.time.format.PeriodFormatterBuilder var0 = new org.joda.time.format.PeriodFormatterBuilder();
    org.joda.time.format.PeriodFormatterBuilder var3 = var0.appendSeparator("T07:00:08", "P121961710312T697819483414166.171");
    org.joda.time.format.PeriodFormatterBuilder var5 = var0.appendSeparatorIfFieldsAfter("days");
    org.joda.time.format.PeriodFormatterBuilder var7 = var0.minimumPrintedDigits(17);
    org.joda.time.format.PeriodFormatterBuilder var8 = var7.appendHours();
    org.joda.time.format.PeriodFormatter var9 = org.joda.time.format.ISOPeriodFormat.alternate();
    org.joda.time.format.PeriodPrinter var10 = var9.getPrinter();
    org.joda.time.format.PeriodFormatter var11 = org.joda.time.format.PeriodFormat.getDefault();
    org.joda.time.format.PeriodParser var12 = var11.getParser();
    org.joda.time.format.PeriodFormatterBuilder var13 = var7.append(var10, var12);
    org.joda.time.format.PeriodFormatterBuilder var15 = var7.minimumPrintedDigits(884);
    org.joda.time.format.PeriodFormatterBuilder var16 = var7.appendYears();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test406() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test406"); }


    org.joda.time.Years var1 = org.joda.time.Years.years(510);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test407() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test407"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Hours var1 = org.joda.time.Hours.parseHours("T\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD.000");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test408() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test408"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = var3.toLocalDate();
    org.joda.time.LocalDate var6 = var4.minusMonths(0);
    int[] var8 = var1.get((org.joda.time.ReadablePartial)var6, 100L);
    org.joda.time.chrono.EthiopicChronology var12 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var13 = var12.hours();
    org.joda.time.LocalTime var14 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var12);
    org.joda.time.Period var15 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var12);
    org.joda.time.DateTimeField var16 = var12.millisOfSecond();
    org.joda.time.DateTimeField var17 = var12.secondOfDay();
    org.joda.time.field.SkipDateTimeField var19 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var1, var17, 100);
    org.joda.time.LocalDateTime var20 = org.joda.time.LocalDateTime.now();
    int var21 = var20.getDayOfYear();
    org.joda.time.Chronology var22 = var20.getChronology();
    int var23 = var20.getYearOfCentury();
    int var24 = var19.getMaximumValue((org.joda.time.ReadablePartial)var20);
    int var25 = var20.getSecondOfMinute();
    int var26 = var20.getDayOfYear();
    org.joda.time.LocalDateTime var28 = var20.withMillisOfSecond(692);
    org.joda.time.DateTimeZone var30 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var31 = org.joda.time.chrono.JulianChronology.getInstance(var30);
    org.joda.time.LocalTime var32 = org.joda.time.LocalTime.now((org.joda.time.Chronology)var31);
    boolean var33 = var20.equals((java.lang.Object)var32);
    org.joda.time.Minutes var34 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadablePartial)var0, (org.joda.time.ReadablePartial)var20);
    org.joda.time.LocalDateTime.Property var35 = var20.era();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test409() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test409"); }


    org.joda.time.chrono.ISOChronology var0 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var5 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var7 = var5.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var9 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstance(var9);
    long var12 = var5.getMillisKeepLocal(var9, 1377746580759L);
    org.joda.time.Chronology var13 = var0.withZone(var9);
    org.joda.time.MonthDay var14 = org.joda.time.MonthDay.now(var9);
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.LocalDate var17 = var16.toLocalDate();
    org.joda.time.LocalDate var19 = var17.withMonthOfYear(1);
    org.joda.time.LocalDate var21 = var17.plusDays(10);
    org.joda.time.Interval var22 = var17.toInterval();
    org.joda.time.LocalDate var24 = var17.minusDays(11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Months var25 = org.joda.time.Months.monthsBetween((org.joda.time.ReadablePartial)var14, (org.joda.time.ReadablePartial)var24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test410() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test410"); }


    org.joda.time.chrono.JulianChronology var7 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var8 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var7);
    org.joda.time.LocalDate var9 = var8.toLocalDate();
    org.joda.time.DateMidnight var11 = var8.minusWeeks((-1));
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var14 = new org.joda.time.MutableDateTime();
    var14.setWeekOfWeekyear(1);
    int var17 = var14.getRoundingMode();
    var14.addMillis(100);
    var14.setSecondOfMinute(10);
    org.joda.time.PeriodType var22 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var23 = new org.joda.time.Period((org.joda.time.ReadableDuration)var13, (org.joda.time.ReadableInstant)var14, var22);
    org.joda.time.Days var24 = var23.toStandardDays();
    org.joda.time.DurationFieldType var25 = var24.getFieldType();
    org.joda.time.DateMidnight var27 = var11.withFieldAdded(var25, 1);
    org.joda.time.MutableInterval var28 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var29 = var28.copy();
    org.joda.time.DateTime var30 = var29.getStart();
    org.joda.time.Duration var32 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    boolean var35 = var32.isShorterThan((org.joda.time.ReadableDuration)var34);
    org.joda.time.Duration var36 = var32.toDuration();
    org.joda.time.chrono.JulianChronology var37 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var38 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var37);
    org.joda.time.LocalDate var39 = var38.toLocalDate();
    org.joda.time.MutableDateTime var40 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var41 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var38, (org.joda.time.ReadableInstant)var40);
    org.joda.time.MutableDateTime var42 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var43 = var42.year();
    boolean var44 = var40.isBefore((org.joda.time.ReadableInstant)var42);
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var48 = org.joda.time.Duration.standardHours((-1L));
    boolean var49 = var46.isShorterThan((org.joda.time.ReadableDuration)var48);
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    boolean var54 = var51.isShorterThan((org.joda.time.ReadableDuration)var53);
    org.joda.time.Duration var55 = var46.plus((org.joda.time.ReadableDuration)var51);
    var42.add((org.joda.time.ReadableDuration)var51);
    org.joda.time.PeriodType var57 = org.joda.time.PeriodType.months();
    org.joda.time.Period var58 = new org.joda.time.Period((org.joda.time.ReadableDuration)var32, (org.joda.time.ReadableInstant)var42, var57);
    org.joda.time.MutablePeriod var59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var11, (org.joda.time.ReadableInstant)var30, var57);
    org.joda.time.chrono.EthiopicChronology var61 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var62 = var61.minutes();
    org.joda.time.DateTimeField var63 = var61.year();
    org.joda.time.DateTimeField var64 = var61.millisOfDay();
    org.joda.time.DateTimeField var65 = var61.centuryOfEra();
    var59.setPeriod(3600001L, (org.joda.time.Chronology)var61);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var67 = new org.joda.time.LocalDateTime((-85451), (-22), 15946, 970, 73392, 14, 215, (org.joda.time.Chronology)var61);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test411() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test411"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    org.joda.time.DateTime var29 = var5.toDateTime();
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours(1377746581334L);
    org.joda.time.DateTime var32 = var29.plus((org.joda.time.ReadableDuration)var31);
    org.joda.time.LocalDateTime var33 = var29.toLocalDateTime();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test412() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test412"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withCenturyOfEra(4);
    org.joda.time.DateTime.Property var8 = var7.monthOfYear();
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.Period var15 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var17 = var15.plusSeconds(100);
    org.joda.time.Period var19 = var15.minusMillis(10);
    boolean var20 = var10.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var21 = var10.dayOfYear();
    org.joda.time.chrono.JulianChronology var22 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var23 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var22);
    org.joda.time.LocalDate var24 = var23.toLocalDate();
    org.joda.time.LocalDate var26 = var24.minusMonths(0);
    org.joda.time.DateTime var27 = var24.toDateTimeAtMidnight();
    org.joda.time.DateTime var29 = var27.withCenturyOfEra(4);
    org.joda.time.Days var30 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var29);
    org.joda.time.DateTime var32 = var29.plusSeconds(10);
    boolean var33 = var7.isAfter((org.joda.time.ReadableInstant)var29);
    org.joda.time.DateTime var35 = var29.withWeekOfWeekyear(2);
    org.joda.time.Instant var36 = new org.joda.time.Instant();
    org.joda.time.Instant var37 = var36.toInstant();
    org.joda.time.PeriodType var38 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var39 = new org.joda.time.MutablePeriod(var38);
    var39.addDays(1);
    org.joda.time.Duration var43 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var45 = org.joda.time.Duration.standardHours((-1L));
    boolean var46 = var43.isShorterThan((org.joda.time.ReadableDuration)var45);
    var39.add((org.joda.time.ReadableDuration)var45);
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    boolean var52 = var49.isShorterThan((org.joda.time.ReadableDuration)var51);
    org.joda.time.Duration var53 = var49.toDuration();
    org.joda.time.chrono.JulianChronology var54 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var55 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var54);
    org.joda.time.LocalDate var56 = var55.toLocalDate();
    org.joda.time.MutableDateTime var57 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var58 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var55, (org.joda.time.ReadableInstant)var57);
    org.joda.time.MutableDateTime var59 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var60 = var59.year();
    boolean var61 = var57.isBefore((org.joda.time.ReadableInstant)var59);
    org.joda.time.Duration var63 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var65 = org.joda.time.Duration.standardHours((-1L));
    boolean var66 = var63.isShorterThan((org.joda.time.ReadableDuration)var65);
    org.joda.time.Duration var68 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var70 = org.joda.time.Duration.standardHours((-1L));
    boolean var71 = var68.isShorterThan((org.joda.time.ReadableDuration)var70);
    org.joda.time.Duration var72 = var63.plus((org.joda.time.ReadableDuration)var68);
    var59.add((org.joda.time.ReadableDuration)var68);
    org.joda.time.PeriodType var74 = org.joda.time.PeriodType.months();
    org.joda.time.Period var75 = new org.joda.time.Period((org.joda.time.ReadableDuration)var49, (org.joda.time.ReadableInstant)var59, var74);
    org.joda.time.Period var76 = new org.joda.time.Period((org.joda.time.ReadableInstant)var37, (org.joda.time.ReadableDuration)var45, var74);
    org.joda.time.Period var77 = new org.joda.time.Period((org.joda.time.ReadableInstant)var35, (org.joda.time.ReadableInstant)var37);
    org.joda.time.LocalTime var78 = var35.toLocalTime();
    org.joda.time.MutableInterval var79 = new org.joda.time.MutableInterval();
    long var80 = var79.getEndMillis();
    org.joda.time.Months var81 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var79);
    org.joda.time.Months var83 = var81.plus(240);
    org.joda.time.Months var85 = var81.multipliedBy(240);
    org.joda.time.MutablePeriod var86 = var85.toMutablePeriod();
    org.joda.time.DateTime var88 = var35.withPeriodAdded((org.joda.time.ReadablePeriod)var85, 692);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test413() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test413"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.DateTimeField var3 = var1.minuteOfHour();
    org.joda.time.LocalDate var4 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalDate.Property var5 = var4.weekyear();
    java.lang.String var6 = var4.toString();
    org.joda.time.LocalDateTime var8 = org.joda.time.LocalDateTime.now();
    int var9 = var8.getDayOfYear();
    org.joda.time.Chronology var10 = var8.getChronology();
    org.joda.time.chrono.StrictChronology var11 = org.joda.time.chrono.StrictChronology.getInstance(var10);
    org.joda.time.chrono.EthiopicChronology var12 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var13 = var12.hours();
    org.joda.time.DateTimeField var14 = var12.minuteOfHour();
    boolean var15 = var11.equals((java.lang.Object)var12);
    org.joda.time.Chronology var16 = var12.withUTC();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay((-3600L), (org.joda.time.Chronology)var12);
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.Period var24 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var26 = var24.plusSeconds(100);
    org.joda.time.Period var28 = var24.minusMillis(10);
    boolean var29 = var19.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var30 = var19.dayOfYear();
    int var31 = var19.getSecondOfDay();
    org.joda.time.DateMidnight var33 = var19.withWeekyear(240);
    org.joda.time.DateMidnight var35 = var33.minusMonths(28);
    org.joda.time.DateTimeZone var36 = var35.getZone();
    org.joda.time.DateTime var37 = var4.toDateTime(var17, var36);
    int var38 = var4.getDayOfYear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "1962-04-23"+ "'", var6.equals("1962-04-23"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 113);

  }

  public void test414() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test414"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    var0.setWeekOfWeekyear(42);

  }

  public void test415() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test415"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.LocalDate var3 = new org.joda.time.LocalDate(var2);
    org.joda.time.LocalDate.Property var4 = var3.dayOfYear();
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var7 = org.joda.time.MutableDateTime.now(var6);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = var9.toLocalDate();
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var12 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var9, (org.joda.time.ReadableInstant)var11);
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.LocalDate var15 = var14.toLocalDate();
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var17 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var14, (org.joda.time.ReadableInstant)var16);
    org.joda.time.MutableDateTime var18 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var19 = var18.year();
    boolean var20 = var16.isBefore((org.joda.time.ReadableInstant)var18);
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var24 = org.joda.time.Duration.standardHours((-1L));
    boolean var25 = var22.isShorterThan((org.joda.time.ReadableDuration)var24);
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    boolean var30 = var27.isShorterThan((org.joda.time.ReadableDuration)var29);
    org.joda.time.Duration var31 = var22.plus((org.joda.time.ReadableDuration)var27);
    var18.add((org.joda.time.ReadableDuration)var27);
    org.joda.time.Seconds var33 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var9, (org.joda.time.ReadableInstant)var18);
    var18.setWeekOfWeekyear(28);
    org.joda.time.DateTime var36 = org.joda.time.DateTime.now();
    long var37 = var36.getMillis();
    var18.setMillis((org.joda.time.ReadableInstant)var36);
    org.joda.time.DateTimeZone var39 = var18.getZone();
    long var41 = var6.getMillisKeepLocal(var39, 1377742981948L);
    org.joda.time.DateTime var42 = var3.toDateTimeAtStartOfDay(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1377739437840L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1377742982607L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test416() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test416"); }


    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var2.setChronology((org.joda.time.Chronology)var5);
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(0L, var1, (org.joda.time.Chronology)var5);
    org.joda.time.LocalTime var8 = new org.joda.time.LocalTime((org.joda.time.Chronology)var5);
    org.joda.time.LocalTime.Property var9 = var8.millisOfSecond();
    org.joda.time.TimeOfDay var10 = new org.joda.time.TimeOfDay();
    org.joda.time.TimeOfDay var12 = var10.minusHours(4);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Period var25 = new org.joda.time.Period((org.joda.time.ReadablePartial)var8, (org.joda.time.ReadablePartial)var12, var23);
    org.joda.time.Period var27 = org.joda.time.Period.weeks(22);
    org.joda.time.TimeOfDay var28 = var12.minus((org.joda.time.ReadablePeriod)var27);
    org.joda.time.PeriodType var29 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var30 = new org.joda.time.MutablePeriod(var29);
    var30.addDays(1);
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    boolean var37 = var34.isShorterThan((org.joda.time.ReadableDuration)var36);
    var30.add((org.joda.time.ReadableDuration)var36);
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var36, (org.joda.time.ReadableInstant)var39);
    var40.setSeconds(1);
    int var43 = var40.getSeconds();
    org.joda.time.TimeOfDay var44 = new org.joda.time.TimeOfDay();
    int var45 = var44.size();
    org.joda.time.chrono.EthiopicChronology var47 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var48 = var47.hours();
    org.joda.time.LocalTime var49 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var47);
    org.joda.time.LocalTime var51 = var49.withMillisOfSecond(1);
    org.joda.time.LocalTime var53 = var51.minusHours((-1));
    org.joda.time.Years var54 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var44, (org.joda.time.ReadablePartial)var53);
    org.joda.time.DurationFieldType var55 = var54.getFieldType();
    org.joda.time.IllegalFieldValueException var59 = new org.joda.time.IllegalFieldValueException(var55, (java.lang.Number)10.0d, (java.lang.Number)1377746681334L, (java.lang.Number)1377742981948L);
    int var60 = var40.get(var55);
    org.joda.time.IllegalFieldValueException var64 = new org.joda.time.IllegalFieldValueException(var55, (java.lang.Number)1377746599106L, (java.lang.Number)73381948, (java.lang.Number)1377768182717035L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.TimeOfDay var66 = var28.withFieldAdded(var55, 3827137);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);

  }

  public void test417() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test417"); }


    org.joda.time.PeriodType var1 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var2.setChronology((org.joda.time.Chronology)var5);
    org.joda.time.MutablePeriod var7 = new org.joda.time.MutablePeriod(0L, var1, (org.joda.time.Chronology)var5);
    var7.setPeriod((-1L), 3L);
    org.joda.time.Duration var12 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var13 = new org.joda.time.MutableDateTime();
    var13.setWeekOfWeekyear(1);
    int var16 = var13.getRoundingMode();
    var13.addMillis(100);
    var13.setSecondOfMinute(10);
    org.joda.time.PeriodType var21 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var22 = new org.joda.time.Period((org.joda.time.ReadableDuration)var12, (org.joda.time.ReadableInstant)var13, var21);
    org.joda.time.Days var23 = var22.toStandardDays();
    org.joda.time.Hours var24 = var23.toStandardHours();
    java.lang.String var25 = var24.toString();
    org.joda.time.Days var26 = var24.toStandardDays();
    org.joda.time.Minutes var27 = var26.toStandardMinutes();
    int var28 = var26.size();
    java.lang.String var29 = var26.toString();
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = var31.toLocalDate();
    org.joda.time.DateMidnight var34 = var31.minusWeeks((-1));
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var37 = new org.joda.time.MutableDateTime();
    var37.setWeekOfWeekyear(1);
    int var40 = var37.getRoundingMode();
    var37.addMillis(100);
    var37.setSecondOfMinute(10);
    org.joda.time.PeriodType var45 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var46 = new org.joda.time.Period((org.joda.time.ReadableDuration)var36, (org.joda.time.ReadableInstant)var37, var45);
    org.joda.time.Days var47 = var46.toStandardDays();
    org.joda.time.DurationFieldType var48 = var47.getFieldType();
    org.joda.time.DateMidnight var50 = var34.withFieldAdded(var48, 1);
    org.joda.time.MutableInterval var51 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var52 = var51.copy();
    org.joda.time.DateTime var53 = var52.getStart();
    org.joda.time.Duration var55 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var57 = org.joda.time.Duration.standardHours((-1L));
    boolean var58 = var55.isShorterThan((org.joda.time.ReadableDuration)var57);
    org.joda.time.Duration var59 = var55.toDuration();
    org.joda.time.chrono.JulianChronology var60 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var61 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var60);
    org.joda.time.LocalDate var62 = var61.toLocalDate();
    org.joda.time.MutableDateTime var63 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var64 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var61, (org.joda.time.ReadableInstant)var63);
    org.joda.time.MutableDateTime var65 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var66 = var65.year();
    boolean var67 = var63.isBefore((org.joda.time.ReadableInstant)var65);
    org.joda.time.Duration var69 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var71 = org.joda.time.Duration.standardHours((-1L));
    boolean var72 = var69.isShorterThan((org.joda.time.ReadableDuration)var71);
    org.joda.time.Duration var74 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var76 = org.joda.time.Duration.standardHours((-1L));
    boolean var77 = var74.isShorterThan((org.joda.time.ReadableDuration)var76);
    org.joda.time.Duration var78 = var69.plus((org.joda.time.ReadableDuration)var74);
    var65.add((org.joda.time.ReadableDuration)var74);
    org.joda.time.PeriodType var80 = org.joda.time.PeriodType.months();
    org.joda.time.Period var81 = new org.joda.time.Period((org.joda.time.ReadableDuration)var55, (org.joda.time.ReadableInstant)var65, var80);
    org.joda.time.MutablePeriod var82 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var34, (org.joda.time.ReadableInstant)var53, var80);
    org.joda.time.DateMidnight var84 = var34.withYear(33);
    org.joda.time.MutableInterval var85 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod)var26, (org.joda.time.ReadableInstant)var84);
    var7.setPeriod((org.joda.time.ReadableInterval)var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "PT0H"+ "'", var25.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "P0D"+ "'", var29.equals("P0D"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test418() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test418"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    var0.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var3 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var0.setChronology((org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var5 = var3.clockhourOfHalfday();
    org.joda.time.format.DateTimeFormatterBuilder var6 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var8 = var6.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var6.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var14 = var11.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = var17.toLocalDate();
    org.joda.time.LocalDate var20 = var18.minusMonths(0);
    int[] var22 = var15.get((org.joda.time.ReadablePartial)var20, 100L);
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var26);
    org.joda.time.Period var29 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var26);
    org.joda.time.DateTimeField var30 = var26.millisOfSecond();
    org.joda.time.DateTimeField var31 = var26.secondOfDay();
    org.joda.time.field.SkipDateTimeField var33 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var15, var31, 100);
    org.joda.time.LocalDateTime var34 = org.joda.time.LocalDateTime.now();
    int var35 = var34.getDayOfYear();
    org.joda.time.Chronology var36 = var34.getChronology();
    int var37 = var34.getYearOfCentury();
    int var38 = var33.getMaximumValue((org.joda.time.ReadablePartial)var34);
    boolean var40 = var33.isLeap(1L);
    org.joda.time.LocalDateTime var41 = org.joda.time.LocalDateTime.now();
    int var42 = var41.getDayOfYear();
    int var43 = var33.getMinimumValue((org.joda.time.ReadablePartial)var41);
    org.joda.time.DurationField var44 = var33.getDurationField();
    org.joda.time.DateTimeFieldType var45 = var33.getType();
    org.joda.time.field.OffsetDateTimeField var49 = new org.joda.time.field.OffsetDateTimeField(var14, var45, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var52 = new org.joda.time.IllegalFieldValueException(var45, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var55 = var6.appendFraction(var45, 33, (-948));
    org.joda.time.field.DividedDateTimeField var57 = new org.joda.time.field.DividedDateTimeField(var5, var45, 100);
    long var60 = var57.add((-86386600L), 13);
    org.joda.time.field.RemainderDateTimeField var61 = new org.joda.time.field.RemainderDateTimeField(var57);
    long var63 = var61.roundHalfEven(1325559981L);
    int var64 = var61.getMinimumValue();
    long var66 = var61.roundCeiling(1377742980900L);
    long var68 = var61.roundCeiling(1377746597622L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 4593613400L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1324800000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1377745200000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1377748800000L);

  }

  public void test419() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test419"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.now();
    boolean var7 = var5.isAfter((org.joda.time.ReadablePartial)var6);
    java.lang.String var8 = var6.toString();
    int var9 = var6.getSecondOfMinute();
    org.joda.time.Partial var10 = new org.joda.time.Partial((org.joda.time.ReadablePartial)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "01:23:58.030"+ "'", var8.equals("01:23:58.030"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 58);

  }

  public void test420() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test420"); }


    org.joda.time.LocalDate var1 = org.joda.time.LocalDate.parse("80");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test421() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test421"); }


    org.joda.time.chrono.EthiopicChronology var1 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var2 = var1.hours();
    org.joda.time.LocalTime var3 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var1);
    org.joda.time.LocalTime var5 = var3.withMillisOfSecond(1);
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.now();
    boolean var7 = var5.isAfter((org.joda.time.ReadablePartial)var6);
    org.joda.time.chrono.JulianChronology var8 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var8);
    org.joda.time.LocalDate var10 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var8);
    org.joda.time.DurationField var11 = var8.hours();
    boolean var12 = var6.equals((java.lang.Object)var8);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    var15.setWeekOfWeekyear(1);
    int var18 = var15.getRoundingMode();
    var15.addMillis(100);
    var15.setSecondOfMinute(10);
    org.joda.time.PeriodType var23 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var24 = new org.joda.time.Period((org.joda.time.ReadableDuration)var14, (org.joda.time.ReadableInstant)var15, var23);
    org.joda.time.Days var25 = var24.toStandardDays();
    org.joda.time.LocalTime var26 = var6.minus((org.joda.time.ReadablePeriod)var24);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    var29.setWeekOfWeekyear(1);
    int var32 = var29.getRoundingMode();
    var29.addMillis(100);
    var29.setSecondOfMinute(10);
    org.joda.time.PeriodType var37 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var38 = new org.joda.time.Period((org.joda.time.ReadableDuration)var28, (org.joda.time.ReadableInstant)var29, var37);
    org.joda.time.Days var39 = var38.toStandardDays();
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var40);
    org.joda.time.Period var46 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var48 = var46.plusSeconds(100);
    org.joda.time.Period var50 = var46.minusMillis(10);
    boolean var51 = var41.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var52 = var41.dayOfYear();
    org.joda.time.chrono.JulianChronology var53 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var54 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var53);
    org.joda.time.LocalDate var55 = var54.toLocalDate();
    org.joda.time.LocalDate var57 = var55.minusMonths(0);
    org.joda.time.DateTime var58 = var55.toDateTimeAtMidnight();
    org.joda.time.DateTime var60 = var58.withCenturyOfEra(4);
    org.joda.time.Days var61 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var41, (org.joda.time.ReadableInstant)var60);
    org.joda.time.Days var63 = var61.dividedBy(1);
    boolean var64 = var39.isGreaterThan(var61);
    org.joda.time.DurationFieldType var65 = var39.getFieldType();
    org.joda.time.Period var67 = var24.withField(var65, 0);
    org.joda.time.Period var69 = var67.minusHours(147);
    org.joda.time.Weeks var70 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod)var67);
    org.joda.time.Hours var71 = var70.toStandardHours();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test422() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test422"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    int var2 = var1.getSeconds();
    int var3 = var1.getMonths();
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.chrono.ISOChronology var7 = org.joda.time.chrono.ISOChronology.getInstance(var6);
    org.joda.time.DurationField var8 = var7.millis();
    var1.add((-7200000L), (org.joda.time.Chronology)var7);
    org.joda.time.YearMonth var10 = new org.joda.time.YearMonth((org.joda.time.Chronology)var7);
    org.joda.time.YearMonth.Property var11 = var10.year();
    org.joda.time.DateTimeFieldType[] var12 = var10.getFieldTypes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test423() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test423"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusDays((-1));
    org.joda.time.YearMonthDay var6 = var4.plusMonths(12196171);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test424() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test424"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    org.joda.time.LocalTime var1 = var0.toLocalTime();
    java.lang.String var2 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "2013-08-29T01:23:58.289"+ "'", var2.equals("2013-08-29T01:23:58.289"));

  }

  public void test425() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test425"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusDays((-1));
    org.joda.time.DateTime var5 = var4.toDateTimeAtCurrentTime();
    org.joda.time.chrono.JulianChronology var6 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var7 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var6);
    org.joda.time.LocalDate var8 = var7.toLocalDate();
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var9);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = var12.toLocalDate();
    org.joda.time.MutableDateTime var14 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var15 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var12, (org.joda.time.ReadableInstant)var14);
    org.joda.time.MutableDateTime var16 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var17 = var16.year();
    boolean var18 = var14.isBefore((org.joda.time.ReadableInstant)var16);
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var22 = org.joda.time.Duration.standardHours((-1L));
    boolean var23 = var20.isShorterThan((org.joda.time.ReadableDuration)var22);
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    boolean var28 = var25.isShorterThan((org.joda.time.ReadableDuration)var27);
    org.joda.time.Duration var29 = var20.plus((org.joda.time.ReadableDuration)var25);
    var16.add((org.joda.time.ReadableDuration)var25);
    org.joda.time.Seconds var31 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var16);
    org.joda.time.Duration var32 = var31.toStandardDuration();
    org.joda.time.Duration var34 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var36 = org.joda.time.Duration.standardHours((-1L));
    boolean var37 = var34.isShorterThan((org.joda.time.ReadableDuration)var36);
    org.joda.time.Duration var38 = var34.toDuration();
    boolean var39 = var32.isShorterThan((org.joda.time.ReadableDuration)var38);
    org.joda.time.Hours var40 = var38.toStandardHours();
    org.joda.time.Duration var42 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var43 = new org.joda.time.MutableDateTime();
    var43.setWeekOfWeekyear(1);
    int var46 = var43.getRoundingMode();
    var43.addMillis(100);
    var43.setSecondOfMinute(10);
    org.joda.time.PeriodType var51 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var52 = new org.joda.time.Period((org.joda.time.ReadableDuration)var42, (org.joda.time.ReadableInstant)var43, var51);
    org.joda.time.Days var53 = var52.toStandardDays();
    org.joda.time.Hours var54 = var53.toStandardHours();
    org.joda.time.Duration var56 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var57 = new org.joda.time.MutableDateTime();
    var57.setWeekOfWeekyear(1);
    int var60 = var57.getRoundingMode();
    var57.addMillis(100);
    var57.setSecondOfMinute(10);
    org.joda.time.PeriodType var65 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var66 = new org.joda.time.Period((org.joda.time.ReadableDuration)var56, (org.joda.time.ReadableInstant)var57, var65);
    org.joda.time.Days var67 = var66.toStandardDays();
    org.joda.time.Hours var68 = var67.toStandardHours();
    java.lang.String var69 = var68.toString();
    org.joda.time.Hours var70 = var54.plus(var68);
    org.joda.time.Hours var71 = var40.plus(var70);
    org.joda.time.YearMonthDay var72 = var4.plus((org.joda.time.ReadablePeriod)var70);
    int var73 = var4.size();
    org.joda.time.chrono.JulianChronology var74 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var75 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var74);
    org.joda.time.LocalDate var76 = var75.toLocalDate();
    org.joda.time.DateMidnight var78 = var75.minusWeeks((-1));
    org.joda.time.Duration var80 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var81 = new org.joda.time.MutableDateTime();
    var81.setWeekOfWeekyear(1);
    int var84 = var81.getRoundingMode();
    var81.addMillis(100);
    var81.setSecondOfMinute(10);
    org.joda.time.PeriodType var89 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var90 = new org.joda.time.Period((org.joda.time.ReadableDuration)var80, (org.joda.time.ReadableInstant)var81, var89);
    org.joda.time.Days var91 = var90.toStandardDays();
    org.joda.time.DurationFieldType var92 = var91.getFieldType();
    org.joda.time.DateMidnight var94 = var78.withFieldAdded(var92, 1);
    org.joda.time.YearMonthDay var96 = var4.withFieldAdded(var92, 33);
    org.joda.time.YearMonthDay.Property var97 = var4.dayOfMonth();
    org.joda.time.DateTime var98 = var4.toDateTimeAtMidnight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "PT0H"+ "'", var69.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test426() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test426"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    org.joda.time.TimeOfDay var2 = var0.minusMinutes((-1377742992));
    org.joda.time.TimeOfDay.Property var3 = var0.minuteOfHour();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test427() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test427"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    org.joda.time.DateTime.Property var8 = var7.era();
    org.joda.time.TimeOfDay var9 = var7.toTimeOfDay();
    org.joda.time.TimeOfDay var11 = var9.plusSeconds(100);
    org.joda.time.chrono.JulianChronology var12 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var13 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var12);
    org.joda.time.LocalDate var14 = var13.toLocalDate();
    org.joda.time.MutableDateTime var15 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var16 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var13, (org.joda.time.ReadableInstant)var15);
    org.joda.time.chrono.JulianChronology var17 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var18 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var17);
    org.joda.time.LocalDate var19 = var18.toLocalDate();
    org.joda.time.MutableDateTime var20 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var21 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var18, (org.joda.time.ReadableInstant)var20);
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var23 = var22.year();
    boolean var24 = var20.isBefore((org.joda.time.ReadableInstant)var22);
    org.joda.time.Duration var26 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    boolean var29 = var26.isShorterThan((org.joda.time.ReadableDuration)var28);
    org.joda.time.Duration var31 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    boolean var34 = var31.isShorterThan((org.joda.time.ReadableDuration)var33);
    org.joda.time.Duration var35 = var26.plus((org.joda.time.ReadableDuration)var31);
    var22.add((org.joda.time.ReadableDuration)var31);
    org.joda.time.Seconds var37 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var13, (org.joda.time.ReadableInstant)var22);
    org.joda.time.Duration var38 = var37.toStandardDuration();
    org.joda.time.TimeOfDay var40 = var11.withPeriodAdded((org.joda.time.ReadablePeriod)var37, 948);
    org.joda.time.LocalTime var41 = var11.toLocalTime();
    int var42 = var41.getMinuteOfHour();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);

  }

  public void test428() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test428"); }


    org.joda.time.Period var4 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var6 = var4.plusYears((-1));
    org.joda.time.Minutes var7 = var4.toStandardMinutes();
    org.joda.time.Minutes var9 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var10 = var7.minus(var9);
    org.joda.time.DurationFieldType var11 = var10.getFieldType();
    org.joda.time.Duration var12 = var10.toStandardDuration();
    org.joda.time.Seconds var13 = var10.toStandardSeconds();
    org.joda.time.Seconds var15 = var13.multipliedBy(73392);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test429() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test429"); }


    org.joda.time.tz.FixedDateTimeZone var4 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    boolean var5 = var4.isFixed();
    java.lang.String var7 = var4.getNameKey(1377735836917L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));

  }

  public void test430() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test430"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var5);
    org.joda.time.DateTimeField var8 = var5.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.chrono.EthiopicChronology var20 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var21 = var20.hours();
    org.joda.time.LocalTime var22 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var20);
    org.joda.time.Period var23 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var20);
    org.joda.time.DateTimeField var24 = var20.millisOfSecond();
    org.joda.time.DateTimeField var25 = var20.secondOfDay();
    org.joda.time.field.SkipDateTimeField var27 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25, 100);
    org.joda.time.LocalDateTime var28 = org.joda.time.LocalDateTime.now();
    int var29 = var28.getDayOfYear();
    org.joda.time.Chronology var30 = var28.getChronology();
    int var31 = var28.getYearOfCentury();
    int var32 = var27.getMaximumValue((org.joda.time.ReadablePartial)var28);
    boolean var34 = var27.isLeap(1L);
    org.joda.time.LocalDateTime var35 = org.joda.time.LocalDateTime.now();
    int var36 = var35.getDayOfYear();
    int var37 = var27.getMinimumValue((org.joda.time.ReadablePartial)var35);
    org.joda.time.DurationField var38 = var27.getDurationField();
    org.joda.time.DateTimeFieldType var39 = var27.getType();
    org.joda.time.field.OffsetDateTimeField var43 = new org.joda.time.field.OffsetDateTimeField(var8, var39, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var46 = new org.joda.time.IllegalFieldValueException(var39, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var49 = var0.appendFraction(var39, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.minutes();
    org.joda.time.DateTimeField var52 = var50.year();
    org.joda.time.DurationField var53 = var50.hours();
    org.joda.time.field.UnsupportedDateTimeField var54 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var39, var53);
    long var57 = var54.add((-1000L), 1377742981L);
    boolean var58 = var54.isLenient();
    long var61 = var54.add(1377742999393L, 12194);
    int var64 = var54.getDifference(2762376429621796L, (-703463L));
    long var67 = var54.getDifferenceAsLong(1377735830915L, (-86390600L));
    long var70 = var54.getDifferenceAsLong(2755489629828L, 2755493225160L);
    long var73 = var54.add(1980000000L, 43898399991L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 4959874731599000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1421641399393L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 767326786);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 382728L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 158034241947600000L);

  }

  public void test431() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test431"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var5 = var4.hours();
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var4);
    org.joda.time.Period var7 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var4);
    org.joda.time.DateTimeField var8 = var4.millisOfSecond();
    org.joda.time.chrono.LenientChronology var9 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var4);
    org.joda.time.format.DateTimeFormatter var10 = var0.withChronology((org.joda.time.Chronology)var9);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = var12.toLocalDate();
    org.joda.time.LocalDate var15 = var13.withMonthOfYear(1);
    org.joda.time.LocalDate var17 = var13.withWeekyear(1);
    org.joda.time.LocalDate var19 = var13.withDayOfYear(1);
    boolean var20 = var9.equals((java.lang.Object)var19);
    org.joda.time.LocalDate var21 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var9);
    java.util.Date var22 = var21.toDate();
    org.joda.time.LocalDate var23 = org.joda.time.LocalDate.fromDateFields(var22);
    org.joda.time.LocalDate.Property var24 = var23.year();
    int var25 = var23.getEra();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1);

  }

  public void test432() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test432"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    int var3 = var2.getYear();
    org.joda.time.Period var6 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Duration var8 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var9 = new org.joda.time.MutableDateTime();
    var9.setWeekOfWeekyear(1);
    int var12 = var9.getRoundingMode();
    var9.addMillis(100);
    var9.setSecondOfMinute(10);
    org.joda.time.PeriodType var17 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var18 = new org.joda.time.Period((org.joda.time.ReadableDuration)var8, (org.joda.time.ReadableInstant)var9, var17);
    org.joda.time.Days var19 = var18.toStandardDays();
    org.joda.time.DurationFieldType var20 = var19.getFieldType();
    int var21 = var6.get(var20);
    org.joda.time.YearMonthDay var22 = var2.minus((org.joda.time.ReadablePeriod)var6);
    org.joda.time.DateTime var23 = var22.toDateTimeAtCurrentTime();
    org.joda.time.DateTime var25 = var23.plus((-3600000L));
    org.joda.time.DateTime var27 = var25.withMinuteOfHour(16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.DateTime var29 = var25.withMinuteOfHour(906);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2005);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test433() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test433"); }


    org.joda.time.TimeOfDay var0 = new org.joda.time.TimeOfDay();
    int var1 = var0.size();
    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.LocalTime var7 = var5.withMillisOfSecond(1);
    org.joda.time.LocalTime var9 = var7.minusHours((-1));
    org.joda.time.Years var10 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var0, (org.joda.time.ReadablePartial)var9);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var12 = var11.dayOfYear();
    org.joda.time.YearMonthDay var13 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var11);
    org.joda.time.TimeOfDay var14 = var0.withChronologyRetainFields((org.joda.time.Chronology)var11);
    org.joda.time.PeriodType var15 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod(var15);
    int var17 = var16.getSeconds();
    int var18 = var16.getMonths();
    org.joda.time.DateTimeZone var21 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.chrono.ISOChronology var22 = org.joda.time.chrono.ISOChronology.getInstance(var21);
    org.joda.time.DurationField var23 = var22.millis();
    var16.add((-7200000L), (org.joda.time.Chronology)var22);
    org.joda.time.YearMonth var25 = new org.joda.time.YearMonth((org.joda.time.Chronology)var22);
    org.joda.time.Period var30 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var32 = var30.plusYears((-1));
    org.joda.time.Minutes var33 = var30.toStandardMinutes();
    org.joda.time.Minutes var35 = org.joda.time.Minutes.minutes(10);
    org.joda.time.Minutes var36 = var33.minus(var35);
    org.joda.time.Period var41 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var43 = var41.plusYears((-1));
    org.joda.time.Minutes var44 = var41.toStandardMinutes();
    org.joda.time.Minutes var45 = var33.plus(var44);
    org.joda.time.YearMonth var46 = var25.minus((org.joda.time.ReadablePeriod)var44);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.Years var47 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var14, (org.joda.time.ReadablePartial)var46);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test434() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test434"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusYears(13);
    org.joda.time.DateTimeZone var6 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.Interval var7 = var2.toInterval(var6);
    org.joda.time.DateMidnight var8 = var2.toDateMidnight();
    org.joda.time.DateTime var9 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var11 = var9.withMillis(0L);
    org.joda.time.DateTime var13 = var11.plusHours(2013);
    org.joda.time.chrono.ISOChronology var14 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var19 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var21 = var19.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var23 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstance(var23);
    long var26 = var19.getMillisKeepLocal(var23, 1377746580759L);
    org.joda.time.Chronology var27 = var14.withZone(var23);
    org.joda.time.DateTimeZone var29 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.chrono.ISOChronology var30 = org.joda.time.chrono.ISOChronology.getInstance(var29);
    org.joda.time.Chronology var31 = var14.withZone(var29);
    org.joda.time.DateTime var32 = var11.toDateTime(var29);
    int var33 = var8.compareTo((org.joda.time.ReadableInstant)var11);
    org.joda.time.DateMidnight var35 = var8.minusMonths(62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test435() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test435"); }


    org.joda.time.DateTimeZone var0 = org.joda.time.DateTimeZone.getDefault();
    org.joda.time.MutableDateTime var1 = org.joda.time.MutableDateTime.now(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test436() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test436"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getYearOfCentury();
    org.joda.time.LocalDateTime var5 = var0.minusMillis(5035);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test437() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test437"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getWeekOfWeekyear();
    org.joda.time.LocalDateTime var5 = var0.withDayOfWeek(2);
    org.joda.time.LocalDateTime var6 = org.joda.time.LocalDateTime.now();
    int var7 = var6.getDayOfYear();
    org.joda.time.LocalDateTime var9 = var6.minusSeconds(2005);
    org.joda.time.Chronology var10 = var6.getChronology();
    org.joda.time.DateTimeZone var12 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var13 = org.joda.time.MutableDateTime.now(var12);
    org.joda.time.DateTime var14 = var6.toDateTime(var12);
    org.joda.time.DateTime var15 = var5.toDateTime(var12);
    org.joda.time.TimeOfDay var16 = new org.joda.time.TimeOfDay(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test438() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test438"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    var5.addMonths(104);
    var5.addMinutes(80);
    var5.setHourOfDay(20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.setMinuteOfDay((-948));
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test439() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test439"); }


    org.joda.time.Partial var0 = new org.joda.time.Partial();
    java.lang.String var1 = var0.toStringList();
    org.joda.time.PeriodType var2 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var3 = new org.joda.time.MutablePeriod(var2);
    var3.addDays(1);
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    boolean var10 = var7.isShorterThan((org.joda.time.ReadableDuration)var9);
    var3.add((org.joda.time.ReadableDuration)var9);
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var9, (org.joda.time.ReadableInstant)var12);
    var13.setPeriod(1377742981948L, 9L);
    org.joda.time.Partial var17 = var0.minus((org.joda.time.ReadablePeriod)var13);
    org.joda.time.chrono.GJChronology var18 = org.joda.time.chrono.GJChronology.getInstanceUTC();
    int var19 = var18.getMinimumDaysInFirstWeek();
    org.joda.time.DurationField var20 = var18.weekyears();
    org.joda.time.Partial var21 = var0.withChronologyRetainFields((org.joda.time.Chronology)var18);
    org.joda.time.LocalDateTime var22 = org.joda.time.LocalDateTime.now();
    int var23 = var22.getDayOfYear();
    org.joda.time.Chronology var24 = var22.getChronology();
    org.joda.time.chrono.JulianChronology var25 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var26 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var25);
    org.joda.time.LocalDate var27 = var26.toLocalDate();
    org.joda.time.MutableDateTime var28 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var29 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var26, (org.joda.time.ReadableInstant)var28);
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = var31.toLocalDate();
    org.joda.time.MutableDateTime var33 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var34 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var31, (org.joda.time.ReadableInstant)var33);
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var36 = var35.year();
    boolean var37 = var33.isBefore((org.joda.time.ReadableInstant)var35);
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    boolean var42 = var39.isShorterThan((org.joda.time.ReadableDuration)var41);
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    boolean var47 = var44.isShorterThan((org.joda.time.ReadableDuration)var46);
    org.joda.time.Duration var48 = var39.plus((org.joda.time.ReadableDuration)var44);
    var35.add((org.joda.time.ReadableDuration)var44);
    org.joda.time.Seconds var50 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var26, (org.joda.time.ReadableInstant)var35);
    org.joda.time.Weeks var51 = var50.toStandardWeeks();
    org.joda.time.Duration var53 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var55 = org.joda.time.Duration.standardHours((-1L));
    boolean var56 = var53.isShorterThan((org.joda.time.ReadableDuration)var55);
    org.joda.time.Duration var58 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var60 = org.joda.time.Duration.standardHours((-1L));
    boolean var61 = var58.isShorterThan((org.joda.time.ReadableDuration)var60);
    org.joda.time.Duration var62 = var53.plus((org.joda.time.ReadableDuration)var58);
    boolean var63 = var51.equals((java.lang.Object)var62);
    org.joda.time.LocalDateTime var65 = var22.withDurationAdded((org.joda.time.ReadableDuration)var62, 10);
    org.joda.time.chrono.ISOChronology var66 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var71 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var73 = var71.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var74 = var66.withZone((org.joda.time.DateTimeZone)var71);
    org.joda.time.DateTime var75 = var65.toDateTime((org.joda.time.DateTimeZone)var71);
    org.joda.time.Chronology var76 = var18.withZone((org.joda.time.DateTimeZone)var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "[]"+ "'", var1.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test440() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test440"); }


    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.Period var6 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var3);
    int var7 = var6.getMinutes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test441() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test441"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.LocalDate var6 = var4.withEra(1);
    org.joda.time.LocalDate var7 = new org.joda.time.LocalDate();
    int var8 = var6.compareTo((org.joda.time.ReadablePartial)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));

  }

  public void test442() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test442"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.LocalDate var3 = new org.joda.time.LocalDate(var2);
    int var4 = var3.getEra();
    org.joda.time.DateTime var5 = var3.toDateTimeAtCurrentTime();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test443() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test443"); }


    org.joda.time.LocalDateTime var8 = org.joda.time.LocalDateTime.now();
    int var9 = var8.getDayOfYear();
    org.joda.time.Chronology var10 = var8.getChronology();
    org.joda.time.chrono.StrictChronology var11 = org.joda.time.chrono.StrictChronology.getInstance(var10);
    org.joda.time.DateTime var19 = new org.joda.time.DateTime(0, 4, 28, 1, 28, 1, 1);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.LocalDate.Property var21 = var20.weekyear();
    long var23 = var11.set((org.joda.time.ReadablePartial)var20, 104L);
    org.joda.time.MutablePeriod var24 = new org.joda.time.MutablePeriod(2755493225160L, (org.joda.time.Chronology)var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime(215, 434, 951, 529, 126, 42, 12200, (org.joda.time.Chronology)var11);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-62157023999896L));

  }

  public void test444() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test444"); }


    org.joda.time.tz.FixedDateTimeZone var5 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    org.joda.time.LocalDate var6 = new org.joda.time.LocalDate(1378524281334L, (org.joda.time.DateTimeZone)var5);
    boolean var7 = var5.isFixed();
    int var9 = var5.getOffset(0L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MutablePeriod var10 = new org.joda.time.MutablePeriod((java.lang.Object)0L);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 28);

  }

  public void test445() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test445"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    long var40 = var38.roundCeiling(3L);
    int var42 = var38.getMaximumValue((-7200000L));
    boolean var44 = var38.isLeap((-79L));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var47 = var38.set(604800000L, 33);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 948);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test446() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test446"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    int var6 = var5.getHourOfDay();
    org.joda.time.DateTime var8 = var5.withSecondOfMinute(10);
    org.joda.time.DateTime var11 = var5.withDurationAdded(3L, 34);
    org.joda.time.DateTime var13 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var15 = var13.withMillis(0L);
    org.joda.time.DateTime var17 = var15.plusHours(2013);
    org.joda.time.chrono.ISOChronology var18 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var23 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var25 = var23.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var27 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstance(var27);
    long var30 = var23.getMillisKeepLocal(var27, 1377746580759L);
    org.joda.time.Chronology var31 = var18.withZone(var27);
    org.joda.time.DateTimeZone var33 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.chrono.ISOChronology var34 = org.joda.time.chrono.ISOChronology.getInstance(var33);
    org.joda.time.Chronology var35 = var18.withZone(var33);
    org.joda.time.DateTime var36 = var15.toDateTime(var33);
    org.joda.time.LocalTime var37 = new org.joda.time.LocalTime(104L, var33);
    org.joda.time.DateTime var38 = var5.withZone(var33);
    org.joda.time.DateTime var40 = var5.minusDays(999);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test447() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test447"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    int var25 = var18.get(1377746594064L);
    int var27 = var18.getLeapAmount(2755499466141L);
    long var30 = var18.addWrapField(37L, 524);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 12194);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 524037L);

  }

  public void test448() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test448"); }


    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.withMonthOfYear(1);
    org.joda.time.LocalDate var7 = var5.withEra(1);
    int var8 = var7.getDayOfYear();
    org.joda.time.chrono.IslamicChronology var9 = org.joda.time.chrono.IslamicChronology.getInstanceUTC();
    org.joda.time.format.DateTimeFormatter var10 = org.joda.time.format.ISODateTimeFormat.localDateParser();
    org.joda.time.DateTimeZone var11 = var10.getZone();
    org.joda.time.Chronology var12 = var9.withZone(var11);
    org.joda.time.Interval var13 = var7.toInterval(var11);
    org.joda.time.LocalDate var14 = new org.joda.time.LocalDate(1421641399393L, var11);
    org.joda.time.LocalDate var15 = org.joda.time.LocalDate.now(var11);
    org.joda.time.LocalDateTime var16 = org.joda.time.LocalDateTime.now();
    int var17 = var16.getDayOfYear();
    org.joda.time.Chronology var18 = var16.getChronology();
    int var19 = var16.getYearOfCentury();
    org.joda.time.LocalTime var20 = var16.toLocalTime();
    org.joda.time.chrono.JulianChronology var21 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var22 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var21);
    org.joda.time.LocalDate var23 = var22.toLocalDate();
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var25 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var22, (org.joda.time.ReadableInstant)var24);
    org.joda.time.DateTimeComparator var26 = org.joda.time.DateTimeComparator.getTimeOnlyInstance();
    org.joda.time.DateTimeFieldType var27 = var26.getUpperLimit();
    org.joda.time.MutableDateTime.Property var28 = var24.property(var27);
    org.joda.time.MutableInterval var29 = new org.joda.time.MutableInterval();
    org.joda.time.MutableInterval var30 = var29.copy();
    org.joda.time.DateTime var31 = var30.getStart();
    java.util.Date var32 = var31.toDate();
    int var33 = var31.getWeekyear();
    org.joda.time.format.DateTimeFormatterBuilder var34 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var36 = var34.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var38 = var34.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var39 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var40 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var39);
    org.joda.time.LocalDate var41 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var39);
    org.joda.time.DateTimeField var42 = var39.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var43 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.LocalDate var48 = var46.minusMonths(0);
    int[] var50 = var43.get((org.joda.time.ReadablePartial)var48, 100L);
    org.joda.time.chrono.EthiopicChronology var54 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var55 = var54.hours();
    org.joda.time.LocalTime var56 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var54);
    org.joda.time.Period var57 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var54);
    org.joda.time.DateTimeField var58 = var54.millisOfSecond();
    org.joda.time.DateTimeField var59 = var54.secondOfDay();
    org.joda.time.field.SkipDateTimeField var61 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var43, var59, 100);
    org.joda.time.LocalDateTime var62 = org.joda.time.LocalDateTime.now();
    int var63 = var62.getDayOfYear();
    org.joda.time.Chronology var64 = var62.getChronology();
    int var65 = var62.getYearOfCentury();
    int var66 = var61.getMaximumValue((org.joda.time.ReadablePartial)var62);
    boolean var68 = var61.isLeap(1L);
    org.joda.time.LocalDateTime var69 = org.joda.time.LocalDateTime.now();
    int var70 = var69.getDayOfYear();
    int var71 = var61.getMinimumValue((org.joda.time.ReadablePartial)var69);
    org.joda.time.DurationField var72 = var61.getDurationField();
    org.joda.time.DateTimeFieldType var73 = var61.getType();
    org.joda.time.field.OffsetDateTimeField var77 = new org.joda.time.field.OffsetDateTimeField(var42, var73, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var80 = new org.joda.time.IllegalFieldValueException(var73, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var83 = var34.appendFraction(var73, 33, (-948));
    org.joda.time.DateTime.Property var84 = var31.property(var73);
    org.joda.time.DateTimeComparator var85 = org.joda.time.DateTimeComparator.getInstance(var27, var73);
    int var86 = var20.get(var73);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var87 = var15.get(var73);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1970);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 5039);

  }

  public void test449() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test449"); }


    org.joda.time.Period var2 = new org.joda.time.Period(10L, 1L);
    org.joda.time.Period var4 = var2.withHours(216);
    java.lang.String var5 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "PT216H0.009S"+ "'", var5.equals("PT216H0.009S"));

  }

  public void test450() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test450"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusYears(13);
    org.joda.time.YearMonthDay.Property var5 = var2.monthOfYear();
    org.joda.time.YearMonthDay var7 = var2.minusMonths((-3));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test451() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test451"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.DateTimeFormat.shortDateTime();
    org.joda.time.TimeOfDay var1 = new org.joda.time.TimeOfDay();
    int var2 = var1.size();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var5 = var4.hours();
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var4);
    org.joda.time.LocalTime var8 = var6.withMillisOfSecond(1);
    org.joda.time.LocalTime var10 = var8.minusHours((-1));
    org.joda.time.Years var11 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var1, (org.joda.time.ReadablePartial)var10);
    int var12 = var1.getMillisOfSecond();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.TimeOfDay var14 = var1.withChronologyRetainFields((org.joda.time.Chronology)var13);
    org.joda.time.format.DateTimeFormatter var15 = var0.withChronology((org.joda.time.Chronology)var13);
    org.joda.time.DateTimeZone var16 = var13.getZone();
    org.joda.time.DateTimeField var17 = var13.minuteOfHour();
    org.joda.time.DurationField var18 = var13.days();
    org.joda.time.format.DateTimeFormatter var19 = org.joda.time.format.ISODateTimeFormat.timeNoMillis();
    org.joda.time.chrono.EthiopicChronology var21 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var22 = var21.hours();
    org.joda.time.LocalTime var23 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var21);
    org.joda.time.LocalTime var25 = var23.withMillisOfSecond(1);
    org.joda.time.LocalTime var27 = var25.minusHours((-1));
    org.joda.time.LocalTime var29 = var25.plusSeconds((-1));
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    org.joda.time.LocalDateTime var33 = var30.minusSeconds(2005);
    org.joda.time.Chronology var34 = var30.getChronology();
    org.joda.time.DateTimeZone var36 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.MutableDateTime var37 = org.joda.time.MutableDateTime.now(var36);
    org.joda.time.DateTime var38 = var30.toDateTime(var36);
    org.joda.time.DateTime var39 = var29.toDateTimeToday(var36);
    org.joda.time.format.DateTimeFormatter var40 = var19.withZone(var36);
    java.lang.String var41 = var36.toString();
    org.joda.time.chrono.ZonedChronology var42 = org.joda.time.chrono.ZonedChronology.getInstance((org.joda.time.Chronology)var13, var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 374);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "+00:00:00.759"+ "'", var41.equals("+00:00:00.759"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test452() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test452"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    int var8 = var5.getWeekyear();
    org.joda.time.DateTime var10 = var5.withYear(86399);
    org.joda.time.DateTime.Property var11 = var10.year();
    boolean var12 = var10.isAfterNow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2013);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test453() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test453"); }


    org.joda.time.DateTimeZone var1 = org.joda.time.DateTimeZone.forOffsetMillis(80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test454() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test454"); }


    org.joda.time.JodaTimePermission var1 = new org.joda.time.JodaTimePermission("P379WT-1H3599S");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.getActions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "(\"org.joda.time.JodaTimePermission\" \"P379WT-1H3599S\")"+ "'", var2.equals("(\"org.joda.time.JodaTimePermission\" \"P379WT-1H3599S\")"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));

  }

  public void test455() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test455"); }


    org.joda.time.LocalDateTime var1 = org.joda.time.LocalDateTime.now();
    int var2 = var1.getDayOfYear();
    org.joda.time.Chronology var3 = var1.getChronology();
    org.joda.time.chrono.StrictChronology var4 = org.joda.time.chrono.StrictChronology.getInstance(var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.withMonthOfYear(1);
    org.joda.time.LocalDate var11 = var7.withWeekyear(1);
    org.joda.time.LocalDate var13 = var7.withDayOfYear(1);
    org.joda.time.LocalDate var15 = var13.minusMonths(16);
    boolean var16 = var4.equals((java.lang.Object)16);
    org.joda.time.YearMonth var17 = new org.joda.time.YearMonth(0L, (org.joda.time.Chronology)var4);
    org.joda.time.format.DateTimeFormatter var18 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var22 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var23 = var22.hours();
    org.joda.time.LocalTime var24 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var22);
    org.joda.time.Period var25 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var22);
    org.joda.time.DateTimeField var26 = var22.millisOfSecond();
    org.joda.time.chrono.LenientChronology var27 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var22);
    org.joda.time.format.DateTimeFormatter var28 = var18.withChronology((org.joda.time.Chronology)var27);
    org.joda.time.format.DateTimeFormatter var29 = var28.withZoneUTC();
    java.lang.String var30 = var17.toString(var29);
    org.joda.time.chrono.JulianChronology var31 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var32 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var31);
    org.joda.time.Period var37 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var39 = var37.plusSeconds(100);
    org.joda.time.Period var41 = var37.minusMillis(10);
    boolean var42 = var32.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var43 = var32.dayOfYear();
    int var44 = var32.getSecondOfDay();
    org.joda.time.DateMidnight var46 = var32.withWeekyear(240);
    org.joda.time.DateMidnight var48 = var46.minusMonths(28);
    org.joda.time.DateTimeZone var49 = var48.getZone();
    org.joda.time.Interval var50 = var17.toInterval(var49);
    org.joda.time.YearMonth var52 = var17.minusYears(2);
    org.joda.time.Duration var54 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    var55.setWeekOfWeekyear(1);
    int var58 = var55.getRoundingMode();
    var55.addMillis(100);
    var55.setSecondOfMinute(10);
    org.joda.time.PeriodType var63 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var64 = new org.joda.time.Period((org.joda.time.ReadableDuration)var54, (org.joda.time.ReadableInstant)var55, var63);
    org.joda.time.Days var65 = var64.toStandardDays();
    org.joda.time.DurationFieldType var66 = var65.getFieldType();
    org.joda.time.IllegalFieldValueException var70 = new org.joda.time.IllegalFieldValueException(var66, (java.lang.Number)28, (java.lang.Number)10.0d, (java.lang.Number)1377746580759L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.YearMonth var72 = var52.withFieldAdded(var66, (-59));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "\uFFFD\uFFFD"+ "'", var30.equals("\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test456() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test456"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var0.appendClockhourOfHalfday(692);
    org.joda.time.format.DateTimeFormatterBuilder var5 = var4.appendTimeZoneId();
    org.joda.time.format.DateTimeFormatterBuilder var6 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var8 = var6.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var10 = var6.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.LocalDate var13 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var14 = var11.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var16 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var17 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var16);
    org.joda.time.LocalDate var18 = var17.toLocalDate();
    org.joda.time.LocalDate var20 = var18.minusMonths(0);
    int[] var22 = var15.get((org.joda.time.ReadablePartial)var20, 100L);
    org.joda.time.chrono.EthiopicChronology var26 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var27 = var26.hours();
    org.joda.time.LocalTime var28 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var26);
    org.joda.time.Period var29 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var26);
    org.joda.time.DateTimeField var30 = var26.millisOfSecond();
    org.joda.time.DateTimeField var31 = var26.secondOfDay();
    org.joda.time.field.SkipDateTimeField var33 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var15, var31, 100);
    org.joda.time.LocalDateTime var34 = org.joda.time.LocalDateTime.now();
    int var35 = var34.getDayOfYear();
    org.joda.time.Chronology var36 = var34.getChronology();
    int var37 = var34.getYearOfCentury();
    int var38 = var33.getMaximumValue((org.joda.time.ReadablePartial)var34);
    boolean var40 = var33.isLeap(1L);
    org.joda.time.LocalDateTime var41 = org.joda.time.LocalDateTime.now();
    int var42 = var41.getDayOfYear();
    int var43 = var33.getMinimumValue((org.joda.time.ReadablePartial)var41);
    org.joda.time.DurationField var44 = var33.getDurationField();
    org.joda.time.DateTimeFieldType var45 = var33.getType();
    org.joda.time.field.OffsetDateTimeField var49 = new org.joda.time.field.OffsetDateTimeField(var14, var45, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var52 = new org.joda.time.IllegalFieldValueException(var45, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var55 = var6.appendFraction(var45, 33, (-948));
    org.joda.time.format.DateTimeFormatterBuilder var56 = var5.appendText(var45);
    org.joda.time.format.DateTimeFormatterBuilder var58 = var56.appendHourOfHalfday(2);
    org.joda.time.format.DateTimeFormatterBuilder var61 = var56.appendFractionOfDay(62, 2013);
    org.joda.time.format.DateTimePrinter var62 = var56.toPrinter();
    org.joda.time.format.DateTimeFormatterBuilder var63 = var56.appendEraText();
    org.joda.time.format.DateTimeFormatter var64 = org.joda.time.format.ISODateTimeFormat.date();
    org.joda.time.format.DateTimeParser var65 = var64.getParser();
    org.joda.time.format.DateTimeFormatterBuilder var66 = var63.append(var65);
    org.joda.time.format.DateTimeFormatterBuilder var69 = var66.appendFractionOfHour(24430687, 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test457() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test457"); }


    org.joda.time.chrono.ISOChronology var0 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var5 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var7 = var5.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var8 = var0.withZone((org.joda.time.DateTimeZone)var5);
    long var10 = var5.nextTransition(9L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.chrono.CopticChronology var12 = org.joda.time.chrono.CopticChronology.getInstance((org.joda.time.DateTimeZone)var5, 951);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 9L);

  }

  public void test458() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test458"); }


    org.joda.time.format.DateTimeFormatterBuilder var0 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var2 = var0.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var4 = var2.appendDayOfWeek(8400);
    org.joda.time.format.DateTimeFormatterBuilder var6 = var4.appendLiteral("-1 hours");
    org.joda.time.format.DateTimeFormatterBuilder var8 = var4.appendClockhourOfDay(2005);
    org.joda.time.format.DateTimeFormatterBuilder var11 = var4.appendFractionOfSecond(630, 241);
    boolean var12 = var4.canBuildPrinter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test459() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test459"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    org.joda.time.DateTime var7 = var5.withMillis(100L);
    int var8 = var5.getWeekyear();
    org.joda.time.LocalDateTime var9 = var5.toLocalDateTime();
    org.joda.time.LocalDateTime.Property var10 = var9.weekOfWeekyear();
    org.joda.time.LocalDateTime var12 = var9.plusYears(69781948);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2013);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test460() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test460"); }


    org.joda.time.YearMonth var1 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var2 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var3 = var1.withChronologyRetainFields((org.joda.time.Chronology)var2);
    org.joda.time.YearMonth var5 = var3.withMonthOfYear(10);
    org.joda.time.Interval var6 = var3.toInterval();
    org.joda.time.DateTimeZone var8 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now(var8);
    org.joda.time.Interval var10 = var3.toInterval(var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.chrono.GJChronology var13 = org.joda.time.chrono.GJChronology.getInstance(var8, 0L, 13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test461() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test461"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var3 = org.joda.time.Duration.standardHours((-1L));
    boolean var4 = var1.isShorterThan((org.joda.time.ReadableDuration)var3);
    org.joda.time.Duration var5 = var1.toDuration();
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    org.joda.time.chrono.JulianChronology var9 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var10 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var9);
    org.joda.time.LocalDate var11 = var10.toLocalDate();
    org.joda.time.MutableDateTime var12 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var13 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var12);
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var15 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var14);
    org.joda.time.LocalDate var16 = var15.toLocalDate();
    org.joda.time.MutableDateTime var17 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var18 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var15, (org.joda.time.ReadableInstant)var17);
    org.joda.time.MutableDateTime var19 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var20 = var19.year();
    boolean var21 = var17.isBefore((org.joda.time.ReadableInstant)var19);
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    boolean var26 = var23.isShorterThan((org.joda.time.ReadableDuration)var25);
    org.joda.time.Duration var28 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var30 = org.joda.time.Duration.standardHours((-1L));
    boolean var31 = var28.isShorterThan((org.joda.time.ReadableDuration)var30);
    org.joda.time.Duration var32 = var23.plus((org.joda.time.ReadableDuration)var28);
    var19.add((org.joda.time.ReadableDuration)var28);
    org.joda.time.Seconds var34 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var10, (org.joda.time.ReadableInstant)var19);
    org.joda.time.Duration var35 = var34.toStandardDuration();
    org.joda.time.Duration var37 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    boolean var40 = var37.isShorterThan((org.joda.time.ReadableDuration)var39);
    org.joda.time.Duration var41 = var37.toDuration();
    boolean var42 = var35.isShorterThan((org.joda.time.ReadableDuration)var41);
    long var43 = var41.getStandardDays();
    int var44 = var7.compareTo((org.joda.time.ReadableDuration)var41);
    org.joda.time.Duration var45 = var41.toDuration();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test462() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test462"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    boolean var12 = var9.isShorterThan((org.joda.time.ReadableDuration)var11);
    org.joda.time.Duration var14 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    boolean var17 = var14.isShorterThan((org.joda.time.ReadableDuration)var16);
    org.joda.time.Duration var18 = var9.plus((org.joda.time.ReadableDuration)var14);
    var5.add((org.joda.time.ReadableDuration)var14);
    org.joda.time.chrono.JulianChronology var20 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var21 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var20);
    org.joda.time.LocalDate var22 = var21.toLocalDate();
    org.joda.time.MutableDateTime var23 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var24 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var21, (org.joda.time.ReadableInstant)var23);
    org.joda.time.MutableDateTime var25 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var26 = var25.year();
    boolean var27 = var23.isBefore((org.joda.time.ReadableInstant)var25);
    org.joda.time.Interval var28 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var25);
    var5.setDayOfYear(104);
    org.joda.time.MutableDateTime.Property var31 = var5.weekyear();
    org.joda.time.DateTime var32 = org.joda.time.DateTime.now();
    org.joda.time.chrono.JulianChronology var33 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var34 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var33);
    org.joda.time.LocalDate var35 = var34.toLocalDate();
    org.joda.time.MutableDateTime var36 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var37 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var34, (org.joda.time.ReadableInstant)var36);
    org.joda.time.MutableDateTime var38 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var39 = var38.year();
    boolean var40 = var36.isBefore((org.joda.time.ReadableInstant)var38);
    org.joda.time.MutableDateTime.Property var41 = var38.minuteOfHour();
    org.joda.time.MutableDateTime.Property var42 = var38.millisOfSecond();
    org.joda.time.Chronology var43 = org.joda.time.DateTimeUtils.getIntervalChronology((org.joda.time.ReadableInstant)var32, (org.joda.time.ReadableInstant)var38);
    org.joda.time.MutableDateTime var44 = new org.joda.time.MutableDateTime(var43);
    var44.addMinutes(28);
    boolean var47 = var5.isAfter((org.joda.time.ReadableInstant)var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test463() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test463"); }


    org.joda.time.Hours var1 = org.joda.time.Hours.hours(948);
    org.joda.time.Days var2 = var1.toStandardDays();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test464() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test464"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.chrono.StrictChronology var3 = org.joda.time.chrono.StrictChronology.getInstance(var2);
    org.joda.time.DateTime var11 = new org.joda.time.DateTime(0, 4, 28, 1, 28, 1, 1);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate.Property var13 = var12.weekyear();
    long var15 = var3.set((org.joda.time.ReadablePartial)var12, 104L);
    org.joda.time.DateTimeField var16 = var3.dayOfYear();
    org.joda.time.DateTimeField var17 = var3.minuteOfDay();
    org.joda.time.chrono.JulianChronology var18 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var19 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var18);
    org.joda.time.LocalDate var20 = var19.toLocalDate();
    org.joda.time.LocalDate var22 = var20.withMonthOfYear(1);
    org.joda.time.LocalDate var24 = var22.withEra(1);
    org.joda.time.DateTime var25 = var24.toDateTimeAtMidnight();
    org.joda.time.DateTime.Property var26 = var25.weekyear();
    org.joda.time.chrono.EthiopicChronology var27 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var28 = var27.dayOfYear();
    org.joda.time.YearMonthDay var29 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var27);
    org.joda.time.format.DateTimeFormatterBuilder var30 = new org.joda.time.format.DateTimeFormatterBuilder();
    org.joda.time.format.DateTimeFormatterBuilder var32 = var30.appendClockhourOfHalfday(22);
    org.joda.time.format.DateTimeFormatterBuilder var34 = var30.appendClockhourOfHalfday(692);
    org.joda.time.chrono.JulianChronology var35 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var36 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var35);
    org.joda.time.LocalDate var37 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var35);
    org.joda.time.DateTimeField var38 = var35.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var39 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var40 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var41 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var40);
    org.joda.time.LocalDate var42 = var41.toLocalDate();
    org.joda.time.LocalDate var44 = var42.minusMonths(0);
    int[] var46 = var39.get((org.joda.time.ReadablePartial)var44, 100L);
    org.joda.time.chrono.EthiopicChronology var50 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var51 = var50.hours();
    org.joda.time.LocalTime var52 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var50);
    org.joda.time.Period var53 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var50);
    org.joda.time.DateTimeField var54 = var50.millisOfSecond();
    org.joda.time.DateTimeField var55 = var50.secondOfDay();
    org.joda.time.field.SkipDateTimeField var57 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var39, var55, 100);
    org.joda.time.LocalDateTime var58 = org.joda.time.LocalDateTime.now();
    int var59 = var58.getDayOfYear();
    org.joda.time.Chronology var60 = var58.getChronology();
    int var61 = var58.getYearOfCentury();
    int var62 = var57.getMaximumValue((org.joda.time.ReadablePartial)var58);
    boolean var64 = var57.isLeap(1L);
    org.joda.time.LocalDateTime var65 = org.joda.time.LocalDateTime.now();
    int var66 = var65.getDayOfYear();
    int var67 = var57.getMinimumValue((org.joda.time.ReadablePartial)var65);
    org.joda.time.DurationField var68 = var57.getDurationField();
    org.joda.time.DateTimeFieldType var69 = var57.getType();
    org.joda.time.field.OffsetDateTimeField var73 = new org.joda.time.field.OffsetDateTimeField(var38, var69, 884, 3, 948);
    org.joda.time.IllegalFieldValueException var76 = new org.joda.time.IllegalFieldValueException(var69, (java.lang.Number)35L, "secondOfDay");
    org.joda.time.format.DateTimeFormatterBuilder var79 = var30.appendFraction(var69, 33, (-948));
    org.joda.time.chrono.EthiopicChronology var80 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var81 = var80.minutes();
    org.joda.time.DateTimeField var82 = var80.year();
    org.joda.time.DurationField var83 = var80.hours();
    org.joda.time.field.UnsupportedDateTimeField var84 = org.joda.time.field.UnsupportedDateTimeField.getInstance(var69, var83);
    int var85 = var29.indexOf(var69);
    org.joda.time.DateTime.Property var86 = var25.property(var69);
    org.joda.time.field.ZeroIsMaxDateTimeField var87 = new org.joda.time.field.ZeroIsMaxDateTimeField(var17, var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-62157023999896L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test465() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test465"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var0);
    org.joda.time.DateTimeField var3 = var0.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.minusMonths(0);
    int[] var11 = var4.get((org.joda.time.ReadablePartial)var9, 100L);
    org.joda.time.chrono.EthiopicChronology var15 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var16 = var15.hours();
    org.joda.time.LocalTime var17 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var15);
    org.joda.time.Period var18 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var15);
    org.joda.time.DateTimeField var19 = var15.millisOfSecond();
    org.joda.time.DateTimeField var20 = var15.secondOfDay();
    org.joda.time.field.SkipDateTimeField var22 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var4, var20, 100);
    org.joda.time.LocalDateTime var23 = org.joda.time.LocalDateTime.now();
    int var24 = var23.getDayOfYear();
    org.joda.time.Chronology var25 = var23.getChronology();
    int var26 = var23.getYearOfCentury();
    int var27 = var22.getMaximumValue((org.joda.time.ReadablePartial)var23);
    boolean var29 = var22.isLeap(1L);
    org.joda.time.LocalDateTime var30 = org.joda.time.LocalDateTime.now();
    int var31 = var30.getDayOfYear();
    int var32 = var22.getMinimumValue((org.joda.time.ReadablePartial)var30);
    org.joda.time.DurationField var33 = var22.getDurationField();
    org.joda.time.DateTimeFieldType var34 = var22.getType();
    org.joda.time.field.OffsetDateTimeField var38 = new org.joda.time.field.OffsetDateTimeField(var3, var34, 884, 3, 948);
    boolean var39 = var38.isSupported();
    int var40 = var38.getMaximumValue();
    org.joda.time.DurationField var41 = var38.getDurationField();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 948);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test466() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test466"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.withMonthOfYear(1);
    org.joda.time.DateMidnight var5 = var2.toDateMidnight();
    org.joda.time.DateTime var6 = org.joda.time.DateTime.now();
    long var7 = var6.getMillis();
    org.joda.time.DateTime.Property var8 = var6.yearOfEra();
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    var11.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var14 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var11.setChronology((org.joda.time.Chronology)var14);
    org.joda.time.MutablePeriod var16 = new org.joda.time.MutablePeriod(0L, var10, (org.joda.time.Chronology)var14);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var19 = new org.joda.time.MutableDateTime();
    var19.setWeekOfWeekyear(1);
    int var22 = var19.getRoundingMode();
    var19.addMillis(100);
    var19.setSecondOfMinute(10);
    org.joda.time.PeriodType var27 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var28 = new org.joda.time.Period((org.joda.time.ReadableDuration)var18, (org.joda.time.ReadableInstant)var19, var27);
    org.joda.time.Days var29 = var28.toStandardDays();
    org.joda.time.Duration var30 = var29.toStandardDuration();
    org.joda.time.chrono.EthiopicChronology var32 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var33 = var32.hours();
    org.joda.time.DateTimeField var34 = var32.minuteOfHour();
    org.joda.time.LocalDate var35 = new org.joda.time.LocalDate(1L, (org.joda.time.Chronology)var32);
    var16.setPeriod((org.joda.time.ReadableDuration)var30, (org.joda.time.Chronology)var32);
    org.joda.time.DateTime var38 = var6.withDurationAdded((org.joda.time.ReadableDuration)var30, 228);
    org.joda.time.Weeks var39 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var6);
    org.joda.time.DateTime var41 = var6.plusYears(20);
    int var42 = var41.getDayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1377739439530L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 29);

  }

  public void test467() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test467"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var5 = var4.hours();
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var4);
    org.joda.time.Period var7 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var4);
    org.joda.time.DateTimeField var8 = var4.millisOfSecond();
    org.joda.time.chrono.LenientChronology var9 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var4);
    org.joda.time.format.DateTimeFormatter var10 = var0.withChronology((org.joda.time.Chronology)var9);
    org.joda.time.chrono.ISOChronology var11 = org.joda.time.chrono.ISOChronology.getInstanceUTC();
    org.joda.time.tz.FixedDateTimeZone var16 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var18 = var16.getOffsetFromLocal(1377742981323L);
    org.joda.time.Chronology var19 = var11.withZone((org.joda.time.DateTimeZone)var16);
    long var21 = var16.nextTransition(9L);
    org.joda.time.Chronology var22 = var9.withZone((org.joda.time.DateTimeZone)var16);
    org.joda.time.DurationField var23 = var9.weeks();
    org.joda.time.LocalTime var24 = org.joda.time.LocalTime.now((org.joda.time.Chronology)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 9L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test468() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test468"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Days var12 = var11.toStandardDays();
    org.joda.time.chrono.JulianChronology var13 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var14 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var13);
    org.joda.time.Period var19 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var21 = var19.plusSeconds(100);
    org.joda.time.Period var23 = var19.minusMillis(10);
    boolean var24 = var14.equals((java.lang.Object)10);
    org.joda.time.DateMidnight.Property var25 = var14.dayOfYear();
    org.joda.time.chrono.JulianChronology var26 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var27 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var26);
    org.joda.time.LocalDate var28 = var27.toLocalDate();
    org.joda.time.LocalDate var30 = var28.minusMonths(0);
    org.joda.time.DateTime var31 = var28.toDateTimeAtMidnight();
    org.joda.time.DateTime var33 = var31.withCenturyOfEra(4);
    org.joda.time.Days var34 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant)var14, (org.joda.time.ReadableInstant)var33);
    org.joda.time.Days var36 = var34.dividedBy(1);
    boolean var37 = var12.isGreaterThan(var34);
    org.joda.time.Weeks var38 = var34.toStandardWeeks();
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var40 = var39.year();
    org.joda.time.MutableDateTime.Property var41 = var39.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var42 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var43 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var42);
    org.joda.time.Period var48 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var50 = var48.plusSeconds(100);
    org.joda.time.Period var52 = var48.minusMillis(10);
    boolean var53 = var43.equals((java.lang.Object)10);
    org.joda.time.Weeks var54 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var39, (org.joda.time.ReadableInstant)var43);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var56 = var55.year();
    org.joda.time.MutableDateTime.Property var57 = var55.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var59 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var58);
    org.joda.time.Period var64 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var66 = var64.plusSeconds(100);
    org.joda.time.Period var68 = var64.minusMillis(10);
    boolean var69 = var59.equals((java.lang.Object)10);
    org.joda.time.Weeks var70 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var55, (org.joda.time.ReadableInstant)var59);
    org.joda.time.Weeks var71 = var54.minus(var70);
    org.joda.time.Weeks var72 = var38.plus(var54);
    org.joda.time.Weeks var74 = var54.plus(40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test469() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test469"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    var1.addDays(1);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var7 = org.joda.time.Duration.standardHours((-1L));
    boolean var8 = var5.isShorterThan((org.joda.time.ReadableDuration)var7);
    var1.add((org.joda.time.ReadableDuration)var7);
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var7, (org.joda.time.ReadableInstant)var10);
    var11.clear();
    org.joda.time.PeriodType var13 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var14 = new org.joda.time.MutablePeriod(var13);
    var14.addDays(1);
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var20 = org.joda.time.Duration.standardHours((-1L));
    boolean var21 = var18.isShorterThan((org.joda.time.ReadableDuration)var20);
    var14.add((org.joda.time.ReadableDuration)var20);
    var11.add((org.joda.time.ReadablePeriod)var14);
    org.joda.time.chrono.JulianChronology var24 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var25 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var24);
    org.joda.time.LocalDate var26 = var25.toLocalDate();
    org.joda.time.MutableDateTime var27 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var28 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var25, (org.joda.time.ReadableInstant)var27);
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var30 = var29.year();
    boolean var31 = var27.isBefore((org.joda.time.ReadableInstant)var29);
    org.joda.time.Duration var33 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var35 = org.joda.time.Duration.standardHours((-1L));
    boolean var36 = var33.isShorterThan((org.joda.time.ReadableDuration)var35);
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var40 = org.joda.time.Duration.standardHours((-1L));
    boolean var41 = var38.isShorterThan((org.joda.time.ReadableDuration)var40);
    org.joda.time.Duration var42 = var33.plus((org.joda.time.ReadableDuration)var38);
    var29.add((org.joda.time.ReadableDuration)var38);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.MutableDateTime var47 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var48 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var45, (org.joda.time.ReadableInstant)var47);
    org.joda.time.MutableDateTime var49 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var50 = var49.year();
    boolean var51 = var47.isBefore((org.joda.time.ReadableInstant)var49);
    org.joda.time.Interval var52 = new org.joda.time.Interval((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var49);
    boolean var54 = var52.isAfter(10L);
    org.joda.time.MutableDateTime var55 = new org.joda.time.MutableDateTime();
    var55.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var58 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var55.setChronology((org.joda.time.Chronology)var58);
    org.joda.time.Interval var60 = var52.withChronology((org.joda.time.Chronology)var58);
    var11.setPeriod((org.joda.time.ReadableInterval)var52);
    var11.addMillis((-1));
    var11.setYears(10);
    var11.clear();
    org.joda.time.chrono.BuddhistChronology var69 = org.joda.time.chrono.BuddhistChronology.getInstance();
    org.joda.time.DateTimeField var70 = var69.secondOfDay();
    org.joda.time.DateTimeField var71 = var69.monthOfYear();
    org.joda.time.DurationField var72 = var69.hours();
    var11.setPeriod(1421641399393L, 1377742995355L, (org.joda.time.Chronology)var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test470() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test470"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getYearOfCentury();
    org.joda.time.LocalTime var4 = var0.toLocalTime();
    org.joda.time.Years var6 = org.joda.time.Years.years((-1));
    org.joda.time.PeriodType var7 = var6.getPeriodType();
    org.joda.time.Years var9 = org.joda.time.Years.years((-1));
    int var10 = var6.compareTo((org.joda.time.base.BaseSingleFieldPeriod)var9);
    org.joda.time.TimeOfDay var11 = new org.joda.time.TimeOfDay();
    int var12 = var11.size();
    org.joda.time.chrono.EthiopicChronology var14 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var15 = var14.hours();
    org.joda.time.LocalTime var16 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var14);
    org.joda.time.LocalTime var18 = var16.withMillisOfSecond(1);
    org.joda.time.LocalTime var20 = var18.minusHours((-1));
    org.joda.time.Years var21 = org.joda.time.Years.yearsBetween((org.joda.time.ReadablePartial)var11, (org.joda.time.ReadablePartial)var20);
    boolean var22 = var9.isLessThan(var21);
    org.joda.time.LocalTime var23 = var4.minus((org.joda.time.ReadablePeriod)var21);
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var26 = new org.joda.time.MutableDateTime();
    var26.setWeekOfWeekyear(1);
    int var29 = var26.getRoundingMode();
    var26.addMillis(100);
    var26.setSecondOfMinute(10);
    org.joda.time.PeriodType var34 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var35 = new org.joda.time.Period((org.joda.time.ReadableDuration)var25, (org.joda.time.ReadableInstant)var26, var34);
    org.joda.time.Days var36 = var35.toStandardDays();
    org.joda.time.Hours var37 = var36.toStandardHours();
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var40 = new org.joda.time.MutableDateTime();
    var40.setWeekOfWeekyear(1);
    int var43 = var40.getRoundingMode();
    var40.addMillis(100);
    var40.setSecondOfMinute(10);
    org.joda.time.PeriodType var48 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var49 = new org.joda.time.Period((org.joda.time.ReadableDuration)var39, (org.joda.time.ReadableInstant)var40, var48);
    org.joda.time.Days var50 = var49.toStandardDays();
    org.joda.time.Hours var51 = var50.toStandardHours();
    java.lang.String var52 = var51.toString();
    org.joda.time.Hours var53 = var37.plus(var51);
    org.joda.time.DurationFieldType var54 = var53.getFieldType();
    boolean var55 = var4.isSupported(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "PT0H"+ "'", var52.equals("PT0H"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);

  }

  public void test471() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test471"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    long var26 = var18.addWrapField(1377746581334L, 100);
    org.joda.time.DurationField var27 = var18.getRangeDurationField();
    org.joda.time.chrono.JulianChronology var28 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var29 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var28);
    org.joda.time.DateMidnight var31 = var29.plusDays(2013);
    org.joda.time.chrono.JulianChronology var32 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var33 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var32);
    org.joda.time.LocalDate var34 = var33.toLocalDate();
    org.joda.time.DateMidnight var36 = var33.minusWeeks((-1));
    org.joda.time.Duration var38 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    var39.setWeekOfWeekyear(1);
    int var42 = var39.getRoundingMode();
    var39.addMillis(100);
    var39.setSecondOfMinute(10);
    org.joda.time.PeriodType var47 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var48 = new org.joda.time.Period((org.joda.time.ReadableDuration)var38, (org.joda.time.ReadableInstant)var39, var47);
    org.joda.time.Days var49 = var48.toStandardDays();
    org.joda.time.DurationFieldType var50 = var49.getFieldType();
    org.joda.time.DateMidnight var52 = var36.withFieldAdded(var50, 1);
    org.joda.time.field.PreciseDurationField var54 = new org.joda.time.field.PreciseDurationField(var50, 1L);
    org.joda.time.DateMidnight var56 = var31.withFieldAdded(var50, 228);
    org.joda.time.field.DecoratedDurationField var57 = new org.joda.time.field.DecoratedDurationField(var27, var50);
    org.joda.time.field.PreciseDurationField var59 = new org.joda.time.field.PreciseDurationField(var50, (-1L));
    org.joda.time.DurationFieldType var60 = var59.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1377746681334L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test472() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test472"); }


    org.joda.time.Months var1 = org.joda.time.Months.months((-13572));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test473() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test473"); }


    org.joda.time.Period var1 = org.joda.time.Period.days(9);
    org.joda.time.Period var3 = var1.withHours(124);
    org.joda.time.Period var5 = var1.plusDays(9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test474() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test474"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.LocalDate var4 = var2.minusMonths(0);
    org.joda.time.DateTime var5 = var2.toDateTimeAtMidnight();
    int var6 = var5.getHourOfDay();
    org.joda.time.DateTime var8 = var5.withSecondOfMinute(10);
    org.joda.time.DateTime var9 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var11 = var9.withMillis(0L);
    org.joda.time.DateTime var13 = var11.plusHours(2013);
    int var14 = var13.getCenturyOfEra();
    org.joda.time.chrono.JulianChronology var15 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var16 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var15);
    org.joda.time.LocalDate var17 = var16.toLocalDate();
    org.joda.time.DateMidnight var19 = var16.minusWeeks((-1));
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var22 = new org.joda.time.MutableDateTime();
    var22.setWeekOfWeekyear(1);
    int var25 = var22.getRoundingMode();
    var22.addMillis(100);
    var22.setSecondOfMinute(10);
    org.joda.time.PeriodType var30 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var31 = new org.joda.time.Period((org.joda.time.ReadableDuration)var21, (org.joda.time.ReadableInstant)var22, var30);
    org.joda.time.Days var32 = var31.toStandardDays();
    org.joda.time.DurationFieldType var33 = var32.getFieldType();
    org.joda.time.DateMidnight var35 = var19.withFieldAdded(var33, 1);
    org.joda.time.DateMidnight.Property var36 = var19.monthOfYear();
    int var37 = var19.getYearOfCentury();
    org.joda.time.Weeks var38 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var13, (org.joda.time.ReadableInstant)var19);
    org.joda.time.Hours var39 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadableInstant)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test475() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test475"); }


    org.joda.time.format.PeriodFormatterBuilder var0 = new org.joda.time.format.PeriodFormatterBuilder();
    org.joda.time.format.PeriodFormatterBuilder var3 = var0.appendSeparator("T07:00:08", "P121961710312T697819483414166.171");
    org.joda.time.format.PeriodFormatterBuilder var5 = var0.appendSeparatorIfFieldsAfter("days");
    org.joda.time.format.PeriodFormatterBuilder var7 = var0.minimumPrintedDigits(17);
    org.joda.time.format.PeriodFormatterBuilder var8 = var7.appendSecondsWithOptionalMillis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test476() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test476"); }


    org.joda.time.LocalDateTime var1 = org.joda.time.LocalDateTime.now();
    int var2 = var1.getDayOfYear();
    org.joda.time.Chronology var3 = var1.getChronology();
    org.joda.time.chrono.StrictChronology var4 = org.joda.time.chrono.StrictChronology.getInstance(var3);
    org.joda.time.chrono.JulianChronology var5 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var6 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var5);
    org.joda.time.LocalDate var7 = var6.toLocalDate();
    org.joda.time.LocalDate var9 = var7.withMonthOfYear(1);
    org.joda.time.LocalDate var11 = var7.withWeekyear(1);
    org.joda.time.LocalDate var13 = var7.withDayOfYear(1);
    org.joda.time.LocalDate var15 = var13.minusMonths(16);
    boolean var16 = var4.equals((java.lang.Object)16);
    org.joda.time.YearMonth var17 = new org.joda.time.YearMonth(0L, (org.joda.time.Chronology)var4);
    org.joda.time.DateTimeField var18 = var4.secondOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test477() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test477"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardSeconds(1377742981948L);
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = var3.toLocalDate();
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var6 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var5);
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var8 = var7.year();
    boolean var9 = var5.isBefore((org.joda.time.ReadableInstant)var7);
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    boolean var14 = var11.isShorterThan((org.joda.time.ReadableDuration)var13);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    boolean var19 = var16.isShorterThan((org.joda.time.ReadableDuration)var18);
    org.joda.time.Duration var20 = var11.plus((org.joda.time.ReadableDuration)var16);
    var7.add((org.joda.time.ReadableDuration)var16);
    org.joda.time.MutableDateTime.Property var22 = var7.weekyear();
    org.joda.time.MutableDateTime.Property var23 = var7.year();
    boolean var25 = var7.equals((java.lang.Object)(byte)0);
    var7.addDays(216);
    org.joda.time.Period var28 = var1.toPeriodFrom((org.joda.time.ReadableInstant)var7);
    java.util.GregorianCalendar var29 = var7.toGregorianCalendar();
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = var31.toLocalDate();
    org.joda.time.MutableDateTime var33 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var34 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var31, (org.joda.time.ReadableInstant)var33);
    org.joda.time.chrono.JulianChronology var35 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var36 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var35);
    org.joda.time.LocalDate var37 = var36.toLocalDate();
    org.joda.time.MutableDateTime var38 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var39 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var36, (org.joda.time.ReadableInstant)var38);
    org.joda.time.MutableDateTime var40 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var41 = var40.year();
    boolean var42 = var38.isBefore((org.joda.time.ReadableInstant)var40);
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    boolean var47 = var44.isShorterThan((org.joda.time.ReadableDuration)var46);
    org.joda.time.Duration var49 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var51 = org.joda.time.Duration.standardHours((-1L));
    boolean var52 = var49.isShorterThan((org.joda.time.ReadableDuration)var51);
    org.joda.time.Duration var53 = var44.plus((org.joda.time.ReadableDuration)var49);
    var40.add((org.joda.time.ReadableDuration)var49);
    org.joda.time.Seconds var55 = org.joda.time.Seconds.secondsBetween((org.joda.time.ReadableInstant)var31, (org.joda.time.ReadableInstant)var40);
    org.joda.time.Duration var56 = var55.toStandardDuration();
    org.joda.time.Duration var58 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var60 = org.joda.time.Duration.standardHours((-1L));
    boolean var61 = var58.isShorterThan((org.joda.time.ReadableDuration)var60);
    org.joda.time.Duration var62 = var58.toDuration();
    boolean var63 = var56.isShorterThan((org.joda.time.ReadableDuration)var62);
    java.lang.String var64 = var56.toString();
    org.joda.time.MutablePeriod var65 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableDuration)var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "PT1439S"+ "'", var64.equals("PT1439S"));

  }

  public void test478() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test478"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
    org.joda.time.DateTimeZone var2 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.YearMonth var3 = new org.joda.time.YearMonth(var2);
    org.joda.time.Chronology var4 = var0.withZone(var2);
    org.joda.time.LocalDateTime var5 = new org.joda.time.LocalDateTime(var2);
    int var6 = var5.getDayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 29);

  }

  public void test479() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test479"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    int var3 = var0.getYearOfCentury();
    org.joda.time.LocalTime var4 = var0.toLocalTime();
    int var5 = var0.getMillisOfDay();
    org.joda.time.LocalDateTime var7 = var0.withYear(1);
    org.joda.time.LocalDateTime.Property var8 = var7.millisOfDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 5039917);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test480() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test480"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.LocalDateTime var19 = org.joda.time.LocalDateTime.now();
    int var20 = var19.getDayOfYear();
    org.joda.time.Chronology var21 = var19.getChronology();
    int var22 = var19.getYearOfCentury();
    int var23 = var18.getMaximumValue((org.joda.time.ReadablePartial)var19);
    int var24 = var19.getSecondOfMinute();
    org.joda.time.LocalDateTime var26 = var19.plusSeconds(228);
    org.joda.time.Chronology var27 = var19.getChronology();
    org.joda.time.LocalDateTime var29 = var19.minusMinutes(884);
    org.joda.time.LocalDateTime.Property var30 = var19.millisOfDay();
    int var31 = var19.getWeekyear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2013);

  }

  public void test481() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test481"); }


    org.joda.time.chrono.EthiopicChronology var3 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var4 = var3.hours();
    org.joda.time.LocalTime var5 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var3);
    org.joda.time.Period var6 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var3);
    org.joda.time.DateTimeField var7 = var3.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var9 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var10 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var11 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var10);
    org.joda.time.LocalDate var12 = var11.toLocalDate();
    org.joda.time.LocalDate var14 = var12.minusMonths(0);
    int[] var16 = var9.get((org.joda.time.ReadablePartial)var14, 100L);
    org.joda.time.DateTime var17 = new org.joda.time.DateTime(1377746581334L, (org.joda.time.Chronology)var9);
    org.joda.time.chrono.EthiopicChronology var21 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var22 = var21.hours();
    org.joda.time.LocalTime var23 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var21);
    org.joda.time.Period var24 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var21);
    org.joda.time.DateTimeField var25 = var21.millisOfSecond();
    org.joda.time.field.SkipDateTimeField var26 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var9, var25);
    org.joda.time.DateTimeField var27 = org.joda.time.field.StrictDateTimeField.getInstance((org.joda.time.DateTimeField)var26);
    int var28 = var26.getMinimumValue();
    org.joda.time.field.SkipUndoDateTimeField var30 = new org.joda.time.field.SkipUndoDateTimeField((org.joda.time.Chronology)var3, (org.joda.time.DateTimeField)var26, 19);
    org.joda.time.DurationField var31 = var30.getLeapDurationField();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var33 = var30.get((-1515517290559800L));
      fail("Expected exception of type org.joda.time.chrono.LimitChronology.LimitException");
    } catch (Throwable e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test482() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test482"); }


    org.joda.time.Instant var1 = new org.joda.time.Instant(35L);

  }

  public void test483() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test483"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.DateMidnight var3 = var1.plusDays(2013);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.DateMidnight var8 = var5.minusWeeks((-1));
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    var11.setWeekOfWeekyear(1);
    int var14 = var11.getRoundingMode();
    var11.addMillis(100);
    var11.setSecondOfMinute(10);
    org.joda.time.PeriodType var19 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var20 = new org.joda.time.Period((org.joda.time.ReadableDuration)var10, (org.joda.time.ReadableInstant)var11, var19);
    org.joda.time.Days var21 = var20.toStandardDays();
    org.joda.time.DurationFieldType var22 = var21.getFieldType();
    org.joda.time.DateMidnight var24 = var8.withFieldAdded(var22, 1);
    org.joda.time.field.PreciseDurationField var26 = new org.joda.time.field.PreciseDurationField(var22, 1L);
    org.joda.time.DateMidnight var28 = var3.withFieldAdded(var22, 228);
    org.joda.time.field.PreciseDurationField var30 = new org.joda.time.field.PreciseDurationField(var22, (-9L));
    long var33 = var30.add(1377742992740L, 12182);
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var35 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var34);
    org.joda.time.LocalDate var36 = org.joda.time.LocalDate.now((org.joda.time.Chronology)var34);
    org.joda.time.DateTimeField var37 = var34.millisOfSecond();
    org.joda.time.chrono.EthiopicChronology var38 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var39 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var40 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var39);
    org.joda.time.LocalDate var41 = var40.toLocalDate();
    org.joda.time.LocalDate var43 = var41.minusMonths(0);
    int[] var45 = var38.get((org.joda.time.ReadablePartial)var43, 100L);
    org.joda.time.chrono.EthiopicChronology var49 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var50 = var49.hours();
    org.joda.time.LocalTime var51 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var49);
    org.joda.time.Period var52 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var49);
    org.joda.time.DateTimeField var53 = var49.millisOfSecond();
    org.joda.time.DateTimeField var54 = var49.secondOfDay();
    org.joda.time.field.SkipDateTimeField var56 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var38, var54, 100);
    org.joda.time.LocalDateTime var57 = org.joda.time.LocalDateTime.now();
    int var58 = var57.getDayOfYear();
    org.joda.time.Chronology var59 = var57.getChronology();
    int var60 = var57.getYearOfCentury();
    int var61 = var56.getMaximumValue((org.joda.time.ReadablePartial)var57);
    boolean var63 = var56.isLeap(1L);
    org.joda.time.LocalDateTime var64 = org.joda.time.LocalDateTime.now();
    int var65 = var64.getDayOfYear();
    int var66 = var56.getMinimumValue((org.joda.time.ReadablePartial)var64);
    org.joda.time.DurationField var67 = var56.getDurationField();
    org.joda.time.DateTimeFieldType var68 = var56.getType();
    org.joda.time.field.OffsetDateTimeField var72 = new org.joda.time.field.OffsetDateTimeField(var37, var68, 884, 3, 948);
    long var74 = var72.roundCeiling(3L);
    int var76 = var72.getMaximumValue((-7200000L));
    boolean var78 = var72.isLeap((-79L));
    org.joda.time.DurationField var79 = var72.getDurationField();
    boolean var80 = var30.equals((java.lang.Object)var79);
    long var83 = var30.subtract(1377739435655L, 59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1377742883102L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 86399);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 3L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 948);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1377739436186L);

  }

  public void test484() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test484"); }


    org.joda.time.MutableDateTime var0 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var1 = var0.year();
    org.joda.time.MutableDateTime.Property var2 = var0.weekOfWeekyear();
    var0.setMillisOfDay(16);
    org.joda.time.DateTimeField var5 = var0.getRoundingField();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setHourOfDay(1962);
      fail("Expected exception of type org.joda.time.IllegalFieldValueException");
    } catch (org.joda.time.IllegalFieldValueException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test485() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test485"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardSeconds(1377742981948L);
    org.joda.time.chrono.JulianChronology var2 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var3 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var2);
    org.joda.time.LocalDate var4 = var3.toLocalDate();
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var6 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var3, (org.joda.time.ReadableInstant)var5);
    org.joda.time.MutableDateTime var7 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var8 = var7.year();
    boolean var9 = var5.isBefore((org.joda.time.ReadableInstant)var7);
    org.joda.time.Duration var11 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var13 = org.joda.time.Duration.standardHours((-1L));
    boolean var14 = var11.isShorterThan((org.joda.time.ReadableDuration)var13);
    org.joda.time.Duration var16 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var18 = org.joda.time.Duration.standardHours((-1L));
    boolean var19 = var16.isShorterThan((org.joda.time.ReadableDuration)var18);
    org.joda.time.Duration var20 = var11.plus((org.joda.time.ReadableDuration)var16);
    var7.add((org.joda.time.ReadableDuration)var16);
    org.joda.time.MutableDateTime.Property var22 = var7.weekyear();
    org.joda.time.MutableDateTime.Property var23 = var7.year();
    boolean var25 = var7.equals((java.lang.Object)(byte)0);
    var7.addDays(216);
    org.joda.time.Period var28 = var1.toPeriodFrom((org.joda.time.ReadableInstant)var7);
    java.util.GregorianCalendar var29 = var7.toGregorianCalendar();
    var7.addMillis(12200);
    org.joda.time.DateTime var32 = new org.joda.time.DateTime();
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var35 = new org.joda.time.DateMidnight((-1L), (org.joda.time.Chronology)var34);
    org.joda.time.chrono.JulianChronology var36 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var37 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var36);
    org.joda.time.LocalDate var38 = var37.toLocalDate();
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var40 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var37, (org.joda.time.ReadableInstant)var39);
    org.joda.time.MutableDateTime var41 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var42 = var41.year();
    boolean var43 = var39.isBefore((org.joda.time.ReadableInstant)var41);
    org.joda.time.Duration var45 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var47 = org.joda.time.Duration.standardHours((-1L));
    boolean var48 = var45.isShorterThan((org.joda.time.ReadableDuration)var47);
    org.joda.time.Duration var50 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var52 = org.joda.time.Duration.standardHours((-1L));
    boolean var53 = var50.isShorterThan((org.joda.time.ReadableDuration)var52);
    org.joda.time.Duration var54 = var45.plus((org.joda.time.ReadableDuration)var50);
    var41.add((org.joda.time.ReadableDuration)var50);
    var41.setHourOfDay(10);
    org.joda.time.Years var58 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var35, (org.joda.time.ReadableInstant)var41);
    org.joda.time.Period var59 = new org.joda.time.Period((org.joda.time.ReadableInstant)var32, (org.joda.time.ReadableInstant)var41);
    org.joda.time.Duration var61 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var63 = org.joda.time.Duration.standardHours((-1L));
    boolean var64 = var61.isShorterThan((org.joda.time.ReadableDuration)var63);
    org.joda.time.Duration var66 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var68 = org.joda.time.Duration.standardHours((-1L));
    boolean var69 = var66.isShorterThan((org.joda.time.ReadableDuration)var68);
    org.joda.time.Duration var70 = var61.plus((org.joda.time.ReadableDuration)var66);
    java.lang.String var71 = var70.toString();
    org.joda.time.DateTime var73 = var32.withDurationAdded((org.joda.time.ReadableDuration)var70, 80);
    org.joda.time.MutablePeriod var74 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant)var7, (org.joda.time.ReadableInstant)var32);
    org.joda.time.DateTime var76 = var32.plusWeeks(2024);
    org.joda.time.DateTime.Property var77 = var76.minuteOfDay();
    org.joda.time.Instant var78 = var76.toInstant();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "PT-7200S"+ "'", var71.equals("PT-7200S"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test486() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test486"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.LocalDate var2 = var1.toLocalDate();
    org.joda.time.MutableDateTime var3 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var4 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var1, (org.joda.time.ReadableInstant)var3);
    org.joda.time.MutableDateTime var5 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var6 = var5.year();
    boolean var7 = var3.isBefore((org.joda.time.ReadableInstant)var5);
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    var10.setWeekOfWeekyear(1);
    int var13 = var10.getRoundingMode();
    var10.addMillis(100);
    var10.setSecondOfMinute(10);
    org.joda.time.PeriodType var18 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var19 = new org.joda.time.Period((org.joda.time.ReadableDuration)var9, (org.joda.time.ReadableInstant)var10, var18);
    org.joda.time.Days var20 = var19.toStandardDays();
    org.joda.time.Duration var21 = var20.toStandardDuration();
    org.joda.time.MutableInterval var22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)var5, (org.joda.time.ReadablePeriod)var20);
    org.joda.time.chrono.JulianChronology var23 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var24 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var23);
    org.joda.time.LocalDate var25 = var24.toLocalDate();
    org.joda.time.DateMidnight var27 = var24.minusWeeks((-1));
    org.joda.time.Duration var29 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var30 = new org.joda.time.MutableDateTime();
    var30.setWeekOfWeekyear(1);
    int var33 = var30.getRoundingMode();
    var30.addMillis(100);
    var30.setSecondOfMinute(10);
    org.joda.time.PeriodType var38 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var39 = new org.joda.time.Period((org.joda.time.ReadableDuration)var29, (org.joda.time.ReadableInstant)var30, var38);
    org.joda.time.Days var40 = var39.toStandardDays();
    org.joda.time.DurationFieldType var41 = var40.getFieldType();
    org.joda.time.DateMidnight var43 = var27.withFieldAdded(var41, 1);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var45 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var44);
    org.joda.time.LocalDate var46 = var45.toLocalDate();
    org.joda.time.DateMidnight var48 = var45.minusWeeks((-1));
    org.joda.time.Duration var50 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var51 = new org.joda.time.MutableDateTime();
    var51.setWeekOfWeekyear(1);
    int var54 = var51.getRoundingMode();
    var51.addMillis(100);
    var51.setSecondOfMinute(10);
    org.joda.time.PeriodType var59 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var60 = new org.joda.time.Period((org.joda.time.ReadableDuration)var50, (org.joda.time.ReadableInstant)var51, var59);
    org.joda.time.Days var61 = var60.toStandardDays();
    org.joda.time.DurationFieldType var62 = var61.getFieldType();
    org.joda.time.DateMidnight var64 = var48.withFieldAdded(var62, 1);
    org.joda.time.DateMidnight var66 = var27.withFieldAdded(var62, 13);
    org.joda.time.DateMidnight var68 = var66.plusDays(35);
    var22.setEnd((org.joda.time.ReadableInstant)var66);
    org.joda.time.MutableInterval var70 = var22.copy();
    org.joda.time.Months var71 = org.joda.time.Months.monthsIn((org.joda.time.ReadableInterval)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test487() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test487"); }


    org.joda.time.LocalDateTime var0 = org.joda.time.LocalDateTime.now();
    int var1 = var0.getDayOfYear();
    org.joda.time.Chronology var2 = var0.getChronology();
    org.joda.time.Period var7 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var9 = var7.plusSeconds(100);
    org.joda.time.Period var11 = var7.minusMillis(10);
    org.joda.time.LocalDateTime var12 = var0.plus((org.joda.time.ReadablePeriod)var11);
    org.joda.time.LocalDate var14 = org.joda.time.LocalDate.parse("1969-12");
    org.joda.time.tz.FixedDateTimeZone var19 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var20 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var21 = new org.joda.time.MutablePeriod(var20);
    var21.addDays(1);
    org.joda.time.Duration var25 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var27 = org.joda.time.Duration.standardHours((-1L));
    boolean var28 = var25.isShorterThan((org.joda.time.ReadableDuration)var27);
    var21.add((org.joda.time.ReadableDuration)var27);
    org.joda.time.MutableDateTime var30 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var27, (org.joda.time.ReadableInstant)var30);
    var31.clear();
    org.joda.time.MutableDateTime var33 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var34 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var35 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var34);
    org.joda.time.LocalDate var36 = var35.toLocalDate();
    org.joda.time.MutableDateTime var37 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var38 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var35, (org.joda.time.ReadableInstant)var37);
    org.joda.time.MutableDateTime var39 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var40 = var39.year();
    boolean var41 = var37.isBefore((org.joda.time.ReadableInstant)var39);
    org.joda.time.Duration var43 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var45 = org.joda.time.Duration.standardHours((-1L));
    boolean var46 = var43.isShorterThan((org.joda.time.ReadableDuration)var45);
    org.joda.time.Duration var48 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var50 = org.joda.time.Duration.standardHours((-1L));
    boolean var51 = var48.isShorterThan((org.joda.time.ReadableDuration)var50);
    org.joda.time.Duration var52 = var43.plus((org.joda.time.ReadableDuration)var48);
    var39.add((org.joda.time.ReadableDuration)var48);
    org.joda.time.MutableDateTime.Property var54 = var39.dayOfWeek();
    var31.setPeriod((org.joda.time.ReadableInstant)var33, (org.joda.time.ReadableInstant)var39);
    boolean var56 = var19.equals((java.lang.Object)var31);
    boolean var57 = var19.isFixed();
    org.joda.time.LocalTime var58 = org.joda.time.LocalTime.now((org.joda.time.DateTimeZone)var19);
    org.joda.time.DateTime var59 = var14.toDateTimeAtStartOfDay((org.joda.time.DateTimeZone)var19);
    org.joda.time.DateTime var60 = var0.toDateTime((org.joda.time.DateTimeZone)var19);
    org.joda.time.LocalDateTime var62 = var0.withWeekyear(876);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test488() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test488"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.chrono.JulianChronology var1 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var2 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var1);
    org.joda.time.LocalDate var3 = var2.toLocalDate();
    org.joda.time.LocalDate var5 = var3.minusMonths(0);
    int[] var7 = var0.get((org.joda.time.ReadablePartial)var5, 100L);
    org.joda.time.chrono.EthiopicChronology var11 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var12 = var11.hours();
    org.joda.time.LocalTime var13 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var11);
    org.joda.time.Period var14 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var11);
    org.joda.time.DateTimeField var15 = var11.millisOfSecond();
    org.joda.time.DateTimeField var16 = var11.secondOfDay();
    org.joda.time.field.SkipDateTimeField var18 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var0, var16, 100);
    org.joda.time.DurationField var19 = var18.getRangeDurationField();
    org.joda.time.DurationField var20 = var18.getLeapDurationField();
    org.joda.time.MonthDay var21 = org.joda.time.MonthDay.now();
    int var22 = var18.getMinimumValue((org.joda.time.ReadablePartial)var21);
    org.joda.time.DateTimeFieldType[] var23 = var21.getFieldTypes();
    org.joda.time.chrono.EthiopicChronology var24 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var25 = var24.hours();
    org.joda.time.DateTimeField var26 = var24.minuteOfHour();
    long var30 = var24.add(1L, 1377746580759L, 2005);
    org.joda.time.MonthDay var31 = var21.withChronologyRetainFields((org.joda.time.Chronology)var24);
    org.joda.time.MonthDay var33 = var31.plusDays(8);
    org.joda.time.chrono.ISOChronology var34 = org.joda.time.chrono.ISOChronology.getInstance();
    org.joda.time.tz.FixedDateTimeZone var39 = new org.joda.time.tz.FixedDateTimeZone("P0D", "hi!", 28, 228);
    int var41 = var39.getOffsetFromLocal(1377742981323L);
    org.joda.time.DateTimeZone var43 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.chrono.JulianChronology var44 = org.joda.time.chrono.JulianChronology.getInstance(var43);
    long var46 = var39.getMillisKeepLocal(var43, 1377746580759L);
    org.joda.time.Chronology var47 = var34.withZone(var43);
    org.joda.time.LocalDateTime var48 = org.joda.time.LocalDateTime.now();
    int var49 = var48.getDayOfYear();
    org.joda.time.Chronology var50 = var48.getChronology();
    org.joda.time.chrono.StrictChronology var51 = org.joda.time.chrono.StrictChronology.getInstance(var50);
    org.joda.time.DateTime var59 = new org.joda.time.DateTime(0, 4, 28, 1, 28, 1, 1);
    org.joda.time.LocalDate var60 = var59.toLocalDate();
    org.joda.time.LocalDate.Property var61 = var60.weekyear();
    long var63 = var51.set((org.joda.time.ReadablePartial)var60, 104L);
    org.joda.time.DateTimeField var64 = var51.dayOfYear();
    org.joda.time.field.SkipDateTimeField var65 = new org.joda.time.field.SkipDateTimeField((org.joda.time.Chronology)var34, var64);
    org.joda.time.MonthDay var66 = var33.withChronologyRetainFields((org.joda.time.Chronology)var34);
    org.joda.time.PeriodType var68 = org.joda.time.PeriodType.yearDay();
    org.joda.time.MutableDateTime var69 = new org.joda.time.MutableDateTime();
    var69.setWeekOfWeekyear(1);
    org.joda.time.chrono.JulianChronology var72 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    var69.setChronology((org.joda.time.Chronology)var72);
    org.joda.time.MutablePeriod var74 = new org.joda.time.MutablePeriod(0L, var68, (org.joda.time.Chronology)var72);
    org.joda.time.LocalTime var75 = new org.joda.time.LocalTime((org.joda.time.Chronology)var72);
    org.joda.time.LocalTime.Property var76 = var75.millisOfSecond();
    boolean var77 = var34.equals((java.lang.Object)var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2762381894421796L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1377746580754L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 241);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == (-62157023999896L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);

  }

  public void test489() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test489"); }


    org.joda.time.chrono.GJChronology var0 = org.joda.time.chrono.GJChronology.getInstanceUTC();
    java.lang.String var1 = var0.toString();
    org.joda.time.DurationField var2 = var0.eras();
    org.joda.time.DateTimeField var3 = var0.secondOfMinute();
    java.lang.String var4 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "GJChronology[UTC]"+ "'", var1.equals("GJChronology[UTC]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "GJChronology[UTC]"+ "'", var4.equals("GJChronology[UTC]"));

  }

  public void test490() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test490"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var2 = new org.joda.time.MutableDateTime();
    var2.setWeekOfWeekyear(1);
    int var5 = var2.getRoundingMode();
    var2.addMillis(100);
    var2.setSecondOfMinute(10);
    org.joda.time.PeriodType var10 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var11 = new org.joda.time.Period((org.joda.time.ReadableDuration)var1, (org.joda.time.ReadableInstant)var2, var10);
    org.joda.time.Duration var13 = var1.plus(100L);
    org.joda.time.Hours var14 = var13.toStandardHours();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test491() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test491"); }


    org.joda.time.YearMonth var1 = new org.joda.time.YearMonth(10L);
    org.joda.time.chrono.EthiopicChronology var2 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.YearMonth var3 = var1.withChronologyRetainFields((org.joda.time.Chronology)var2);
    org.joda.time.YearMonth var5 = var3.withMonthOfYear(10);
    org.joda.time.Interval var6 = var3.toInterval();
    org.joda.time.DateTimeZone var8 = org.joda.time.DateTimeZone.forOffsetMillis(759);
    org.joda.time.DateMidnight var9 = org.joda.time.DateMidnight.now(var8);
    org.joda.time.Interval var10 = var3.toInterval(var8);
    org.joda.time.chrono.GregorianChronology var11 = org.joda.time.chrono.GregorianChronology.getInstance(var8);
    org.joda.time.DurationField var12 = var11.millis();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test492() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test492"); }


    org.joda.time.format.DateTimeFormatter var0 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
    org.joda.time.chrono.EthiopicChronology var4 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DurationField var5 = var4.hours();
    org.joda.time.LocalTime var6 = org.joda.time.LocalTime.fromMillisOfDay(0L, (org.joda.time.Chronology)var4);
    org.joda.time.Period var7 = new org.joda.time.Period(1L, (-1L), (org.joda.time.Chronology)var4);
    org.joda.time.DateTimeField var8 = var4.millisOfSecond();
    org.joda.time.chrono.LenientChronology var9 = org.joda.time.chrono.LenientChronology.getInstance((org.joda.time.Chronology)var4);
    org.joda.time.format.DateTimeFormatter var10 = var0.withChronology((org.joda.time.Chronology)var9);
    org.joda.time.tz.FixedDateTimeZone var15 = new org.joda.time.tz.FixedDateTimeZone("PT0H", "ISOChronology[UTC]", 100, 13);
    org.joda.time.PeriodType var16 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var17 = new org.joda.time.MutablePeriod(var16);
    var17.addDays(1);
    org.joda.time.Duration var21 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var23 = org.joda.time.Duration.standardHours((-1L));
    boolean var24 = var21.isShorterThan((org.joda.time.ReadableDuration)var23);
    var17.add((org.joda.time.ReadableDuration)var23);
    org.joda.time.MutableDateTime var26 = new org.joda.time.MutableDateTime();
    org.joda.time.MutablePeriod var27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration)var23, (org.joda.time.ReadableInstant)var26);
    var27.clear();
    org.joda.time.MutableDateTime var29 = new org.joda.time.MutableDateTime();
    org.joda.time.chrono.JulianChronology var30 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var31 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var30);
    org.joda.time.LocalDate var32 = var31.toLocalDate();
    org.joda.time.MutableDateTime var33 = new org.joda.time.MutableDateTime();
    org.joda.time.Years var34 = org.joda.time.Years.yearsBetween((org.joda.time.ReadableInstant)var31, (org.joda.time.ReadableInstant)var33);
    org.joda.time.MutableDateTime var35 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var36 = var35.year();
    boolean var37 = var33.isBefore((org.joda.time.ReadableInstant)var35);
    org.joda.time.Duration var39 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var41 = org.joda.time.Duration.standardHours((-1L));
    boolean var42 = var39.isShorterThan((org.joda.time.ReadableDuration)var41);
    org.joda.time.Duration var44 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.Duration var46 = org.joda.time.Duration.standardHours((-1L));
    boolean var47 = var44.isShorterThan((org.joda.time.ReadableDuration)var46);
    org.joda.time.Duration var48 = var39.plus((org.joda.time.ReadableDuration)var44);
    var35.add((org.joda.time.ReadableDuration)var44);
    org.joda.time.MutableDateTime.Property var50 = var35.dayOfWeek();
    var27.setPeriod((org.joda.time.ReadableInstant)var29, (org.joda.time.ReadableInstant)var35);
    boolean var52 = var15.equals((java.lang.Object)var27);
    org.joda.time.Chronology var53 = var9.withZone((org.joda.time.DateTimeZone)var15);
    org.joda.time.Period var62 = new org.joda.time.Period(12217, (-22), 1970, 765, 1, 62, 28, 13);
    int[] var65 = var9.get((org.joda.time.ReadablePeriod)var62, (-60779281008478L), (-703463L));
    org.joda.time.LocalDateTime var66 = new org.joda.time.LocalDateTime((org.joda.time.Chronology)var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.LocalDateTime var68 = var66.minusMonths(23544431);
      fail("Expected exception of type org.joda.time.chrono.LimitChronology.LimitException");
    } catch (Throwable e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test493() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test493"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.joda.time.MonthDay var1 = org.joda.time.MonthDay.parse("Months");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test494() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test494"); }


    org.joda.time.PeriodType var0 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.MutablePeriod var1 = new org.joda.time.MutablePeriod(var0);
    int var2 = var1.getSeconds();
    int var3 = var1.getMonths();
    var1.setWeeks((-1));
    org.joda.time.Weeks var6 = org.joda.time.Weeks.standardWeeksIn((org.joda.time.ReadablePeriod)var1);
    org.joda.time.Days var7 = var6.toStandardDays();
    org.joda.time.MutableDateTime var8 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var9 = var8.year();
    org.joda.time.MutableDateTime.Property var10 = var8.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var11 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var12 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var11);
    org.joda.time.Period var17 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var19 = var17.plusSeconds(100);
    org.joda.time.Period var21 = var17.minusMillis(10);
    boolean var22 = var12.equals((java.lang.Object)10);
    org.joda.time.Weeks var23 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var8, (org.joda.time.ReadableInstant)var12);
    org.joda.time.MutableDateTime var24 = new org.joda.time.MutableDateTime();
    org.joda.time.MutableDateTime.Property var25 = var24.year();
    org.joda.time.MutableDateTime.Property var26 = var24.weekOfWeekyear();
    org.joda.time.chrono.JulianChronology var27 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var28 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var27);
    org.joda.time.Period var33 = new org.joda.time.Period(1, 10, 10, 1);
    org.joda.time.Period var35 = var33.plusSeconds(100);
    org.joda.time.Period var37 = var33.minusMillis(10);
    boolean var38 = var28.equals((java.lang.Object)10);
    org.joda.time.Weeks var39 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant)var24, (org.joda.time.ReadableInstant)var28);
    org.joda.time.Weeks var40 = var23.minus(var39);
    org.joda.time.Weeks var42 = var40.multipliedBy(147);
    boolean var43 = var6.isLessThan(var40);
    int var44 = var40.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1);

  }

  public void test495() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test495"); }


    org.joda.time.Duration var1 = org.joda.time.Duration.standardHours(1980000000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test496() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test496"); }


    org.joda.time.chrono.EthiopicChronology var0 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTimeField var1 = var0.dayOfYear();
    org.joda.time.YearMonthDay var2 = new org.joda.time.YearMonthDay((org.joda.time.Chronology)var0);
    org.joda.time.YearMonthDay var4 = var2.plusDays((-1));
    org.joda.time.DateTime var5 = var4.toDateTimeAtCurrentTime();
    org.joda.time.Duration var9 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var10 = new org.joda.time.MutableDateTime();
    var10.setWeekOfWeekyear(1);
    int var13 = var10.getRoundingMode();
    var10.addMillis(100);
    var10.setSecondOfMinute(10);
    org.joda.time.PeriodType var18 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var19 = new org.joda.time.Period((org.joda.time.ReadableDuration)var9, (org.joda.time.ReadableInstant)var10, var18);
    org.joda.time.PeriodType var20 = var18.withWeeksRemoved();
    java.lang.String var21 = var18.toString();
    org.joda.time.DateTime var22 = org.joda.time.DateTime.now();
    org.joda.time.DateTime var24 = var22.withMillis(0L);
    org.joda.time.DateTime var26 = var22.minusMonths(33);
    org.joda.time.chrono.JulianChronology var27 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var28 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var27);
    org.joda.time.LocalDate var29 = var28.toLocalDate();
    org.joda.time.LocalDate var31 = var29.minusMonths(0);
    org.joda.time.DateTime var32 = var29.toDateTimeAtMidnight();
    org.joda.time.DateTime var34 = var32.withMillis(100L);
    int var35 = var32.getWeekyear();
    org.joda.time.DateTime var37 = var32.withYear(86399);
    org.joda.time.DateTime.Property var38 = var37.year();
    org.joda.time.Hours var39 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant)var22, (org.joda.time.ReadableInstant)var37);
    org.joda.time.DateTime.Property var40 = var37.secondOfDay();
    org.joda.time.chrono.EthiopicChronology var41 = org.joda.time.chrono.EthiopicChronology.getInstance();
    org.joda.time.DateTime var42 = var37.withChronology((org.joda.time.Chronology)var41);
    org.joda.time.Period var43 = new org.joda.time.Period(35L, 1377742980900L, var18, (org.joda.time.Chronology)var41);
    org.joda.time.DateTime var45 = var5.withPeriodAdded((org.joda.time.ReadablePeriod)var43, 1969);
    org.joda.time.DateTime var47 = var45.withDayOfYear(44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "PeriodType[YearWeekDayTime]"+ "'", var21.equals("PeriodType[YearWeekDayTime]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 2013);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test497() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test497"); }


    org.joda.time.Instant var0 = org.joda.time.Instant.now();
    org.joda.time.DateTimeZone var2 = org.joda.time.DateTimeZone.forOffsetMillis(33);
    org.joda.time.MutableDateTime var3 = var0.toMutableDateTime(var2);
    org.joda.time.Duration var5 = org.joda.time.Duration.standardHours(1377746598594L);
    org.joda.time.MutableInterval var6 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant)var0, (org.joda.time.ReadableDuration)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test498() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test498"); }


    org.joda.time.Period var1 = org.joda.time.Period.days(526);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test499() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test499"); }


    org.joda.time.MutableInterval var0 = new org.joda.time.MutableInterval();
    long var1 = var0.getEndMillis();
    var0.setDurationBeforeEnd(1L);
    long var4 = var0.toDurationMillis();
    boolean var6 = var0.isAfter(1377735830915L);
    org.joda.time.MutableInterval var7 = var0.copy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test500() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest4.test500"); }


    org.joda.time.chrono.JulianChronology var0 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var1 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var0);
    org.joda.time.DateMidnight var3 = var1.plusDays(2013);
    org.joda.time.chrono.JulianChronology var4 = org.joda.time.chrono.JulianChronology.getInstanceUTC();
    org.joda.time.DateMidnight var5 = org.joda.time.DateMidnight.now((org.joda.time.Chronology)var4);
    org.joda.time.LocalDate var6 = var5.toLocalDate();
    org.joda.time.DateMidnight var8 = var5.minusWeeks((-1));
    org.joda.time.Duration var10 = org.joda.time.Duration.standardHours((-1L));
    org.joda.time.MutableDateTime var11 = new org.joda.time.MutableDateTime();
    var11.setWeekOfWeekyear(1);
    int var14 = var11.getRoundingMode();
    var11.addMillis(100);
    var11.setSecondOfMinute(10);
    org.joda.time.PeriodType var19 = org.joda.time.PeriodType.yearWeekDayTime();
    org.joda.time.Period var20 = new org.joda.time.Period((org.joda.time.ReadableDuration)var10, (org.joda.time.ReadableInstant)var11, var19);
    org.joda.time.Days var21 = var20.toStandardDays();
    org.joda.time.DurationFieldType var22 = var21.getFieldType();
    org.joda.time.DateMidnight var24 = var8.withFieldAdded(var22, 1);
    org.joda.time.field.PreciseDurationField var26 = new org.joda.time.field.PreciseDurationField(var22, 1L);
    org.joda.time.DateMidnight var28 = var3.withFieldAdded(var22, 228);
    org.joda.time.field.PreciseDurationField var30 = new org.joda.time.field.PreciseDurationField(var22, (-9L));
    int var33 = var30.getValue(70534000L, 228009L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-7837111));

  }

}
