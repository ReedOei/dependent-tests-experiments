org.apache.zeppelin.socket.NotebookServer.multicastToUser : $r5 = r0.<org.apache.zeppelin.socket.NotebookServer: java.util.Map userConnectedSockets> >>>>>>>> org.apache.zeppelin.socket.NotebookServer.multicastToUser : $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.zeppelin.socket.NotebookServer.multicastToUser : $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.socket.NotebookServer.multicastToUser : if $z0 != 0
org.apache.zeppelin.socket.NotebookServer.multicastToUser : if $z0 != 0 >>>>>>>> org.apache.zeppelin.socket.NotebookServer.multicastToUser : $r6 = <org.apache.zeppelin.socket.NotebookServer: org.slf4j.Logger LOG>
org.apache.zeppelin.socket.NotebookServer.multicastToUser : if $z0 != 0 >>>>>>>> org.apache.zeppelin.socket.NotebookServer.multicastToUser : $r7 = r0.<org.apache.zeppelin.socket.NotebookServer: java.util.Map userConnectedSockets>
org.apache.zeppelin.socket.NotebookServer.multicastToUser : $r7 = r0.<org.apache.zeppelin.socket.NotebookServer: java.util.Map userConnectedSockets> >>>>>>>> org.apache.zeppelin.socket.NotebookServer.multicastToUser : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.zeppelin.socket.NotebookServer.multicastToUser : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.zeppelin.socket.NotebookServer.multicastToUser : $r9 = (java.util.Queue) $r8
org.apache.zeppelin.socket.NotebookServer.multicastToUser : $r9 = (java.util.Queue) $r8 >>>>>>>> org.apache.zeppelin.socket.NotebookServer.multicastToUser : r3 = interfaceinvoke $r9.<java.util.Queue: java.util.Iterator iterator()>()
org.apache.zeppelin.socket.NotebookServer.multicastToUser : r3 = interfaceinvoke $r9.<java.util.Queue: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.socket.NotebookServer.multicastToUser : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.socket.NotebookServer.multicastToUser : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.socket.NotebookServer.multicastToUser : if $z1 == 0
org.apache.zeppelin.socket.NotebookServer.multicastToUser : if $z1 == 0 >>>>>>>> org.apache.zeppelin.socket.NotebookServer.multicastToUser : $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.socket.NotebookServer.multicastToUser : if $z1 == 0 >>>>>>>> org.apache.zeppelin.socket.NotebookServer.multicastToUser : return
org.apache.zeppelin.socket.NotebookServer.multicastToUser : $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.socket.NotebookServer.multicastToUser : r4 = (org.apache.zeppelin.socket.NotebookSocket) $r10
org.apache.zeppelin.socket.NotebookServer.multicastToUser : r4 = (org.apache.zeppelin.socket.NotebookSocket) $r10 >>>>>>>> org.apache.zeppelin.socket.NotebookServer.multicastToUser : specialinvoke r0.<org.apache.zeppelin.socket.NotebookServer: void unicast(org.apache.zeppelin.notebook.socket.Message,org.apache.zeppelin.socket.NotebookSocket)>(r2, r4)
org.apache.zeppelin.socket.NotebookServer.multicastToUser : specialinvoke r0.<org.apache.zeppelin.socket.NotebookServer: void unicast(org.apache.zeppelin.notebook.socket.Message,org.apache.zeppelin.socket.NotebookSocket)>(r2, r4) >>>>>>>> org.apache.zeppelin.socket.NotebookServer.multicastToUser : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.socket.NotebookServer.multicastToUser : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.socket.NotebookServer.multicastToUser : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.socket.NotebookServer.multicastToUser : $r6 = <org.apache.zeppelin.socket.NotebookServer: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.socket.NotebookServer.multicastToUser : interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Multicasting to user {} that is not in connections map", r1)
org.apache.zeppelin.socket.NotebookServer.multicastToUser : interfaceinvoke $r6.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Multicasting to user {} that is not in connections map", r1) >>>>>>>> org.apache.zeppelin.socket.NotebookServer.multicastToUser : return
