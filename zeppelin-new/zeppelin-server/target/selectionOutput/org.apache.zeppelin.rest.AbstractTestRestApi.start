org.apache.zeppelin.rest.AbstractTestRestApi.start : $z1 = <org.apache.zeppelin.rest.AbstractTestRestApi: boolean wasRunning> >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : if $z1 != 0
org.apache.zeppelin.rest.AbstractTestRestApi.start : if $z1 != 0 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r7 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_HOME>
org.apache.zeppelin.rest.AbstractTestRestApi.start : if $z1 != 0 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : return
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r7 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_HOME> >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r8 = virtualinvoke $r7.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r8 = virtualinvoke $r7.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>($r8, "../")
org.apache.zeppelin.rest.AbstractTestRestApi.start : staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>($r8, "../") >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r10 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_WAR>
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r10 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_WAR> >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r11 = virtualinvoke $r10.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r11 = virtualinvoke $r10.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>($r11, "../zeppelin-web/dist")
org.apache.zeppelin.rest.AbstractTestRestApi.start : staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>($r11, "../zeppelin-web/dist") >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r13 = new java.io.File
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r13 = new java.io.File >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>("../zeppelin-web/dist")
org.apache.zeppelin.rest.AbstractTestRestApi.start : specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>("../zeppelin-web/dist") >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke $r13.<java.io.File: boolean mkdirs()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke $r13.<java.io.File: boolean mkdirs()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r14 = <org.apache.zeppelin.rest.AbstractTestRestApi: org.slf4j.Logger LOG>
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r14 = <org.apache.zeppelin.rest.AbstractTestRestApi: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String)>("Staring test Zeppelin up...")
org.apache.zeppelin.rest.AbstractTestRestApi.start : interfaceinvoke $r14.<org.slf4j.Logger: void info(java.lang.String)>("Staring test Zeppelin up...") >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : r0 = staticinvoke <org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.zeppelin.conf.ZeppelinConfiguration create()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : r0 = staticinvoke <org.apache.zeppelin.conf.ZeppelinConfiguration: org.apache.zeppelin.conf.ZeppelinConfiguration create()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : if z0 == 0
org.apache.zeppelin.rest.AbstractTestRestApi.start : if z0 == 0 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : <org.apache.zeppelin.rest.AbstractTestRestApi: boolean isRunningWithAuth> = 1
org.apache.zeppelin.rest.AbstractTestRestApi.start : if z0 == 0 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r23 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETERS>
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r23 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETERS> >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : r1 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r23)
org.apache.zeppelin.rest.AbstractTestRestApi.start : r1 = virtualinvoke r0.<org.apache.zeppelin.conf.ZeppelinConfiguration: java.lang.String getString(org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars)>($r23) >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : r2 = null
org.apache.zeppelin.rest.AbstractTestRestApi.start : r2 = null >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : r3 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",")
org.apache.zeppelin.rest.AbstractTestRestApi.start : r3 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : i0 = lengthof r3
org.apache.zeppelin.rest.AbstractTestRestApi.start : i0 = lengthof r3 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : i1 = 0
org.apache.zeppelin.rest.AbstractTestRestApi.start : i1 = 0 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : if i1 >= i0
org.apache.zeppelin.rest.AbstractTestRestApi.start : if i1 >= i0 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : r4 = r3[i1]
org.apache.zeppelin.rest.AbstractTestRestApi.start : if i1 >= i0 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r28 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETERS>
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r28 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETERS> >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r29 = virtualinvoke $r28.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r29 = virtualinvoke $r28.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>($r29, r2)
org.apache.zeppelin.rest.AbstractTestRestApi.start : staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>($r29, r2) >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r31 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r31 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : <org.apache.zeppelin.rest.AbstractTestRestApi: java.util.concurrent.ExecutorService executor> = $r31
org.apache.zeppelin.rest.AbstractTestRestApi.start : <org.apache.zeppelin.rest.AbstractTestRestApi: java.util.concurrent.ExecutorService executor> = $r31 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r32 = <org.apache.zeppelin.rest.AbstractTestRestApi: java.util.concurrent.ExecutorService executor>
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r32 = <org.apache.zeppelin.rest.AbstractTestRestApi: java.util.concurrent.ExecutorService executor> >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r33 = <org.apache.zeppelin.rest.AbstractTestRestApi: java.lang.Runnable server>
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r33 = <org.apache.zeppelin.rest.AbstractTestRestApi: java.lang.Runnable server> >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : interfaceinvoke $r32.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r33)
org.apache.zeppelin.rest.AbstractTestRestApi.start : interfaceinvoke $r32.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r33) >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : l2 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : l2 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : z6 = 0
org.apache.zeppelin.rest.AbstractTestRestApi.start : z6 = 0 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $l4 = $l3 - l2
org.apache.zeppelin.rest.AbstractTestRestApi.start : $l4 = $l3 - l2 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $b5 = $l4 cmp 180000L
org.apache.zeppelin.rest.AbstractTestRestApi.start : $b5 = $l4 cmp 180000L >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : if $b5 >= 0
org.apache.zeppelin.rest.AbstractTestRestApi.start : if $b5 >= 0 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : staticinvoke <java.lang.Thread: void sleep(long)>(2000L)
org.apache.zeppelin.rest.AbstractTestRestApi.start : if $b5 >= 0 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : if z6 != 0
org.apache.zeppelin.rest.AbstractTestRestApi.start : if z6 != 0 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r35 = new java.lang.RuntimeException
org.apache.zeppelin.rest.AbstractTestRestApi.start : if z6 != 0 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r36 = <org.apache.zeppelin.rest.AbstractTestRestApi: org.slf4j.Logger LOG>
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r36 = <org.apache.zeppelin.rest.AbstractTestRestApi: org.slf4j.Logger LOG> >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : interfaceinvoke $r36.<org.slf4j.Logger: void info(java.lang.String)>("Test Zeppelin stared.")
org.apache.zeppelin.rest.AbstractTestRestApi.start : interfaceinvoke $r36.<org.slf4j.Logger: void info(java.lang.String)>("Test Zeppelin stared.") >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : r37 = null
org.apache.zeppelin.rest.AbstractTestRestApi.start : r37 = null >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r38 = <org.apache.zeppelin.server.ZeppelinServer: org.apache.zeppelin.notebook.Notebook notebook>
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r38 = <org.apache.zeppelin.server.ZeppelinServer: org.apache.zeppelin.notebook.Notebook notebook> >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r39 = virtualinvoke $r38.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager getInterpreterSettingManager()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r39 = virtualinvoke $r38.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager getInterpreterSettingManager()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r40 = virtualinvoke $r39.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List get()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r40 = virtualinvoke $r39.<org.apache.zeppelin.interpreter.InterpreterSettingManager: java.util.List get()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : r5 = interfaceinvoke $r40.<java.util.List: java.util.Iterator iterator()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : r5 = interfaceinvoke $r40.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $z7 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : $z7 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : if $z7 == 0
org.apache.zeppelin.rest.AbstractTestRestApi.start : if $z7 == 0 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r41 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : if $z7 == 0 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r43 = virtualinvoke r37.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.Object getProperties()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r43 = virtualinvoke r37.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.Object getProperties()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : r44 = (java.util.Properties) $r43
org.apache.zeppelin.rest.AbstractTestRestApi.start : r44 = (java.util.Properties) $r43 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r45 = "true"
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r45 = "true" >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r46 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("CI")
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r46 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("CI") >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $z9 = virtualinvoke $r45.<java.lang.String: boolean equals(java.lang.Object)>($r46)
org.apache.zeppelin.rest.AbstractTestRestApi.start : $z9 = virtualinvoke $r45.<java.lang.String: boolean equals(java.lang.Object)>($r46) >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : if $z9 == 0
org.apache.zeppelin.rest.AbstractTestRestApi.start : if $z9 == 0 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke r44.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("master", "local[2]")
org.apache.zeppelin.rest.AbstractTestRestApi.start : if $z9 == 0 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : r55 = staticinvoke <org.apache.zeppelin.rest.AbstractTestRestApi: java.lang.String getSparkHome()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : r55 = staticinvoke <org.apache.zeppelin.rest.AbstractTestRestApi: java.lang.String getSparkHome()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : if r55 == null
org.apache.zeppelin.rest.AbstractTestRestApi.start : if r55 == null >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r56 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("SPARK_MASTER")
org.apache.zeppelin.rest.AbstractTestRestApi.start : if r55 == null >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r63 = <org.apache.zeppelin.server.ZeppelinServer: org.apache.zeppelin.notebook.Notebook notebook>
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r63 = <org.apache.zeppelin.server.ZeppelinServer: org.apache.zeppelin.notebook.Notebook notebook> >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r64 = virtualinvoke $r63.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager getInterpreterSettingManager()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r64 = virtualinvoke $r63.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager getInterpreterSettingManager()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r65 = virtualinvoke r37.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r65 = virtualinvoke r37.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke $r64.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void restart(java.lang.String)>($r65)
org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke $r64.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void restart(java.lang.String)>($r65) >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : return
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r56 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("SPARK_MASTER") >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : if $r56 == null
org.apache.zeppelin.rest.AbstractTestRestApi.start : if $r56 == null >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r57 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("SPARK_MASTER")
org.apache.zeppelin.rest.AbstractTestRestApi.start : if $r56 == null >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke r44.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("master", "local[2]")
org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke r44.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("master", "local[2]") >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke r44.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("spark.cores.max", "2")
org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke r44.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("spark.cores.max", "2") >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke r44.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("spark.home", r55)
org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke r44.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("spark.home", r55) >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke r44.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("zeppelin.spark.useHiveContext", "false")
org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke r44.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("zeppelin.spark.useHiveContext", "false") >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : <org.apache.zeppelin.rest.AbstractTestRestApi: boolean pySpark> = 1
org.apache.zeppelin.rest.AbstractTestRestApi.start : <org.apache.zeppelin.rest.AbstractTestRestApi: boolean pySpark> = 1 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : <org.apache.zeppelin.rest.AbstractTestRestApi: boolean sparkR> = 1
org.apache.zeppelin.rest.AbstractTestRestApi.start : <org.apache.zeppelin.rest.AbstractTestRestApi: boolean sparkR> = 1 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r63 = <org.apache.zeppelin.server.ZeppelinServer: org.apache.zeppelin.notebook.Notebook notebook>
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r57 = staticinvoke <java.lang.System: java.lang.String getenv(java.lang.String)>("SPARK_MASTER") >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke r44.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("master", $r57)
org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke r44.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("master", $r57) >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : goto [?= virtualinvoke r44.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("spark.cores.max", "2")]
org.apache.zeppelin.rest.AbstractTestRestApi.start : goto [?= virtualinvoke r44.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("spark.cores.max", "2")] >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke r44.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("spark.cores.max", "2")
org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke r44.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("master", "local[2]") >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke r44.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("spark.cores.max", "2")
org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke r44.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("spark.cores.max", "2") >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke r44.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("zeppelin.spark.useHiveContext", "false")
org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke r44.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("zeppelin.spark.useHiveContext", "false") >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r50 = staticinvoke <org.apache.zeppelin.rest.AbstractTestRestApi: java.lang.String getSparkHome()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r50 = staticinvoke <org.apache.zeppelin.rest.AbstractTestRestApi: java.lang.String getSparkHome()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke r44.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("spark.home", $r50)
org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke r44.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>("spark.home", $r50) >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke r37.<org.apache.zeppelin.interpreter.InterpreterSetting: void setProperties(java.util.Properties)>(r44)
org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke r37.<org.apache.zeppelin.interpreter.InterpreterSetting: void setProperties(java.util.Properties)>(r44) >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : <org.apache.zeppelin.rest.AbstractTestRestApi: boolean pySpark> = 1
org.apache.zeppelin.rest.AbstractTestRestApi.start : <org.apache.zeppelin.rest.AbstractTestRestApi: boolean pySpark> = 1 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : <org.apache.zeppelin.rest.AbstractTestRestApi: boolean sparkR> = 1
org.apache.zeppelin.rest.AbstractTestRestApi.start : <org.apache.zeppelin.rest.AbstractTestRestApi: boolean sparkR> = 1 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r52 = <org.apache.zeppelin.server.ZeppelinServer: org.apache.zeppelin.notebook.Notebook notebook>
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r52 = <org.apache.zeppelin.server.ZeppelinServer: org.apache.zeppelin.notebook.Notebook notebook> >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r53 = virtualinvoke $r52.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager getInterpreterSettingManager()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r53 = virtualinvoke $r52.<org.apache.zeppelin.notebook.Notebook: org.apache.zeppelin.interpreter.InterpreterSettingManager getInterpreterSettingManager()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r54 = virtualinvoke r37.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r54 = virtualinvoke r37.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getId()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke $r53.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void restart(java.lang.String)>($r54)
org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke $r53.<org.apache.zeppelin.interpreter.InterpreterSettingManager: void restart(java.lang.String)>($r54) >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : goto [?= return]
org.apache.zeppelin.rest.AbstractTestRestApi.start : goto [?= return] >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : return
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r41 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : r6 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r41
org.apache.zeppelin.rest.AbstractTestRestApi.start : r6 = (org.apache.zeppelin.interpreter.InterpreterSetting) $r41 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r42 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r42 = virtualinvoke r6.<org.apache.zeppelin.interpreter.InterpreterSetting: java.lang.String getName()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $z8 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>("spark")
org.apache.zeppelin.rest.AbstractTestRestApi.start : $z8 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>("spark") >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : if $z8 == 0
org.apache.zeppelin.rest.AbstractTestRestApi.start : if $z8 == 0 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : r37 = r6
org.apache.zeppelin.rest.AbstractTestRestApi.start : if $z8 == 0 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : goto [?= $z7 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.rest.AbstractTestRestApi.start : goto [?= $z7 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $z7 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : r37 = r6 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : goto [?= $z7 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r35 = new java.lang.RuntimeException >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : specialinvoke $r35.<java.lang.RuntimeException: void <init>(java.lang.String)>("Can not start Zeppelin server")
org.apache.zeppelin.rest.AbstractTestRestApi.start : specialinvoke $r35.<java.lang.RuntimeException: void <init>(java.lang.String)>("Can not start Zeppelin server") >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : throw $r35
org.apache.zeppelin.rest.AbstractTestRestApi.start : staticinvoke <java.lang.Thread: void sleep(long)>(2000L) >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : z6 = staticinvoke <org.apache.zeppelin.rest.AbstractTestRestApi: boolean checkIfServerIsRunning()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : z6 = staticinvoke <org.apache.zeppelin.rest.AbstractTestRestApi: boolean checkIfServerIsRunning()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : if z6 != 1
org.apache.zeppelin.rest.AbstractTestRestApi.start : if z6 != 1 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : goto [?= (branch)]
org.apache.zeppelin.rest.AbstractTestRestApi.start : if z6 != 1 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : if z6 != 0
org.apache.zeppelin.rest.AbstractTestRestApi.start : r4 = r3[i1] >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $z5 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("org.apache.zeppelin.rinterpreter")
org.apache.zeppelin.rest.AbstractTestRestApi.start : $z5 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("org.apache.zeppelin.rinterpreter") >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : if $z5 == 0
org.apache.zeppelin.rest.AbstractTestRestApi.start : if $z5 == 0 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : goto [?= i1 = i1 + 1]
org.apache.zeppelin.rest.AbstractTestRestApi.start : if $z5 == 0 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : if r2 != null
org.apache.zeppelin.rest.AbstractTestRestApi.start : if r2 != null >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : r2 = r4
org.apache.zeppelin.rest.AbstractTestRestApi.start : if r2 != null >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r24 = new java.lang.StringBuilder
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r24 = new java.lang.StringBuilder >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : specialinvoke $r24.<java.lang.StringBuilder: void <init>()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : specialinvoke $r24.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",")
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",") >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : r2 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : r2 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : i1 = i1 + 1
org.apache.zeppelin.rest.AbstractTestRestApi.start : i1 = i1 + 1 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : goto [?= (branch)]
org.apache.zeppelin.rest.AbstractTestRestApi.start : goto [?= (branch)] >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : if i1 >= i0
org.apache.zeppelin.rest.AbstractTestRestApi.start : r2 = r4 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : goto [?= i1 = i1 + 1]
org.apache.zeppelin.rest.AbstractTestRestApi.start : goto [?= i1 = i1 + 1] >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : i1 = i1 + 1
org.apache.zeppelin.rest.AbstractTestRestApi.start : goto [?= i1 = i1 + 1] >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : i1 = i1 + 1
org.apache.zeppelin.rest.AbstractTestRestApi.start : <org.apache.zeppelin.rest.AbstractTestRestApi: boolean isRunningWithAuth> = 1 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r15 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_ANONYMOUS_ALLOWED>
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r15 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_ANONYMOUS_ALLOWED> >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r16 = virtualinvoke $r15.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r16 = virtualinvoke $r15.<org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: java.lang.String getVarName()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>($r16, "false")
org.apache.zeppelin.rest.AbstractTestRestApi.start : staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>($r16, "false") >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r18 = new java.io.File
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r18 = new java.io.File >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>("../conf/shiro.ini")
org.apache.zeppelin.rest.AbstractTestRestApi.start : specialinvoke $r18.<java.io.File: void <init>(java.lang.String)>("../conf/shiro.ini") >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : <org.apache.zeppelin.rest.AbstractTestRestApi: java.io.File shiroIni> = $r18
org.apache.zeppelin.rest.AbstractTestRestApi.start : <org.apache.zeppelin.rest.AbstractTestRestApi: java.io.File shiroIni> = $r18 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r19 = <org.apache.zeppelin.rest.AbstractTestRestApi: java.io.File shiroIni>
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r19 = <org.apache.zeppelin.rest.AbstractTestRestApi: java.io.File shiroIni> >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $z3 = virtualinvoke $r19.<java.io.File: boolean exists()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : $z3 = virtualinvoke $r19.<java.io.File: boolean exists()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : if $z3 != 0
org.apache.zeppelin.rest.AbstractTestRestApi.start : if $z3 != 0 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r20 = <org.apache.zeppelin.rest.AbstractTestRestApi: java.io.File shiroIni>
org.apache.zeppelin.rest.AbstractTestRestApi.start : if $z3 != 0 >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r21 = <org.apache.zeppelin.rest.AbstractTestRestApi: java.io.File shiroIni>
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r21 = <org.apache.zeppelin.rest.AbstractTestRestApi: java.io.File shiroIni> >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r22 = <org.apache.zeppelin.rest.AbstractTestRestApi: java.lang.String zeppelinShiro>
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r22 = <org.apache.zeppelin.rest.AbstractTestRestApi: java.lang.String zeppelinShiro> >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>($r21, $r22)
org.apache.zeppelin.rest.AbstractTestRestApi.start : staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>($r21, $r22) >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r23 = <org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars: org.apache.zeppelin.conf.ZeppelinConfiguration$ConfVars ZEPPELIN_INTERPRETERS>
org.apache.zeppelin.rest.AbstractTestRestApi.start : $r20 = <org.apache.zeppelin.rest.AbstractTestRestApi: java.io.File shiroIni> >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke $r20.<java.io.File: boolean createNewFile()>()
org.apache.zeppelin.rest.AbstractTestRestApi.start : virtualinvoke $r20.<java.io.File: boolean createNewFile()>() >>>>>>>> org.apache.zeppelin.rest.AbstractTestRestApi.start : $r21 = <org.apache.zeppelin.rest.AbstractTestRestApi: java.io.File shiroIni>
