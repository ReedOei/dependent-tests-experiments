org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z0 = staticinvoke <org.apache.commons.collections.CollectionUtils: boolean isEmpty(java.util.Collection)>(r2) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z0 == 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r30 = staticinvoke <java.util.Collections: java.util.List emptyList()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r3 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.Cluster getCluster()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r3 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.Cluster getCluster()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r31 = new java.util.ArrayList
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r31 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r31.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r31.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r4 = $r31
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r4 = $r31 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r5 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.actionmanager.HostRoleCommandFactory getHostRoleCommandFactory()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r5 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.actionmanager.HostRoleCommandFactory getHostRoleCommandFactory()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r6 = specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder: org.apache.ambari.server.metadata.RoleCommandOrder getRoleCommandOrderForUpgrade(org.apache.ambari.server.state.Cluster)>(r3)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r6 = specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder: org.apache.ambari.server.metadata.RoleCommandOrder getRoleCommandOrderForUpgrade(org.apache.ambari.server.state.Cluster)>(r3) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r7 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r7 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z1 == 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r32 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : return r4
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r32 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r8 = (java.lang.String) $r32
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r8 = (java.lang.String) $r32 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r33 = new java.util.ArrayList
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r33 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r33.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r33.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r9 = $r33
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r9 = $r33 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r34 = new java.util.HashMap
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r34 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r34.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r34.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r10 = $r34
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r10 = $r34 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r35 = new java.util.HashMap
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r35 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r35.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r35.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r11 = $r35
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r11 = $r35 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r11)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r11) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r37 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: java.util.List getServiceComponentHosts(java.lang.String)>(r8)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r37 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: java.util.List getServiceComponentHosts(java.lang.String)>(r8) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r12 = interfaceinvoke $r37.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r12 = interfaceinvoke $r37.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z2 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z2 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z2 == 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r38 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z7 = interfaceinvoke r9.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z7 = interfaceinvoke r9.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z7 == 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z7 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z8 = interfaceinvoke r11.<java.util.Map: boolean isEmpty()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z7 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r60 = new org.apache.ambari.server.state.stack.upgrade.StageWrapper
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r60 = new org.apache.ambari.server.state.stack.upgrade.StageWrapper >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r61 = <org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type: org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type STOP>
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r61 = <org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type: org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type STOP> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r62 = newarray (java.lang.Object)[1]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r62 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r62[0] = r8
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r62[0] = r8 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r63 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Stop on %s", $r62)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r63 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Stop on %s", $r62) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $i1 = interfaceinvoke r9.<java.util.List: int size()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $i1 = interfaceinvoke r9.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r64 = newarray (org.apache.ambari.server.state.stack.upgrade.TaskWrapper)[$i1]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r64 = newarray (org.apache.ambari.server.state.stack.upgrade.TaskWrapper)[$i1] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r65 = interfaceinvoke r9.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r64)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r65 = interfaceinvoke r9.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r64) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r66 = (org.apache.ambari.server.state.stack.upgrade.TaskWrapper[]) $r65
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r66 = (org.apache.ambari.server.state.stack.upgrade.TaskWrapper[]) $r65 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r60.<org.apache.ambari.server.state.stack.upgrade.StageWrapper: void <init>(org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type,java.lang.String,org.apache.ambari.server.state.stack.upgrade.TaskWrapper[])>($r61, $r63, $r66)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r60.<org.apache.ambari.server.state.stack.upgrade.StageWrapper: void <init>(org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type,java.lang.String,org.apache.ambari.server.state.stack.upgrade.TaskWrapper[])>($r61, $r63, $r66) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r67 = $r60
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r67 = $r60 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r68 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.stageplanner.RoleGraphFactory getRoleGraphFactory()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r68 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.stageplanner.RoleGraphFactory getRoleGraphFactory()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r69 = interfaceinvoke r68.<org.apache.ambari.server.stageplanner.RoleGraphFactory: org.apache.ambari.server.stageplanner.RoleGraph createNew(org.apache.ambari.server.metadata.RoleCommandOrder)>(r6)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r69 = interfaceinvoke r68.<org.apache.ambari.server.stageplanner.RoleGraphFactory: org.apache.ambari.server.stageplanner.RoleGraph createNew(org.apache.ambari.server.metadata.RoleCommandOrder)>(r6) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r70 = virtualinvoke r69.<org.apache.ambari.server.stageplanner.RoleGraph: java.util.List getOrderedHostRoleCommands(java.util.Map)>(r10)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r70 = virtualinvoke r69.<org.apache.ambari.server.stageplanner.RoleGraph: java.util.List getOrderedHostRoleCommands(java.util.Map)>(r10) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r71 = new java.util.ArrayList
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r71 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r71.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r71.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r72 = $r71
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r72 = $r71 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : i0 = 1
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : i0 = 1 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r18 = interfaceinvoke r70.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r18 = interfaceinvoke r70.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z9 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z9 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z9 == 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z9 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r73 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z9 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r99 = new org.apache.ambari.server.state.stack.upgrade.ManualTask
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r99 = new org.apache.ambari.server.state.stack.upgrade.ManualTask >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r99.<org.apache.ambari.server.state.stack.upgrade.ManualTask: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r99.<org.apache.ambari.server.state.stack.upgrade.ManualTask: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r100 = $r99
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r100 = $r99 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r101 = newarray (java.lang.Object)[1]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r101 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r101[0] = r8
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r101[0] = r8 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r102 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Please acknowledge that host %s has been prepared.", $r101)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r102 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Please acknowledge that host %s has been prepared.", $r101) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r103 = r100.<org.apache.ambari.server.state.stack.upgrade.ManualTask: java.util.List messages>
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r103 = r100.<org.apache.ambari.server.state.stack.upgrade.ManualTask: java.util.List messages> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r103.<java.util.List: boolean add(java.lang.Object)>(r102)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r103.<java.util.List: boolean add(java.lang.Object)>(r102) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r104 = new com.google.gson.JsonObject
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r104 = new com.google.gson.JsonObject >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r104.<com.google.gson.JsonObject: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r104.<com.google.gson.JsonObject: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r105 = $r104
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r105 = $r104 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r106 = <org.apache.ambari.server.state.stack.upgrade.HostOrderItem$HostOrderActionType: org.apache.ambari.server.state.stack.upgrade.HostOrderItem$HostOrderActionType HOST_UPGRADE>
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r106 = <org.apache.ambari.server.state.stack.upgrade.HostOrderItem$HostOrderActionType: org.apache.ambari.server.state.stack.upgrade.HostOrderItem$HostOrderActionType HOST_UPGRADE> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r107 = virtualinvoke $r106.<org.apache.ambari.server.state.stack.upgrade.HostOrderItem$HostOrderActionType: java.lang.String toString()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r107 = virtualinvoke $r106.<org.apache.ambari.server.state.stack.upgrade.HostOrderItem$HostOrderActionType: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : virtualinvoke r105.<com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.String)>("type", $r107)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : virtualinvoke r105.<com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.String)>("type", $r107) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : virtualinvoke r105.<com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.String)>("host", r8)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : virtualinvoke r105.<com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.String)>("host", r8) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r108 = virtualinvoke r105.<com.google.gson.JsonObject: java.lang.String toString()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r108 = virtualinvoke r105.<com.google.gson.JsonObject: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r100.<org.apache.ambari.server.state.stack.upgrade.ManualTask: java.lang.String structuredOut> = $r108
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r100.<org.apache.ambari.server.state.stack.upgrade.ManualTask: java.lang.String structuredOut> = $r108 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r109 = new org.apache.ambari.server.state.stack.upgrade.StageWrapper
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r109 = new org.apache.ambari.server.state.stack.upgrade.StageWrapper >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r110 = <org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type: org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type SERVER_SIDE_ACTION>
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r110 = <org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type: org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type SERVER_SIDE_ACTION> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r111 = newarray (org.apache.ambari.server.state.stack.upgrade.TaskWrapper)[1]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r111 = newarray (org.apache.ambari.server.state.stack.upgrade.TaskWrapper)[1] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r112 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r112 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r29 = staticinvoke <java.util.Collections: java.util.Set emptySet()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r29 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r113 = newarray (org.apache.ambari.server.state.stack.upgrade.Task)[1]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r113 = newarray (org.apache.ambari.server.state.stack.upgrade.Task)[1] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r113[0] = r100
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r113[0] = r100 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r112.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: void <init>(java.lang.String,java.lang.String,java.util.Set,org.apache.ambari.server.state.stack.upgrade.Task[])>(null, null, $r29, $r113)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r112.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: void <init>(java.lang.String,java.lang.String,java.util.Set,org.apache.ambari.server.state.stack.upgrade.Task[])>(null, null, $r29, $r113) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r111[0] = $r112
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r111[0] = $r112 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r109.<org.apache.ambari.server.state.stack.upgrade.StageWrapper: void <init>(org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type,java.lang.String,org.apache.ambari.server.state.stack.upgrade.TaskWrapper[])>($r110, "Manual Confirmation", $r111)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r109.<org.apache.ambari.server.state.stack.upgrade.StageWrapper: void <init>(org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type,java.lang.String,org.apache.ambari.server.state.stack.upgrade.TaskWrapper[])>($r110, "Manual Confirmation", $r111) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r114 = $r109
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r114 = $r109 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r67)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r67) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r114)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r114) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke r4.<java.util.List: boolean addAll(java.util.Collection)>(r72)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke r4.<java.util.List: boolean addAll(java.util.Collection)>(r72) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r73 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r19 = (java.util.Map) $r73
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r19 = (java.util.Map) $r73 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r74 = interfaceinvoke r19.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r74 = interfaceinvoke r19.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r20 = (java.util.List) $r74
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r20 = (java.util.List) $r74 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r75 = newarray (java.lang.Object)[2]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r75 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r75[0] = r8
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r75[0] = r8 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $i2 = i0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $i2 = i0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : i0 = i0 + 1
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : i0 = i0 + 1 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r76 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r76 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r75[1] = $r76
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r75[1] = $r76 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Starting components on %s (phase %d)", $r75)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Starting components on %s (phase %d)", $r75) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r77 = new java.util.ArrayList
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r77 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r77.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r77.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r22 = $r77
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r22 = $r77 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r23 = interfaceinvoke r20.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r23 = interfaceinvoke r20.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z10 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z10 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z10 == 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z10 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r78 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z10 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z12 = interfaceinvoke r22.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z12 = interfaceinvoke r22.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z12 != 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z12 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r93 = new org.apache.ambari.server.state.stack.upgrade.StageWrapper
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z12 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z9 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z9 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z9 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r93 = new org.apache.ambari.server.state.stack.upgrade.StageWrapper >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r94 = <org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type: org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type RESTART>
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r94 = <org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type: org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type RESTART> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $i3 = interfaceinvoke r22.<java.util.List: int size()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $i3 = interfaceinvoke r22.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r95 = newarray (org.apache.ambari.server.state.stack.upgrade.TaskWrapper)[$i3]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r95 = newarray (org.apache.ambari.server.state.stack.upgrade.TaskWrapper)[$i3] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r96 = interfaceinvoke r22.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r95)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r96 = interfaceinvoke r22.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r95) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r97 = (org.apache.ambari.server.state.stack.upgrade.TaskWrapper[]) $r96
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r97 = (org.apache.ambari.server.state.stack.upgrade.TaskWrapper[]) $r96 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r93.<org.apache.ambari.server.state.stack.upgrade.StageWrapper: void <init>(org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type,java.lang.String,org.apache.ambari.server.state.stack.upgrade.TaskWrapper[])>($r94, r21, $r97)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r93.<org.apache.ambari.server.state.stack.upgrade.StageWrapper: void <init>(org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type,java.lang.String,org.apache.ambari.server.state.stack.upgrade.TaskWrapper[])>($r94, r21, $r97) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r98 = $r93
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r98 = $r93 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke r72.<java.util.List: boolean add(java.lang.Object)>(r98)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke r72.<java.util.List: boolean add(java.lang.Object)>(r98) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z9 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r78 = interfaceinvoke r23.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r24 = (org.apache.ambari.server.actionmanager.HostRoleCommand) $r78
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r24 = (org.apache.ambari.server.actionmanager.HostRoleCommand) $r78 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r25 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.StackId getEffectiveStackId()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r25 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.StackId getEffectiveStackId()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r79 = virtualinvoke r24.<org.apache.ambari.server.actionmanager.HostRoleCommand: org.apache.ambari.server.Role getRole()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r79 = virtualinvoke r24.<org.apache.ambari.server.actionmanager.HostRoleCommand: org.apache.ambari.server.Role getRole()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r26 = virtualinvoke $r79.<org.apache.ambari.server.Role: java.lang.String name()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r26 = virtualinvoke $r79.<org.apache.ambari.server.Role: java.lang.String name()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r27 = null
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r27 = null >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r28 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.api.services.AmbariMetaInfo getAmbariMetaInfo()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r27 = null >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r82 := @caughtexception
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r83 = $r82 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r84 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping: org.slf4j.Logger access$100()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r84 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping: org.slf4j.Logger access$100()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r85 = newarray (java.lang.Object)[3]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r85 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r85[0] = r26
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r85[0] = r26 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r86 = virtualinvoke r25.<org.apache.ambari.server.state.StackId: java.lang.String getStackName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r86 = virtualinvoke r25.<org.apache.ambari.server.state.StackId: java.lang.String getStackName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r85[1] = $r86
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r85[1] = $r86 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r87 = virtualinvoke r25.<org.apache.ambari.server.state.StackId: java.lang.String getStackVersion()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r87 = virtualinvoke r25.<org.apache.ambari.server.state.StackId: java.lang.String getStackVersion()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r85[2] = $r87
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r85[2] = $r87 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r84.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object[])>("Unable to lookup service by component {} for stack {}-{}", $r85)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r84.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object[])>("Unable to lookup service by component {} for stack {}-{}", $r85) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r88 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r88 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r89 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r8)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r89 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r90 = newarray (org.apache.ambari.server.state.stack.upgrade.Task)[1]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r90 = newarray (org.apache.ambari.server.state.stack.upgrade.Task)[1] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r91 = new org.apache.ambari.server.state.stack.upgrade.RestartTask
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r91 = new org.apache.ambari.server.state.stack.upgrade.RestartTask >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r91.<org.apache.ambari.server.state.stack.upgrade.RestartTask: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r91.<org.apache.ambari.server.state.stack.upgrade.RestartTask: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r90[0] = $r91
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r90[0] = $r91 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r88.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: void <init>(java.lang.String,java.lang.String,java.util.Set,org.apache.ambari.server.state.stack.upgrade.Task[])>(r27, r26, $r89, $r90)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r88.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: void <init>(java.lang.String,java.lang.String,java.util.Set,org.apache.ambari.server.state.stack.upgrade.Task[])>(r27, r26, $r89, $r90) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r92 = $r88
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r92 = $r88 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke r22.<java.util.List: boolean add(java.lang.Object)>(r92)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke r22.<java.util.List: boolean add(java.lang.Object)>(r92) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z10 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z10 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z10 = interfaceinvoke r23.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r28 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.api.services.AmbariMetaInfo getAmbariMetaInfo()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r80 = virtualinvoke r25.<org.apache.ambari.server.state.StackId: java.lang.String getStackName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r28 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.api.services.AmbariMetaInfo getAmbariMetaInfo()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r82 := @caughtexception
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r80 = virtualinvoke r25.<org.apache.ambari.server.state.StackId: java.lang.String getStackName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r81 = virtualinvoke r25.<org.apache.ambari.server.state.StackId: java.lang.String getStackVersion()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r80 = virtualinvoke r25.<org.apache.ambari.server.state.StackId: java.lang.String getStackName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r82 := @caughtexception
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r81 = virtualinvoke r25.<org.apache.ambari.server.state.StackId: java.lang.String getStackVersion()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r27 = virtualinvoke r28.<org.apache.ambari.server.api.services.AmbariMetaInfo: java.lang.String getComponentToService(java.lang.String,java.lang.String,java.lang.String)>($r80, $r81, r26)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r81 = virtualinvoke r25.<org.apache.ambari.server.state.StackId: java.lang.String getStackVersion()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r82 := @caughtexception
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r27 = virtualinvoke r28.<org.apache.ambari.server.api.services.AmbariMetaInfo: java.lang.String getComponentToService(java.lang.String,java.lang.String,java.lang.String)>($r80, $r81, r26) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $r88 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r27 = virtualinvoke r28.<org.apache.ambari.server.api.services.AmbariMetaInfo: java.lang.String getComponentToService(java.lang.String,java.lang.String,java.lang.String)>($r80, $r81, r26) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r82 := @caughtexception
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $r88 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r88 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z8 = interfaceinvoke r11.<java.util.Map: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z8 == 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z8 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r57 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping: org.slf4j.Logger access$100()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z8 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r60 = new org.apache.ambari.server.state.stack.upgrade.StageWrapper
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r57 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping: org.slf4j.Logger access$100()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r58 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.stack.upgrade.Direction getDirection()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r58 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.stack.upgrade.Direction getDirection()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r59 = virtualinvoke $r58.<org.apache.ambari.server.state.stack.upgrade.Direction: java.lang.String getText(boolean)>(0)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r59 = virtualinvoke $r58.<org.apache.ambari.server.state.stack.upgrade.Direction: java.lang.String getText(boolean)>(0) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r57.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("There were no {} commands generated for {}", $r59, r8)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r57.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("There were no {} commands generated for {}", $r59, r8) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r38 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r13 = (org.apache.ambari.server.state.ServiceComponentHost) $r38
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r13 = (org.apache.ambari.server.state.ServiceComponentHost) $r38 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z3 = specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder: boolean isVersionAdvertised(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.state.ServiceComponentHost)>(r1, r13)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z3 = specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder: boolean isVersionAdvertised(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.state.ServiceComponentHost)>(r1, r13) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z3 != 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z3 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z2 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z3 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r39 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.stack.MasterHostResolver getResolver()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r39 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.stack.MasterHostResolver getResolver()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r40 = interfaceinvoke r13.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r40 = interfaceinvoke r13.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r41 = interfaceinvoke r13.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r41 = interfaceinvoke r13.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r14 = virtualinvoke $r39.<org.apache.ambari.server.stack.MasterHostResolver: org.apache.ambari.server.stack.HostsType getMasterAndHosts(java.lang.String,java.lang.String)>($r40, $r41)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r14 = virtualinvoke $r39.<org.apache.ambari.server.stack.MasterHostResolver: org.apache.ambari.server.stack.HostsType getMasterAndHosts(java.lang.String,java.lang.String)>($r40, $r41) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if null == r14
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if null == r14 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r42 = r14.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts>
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if null == r14 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z5 = interfaceinvoke r13.<org.apache.ambari.server.state.ServiceComponentHost: boolean isClientComponent()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z5 = interfaceinvoke r13.<org.apache.ambari.server.state.ServiceComponentHost: boolean isClientComponent()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z5 != 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z5 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r48 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z5 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r53 = interfaceinvoke r13.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r53 = interfaceinvoke r13.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r16 = staticinvoke <org.apache.ambari.server.Role: org.apache.ambari.server.Role valueOf(java.lang.String)>($r53)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r16 = staticinvoke <org.apache.ambari.server.Role: org.apache.ambari.server.Role valueOf(java.lang.String)>($r53) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r54 = <org.apache.ambari.server.RoleCommand: org.apache.ambari.server.RoleCommand START>
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r54 = <org.apache.ambari.server.RoleCommand: org.apache.ambari.server.RoleCommand START> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r17 = interfaceinvoke r5.<org.apache.ambari.server.actionmanager.HostRoleCommandFactory: org.apache.ambari.server.actionmanager.HostRoleCommand create(java.lang.String,org.apache.ambari.server.Role,org.apache.ambari.server.state.ServiceComponentHostEvent,org.apache.ambari.server.RoleCommand)>(r8, r16, null, $r54)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r17 = interfaceinvoke r5.<org.apache.ambari.server.actionmanager.HostRoleCommandFactory: org.apache.ambari.server.actionmanager.HostRoleCommand create(java.lang.String,org.apache.ambari.server.Role,org.apache.ambari.server.state.ServiceComponentHostEvent,org.apache.ambari.server.RoleCommand)>(r8, r16, null, $r54) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r55 = virtualinvoke r16.<org.apache.ambari.server.Role: java.lang.String name()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r55 = virtualinvoke r16.<org.apache.ambari.server.Role: java.lang.String name()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r55, r17)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r55, r17) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z2 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z2 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z2 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r48 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r49 = interfaceinvoke r13.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r49 = interfaceinvoke r13.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r50 = interfaceinvoke r13.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r50 = interfaceinvoke r13.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r51 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r8)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r51 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r52 = newarray (org.apache.ambari.server.state.stack.upgrade.Task)[1]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r52 = newarray (org.apache.ambari.server.state.stack.upgrade.Task)[1] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r15 = new org.apache.ambari.server.state.stack.upgrade.StopTask
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r15 = new org.apache.ambari.server.state.stack.upgrade.StopTask >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r15.<org.apache.ambari.server.state.stack.upgrade.StopTask: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r15.<org.apache.ambari.server.state.stack.upgrade.StopTask: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r52[0] = $r15
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r52[0] = $r15 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r48.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: void <init>(java.lang.String,java.lang.String,java.util.Set,org.apache.ambari.server.state.stack.upgrade.Task[])>($r49, $r50, $r51, $r52)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r48.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: void <init>(java.lang.String,java.lang.String,java.util.Set,org.apache.ambari.server.state.stack.upgrade.Task[])>($r49, $r50, $r51, $r52) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r48)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r48) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r53 = interfaceinvoke r13.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r42 = r14.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z4 = virtualinvoke $r42.<java.util.LinkedHashSet: boolean contains(java.lang.Object)>(r8)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z4 = virtualinvoke $r42.<java.util.LinkedHashSet: boolean contains(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z4 != 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z4 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r43 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping: org.slf4j.Logger access$100()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z4 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z5 = interfaceinvoke r13.<org.apache.ambari.server.state.ServiceComponentHost: boolean isClientComponent()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r43 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping: org.slf4j.Logger access$100()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r44 = newarray (java.lang.Object)[4]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r44 = newarray (java.lang.Object)[4] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r44[0] = r8
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r44[0] = r8 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r45 = interfaceinvoke r13.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r45 = interfaceinvoke r13.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r44[1] = $r45
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r44[1] = $r45 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r46 = interfaceinvoke r13.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r46 = interfaceinvoke r13.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r44[2] = $r46
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r44[2] = $r46 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r47 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: java.lang.String getVersion()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r47 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: java.lang.String getVersion()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r44[3] = $r47
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r44[3] = $r47 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r43.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Host {} could not be orchestrated. Either there are no components for {}/{} or the target version {} is already current.", $r44)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r43.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Host {} could not be orchestrated. Either there are no components for {}/{} or the target version {} is already current.", $r44) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z2 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z2 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z2 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z2 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z2 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r30 = staticinvoke <java.util.Collections: java.util.List emptyList()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : return $r30
