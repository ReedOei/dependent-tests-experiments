org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : $r4 = r0.<org.apache.ambari.server.state.repository.VersionDefinitionXml: java.util.Map m_packageVersions> >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : if null != $r4
org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : if null != $r4 >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : $r5 = new java.util.HashMap
org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : if null != $r4 >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : $r13 = r0.<org.apache.ambari.server.state.repository.VersionDefinitionXml: java.util.Map m_packageVersions>
org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : $r13 = r0.<org.apache.ambari.server.state.repository.VersionDefinitionXml: java.util.Map m_packageVersions> >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : $r15 = (java.lang.String) $r14
org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : $r15 = (java.lang.String) $r14 >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : return $r15
org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : $r5 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : specialinvoke $r5.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : specialinvoke $r5.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : r0.<org.apache.ambari.server.state.repository.VersionDefinitionXml: java.util.Map m_packageVersions> = $r5
org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : r0.<org.apache.ambari.server.state.repository.VersionDefinitionXml: java.util.Map m_packageVersions> = $r5 >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : $r6 = r0.<org.apache.ambari.server.state.repository.VersionDefinitionXml: org.apache.ambari.server.state.stack.RepositoryXml repositoryInfo>
org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : $r6 = r0.<org.apache.ambari.server.state.repository.VersionDefinitionXml: org.apache.ambari.server.state.stack.RepositoryXml repositoryInfo> >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : $r7 = virtualinvoke $r6.<org.apache.ambari.server.state.stack.RepositoryXml: java.util.List getOses()>()
org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : $r7 = virtualinvoke $r6.<org.apache.ambari.server.state.stack.RepositoryXml: java.util.List getOses()>() >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : r2 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : r2 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : if $z0 == 0
org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : $r13 = r0.<org.apache.ambari.server.state.repository.VersionDefinitionXml: java.util.Map m_packageVersions>
org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : r3 = (org.apache.ambari.server.state.stack.RepositoryXml$Os) $r8
org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : r3 = (org.apache.ambari.server.state.stack.RepositoryXml$Os) $r8 >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : $r9 = r0.<org.apache.ambari.server.state.repository.VersionDefinitionXml: java.util.Map m_packageVersions>
org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : $r9 = r0.<org.apache.ambari.server.state.repository.VersionDefinitionXml: java.util.Map m_packageVersions> >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : $r10 = virtualinvoke r3.<org.apache.ambari.server.state.stack.RepositoryXml$Os: java.lang.String getFamily()>()
org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : $r10 = virtualinvoke r3.<org.apache.ambari.server.state.stack.RepositoryXml$Os: java.lang.String getFamily()>() >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : $r11 = virtualinvoke r3.<org.apache.ambari.server.state.stack.RepositoryXml$Os: java.lang.String getPackageVersion()>()
org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : $r11 = virtualinvoke r3.<org.apache.ambari.server.state.stack.RepositoryXml$Os: java.lang.String getPackageVersion()>() >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11)
org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, $r11) >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.repository.VersionDefinitionXml.getPackageVersion : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
