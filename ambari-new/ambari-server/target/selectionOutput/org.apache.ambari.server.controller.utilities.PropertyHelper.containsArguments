org.apache.ambari.server.controller.utilities.PropertyHelper.containsArguments : $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("$") >>>>>>>> org.apache.ambari.server.controller.utilities.PropertyHelper.containsArguments : if $z0 != 0
org.apache.ambari.server.controller.utilities.PropertyHelper.containsArguments : if $z0 != 0 >>>>>>>> org.apache.ambari.server.controller.utilities.PropertyHelper.containsArguments : return 0
org.apache.ambari.server.controller.utilities.PropertyHelper.containsArguments : if $z0 != 0 >>>>>>>> org.apache.ambari.server.controller.utilities.PropertyHelper.containsArguments : $r2 = <org.apache.ambari.server.controller.utilities.PropertyHelper: java.util.regex.Pattern CHECK_FOR_METRIC_ARGUMENTS_REGEX>
org.apache.ambari.server.controller.utilities.PropertyHelper.containsArguments : $r2 = <org.apache.ambari.server.controller.utilities.PropertyHelper: java.util.regex.Pattern CHECK_FOR_METRIC_ARGUMENTS_REGEX> >>>>>>>> org.apache.ambari.server.controller.utilities.PropertyHelper.containsArguments : r1 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0)
org.apache.ambari.server.controller.utilities.PropertyHelper.containsArguments : r1 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0) >>>>>>>> org.apache.ambari.server.controller.utilities.PropertyHelper.containsArguments : $z1 = virtualinvoke r1.<java.util.regex.Matcher: boolean find()>()
org.apache.ambari.server.controller.utilities.PropertyHelper.containsArguments : $z1 = virtualinvoke r1.<java.util.regex.Matcher: boolean find()>() >>>>>>>> org.apache.ambari.server.controller.utilities.PropertyHelper.containsArguments : return $z1
