org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource.publish : r3 = $r6 >>>>>>>> org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource.publish : $r7 = <org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource: org.slf4j.Logger LOG>
org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource.publish : $r7 = <org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource.publish : interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String,java.lang.Throwable)>("Exception when publishing Database metrics to sink", r3)
org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource.publish : interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String,java.lang.Throwable)>("Exception when publishing Database metrics to sink", r3) >>>>>>>> org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource.publish : return
org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource.publish : $r4 = r0.<org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource: java.util.concurrent.ExecutorService executor> >>>>>>>> org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource.publish : $r2 = new org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource$1
org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource.publish : $r4 = r0.<org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource: java.util.concurrent.ExecutorService executor> >>>>>>>> org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource.publish : $r6 := @caughtexception
org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource.publish : $r2 = new org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource$1 >>>>>>>> org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource.publish : specialinvoke $r2.<org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource$1: void <init>(org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource,java.util.Map)>(r0, r1)
org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource.publish : $r2 = new org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource$1 >>>>>>>> org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource.publish : $r6 := @caughtexception
org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource.publish : specialinvoke $r2.<org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource$1: void <init>(org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource,java.util.Map)>(r0, r1) >>>>>>>> org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource.publish : interfaceinvoke $r4.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r2)
org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource.publish : specialinvoke $r2.<org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource$1: void <init>(org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource,java.util.Map)>(r0, r1) >>>>>>>> org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource.publish : $r6 := @caughtexception
org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource.publish : interfaceinvoke $r4.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r2) >>>>>>>> org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource.publish : goto [?= return]
org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource.publish : interfaceinvoke $r4.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>($r2) >>>>>>>> org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource.publish : $r6 := @caughtexception
org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource.publish : goto [?= return] >>>>>>>> org.apache.ambari.server.metrics.system.impl.DatabaseMetricsSource.publish : return
