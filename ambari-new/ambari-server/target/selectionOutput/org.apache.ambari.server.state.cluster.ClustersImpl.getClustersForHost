org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $r3 = r0.<org.apache.ambari.server.state.cluster.ClustersImpl: java.util.concurrent.ConcurrentHashMap hostClusterMap> >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1)
org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $r4 = virtualinvoke $r3.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : r2 = (java.util.Set) $r4
org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : r2 = (java.util.Set) $r4 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : if r2 != null
org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : if r2 != null >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $r5 = new org.apache.ambari.server.HostNotFoundException
org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : if r2 != null >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $r6 = <org.apache.ambari.server.state.cluster.ClustersImpl: org.slf4j.Logger LOG>
org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $r6 = <org.apache.ambari.server.state.cluster.ClustersImpl: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $z0 = interfaceinvoke $r6.<org.slf4j.Logger: boolean isDebugEnabled()>()
org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $z0 = interfaceinvoke $r6.<org.slf4j.Logger: boolean isDebugEnabled()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : if $z0 == 0
org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $r7 = <org.apache.ambari.server.state.cluster.ClustersImpl: org.slf4j.Logger LOG>
org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $r14 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(r2)
org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $r14 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(r2) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : return $r14
org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $r7 = <org.apache.ambari.server.state.cluster.ClustersImpl: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $r8 = new java.lang.StringBuilder
org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $r8 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Looking up clusters for hostname, hostname=")
org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Looking up clusters for hostname, hostname=") >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mappedClusters=")
org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mappedClusters=") >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $i0 = interfaceinvoke r2.<java.util.Set: int size()>()
org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $i0 = interfaceinvoke r2.<java.util.Set: int size()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String)>($r13)
org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : interfaceinvoke $r7.<org.slf4j.Logger: void debug(java.lang.String)>($r13) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $r14 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>(r2)
org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : $r5 = new org.apache.ambari.server.HostNotFoundException >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : specialinvoke $r5.<org.apache.ambari.server.HostNotFoundException: void <init>(java.lang.String)>(r1)
org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : specialinvoke $r5.<org.apache.ambari.server.HostNotFoundException: void <init>(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.getClustersForHost : throw $r5
