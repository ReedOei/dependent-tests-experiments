org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r13 = r0.<org.apache.ambari.server.serveraction.ServerActionExecutor: org.apache.ambari.server.actionmanager.ActionDBAccessor db> >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r1 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role AMBARI_SERVER_ACTION>
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r1 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role AMBARI_SERVER_ACTION> >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r14 = virtualinvoke $r1.<org.apache.ambari.server.Role: java.lang.String name()>()
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r14 = virtualinvoke $r1.<org.apache.ambari.server.Role: java.lang.String name()>() >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r2 = <org.apache.ambari.server.actionmanager.HostRoleStatus: org.apache.ambari.server.actionmanager.HostRoleStatus QUEUED>
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r2 = <org.apache.ambari.server.actionmanager.HostRoleStatus: org.apache.ambari.server.actionmanager.HostRoleStatus QUEUED> >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : r3 = interfaceinvoke $r13.<org.apache.ambari.server.actionmanager.ActionDBAccessor: java.util.List getTasksByRoleAndStatus(java.lang.String,org.apache.ambari.server.actionmanager.HostRoleStatus)>($r14, $r2)
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : r3 = interfaceinvoke $r13.<org.apache.ambari.server.actionmanager.ActionDBAccessor: java.util.List getTasksByRoleAndStatus(java.lang.String,org.apache.ambari.server.actionmanager.HostRoleStatus)>($r14, $r2) >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : if r3 == null
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : if r3 == null >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : if r3 == null >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : specialinvoke r0.<org.apache.ambari.server.serveraction.ServerActionExecutor: void cleanRequestShareDataContexts()>()
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : specialinvoke r0.<org.apache.ambari.server.serveraction.ServerActionExecutor: void cleanRequestShareDataContexts()>() >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : return
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : if $z0 != 0
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : if $z0 != 0 >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : if $z0 != 0 >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : specialinvoke r0.<org.apache.ambari.server.serveraction.ServerActionExecutor: void cleanRequestShareDataContexts()>()
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : if $z1 == 0
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : if $z1 == 0 >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r15 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : if $z1 == 0 >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : specialinvoke r0.<org.apache.ambari.server.serveraction.ServerActionExecutor: void cleanRequestShareDataContexts()>()
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r15 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : r5 = (org.apache.ambari.server.actionmanager.HostRoleCommand) $r15
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : r5 = (org.apache.ambari.server.actionmanager.HostRoleCommand) $r15 >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $l0 = virtualinvoke r5.<org.apache.ambari.server.actionmanager.HostRoleCommand: long getTaskId()>()
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $l0 = virtualinvoke r5.<org.apache.ambari.server.actionmanager.HostRoleCommand: long getTaskId()>() >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0)
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r16 = <org.apache.ambari.server.serveraction.ServerActionExecutor: org.slf4j.Logger LOG>
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r16 = <org.apache.ambari.server.serveraction.ServerActionExecutor: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Processing task #{}", r6)
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Processing task #{}", r6) >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r17 = virtualinvoke r5.<org.apache.ambari.server.actionmanager.HostRoleCommand: org.apache.ambari.server.actionmanager.HostRoleStatus getStatus()>()
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r17 = virtualinvoke r5.<org.apache.ambari.server.actionmanager.HostRoleCommand: org.apache.ambari.server.actionmanager.HostRoleStatus getStatus()>() >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r18 = <org.apache.ambari.server.actionmanager.HostRoleStatus: org.apache.ambari.server.actionmanager.HostRoleStatus QUEUED>
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r18 = <org.apache.ambari.server.actionmanager.HostRoleStatus: org.apache.ambari.server.actionmanager.HostRoleStatus QUEUED> >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : if $r17 != $r18
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : if $r17 != $r18 >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : r7 = virtualinvoke r5.<org.apache.ambari.server.actionmanager.HostRoleCommand: org.apache.ambari.server.actionmanager.ExecutionCommandWrapper getExecutionCommandWrapper()>()
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : if $r17 != $r18 >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r32 = <org.apache.ambari.server.serveraction.ServerActionExecutor: org.slf4j.Logger LOG>
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r32 = <org.apache.ambari.server.serveraction.ServerActionExecutor: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r33 = newarray (java.lang.Object)[3]
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r33 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r33[0] = r6
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r33[0] = r6 >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r34 = <org.apache.ambari.server.actionmanager.HostRoleStatus: org.apache.ambari.server.actionmanager.HostRoleStatus QUEUED>
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r34 = <org.apache.ambari.server.actionmanager.HostRoleStatus: org.apache.ambari.server.actionmanager.HostRoleStatus QUEUED> >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r33[1] = $r34
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r33[1] = $r34 >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r35 = virtualinvoke r5.<org.apache.ambari.server.actionmanager.HostRoleCommand: org.apache.ambari.server.actionmanager.HostRoleStatus getStatus()>()
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r35 = virtualinvoke r5.<org.apache.ambari.server.actionmanager.HostRoleCommand: org.apache.ambari.server.actionmanager.HostRoleStatus getStatus()>() >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r33[2] = $r35
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r33[2] = $r35 >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : interfaceinvoke $r32.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Queued task #{} is expected to have a status of {} but has a status of {}, skipping.", $r33)
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : interfaceinvoke $r32.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Queued task #{} is expected to have a status of {} but has a status of {}, skipping.", $r33) >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : r7 = virtualinvoke r5.<org.apache.ambari.server.actionmanager.HostRoleCommand: org.apache.ambari.server.actionmanager.ExecutionCommandWrapper getExecutionCommandWrapper()>() >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : if r7 == null
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : if r7 == null >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : r8 = virtualinvoke r7.<org.apache.ambari.server.actionmanager.ExecutionCommandWrapper: org.apache.ambari.server.agent.ExecutionCommand getExecutionCommand()>()
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : if r7 == null >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r31 = <org.apache.ambari.server.serveraction.ServerActionExecutor: org.slf4j.Logger LOG>
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r31 = <org.apache.ambari.server.serveraction.ServerActionExecutor: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : interfaceinvoke $r31.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Task #{} failed to produce an ExecutionCommandWrapper, skipping.", r6)
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : interfaceinvoke $r31.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Task #{} failed to produce an ExecutionCommandWrapper, skipping.", r6) >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : goto [?= (branch)]
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : r8 = virtualinvoke r7.<org.apache.ambari.server.actionmanager.ExecutionCommandWrapper: org.apache.ambari.server.agent.ExecutionCommand getExecutionCommand()>() >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : if r8 == null
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : if r8 == null >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r19 = new org.apache.ambari.server.serveraction.ServerActionExecutor$Worker
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : if r8 == null >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r30 = <org.apache.ambari.server.serveraction.ServerActionExecutor: org.slf4j.Logger LOG>
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r30 = <org.apache.ambari.server.serveraction.ServerActionExecutor: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : interfaceinvoke $r30.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Task #{} failed to produce an ExecutionCommand, skipping.", r6)
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : interfaceinvoke $r30.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Task #{} failed to produce an ExecutionCommand, skipping.", r6) >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : goto [?= (branch)]
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : goto [?= (branch)]
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r19 = new org.apache.ambari.server.serveraction.ServerActionExecutor$Worker >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : specialinvoke $r19.<org.apache.ambari.server.serveraction.ServerActionExecutor$Worker: void <init>(org.apache.ambari.server.serveraction.ServerActionExecutor,org.apache.ambari.server.actionmanager.HostRoleCommand,org.apache.ambari.server.agent.ExecutionCommand,org.apache.ambari.server.serveraction.ServerActionExecutor$1)>(r0, r5, r8, null)
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : specialinvoke $r19.<org.apache.ambari.server.serveraction.ServerActionExecutor$Worker: void <init>(org.apache.ambari.server.serveraction.ServerActionExecutor,org.apache.ambari.server.actionmanager.HostRoleCommand,org.apache.ambari.server.agent.ExecutionCommand,org.apache.ambari.server.serveraction.ServerActionExecutor$1)>(r0, r5, r8, null) >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : r9 = $r19
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : r9 = $r19 >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r20 = new java.lang.Thread
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r20 = new java.lang.Thread >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r21 = newarray (java.lang.Object)[1]
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r21 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r21[0] = r6
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r21[0] = r6 >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r22 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Server Action Executor Worker %s", $r21)
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r22 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Server Action Executor Worker %s", $r21) >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : specialinvoke $r20.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>(r9, $r22)
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : specialinvoke $r20.<java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)>(r9, $r22) >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : r10 = $r20
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : r10 = $r20 >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $l1 = specialinvoke r0.<org.apache.ambari.server.serveraction.ServerActionExecutor: long determineTimeout(org.apache.ambari.server.agent.ExecutionCommand)>(r8)
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $l1 = specialinvoke r0.<org.apache.ambari.server.serveraction.ServerActionExecutor: long determineTimeout(org.apache.ambari.server.agent.ExecutionCommand)>(r8) >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1)
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r23 = specialinvoke r0.<org.apache.ambari.server.serveraction.ServerActionExecutor: org.apache.ambari.server.agent.CommandReport createInProgressReport()>()
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r23 = specialinvoke r0.<org.apache.ambari.server.serveraction.ServerActionExecutor: org.apache.ambari.server.agent.CommandReport createInProgressReport()>() >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : specialinvoke r0.<org.apache.ambari.server.serveraction.ServerActionExecutor: void updateHostRoleState(org.apache.ambari.server.actionmanager.HostRoleCommand,org.apache.ambari.server.agent.ExecutionCommand,org.apache.ambari.server.agent.CommandReport)>(r5, r8, $r23)
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : specialinvoke r0.<org.apache.ambari.server.serveraction.ServerActionExecutor: void updateHostRoleState(org.apache.ambari.server.actionmanager.HostRoleCommand,org.apache.ambari.server.agent.ExecutionCommand,org.apache.ambari.server.agent.CommandReport)>(r5, r8, $r23) >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r24 = <org.apache.ambari.server.serveraction.ServerActionExecutor: org.slf4j.Logger LOG>
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r24 = <org.apache.ambari.server.serveraction.ServerActionExecutor: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : interfaceinvoke $r24.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Starting Server Action Executor Worker thread for task #{}.", r6)
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : interfaceinvoke $r24.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Starting Server Action Executor Worker thread for task #{}.", r6) >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : virtualinvoke r10.<java.lang.Thread: void start()>()
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : virtualinvoke r10.<java.lang.Thread: void start()>() >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $l2 = virtualinvoke r11.<java.lang.Long: long longValue()>()
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : virtualinvoke r10.<java.lang.Thread: void start()>() >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r25 := @caughtexception
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : r12 = $r25 >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : virtualinvoke r10.<java.lang.Thread: void interrupt()>()
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : virtualinvoke r10.<java.lang.Thread: void interrupt()>() >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : throw r12
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $l2 = virtualinvoke r11.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : virtualinvoke r10.<java.lang.Thread: void join(long)>($l2)
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $l2 = virtualinvoke r11.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r25 := @caughtexception
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : virtualinvoke r10.<java.lang.Thread: void join(long)>($l2) >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : goto [?= $z2 = virtualinvoke r10.<java.lang.Thread: boolean isAlive()>()]
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : virtualinvoke r10.<java.lang.Thread: void join(long)>($l2) >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r25 := @caughtexception
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : goto [?= $z2 = virtualinvoke r10.<java.lang.Thread: boolean isAlive()>()] >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $z2 = virtualinvoke r10.<java.lang.Thread: boolean isAlive()>()
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $z2 = virtualinvoke r10.<java.lang.Thread: boolean isAlive()>() >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : if $z2 == 0
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : if $z2 == 0 >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r26 = <org.apache.ambari.server.serveraction.ServerActionExecutor: org.slf4j.Logger LOG>
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : if $z2 == 0 >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r28 = <org.apache.ambari.server.serveraction.ServerActionExecutor: org.slf4j.Logger LOG>
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r28 = <org.apache.ambari.server.serveraction.ServerActionExecutor: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : interfaceinvoke $r28.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Server Action Executor Worker thread for task #{} exited on its own.", r6)
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : interfaceinvoke $r28.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Server Action Executor Worker thread for task #{} exited on its own.", r6) >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r29 = virtualinvoke r9.<org.apache.ambari.server.serveraction.ServerActionExecutor$Worker: org.apache.ambari.server.agent.CommandReport getCommandReport()>()
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r29 = virtualinvoke r9.<org.apache.ambari.server.serveraction.ServerActionExecutor$Worker: org.apache.ambari.server.agent.CommandReport getCommandReport()>() >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : specialinvoke r0.<org.apache.ambari.server.serveraction.ServerActionExecutor: void updateHostRoleState(org.apache.ambari.server.actionmanager.HostRoleCommand,org.apache.ambari.server.agent.ExecutionCommand,org.apache.ambari.server.agent.CommandReport)>(r5, r8, $r29)
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : specialinvoke r0.<org.apache.ambari.server.serveraction.ServerActionExecutor: void updateHostRoleState(org.apache.ambari.server.actionmanager.HostRoleCommand,org.apache.ambari.server.agent.ExecutionCommand,org.apache.ambari.server.agent.CommandReport)>(r5, r8, $r29) >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : goto [?= (branch)]
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : goto [?= (branch)]
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r26 = <org.apache.ambari.server.serveraction.ServerActionExecutor: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : interfaceinvoke $r26.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Server Action Executor Worker thread for task #{} timed out - it failed to complete within {} ms.", r6, r11)
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : interfaceinvoke $r26.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Server Action Executor Worker thread for task #{} timed out - it failed to complete within {} ms.", r6, r11) >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : virtualinvoke r10.<java.lang.Thread: void interrupt()>()
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : virtualinvoke r10.<java.lang.Thread: void interrupt()>() >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r27 = specialinvoke r0.<org.apache.ambari.server.serveraction.ServerActionExecutor: org.apache.ambari.server.agent.CommandReport createTimedOutReport()>()
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : $r27 = specialinvoke r0.<org.apache.ambari.server.serveraction.ServerActionExecutor: org.apache.ambari.server.agent.CommandReport createTimedOutReport()>() >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : specialinvoke r0.<org.apache.ambari.server.serveraction.ServerActionExecutor: void updateHostRoleState(org.apache.ambari.server.actionmanager.HostRoleCommand,org.apache.ambari.server.agent.ExecutionCommand,org.apache.ambari.server.agent.CommandReport)>(r5, r8, $r27)
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : specialinvoke r0.<org.apache.ambari.server.serveraction.ServerActionExecutor: void updateHostRoleState(org.apache.ambari.server.actionmanager.HostRoleCommand,org.apache.ambari.server.agent.ExecutionCommand,org.apache.ambari.server.agent.CommandReport)>(r5, r8, $r27) >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : goto [?= (branch)]
org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.serveraction.ServerActionExecutor.doWork : goto [?= (branch)]
