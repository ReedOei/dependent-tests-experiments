org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : z0 = 1 >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r6 = r0.<org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask: org.apache.ambari.server.topology.ClusterTopology topology>
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r6 = r0.<org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask: org.apache.ambari.server.topology.ClusterTopology topology> >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : r2 = interfaceinvoke $r6.<org.apache.ambari.server.topology.ClusterTopology: java.util.Map getHostGroupInfo()>()
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : r2 = interfaceinvoke $r6.<org.apache.ambari.server.topology.ClusterTopology: java.util.Map getHostGroupInfo()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : if $z1 == 0
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : if $z1 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : if $z1 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : return z0
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : r4 = (java.lang.String) $r7
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : r4 = (java.lang.String) $r7 >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r8 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4)
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r8 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : r5 = (org.apache.ambari.server.topology.HostGroupInfo) $r8
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : r5 = (org.apache.ambari.server.topology.HostGroupInfo) $r8 >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : if r5 == null
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : if r5 == null >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r9 = virtualinvoke r5.<org.apache.ambari.server.topology.HostGroupInfo: java.util.Collection getHostNames()>()
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : if r5 == null >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : z0 = 0
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : z0 = 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : if r5 == null
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : if r5 == null >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r10 = staticinvoke <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger access$300()>()
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : if r5 == null >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : return z0
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r10 = staticinvoke <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger access$300()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r11 = newarray (java.lang.Object)[3]
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r11 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r12 = virtualinvoke r5.<org.apache.ambari.server.topology.HostGroupInfo: java.lang.String getHostGroupName()>()
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r12 = virtualinvoke r5.<org.apache.ambari.server.topology.HostGroupInfo: java.lang.String getHostGroupName()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r11[0] = $r12
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r11[0] = $r12 >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $i2 = virtualinvoke r5.<org.apache.ambari.server.topology.HostGroupInfo: int getRequestedHostCount()>()
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $i2 = virtualinvoke r5.<org.apache.ambari.server.topology.HostGroupInfo: int getRequestedHostCount()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2) >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r11[1] = $r13
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r11[1] = $r13 >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r14 = virtualinvoke r5.<org.apache.ambari.server.topology.HostGroupInfo: java.util.Collection getHostNames()>()
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r14 = virtualinvoke r5.<org.apache.ambari.server.topology.HostGroupInfo: java.util.Collection getHostNames()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $i3 = interfaceinvoke $r14.<java.util.Collection: int size()>()
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $i3 = interfaceinvoke $r14.<java.util.Collection: int size()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3)
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3) >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r11[2] = $r15
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r11[2] = $r15 >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("TopologyManager.ConfigureClusterTask areHostGroupsResolved: host group name = {} requires {} hosts to be mapped, but only {} are available.", $r11)
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("TopologyManager.ConfigureClusterTask areHostGroupsResolved: host group name = {} requires {} hosts to be mapped, but only {} are available.", $r11) >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : goto [?= return z0]
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : goto [?= return z0] >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : return z0
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r9 = virtualinvoke r5.<org.apache.ambari.server.topology.HostGroupInfo: java.util.Collection getHostNames()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $i0 = interfaceinvoke $r9.<java.util.Collection: int size()>()
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $i0 = interfaceinvoke $r9.<java.util.Collection: int size()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $i1 = virtualinvoke r5.<org.apache.ambari.server.topology.HostGroupInfo: int getRequestedHostCount()>()
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $i1 = virtualinvoke r5.<org.apache.ambari.server.topology.HostGroupInfo: int getRequestedHostCount()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : if $i0 >= $i1
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : if $i0 >= $i1 >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : z0 = 0
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : if $i0 >= $i1 >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r16 = staticinvoke <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger access$300()>()
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r16 = staticinvoke <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger access$300()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r17 = newarray (java.lang.Object)[3]
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r17 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r18 = virtualinvoke r5.<org.apache.ambari.server.topology.HostGroupInfo: java.lang.String getHostGroupName()>()
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r18 = virtualinvoke r5.<org.apache.ambari.server.topology.HostGroupInfo: java.lang.String getHostGroupName()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r17[0] = $r18
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r17[0] = $r18 >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $i4 = virtualinvoke r5.<org.apache.ambari.server.topology.HostGroupInfo: int getRequestedHostCount()>()
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $i4 = virtualinvoke r5.<org.apache.ambari.server.topology.HostGroupInfo: int getRequestedHostCount()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4)
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r17[1] = $r19
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r17[1] = $r19 >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r20 = virtualinvoke r5.<org.apache.ambari.server.topology.HostGroupInfo: java.util.Collection getHostNames()>()
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r20 = virtualinvoke r5.<org.apache.ambari.server.topology.HostGroupInfo: java.util.Collection getHostNames()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $i5 = interfaceinvoke $r20.<java.util.Collection: int size()>()
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $i5 = interfaceinvoke $r20.<java.util.Collection: int size()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5)
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5) >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r17[2] = $r21
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $r17[2] = $r21 >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : interfaceinvoke $r16.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("TopologyManager.ConfigureClusterTask areHostGroupsResolved: host group name = {} has been fully resolved, as all {} required hosts are mapped to {} physical hosts.", $r17)
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : interfaceinvoke $r16.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("TopologyManager.ConfigureClusterTask areHostGroupsResolved: host group name = {} has been fully resolved, as all {} required hosts are mapped to {} physical hosts.", $r17) >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.topology.TopologyManager$ConfigureClusterTask.areRequiredHostGroupsResolved : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
