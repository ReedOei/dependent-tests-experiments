org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : b2 = 20 >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : i3 = i0 * 2
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : i3 = i0 * 2 >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $i5 = i3 + b2
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $i5 = i3 + b2 >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : if i1 >= $i5
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : if i1 >= $i5 >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : i4 = i3 + b2
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : if i1 >= $i5 >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r9 = <org.apache.ambari.server.controller.AmbariServer: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r9 = <org.apache.ambari.server.controller.AmbariServer: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r10 = newarray (java.lang.Object)[4]
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r10 = newarray (java.lang.Object)[4] >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r10[0] = r2
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r10[0] = r2 >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $i7 = i0 * 2
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $i7 = i0 * 2 >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7)
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7) >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r10[1] = $r11
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r10[1] = $r11 >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r10[2] = $r12
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r10[2] = $r12 >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r13 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>()
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r13 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>() >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $i8 = virtualinvoke $r13.<java.lang.Runtime: int availableProcessors()>()
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $i8 = virtualinvoke $r13.<java.lang.Runtime: int availableProcessors()>() >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8)
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8) >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r10[3] = $r14
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r10[3] = $r14 >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Jetty is configuring {} with {} reserved acceptors/selectors and a total pool size of {} for {} processors.", $r10)
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : interfaceinvoke $r9.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Jetty is configuring {} with {} reserved acceptors/selectors and a total pool size of {} for {} processors.", $r10) >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r15 = new org.eclipse.jetty.util.thread.QueuedThreadPool
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r15 = new org.eclipse.jetty.util.thread.QueuedThreadPool >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : specialinvoke $r15.<org.eclipse.jetty.util.thread.QueuedThreadPool: void <init>(int)>(i1)
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : specialinvoke $r15.<org.eclipse.jetty.util.thread.QueuedThreadPool: void <init>(int)>(i1) >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : r16 = $r15
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : r16 = $r15 >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : virtualinvoke r16.<org.eclipse.jetty.util.thread.QueuedThreadPool: void setName(java.lang.String)>(r2)
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : virtualinvoke r16.<org.eclipse.jetty.util.thread.QueuedThreadPool: void setName(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : virtualinvoke r1.<org.eclipse.jetty.server.Server: void setThreadPool(org.eclipse.jetty.util.thread.ThreadPool)>(r16)
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : virtualinvoke r1.<org.eclipse.jetty.server.Server: void setThreadPool(org.eclipse.jetty.util.thread.ThreadPool)>(r16) >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : return
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : i4 = i3 + b2 >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r3 = <org.apache.ambari.server.controller.AmbariServer: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r3 = <org.apache.ambari.server.controller.AmbariServer: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r4 = newarray (java.lang.Object)[4]
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r4 = newarray (java.lang.Object)[4] >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r4[0] = r2
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r4[0] = r2 >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r4[1] = $r5
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r4[1] = $r5 >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r6 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>()
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r6 = staticinvoke <java.lang.Runtime: java.lang.Runtime getRuntime()>() >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $i6 = virtualinvoke $r6.<java.lang.Runtime: int availableProcessors()>()
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $i6 = virtualinvoke $r6.<java.lang.Runtime: int availableProcessors()>() >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6)
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6) >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r4[2] = $r7
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r4[2] = $r7 >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4)
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i4) >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r4[3] = $r8
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r4[3] = $r8 >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("The configured Jetty {} thread pool value of {} is not sufficient on a host with {} processors. Increasing the value to {}.", $r4)
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : interfaceinvoke $r3.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("The configured Jetty {} thread pool value of {} is not sufficient on a host with {} processors. Increasing the value to {}.", $r4) >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : i1 = i4
org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : i1 = i4 >>>>>>>> org.apache.ambari.server.controller.AmbariServer.configureJettyThreadPool : $r9 = <org.apache.ambari.server.controller.AmbariServer: org.slf4j.Logger LOG>
