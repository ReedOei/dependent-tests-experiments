org.apache.ambari.server.resources.ResourceManager.getResource : $r7 = r0.<org.apache.ambari.server.resources.ResourceManager: org.apache.ambari.server.configuration.Configuration configs> >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r8 = virtualinvoke $r7.<org.apache.ambari.server.configuration.Configuration: java.util.Map getConfigsMap()>()
org.apache.ambari.server.resources.ResourceManager.getResource : $r8 = virtualinvoke $r7.<org.apache.ambari.server.configuration.Configuration: java.util.Map getConfigsMap()>() >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r2 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty RESOURCES_DIR>
org.apache.ambari.server.resources.ResourceManager.getResource : $r2 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty RESOURCES_DIR> >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r9 = virtualinvoke $r2.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.resources.ResourceManager.getResource : $r9 = virtualinvoke $r2.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r10 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9)
org.apache.ambari.server.resources.ResourceManager.getResource : $r10 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9) >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : r3 = (java.lang.String) $r10
org.apache.ambari.server.resources.ResourceManager.getResource : r3 = (java.lang.String) $r10 >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r4 = <java.io.File: java.lang.String separator>
org.apache.ambari.server.resources.ResourceManager.getResource : $r4 = <java.io.File: java.lang.String separator> >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : r5 = virtualinvoke r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("/", $r4)
org.apache.ambari.server.resources.ResourceManager.getResource : r5 = virtualinvoke r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("/", $r4) >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r11 = new java.io.File
org.apache.ambari.server.resources.ResourceManager.getResource : $r11 = new java.io.File >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r12 = new java.lang.StringBuilder
org.apache.ambari.server.resources.ResourceManager.getResource : $r12 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : specialinvoke $r12.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.resources.ResourceManager.getResource : specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)
org.apache.ambari.server.resources.ResourceManager.getResource : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r14 = <java.io.File: java.lang.String separator>
org.apache.ambari.server.resources.ResourceManager.getResource : $r14 = <java.io.File: java.lang.String separator> >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14)
org.apache.ambari.server.resources.ResourceManager.getResource : $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)
org.apache.ambari.server.resources.ResourceManager.getResource : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.resources.ResourceManager.getResource : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>($r17)
org.apache.ambari.server.resources.ResourceManager.getResource : specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>($r17) >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : r6 = $r11
org.apache.ambari.server.resources.ResourceManager.getResource : r6 = $r11 >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r18 = <org.apache.ambari.server.resources.ResourceManager: org.apache.commons.logging.Log LOG>
org.apache.ambari.server.resources.ResourceManager.getResource : $r18 = <org.apache.ambari.server.resources.ResourceManager: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $z0 = interfaceinvoke $r18.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()
org.apache.ambari.server.resources.ResourceManager.getResource : $z0 = interfaceinvoke $r18.<org.apache.commons.logging.Log: boolean isDebugEnabled()>() >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : if $z0 == 0
org.apache.ambari.server.resources.ResourceManager.getResource : if $z0 == 0 >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r19 = <org.apache.ambari.server.resources.ResourceManager: org.apache.commons.logging.Log LOG>
org.apache.ambari.server.resources.ResourceManager.getResource : if $z0 == 0 >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : return r6
org.apache.ambari.server.resources.ResourceManager.getResource : $r19 = <org.apache.ambari.server.resources.ResourceManager: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r20 = new java.lang.StringBuilder
org.apache.ambari.server.resources.ResourceManager.getResource : $r20 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : specialinvoke $r20.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.resources.ResourceManager.getResource : specialinvoke $r20.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource requested from ResourceManager, resourceDir=")
org.apache.ambari.server.resources.ResourceManager.getResource : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Resource requested from ResourceManager, resourceDir=") >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)
org.apache.ambari.server.resources.ResourceManager.getResource : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", resourcePath=")
org.apache.ambari.server.resources.ResourceManager.getResource : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", resourcePath=") >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)
org.apache.ambari.server.resources.ResourceManager.getResource : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", fileExists=")
org.apache.ambari.server.resources.ResourceManager.getResource : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", fileExists=") >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $z1 = virtualinvoke r6.<java.io.File: boolean exists()>()
org.apache.ambari.server.resources.ResourceManager.getResource : $z1 = virtualinvoke r6.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1)
org.apache.ambari.server.resources.ResourceManager.getResource : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1) >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.resources.ResourceManager.getResource : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : interfaceinvoke $r19.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r27)
org.apache.ambari.server.resources.ResourceManager.getResource : interfaceinvoke $r19.<org.apache.commons.logging.Log: void debug(java.lang.Object)>($r27) >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : return r6
