org.apache.ambari.server.state.PropertyInfoTest.propertyInfoFrom : $r3 = newarray (java.lang.Class)[2] >>>>>>>> org.apache.ambari.server.state.PropertyInfoTest.propertyInfoFrom : $r3[0] = class "org/apache/ambari/server/state/PropertyInfo"
org.apache.ambari.server.state.PropertyInfoTest.propertyInfoFrom : $r3[0] = class "org/apache/ambari/server/state/PropertyInfo" >>>>>>>> org.apache.ambari.server.state.PropertyInfoTest.propertyInfoFrom : $r3[1] = class "org/apache/ambari/server/state/PropertyUpgradeBehavior"
org.apache.ambari.server.state.PropertyInfoTest.propertyInfoFrom : $r3[1] = class "org/apache/ambari/server/state/PropertyUpgradeBehavior" >>>>>>>> org.apache.ambari.server.state.PropertyInfoTest.propertyInfoFrom : r1 = staticinvoke <javax.xml.bind.JAXBContext: javax.xml.bind.JAXBContext newInstance(java.lang.Class[])>($r3)
org.apache.ambari.server.state.PropertyInfoTest.propertyInfoFrom : r1 = staticinvoke <javax.xml.bind.JAXBContext: javax.xml.bind.JAXBContext newInstance(java.lang.Class[])>($r3) >>>>>>>> org.apache.ambari.server.state.PropertyInfoTest.propertyInfoFrom : r2 = virtualinvoke r1.<javax.xml.bind.JAXBContext: javax.xml.bind.Unmarshaller createUnmarshaller()>()
org.apache.ambari.server.state.PropertyInfoTest.propertyInfoFrom : r2 = virtualinvoke r1.<javax.xml.bind.JAXBContext: javax.xml.bind.Unmarshaller createUnmarshaller()>() >>>>>>>> org.apache.ambari.server.state.PropertyInfoTest.propertyInfoFrom : $r4 = new javax.xml.transform.stream.StreamSource
org.apache.ambari.server.state.PropertyInfoTest.propertyInfoFrom : $r4 = new javax.xml.transform.stream.StreamSource >>>>>>>> org.apache.ambari.server.state.PropertyInfoTest.propertyInfoFrom : $r5 = new java.io.ByteArrayInputStream
org.apache.ambari.server.state.PropertyInfoTest.propertyInfoFrom : $r5 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.ambari.server.state.PropertyInfoTest.propertyInfoFrom : $r6 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>()
org.apache.ambari.server.state.PropertyInfoTest.propertyInfoFrom : $r6 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>() >>>>>>>> org.apache.ambari.server.state.PropertyInfoTest.propertyInfoFrom : specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>($r6)
org.apache.ambari.server.state.PropertyInfoTest.propertyInfoFrom : specialinvoke $r5.<java.io.ByteArrayInputStream: void <init>(byte[])>($r6) >>>>>>>> org.apache.ambari.server.state.PropertyInfoTest.propertyInfoFrom : specialinvoke $r4.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>($r5)
org.apache.ambari.server.state.PropertyInfoTest.propertyInfoFrom : specialinvoke $r4.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>($r5) >>>>>>>> org.apache.ambari.server.state.PropertyInfoTest.propertyInfoFrom : $r7 = interfaceinvoke r2.<javax.xml.bind.Unmarshaller: javax.xml.bind.JAXBElement unmarshal(javax.xml.transform.Source,java.lang.Class)>($r4, class "org/apache/ambari/server/state/PropertyInfo")
org.apache.ambari.server.state.PropertyInfoTest.propertyInfoFrom : $r7 = interfaceinvoke r2.<javax.xml.bind.Unmarshaller: javax.xml.bind.JAXBElement unmarshal(javax.xml.transform.Source,java.lang.Class)>($r4, class "org/apache/ambari/server/state/PropertyInfo") >>>>>>>> org.apache.ambari.server.state.PropertyInfoTest.propertyInfoFrom : $r8 = virtualinvoke $r7.<javax.xml.bind.JAXBElement: java.lang.Object getValue()>()
org.apache.ambari.server.state.PropertyInfoTest.propertyInfoFrom : $r8 = virtualinvoke $r7.<javax.xml.bind.JAXBElement: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.state.PropertyInfoTest.propertyInfoFrom : $r9 = (org.apache.ambari.server.state.PropertyInfo) $r8
org.apache.ambari.server.state.PropertyInfoTest.propertyInfoFrom : $r9 = (org.apache.ambari.server.state.PropertyInfo) $r8 >>>>>>>> org.apache.ambari.server.state.PropertyInfoTest.propertyInfoFrom : return $r9
