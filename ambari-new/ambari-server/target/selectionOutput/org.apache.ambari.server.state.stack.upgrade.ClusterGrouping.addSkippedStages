org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : if $z0 == 0
org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : return
org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : r4 = (org.apache.ambari.server.state.stack.upgrade.ClusterGrouping$ExecuteStage) $r6
org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : r4 = (org.apache.ambari.server.state.stack.upgrade.ClusterGrouping$ExecuteStage) $r6 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : $r7 = r4.<org.apache.ambari.server.state.stack.upgrade.ClusterGrouping$ExecuteStage: java.lang.String service>
org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : $r7 = r4.<org.apache.ambari.server.state.stack.upgrade.ClusterGrouping$ExecuteStage: java.lang.String service> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : $z1 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r7)
org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : $z1 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r7) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : if $z1 == 0
org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : $r8 = r4.<org.apache.ambari.server.state.stack.upgrade.ClusterGrouping$ExecuteStage: java.lang.String service>
org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : $r8 = r4.<org.apache.ambari.server.state.stack.upgrade.ClusterGrouping$ExecuteStage: java.lang.String service> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : $r9 = interfaceinvoke r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r8)
org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : $r9 = interfaceinvoke r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r8) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : r5 = (java.util.List) $r9
org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : r5 = (java.util.List) $r9 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : $r10 = r4.<org.apache.ambari.server.state.stack.upgrade.ClusterGrouping$ExecuteStage: java.lang.String service>
org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : $r10 = r4.<org.apache.ambari.server.state.stack.upgrade.ClusterGrouping$ExecuteStage: java.lang.String service> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.ClusterGrouping: boolean addGroupingStages(java.util.List,java.lang.String)>(r5, $r10)
org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.ClusterGrouping: boolean addGroupingStages(java.util.List,java.lang.String)>(r5, $r10) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.ClusterGrouping: void addSkippedStages(java.util.Map,java.util.List)>(r1, r5)
org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.ClusterGrouping: void addSkippedStages(java.util.Map,java.util.List)>(r1, r5) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ClusterGrouping.addSkippedStages : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
