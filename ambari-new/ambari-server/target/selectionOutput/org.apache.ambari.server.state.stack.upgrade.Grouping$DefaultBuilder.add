org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r14 = virtualinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: java.util.List resolveTasks(org.apache.ambari.server.state.UpgradeContext,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent)>(r1, 1, r4) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r6 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.Grouping: java.util.List access$100(java.util.List)>($r14)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r6 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.Grouping: java.util.List access$100(java.util.List)>($r14) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r7 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r7 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z1 == 0
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r15 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r19 = virtualinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: org.apache.ambari.server.state.stack.upgrade.Task resolveTask(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent)>(r1, r4)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r19 = virtualinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: org.apache.ambari.server.state.stack.upgrade.Task resolveTask(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent)>(r1, r4) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if null == r19
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if null == r19 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r20 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if null == r19 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r27 = virtualinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: java.util.List resolveTasks(org.apache.ambari.server.state.UpgradeContext,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent)>(r1, 0, r4)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r27 = virtualinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: java.util.List resolveTasks(org.apache.ambari.server.state.UpgradeContext,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent)>(r1, 0, r4) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r28 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.Grouping: java.util.List access$100(java.util.List)>($r27)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r28 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.Grouping: java.util.List access$100(java.util.List)>($r27) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r29 = interfaceinvoke r28.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r29 = interfaceinvoke r28.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z3 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z3 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z3 == 0
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z3 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r30 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z3 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z5 = r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: boolean m_serviceCheck>
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z5 = r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: boolean m_serviceCheck> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z5 == 0
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z5 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if z0 != 0
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z5 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : return
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if z0 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r38 = r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: java.util.Set m_servicesToCheck>
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if z0 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : return
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r38 = r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: java.util.Set m_servicesToCheck> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : interfaceinvoke $r38.<java.util.Set: boolean add(java.lang.Object)>(r3)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : interfaceinvoke $r38.<java.util.Set: boolean add(java.lang.Object)>(r3) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : return
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r30 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r31 = (org.apache.ambari.server.state.stack.upgrade.Grouping$TaskBucket) $r30
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r31 = (org.apache.ambari.server.state.stack.upgrade.Grouping$TaskBucket) $r30 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r32 = r4.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.lang.String name>
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r32 = r4.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.lang.String name> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r33 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.Grouping$TaskBucket: java.util.List access$200(org.apache.ambari.server.state.stack.upgrade.Grouping$TaskBucket)>(r31)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r33 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.Grouping$TaskBucket: java.util.List access$200(org.apache.ambari.server.state.stack.upgrade.Grouping$TaskBucket)>(r31) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r34 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.TaskWrapperBuilder: java.util.List getTaskList(java.lang.String,java.lang.String,org.apache.ambari.server.stack.HostsType,java.util.List,java.util.Map)>(r3, $r32, r2, $r33, r5)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r34 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.TaskWrapperBuilder: java.util.List getTaskList(java.lang.String,java.lang.String,org.apache.ambari.server.stack.HostsType,java.util.List,java.util.Map)>(r3, $r32, r2, $r33, r5) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r35 = specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: java.util.List organizeTaskWrappersBySyncRules(java.util.List)>(r34)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r35 = specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: java.util.List organizeTaskWrappersBySyncRules(java.util.List)>(r34) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r36 = interfaceinvoke r35.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r36 = interfaceinvoke r35.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z4 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z4 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z4 == 0
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z4 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r37 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z4 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : goto [?= $z3 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : goto [?= $z3 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z3 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r37 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r13 = (java.util.List) $r37
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r13 = (java.util.List) $r37 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: void addTasksToStageInBatches(java.util.List,java.lang.String,org.apache.ambari.server.state.UpgradeContext,java.lang.String,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r13, "Completing", r1, r3, r4, r5)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: void addTasksToStageInBatches(java.util.List,java.lang.String,org.apache.ambari.server.state.UpgradeContext,java.lang.String,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r13, "Completing", r1, r3, r4, r5) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : goto [?= $z4 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : goto [?= $z4 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z4 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r20 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r21 = r4.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.lang.String name>
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r21 = r4.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.lang.String name> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r22 = r2.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts>
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r22 = r2.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r23 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r19)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r23 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r19) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : specialinvoke $r20.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: void <init>(java.lang.String,java.lang.String,java.util.Set,java.util.Map,java.util.List)>(r3, $r21, $r22, r5, $r23)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : specialinvoke $r20.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: void <init>(java.lang.String,java.lang.String,java.util.Set,java.util.Map,java.util.List)>(r3, $r21, $r22, r5, $r23) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r24 = $r20
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r24 = $r20 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r25 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r24)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r25 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r24) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r26 = virtualinvoke r19.<org.apache.ambari.server.state.stack.upgrade.Task: java.lang.String getActionVerb()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r26 = virtualinvoke r19.<org.apache.ambari.server.state.stack.upgrade.Task: java.lang.String getActionVerb()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: void addTasksToStageInBatches(java.util.List,java.lang.String,org.apache.ambari.server.state.UpgradeContext,java.lang.String,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>($r25, $r26, r1, r3, r4, r5)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: void addTasksToStageInBatches(java.util.List,java.lang.String,org.apache.ambari.server.state.UpgradeContext,java.lang.String,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>($r25, $r26, r1, r3, r4, r5) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r27 = virtualinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: java.util.List resolveTasks(org.apache.ambari.server.state.UpgradeContext,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent)>(r1, 0, r4)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r15 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r8 = (org.apache.ambari.server.state.stack.upgrade.Grouping$TaskBucket) $r15
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r8 = (org.apache.ambari.server.state.stack.upgrade.Grouping$TaskBucket) $r15 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r16 = r4.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.lang.String name>
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r16 = r4.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.lang.String name> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r17 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.Grouping$TaskBucket: java.util.List access$200(org.apache.ambari.server.state.stack.upgrade.Grouping$TaskBucket)>(r8)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r17 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.Grouping$TaskBucket: java.util.List access$200(org.apache.ambari.server.state.stack.upgrade.Grouping$TaskBucket)>(r8) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r9 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.TaskWrapperBuilder: java.util.List getTaskList(java.lang.String,java.lang.String,org.apache.ambari.server.stack.HostsType,java.util.List,java.util.Map)>(r3, $r16, r2, $r17, r5)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r9 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.TaskWrapperBuilder: java.util.List getTaskList(java.lang.String,java.lang.String,org.apache.ambari.server.stack.HostsType,java.util.List,java.util.Map)>(r3, $r16, r2, $r17, r5) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r10 = specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: java.util.List organizeTaskWrappersBySyncRules(java.util.List)>(r9)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r10 = specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: java.util.List organizeTaskWrappersBySyncRules(java.util.List)>(r9) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r11 = interfaceinvoke r10.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r11 = interfaceinvoke r10.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z2 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z2 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z2 == 0
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r18 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : goto [?= $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : goto [?= $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $r18 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r12 = (java.util.List) $r18
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : r12 = (java.util.List) $r18 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: void addTasksToStageInBatches(java.util.List,java.lang.String,org.apache.ambari.server.state.UpgradeContext,java.lang.String,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r12, "Preparing", r1, r3, r4, r5)
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder: void addTasksToStageInBatches(java.util.List,java.lang.String,org.apache.ambari.server.state.UpgradeContext,java.lang.String,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r12, "Preparing", r1, r3, r4, r5) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : goto [?= $z2 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : goto [?= $z2 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping$DefaultBuilder.add : $z2 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>()
