org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $r2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>() >>>>>>>> org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : r3 = interfaceinvoke $r2.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>(r1)
org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : r3 = interfaceinvoke $r2.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>(r1) >>>>>>>> org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $r4 = new java.lang.StringBuilder
org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $r4 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parallel-loop-")
org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parallel-loop-") >>>>>>>> org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $r6 = <org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory: java.util.concurrent.atomic.AtomicInteger threadId>
org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $r6 = <org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory: java.util.concurrent.atomic.AtomicInteger threadId> >>>>>>>> org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $i0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>()
org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $i0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>() >>>>>>>> org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : virtualinvoke r3.<java.lang.Thread: void setName(java.lang.String)>($r8)
org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : virtualinvoke r3.<java.lang.Thread: void setName(java.lang.String)>($r8) >>>>>>>> org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : return r3
