org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r4 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getIPAddress()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r4 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r4 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r5 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getIPAddress()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r4 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i0 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getProcessorCount()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i0 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getProcessorCount()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setCpuCount(int)>($i0)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setCpuCount(int)>($i0) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i1 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getPhysicalProcessorCount()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i1 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getPhysicalProcessorCount()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setPhCpuCount(int)>($i1)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setPhCpuCount(int)>($i1) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $l2 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: long getMemoryTotal()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $l2 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: long getMemoryTotal()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setTotalMemBytes(long)>($l2)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setTotalMemBytes(long)>($l2) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $l3 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: long getFreeMemory()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $l3 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: long getFreeMemory()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setAvailableMemBytes(long)>($l3)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setAvailableMemBytes(long)>($l3) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r8 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getArchitecture()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r8 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getArchitecture()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r8 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r8 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r9 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getArchitecture()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r8 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r11 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOS()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r11 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOS()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r11 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r11 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r12 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOS()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r11 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r20 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.util.List getMounts()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r20 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.util.List getMounts()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r20 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r20 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r21 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.util.List getMounts()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r20 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r23 = new org.apache.ambari.server.state.AgentVersion
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r23 = new org.apache.ambari.server.state.AgentVersion >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r24 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getAgentUserId()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r24 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getAgentUserId()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : specialinvoke $r23.<org.apache.ambari.server.state.AgentVersion: void <init>(java.lang.String)>($r24)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : specialinvoke $r23.<org.apache.ambari.server.state.AgentVersion: void <init>(java.lang.String)>($r24) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setAgentVersion(org.apache.ambari.server.state.AgentVersion)>($r23)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setAgentVersion(org.apache.ambari.server.state.AgentVersion)>($r23) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r25 = new java.util.HashMap
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r25 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : specialinvoke $r25.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : specialinvoke $r25.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : r26 = $r25
org.apache.ambari.server.state.host.HostImpl.importHostInfo : r26 = $r25 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r27 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getHardwareIsa()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r27 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getHardwareIsa()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r27 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r27 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r28 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getHardwareIsa()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r27 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r30 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getHardwareModel()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r30 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getHardwareModel()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r30 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r30 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r31 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getHardwareModel()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r30 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r33 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getInterfaces()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r33 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getInterfaces()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r33 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r33 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r34 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getInterfaces()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r33 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r36 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernel()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r36 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernel()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r36 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r36 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r37 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernel()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r36 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r39 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelMajVersion()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r39 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelMajVersion()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r39 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r39 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r40 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelMajVersion()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r39 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r42 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelRelease()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r42 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelRelease()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r42 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r42 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r43 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelRelease()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r42 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r45 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelVersion()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r45 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelVersion()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r45 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r45 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r46 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelVersion()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r45 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r48 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getMacAddress()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r48 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getMacAddress()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r48 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r48 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r49 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getMacAddress()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r48 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r51 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getNetMask()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r51 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getNetMask()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r51 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r51 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r52 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getNetMask()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r51 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r54 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSFamily()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r54 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSFamily()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r54 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r54 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r55 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSFamily()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r54 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i5 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getPhysicalProcessorCount()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i5 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getPhysicalProcessorCount()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $i5 == 0
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $i5 == 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i6 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getPhysicalProcessorCount()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $i5 == 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i8 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getProcessorCount()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i8 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getProcessorCount()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $i8 == 0
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $i8 == 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i9 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getProcessorCount()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $i8 == 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $z4 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: boolean getSeLinux()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $z4 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: boolean getSeLinux()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r61 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z4)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r61 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z4) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r61 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r61 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $z5 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: boolean getSeLinux()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r61 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r64 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getSwapSize()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r64 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getSwapSize()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r64 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r64 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r65 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getSwapSize()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r64 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r67 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getSwapFree()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r67 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getSwapFree()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r67 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r67 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r68 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getSwapFree()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r67 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r70 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getTimeZone()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r70 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getTimeZone()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r70 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r70 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r71 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getTimeZone()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r70 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r73 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSRelease()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r73 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSRelease()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r73 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r73 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r74 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSRelease()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r73 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setHostAttributes(java.util.Map)>(r26)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setHostAttributes(java.util.Map)>(r26) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : return
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r74 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSRelease()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("os_release_version", $r74)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("os_release_version", $r74) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setHostAttributes(java.util.Map)>(r26)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r71 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getTimeZone()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("timezone", $r71)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("timezone", $r71) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r73 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSRelease()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r68 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getSwapFree()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("swap_free", $r68)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("swap_free", $r68) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r70 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getTimeZone()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r65 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getSwapSize()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("swap_size", $r65)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("swap_size", $r65) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r67 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getSwapFree()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $z5 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: boolean getSeLinux()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r62 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z5)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r62 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z5) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("selinux_enabled", $r62)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("selinux_enabled", $r62) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r64 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getSwapSize()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i9 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getProcessorCount()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $l10 = (long) $i9
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $l10 = (long) $i9 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r59 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l10)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r59 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l10) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("processors_count", $r59)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("processors_count", $r59) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $z4 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: boolean getSeLinux()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i6 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getPhysicalProcessorCount()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $l7 = (long) $i6
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $l7 = (long) $i6 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r57 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l7)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r57 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l7) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("physicalprocessors_count", $r57)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("physicalprocessors_count", $r57) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i8 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getProcessorCount()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r55 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSFamily()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("os_family", $r55)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("os_family", $r55) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i5 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getPhysicalProcessorCount()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r52 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getNetMask()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("netmask", $r52)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("netmask", $r52) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r54 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSFamily()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r49 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getMacAddress()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("mac_address", $r49)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("mac_address", $r49) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r51 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getNetMask()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r46 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelVersion()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("kernel_version", $r46)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("kernel_version", $r46) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r48 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getMacAddress()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r43 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelRelease()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("kernel_release", $r43)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("kernel_release", $r43) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r45 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelVersion()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r40 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelMajVersion()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("kernel_majorversion", $r40)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("kernel_majorversion", $r40) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r42 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelRelease()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r37 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernel()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("kernel", $r37)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("kernel", $r37) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r39 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernelMajVersion()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r34 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getInterfaces()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("interfaces", $r34)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("interfaces", $r34) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r36 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getKernel()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r31 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getHardwareModel()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hardware_model", $r31)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hardware_model", $r31) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r33 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getInterfaces()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r28 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getHardwareIsa()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hardware_isa", $r28)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : interfaceinvoke r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("hardware_isa", $r28) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r30 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getHardwareModel()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r21 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.util.List getMounts()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $z3 = interfaceinvoke $r21.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $z3 = interfaceinvoke $r21.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $z3 != 0
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $z3 != 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r22 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.util.List getMounts()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $z3 != 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r23 = new org.apache.ambari.server.state.AgentVersion
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r22 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.util.List getMounts()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setDisksInfo(java.util.List)>($r22)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setDisksInfo(java.util.List)>($r22) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r23 = new org.apache.ambari.server.state.AgentVersion
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r12 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOS()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $z2 = virtualinvoke $r12.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $z2 = virtualinvoke $r12.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $z2 != 0
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $z2 != 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : r2 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOS()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $z2 != 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r20 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.util.List getMounts()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : r2 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOS()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r13 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSRelease()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r13 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSRelease()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r13 == null
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r13 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r14 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSRelease()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $r13 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r19 = virtualinvoke r2.<java.lang.String: java.lang.String toLowerCase()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r19 = virtualinvoke r2.<java.lang.String: java.lang.String toLowerCase()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setOsType(java.lang.String)>($r19)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setOsType(java.lang.String)>($r19) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r20 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.util.List getMounts()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r14 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOSRelease()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : r3 = virtualinvoke $r14.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.")
org.apache.ambari.server.state.host.HostImpl.importHostInfo : r3 = virtualinvoke $r14.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.") >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i4 = lengthof r3
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i4 = lengthof r3 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $i4 <= 0
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $i4 <= 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r15 = new java.lang.StringBuilder
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $i4 <= 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r19 = virtualinvoke r2.<java.lang.String: java.lang.String toLowerCase()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r15 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r17 = r3[0]
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r17 = r3[0] >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : r2 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : r2 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r19 = virtualinvoke r2.<java.lang.String: java.lang.String toLowerCase()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r9 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getArchitecture()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $z1 = virtualinvoke $r9.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $z1 = virtualinvoke $r9.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $z1 != 0
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $z1 != 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r10 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getArchitecture()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $z1 != 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r11 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOS()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r10 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getArchitecture()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setOsArch(java.lang.String)>($r10)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setOsArch(java.lang.String)>($r10) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r11 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getOS()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r5 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getIPAddress()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $z0 = virtualinvoke $r5.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $z0 = virtualinvoke $r5.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $z0 != 0
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $z0 != 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r6 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getIPAddress()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : if $z0 != 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i0 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getProcessorCount()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r6 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getIPAddress()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setIPv4(java.lang.String)>($r6)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setIPv4(java.lang.String)>($r6) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r7 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getIPAddress()>()
org.apache.ambari.server.state.host.HostImpl.importHostInfo : $r7 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: java.lang.String getIPAddress()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setIPv6(java.lang.String)>($r7)
org.apache.ambari.server.state.host.HostImpl.importHostInfo : virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: void setIPv6(java.lang.String)>($r7) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.importHostInfo : $i0 = virtualinvoke r1.<org.apache.ambari.server.agent.HostInfo: int getProcessorCount()>()
