org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : if r3 != null >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>(r2)
org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : if r3 != null >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : $i1 = interfaceinvoke r1.<java.util.List: int size()>()
org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : $i1 = interfaceinvoke r1.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : i0 = $i1 - 1
org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : i0 = $i1 - 1 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : if i0 < 0
org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : if i0 < 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0)
org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : if i0 < 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : return 0
org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : r4 = (java.lang.String) $r5
org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : r4 = (java.lang.String) $r5 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r4)
org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>(r4) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : if $z1 == 0
org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : $i2 = i0 + 1
org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : i0 = i0 + -1
org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : i0 = i0 + -1 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : goto [?= (branch)]
org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : if i0 < 0
org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : $i2 = i0 + 1 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : interfaceinvoke r1.<java.util.List: boolean addAll(int,java.util.Collection)>($i2, r2)
org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : interfaceinvoke r1.<java.util.List: boolean addAll(int,java.util.Collection)>($i2, r2) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : return 1
org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : interfaceinvoke r1.<java.util.List: boolean addAll(java.util.Collection)>(r2) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.ServiceCheckGrouping.addPriorities : return 1
