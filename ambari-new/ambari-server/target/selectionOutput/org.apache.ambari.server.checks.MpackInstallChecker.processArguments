org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r1 = new org.apache.commons.cli.DefaultParser >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : specialinvoke $r1.<org.apache.commons.cli.DefaultParser: void <init>()>()
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : specialinvoke $r1.<org.apache.commons.cli.DefaultParser: void <init>()>() >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : r2 = $r1
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : r2 = $r1 >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r8 = new org.apache.commons.cli.HelpFormatter
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r8 = new org.apache.commons.cli.HelpFormatter >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : specialinvoke $r8.<org.apache.commons.cli.HelpFormatter: void <init>()>()
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : specialinvoke $r8.<org.apache.commons.cli.HelpFormatter: void <init>()>() >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : r3 = $r8
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : r3 = $r8 >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : r4 = null
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : r4 = null >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r9 = staticinvoke <org.apache.ambari.server.checks.MpackInstallChecker: org.apache.commons.cli.Options getOptions()>()
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : r4 = null >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r15 := @caughtexception
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : r16 = $r15 >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r17 = <java.lang.System: java.io.PrintStream err>
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r17 = <java.lang.System: java.io.PrintStream err> >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r18 = new java.lang.StringBuilder
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r18 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : specialinvoke $r18.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : specialinvoke $r18.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parsing failed. Reason: ")
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Parsing failed. Reason: ") >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r20 = virtualinvoke r16.<java.lang.Exception: java.lang.String getMessage()>()
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r20 = virtualinvoke r16.<java.lang.Exception: java.lang.String getMessage()>() >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20)
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r22)
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r22) >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r23 = <org.apache.ambari.server.checks.MpackInstallChecker: org.slf4j.Logger LOG>
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r23 = <org.apache.ambari.server.checks.MpackInstallChecker: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : interfaceinvoke $r23.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Parsing failed. Reason: ", r16)
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : interfaceinvoke $r23.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Parsing failed. Reason: ", r16) >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : staticinvoke <java.lang.System: void exit(int)>(1)
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : staticinvoke <java.lang.System: void exit(int)>(1) >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : return r4
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r9 = staticinvoke <org.apache.ambari.server.checks.MpackInstallChecker: org.apache.commons.cli.Options getOptions()>() >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : r5 = interfaceinvoke r2.<org.apache.commons.cli.CommandLineParser: org.apache.commons.cli.CommandLine parse(org.apache.commons.cli.Options,java.lang.String[])>($r9, r0)
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r9 = staticinvoke <org.apache.ambari.server.checks.MpackInstallChecker: org.apache.commons.cli.Options getOptions()>() >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r15 := @caughtexception
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : r5 = interfaceinvoke r2.<org.apache.commons.cli.CommandLineParser: org.apache.commons.cli.CommandLine parse(org.apache.commons.cli.Options,java.lang.String[])>($r9, r0) >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r10 = virtualinvoke r5.<org.apache.commons.cli.CommandLine: java.lang.Object getParsedOptionValue(java.lang.String)>("mpack-stacks")
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : r5 = interfaceinvoke r2.<org.apache.commons.cli.CommandLineParser: org.apache.commons.cli.CommandLine parse(org.apache.commons.cli.Options,java.lang.String[])>($r9, r0) >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r15 := @caughtexception
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r10 = virtualinvoke r5.<org.apache.commons.cli.CommandLine: java.lang.Object getParsedOptionValue(java.lang.String)>("mpack-stacks") >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : r6 = (java.lang.String) $r10
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r10 = virtualinvoke r5.<org.apache.commons.cli.CommandLine: java.lang.Object getParsedOptionValue(java.lang.String)>("mpack-stacks") >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r15 := @caughtexception
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : r6 = (java.lang.String) $r10 >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r11 = new java.util.HashSet
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : r6 = (java.lang.String) $r10 >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r15 := @caughtexception
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r11 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r12 = virtualinvoke r6.<java.lang.String: java.lang.String[] split(java.lang.String)>(",")
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r11 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r15 := @caughtexception
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r12 = virtualinvoke r6.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r12)
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r12 = virtualinvoke r6.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r15 := @caughtexception
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r12) >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : specialinvoke $r11.<java.util.HashSet: void <init>(java.util.Collection)>($r13)
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r13 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r12) >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r15 := @caughtexception
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : specialinvoke $r11.<java.util.HashSet: void <init>(java.util.Collection)>($r13) >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : r7 = $r11
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : specialinvoke $r11.<java.util.HashSet: void <init>(java.util.Collection)>($r13) >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r15 := @caughtexception
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : r7 = $r11 >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r14 = new org.apache.ambari.server.checks.MpackInstallChecker$MpackContext
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : r7 = $r11 >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r15 := @caughtexception
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r14 = new org.apache.ambari.server.checks.MpackInstallChecker$MpackContext >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : specialinvoke $r14.<org.apache.ambari.server.checks.MpackInstallChecker$MpackContext: void <init>(java.util.HashSet)>(r7)
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r14 = new org.apache.ambari.server.checks.MpackInstallChecker$MpackContext >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r15 := @caughtexception
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : specialinvoke $r14.<org.apache.ambari.server.checks.MpackInstallChecker$MpackContext: void <init>(java.util.HashSet)>(r7) >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : r4 = $r14
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : specialinvoke $r14.<org.apache.ambari.server.checks.MpackInstallChecker$MpackContext: void <init>(java.util.HashSet)>(r7) >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r15 := @caughtexception
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : r4 = $r14 >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : goto [?= return r4]
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : r4 = $r14 >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : $r15 := @caughtexception
org.apache.ambari.server.checks.MpackInstallChecker.processArguments : goto [?= return r4] >>>>>>>> org.apache.ambari.server.checks.MpackInstallChecker.processArguments : return r4
