org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r9 = virtualinvoke r1.<org.apache.ambari.server.events.HostsRemovedEvent: java.util.Set getHostNames()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z0 = interfaceinvoke $r9.<java.util.Set: boolean isEmpty()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z0 = interfaceinvoke $r9.<java.util.Set: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z0 == 0
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z0 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r10 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG>
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z0 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r11 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG>
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r11 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r12 = virtualinvoke r1.<org.apache.ambari.server.events.HostsRemovedEvent: java.util.Set getHostNames()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r12 = virtualinvoke r1.<org.apache.ambari.server.events.HostsRemovedEvent: java.util.Set getHostNames()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r11.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Removing hosts [{}] from available hosts on hosts removed event.", $r12)
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r11.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Removing hosts [{}] from available hosts on hosts removed event.", $r12) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r13 = new java.util.HashSet
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r13 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : specialinvoke $r13.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : specialinvoke $r13.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r2 = $r13
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r2 = $r13 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r14 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.List availableHosts>
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r14 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.List availableHosts> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r3 = $r14
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r3 = $r14 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : entermonitor $r14
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : entermonitor $r14 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r15 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.List availableHosts>
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : entermonitor $r14 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r8 = $r28 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : exitmonitor r3
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r8 = $r28 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : exitmonitor r3 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : throw r8
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : exitmonitor r3 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r15 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.List availableHosts> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r4 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r15 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.List availableHosts> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r4 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r4 = interfaceinvoke $r15.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z1 == 0
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z1 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r16 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z1 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z5 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z1 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z5 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z5 != 0
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z5 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z5 != 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r20 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z5 != 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r26 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG>
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z5 != 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r26 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r27 = virtualinvoke r1.<org.apache.ambari.server.events.HostsRemovedEvent: java.util.Set getHostNames()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r26 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r27 = virtualinvoke r1.<org.apache.ambari.server.events.HostsRemovedEvent: java.util.Set getHostNames()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r26.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("No any host [{}] found in available hosts", $r27)
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r27 = virtualinvoke r1.<org.apache.ambari.server.events.HostsRemovedEvent: java.util.Set getHostNames()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r26.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("No any host [{}] found in available hosts", $r27) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : exitmonitor r3
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r26.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("No any host [{}] found in available hosts", $r27) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : exitmonitor r3 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= return]
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : exitmonitor r3 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= return] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : return
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r20 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z6 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r20 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z6 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z6 == 0
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z6 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z6 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r21 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z6 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= exitmonitor r3]
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z6 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= exitmonitor r3] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : exitmonitor r3
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= exitmonitor r3] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r21 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r22 = (org.apache.ambari.server.state.host.HostImpl) $r21
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r21 = interfaceinvoke r20.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r22 = (org.apache.ambari.server.state.host.HostImpl) $r21 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r23 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.List availableHosts>
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r22 = (org.apache.ambari.server.state.host.HostImpl) $r21 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r23 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.List availableHosts> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r23.<java.util.List: boolean remove(java.lang.Object)>(r22)
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r23 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.List availableHosts> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r23.<java.util.List: boolean remove(java.lang.Object)>(r22) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG>
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r23.<java.util.List: boolean remove(java.lang.Object)>(r22) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r25 = virtualinvoke r22.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r25 = virtualinvoke r22.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r24.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Removed host: [{}] from available hosts", $r25)
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r25 = virtualinvoke r22.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r24.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Removed host: [{}] from available hosts", $r25) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= $z6 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r24.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Removed host: [{}] from available hosts", $r25) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= $z6 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z6 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= $z6 = interfaceinvoke r20.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r16 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r5 = (org.apache.ambari.server.state.host.HostImpl) $r16
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r16 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r5 = (org.apache.ambari.server.state.host.HostImpl) $r16 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r17 = virtualinvoke r1.<org.apache.ambari.server.events.HostsRemovedEvent: java.util.Set getHostNames()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r5 = (org.apache.ambari.server.state.host.HostImpl) $r16 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r17 = virtualinvoke r1.<org.apache.ambari.server.events.HostsRemovedEvent: java.util.Set getHostNames()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r6 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r17 = virtualinvoke r1.<org.apache.ambari.server.events.HostsRemovedEvent: java.util.Set getHostNames()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r6 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r6 = interfaceinvoke $r17.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z2 == 0
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z2 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r18 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z2 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z2 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r18 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r7 = (java.lang.String) $r18
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r18 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r7 = (java.lang.String) $r18 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r19 = virtualinvoke r5.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r7 = (java.lang.String) $r18 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r19 = virtualinvoke r5.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z3 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>($r19)
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r19 = virtualinvoke r5.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z3 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>($r19) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z3 == 0
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z3 = virtualinvoke r7.<java.lang.String: boolean equals(java.lang.Object)>($r19) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z3 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r5)
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z3 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z3 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= $z2 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r5) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= (branch)]
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r5) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r28 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r10 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r10.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Missing host name from host removed event [{}] !", r1)
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r10.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Missing host name from host removed event [{}] !", r1) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : return
