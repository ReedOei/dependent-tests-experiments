org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r9 = newarray (com.google.inject.Module)[1] >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r2 = new org.apache.ambari.server.upgrade.UpgradeTest$1
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r2 = new org.apache.ambari.server.upgrade.UpgradeTest$1 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r10 = r0.<org.apache.ambari.server.upgrade.UpgradeTest: java.util.Properties properties>
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r10 = r0.<org.apache.ambari.server.upgrade.UpgradeTest: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : specialinvoke $r2.<org.apache.ambari.server.upgrade.UpgradeTest$1: void <init>(org.apache.ambari.server.upgrade.UpgradeTest,java.util.Properties)>(r0, $r10)
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : specialinvoke $r2.<org.apache.ambari.server.upgrade.UpgradeTest$1: void <init>(org.apache.ambari.server.upgrade.UpgradeTest,java.util.Properties)>(r0, $r10) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r9[0] = $r2
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r9[0] = $r2 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : r3 = staticinvoke <com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Module[])>($r9)
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : r3 = staticinvoke <com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Module[])>($r9) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r11 = interfaceinvoke r3.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "org/apache/ambari/server/upgrade/SchemaUpgradeHelper")
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r11 = interfaceinvoke r3.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "org/apache/ambari/server/upgrade/SchemaUpgradeHelper") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : r4 = (org.apache.ambari.server.upgrade.SchemaUpgradeHelper) $r11
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : r4 = (org.apache.ambari.server.upgrade.SchemaUpgradeHelper) $r11 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r12 = <org.apache.ambari.server.upgrade.UpgradeTest: org.slf4j.Logger LOG>
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r12 = <org.apache.ambari.server.upgrade.UpgradeTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r13 = new java.lang.StringBuilder
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r13 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : specialinvoke $r13.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Upgrading schema to target version = ")
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Upgrading schema to target version = ") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String)>($r16)
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String)>($r16) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : r5 = staticinvoke <org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: org.apache.ambari.server.upgrade.UpgradeCatalog getUpgradeCatalog(java.lang.String)>(r1)
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : r5 = staticinvoke <org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: org.apache.ambari.server.upgrade.UpgradeCatalog getUpgradeCatalog(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r17 = <org.apache.ambari.server.upgrade.UpgradeTest: org.slf4j.Logger LOG>
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r17 = <org.apache.ambari.server.upgrade.UpgradeTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r18 = new java.lang.StringBuilder
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r18 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : specialinvoke $r18.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : specialinvoke $r18.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Target upgrade catalog. ")
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Target upgrade catalog. ") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5)
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : interfaceinvoke $r17.<org.slf4j.Logger: void debug(java.lang.String)>($r21)
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : interfaceinvoke $r17.<org.slf4j.Logger: void debug(java.lang.String)>($r21) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : r6 = virtualinvoke r4.<org.apache.ambari.server.upgrade.SchemaUpgradeHelper: java.lang.String readSourceVersion()>()
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : r6 = virtualinvoke r4.<org.apache.ambari.server.upgrade.SchemaUpgradeHelper: java.lang.String readSourceVersion()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r22 = <org.apache.ambari.server.upgrade.UpgradeTest: org.slf4j.Logger LOG>
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r22 = <org.apache.ambari.server.upgrade.UpgradeTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r23 = new java.lang.StringBuilder
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r23 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Upgrading schema from source version = ")
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Upgrading schema from source version = ") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6)
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : interfaceinvoke $r22.<org.slf4j.Logger: void info(java.lang.String)>($r26)
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : interfaceinvoke $r22.<org.slf4j.Logger: void info(java.lang.String)>($r26) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : r7 = virtualinvoke r4.<org.apache.ambari.server.upgrade.SchemaUpgradeHelper: java.util.List getUpgradePath(java.lang.String,java.lang.String)>(r6, r1)
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : r7 = virtualinvoke r4.<org.apache.ambari.server.upgrade.SchemaUpgradeHelper: java.util.List getUpgradePath(java.lang.String,java.lang.String)>(r6, r1) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r27 = "Final Upgrade Catalog should be run last"
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r27 = "Final Upgrade Catalog should be run last" >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $z0 = interfaceinvoke r7.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $z0 = interfaceinvoke r7.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : if $z0 != 0
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : if $z0 != 0 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $i0 = interfaceinvoke r7.<java.util.List: int size()>()
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : if $z0 != 0 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $z2 = 0
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $z2 = 0 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r27, $z2)
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r27, $z2) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : virtualinvoke r4.<org.apache.ambari.server.upgrade.SchemaUpgradeHelper: void executeUpgrade(java.util.List)>(r7)
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r27, $z2) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r30 := @caughtexception
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : r8 = $r30 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r31 = virtualinvoke r8.<java.lang.Exception: java.lang.String getMessage()>()
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r31 = virtualinvoke r8.<java.lang.Exception: java.lang.String getMessage()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $z3 = virtualinvoke $r31.<java.lang.String: boolean contains(java.lang.CharSequence)>("Column \'T.HOST_NAME\' is either not in any table in the FROM list")
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $z3 = virtualinvoke $r31.<java.lang.String: boolean contains(java.lang.CharSequence)>("Column \'T.HOST_NAME\' is either not in any table in the FROM list") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : if $z3 != 0
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : if $z3 != 0 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r32 = virtualinvoke r8.<java.lang.Exception: java.lang.String getMessage()>()
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : if $z3 != 0 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r33 = <java.lang.System: java.io.PrintStream out>
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r33 = <java.lang.System: java.io.PrintStream out> >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r34 = new java.lang.StringBuilder
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r34 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : specialinvoke $r34.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : specialinvoke $r34.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring on purpose, ")
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring on purpose, ") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r36 = virtualinvoke r8.<java.lang.Exception: java.lang.String getMessage()>()
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r36 = virtualinvoke r8.<java.lang.Exception: java.lang.String getMessage()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36)
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : virtualinvoke $r33.<java.io.PrintStream: void println(java.lang.String)>($r38)
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : virtualinvoke $r33.<java.io.PrintStream: void println(java.lang.String)>($r38) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : goto [?= virtualinvoke r4.<org.apache.ambari.server.upgrade.SchemaUpgradeHelper: void startPersistenceService()>()]
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : goto [?= virtualinvoke r4.<org.apache.ambari.server.upgrade.SchemaUpgradeHelper: void startPersistenceService()>()] >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : virtualinvoke r4.<org.apache.ambari.server.upgrade.SchemaUpgradeHelper: void startPersistenceService()>()
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : virtualinvoke r4.<org.apache.ambari.server.upgrade.SchemaUpgradeHelper: void startPersistenceService()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : virtualinvoke r4.<org.apache.ambari.server.upgrade.SchemaUpgradeHelper: void executePreDMLUpdates(java.util.List)>(r7)
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : virtualinvoke r4.<org.apache.ambari.server.upgrade.SchemaUpgradeHelper: void executePreDMLUpdates(java.util.List)>(r7) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : virtualinvoke r4.<org.apache.ambari.server.upgrade.SchemaUpgradeHelper: void executeDMLUpdates(java.util.List,java.lang.String)>(r7, "test")
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : virtualinvoke r4.<org.apache.ambari.server.upgrade.SchemaUpgradeHelper: void executeDMLUpdates(java.util.List,java.lang.String)>(r7, "test") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : virtualinvoke r4.<org.apache.ambari.server.upgrade.SchemaUpgradeHelper: void executeOnPostUpgrade(java.util.List)>(r7)
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : virtualinvoke r4.<org.apache.ambari.server.upgrade.SchemaUpgradeHelper: void executeOnPostUpgrade(java.util.List)>(r7) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r39 = <org.apache.ambari.server.upgrade.UpgradeTest: org.slf4j.Logger LOG>
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r39 = <org.apache.ambari.server.upgrade.UpgradeTest: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : interfaceinvoke $r39.<org.slf4j.Logger: void info(java.lang.String)>("Upgrade successful.")
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : interfaceinvoke $r39.<org.slf4j.Logger: void info(java.lang.String)>("Upgrade successful.") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : virtualinvoke r4.<org.apache.ambari.server.upgrade.SchemaUpgradeHelper: void stopPersistenceService()>()
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : virtualinvoke r4.<org.apache.ambari.server.upgrade.SchemaUpgradeHelper: void stopPersistenceService()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : return
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r32 = virtualinvoke r8.<java.lang.Exception: java.lang.String getMessage()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $z4 = virtualinvoke $r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("Column \'T.HOSTNAME\' is either not in any table in the FROM list")
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $z4 = virtualinvoke $r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("Column \'T.HOSTNAME\' is either not in any table in the FROM list") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : if $z4 == 0
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : if $z4 == 0 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r33 = <java.lang.System: java.io.PrintStream out>
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : if $z4 == 0 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : throw r8
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : virtualinvoke r4.<org.apache.ambari.server.upgrade.SchemaUpgradeHelper: void executeUpgrade(java.util.List)>(r7) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : goto [?= virtualinvoke r4.<org.apache.ambari.server.upgrade.SchemaUpgradeHelper: void startPersistenceService()>()]
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : virtualinvoke r4.<org.apache.ambari.server.upgrade.SchemaUpgradeHelper: void executeUpgrade(java.util.List)>(r7) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r30 := @caughtexception
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : goto [?= virtualinvoke r4.<org.apache.ambari.server.upgrade.SchemaUpgradeHelper: void startPersistenceService()>()] >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : virtualinvoke r4.<org.apache.ambari.server.upgrade.SchemaUpgradeHelper: void startPersistenceService()>()
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $i0 = interfaceinvoke r7.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $i1 = $i0 - 1
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $i1 = $i0 - 1 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r28 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>($i1)
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r28 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>($i1) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r29 = (org.apache.ambari.server.upgrade.UpgradeCatalog) $r28
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $r29 = (org.apache.ambari.server.upgrade.UpgradeCatalog) $r28 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $z1 = interfaceinvoke $r29.<org.apache.ambari.server.upgrade.UpgradeCatalog: boolean isFinal()>()
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $z1 = interfaceinvoke $r29.<org.apache.ambari.server.upgrade.UpgradeCatalog: boolean isFinal()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : if $z1 == 0
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : if $z1 == 0 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $z2 = 1
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : if $z1 == 0 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $z2 = 0
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : $z2 = 1 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : goto [?= staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r27, $z2)]
org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : goto [?= staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r27, $z2)] >>>>>>>> org.apache.ambari.server.upgrade.UpgradeTest.performUpgrade : staticinvoke <org.junit.Assert: void assertTrue(java.lang.String,boolean)>($r27, $z2)
