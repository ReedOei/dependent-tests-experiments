org.apache.ambari.server.serveraction.MockServerAction.execute : r2 = virtualinvoke r0.<org.apache.ambari.server.serveraction.MockServerAction: java.util.Map getCommandParameters()>() >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r5 = r0.<org.apache.ambari.server.serveraction.MockServerAction: org.apache.ambari.server.state.Clusters clusters>
org.apache.ambari.server.serveraction.MockServerAction.execute : $r5 = r0.<org.apache.ambari.server.serveraction.MockServerAction: org.apache.ambari.server.state.Clusters clusters> >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : if $r5 != null
org.apache.ambari.server.serveraction.MockServerAction.execute : if $r5 != null >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r6 = new org.apache.ambari.server.AmbariException
org.apache.ambari.server.serveraction.MockServerAction.execute : if $r5 != null >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : if r2 != null
org.apache.ambari.server.serveraction.MockServerAction.execute : if r2 != null >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r7 = new org.apache.ambari.server.AmbariException
org.apache.ambari.server.serveraction.MockServerAction.execute : if r2 != null >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r8 = "exception"
org.apache.ambari.server.serveraction.MockServerAction.execute : $r8 = "exception" >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r9 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("force_fail")
org.apache.ambari.server.serveraction.MockServerAction.execute : $r9 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("force_fail") >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r10 = (java.lang.String) $r9
org.apache.ambari.server.serveraction.MockServerAction.execute : $r10 = (java.lang.String) $r9 >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $z0 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r10)
org.apache.ambari.server.serveraction.MockServerAction.execute : $z0 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r10) >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : if $z0 == 0
org.apache.ambari.server.serveraction.MockServerAction.execute : if $z0 == 0 >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r11 = new org.apache.ambari.server.AmbariException
org.apache.ambari.server.serveraction.MockServerAction.execute : if $z0 == 0 >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r12 = "report"
org.apache.ambari.server.serveraction.MockServerAction.execute : $r12 = "report" >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r13 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("force_fail")
org.apache.ambari.server.serveraction.MockServerAction.execute : $r13 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("force_fail") >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r14 = (java.lang.String) $r13
org.apache.ambari.server.serveraction.MockServerAction.execute : $r14 = (java.lang.String) $r13 >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $z1 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r14)
org.apache.ambari.server.serveraction.MockServerAction.execute : $z1 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r14) >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : if $z1 == 0
org.apache.ambari.server.serveraction.MockServerAction.execute : if $z1 == 0 >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r15 = <org.apache.ambari.server.actionmanager.HostRoleStatus: org.apache.ambari.server.actionmanager.HostRoleStatus FAILED>
org.apache.ambari.server.serveraction.MockServerAction.execute : if $z1 == 0 >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r17 = "timeout"
org.apache.ambari.server.serveraction.MockServerAction.execute : $r17 = "timeout" >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r18 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("force_fail")
org.apache.ambari.server.serveraction.MockServerAction.execute : $r18 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("force_fail") >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r19 = (java.lang.String) $r18
org.apache.ambari.server.serveraction.MockServerAction.execute : $r19 = (java.lang.String) $r18 >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $z2 = virtualinvoke $r17.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r19)
org.apache.ambari.server.serveraction.MockServerAction.execute : $z2 = virtualinvoke $r17.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r19) >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : if $z2 == 0
org.apache.ambari.server.serveraction.MockServerAction.execute : if $z2 == 0 >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $z3 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>("command_timeout")
org.apache.ambari.server.serveraction.MockServerAction.execute : if $z2 == 0 >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : if r1 == null
org.apache.ambari.server.serveraction.MockServerAction.execute : if $z2 == 0 >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r23 := @caughtexception
org.apache.ambari.server.serveraction.MockServerAction.execute : r4 = $r23 >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : r3 = null
org.apache.ambari.server.serveraction.MockServerAction.execute : r3 = null >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : if r3 == null
org.apache.ambari.server.serveraction.MockServerAction.execute : if r3 == null >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $l2 = virtualinvoke r3.<java.lang.Long: long longValue()>()
org.apache.ambari.server.serveraction.MockServerAction.execute : if r3 == null >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : if r1 == null
org.apache.ambari.server.serveraction.MockServerAction.execute : if r1 == null >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r24 = interfaceinvoke r1.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>("Data")
org.apache.ambari.server.serveraction.MockServerAction.execute : if r1 == null >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r29 = <org.apache.ambari.server.actionmanager.HostRoleStatus: org.apache.ambari.server.actionmanager.HostRoleStatus COMPLETED>
org.apache.ambari.server.serveraction.MockServerAction.execute : $r29 = <org.apache.ambari.server.actionmanager.HostRoleStatus: org.apache.ambari.server.actionmanager.HostRoleStatus COMPLETED> >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r30 = virtualinvoke r0.<org.apache.ambari.server.serveraction.MockServerAction: org.apache.ambari.server.agent.CommandReport createCommandReport(int,org.apache.ambari.server.actionmanager.HostRoleStatus,java.lang.String,java.lang.String,java.lang.String)>(0, $r29, null, "Success!", null)
org.apache.ambari.server.serveraction.MockServerAction.execute : $r30 = virtualinvoke r0.<org.apache.ambari.server.serveraction.MockServerAction: org.apache.ambari.server.agent.CommandReport createCommandReport(int,org.apache.ambari.server.actionmanager.HostRoleStatus,java.lang.String,java.lang.String,java.lang.String)>(0, $r29, null, "Success!", null) >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : return $r30
org.apache.ambari.server.serveraction.MockServerAction.execute : $r24 = interfaceinvoke r1.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>("Data") >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : r25 = (java.lang.Integer) $r24
org.apache.ambari.server.serveraction.MockServerAction.execute : r25 = (java.lang.Integer) $r24 >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : if r25 != null
org.apache.ambari.server.serveraction.MockServerAction.execute : if r25 != null >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)
org.apache.ambari.server.serveraction.MockServerAction.execute : if r25 != null >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $i4 = virtualinvoke r25.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.serveraction.MockServerAction.execute : $i4 = virtualinvoke r25.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $i5 = $i4 + 1
org.apache.ambari.server.serveraction.MockServerAction.execute : $i5 = $i4 + 1 >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5)
org.apache.ambari.server.serveraction.MockServerAction.execute : $r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5) >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : r27 = $r26
org.apache.ambari.server.serveraction.MockServerAction.execute : r27 = $r26 >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : interfaceinvoke r1.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Data", $r26)
org.apache.ambari.server.serveraction.MockServerAction.execute : interfaceinvoke r1.<java.util.concurrent.ConcurrentMap: java.lang.Object put(java.lang.Object,java.lang.Object)>("Data", $r26) >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r29 = <org.apache.ambari.server.actionmanager.HostRoleStatus: org.apache.ambari.server.actionmanager.HostRoleStatus COMPLETED>
org.apache.ambari.server.serveraction.MockServerAction.execute : r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $i4 = virtualinvoke r25.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.serveraction.MockServerAction.execute : $l2 = virtualinvoke r3.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $l3 = $l2 * 10L
org.apache.ambari.server.serveraction.MockServerAction.execute : $l3 = $l2 * 10L >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : staticinvoke <java.lang.Thread: void sleep(long)>($l3)
org.apache.ambari.server.serveraction.MockServerAction.execute : staticinvoke <java.lang.Thread: void sleep(long)>($l3) >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : if r1 == null
org.apache.ambari.server.serveraction.MockServerAction.execute : $z3 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>("command_timeout") >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : if $z3 == 0
org.apache.ambari.server.serveraction.MockServerAction.execute : $z3 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>("command_timeout") >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r23 := @caughtexception
org.apache.ambari.server.serveraction.MockServerAction.execute : if $z3 == 0 >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r20 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("command_timeout")
org.apache.ambari.server.serveraction.MockServerAction.execute : if $z3 == 0 >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r22 = null
org.apache.ambari.server.serveraction.MockServerAction.execute : if $z3 == 0 >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r23 := @caughtexception
org.apache.ambari.server.serveraction.MockServerAction.execute : $r22 = null >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : r3 = $r22
org.apache.ambari.server.serveraction.MockServerAction.execute : $r22 = null >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r23 := @caughtexception
org.apache.ambari.server.serveraction.MockServerAction.execute : r3 = $r22 >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : goto [?= (branch)]
org.apache.ambari.server.serveraction.MockServerAction.execute : r3 = $r22 >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r23 := @caughtexception
org.apache.ambari.server.serveraction.MockServerAction.execute : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : if r3 == null
org.apache.ambari.server.serveraction.MockServerAction.execute : $r20 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("command_timeout") >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r21 = (java.lang.String) $r20
org.apache.ambari.server.serveraction.MockServerAction.execute : $r20 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("command_timeout") >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r23 := @caughtexception
org.apache.ambari.server.serveraction.MockServerAction.execute : $r21 = (java.lang.String) $r20 >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r21)
org.apache.ambari.server.serveraction.MockServerAction.execute : $r21 = (java.lang.String) $r20 >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r23 := @caughtexception
org.apache.ambari.server.serveraction.MockServerAction.execute : $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r21) >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $l1 = $l0 * 1000L
org.apache.ambari.server.serveraction.MockServerAction.execute : $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r21) >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r23 := @caughtexception
org.apache.ambari.server.serveraction.MockServerAction.execute : $l1 = $l0 * 1000L >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1)
org.apache.ambari.server.serveraction.MockServerAction.execute : $l1 = $l0 * 1000L >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r23 := @caughtexception
org.apache.ambari.server.serveraction.MockServerAction.execute : $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : goto [?= r3 = $r22]
org.apache.ambari.server.serveraction.MockServerAction.execute : $r22 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r23 := @caughtexception
org.apache.ambari.server.serveraction.MockServerAction.execute : goto [?= r3 = $r22] >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : r3 = $r22
org.apache.ambari.server.serveraction.MockServerAction.execute : goto [?= r3 = $r22] >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r23 := @caughtexception
org.apache.ambari.server.serveraction.MockServerAction.execute : $r15 = <org.apache.ambari.server.actionmanager.HostRoleStatus: org.apache.ambari.server.actionmanager.HostRoleStatus FAILED> >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : $r16 = virtualinvoke r0.<org.apache.ambari.server.serveraction.MockServerAction: org.apache.ambari.server.agent.CommandReport createCommandReport(int,org.apache.ambari.server.actionmanager.HostRoleStatus,java.lang.String,java.lang.String,java.lang.String)>(1, $r15, null, "Forced fail via command", "Failing execution by request")
org.apache.ambari.server.serveraction.MockServerAction.execute : $r16 = virtualinvoke r0.<org.apache.ambari.server.serveraction.MockServerAction: org.apache.ambari.server.agent.CommandReport createCommandReport(int,org.apache.ambari.server.actionmanager.HostRoleStatus,java.lang.String,java.lang.String,java.lang.String)>(1, $r15, null, "Forced fail via command", "Failing execution by request") >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : return $r16
org.apache.ambari.server.serveraction.MockServerAction.execute : $r11 = new org.apache.ambari.server.AmbariException >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : specialinvoke $r11.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>("Failing execution by request")
org.apache.ambari.server.serveraction.MockServerAction.execute : specialinvoke $r11.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>("Failing execution by request") >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : throw $r11
org.apache.ambari.server.serveraction.MockServerAction.execute : $r7 = new org.apache.ambari.server.AmbariException >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : specialinvoke $r7.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>("Missing payload")
org.apache.ambari.server.serveraction.MockServerAction.execute : specialinvoke $r7.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>("Missing payload") >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : throw $r7
org.apache.ambari.server.serveraction.MockServerAction.execute : $r6 = new org.apache.ambari.server.AmbariException >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : specialinvoke $r6.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>("Missing payload")
org.apache.ambari.server.serveraction.MockServerAction.execute : specialinvoke $r6.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>("Missing payload") >>>>>>>> org.apache.ambari.server.serveraction.MockServerAction.execute : throw $r6
