org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r1 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r9 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>()
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r9 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r9)
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : specialinvoke $r1.<java.io.ByteArrayInputStream: void <init>(byte[])>($r9) >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : r2 = $r1
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : r2 = $r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r10 = newarray (java.lang.Class)[1]
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r10 = newarray (java.lang.Class)[1] >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r10[0] = class "org/apache/ambari/server/state/stack/ServiceMetainfoXml"
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r10[0] = class "org/apache/ambari/server/state/stack/ServiceMetainfoXml" >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : r3 = staticinvoke <javax.xml.bind.JAXBContext: javax.xml.bind.JAXBContext newInstance(java.lang.Class[])>($r10)
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : r3 = staticinvoke <javax.xml.bind.JAXBContext: javax.xml.bind.JAXBContext newInstance(java.lang.Class[])>($r10) >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : r4 = virtualinvoke r3.<javax.xml.bind.JAXBContext: javax.xml.bind.Unmarshaller createUnmarshaller()>()
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : r4 = virtualinvoke r3.<javax.xml.bind.JAXBContext: javax.xml.bind.Unmarshaller createUnmarshaller()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r11 = interfaceinvoke r4.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.InputStream)>(r2)
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r11 = interfaceinvoke r4.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.InputStream)>(r2) >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : r5 = (org.apache.ambari.server.state.stack.ServiceMetainfoXml) $r11
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : r5 = (org.apache.ambari.server.state.stack.ServiceMetainfoXml) $r11 >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r12 = new java.util.HashMap
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r12 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : specialinvoke $r12.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : specialinvoke $r12.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : r6 = $r12
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : r6 = $r12 >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r13 = virtualinvoke r5.<org.apache.ambari.server.state.stack.ServiceMetainfoXml: java.util.List getServices()>()
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r13 = virtualinvoke r5.<org.apache.ambari.server.state.stack.ServiceMetainfoXml: java.util.List getServices()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : r7 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : r7 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : if $z0 == 0
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r14 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : return r6
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r14 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : r8 = (org.apache.ambari.server.state.ServiceInfo) $r14
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : r8 = (org.apache.ambari.server.state.ServiceInfo) $r14 >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r15 = virtualinvoke r8.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getName()>()
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r15 = virtualinvoke r8.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, r8)
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, r8) >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : goto [?= $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : goto [?= $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
