org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r3 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: java.util.Map jaxbContexts> >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r13 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r13 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r14 = (javax.xml.bind.JAXBContext) $r13
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r14 = (javax.xml.bind.JAXBContext) $r13 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r4 = virtualinvoke $r14.<javax.xml.bind.JAXBContext: javax.xml.bind.Unmarshaller createUnmarshaller()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r4 = virtualinvoke $r14.<javax.xml.bind.JAXBContext: javax.xml.bind.Unmarshaller createUnmarshaller()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r5 = staticinvoke <javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLInputFactory newInstance()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r5 = staticinvoke <javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLInputFactory newInstance()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r15 = new java.io.FileReader
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r15 = new java.io.FileReader >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : specialinvoke $r15.<java.io.FileReader: void <init>(java.io.File)>(r2)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : specialinvoke $r15.<java.io.FileReader: void <init>(java.io.File)>(r2) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r6 = $r15
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r6 = $r15 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r7 = virtualinvoke r5.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.Reader)>(r6)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r7 = virtualinvoke r5.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.Reader)>(r6) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke r7.<javax.xml.stream.XMLStreamReader: int nextTag()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke r7.<javax.xml.stream.XMLStreamReader: int nextTag()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r8 = interfaceinvoke r7.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>("http://www.w3.org/2001/XMLSchema-instance", "noNamespaceSchemaLocation")
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r8 = interfaceinvoke r7.<javax.xml.stream.XMLStreamReader: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>("http://www.w3.org/2001/XMLSchema-instance", "noNamespaceSchemaLocation") >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r9 = null
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r9 = null >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if null == r8
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if null == r8 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if z0 == 0
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if null == r8 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if z0 == 0
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r41 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r48 = interfaceinvoke r4.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r50 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r57 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r12 = $r57 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r9)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r12 = $r57 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r57 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r9) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : throw r12
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r51 = $r50 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r52 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Throwable getRootCause(java.lang.Throwable)>(r51)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r51 = $r50 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r57 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r52 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Throwable getRootCause(java.lang.Throwable)>(r51) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r53 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r52 = staticinvoke <org.apache.commons.lang.exception.ExceptionUtils: java.lang.Throwable getRootCause(java.lang.Throwable)>(r51) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r57 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r53 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r54 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r53 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r57 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r54 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r53.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("Cannot parse {}", $r54)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r54 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r57 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r53.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("Cannot parse {}", $r54) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if null == r52
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r53.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("Cannot parse {}", $r54) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r57 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if null == r52 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r55 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if null == r52 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : throw r51
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if null == r52 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r57 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : throw r51 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r57 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r55 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r56 = virtualinvoke r52.<java.lang.Throwable: java.lang.String getMessage()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r55 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r57 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r56 = virtualinvoke r52.<java.lang.Throwable: java.lang.String getMessage()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r55.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r56, r52)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r56 = virtualinvoke r52.<java.lang.Throwable: java.lang.String getMessage()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r57 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r55.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r56, r52) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : throw r51
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r55.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>($r56, r52) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r57 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r48 = interfaceinvoke r4.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r50 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r48 = interfaceinvoke r4.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r57 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r48 = interfaceinvoke r4.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r49 = virtualinvoke r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r48)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r49 = virtualinvoke r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r48) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r50 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r49 = virtualinvoke r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r48) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r57 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r49 = virtualinvoke r1.<java.lang.Class: java.lang.Object cast(java.lang.Object)>($r48) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r9)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r9) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : return r49
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r41 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r42 = new java.lang.StringBuilder
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r42 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : specialinvoke $r42.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : specialinvoke $r42.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NOT processing ")
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NOT processing ") >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r44 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r44 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r45 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r44) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; there is no XSD")
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("; there is no XSD") >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r41.<org.slf4j.Logger: void info(java.lang.String)>($r47)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r41.<org.slf4j.Logger: void info(java.lang.String)>($r47) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r50 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r41.<org.slf4j.Logger: void info(java.lang.String)>($r47) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r57 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r41.<org.slf4j.Logger: void info(java.lang.String)>($r47) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r48 = interfaceinvoke r4.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r16 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r24 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: java.util.Map jaxbSchemas>
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r24 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: java.util.Map jaxbSchemas> >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $z1 = interfaceinvoke $r24.<java.util.Map: boolean containsKey(java.lang.Object)>(r8)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $z1 = interfaceinvoke $r24.<java.util.Map: boolean containsKey(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if $z1 == 0
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if $z1 == 0 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r25 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: java.util.Map jaxbSchemas>
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if $z1 == 0 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r28 = virtualinvoke r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r28 = virtualinvoke r1.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r9 = virtualinvoke $r28.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r8)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r9 = virtualinvoke $r28.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>(r8) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if null == r9
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if null == r9 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r10 = staticinvoke <javax.xml.validation.SchemaFactory: javax.xml.validation.SchemaFactory newInstance(java.lang.String)>("http://www.w3.org/2001/XMLSchema")
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if null == r9 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if z0 == 0
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r32 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r48 = interfaceinvoke r4.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r50 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : if z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r57 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r32 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r33 = new java.lang.StringBuilder
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r33 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : specialinvoke $r33.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : specialinvoke $r33.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Schema \'")
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Schema \'") >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for ")
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for ") >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r37 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r37 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was not found, ignoring")
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was not found, ignoring") >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r32.<org.slf4j.Logger: void info(java.lang.String)>($r40)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r32.<org.slf4j.Logger: void info(java.lang.String)>($r40) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : goto [?= $r48 = interfaceinvoke r4.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)]
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : goto [?= $r48 = interfaceinvoke r4.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)] >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r50 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : goto [?= $r48 = interfaceinvoke r4.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)] >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r57 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : goto [?= $r48 = interfaceinvoke r4.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)] >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r48 = interfaceinvoke r4.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r10 = staticinvoke <javax.xml.validation.SchemaFactory: javax.xml.validation.SchemaFactory newInstance(java.lang.String)>("http://www.w3.org/2001/XMLSchema") >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r29 = new javax.xml.transform.stream.StreamSource
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r29 = new javax.xml.transform.stream.StreamSource >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : specialinvoke $r29.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>(r9)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : specialinvoke $r29.<javax.xml.transform.stream.StreamSource: void <init>(java.io.InputStream)>(r9) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r11 = virtualinvoke r10.<javax.xml.validation.SchemaFactory: javax.xml.validation.Schema newSchema(javax.xml.transform.Source)>($r29)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : r11 = virtualinvoke r10.<javax.xml.validation.SchemaFactory: javax.xml.validation.Schema newSchema(javax.xml.transform.Source)>($r29) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke r4.<javax.xml.bind.Unmarshaller: void setSchema(javax.xml.validation.Schema)>(r11)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke r4.<javax.xml.bind.Unmarshaller: void setSchema(javax.xml.validation.Schema)>(r11) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r30 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: java.util.Map jaxbSchemas>
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r30 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: java.util.Map jaxbSchemas> >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r11)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r11) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : goto [?= $r48 = interfaceinvoke r4.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)]
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : goto [?= $r48 = interfaceinvoke r4.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)] >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r50 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : goto [?= $r48 = interfaceinvoke r4.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)] >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r57 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : goto [?= $r48 = interfaceinvoke r4.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)] >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r48 = interfaceinvoke r4.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r25 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: java.util.Map jaxbSchemas> >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r26 = interfaceinvoke $r25.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r26 = interfaceinvoke $r25.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r27 = (javax.xml.validation.Schema) $r26
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r27 = (javax.xml.validation.Schema) $r26 >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke r4.<javax.xml.bind.Unmarshaller: void setSchema(javax.xml.validation.Schema)>($r27)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke r4.<javax.xml.bind.Unmarshaller: void setSchema(javax.xml.validation.Schema)>($r27) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : goto [?= $r48 = interfaceinvoke r4.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)]
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : goto [?= $r48 = interfaceinvoke r4.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)] >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r50 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : goto [?= $r48 = interfaceinvoke r4.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)] >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r57 := @caughtexception
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : goto [?= $r48 = interfaceinvoke r4.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)] >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r48 = interfaceinvoke r4.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.File)>(r2)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r16 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r17 = new java.lang.StringBuilder
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r17 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processing ")
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Processing ") >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r19 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r19 = virtualinvoke r2.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with ")
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" with ") >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r16.<org.slf4j.Logger: void info(java.lang.String)>($r23)
org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : interfaceinvoke $r16.<org.slf4j.Logger: void info(java.lang.String)>($r23) >>>>>>>> org.apache.ambari.server.stack.ModuleFileUnmarshaller.unmarshal : $r24 = <org.apache.ambari.server.stack.ModuleFileUnmarshaller: java.util.Map jaxbSchemas>
