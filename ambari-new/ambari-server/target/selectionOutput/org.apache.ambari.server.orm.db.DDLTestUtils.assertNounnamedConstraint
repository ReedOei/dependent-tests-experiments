org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>("qrtz") >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : if $z0 == 0
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : if $z0 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $r4 = <org.apache.ambari.server.orm.db.DDLTestUtils: org.slf4j.Logger LOG>
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : if $z0 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $r5 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.List CheckedUnnamedConstraints>
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $r5 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.List CheckedUnnamedConstraints> >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : if $z1 == 0
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : if $z1 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : if $z1 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $r11 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.List UncheckedUnnamedConstraints>
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $r11 = <org.apache.ambari.server.orm.db.DDLTestUtils: java.util.List UncheckedUnnamedConstraints> >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : r12 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $z3 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $z3 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : if $z3 == 0
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : if $z3 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $r13 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : if $z3 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : return
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $r13 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : r14 = (java.util.regex.Pattern) $r13
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : r14 = (java.util.regex.Pattern) $r13 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $r15 = virtualinvoke r14.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1)
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $r15 = virtualinvoke r14.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $z4 = virtualinvoke $r15.<java.util.regex.Matcher: boolean matches()>()
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $z4 = virtualinvoke $r15.<java.util.regex.Matcher: boolean matches()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : if $z4 == 0
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : if $z4 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $r16 = <org.apache.ambari.server.orm.db.DDLTestUtils: org.slf4j.Logger LOG>
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : if $z4 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : goto [?= $z3 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : goto [?= $z3 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $z3 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $r16 = <org.apache.ambari.server.orm.db.DDLTestUtils: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : interfaceinvoke $r16.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Found unnamed constraint in table {}: {}", r0, r1)
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : interfaceinvoke $r16.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Found unnamed constraint in table {}: {}", r0, r1) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : goto [?= $z3 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : r3 = (java.util.regex.Pattern) $r6
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : r3 = (java.util.regex.Pattern) $r6 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $r7 = virtualinvoke r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1)
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $r7 = virtualinvoke r3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $z2 = virtualinvoke $r7.<java.util.regex.Matcher: boolean matches()>()
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $z2 = virtualinvoke $r7.<java.util.regex.Matcher: boolean matches()>() >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : if $z2 == 0
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : if $z2 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $r8 = new java.lang.IllegalStateException
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : if $z2 == 0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $r8 = new java.lang.IllegalStateException >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $r9 = newarray (java.lang.Object)[2]
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $r9 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $r9[0] = r0
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $r9[0] = r0 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $r9[1] = r1
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $r9[1] = r1 >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Found invalid (unnamed) constraint in table %s: %s", $r9)
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Found invalid (unnamed) constraint in table %s: %s", $r9) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10)
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : throw $r8
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : $r4 = <org.apache.ambari.server.orm.db.DDLTestUtils: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Skipp checking quartz table: {}", r0)
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Skipp checking quartz table: {}", r0) >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : goto [?= return]
org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : goto [?= return] >>>>>>>> org.apache.ambari.server.orm.db.DDLTestUtils.assertNounnamedConstraint : return
