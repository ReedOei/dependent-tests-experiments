org.apache.ambari.server.state.svccomphost.ServiceComponentHostTest.makeConfig : $r7 = r0.<org.apache.ambari.server.state.svccomphost.ServiceComponentHostTest: org.apache.ambari.server.state.ConfigFactory configFactory> >>>>>>>> org.apache.ambari.server.state.svccomphost.ServiceComponentHostTest.makeConfig : r6 = interfaceinvoke $r7.<org.apache.ambari.server.state.ConfigFactory: org.apache.ambari.server.state.Config createNew(org.apache.ambari.server.state.Cluster,java.lang.String,java.lang.String,java.util.Map,java.util.Map)>(r1, r2, r3, r4, r5)
org.apache.ambari.server.state.svccomphost.ServiceComponentHostTest.makeConfig : r6 = interfaceinvoke $r7.<org.apache.ambari.server.state.ConfigFactory: org.apache.ambari.server.state.Config createNew(org.apache.ambari.server.state.Cluster,java.lang.String,java.lang.String,java.util.Map,java.util.Map)>(r1, r2, r3, r4, r5) >>>>>>>> org.apache.ambari.server.state.svccomphost.ServiceComponentHostTest.makeConfig : $r8 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r6)
org.apache.ambari.server.state.svccomphost.ServiceComponentHostTest.makeConfig : $r8 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.state.svccomphost.ServiceComponentHostTest.makeConfig : interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.controller.ServiceConfigVersionResponse addDesiredConfig(java.lang.String,java.util.Set)>("user", $r8)
org.apache.ambari.server.state.svccomphost.ServiceComponentHostTest.makeConfig : interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.controller.ServiceConfigVersionResponse addDesiredConfig(java.lang.String,java.util.Set)>("user", $r8) >>>>>>>> org.apache.ambari.server.state.svccomphost.ServiceComponentHostTest.makeConfig : return
