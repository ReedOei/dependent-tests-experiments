org.apache.ambari.server.state.UpgradeHelper.createSequence : $r26 = r0.<org.apache.ambari.server.state.UpgradeHelper: com.google.inject.Provider m_ambariMetaInfo> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r27 = interfaceinvoke $r26.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r27 = interfaceinvoke $r26.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r28 = (org.apache.ambari.server.api.services.AmbariMetaInfo) $r27
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r28 = (org.apache.ambari.server.api.services.AmbariMetaInfo) $r27 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: void setAmbariMetaInfo(org.apache.ambari.server.api.services.AmbariMetaInfo)>($r28)
org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: void setAmbariMetaInfo(org.apache.ambari.server.api.services.AmbariMetaInfo)>($r28) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r3 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.Cluster getCluster()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : r3 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.Cluster getCluster()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r4 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.stack.MasterHostResolver getResolver()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : r4 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.stack.MasterHostResolver getResolver()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r5 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: java.util.Map getTasks()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : r5 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: java.util.Map getTasks()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r29 = new java.util.ArrayList
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r29 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r29.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r29.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r6 = $r29
org.apache.ambari.server.state.UpgradeHelper.createSequence : r6 = $r29 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r30 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.stack.upgrade.Direction getDirection()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r30 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.stack.upgrade.Direction getDirection()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r31 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: java.util.List getGroups(org.apache.ambari.server.state.stack.upgrade.Direction)>($r30)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r31 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: java.util.List getGroups(org.apache.ambari.server.state.stack.upgrade.Direction)>($r30) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r7 = interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : r7 = interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z0 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r32 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r131 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r131 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z36 = interfaceinvoke $r131.<org.slf4j.Logger: boolean isDebugEnabled()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z36 = interfaceinvoke $r131.<org.slf4j.Logger: boolean isDebugEnabled()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z36 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z36 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r132 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z36 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : return r6
org.apache.ambari.server.state.UpgradeHelper.createSequence : r132 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z37 = interfaceinvoke r132.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z37 = interfaceinvoke r132.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z37 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z37 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r133 = interfaceinvoke r132.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z37 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : return r6
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r133 = interfaceinvoke r132.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r134 = (org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder) $r133
org.apache.ambari.server.state.UpgradeHelper.createSequence : r134 = (org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder) $r133 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r135 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r135 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r136 = r134.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.lang.String name>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r136 = r134.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.lang.String name> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r135.<org.slf4j.Logger: void debug(java.lang.String)>($r136)
org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r135.<org.slf4j.Logger: void debug(java.lang.String)>($r136) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : i2 = 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : i2 = 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r137 = r134.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.util.List items>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r137 = r134.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.util.List items> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r138 = interfaceinvoke $r137.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : r138 = interfaceinvoke $r137.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z38 = interfaceinvoke r138.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z38 = interfaceinvoke r138.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z38 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z38 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r139 = interfaceinvoke r138.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z38 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z37 = interfaceinvoke r132.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z37 = interfaceinvoke r132.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z37 = interfaceinvoke r132.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r139 = interfaceinvoke r138.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r140 = (org.apache.ambari.server.state.stack.upgrade.StageWrapper) $r139
org.apache.ambari.server.state.UpgradeHelper.createSequence : r140 = (org.apache.ambari.server.state.stack.upgrade.StageWrapper) $r139 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r141 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r141 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $i3 = i2
org.apache.ambari.server.state.UpgradeHelper.createSequence : $i3 = i2 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : i2 = i2 + 1
org.apache.ambari.server.state.UpgradeHelper.createSequence : i2 = i2 + 1 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r142 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r142 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r141.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("  Stage {}", $r142)
org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r141.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("  Stage {}", $r142) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : i4 = 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : i4 = 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r143 = virtualinvoke r140.<org.apache.ambari.server.state.stack.upgrade.StageWrapper: java.util.List getTasks()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r143 = virtualinvoke r140.<org.apache.ambari.server.state.stack.upgrade.StageWrapper: java.util.List getTasks()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r144 = interfaceinvoke $r143.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : r144 = interfaceinvoke $r143.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z39 = interfaceinvoke r144.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z39 = interfaceinvoke r144.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z39 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z39 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r145 = interfaceinvoke r144.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z39 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z38 = interfaceinvoke r138.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z38 = interfaceinvoke r138.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z38 = interfaceinvoke r138.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r145 = interfaceinvoke r144.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r146 = (org.apache.ambari.server.state.stack.upgrade.TaskWrapper) $r145
org.apache.ambari.server.state.UpgradeHelper.createSequence : r146 = (org.apache.ambari.server.state.stack.upgrade.TaskWrapper) $r145 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r147 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r147 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $i5 = i4
org.apache.ambari.server.state.UpgradeHelper.createSequence : $i5 = i4 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : i4 = i4 + 1
org.apache.ambari.server.state.UpgradeHelper.createSequence : i4 = i4 + 1 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r148 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r148 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r147.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("    Task {} {}", $r148, r146)
org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r147.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("    Task {} {}", $r148, r146) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z39 = interfaceinvoke r144.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z39 = interfaceinvoke r144.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z39 = interfaceinvoke r144.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r32 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r8 = (org.apache.ambari.server.state.stack.upgrade.Grouping) $r32
org.apache.ambari.server.state.UpgradeHelper.createSequence : r8 = (org.apache.ambari.server.state.stack.upgrade.Grouping) $r32 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r33 = r8.<org.apache.ambari.server.state.stack.upgrade.Grouping: org.apache.ambari.server.state.stack.upgrade.UpgradeScope scope>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r33 = r8.<org.apache.ambari.server.state.stack.upgrade.Grouping: org.apache.ambari.server.state.stack.upgrade.UpgradeScope scope> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z1 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: boolean isScoped(org.apache.ambari.server.state.stack.upgrade.UpgradeScope)>($r33)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z1 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: boolean isScoped(org.apache.ambari.server.state.stack.upgrade.UpgradeScope)>($r33) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z1 != 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z1 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z1 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r34 = r8.<org.apache.ambari.server.state.stack.upgrade.Grouping: org.apache.ambari.server.state.stack.upgrade.Condition condition>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r34 = r8.<org.apache.ambari.server.state.stack.upgrade.Grouping: org.apache.ambari.server.state.stack.upgrade.Condition condition> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if null == $r34
org.apache.ambari.server.state.UpgradeHelper.createSequence : if null == $r34 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r35 = r8.<org.apache.ambari.server.state.stack.upgrade.Grouping: org.apache.ambari.server.state.stack.upgrade.Condition condition>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if null == $r34 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r38 = new org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r38 = new org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r38.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r38.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r9 = $r38
org.apache.ambari.server.state.UpgradeHelper.createSequence : r9 = $r38 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r39 = r8.<org.apache.ambari.server.state.stack.upgrade.Grouping: java.lang.String name>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r39 = r8.<org.apache.ambari.server.state.stack.upgrade.Grouping: java.lang.String name> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r9.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.lang.String name> = $r39
org.apache.ambari.server.state.UpgradeHelper.createSequence : r9.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.lang.String name> = $r39 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r40 = r8.<org.apache.ambari.server.state.stack.upgrade.Grouping: java.lang.String title>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r40 = r8.<org.apache.ambari.server.state.stack.upgrade.Grouping: java.lang.String title> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r9.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.lang.String title> = $r40
org.apache.ambari.server.state.UpgradeHelper.createSequence : r9.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.lang.String title> = $r40 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r41 = virtualinvoke r8.<java.lang.Object: java.lang.Class getClass()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r41 = virtualinvoke r8.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r9.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.lang.Class groupClass> = $r41
org.apache.ambari.server.state.UpgradeHelper.createSequence : r9.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.lang.Class groupClass> = $r41 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z3 = r8.<org.apache.ambari.server.state.stack.upgrade.Grouping: boolean skippable>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z3 = r8.<org.apache.ambari.server.state.stack.upgrade.Grouping: boolean skippable> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r9.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: boolean skippable> = $z3
org.apache.ambari.server.state.UpgradeHelper.createSequence : r9.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: boolean skippable> = $z3 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z4 = r8.<org.apache.ambari.server.state.stack.upgrade.Grouping: boolean supportsAutoSkipOnFailure>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z4 = r8.<org.apache.ambari.server.state.stack.upgrade.Grouping: boolean supportsAutoSkipOnFailure> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r9.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: boolean supportsAutoSkipOnFailure> = $z4
org.apache.ambari.server.state.UpgradeHelper.createSequence : r9.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: boolean supportsAutoSkipOnFailure> = $z4 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z5 = r8.<org.apache.ambari.server.state.stack.upgrade.Grouping: boolean allowRetry>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z5 = r8.<org.apache.ambari.server.state.stack.upgrade.Grouping: boolean allowRetry> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r9.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: boolean allowRetry> = $z5
org.apache.ambari.server.state.UpgradeHelper.createSequence : r9.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: boolean allowRetry> = $z5 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r42 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.stack.upgrade.Direction getDirection()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r42 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.stack.upgrade.Direction getDirection()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z6 = virtualinvoke $r42.<org.apache.ambari.server.state.stack.upgrade.Direction: boolean isDowngrade()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z6 = virtualinvoke $r42.<org.apache.ambari.server.state.stack.upgrade.Direction: boolean isDowngrade()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z6 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z6 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r9.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: boolean skippable> = 1
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z6 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r10 = null
org.apache.ambari.server.state.UpgradeHelper.createSequence : r10 = null >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z7 = r8 instanceof org.apache.ambari.server.state.stack.upgrade.UpgradeFunction
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z7 = r8 instanceof org.apache.ambari.server.state.stack.upgrade.UpgradeFunction >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z7 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z7 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r43 = (org.apache.ambari.server.state.stack.upgrade.UpgradeFunction) r8
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z7 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r44 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: org.apache.ambari.server.state.stack.upgrade.UpgradeType getType()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r44 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: org.apache.ambari.server.state.stack.upgrade.UpgradeType getType()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r45 = <org.apache.ambari.server.state.stack.upgrade.UpgradeType: org.apache.ambari.server.state.stack.upgrade.UpgradeType NON_ROLLING>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r45 = <org.apache.ambari.server.state.stack.upgrade.UpgradeType: org.apache.ambari.server.state.stack.upgrade.UpgradeType NON_ROLLING> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r44 != $r45
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r44 != $r45 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r8.<org.apache.ambari.server.state.stack.upgrade.Grouping: boolean performServiceCheck> = 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r44 != $r45 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r11 = virtualinvoke r8.<org.apache.ambari.server.state.stack.upgrade.Grouping: org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder getBuilder()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : r11 = virtualinvoke r8.<org.apache.ambari.server.state.stack.upgrade.Grouping: org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder getBuilder()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r12 = r8.<org.apache.ambari.server.state.stack.upgrade.Grouping: java.util.List services>
org.apache.ambari.server.state.UpgradeHelper.createSequence : r12 = r8.<org.apache.ambari.server.state.stack.upgrade.Grouping: java.util.List services> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r46 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: org.apache.ambari.server.state.stack.upgrade.UpgradeType getType()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r46 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: org.apache.ambari.server.state.stack.upgrade.UpgradeType getType()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r47 = <org.apache.ambari.server.state.stack.upgrade.UpgradeType: org.apache.ambari.server.state.stack.upgrade.UpgradeType ROLLING>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r47 = <org.apache.ambari.server.state.stack.upgrade.UpgradeType: org.apache.ambari.server.state.stack.upgrade.UpgradeType ROLLING> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r46 != $r47
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r46 != $r47 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r48 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.stack.upgrade.Direction getDirection()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r46 != $r47 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r50 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : r50 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z10 = interfaceinvoke r50.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z10 = interfaceinvoke r50.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z10 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z10 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r51 = interfaceinvoke r50.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z10 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r130 = virtualinvoke r11.<org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder: java.util.List build(org.apache.ambari.server.state.UpgradeContext)>(r2)
org.apache.ambari.server.state.UpgradeHelper.createSequence : r130 = virtualinvoke r11.<org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder: java.util.List build(org.apache.ambari.server.state.UpgradeContext)>(r2) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z34 = staticinvoke <org.apache.commons.collections.CollectionUtils: boolean isNotEmpty(java.util.Collection)>(r130)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z34 = staticinvoke <org.apache.commons.collections.CollectionUtils: boolean isNotEmpty(java.util.Collection)>(r130) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z34 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z34 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r9.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.util.List items> = r130
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z34 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : r9.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.util.List items> = r130 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke r0.<org.apache.ambari.server.state.UpgradeHelper: void postProcess(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder)>(r2, r9)
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke r0.<org.apache.ambari.server.state.UpgradeHelper: void postProcess(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder)>(r2, r9) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r9)
org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke r6.<java.util.List: boolean add(java.lang.Object)>(r9) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r51 = interfaceinvoke r50.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r14 = (org.apache.ambari.server.state.stack.UpgradePack$OrderService) $r51
org.apache.ambari.server.state.UpgradeHelper.createSequence : r14 = (org.apache.ambari.server.state.stack.UpgradePack$OrderService) $r51 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r52 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r52 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z11 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: boolean isServiceSupported(java.lang.String)>($r52)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z11 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: boolean isServiceSupported(java.lang.String)>($r52) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z11 != 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z11 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z10 = interfaceinvoke r50.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z11 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r53 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: org.apache.ambari.server.state.stack.upgrade.UpgradeType getType()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r53 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: org.apache.ambari.server.state.stack.upgrade.UpgradeType getType()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r54 = <org.apache.ambari.server.state.stack.upgrade.UpgradeType: org.apache.ambari.server.state.stack.upgrade.UpgradeType ROLLING>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r54 = <org.apache.ambari.server.state.stack.upgrade.UpgradeType: org.apache.ambari.server.state.stack.upgrade.UpgradeType ROLLING> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r53 != $r54
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r53 != $r54 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r55 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r53 != $r54 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r56 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.util.List components>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r56 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.util.List components> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r15 = interfaceinvoke $r56.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : r15 = interfaceinvoke $r56.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z13 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z13 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z13 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z13 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r57 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z13 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z10 = interfaceinvoke r50.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z10 = interfaceinvoke r50.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z10 = interfaceinvoke r50.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r57 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r16 = (java.lang.String) $r57
org.apache.ambari.server.state.UpgradeHelper.createSequence : r16 = (java.lang.String) $r57 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r58 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: org.apache.ambari.server.state.stack.upgrade.UpgradeType getType()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r58 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: org.apache.ambari.server.state.stack.upgrade.UpgradeType getType()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r59 = <org.apache.ambari.server.state.stack.upgrade.UpgradeType: org.apache.ambari.server.state.stack.upgrade.UpgradeType ROLLING>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r59 = <org.apache.ambari.server.state.stack.upgrade.UpgradeType: org.apache.ambari.server.state.stack.upgrade.UpgradeType ROLLING> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r58 != $r59
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r58 != $r59 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r60 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r58 != $r59 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r63 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r63 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r17 = virtualinvoke r4.<org.apache.ambari.server.stack.MasterHostResolver: org.apache.ambari.server.stack.HostsType getMasterAndHosts(java.lang.String,java.lang.String)>($r63, r16)
org.apache.ambari.server.state.UpgradeHelper.createSequence : r17 = virtualinvoke r4.<org.apache.ambari.server.stack.MasterHostResolver: org.apache.ambari.server.stack.HostsType getMasterAndHosts(java.lang.String,java.lang.String)>($r63, r16) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if null != r17
org.apache.ambari.server.state.UpgradeHelper.createSequence : if null != r17 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z13 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : if null != r17 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r64 = r17.<org.apache.ambari.server.stack.HostsType: java.util.List unhealthy>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r64 = r17.<org.apache.ambari.server.stack.HostsType: java.util.List unhealthy> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z15 = interfaceinvoke $r64.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z15 = interfaceinvoke $r64.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z15 != 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z15 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r65 = r17.<org.apache.ambari.server.stack.HostsType: java.util.List unhealthy>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z15 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r66 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r66 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r18 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Service getService(java.lang.String)>($r66)
org.apache.ambari.server.state.UpgradeHelper.createSequence : r18 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Service getService(java.lang.String)>($r66) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : n0 = null
org.apache.ambari.server.state.UpgradeHelper.createSequence : n0 = null >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if null != r10
org.apache.ambari.server.state.UpgradeHelper.createSequence : if null != r10 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r67 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if null != r10 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r72 = <org.apache.ambari.server.state.stack.upgrade.Task$Type: org.apache.ambari.server.state.stack.upgrade.Task$Type STOP>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r72 = <org.apache.ambari.server.state.stack.upgrade.Task$Type: org.apache.ambari.server.state.stack.upgrade.Task$Type STOP> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if r10 != $r72
org.apache.ambari.server.state.UpgradeHelper.createSequence : if r10 != $r72 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r73 = new org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent
org.apache.ambari.server.state.UpgradeHelper.createSequence : if r10 != $r72 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r77 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r77 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z17 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r77)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z17 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r77) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z17 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z17 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r78 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z17 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r85 = new org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r85 = new org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r85.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r85.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r71 = $r85
org.apache.ambari.server.state.UpgradeHelper.createSequence : r71 = $r85 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r71.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.lang.String name> = r16
org.apache.ambari.server.state.UpgradeHelper.createSequence : r71.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.lang.String name> = r16 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r86 = new java.util.ArrayList
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r86 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r86.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r86.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r71.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.util.List tasks> = $r86
org.apache.ambari.server.state.UpgradeHelper.createSequence : r71.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.util.List tasks> = $r86 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r87 = <org.apache.ambari.server.state.stack.upgrade.Task$Type: org.apache.ambari.server.state.stack.upgrade.Task$Type START>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r87 = <org.apache.ambari.server.state.stack.upgrade.Task$Type: org.apache.ambari.server.state.stack.upgrade.Task$Type START> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if r10 != $r87
org.apache.ambari.server.state.UpgradeHelper.createSequence : if r10 != $r87 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r88 = r71.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.util.List tasks>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if r10 != $r87 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r90 = <org.apache.ambari.server.state.stack.upgrade.Task$Type: org.apache.ambari.server.state.stack.upgrade.Task$Type RESTART>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r90 = <org.apache.ambari.server.state.stack.upgrade.Task$Type: org.apache.ambari.server.state.stack.upgrade.Task$Type RESTART> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if r10 != $r90
org.apache.ambari.server.state.UpgradeHelper.createSequence : if r10 != $r90 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r91 = r71.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.util.List tasks>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if r10 != $r90 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if r71 != null
org.apache.ambari.server.state.UpgradeHelper.createSequence : if r71 != null >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r93 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if r71 != null >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r97 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r97 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke r0.<org.apache.ambari.server.state.UpgradeHelper: void setDisplayNames(org.apache.ambari.server.state.UpgradeContext,java.lang.String,java.lang.String)>(r2, $r97, r16)
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke r0.<org.apache.ambari.server.state.UpgradeHelper: void setDisplayNames(org.apache.ambari.server.state.UpgradeContext,java.lang.String,java.lang.String)>(r2, $r97, r16) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r98 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r98 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z21 = virtualinvoke $r98.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("HDFS")
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z21 = virtualinvoke $r98.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("HDFS") >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z21 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z21 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z22 = virtualinvoke r16.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("NAMENODE")
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z21 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r129 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r129 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z33 = interfaceinvoke r18.<org.apache.ambari.server.state.Service: boolean isClientOnlyService()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z33 = interfaceinvoke r18.<org.apache.ambari.server.state.Service: boolean isClientOnlyService()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r11.<org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder: void add(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.stack.HostsType,java.lang.String,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r2, r17, $r129, $z33, r71, null)
org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r11.<org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder: void add(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.stack.HostsType,java.lang.String,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r2, r17, $r129, $z33, r71, null) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z13 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z13 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z13 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z22 = virtualinvoke r16.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("NAMENODE") >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z22 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z22 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r99 = <org.apache.ambari.server.state.UpgradeHelper$1: int[] $SwitchMap$org$apache$ambari$server$state$stack$upgrade$UpgradeType>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z22 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r129 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r99 = <org.apache.ambari.server.state.UpgradeHelper$1: int[] $SwitchMap$org$apache$ambari$server$state$stack$upgrade$UpgradeType> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r100 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: org.apache.ambari.server.state.stack.upgrade.UpgradeType getType()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r100 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: org.apache.ambari.server.state.stack.upgrade.UpgradeType getType()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $i0 = virtualinvoke $r100.<org.apache.ambari.server.state.stack.upgrade.UpgradeType: int ordinal()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $i0 = virtualinvoke $r100.<org.apache.ambari.server.state.stack.upgrade.UpgradeType: int ordinal()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $i1 = $r99[$i0]
org.apache.ambari.server.state.UpgradeHelper.createSequence : $i1 = $r99[$i0] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : lookupswitch($i1) {     case 1:
org.apache.ambari.server.state.UpgradeHelper.createSequence : lookupswitch($i1) {     case 1: >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r101 = r17.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts>
org.apache.ambari.server.state.UpgradeHelper.createSequence : lookupswitch($i1) {     case 1: >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : z27 = virtualinvoke r4.<org.apache.ambari.server.stack.MasterHostResolver: boolean isNameNodeHA()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : lookupswitch($i1) {     case 1: >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z13 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : z27 = virtualinvoke r4.<org.apache.ambari.server.stack.MasterHostResolver: boolean isNameNodeHA()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if z27 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if z27 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r114 = r17.<org.apache.ambari.server.stack.HostsType: java.lang.String master>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if z27 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r128 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r128 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z32 = interfaceinvoke r18.<org.apache.ambari.server.state.Service: boolean isClientOnlyService()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z32 = interfaceinvoke r18.<org.apache.ambari.server.state.Service: boolean isClientOnlyService()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r11.<org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder: void add(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.stack.HostsType,java.lang.String,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r2, r17, $r128, $z32, r71, null)
org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r11.<org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder: void add(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.stack.HostsType,java.lang.String,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r2, r17, $r128, $z32, r71, null) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)]
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r114 = r17.<org.apache.ambari.server.stack.HostsType: java.lang.String master> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r114 == null
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r114 == null >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r115 = r17.<org.apache.ambari.server.stack.HostsType: java.lang.String secondary>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r114 == null >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r128 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r115 = r17.<org.apache.ambari.server.stack.HostsType: java.lang.String secondary> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r115 == null
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r115 == null >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r116 = new org.apache.ambari.server.stack.HostsType
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r115 == null >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r128 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r116 = new org.apache.ambari.server.stack.HostsType >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r116.<org.apache.ambari.server.stack.HostsType: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r116.<org.apache.ambari.server.stack.HostsType: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r20 = $r116
org.apache.ambari.server.state.UpgradeHelper.createSequence : r20 = $r116 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r117 = new java.util.LinkedHashSet
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r117 = new java.util.LinkedHashSet >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r117.<java.util.LinkedHashSet: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r117.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r21 = $r117
org.apache.ambari.server.state.UpgradeHelper.createSequence : r21 = $r117 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r118 = r17.<org.apache.ambari.server.stack.HostsType: java.lang.String master>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r118 = r17.<org.apache.ambari.server.stack.HostsType: java.lang.String master> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r21.<java.util.LinkedHashSet: boolean add(java.lang.Object)>($r118)
org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r21.<java.util.LinkedHashSet: boolean add(java.lang.Object)>($r118) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r20.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts> = r21
org.apache.ambari.server.state.UpgradeHelper.createSequence : r20.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts> = r21 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r119 = new java.util.HashMap
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r119 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r119.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r119.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r22 = $r119
org.apache.ambari.server.state.UpgradeHelper.createSequence : r22 = $r119 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("desired_namenode_role", "active")
org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("desired_namenode_role", "active") >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r121 = new org.apache.ambari.server.stack.HostsType
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r121 = new org.apache.ambari.server.stack.HostsType >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r121.<org.apache.ambari.server.stack.HostsType: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r121.<org.apache.ambari.server.stack.HostsType: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r23 = $r121
org.apache.ambari.server.state.UpgradeHelper.createSequence : r23 = $r121 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r122 = new java.util.LinkedHashSet
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r122 = new java.util.LinkedHashSet >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r122.<java.util.LinkedHashSet: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r122.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r24 = $r122
org.apache.ambari.server.state.UpgradeHelper.createSequence : r24 = $r122 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r123 = r17.<org.apache.ambari.server.stack.HostsType: java.lang.String secondary>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r123 = r17.<org.apache.ambari.server.stack.HostsType: java.lang.String secondary> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r24.<java.util.LinkedHashSet: boolean add(java.lang.Object)>($r123)
org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r24.<java.util.LinkedHashSet: boolean add(java.lang.Object)>($r123) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r23.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts> = r24
org.apache.ambari.server.state.UpgradeHelper.createSequence : r23.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts> = r24 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r124 = new java.util.HashMap
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r124 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r124.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r124.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r25 = $r124
org.apache.ambari.server.state.UpgradeHelper.createSequence : r25 = $r124 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("desired_namenode_role", "standby")
org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("desired_namenode_role", "standby") >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r126 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r126 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z30 = interfaceinvoke r18.<org.apache.ambari.server.state.Service: boolean isClientOnlyService()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z30 = interfaceinvoke r18.<org.apache.ambari.server.state.Service: boolean isClientOnlyService()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r11.<org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder: void add(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.stack.HostsType,java.lang.String,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r2, r20, $r126, $z30, r71, r22)
org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r11.<org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder: void add(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.stack.HostsType,java.lang.String,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r2, r20, $r126, $z30, r71, r22) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r127 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r127 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z31 = interfaceinvoke r18.<org.apache.ambari.server.state.Service: boolean isClientOnlyService()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z31 = interfaceinvoke r18.<org.apache.ambari.server.state.Service: boolean isClientOnlyService()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r11.<org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder: void add(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.stack.HostsType,java.lang.String,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r2, r23, $r127, $z31, r71, r25)
org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r11.<org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder: void add(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.stack.HostsType,java.lang.String,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r2, r23, $r127, $z31, r71, r25) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)]
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r101 = r17.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z23 = virtualinvoke $r101.<java.util.LinkedHashSet: boolean isEmpty()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z23 = virtualinvoke $r101.<java.util.LinkedHashSet: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z23 != 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z23 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r102 = r17.<org.apache.ambari.server.stack.HostsType: java.lang.String master>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z23 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r108 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r108 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r109 = newarray (java.lang.Object)[3]
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r109 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r110 = r17.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r110 = r17.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r111 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,char)>($r110, 44)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r111 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,char)>($r110, 44) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r109[0] = $r111
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r109[0] = $r111 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r112 = r17.<org.apache.ambari.server.stack.HostsType: java.lang.String master>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r112 = r17.<org.apache.ambari.server.stack.HostsType: java.lang.String master> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r109[1] = $r112
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r109[1] = $r112 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r113 = r17.<org.apache.ambari.server.stack.HostsType: java.lang.String secondary>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r113 = r17.<org.apache.ambari.server.stack.HostsType: java.lang.String secondary> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r109[2] = $r113
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r109[2] = $r113 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r108.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Could not orchestrate NameNode.  Hosts could not be resolved: hosts={}, active={}, standby={}", $r109)
org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r108.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Could not orchestrate NameNode.  Hosts could not be resolved: hosts={}, active={}, standby={}", $r109) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)]
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r102 = r17.<org.apache.ambari.server.stack.HostsType: java.lang.String master> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r102 == null
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r102 == null >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r103 = r17.<org.apache.ambari.server.stack.HostsType: java.lang.String secondary>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r102 == null >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r108 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r103 = r17.<org.apache.ambari.server.stack.HostsType: java.lang.String secondary> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r103 == null
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r103 == null >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r104 = new java.util.LinkedHashSet
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r103 == null >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r108 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r104 = new java.util.LinkedHashSet >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r104.<java.util.LinkedHashSet: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r104.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r19 = $r104
org.apache.ambari.server.state.UpgradeHelper.createSequence : r19 = $r104 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r105 = r17.<org.apache.ambari.server.stack.HostsType: java.lang.String secondary>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r105 = r17.<org.apache.ambari.server.stack.HostsType: java.lang.String secondary> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r19.<java.util.LinkedHashSet: boolean add(java.lang.Object)>($r105)
org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r19.<java.util.LinkedHashSet: boolean add(java.lang.Object)>($r105) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r106 = r17.<org.apache.ambari.server.stack.HostsType: java.lang.String master>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r106 = r17.<org.apache.ambari.server.stack.HostsType: java.lang.String master> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r19.<java.util.LinkedHashSet: boolean add(java.lang.Object)>($r106)
org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r19.<java.util.LinkedHashSet: boolean add(java.lang.Object)>($r106) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r17.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts> = r19
org.apache.ambari.server.state.UpgradeHelper.createSequence : r17.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts> = r19 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r107 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r107 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z26 = interfaceinvoke r18.<org.apache.ambari.server.state.Service: boolean isClientOnlyService()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z26 = interfaceinvoke r18.<org.apache.ambari.server.state.Service: boolean isClientOnlyService()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r11.<org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder: void add(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.stack.HostsType,java.lang.String,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r2, r17, $r107, $z26, r71, null)
org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r11.<org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder: void add(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.stack.HostsType,java.lang.String,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r2, r17, $r107, $z26, r71, null) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)]
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r93 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r94 = newarray (java.lang.Object)[2]
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r94 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r95 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r95 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r94[0] = $r95
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r94[0] = $r95 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r94[1] = r16
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r94[1] = r16 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r96 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>("Couldn\'t create a processing component for service {0} and component {1}.", $r94)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r96 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>("Couldn\'t create a processing component for service {0} and component {1}.", $r94) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r93.<org.slf4j.Logger: void error(java.lang.String)>($r96)
org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r93.<org.slf4j.Logger: void error(java.lang.String)>($r96) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z13 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z13 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z13 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r91 = r71.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.util.List tasks> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r92 = new org.apache.ambari.server.state.stack.upgrade.RestartTask
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r92 = new org.apache.ambari.server.state.stack.upgrade.RestartTask >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r92.<org.apache.ambari.server.state.stack.upgrade.RestartTask: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r92.<org.apache.ambari.server.state.stack.upgrade.RestartTask: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r91.<java.util.List: boolean add(java.lang.Object)>($r92)
org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r91.<java.util.List: boolean add(java.lang.Object)>($r92) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if r71 != null
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r88 = r71.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.util.List tasks> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r89 = new org.apache.ambari.server.state.stack.upgrade.StartTask
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r89 = new org.apache.ambari.server.state.stack.upgrade.StartTask >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r89.<org.apache.ambari.server.state.stack.upgrade.StartTask: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r89.<org.apache.ambari.server.state.stack.upgrade.StartTask: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r88.<java.util.List: boolean add(java.lang.Object)>($r89)
org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r88.<java.util.List: boolean add(java.lang.Object)>($r89) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r90 = <org.apache.ambari.server.state.stack.upgrade.Task$Type: org.apache.ambari.server.state.stack.upgrade.Task$Type RESTART>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r78 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r79 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r78)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r79 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r78) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r80 = (java.util.Map) $r79
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r80 = (java.util.Map) $r79 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z18 = interfaceinvoke $r80.<java.util.Map: boolean containsKey(java.lang.Object)>(r16)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z18 = interfaceinvoke $r80.<java.util.Map: boolean containsKey(java.lang.Object)>(r16) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z18 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z18 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r81 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z18 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r85 = new org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r81 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r82 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r81)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r82 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r81) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r83 = (java.util.Map) $r82
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r83 = (java.util.Map) $r82 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r84 = interfaceinvoke $r83.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r84 = interfaceinvoke $r83.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r71 = (org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent) $r84
org.apache.ambari.server.state.UpgradeHelper.createSequence : r71 = (org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent) $r84 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if r71 != null
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r73 = new org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r73.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r73.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r71 = $r73
org.apache.ambari.server.state.UpgradeHelper.createSequence : r71 = $r73 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r71.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.lang.String name> = r16
org.apache.ambari.server.state.UpgradeHelper.createSequence : r71.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.lang.String name> = r16 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r74 = new java.util.ArrayList
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r74 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r74.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r74.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r71.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.util.List tasks> = $r74
org.apache.ambari.server.state.UpgradeHelper.createSequence : r71.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.util.List tasks> = $r74 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r75 = r71.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.util.List tasks>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r75 = r71.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.util.List tasks> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r76 = new org.apache.ambari.server.state.stack.upgrade.StopTask
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r76 = new org.apache.ambari.server.state.stack.upgrade.StopTask >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r76.<org.apache.ambari.server.state.stack.upgrade.StopTask: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r76.<org.apache.ambari.server.state.stack.upgrade.StopTask: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r75.<java.util.List: boolean add(java.lang.Object)>($r76)
org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r75.<java.util.List: boolean add(java.lang.Object)>($r76) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if r71 != null
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r67 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r68 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r67)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r68 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r67) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r69 = (java.util.Map) $r68
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r69 = (java.util.Map) $r68 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r70 = interfaceinvoke $r69.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r70 = interfaceinvoke $r69.<java.util.Map: java.lang.Object get(java.lang.Object)>(r16) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r71 = (org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent) $r70
org.apache.ambari.server.state.UpgradeHelper.createSequence : r71 = (org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent) $r70 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if r71 != null
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r65 = r17.<org.apache.ambari.server.stack.HostsType: java.util.List unhealthy> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: void addUnhealthy(java.util.List)>($r65)
org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: void addUnhealthy(java.util.List)>($r65) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r66 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z13 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z13 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r60 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r61 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r60)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r61 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r60) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r62 = (java.util.Map) $r61
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r62 = (java.util.Map) $r61 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z14 = interfaceinvoke $r62.<java.util.Map: boolean containsKey(java.lang.Object)>(r16)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z14 = interfaceinvoke $r62.<java.util.Map: boolean containsKey(java.lang.Object)>(r16) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z14 != 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z14 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z13 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z14 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r63 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z13 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z13 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r55 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z12 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r55)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z12 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r55) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z12 != 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z12 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z10 = interfaceinvoke r50.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z12 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r56 = r14.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.util.List components>
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z10 = interfaceinvoke r50.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z10 = interfaceinvoke r50.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z10 = interfaceinvoke r50.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z10 = interfaceinvoke r50.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r48 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.stack.upgrade.Direction getDirection()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z8 = virtualinvoke $r48.<org.apache.ambari.server.state.stack.upgrade.Direction: boolean isDowngrade()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z8 = virtualinvoke $r48.<org.apache.ambari.server.state.stack.upgrade.Direction: boolean isDowngrade()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z8 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z8 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z9 = interfaceinvoke r12.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z8 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r50 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z9 = interfaceinvoke r12.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z9 != 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z9 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r49 = new java.util.ArrayList
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z9 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r50 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r49 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r49.<java.util.ArrayList: void <init>(java.util.Collection)>(r12)
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r49.<java.util.ArrayList: void <init>(java.util.Collection)>(r12) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r13 = $r49
org.apache.ambari.server.state.UpgradeHelper.createSequence : r13 = $r49 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : staticinvoke <java.util.Collections: void reverse(java.util.List)>(r13)
org.apache.ambari.server.state.UpgradeHelper.createSequence : staticinvoke <java.util.Collections: void reverse(java.util.List)>(r13) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r12 = r13
org.apache.ambari.server.state.UpgradeHelper.createSequence : r12 = r13 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r50 = interfaceinvoke r12.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : r8.<org.apache.ambari.server.state.stack.upgrade.Grouping: boolean performServiceCheck> = 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r11 = virtualinvoke r8.<org.apache.ambari.server.state.stack.upgrade.Grouping: org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder getBuilder()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r43 = (org.apache.ambari.server.state.stack.upgrade.UpgradeFunction) r8 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r10 = interfaceinvoke $r43.<org.apache.ambari.server.state.stack.upgrade.UpgradeFunction: org.apache.ambari.server.state.stack.upgrade.Task$Type getFunction()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : r10 = interfaceinvoke $r43.<org.apache.ambari.server.state.stack.upgrade.UpgradeFunction: org.apache.ambari.server.state.stack.upgrade.Task$Type getFunction()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r44 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: org.apache.ambari.server.state.stack.upgrade.UpgradeType getType()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : r9.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: boolean skippable> = 1 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r10 = null
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r35 = r8.<org.apache.ambari.server.state.stack.upgrade.Grouping: org.apache.ambari.server.state.stack.upgrade.Condition condition> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z2 = virtualinvoke $r35.<org.apache.ambari.server.state.stack.upgrade.Condition: boolean isSatisfied(org.apache.ambari.server.state.UpgradeContext)>(r2)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z2 = virtualinvoke $r35.<org.apache.ambari.server.state.stack.upgrade.Condition: boolean isSatisfied(org.apache.ambari.server.state.UpgradeContext)>(r2) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z2 != 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z2 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r36 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z2 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r38 = new org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r36 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r37 = r8.<org.apache.ambari.server.state.stack.upgrade.Grouping: org.apache.ambari.server.state.stack.upgrade.Condition condition>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r37 = r8.<org.apache.ambari.server.state.stack.upgrade.Grouping: org.apache.ambari.server.state.stack.upgrade.Condition condition> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r36.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Skipping {} while building upgrade orchestration due to {}", r8, $r37)
org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r36.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Skipping {} while building upgrade orchestration due to {}", r8, $r37) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
