org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r1 = staticinvoke <org.apache.ambari.server.topology.HostRequest: org.slf4j.Logger access$300()>() >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r10 = r0.<org.apache.ambari.server.topology.HostRequest$StartHostTask: org.apache.ambari.server.topology.HostRequest this$0>
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r10 = r0.<org.apache.ambari.server.topology.HostRequest$StartHostTask: org.apache.ambari.server.topology.HostRequest this$0> >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r11 = staticinvoke <org.apache.ambari.server.topology.HostRequest: java.lang.String access$200(org.apache.ambari.server.topology.HostRequest)>($r10)
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r11 = staticinvoke <org.apache.ambari.server.topology.HostRequest: java.lang.String access$200(org.apache.ambari.server.topology.HostRequest)>($r10) >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("HostRequest: Executing START task for host: {}", $r11)
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : interfaceinvoke $r1.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("HostRequest: Executing START task for host: {}", $r11) >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r12 = r0.<org.apache.ambari.server.topology.HostRequest$StartHostTask: org.apache.ambari.server.topology.ClusterTopology clusterTopology>
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r12 = r0.<org.apache.ambari.server.topology.HostRequest$StartHostTask: org.apache.ambari.server.topology.ClusterTopology clusterTopology> >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r13 = r0.<org.apache.ambari.server.topology.HostRequest$StartHostTask: org.apache.ambari.server.topology.HostRequest this$0>
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r13 = r0.<org.apache.ambari.server.topology.HostRequest$StartHostTask: org.apache.ambari.server.topology.HostRequest this$0> >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r14 = staticinvoke <org.apache.ambari.server.topology.HostRequest: java.lang.String access$200(org.apache.ambari.server.topology.HostRequest)>($r13)
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r14 = staticinvoke <org.apache.ambari.server.topology.HostRequest: java.lang.String access$200(org.apache.ambari.server.topology.HostRequest)>($r13) >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $z0 = r0.<org.apache.ambari.server.topology.HostRequest$StartHostTask: boolean skipFailure>
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $z0 = r0.<org.apache.ambari.server.topology.HostRequest$StartHostTask: boolean skipFailure> >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : r2 = interfaceinvoke $r12.<org.apache.ambari.server.topology.ClusterTopology: org.apache.ambari.server.controller.RequestStatusResponse startHost(java.lang.String,boolean)>($r14, $z0)
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : r2 = interfaceinvoke $r12.<org.apache.ambari.server.topology.ClusterTopology: org.apache.ambari.server.controller.RequestStatusResponse startHost(java.lang.String,boolean)>($r14, $z0) >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : r3 = virtualinvoke r2.<org.apache.ambari.server.controller.RequestStatusResponse: java.util.List getTasks()>()
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : r3 = virtualinvoke r2.<org.apache.ambari.server.controller.RequestStatusResponse: java.util.List getTasks()>() >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : if $z1 == 0
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : if $z1 == 0 >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r15 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : if $z1 == 0 >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r28 = staticinvoke <org.apache.ambari.server.topology.HostRequest: org.slf4j.Logger access$300()>()
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r28 = staticinvoke <org.apache.ambari.server.topology.HostRequest: org.slf4j.Logger access$300()>() >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r29 = r0.<org.apache.ambari.server.topology.HostRequest$StartHostTask: org.apache.ambari.server.topology.HostRequest this$0>
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r29 = r0.<org.apache.ambari.server.topology.HostRequest$StartHostTask: org.apache.ambari.server.topology.HostRequest this$0> >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r30 = staticinvoke <org.apache.ambari.server.topology.HostRequest: java.lang.String access$200(org.apache.ambari.server.topology.HostRequest)>($r29)
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r30 = staticinvoke <org.apache.ambari.server.topology.HostRequest: java.lang.String access$200(org.apache.ambari.server.topology.HostRequest)>($r29) >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : interfaceinvoke $r28.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("HostRequest: Exiting START task for host: {}", $r30)
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : interfaceinvoke $r28.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("HostRequest: Exiting START task for host: {}", $r30) >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : return
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r15 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : r5 = (org.apache.ambari.server.controller.ShortTaskStatus) $r15
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : r5 = (org.apache.ambari.server.controller.ShortTaskStatus) $r15 >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : r6 = virtualinvoke r5.<org.apache.ambari.server.controller.ShortTaskStatus: java.lang.String getRole()>()
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : r6 = virtualinvoke r5.<org.apache.ambari.server.controller.ShortTaskStatus: java.lang.String getRole()>() >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r16 = r0.<org.apache.ambari.server.topology.HostRequest$StartHostTask: org.apache.ambari.server.topology.HostRequest this$0>
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r16 = r0.<org.apache.ambari.server.topology.HostRequest$StartHostTask: org.apache.ambari.server.topology.HostRequest this$0> >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r17 = staticinvoke <org.apache.ambari.server.topology.HostRequest: java.util.Map access$500(org.apache.ambari.server.topology.HostRequest)>($r16)
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r17 = staticinvoke <org.apache.ambari.server.topology.HostRequest: java.util.Map access$500(org.apache.ambari.server.topology.HostRequest)>($r16) >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r18 = interfaceinvoke $r17.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r18 = interfaceinvoke $r17.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r19 = (java.util.Map) $r18
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r19 = (java.util.Map) $r18 >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r20 = interfaceinvoke $r19.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6)
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r20 = interfaceinvoke $r19.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : r7 = (java.lang.Long) $r20
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : r7 = (java.lang.Long) $r20 >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : if r7 != null
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : if r7 != null >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r21 = staticinvoke <org.apache.ambari.server.topology.HostRequest: org.slf4j.Logger access$300()>()
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : if r7 != null >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r23 = r0.<org.apache.ambari.server.topology.HostRequest$StartHostTask: org.apache.ambari.server.topology.HostRequest this$0>
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r23 = r0.<org.apache.ambari.server.topology.HostRequest$StartHostTask: org.apache.ambari.server.topology.HostRequest this$0> >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $l0 = virtualinvoke r7.<java.lang.Long: long longValue()>()
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $l0 = virtualinvoke r7.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $l1 = virtualinvoke r5.<org.apache.ambari.server.controller.ShortTaskStatus: long getTaskId()>()
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $l1 = virtualinvoke r5.<org.apache.ambari.server.controller.ShortTaskStatus: long getTaskId()>() >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : virtualinvoke $r23.<org.apache.ambari.server.topology.HostRequest: void registerPhysicalTaskId(long,long)>($l0, $l1)
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : virtualinvoke $r23.<org.apache.ambari.server.topology.HostRequest: void registerPhysicalTaskId(long,long)>($l0, $l1) >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r24 = r0.<org.apache.ambari.server.topology.HostRequest$StartHostTask: org.apache.ambari.server.topology.HostRequest this$0>
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r24 = r0.<org.apache.ambari.server.topology.HostRequest$StartHostTask: org.apache.ambari.server.topology.HostRequest this$0> >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r25 = $r24.<org.apache.ambari.server.topology.HostRequest: java.util.Map logicalTasks>
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r25 = $r24.<org.apache.ambari.server.topology.HostRequest: java.util.Map logicalTasks> >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r26 = interfaceinvoke $r25.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r26 = interfaceinvoke $r25.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : r8 = interfaceinvoke $r26.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : r8 = interfaceinvoke $r26.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : if $z2 == 0
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : if $z2 == 0 >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r27 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : if $z2 == 0 >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r27 = interfaceinvoke r8.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : r9 = (org.apache.ambari.server.actionmanager.HostRoleCommand) $r27
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : r9 = (org.apache.ambari.server.actionmanager.HostRoleCommand) $r27 >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $l2 = virtualinvoke r9.<org.apache.ambari.server.actionmanager.HostRoleCommand: long getTaskId()>()
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $l2 = virtualinvoke r9.<org.apache.ambari.server.actionmanager.HostRoleCommand: long getTaskId()>() >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $l3 = virtualinvoke r7.<java.lang.Long: long longValue()>()
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $l3 = virtualinvoke r7.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $b4 = $l2 cmp $l3
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $b4 = $l2 cmp $l3 >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : if $b4 != 0
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : if $b4 != 0 >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : virtualinvoke r9.<org.apache.ambari.server.actionmanager.HostRoleCommand: void incrementAttemptCount()>()
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : if $b4 != 0 >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : goto [?= $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : goto [?= $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : virtualinvoke r9.<org.apache.ambari.server.actionmanager.HostRoleCommand: void incrementAttemptCount()>() >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : goto [?= $z2 = interfaceinvoke r8.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r21 = staticinvoke <org.apache.ambari.server.topology.HostRequest: org.slf4j.Logger access$300()>() >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r22 = virtualinvoke r5.<org.apache.ambari.server.controller.ShortTaskStatus: java.lang.String getRole()>()
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $r22 = virtualinvoke r5.<org.apache.ambari.server.controller.ShortTaskStatus: java.lang.String getRole()>() >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : interfaceinvoke $r21.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Skipping physical start task registering, because component {} cannot be found", $r22)
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : interfaceinvoke $r21.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Skipping physical start task registering, because component {} cannot be found", $r22) >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.topology.HostRequest$StartHostTask.run : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.topology.HostRequest$StartHostTask.run : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
