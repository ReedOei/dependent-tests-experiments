org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : $r3 = <org.apache.ambari.server.topology.BlueprintFactory: java.lang.String BLUEPRINT_NAME_PROPERTY_ID> >>>>>>>> org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : $r9 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3)
org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : $r9 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) >>>>>>>> org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r9)
org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : r4 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r9) >>>>>>>> org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("null")
org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("null") >>>>>>>> org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : if $z0 != 0
org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : if $z0 != 0 >>>>>>>> org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : $z1 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : if $z0 != 0 >>>>>>>> org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : $r10 = new java.lang.IllegalArgumentException
org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : $r10 = new java.lang.IllegalArgumentException >>>>>>>> org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Blueprint name must be provided")
org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Blueprint name must be provided") >>>>>>>> org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : throw $r10
org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : $z1 = virtualinvoke r4.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : if $z1 == 0
org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : if $z1 == 0 >>>>>>>> org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : $r10 = new java.lang.IllegalArgumentException
org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : if $z1 == 0 >>>>>>>> org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : r5 = virtualinvoke r0.<org.apache.ambari.server.topology.BlueprintFactory: org.apache.ambari.server.controller.internal.Stack createStack(java.util.Map)>(r1)
org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : r5 = virtualinvoke r0.<org.apache.ambari.server.topology.BlueprintFactory: org.apache.ambari.server.controller.internal.Stack createStack(java.util.Map)>(r1) >>>>>>>> org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : r6 = specialinvoke r0.<org.apache.ambari.server.topology.BlueprintFactory: java.util.Collection processHostGroups(java.lang.String,org.apache.ambari.server.controller.internal.Stack,java.util.Map)>(r4, r5, r1)
org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : r6 = specialinvoke r0.<org.apache.ambari.server.topology.BlueprintFactory: java.util.Collection processHostGroups(java.lang.String,org.apache.ambari.server.controller.internal.Stack,java.util.Map)>(r4, r5, r1) >>>>>>>> org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : $r11 = r0.<org.apache.ambari.server.topology.BlueprintFactory: org.apache.ambari.server.topology.ConfigurationFactory configFactory>
org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : $r11 = r0.<org.apache.ambari.server.topology.BlueprintFactory: org.apache.ambari.server.topology.ConfigurationFactory configFactory> >>>>>>>> org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : $r12 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("configurations")
org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : $r12 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("configurations") >>>>>>>> org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : $r13 = (java.util.Collection) $r12
org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : $r13 = (java.util.Collection) $r12 >>>>>>>> org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : r7 = virtualinvoke $r11.<org.apache.ambari.server.topology.ConfigurationFactory: org.apache.ambari.server.topology.Configuration getConfiguration(java.util.Collection)>($r13)
org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : r7 = virtualinvoke $r11.<org.apache.ambari.server.topology.ConfigurationFactory: org.apache.ambari.server.topology.Configuration getConfiguration(java.util.Collection)>($r13) >>>>>>>> org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : $r14 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("settings")
org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : $r14 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("settings") >>>>>>>> org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : $r15 = (java.util.Collection) $r14
org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : $r15 = (java.util.Collection) $r14 >>>>>>>> org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : r8 = staticinvoke <org.apache.ambari.server.topology.SettingFactory: org.apache.ambari.server.topology.Setting getSetting(java.util.Collection)>($r15)
org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : r8 = staticinvoke <org.apache.ambari.server.topology.SettingFactory: org.apache.ambari.server.topology.Setting getSetting(java.util.Collection)>($r15) >>>>>>>> org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : $r16 = new org.apache.ambari.server.topology.BlueprintImpl
org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : $r16 = new org.apache.ambari.server.topology.BlueprintImpl >>>>>>>> org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : specialinvoke $r16.<org.apache.ambari.server.topology.BlueprintImpl: void <init>(java.lang.String,java.util.Collection,org.apache.ambari.server.controller.internal.Stack,org.apache.ambari.server.topology.Configuration,org.apache.ambari.server.topology.SecurityConfiguration,org.apache.ambari.server.topology.Setting)>(r4, r6, r5, r7, r2, r8)
org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : specialinvoke $r16.<org.apache.ambari.server.topology.BlueprintImpl: void <init>(java.lang.String,java.util.Collection,org.apache.ambari.server.controller.internal.Stack,org.apache.ambari.server.topology.Configuration,org.apache.ambari.server.topology.SecurityConfiguration,org.apache.ambari.server.topology.Setting)>(r4, r6, r5, r7, r2, r8) >>>>>>>> org.apache.ambari.server.topology.BlueprintFactory.createBlueprint : return $r16
