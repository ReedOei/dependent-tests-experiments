org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r0 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke $r0.<org.slf4j.Logger: void info(java.lang.String)>("Checking for hosts without state")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke $r0.<org.slf4j.Logger: void info(java.lang.String)>("Checking for hosts without state") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : r1 = "select host_name from hosts where host_id not in (select host_id from hoststate)"
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : r1 = "select host_name from hosts where host_id not in (select host_id from hoststate)" >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r8 = new java.util.HashSet
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r8 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : specialinvoke $r8.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : specialinvoke $r8.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : r2 = $r8
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : r2 = $r8 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : r3 = null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : r3 = null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : r4 = null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : r4 = null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r9 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r9 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if $r9 != null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if $r9 != null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r10 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.orm.DBAccessor dbAccessor>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if $r9 != null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r16 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if $r9 != null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r29 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if $r9 != null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r38 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : r6 = $r38 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r3 == null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : r6 = $r38 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r38 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r3 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke r3.<java.sql.ResultSet: void close()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r3 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r4 == null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r3 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r39 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : r7 = $r39 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r40 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r40 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke $r40.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception occurred during result set closing procedure: ", r7)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke $r40.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception occurred during result set closing procedure: ", r7) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r4 == null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r4 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke r4.<java.sql.Statement: void close()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r4 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : throw r6
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r4 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r41 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : r42 = $r41 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r43 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r43 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke $r43.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception occurred during statement closing procedure: ", r42)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke $r43.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception occurred during statement closing procedure: ", r42) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : throw r6
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke r4.<java.sql.Statement: void close()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : goto [?= throw r6]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke r4.<java.sql.Statement: void close()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r41 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : goto [?= throw r6] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : throw r6
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke r3.<java.sql.ResultSet: void close()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : goto [?= (branch)]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke r3.<java.sql.ResultSet: void close()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r39 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r4 == null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : r30 = $r29 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r31 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : r30 = $r29 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r38 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r31 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke $r31.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception occurred during check for host without state procedure: ", r30)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r31 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r38 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke $r31.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception occurred during check for host without state procedure: ", r30) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r3 == null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke $r31.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception occurred during check for host without state procedure: ", r30) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r38 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r3 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke r3.<java.sql.ResultSet: void close()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r3 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r4 == null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r3 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r32 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : r33 = $r32 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r34 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r34 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke $r34.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception occurred during result set closing procedure: ", r33)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke $r34.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception occurred during result set closing procedure: ", r33) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r4 == null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r4 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke r4.<java.sql.Statement: void close()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r4 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : return
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r4 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r35 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : r36 = $r35 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r37 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r37 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke $r37.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception occurred during statement closing procedure: ", r36)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke $r37.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception occurred during statement closing procedure: ", r36) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : goto [?= return]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : goto [?= return] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : return
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke r4.<java.sql.Statement: void close()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : goto [?= return]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke r4.<java.sql.Statement: void close()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r35 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : goto [?= return] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : return
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke r3.<java.sql.ResultSet: void close()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : goto [?= (branch)]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke r3.<java.sql.ResultSet: void close()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r32 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r4 == null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r16 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r29 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r16 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r38 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r16 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : r4 = interfaceinvoke $r16.<java.sql.Connection: java.sql.Statement createStatement(int,int)>(1005, 1008)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : r4 = interfaceinvoke $r16.<java.sql.Connection: java.sql.Statement createStatement(int,int)>(1005, 1008) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r29 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : r4 = interfaceinvoke $r16.<java.sql.Connection: java.sql.Statement createStatement(int,int)>(1005, 1008) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r38 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : r4 = interfaceinvoke $r16.<java.sql.Connection: java.sql.Statement createStatement(int,int)>(1005, 1008) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : r3 = interfaceinvoke r4.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>(r1)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : r3 = interfaceinvoke r4.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r29 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : r3 = interfaceinvoke r4.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r38 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : r3 = interfaceinvoke r4.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r3 == null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r3 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $z0 = interfaceinvoke r3.<java.sql.ResultSet: boolean next()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r3 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r3 == null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r3 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r29 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r3 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r38 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r3 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke r3.<java.sql.ResultSet: void close()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r3 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r4 == null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r3 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r24 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : r5 = $r24 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r25 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r25 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke $r25.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception occurred during result set closing procedure: ", r5)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke $r25.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception occurred during result set closing procedure: ", r5) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r4 == null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r4 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke r4.<java.sql.Statement: void close()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r4 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : return
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r4 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r26 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : r27 = $r26 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r28 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r28 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke $r28.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception occurred during statement closing procedure: ", r27)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke $r28.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Exception occurred during statement closing procedure: ", r27) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : goto [?= return]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : goto [?= return] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : return
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke r4.<java.sql.Statement: void close()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : goto [?= return]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke r4.<java.sql.Statement: void close()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r26 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : goto [?= return] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : return
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke r3.<java.sql.ResultSet: void close()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : goto [?= (branch)]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke r3.<java.sql.ResultSet: void close()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r24 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r4 == null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $z0 = interfaceinvoke r3.<java.sql.ResultSet: boolean next()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r29 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $z0 = interfaceinvoke r3.<java.sql.ResultSet: boolean next()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r38 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $z0 = interfaceinvoke r3.<java.sql.ResultSet: boolean next()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if $z0 == 0
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r17 = interfaceinvoke r3.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("host_name")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $z2 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r29 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r38 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $z2 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r29 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $z2 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r38 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $z2 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if $z2 != 0
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if $z2 != 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r18 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if $z2 != 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r3 == null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if $z2 != 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r29 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if $z2 != 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r38 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r18 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r29 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r18 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r38 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r18 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r19 = new java.lang.StringBuilder
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r19 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r29 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r19 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r38 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r19 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : specialinvoke $r19.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : specialinvoke $r19.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r29 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : specialinvoke $r19.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r38 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : specialinvoke $r19.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("You have host(s) without state (in hoststate table): ")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("You have host(s) without state (in hoststate table): ") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r29 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("You have host(s) without state (in hoststate table): ") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r38 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("You have host(s) without state (in hoststate table): ") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r21 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,java.lang.String)>(r2, ",")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r21 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,java.lang.String)>(r2, ",") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r29 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r21 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,java.lang.String)>(r2, ",") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r38 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r21 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,java.lang.String)>(r2, ",") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r29 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r38 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r29 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r38 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke $r18.<org.slf4j.Logger: void error(java.lang.String)>($r23)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke $r18.<org.slf4j.Logger: void error(java.lang.String)>($r23) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r29 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke $r18.<org.slf4j.Logger: void error(java.lang.String)>($r23) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r38 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke $r18.<org.slf4j.Logger: void error(java.lang.String)>($r23) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: boolean errorsFound> = 1
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: boolean errorsFound> = 1 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r29 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: boolean errorsFound> = 1 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r38 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: boolean errorsFound> = 1 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if r3 == null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r17 = interfaceinvoke r3.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("host_name") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r29 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r17 = interfaceinvoke r3.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("host_name") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r38 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r17 = interfaceinvoke r3.<java.sql.ResultSet: java.lang.String getString(java.lang.String)>("host_name") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r17)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r17) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r29 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r17) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r38 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r17) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : goto [?= $z0 = interfaceinvoke r3.<java.sql.ResultSet: boolean next()>()]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : goto [?= $z0 = interfaceinvoke r3.<java.sql.ResultSet: boolean next()>()] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r29 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : goto [?= $z0 = interfaceinvoke r3.<java.sql.ResultSet: boolean next()>()] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r38 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : goto [?= $z0 = interfaceinvoke r3.<java.sql.ResultSet: boolean next()>()] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $z0 = interfaceinvoke r3.<java.sql.ResultSet: boolean next()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r10 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.orm.DBAccessor dbAccessor> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if $r10 != null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if $r10 != null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r11 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: com.google.inject.Injector injector>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : if $r10 != null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r14 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.orm.DBAccessor dbAccessor>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r14 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.orm.DBAccessor dbAccessor> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r15 = interfaceinvoke $r14.<org.apache.ambari.server.orm.DBAccessor: java.sql.Connection getConnection()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r15 = interfaceinvoke $r14.<org.apache.ambari.server.orm.DBAccessor: java.sql.Connection getConnection()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection> = $r15
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection> = $r15 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r29 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection> = $r15 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r38 := @caughtexception
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection> = $r15 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r16 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r11 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: com.google.inject.Injector injector> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r12 = interfaceinvoke $r11.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "org/apache/ambari/server/orm/DBAccessor")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r12 = interfaceinvoke $r11.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "org/apache/ambari/server/orm/DBAccessor") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r13 = (org.apache.ambari.server.orm.DBAccessor) $r12
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r13 = (org.apache.ambari.server.orm.DBAccessor) $r12 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.orm.DBAccessor dbAccessor> = $r13
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.orm.DBAccessor dbAccessor> = $r13 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkForHostsWithoutState : $r14 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.orm.DBAccessor dbAccessor>
