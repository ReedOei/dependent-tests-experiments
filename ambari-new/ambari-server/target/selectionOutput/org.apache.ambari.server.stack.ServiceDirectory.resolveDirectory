org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r4 = new java.io.File >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r5 = new java.lang.StringBuilder
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r5 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r8 = virtualinvoke r0.<org.apache.ambari.server.stack.ServiceDirectory: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r8 = virtualinvoke r0.<org.apache.ambari.server.stack.ServiceDirectory: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r10 = <java.io.File: java.lang.String separator>
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r10 = <java.io.File: java.lang.String separator> >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10)
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r13)
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : specialinvoke $r4.<java.io.File: void <init>(java.lang.String)>($r13) >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : r6 = $r4
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : r6 = $r4 >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $z0 = virtualinvoke r6.<java.io.File: boolean isDirectory()>()
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $z0 = virtualinvoke r6.<java.io.File: boolean isDirectory()>() >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : if $z0 == 0
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : r7 = virtualinvoke r6.<java.io.File: java.lang.String[] list()>()
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r17 = <org.apache.ambari.server.stack.ServiceDirectory: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r17 = <org.apache.ambari.server.stack.ServiceDirectory: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : interfaceinvoke $r17.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Service folder {}does not exist.", r6)
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : interfaceinvoke $r17.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Service folder {}does not exist.", r6) >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : return null
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : r7 = virtualinvoke r6.<java.io.File: java.lang.String[] list()>() >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : i0 = lengthof r7
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : i0 = lengthof r7 >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : if i0 <= 0
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : if i0 <= 0 >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r14 = <org.apache.ambari.server.stack.ServiceDirectory: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : if i0 <= 0 >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r16 = <org.apache.ambari.server.stack.ServiceDirectory: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r16 = <org.apache.ambari.server.stack.ServiceDirectory: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Service folder {} is empty.", r6)
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Service folder {} is empty.", r6) >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : goto [?= return null]
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : goto [?= return null] >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : return null
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r14 = <org.apache.ambari.server.stack.ServiceDirectory: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r15 = newarray (java.lang.Object)[4]
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r15 = newarray (java.lang.Object)[4] >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r15[0] = r1
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r15[0] = r1 >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r15[1] = r3
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r15[1] = r3 >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r15[2] = r2
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r15[2] = r2 >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r15[3] = r6
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : $r15[3] = r6 >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Service {} folder for service {} in {} has been resolved to {}", $r15)
org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : interfaceinvoke $r14.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Service {} folder for service {} in {} has been resolved to {}", $r15) >>>>>>>> org.apache.ambari.server.stack.ServiceDirectory.resolveDirectory : return r6
