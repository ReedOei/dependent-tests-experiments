org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r1 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/ConfigHelper") >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r2 = (org.apache.ambari.server.state.ConfigHelper) $r1
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r2 = (org.apache.ambari.server.state.ConfigHelper) $r1 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : r0.<org.apache.ambari.server.state.UpgradeHelperTest: org.apache.ambari.server.state.ConfigHelper m_configHelper> = $r2
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : r0.<org.apache.ambari.server.state.UpgradeHelperTest: org.apache.ambari.server.state.ConfigHelper m_configHelper> = $r2 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r3 = r0.<org.apache.ambari.server.state.UpgradeHelperTest: org.apache.ambari.server.state.ConfigHelper m_configHelper>
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r3 = r0.<org.apache.ambari.server.state.UpgradeHelperTest: org.apache.ambari.server.state.ConfigHelper m_configHelper> >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r4 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "org/apache/ambari/server/state/Cluster")
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r4 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "org/apache/ambari/server/state/Cluster") >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r5 = (org.apache.ambari.server.state.Cluster) $r4
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r5 = (org.apache.ambari.server.state.Cluster) $r4 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r6 = staticinvoke <org.easymock.EasyMock: java.lang.Object eq(java.lang.Object)>("{{foo/bar}}")
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r6 = staticinvoke <org.easymock.EasyMock: java.lang.Object eq(java.lang.Object)>("{{foo/bar}}") >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r7 = (java.lang.String) $r6
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r7 = (java.lang.String) $r6 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r8 = virtualinvoke $r3.<org.apache.ambari.server.state.ConfigHelper: java.lang.String getPlaceholderValueFromDesiredConfigurations(org.apache.ambari.server.state.Cluster,java.lang.String)>($r5, $r7)
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r8 = virtualinvoke $r3.<org.apache.ambari.server.state.ConfigHelper: java.lang.String getPlaceholderValueFromDesiredConfigurations(org.apache.ambari.server.state.Cluster,java.lang.String)>($r5, $r7) >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r9 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r8)
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r9 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r8) >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r10 = interfaceinvoke $r9.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("placeholder-rendered-properly")
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r10 = interfaceinvoke $r9.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("placeholder-rendered-properly") >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : interfaceinvoke $r10.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : interfaceinvoke $r10.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r12 = r0.<org.apache.ambari.server.state.UpgradeHelperTest: org.apache.ambari.server.state.ConfigHelper m_configHelper>
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r12 = r0.<org.apache.ambari.server.state.UpgradeHelperTest: org.apache.ambari.server.state.ConfigHelper m_configHelper> >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r13 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "org/apache/ambari/server/state/Cluster")
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r13 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "org/apache/ambari/server/state/Cluster") >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r14 = (org.apache.ambari.server.state.Cluster) $r13
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r14 = (org.apache.ambari.server.state.Cluster) $r13 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r15 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String")
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r15 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String") >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r16 = (java.lang.String) $r15
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r16 = (java.lang.String) $r15 >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r17 = virtualinvoke $r12.<org.apache.ambari.server.state.ConfigHelper: java.util.Map getEffectiveDesiredTags(org.apache.ambari.server.state.Cluster,java.lang.String)>($r14, $r16)
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r17 = virtualinvoke $r12.<org.apache.ambari.server.state.ConfigHelper: java.util.Map getEffectiveDesiredTags(org.apache.ambari.server.state.Cluster,java.lang.String)>($r14, $r16) >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r18 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r17)
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r18 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r17) >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r19 = new java.util.HashMap
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r19 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : specialinvoke $r19.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : specialinvoke $r19.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r20 = interfaceinvoke $r18.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r19)
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : $r20 = interfaceinvoke $r18.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r19) >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : interfaceinvoke $r20.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : interfaceinvoke $r20.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelperTest.setConfigMocks : return
