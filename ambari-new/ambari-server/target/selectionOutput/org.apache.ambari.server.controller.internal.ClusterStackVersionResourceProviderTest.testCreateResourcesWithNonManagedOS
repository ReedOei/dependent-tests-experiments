org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r2 = new com.google.gson.JsonParser >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r2.<com.google.gson.JsonParser: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r2.<com.google.gson.JsonParser: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r44 = virtualinvoke $r2.<com.google.gson.JsonParser: com.google.gson.JsonElement parse(java.lang.String)>("[\n   {\n      \"repositories\":[\n         {\n            \"Repositories/base_url\":\"http://s3.amazonaws.com/dev.hortonworks.com/HDP/centos5/2.x/updates/2.2.0.0\",\n            \"Repositories/repo_name\":\"HDP-UTILS\",\n            \"Repositories/repo_id\":\"HDP-UTILS-1.1.0.20\"\n         },\n         {\n            \"Repositories/base_url\":\"http://s3.amazonaws.com/dev.hortonworks.com/HDP/centos5/2.x/updates/2.2.0.0\",\n            \"Repositories/repo_name\":\"HDP\",\n            \"Repositories/repo_id\":\"HDP-2.2\"\n         }\n      ],\n      \"OperatingSystems/os_type\":\"redhat6\"\n   }\n]")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r44 = virtualinvoke $r2.<com.google.gson.JsonParser: com.google.gson.JsonElement parse(java.lang.String)>("[\n   {\n      \"repositories\":[\n         {\n            \"Repositories/base_url\":\"http://s3.amazonaws.com/dev.hortonworks.com/HDP/centos5/2.x/updates/2.2.0.0\",\n            \"Repositories/repo_name\":\"HDP-UTILS\",\n            \"Repositories/repo_id\":\"HDP-UTILS-1.1.0.20\"\n         },\n         {\n            \"Repositories/base_url\":\"http://s3.amazonaws.com/dev.hortonworks.com/HDP/centos5/2.x/updates/2.2.0.0\",\n            \"Repositories/repo_name\":\"HDP\",\n            \"Repositories/repo_id\":\"HDP-2.2\"\n         }\n      ],\n      \"OperatingSystems/os_type\":\"redhat6\"\n   }\n]") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r3 = virtualinvoke $r44.<com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r3 = virtualinvoke $r44.<com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r45 = virtualinvoke r3.<com.google.gson.JsonArray: com.google.gson.JsonElement get(int)>(0)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r45 = virtualinvoke r3.<com.google.gson.JsonArray: com.google.gson.JsonElement get(int)>(0) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r4 = virtualinvoke $r45.<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r4 = virtualinvoke $r45.<com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r46 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r46 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke r4.<com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.Boolean)>("OperatingSystems/ambari_managed_repositories", $r46)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke r4.<com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.Boolean)>("OperatingSystems/ambari_managed_repositories", $r46) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r5 = virtualinvoke r3.<com.google.gson.JsonArray: java.lang.String toString()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r5 = virtualinvoke r3.<com.google.gson.JsonArray: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r6 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type ClusterStackVersion>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r6 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type ClusterStackVersion> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r47 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "org/apache/ambari/server/controller/AmbariManagementController")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r47 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "org/apache/ambari/server/controller/AmbariManagementController") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r7 = (org.apache.ambari.server.controller.AmbariManagementController) $r47
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r7 = (org.apache.ambari.server.controller.AmbariManagementController) $r47 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r48 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/Clusters")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r48 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/Clusters") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r8 = (org.apache.ambari.server.state.Clusters) $r48
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r8 = (org.apache.ambari.server.state.Clusters) $r48 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r49 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/Cluster")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r49 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/Cluster") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r9 = (org.apache.ambari.server.state.Cluster) $r49
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r9 = (org.apache.ambari.server.state.Cluster) $r49 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r50 = new org.apache.ambari.server.state.StackId
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r50 = new org.apache.ambari.server.state.StackId >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r50.<org.apache.ambari.server.state.StackId: void <init>(java.lang.String,java.lang.String)>("HDP", "2.0.1")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r50.<org.apache.ambari.server.state.StackId: void <init>(java.lang.String,java.lang.String)>("HDP", "2.0.1") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r10 = $r50
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r10 = $r50 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r51 = new java.io.File
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r51 = new java.io.File >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r51.<java.io.File: void <init>(java.lang.String)>("src/test/resources/hbase_version_test.xml")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r51.<java.io.File: void <init>(java.lang.String)>("src/test/resources/hbase_version_test.xml") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r11 = $r51
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r11 = $r51 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r52 = new org.apache.ambari.server.orm.entities.RepositoryVersionEntity
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r52 = new org.apache.ambari.server.orm.entities.RepositoryVersionEntity >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r52.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r52.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r12 = $r52
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r12 = $r52 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r53 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r53 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke r12.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void setId(java.lang.Long)>($r53)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke r12.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void setId(java.lang.Long)>($r53) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke r12.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void setOperatingSystems(java.lang.String)>(r5)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke r12.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void setOperatingSystems(java.lang.String)>(r5) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r54 = new java.io.FileInputStream
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r54 = new java.io.FileInputStream >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r54.<java.io.FileInputStream: void <init>(java.io.File)>(r11)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r54.<java.io.FileInputStream: void <init>(java.io.File)>(r11) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r55 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream)>($r54)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r55 = staticinvoke <org.apache.commons.io.IOUtils: java.lang.String toString(java.io.InputStream)>($r54) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke r12.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void setVersionXml(java.lang.String)>($r55)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke r12.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void setVersionXml(java.lang.String)>($r55) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke r12.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void setVersionXsd(java.lang.String)>("version_definition.xsd")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke r12.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void setVersionXsd(java.lang.String)>("version_definition.xsd") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r56 = <org.apache.ambari.server.state.RepositoryType: org.apache.ambari.server.state.RepositoryType STANDARD>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r56 = <org.apache.ambari.server.state.RepositoryType: org.apache.ambari.server.state.RepositoryType STANDARD> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke r12.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void setType(org.apache.ambari.server.state.RepositoryType)>($r56)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke r12.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void setType(org.apache.ambari.server.state.RepositoryType)>($r56) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r57 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.api.services.AmbariMetaInfo ambariMetaInfo>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r57 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.api.services.AmbariMetaInfo ambariMetaInfo> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r58 = virtualinvoke $r57.<org.apache.ambari.server.api.services.AmbariMetaInfo: org.apache.ambari.server.state.ComponentInfo getComponent(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("HDP", "2.1.1", "HBASE", "HBASE_MASTER")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r58 = virtualinvoke $r57.<org.apache.ambari.server.api.services.AmbariMetaInfo: org.apache.ambari.server.state.ComponentInfo getComponent(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("HDP", "2.1.1", "HBASE", "HBASE_MASTER") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke $r58.<org.apache.ambari.server.state.ComponentInfo: void setVersionAdvertised(boolean)>(1)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke $r58.<org.apache.ambari.server.state.ComponentInfo: void setVersionAdvertised(boolean)>(1) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r59 = new java.util.HashMap
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r59 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r59.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r59.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r13 = $r59
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r13 = $r59 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : b0 = 10
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : b0 = 10 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : i1 = 0
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : i1 = 0 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : if i1 >= b0
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : if i1 >= b0 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r60 = new java.lang.StringBuilder
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : if i1 >= b0 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r84 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/Service")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r84 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/Service") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r85 = (org.apache.ambari.server.state.Service) $r84
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r85 = (org.apache.ambari.server.state.Service) $r84 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r86 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/Service")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r86 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/state/Service") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r87 = (org.apache.ambari.server.state.Service) $r86
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r87 = (org.apache.ambari.server.state.Service) $r86 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r88 = interfaceinvoke r85.<org.apache.ambari.server.state.Service: java.lang.String getName()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r88 = interfaceinvoke r85.<org.apache.ambari.server.state.Service: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r89 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r88)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r89 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r88) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r90 = interfaceinvoke $r89.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("HDFS")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r90 = interfaceinvoke $r89.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("HDFS") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r90.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r90.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r92 = interfaceinvoke r87.<org.apache.ambari.server.state.Service: java.lang.String getName()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r92 = interfaceinvoke r87.<org.apache.ambari.server.state.Service: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r93 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r92)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r93 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r92) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r94 = interfaceinvoke $r93.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("HBASE")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r94 = interfaceinvoke $r93.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("HBASE") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r94.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r94.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r96 = interfaceinvoke r85.<org.apache.ambari.server.state.Service: java.util.Map getServiceComponents()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r96 = interfaceinvoke r85.<org.apache.ambari.server.state.Service: java.util.Map getServiceComponents()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r97 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r96)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r97 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r96) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r98 = new java.util.HashMap
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r98 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r98.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r98.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r97.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r98)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r97.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r98) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r100 = interfaceinvoke r87.<org.apache.ambari.server.state.Service: java.util.Map getServiceComponents()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r100 = interfaceinvoke r87.<org.apache.ambari.server.state.Service: java.util.Map getServiceComponents()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r101 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r100)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r101 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r100) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r102 = new java.util.HashMap
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r102 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r102.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r102.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r101.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r102)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r101.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r102) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r104 = new java.util.HashMap
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r104 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r104.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r104.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r105 = $r104
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r105 = $r104 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke r105.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("HDFS", r85)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke r105.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("HDFS", r85) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke r105.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("HBASE", r87)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke r105.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("HBASE", r87) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r108 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "org/apache/ambari/server/state/ServiceComponentHost")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r108 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "org/apache/ambari/server/state/ServiceComponentHost") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r16 = (org.apache.ambari.server.state.ServiceComponentHost) $r108
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r16 = (org.apache.ambari.server.state.ServiceComponentHost) $r108 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r109 = interfaceinvoke r16.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r109 = interfaceinvoke r16.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r110 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r109)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r110 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r109) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r111 = interfaceinvoke $r110.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("HDFS")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r111 = interfaceinvoke $r110.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("HDFS") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r111.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r111.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r113 = interfaceinvoke r16.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r113 = interfaceinvoke r16.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r114 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r113)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r114 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r113) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r115 = interfaceinvoke $r114.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("DATANODE")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r115 = interfaceinvoke $r114.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("DATANODE") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r115.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r115.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r117 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "org/apache/ambari/server/state/ServiceComponentHost")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r117 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "org/apache/ambari/server/state/ServiceComponentHost") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r17 = (org.apache.ambari.server.state.ServiceComponentHost) $r117
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r17 = (org.apache.ambari.server.state.ServiceComponentHost) $r117 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r118 = interfaceinvoke r17.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r118 = interfaceinvoke r17.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r119 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r118)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r119 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r118) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r120 = interfaceinvoke $r119.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("HDFS")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r120 = interfaceinvoke $r119.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("HDFS") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r120.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r120.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r122 = interfaceinvoke r17.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r122 = interfaceinvoke r17.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r123 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r122)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r123 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r122) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r124 = interfaceinvoke $r123.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("NAMENODE")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r124 = interfaceinvoke $r123.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("NAMENODE") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r124.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r124.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r126 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "org/apache/ambari/server/state/ServiceComponentHost")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r126 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "org/apache/ambari/server/state/ServiceComponentHost") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r18 = (org.apache.ambari.server.state.ServiceComponentHost) $r126
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r18 = (org.apache.ambari.server.state.ServiceComponentHost) $r126 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r127 = interfaceinvoke r18.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r127 = interfaceinvoke r18.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r128 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r127)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r128 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r127) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r129 = interfaceinvoke $r128.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("HBASE")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r129 = interfaceinvoke $r128.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("HBASE") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r129.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r129.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r131 = interfaceinvoke r18.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r131 = interfaceinvoke r18.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r132 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r131)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r132 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r131) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r133 = interfaceinvoke $r132.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("HBASE_MASTER")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r133 = interfaceinvoke $r132.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("HBASE_MASTER") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r133.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r133.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r135 = newarray (org.apache.ambari.server.state.ServiceComponentHost)[2]
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r135 = newarray (org.apache.ambari.server.state.ServiceComponentHost)[2] >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r135[0] = r16
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r135[0] = r16 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r135[1] = r17
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r135[1] = r17 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r19 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r135)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r19 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r135) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r136 = newarray (org.apache.ambari.server.state.ServiceComponentHost)[1]
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r136 = newarray (org.apache.ambari.server.state.ServiceComponentHost)[1] >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r136[0] = r16
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r136[0] = r16 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r20 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r136)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r20 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r136) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r137 = newarray (org.apache.ambari.server.state.ServiceComponentHost)[1]
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r137 = newarray (org.apache.ambari.server.state.ServiceComponentHost)[1] >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r137[0] = r18
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r137[0] = r18 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r21 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r137)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r21 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r137) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r138 = new org.apache.ambari.server.state.ServiceOsSpecific$Package
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r138 = new org.apache.ambari.server.state.ServiceOsSpecific$Package >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r138.<org.apache.ambari.server.state.ServiceOsSpecific$Package: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r138.<org.apache.ambari.server.state.ServiceOsSpecific$Package: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r22 = $r138
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r22 = $r138 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke r22.<org.apache.ambari.server.state.ServiceOsSpecific$Package: void setName(java.lang.String)>("hdfs")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke r22.<org.apache.ambari.server.state.ServiceOsSpecific$Package: void setName(java.lang.String)>("hdfs") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r23 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r22)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r23 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r22) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r139 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/actionmanager/ActionManager")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r139 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/actionmanager/ActionManager") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r24 = (org.apache.ambari.server.actionmanager.ActionManager) $r139
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r24 = (org.apache.ambari.server.actionmanager.ActionManager) $r139 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r140 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/controller/RequestStatusResponse")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r140 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/controller/RequestStatusResponse") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r25 = (org.apache.ambari.server.controller.RequestStatusResponse) $r140
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r25 = (org.apache.ambari.server.controller.RequestStatusResponse) $r140 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r141 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/controller/ResourceProviderFactory")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r141 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/controller/ResourceProviderFactory") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r26 = (org.apache.ambari.server.controller.ResourceProviderFactory) $r141
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r26 = (org.apache.ambari.server.controller.ResourceProviderFactory) $r141 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r142 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r142 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/controller/internal/ClusterStackVersionResourceProvider") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r27 = (org.apache.ambari.server.controller.spi.ResourceProvider) $r142
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r27 = (org.apache.ambari.server.controller.spi.ResourceProvider) $r142 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.apache.ambari.server.controller.internal.AbstractControllerResourceProvider: void init(org.apache.ambari.server.controller.ResourceProviderFactory)>(r26)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.apache.ambari.server.controller.internal.AbstractControllerResourceProvider: void init(org.apache.ambari.server.controller.ResourceProviderFactory)>(r26) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r143 = new java.util.HashMap
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r143 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r143.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r143.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r28 = $r143
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r28 = $r143 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r144 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.state.ConfigHelper configHelper>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r144 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.state.ConfigHelper configHelper> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r145 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "org/apache/ambari/server/state/cluster/ClusterImpl")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r145 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "org/apache/ambari/server/state/cluster/ClusterImpl") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r146 = (org.apache.ambari.server.state.Cluster) $r145
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r146 = (org.apache.ambari.server.state.Cluster) $r145 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r147 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r147 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r148 = (java.lang.String) $r147
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r148 = (java.lang.String) $r147 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r149 = virtualinvoke $r144.<org.apache.ambari.server.state.ConfigHelper: java.util.Map getEffectiveDesiredTags(org.apache.ambari.server.state.Cluster,java.lang.String)>($r146, $r148)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r149 = virtualinvoke $r144.<org.apache.ambari.server.state.ConfigHelper: java.util.Map getEffectiveDesiredTags(org.apache.ambari.server.state.Cluster,java.lang.String)>($r146, $r148) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r150 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r149)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r150 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r149) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r150.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r28)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r150.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r28) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r152 = interfaceinvoke r7.<org.apache.ambari.server.controller.AmbariManagementController: org.apache.ambari.server.state.Clusters getClusters()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r152 = interfaceinvoke r7.<org.apache.ambari.server.controller.AmbariManagementController: org.apache.ambari.server.state.Clusters getClusters()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r153 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r152)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r153 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r152) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r154 = interfaceinvoke $r153.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r8)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r154 = interfaceinvoke $r153.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r154.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r154.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r156 = interfaceinvoke r7.<org.apache.ambari.server.controller.AmbariManagementController: org.apache.ambari.server.api.services.AmbariMetaInfo getAmbariMetaInfo()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r156 = interfaceinvoke r7.<org.apache.ambari.server.controller.AmbariManagementController: org.apache.ambari.server.api.services.AmbariMetaInfo getAmbariMetaInfo()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r157 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r156)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r157 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r156) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r158 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.api.services.AmbariMetaInfo ambariMetaInfo>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r158 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.api.services.AmbariMetaInfo ambariMetaInfo> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r159 = interfaceinvoke $r157.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r158)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r159 = interfaceinvoke $r157.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r158) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r159.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r159.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r161 = interfaceinvoke r7.<org.apache.ambari.server.controller.AmbariManagementController: java.lang.String getAuthName()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r161 = interfaceinvoke r7.<org.apache.ambari.server.controller.AmbariManagementController: java.lang.String getAuthName()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r162 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r161)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r162 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r161) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r163 = interfaceinvoke $r162.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("admin")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r163 = interfaceinvoke $r162.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("admin") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r163.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r163.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r165 = interfaceinvoke r7.<org.apache.ambari.server.controller.AmbariManagementController: org.apache.ambari.server.actionmanager.ActionManager getActionManager()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r165 = interfaceinvoke r7.<org.apache.ambari.server.controller.AmbariManagementController: org.apache.ambari.server.actionmanager.ActionManager getActionManager()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r166 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r165)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r166 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r165) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r167 = interfaceinvoke $r166.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r24)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r167 = interfaceinvoke $r166.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r24) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r167.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r167.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r169 = interfaceinvoke r7.<org.apache.ambari.server.controller.AmbariManagementController: java.lang.String getJdkResourceUrl()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r169 = interfaceinvoke r7.<org.apache.ambari.server.controller.AmbariManagementController: java.lang.String getJdkResourceUrl()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r170 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r169)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r170 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r169) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r171 = interfaceinvoke $r170.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("/JdkResourceUrl")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r171 = interfaceinvoke $r170.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("/JdkResourceUrl") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r171.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r171.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r173 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "org/apache/ambari/server/state/ServiceInfo")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r173 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "org/apache/ambari/server/state/ServiceInfo") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r174 = (org.apache.ambari.server.state.ServiceInfo) $r173
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r174 = (org.apache.ambari.server.state.ServiceInfo) $r173 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r175 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r175 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r176 = (java.util.Map) $r175
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r176 = (java.util.Map) $r175 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r177 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r177 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r178 = (java.lang.String) $r177
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r178 = (java.lang.String) $r177 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r179 = interfaceinvoke r7.<org.apache.ambari.server.controller.AmbariManagementController: java.util.List getPackagesForServiceHost(org.apache.ambari.server.state.ServiceInfo,java.util.Map,java.lang.String)>($r174, $r176, $r178)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r179 = interfaceinvoke r7.<org.apache.ambari.server.controller.AmbariManagementController: java.util.List getPackagesForServiceHost(org.apache.ambari.server.state.ServiceInfo,java.util.Map,java.lang.String)>($r174, $r176, $r178) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r180 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r179)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r180 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r179) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r181 = interfaceinvoke $r180.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r23)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r181 = interfaceinvoke $r180.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r23) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r181.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r181.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r183 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r183 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r184 = (java.util.Set) $r183
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r184 = (java.util.Set) $r183 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r185 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r185 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r186 = (java.util.Map) $r185
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r186 = (java.util.Map) $r185 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r187 = staticinvoke <org.easymock.EasyMock: java.lang.Object eq(java.lang.Object)>(r7)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r187 = staticinvoke <org.easymock.EasyMock: java.lang.Object eq(java.lang.Object)>(r7) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r188 = (org.apache.ambari.server.controller.AmbariManagementController) $r187
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r188 = (org.apache.ambari.server.controller.AmbariManagementController) $r187 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r189 = interfaceinvoke r26.<org.apache.ambari.server.controller.ResourceProviderFactory: org.apache.ambari.server.controller.spi.ResourceProvider getHostResourceProvider(java.util.Set,java.util.Map,org.apache.ambari.server.controller.AmbariManagementController)>($r184, $r186, $r188)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r189 = interfaceinvoke r26.<org.apache.ambari.server.controller.ResourceProviderFactory: org.apache.ambari.server.controller.spi.ResourceProvider getHostResourceProvider(java.util.Set,java.util.Map,org.apache.ambari.server.controller.AmbariManagementController)>($r184, $r186, $r188) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r190 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r189)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r190 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r189) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r191 = interfaceinvoke $r190.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r27)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r191 = interfaceinvoke $r190.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r27) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r191.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r191.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r193 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r193 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r194 = (java.lang.String) $r193
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r194 = (java.lang.String) $r193 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r195 = interfaceinvoke r8.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>($r194)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r195 = interfaceinvoke r8.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>($r194) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r196 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r195)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r196 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r195) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r196.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r9)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r196.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r9) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r198 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r198 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r199 = (java.lang.String) $r198
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r199 = (java.lang.String) $r198 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r200 = interfaceinvoke r8.<org.apache.ambari.server.state.Clusters: java.util.Map getHostsForCluster(java.lang.String)>($r199)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r200 = interfaceinvoke r8.<org.apache.ambari.server.state.Clusters: java.util.Map getHostsForCluster(java.lang.String)>($r199) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r201 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r200)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r201 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r200) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r202 = interfaceinvoke $r201.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r13)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r202 = interfaceinvoke $r201.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r13) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r202.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r202.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r29 = "Cluster100"
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r29 = "Cluster100" >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $l3 = interfaceinvoke r9.<org.apache.ambari.server.state.Cluster: long getClusterId()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $l3 = interfaceinvoke r9.<org.apache.ambari.server.state.Cluster: long getClusterId()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r204 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r204 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r205 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r204)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r205 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r204) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r206 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r206 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r207 = interfaceinvoke $r205.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r206)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r207 = interfaceinvoke $r205.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r206) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r207.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r207.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r209 = interfaceinvoke r9.<org.apache.ambari.server.state.Cluster: java.util.Collection getHosts()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r209 = interfaceinvoke r9.<org.apache.ambari.server.state.Cluster: java.util.Collection getHosts()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r210 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r209)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r210 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r209) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r211 = interfaceinvoke r13.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r211 = interfaceinvoke r13.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r212 = interfaceinvoke $r210.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r211)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r212 = interfaceinvoke $r210.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r211) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r212.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters atLeastOnce()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r212.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters atLeastOnce()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r214 = interfaceinvoke r9.<org.apache.ambari.server.state.Cluster: java.util.Map getServices()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r214 = interfaceinvoke r9.<org.apache.ambari.server.state.Cluster: java.util.Map getServices()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r215 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r214)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r215 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r214) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r216 = interfaceinvoke $r215.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r105)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r216 = interfaceinvoke $r215.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r105) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r216.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r216.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r218 = interfaceinvoke r9.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.StackId getCurrentStackVersion()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r218 = interfaceinvoke r9.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.StackId getCurrentStackVersion()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r219 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r218)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r219 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r218) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r219.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r10)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r219.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r10) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r221 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r221 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r222 = (java.lang.String) $r221
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r222 = (java.lang.String) $r221 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r223 = interfaceinvoke r9.<org.apache.ambari.server.state.Cluster: java.util.List getServiceComponentHosts(java.lang.String)>($r222)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r223 = interfaceinvoke r9.<org.apache.ambari.server.state.Cluster: java.util.List getServiceComponentHosts(java.lang.String)>($r222) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r224 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r223)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r224 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r223) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r225 = new org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest$6
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r225 = new org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest$6 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r225.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest$6: void <init>(org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest,java.util.List,java.util.List,java.util.List)>(r0, r20, r21, r19)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r225.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest$6: void <init>(org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest,java.util.List,java.util.List,java.util.List)>(r0, r20, r21, r19) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r226 = interfaceinvoke $r224.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andAnswer(org.easymock.IAnswer)>($r225)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r226 = interfaceinvoke $r224.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andAnswer(org.easymock.IAnswer)>($r225) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r226.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r226.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r228 = new org.apache.ambari.server.agent.ExecutionCommand
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r228 = new org.apache.ambari.server.agent.ExecutionCommand >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r228.<org.apache.ambari.server.agent.ExecutionCommand: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r228.<org.apache.ambari.server.agent.ExecutionCommand: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r30 = $r228
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r30 = $r228 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r229 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/actionmanager/ExecutionCommandWrapper")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r229 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/actionmanager/ExecutionCommandWrapper") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r31 = (org.apache.ambari.server.actionmanager.ExecutionCommandWrapper) $r229
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r31 = (org.apache.ambari.server.actionmanager.ExecutionCommandWrapper) $r229 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r230 = virtualinvoke r31.<org.apache.ambari.server.actionmanager.ExecutionCommandWrapper: org.apache.ambari.server.agent.ExecutionCommand getExecutionCommand()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r230 = virtualinvoke r31.<org.apache.ambari.server.actionmanager.ExecutionCommandWrapper: org.apache.ambari.server.agent.ExecutionCommand getExecutionCommand()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r231 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r230)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r231 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r230) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r232 = interfaceinvoke $r231.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r30)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r232 = interfaceinvoke $r231.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r30) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r232.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r232.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r234 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/actionmanager/Stage")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r234 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "org/apache/ambari/server/actionmanager/Stage") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r32 = (org.apache.ambari.server.actionmanager.Stage) $r234
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r32 = (org.apache.ambari.server.actionmanager.Stage) $r234 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r235 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r235 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r236 = (java.lang.String) $r235
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r236 = (java.lang.String) $r235 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r237 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r237 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r238 = (java.lang.String) $r237
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r238 = (java.lang.String) $r237 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r239 = virtualinvoke r32.<org.apache.ambari.server.actionmanager.Stage: org.apache.ambari.server.actionmanager.ExecutionCommandWrapper getExecutionCommandWrapper(java.lang.String,java.lang.String)>($r236, $r238)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r239 = virtualinvoke r32.<org.apache.ambari.server.actionmanager.Stage: org.apache.ambari.server.actionmanager.ExecutionCommandWrapper getExecutionCommandWrapper(java.lang.String,java.lang.String)>($r236, $r238) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r240 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r239)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r240 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r239) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r241 = interfaceinvoke $r240.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r31)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r241 = interfaceinvoke $r240.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r31) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r241.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r241.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r243 = new java.util.HashMap
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r243 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r243.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r243.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r33 = $r243
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r33 = $r243 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r244 = virtualinvoke r32.<org.apache.ambari.server.actionmanager.Stage: java.util.Map getSuccessFactors()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r244 = virtualinvoke r32.<org.apache.ambari.server.actionmanager.Stage: java.util.Map getSuccessFactors()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r245 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r244)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r245 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r244) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r246 = interfaceinvoke $r245.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r33)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r246 = interfaceinvoke $r245.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r33) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r246.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters atLeastOnce()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r246.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters atLeastOnce()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r248 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.actionmanager.StageFactory stageFactory>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r248 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.actionmanager.StageFactory stageFactory> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $l4 = staticinvoke <org.easymock.EasyMock: long anyLong()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $l4 = staticinvoke <org.easymock.EasyMock: long anyLong()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r249 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r249 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r250 = (java.lang.String) $r249
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r250 = (java.lang.String) $r249 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r251 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r251 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r252 = (java.lang.String) $r251
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r252 = (java.lang.String) $r251 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $l5 = staticinvoke <org.easymock.EasyMock: long anyLong()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $l5 = staticinvoke <org.easymock.EasyMock: long anyLong()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r253 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r253 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r254 = (java.lang.String) $r253
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r254 = (java.lang.String) $r253 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r255 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r255 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r256 = (java.lang.String) $r255
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r256 = (java.lang.String) $r255 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r257 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r257 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r258 = (java.lang.String) $r257
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r258 = (java.lang.String) $r257 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r259 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r259 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r260 = (java.lang.String) $r259
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r260 = (java.lang.String) $r259 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r261 = interfaceinvoke $r248.<org.apache.ambari.server.actionmanager.StageFactory: org.apache.ambari.server.actionmanager.Stage createNew(long,java.lang.String,java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($l4, $r250, $r252, $l5, $r254, $r256, $r258, $r260)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r261 = interfaceinvoke $r248.<org.apache.ambari.server.actionmanager.StageFactory: org.apache.ambari.server.actionmanager.Stage createNew(long,java.lang.String,java.lang.String,long,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>($l4, $r250, $r252, $l5, $r254, $r256, $r258, $r260) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r262 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r261)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r262 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r261) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r263 = interfaceinvoke $r262.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r32)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r263 = interfaceinvoke $r262.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r32) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $i6 = b0 / 2
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $i6 = b0 / 2 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $d0 = (double) $i6
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $d0 = (double) $i6 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $i7 = (int) $d1
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $i7 = (int) $d1 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r263.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters times(int)>($i7)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r263.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters times(int)>($i7) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r265 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.orm.dao.RepositoryVersionDAO repositoryVersionDAOMock>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r265 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.orm.dao.RepositoryVersionDAO repositoryVersionDAOMock> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r266 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "org/apache/ambari/server/state/StackId")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r266 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "org/apache/ambari/server/state/StackId") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r267 = (org.apache.ambari.server.state.StackId) $r266
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r267 = (org.apache.ambari.server.state.StackId) $r266 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r268 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r268 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r269 = (java.lang.String) $r268
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r269 = (java.lang.String) $r268 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r270 = virtualinvoke $r265.<org.apache.ambari.server.orm.dao.RepositoryVersionDAO: org.apache.ambari.server.orm.entities.RepositoryVersionEntity findByStackAndVersion(org.apache.ambari.server.state.StackId,java.lang.String)>($r267, $r269)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r270 = virtualinvoke $r265.<org.apache.ambari.server.orm.dao.RepositoryVersionDAO: org.apache.ambari.server.orm.entities.RepositoryVersionEntity findByStackAndVersion(org.apache.ambari.server.state.StackId,java.lang.String)>($r267, $r269) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r271 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r270)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r271 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r270) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r271.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r12)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r271.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r12) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r34 = staticinvoke <org.easymock.Capture: org.easymock.Capture newInstance()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r34 = staticinvoke <org.easymock.Capture: org.easymock.Capture newInstance()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r35 = staticinvoke <org.easymock.Capture: org.easymock.Capture newInstance()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r35 = staticinvoke <org.easymock.Capture: org.easymock.Capture newInstance()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r273 = staticinvoke <org.easymock.EasyMock: java.lang.Object capture(org.easymock.Capture)>(r34)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r273 = staticinvoke <org.easymock.EasyMock: java.lang.Object capture(org.easymock.Capture)>(r34) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r274 = (org.apache.ambari.server.actionmanager.Request) $r273
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r274 = (org.apache.ambari.server.actionmanager.Request) $r273 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r275 = staticinvoke <org.easymock.EasyMock: java.lang.Object capture(org.easymock.Capture)>(r35)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r275 = staticinvoke <org.easymock.EasyMock: java.lang.Object capture(org.easymock.Capture)>(r35) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276 = (org.apache.ambari.server.controller.ExecuteActionRequest) $r275
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r276 = (org.apache.ambari.server.controller.ExecuteActionRequest) $r275 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke r24.<org.apache.ambari.server.actionmanager.ActionManager: void sendActions(org.apache.ambari.server.actionmanager.Request,org.apache.ambari.server.controller.ExecuteActionRequest)>($r274, $r276)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke r24.<org.apache.ambari.server.actionmanager.ActionManager: void sendActions(org.apache.ambari.server.actionmanager.Request,org.apache.ambari.server.controller.ExecuteActionRequest)>($r274, $r276) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r277 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expectLastCall()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r277 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expectLastCall()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r277.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters atLeastOnce()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r277.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters atLeastOnce()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $l8 = staticinvoke <org.easymock.EasyMock: long anyLong()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $l8 = staticinvoke <org.easymock.EasyMock: long anyLong()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r279 = virtualinvoke r24.<org.apache.ambari.server.actionmanager.ActionManager: java.util.List getRequestTasks(long)>($l8)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r279 = virtualinvoke r24.<org.apache.ambari.server.actionmanager.ActionManager: java.util.List getRequestTasks(long)>($l8) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r280 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r279)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r280 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r279) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r281 = staticinvoke <java.util.Collections: java.util.List emptyList()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r281 = staticinvoke <java.util.Collections: java.util.List emptyList()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r282 = interfaceinvoke $r280.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r281)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r282 = interfaceinvoke $r280.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r281) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r282.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r282.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r284 = new org.apache.ambari.server.orm.entities.ClusterEntity
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r284 = new org.apache.ambari.server.orm.entities.ClusterEntity >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r284.<org.apache.ambari.server.orm.entities.ClusterEntity: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r284.<org.apache.ambari.server.orm.entities.ClusterEntity: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r36 = $r284
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r36 = $r284 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r285 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r285 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke r36.<org.apache.ambari.server.orm.entities.ClusterEntity: void setClusterId(java.lang.Long)>($r285)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke r36.<org.apache.ambari.server.orm.entities.ClusterEntity: void setClusterId(java.lang.Long)>($r285) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke r36.<org.apache.ambari.server.orm.entities.ClusterEntity: void setClusterName(java.lang.String)>(r29)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : virtualinvoke r36.<org.apache.ambari.server.orm.entities.ClusterEntity: void setClusterName(java.lang.String)>(r29) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r286 = new org.apache.ambari.server.orm.entities.ClusterVersionEntity
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r286 = new org.apache.ambari.server.orm.entities.ClusterVersionEntity >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r287 = <org.apache.ambari.server.state.RepositoryVersionState: org.apache.ambari.server.state.RepositoryVersionState INSTALL_FAILED>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r287 = <org.apache.ambari.server.state.RepositoryVersionState: org.apache.ambari.server.state.RepositoryVersionState INSTALL_FAILED> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r286.<org.apache.ambari.server.orm.entities.ClusterVersionEntity: void <init>(org.apache.ambari.server.orm.entities.ClusterEntity,org.apache.ambari.server.orm.entities.RepositoryVersionEntity,org.apache.ambari.server.state.RepositoryVersionState,long,java.lang.String)>(r36, r12, $r287, 0L, "")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r286.<org.apache.ambari.server.orm.entities.ClusterVersionEntity: void <init>(org.apache.ambari.server.orm.entities.ClusterEntity,org.apache.ambari.server.orm.entities.RepositoryVersionEntity,org.apache.ambari.server.state.RepositoryVersionState,long,java.lang.String)>(r36, r12, $r287, 0L, "") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r37 = $r286
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r37 = $r286 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r288 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.orm.dao.ClusterVersionDAO clusterVersionDAO>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r288 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.orm.dao.ClusterVersionDAO clusterVersionDAO> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r289 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r289 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r290 = (java.lang.String) $r289
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r290 = (java.lang.String) $r289 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r291 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "org/apache/ambari/server/state/StackId")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r291 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "org/apache/ambari/server/state/StackId") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r292 = (org.apache.ambari.server.state.StackId) $r291
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r292 = (org.apache.ambari.server.state.StackId) $r291 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r293 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r293 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r294 = (java.lang.String) $r293
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r294 = (java.lang.String) $r293 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r295 = virtualinvoke $r288.<org.apache.ambari.server.orm.dao.ClusterVersionDAO: org.apache.ambari.server.orm.entities.ClusterVersionEntity findByClusterAndStackAndVersion(java.lang.String,org.apache.ambari.server.state.StackId,java.lang.String)>($r290, $r292, $r294)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r295 = virtualinvoke $r288.<org.apache.ambari.server.orm.dao.ClusterVersionDAO: org.apache.ambari.server.orm.entities.ClusterVersionEntity findByClusterAndStackAndVersion(java.lang.String,org.apache.ambari.server.state.StackId,java.lang.String)>($r290, $r292, $r294) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r296 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r295)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r296 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r295) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r296.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r37)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r296.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r37) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r298 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: com.google.inject.Injector injector>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r298 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: com.google.inject.Injector injector> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r299 = interfaceinvoke $r298.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "org/apache/ambari/server/topology/TopologyManager")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r299 = interfaceinvoke $r298.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "org/apache/ambari/server/topology/TopologyManager") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r300 = (org.apache.ambari.server.topology.TopologyManager) $r299
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r300 = (org.apache.ambari.server.topology.TopologyManager) $r299 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.apache.ambari.server.utils.StageUtils: void setTopologyManager(org.apache.ambari.server.topology.TopologyManager)>($r300)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.apache.ambari.server.utils.StageUtils: void setTopologyManager(org.apache.ambari.server.topology.TopologyManager)>($r300) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r301 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: com.google.inject.Injector injector>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r301 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: com.google.inject.Injector injector> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r302 = interfaceinvoke $r301.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "org/apache/ambari/server/configuration/Configuration")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r302 = interfaceinvoke $r301.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "org/apache/ambari/server/configuration/Configuration") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r303 = (org.apache.ambari.server.configuration.Configuration) $r302
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r303 = (org.apache.ambari.server.configuration.Configuration) $r302 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.apache.ambari.server.utils.StageUtils: void setConfiguration(org.apache.ambari.server.configuration.Configuration)>($r303)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.apache.ambari.server.utils.StageUtils: void setConfiguration(org.apache.ambari.server.configuration.Configuration)>($r303) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r304 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.orm.dao.ClusterVersionDAO clusterVersionDAO>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r304 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.orm.dao.ClusterVersionDAO clusterVersionDAO> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r305 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r305 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "java/lang/String") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r306 = (java.lang.String) $r305
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r306 = (java.lang.String) $r305 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r307 = virtualinvoke $r304.<org.apache.ambari.server.orm.dao.ClusterVersionDAO: java.util.List findByCluster(java.lang.String)>($r306)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r307 = virtualinvoke $r304.<org.apache.ambari.server.orm.dao.ClusterVersionDAO: java.util.List findByCluster(java.lang.String)>($r306) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r308 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r307)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r308 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r307) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r309 = staticinvoke <java.util.Collections: java.util.List emptyList()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r309 = staticinvoke <java.util.Collections: java.util.List emptyList()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r310 = interfaceinvoke $r308.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r309)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r310 = interfaceinvoke $r308.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r309) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r310.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters once()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r310.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters once()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312 = newarray (java.lang.Object)[18]
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312 = newarray (java.lang.Object)[18] >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[0] = r7
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[0] = r7 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[1] = r25
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[1] = r25 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[2] = r8
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[2] = r8 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[3] = r85
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[3] = r85 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[4] = r87
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[4] = r87 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[5] = r26
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[5] = r26 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[6] = r27
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[6] = r27 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[7] = r9
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[7] = r9 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r313 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.orm.dao.RepositoryVersionDAO repositoryVersionDAOMock>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r313 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.orm.dao.RepositoryVersionDAO repositoryVersionDAOMock> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[8] = $r313
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[8] = $r313 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r314 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.state.ConfigHelper configHelper>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r314 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.state.ConfigHelper configHelper> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[9] = $r314
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[9] = $r314 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[10] = r16
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[10] = r16 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[11] = r17
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[11] = r17 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[12] = r18
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[12] = r18 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[13] = r24
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[13] = r24 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[14] = r31
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[14] = r31 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[15] = r32
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[15] = r32 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r315 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.actionmanager.StageFactory stageFactory>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r315 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.actionmanager.StageFactory stageFactory> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[16] = $r315
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[16] = $r315 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r316 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.orm.dao.ClusterVersionDAO clusterVersionDAO>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r316 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.orm.dao.ClusterVersionDAO clusterVersionDAO> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[17] = $r316
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r312[17] = $r316 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r312)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r312) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r317 = staticinvoke <org.apache.ambari.server.controller.utilities.PropertyHelper: java.util.Set getPropertyIds(org.apache.ambari.server.controller.spi.Resource$Type)>(r6)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r317 = staticinvoke <org.apache.ambari.server.controller.utilities.PropertyHelper: java.util.Set getPropertyIds(org.apache.ambari.server.controller.spi.Resource$Type)>(r6) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r318 = staticinvoke <org.apache.ambari.server.controller.utilities.PropertyHelper: java.util.Map getKeyPropertyIds(org.apache.ambari.server.controller.spi.Resource$Type)>(r6)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r318 = staticinvoke <org.apache.ambari.server.controller.utilities.PropertyHelper: java.util.Map getKeyPropertyIds(org.apache.ambari.server.controller.spi.Resource$Type)>(r6) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r38 = staticinvoke <org.apache.ambari.server.controller.internal.AbstractControllerResourceProvider: org.apache.ambari.server.controller.spi.ResourceProvider getResourceProvider(org.apache.ambari.server.controller.spi.Resource$Type,java.util.Set,java.util.Map,org.apache.ambari.server.controller.AmbariManagementController)>(r6, $r317, $r318, r7)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r38 = staticinvoke <org.apache.ambari.server.controller.internal.AbstractControllerResourceProvider: org.apache.ambari.server.controller.spi.ResourceProvider getResourceProvider(org.apache.ambari.server.controller.spi.Resource$Type,java.util.Set,java.util.Map,org.apache.ambari.server.controller.AmbariManagementController)>(r6, $r317, $r318, r7) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r319 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: com.google.inject.Injector injector>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r319 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: com.google.inject.Injector injector> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r319.<com.google.inject.Injector: void injectMembers(java.lang.Object)>(r38)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r319.<com.google.inject.Injector: void injectMembers(java.lang.Object)>(r38) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r320 = new java.util.LinkedHashSet
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r320 = new java.util.LinkedHashSet >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r320.<java.util.LinkedHashSet: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r320.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r39 = $r320
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r39 = $r320 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r321 = new java.util.LinkedHashMap
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r321 = new java.util.LinkedHashMap >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r321.<java.util.LinkedHashMap: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r321.<java.util.LinkedHashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r40 = $r321
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r40 = $r321 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r322 = <org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProvider: java.lang.String CLUSTER_STACK_VERSION_CLUSTER_NAME_PROPERTY_ID>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r322 = <org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProvider: java.lang.String CLUSTER_STACK_VERSION_CLUSTER_NAME_PROPERTY_ID> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke r40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r322, "Cluster100")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke r40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r322, "Cluster100") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r324 = <org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProvider: java.lang.String CLUSTER_STACK_VERSION_REPOSITORY_VERSION_PROPERTY_ID>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r324 = <org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProvider: java.lang.String CLUSTER_STACK_VERSION_REPOSITORY_VERSION_PROPERTY_ID> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke r40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r324, "2.2.0.1-885")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke r40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r324, "2.2.0.1-885") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r326 = <org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProvider: java.lang.String CLUSTER_STACK_VERSION_STACK_PROPERTY_ID>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r326 = <org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProvider: java.lang.String CLUSTER_STACK_VERSION_STACK_PROPERTY_ID> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke r40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r326, "HDP")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke r40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r326, "HDP") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r328 = <org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProvider: java.lang.String CLUSTER_STACK_VERSION_VERSION_PROPERTY_ID>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r328 = <org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProvider: java.lang.String CLUSTER_STACK_VERSION_VERSION_PROPERTY_ID> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke r40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r328, "2.1.1")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke r40.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r328, "2.1.1") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke r39.<java.util.Set: boolean add(java.lang.Object)>(r40)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke r39.<java.util.Set: boolean add(java.lang.Object)>(r40) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r41 = staticinvoke <org.apache.ambari.server.controller.utilities.PropertyHelper: org.apache.ambari.server.controller.spi.Request getCreateRequest(java.util.Set,java.util.Map)>(r39, null)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r41 = staticinvoke <org.apache.ambari.server.controller.utilities.PropertyHelper: org.apache.ambari.server.controller.spi.Request getCreateRequest(java.util.Set,java.util.Map)>(r39, null) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r330 = staticinvoke <org.springframework.security.core.context.SecurityContextHolder: org.springframework.security.core.context.SecurityContext getContext()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r330 = staticinvoke <org.springframework.security.core.context.SecurityContextHolder: org.springframework.security.core.context.SecurityContext getContext()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r330.<org.springframework.security.core.context.SecurityContext: void setAuthentication(org.springframework.security.core.Authentication)>(r1)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r330.<org.springframework.security.core.context.SecurityContext: void setAuthentication(org.springframework.security.core.Authentication)>(r1) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r42 = interfaceinvoke r38.<org.apache.ambari.server.controller.spi.ResourceProvider: org.apache.ambari.server.controller.spi.RequestStatus createResources(org.apache.ambari.server.controller.spi.Request)>(r41)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r42 = interfaceinvoke r38.<org.apache.ambari.server.controller.spi.ResourceProvider: org.apache.ambari.server.controller.spi.RequestStatus createResources(org.apache.ambari.server.controller.spi.Request)>(r41) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r42)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>(r42) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r331 = newarray (java.lang.Object)[5]
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r331 = newarray (java.lang.Object)[5] >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r331[0] = r7
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r331[0] = r7 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r331[1] = r25
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r331[1] = r25 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r331[2] = r8
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r331[2] = r8 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r332 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.actionmanager.StageFactory stageFactory>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r332 = r0.<org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest: org.apache.ambari.server.actionmanager.StageFactory stageFactory> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r331[3] = $r332
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r331[3] = $r332 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r331[4] = r32
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r331[4] = r32 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.easymock.EasyMock: void verify(java.lang.Object[])>($r331)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.easymock.EasyMock: void verify(java.lang.Object[])>($r331) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r333 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role INSTALL_PACKAGES>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r333 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role INSTALL_PACKAGES> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r334 = interfaceinvoke r33.<java.util.Map: java.lang.Object get(java.lang.Object)>($r333)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r334 = interfaceinvoke r33.<java.util.Map: java.lang.Object get(java.lang.Object)>($r333) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r43 = (java.lang.Float) $r334
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r43 = (java.lang.Float) $r334 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r335 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.85F)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r335 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(0.85F) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r335, r43)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>($r335, r43) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r336 = virtualinvoke r30.<org.apache.ambari.server.agent.ExecutionCommand: java.util.Map getRoleParams()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r336 = virtualinvoke r30.<org.apache.ambari.server.agent.ExecutionCommand: java.util.Map getRoleParams()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $z1 = interfaceinvoke $r336.<java.util.Map: boolean containsKey(java.lang.Object)>("package_version")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $z1 = interfaceinvoke $r336.<java.util.Map: boolean containsKey(java.lang.Object)>("package_version") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z1) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r337 = virtualinvoke r30.<org.apache.ambari.server.agent.ExecutionCommand: java.util.Map getRoleParams()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r337 = virtualinvoke r30.<org.apache.ambari.server.agent.ExecutionCommand: java.util.Map getRoleParams()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $z2 = interfaceinvoke $r337.<java.util.Map: boolean containsKey(java.lang.Object)>("base_urls")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $z2 = interfaceinvoke $r337.<java.util.Map: boolean containsKey(java.lang.Object)>("base_urls") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z2) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r338 = virtualinvoke r30.<org.apache.ambari.server.agent.ExecutionCommand: java.util.Map getRoleParams()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r338 = virtualinvoke r30.<org.apache.ambari.server.agent.ExecutionCommand: java.util.Map getRoleParams()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r339 = interfaceinvoke $r338.<java.util.Map: java.lang.Object get(java.lang.Object)>("base_urls")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r339 = interfaceinvoke $r338.<java.util.Map: java.lang.Object get(java.lang.Object)>("base_urls") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("[]", $r339)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("[]", $r339) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : return
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r60 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r60.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : specialinvoke $r60.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("host")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("host") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r14 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r14 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r63 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.String,java.lang.Class)>(r14, class "org/apache/ambari/server/state/Host")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r63 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.String,java.lang.Class)>(r14, class "org/apache/ambari/server/state/Host") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r15 = (org.apache.ambari.server.state.Host) $r63
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : r15 = (org.apache.ambari.server.state.Host) $r63 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r64 = interfaceinvoke r15.<org.apache.ambari.server.state.Host: java.lang.String getHostName()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r64 = interfaceinvoke r15.<org.apache.ambari.server.state.Host: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r65 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r64)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r65 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r64) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r66 = interfaceinvoke $r65.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r14)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r66 = interfaceinvoke $r65.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r14) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r66.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r66.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r68 = interfaceinvoke r15.<org.apache.ambari.server.state.Host: java.lang.String getOsFamily()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r68 = interfaceinvoke r15.<org.apache.ambari.server.state.Host: java.lang.String getOsFamily()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r69 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r68)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r69 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r68) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r70 = interfaceinvoke $r69.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("redhat6")
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r70 = interfaceinvoke $r69.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("redhat6") >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r70.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r70.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $l2 = staticinvoke <org.easymock.EasyMock: long anyLong()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $l2 = staticinvoke <org.easymock.EasyMock: long anyLong()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r72 = interfaceinvoke r15.<org.apache.ambari.server.state.Host: org.apache.ambari.server.state.MaintenanceState getMaintenanceState(long)>($l2)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r72 = interfaceinvoke r15.<org.apache.ambari.server.state.Host: org.apache.ambari.server.state.MaintenanceState getMaintenanceState(long)>($l2) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r73 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r72)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r73 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r72) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r74 = <org.apache.ambari.server.state.MaintenanceState: org.apache.ambari.server.state.MaintenanceState OFF>
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r74 = <org.apache.ambari.server.state.MaintenanceState: org.apache.ambari.server.state.MaintenanceState OFF> >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r75 = interfaceinvoke $r73.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r74)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r75 = interfaceinvoke $r73.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r74) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r75.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r75.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r77 = interfaceinvoke r15.<org.apache.ambari.server.state.Host: java.util.List getAllHostVersions()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r77 = interfaceinvoke r15.<org.apache.ambari.server.state.Host: java.util.List getAllHostVersions()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r78 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r77)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r78 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r77) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r79 = staticinvoke <java.util.Collections: java.util.List emptyList()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r79 = staticinvoke <java.util.Collections: java.util.List emptyList()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r80 = interfaceinvoke $r78.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r79)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r80 = interfaceinvoke $r78.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r79) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r80.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke $r80.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r82 = newarray (java.lang.Object)[1]
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r82 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r82[0] = r15
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : $r82[0] = r15 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r82)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r82) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, r15)
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : interfaceinvoke r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r14, r15) >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : i1 = i1 + 1
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : i1 = i1 + 1 >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : goto [?= (branch)]
org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.controller.internal.ClusterStackVersionResourceProviderTest.testCreateResourcesWithNonManagedOS : if i1 >= b0
