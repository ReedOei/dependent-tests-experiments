org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : n0 = null >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : n1 = null
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : n1 = null >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : r6 = virtualinvoke r0.<org.apache.ambari.server.state.cluster.ClustersImpl: org.apache.ambari.server.state.Host getHost(java.lang.String)>(r1)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : r6 = virtualinvoke r0.<org.apache.ambari.server.state.cluster.ClustersImpl: org.apache.ambari.server.state.Host getHost(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : r7 = virtualinvoke r0.<org.apache.ambari.server.state.cluster.ClustersImpl: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r2)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : r7 = virtualinvoke r0.<org.apache.ambari.server.state.cluster.ClustersImpl: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r8 = r0.<org.apache.ambari.server.state.cluster.ClustersImpl: java.util.concurrent.ConcurrentHashMap hostClusterMap>
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r8 = r0.<org.apache.ambari.server.state.cluster.ClustersImpl: java.util.concurrent.ConcurrentHashMap hostClusterMap> >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r9 = virtualinvoke $r8.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r9 = virtualinvoke $r8.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r10 = (java.util.Set) $r9
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r10 = (java.util.Set) $r9 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : r3 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : r3 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : if $z0 == 0
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $z2 = specialinvoke r0.<org.apache.ambari.server.state.cluster.ClustersImpl: boolean isOsSupportedByClusterStack(org.apache.ambari.server.state.Cluster,org.apache.ambari.server.state.Host)>(r7, r6)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $z2 = specialinvoke r0.<org.apache.ambari.server.state.cluster.ClustersImpl: boolean isOsSupportedByClusterStack(org.apache.ambari.server.state.Cluster,org.apache.ambari.server.state.Host)>(r7, r6) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : if $z2 != 0
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : if $z2 != 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r19 = new java.lang.StringBuilder
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : if $z2 != 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : l0 = interfaceinvoke r7.<org.apache.ambari.server.state.Cluster: long getClusterId()>()
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : l0 = interfaceinvoke r7.<org.apache.ambari.server.state.Cluster: long getClusterId()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r34 = <org.apache.ambari.server.state.cluster.ClustersImpl: org.slf4j.Logger LOG>
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r34 = <org.apache.ambari.server.state.cluster.ClustersImpl: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $z3 = interfaceinvoke $r34.<org.slf4j.Logger: boolean isDebugEnabled()>()
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $z3 = interfaceinvoke $r34.<org.slf4j.Logger: boolean isDebugEnabled()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : if $z3 == 0
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : if $z3 == 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r35 = <org.apache.ambari.server.state.cluster.ClustersImpl: org.slf4j.Logger LOG>
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : if $z3 == 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r38 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r38 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : virtualinvoke r0.<org.apache.ambari.server.state.cluster.ClustersImpl: void mapHostClusterEntities(java.lang.String,java.lang.Long)>(r1, $r38)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : virtualinvoke r0.<org.apache.ambari.server.state.cluster.ClustersImpl: void mapHostClusterEntities(java.lang.String,java.lang.Long)>(r1, $r38) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r39 = r0.<org.apache.ambari.server.state.cluster.ClustersImpl: java.util.concurrent.ConcurrentHashMap hostClusterMap>
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r39 = r0.<org.apache.ambari.server.state.cluster.ClustersImpl: java.util.concurrent.ConcurrentHashMap hostClusterMap> >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r40 = virtualinvoke $r39.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r40 = virtualinvoke $r39.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r41 = (java.util.Set) $r40
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r41 = (java.util.Set) $r40 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : interfaceinvoke $r41.<java.util.Set: boolean add(java.lang.Object)>(r7)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : interfaceinvoke $r41.<java.util.Set: boolean add(java.lang.Object)>(r7) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r42 = r0.<org.apache.ambari.server.state.cluster.ClustersImpl: java.util.concurrent.ConcurrentHashMap clusterHostMap>
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r42 = r0.<org.apache.ambari.server.state.cluster.ClustersImpl: java.util.concurrent.ConcurrentHashMap clusterHostMap> >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r43 = virtualinvoke $r42.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r2)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r43 = virtualinvoke $r42.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r44 = (java.util.Set) $r43
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r44 = (java.util.Set) $r43 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : interfaceinvoke $r44.<java.util.Set: boolean add(java.lang.Object)>(r6)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : interfaceinvoke $r44.<java.util.Set: boolean add(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : return
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r35 = <org.apache.ambari.server.state.cluster.ClustersImpl: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r36 = newarray (java.lang.Object)[3]
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r36 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r36[0] = r1
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r36[0] = r1 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r36[1] = r2
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r36[1] = r2 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r37 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r37 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r36[2] = $r37
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r36[2] = $r37 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : interfaceinvoke $r35.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Mapping host {} to cluster {} (id={})", $r36)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : interfaceinvoke $r35.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Mapping host {} to cluster {} (id={})", $r36) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r38 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r19 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : specialinvoke $r19.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : specialinvoke $r19.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to map host to cluster where stack does not support host\'s os type, clusterName=")
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Trying to map host to cluster where stack does not support host\'s os type, clusterName=") >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", clusterStackId=")
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", clusterStackId=") >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r23 = interfaceinvoke r7.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.StackId getDesiredStackVersion()>()
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r23 = interfaceinvoke r7.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.StackId getDesiredStackVersion()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r24 = virtualinvoke $r23.<org.apache.ambari.server.state.StackId: java.lang.String getStackId()>()
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r24 = virtualinvoke $r23.<org.apache.ambari.server.state.StackId: java.lang.String getStackId()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", hostname=")
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", hostname=") >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", hostOsFamily=")
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", hostOsFamily=") >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r29 = interfaceinvoke r6.<org.apache.ambari.server.state.Host: java.lang.String getOsFamily()>()
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r29 = interfaceinvoke r6.<org.apache.ambari.server.state.Host: java.lang.String getOsFamily()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r32 = <org.apache.ambari.server.state.cluster.ClustersImpl: org.slf4j.Logger LOG>
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r32 = <org.apache.ambari.server.state.cluster.ClustersImpl: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : interfaceinvoke $r32.<org.slf4j.Logger: void error(java.lang.String)>(r31)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : interfaceinvoke $r32.<org.slf4j.Logger: void error(java.lang.String)>(r31) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r33 = new org.apache.ambari.server.AmbariException
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r33 = new org.apache.ambari.server.AmbariException >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : specialinvoke $r33.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>(r31)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : specialinvoke $r33.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>(r31) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : throw $r33
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r11 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : r4 = (org.apache.ambari.server.state.Cluster) $r11
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : r4 = (org.apache.ambari.server.state.Cluster) $r11 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r12 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: java.lang.String getClusterName()>()
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r12 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r2)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : if $z1 == 0
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r13 = new org.apache.ambari.server.DuplicateResourceException
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r13 = new org.apache.ambari.server.DuplicateResourceException >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r5 = new java.lang.StringBuilder
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r5 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r14 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to create a host which already exists: clusterName=")
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r14 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to create a host which already exists: clusterName=") >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", hostName=")
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", hostName=") >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : specialinvoke $r13.<org.apache.ambari.server.DuplicateResourceException: void <init>(java.lang.String)>($r18)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : specialinvoke $r13.<org.apache.ambari.server.DuplicateResourceException: void <init>(java.lang.String)>($r18) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : throw $r13
