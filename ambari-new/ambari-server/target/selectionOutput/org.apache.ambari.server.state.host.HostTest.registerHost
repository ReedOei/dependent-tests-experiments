org.apache.ambari.server.state.host.HostTest.registerHost : $r2 = new org.apache.ambari.server.agent.HostInfo >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : specialinvoke $r2.<org.apache.ambari.server.agent.HostInfo: void <init>()>()
org.apache.ambari.server.state.host.HostTest.registerHost : specialinvoke $r2.<org.apache.ambari.server.agent.HostInfo: void <init>()>() >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : r3 = $r2
org.apache.ambari.server.state.host.HostTest.registerHost : r3 = $r2 >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : virtualinvoke r3.<org.apache.ambari.server.agent.HostInfo: void setMemorySize(long)>(100L)
org.apache.ambari.server.state.host.HostTest.registerHost : virtualinvoke r3.<org.apache.ambari.server.agent.HostInfo: void setMemorySize(long)>(100L) >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : virtualinvoke r3.<org.apache.ambari.server.agent.HostInfo: void setProcessorCount(int)>(10)
org.apache.ambari.server.state.host.HostTest.registerHost : virtualinvoke r3.<org.apache.ambari.server.agent.HostInfo: void setProcessorCount(int)>(10) >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : $r8 = new java.util.ArrayList
org.apache.ambari.server.state.host.HostTest.registerHost : $r8 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : specialinvoke $r8.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.host.HostTest.registerHost : specialinvoke $r8.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : r4 = $r8
org.apache.ambari.server.state.host.HostTest.registerHost : r4 = $r8 >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : $r9 = new org.apache.ambari.server.agent.DiskInfo
org.apache.ambari.server.state.host.HostTest.registerHost : $r9 = new org.apache.ambari.server.agent.DiskInfo >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : specialinvoke $r9.<org.apache.ambari.server.agent.DiskInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("/dev/sda", "/mnt/disk1", "5000000", "4000000", "10%", "size", "fstype")
org.apache.ambari.server.state.host.HostTest.registerHost : specialinvoke $r9.<org.apache.ambari.server.agent.DiskInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("/dev/sda", "/mnt/disk1", "5000000", "4000000", "10%", "size", "fstype") >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r9)
org.apache.ambari.server.state.host.HostTest.registerHost : interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r9) >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : virtualinvoke r3.<org.apache.ambari.server.agent.HostInfo: void setMounts(java.util.List)>(r4)
org.apache.ambari.server.state.host.HostTest.registerHost : virtualinvoke r3.<org.apache.ambari.server.agent.HostInfo: void setMounts(java.util.List)>(r4) >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : virtualinvoke r3.<org.apache.ambari.server.agent.HostInfo: void setHostName(java.lang.String)>("foo")
org.apache.ambari.server.state.host.HostTest.registerHost : virtualinvoke r3.<org.apache.ambari.server.agent.HostInfo: void setHostName(java.lang.String)>("foo") >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : virtualinvoke r3.<org.apache.ambari.server.agent.HostInfo: void setInterfaces(java.lang.String)>("fip_4")
org.apache.ambari.server.state.host.HostTest.registerHost : virtualinvoke r3.<org.apache.ambari.server.agent.HostInfo: void setInterfaces(java.lang.String)>("fip_4") >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : virtualinvoke r3.<org.apache.ambari.server.agent.HostInfo: void setArchitecture(java.lang.String)>("os_arch")
org.apache.ambari.server.state.host.HostTest.registerHost : virtualinvoke r3.<org.apache.ambari.server.agent.HostInfo: void setArchitecture(java.lang.String)>("os_arch") >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : virtualinvoke r3.<org.apache.ambari.server.agent.HostInfo: void setOS(java.lang.String)>("os_type")
org.apache.ambari.server.state.host.HostTest.registerHost : virtualinvoke r3.<org.apache.ambari.server.agent.HostInfo: void setOS(java.lang.String)>("os_type") >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : virtualinvoke r3.<org.apache.ambari.server.agent.HostInfo: void setMemoryTotal(long)>(10L)
org.apache.ambari.server.state.host.HostTest.registerHost : virtualinvoke r3.<org.apache.ambari.server.agent.HostInfo: void setMemoryTotal(long)>(10L) >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : n0 = null
org.apache.ambari.server.state.host.HostTest.registerHost : n0 = null >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.ambari.server.state.host.HostTest.registerHost : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : $r10 = new org.apache.ambari.server.agent.AgentEnv
org.apache.ambari.server.state.host.HostTest.registerHost : $r10 = new org.apache.ambari.server.agent.AgentEnv >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : specialinvoke $r10.<org.apache.ambari.server.agent.AgentEnv: void <init>()>()
org.apache.ambari.server.state.host.HostTest.registerHost : specialinvoke $r10.<org.apache.ambari.server.agent.AgentEnv: void <init>()>() >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : r5 = $r10
org.apache.ambari.server.state.host.HostTest.registerHost : r5 = $r10 >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : $r11 = new org.apache.ambari.server.state.host.HostRegistrationRequestEvent
org.apache.ambari.server.state.host.HostTest.registerHost : $r11 = new org.apache.ambari.server.state.host.HostRegistrationRequestEvent >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : specialinvoke $r11.<org.apache.ambari.server.state.host.HostRegistrationRequestEvent: void <init>(java.lang.String,org.apache.ambari.server.state.AgentVersion,long,org.apache.ambari.server.agent.HostInfo,org.apache.ambari.server.agent.AgentEnv)>("foo", n0, l0, r3, r5)
org.apache.ambari.server.state.host.HostTest.registerHost : specialinvoke $r11.<org.apache.ambari.server.state.host.HostRegistrationRequestEvent: void <init>(java.lang.String,org.apache.ambari.server.state.AgentVersion,long,org.apache.ambari.server.agent.HostInfo,org.apache.ambari.server.agent.AgentEnv)>("foo", n0, l0, r3, r5) >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : r6 = $r11
org.apache.ambari.server.state.host.HostTest.registerHost : r6 = $r11 >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : if z0 != 0
org.apache.ambari.server.state.host.HostTest.registerHost : if z0 != 0 >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : $r12 = interfaceinvoke r1.<org.apache.ambari.server.state.Host: java.lang.Long getHostId()>()
org.apache.ambari.server.state.host.HostTest.registerHost : if z0 != 0 >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : interfaceinvoke r1.<org.apache.ambari.server.state.Host: void handleEvent(org.apache.ambari.server.state.HostEvent)>(r6)
org.apache.ambari.server.state.host.HostTest.registerHost : interfaceinvoke r1.<org.apache.ambari.server.state.Host: void handleEvent(org.apache.ambari.server.state.HostEvent)>(r6) >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : $l1 = interfaceinvoke r1.<org.apache.ambari.server.state.Host: long getLastRegistrationTime()>()
org.apache.ambari.server.state.host.HostTest.registerHost : $l1 = interfaceinvoke r1.<org.apache.ambari.server.state.Host: long getLastRegistrationTime()>() >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : staticinvoke <org.junit.Assert: void assertEquals(long,long)>(l0, $l1)
org.apache.ambari.server.state.host.HostTest.registerHost : staticinvoke <org.junit.Assert: void assertEquals(long,long)>(l0, $l1) >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : $r13 = interfaceinvoke r1.<org.apache.ambari.server.state.Host: org.apache.ambari.server.agent.AgentEnv getLastAgentEnv()>()
org.apache.ambari.server.state.host.HostTest.registerHost : $r13 = interfaceinvoke r1.<org.apache.ambari.server.state.Host: org.apache.ambari.server.agent.AgentEnv getLastAgentEnv()>() >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r13)
org.apache.ambari.server.state.host.HostTest.registerHost : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r13) >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : $r14 = r0.<org.apache.ambari.server.state.host.HostTest: org.apache.ambari.server.orm.dao.HostDAO hostDAO>
org.apache.ambari.server.state.host.HostTest.registerHost : $r14 = r0.<org.apache.ambari.server.state.host.HostTest: org.apache.ambari.server.orm.dao.HostDAO hostDAO> >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : $r15 = interfaceinvoke r1.<org.apache.ambari.server.state.Host: java.lang.String getHostName()>()
org.apache.ambari.server.state.host.HostTest.registerHost : $r15 = interfaceinvoke r1.<org.apache.ambari.server.state.Host: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : r7 = virtualinvoke $r14.<org.apache.ambari.server.orm.dao.HostDAO: org.apache.ambari.server.orm.entities.HostEntity findByName(java.lang.String)>($r15)
org.apache.ambari.server.state.host.HostTest.registerHost : r7 = virtualinvoke $r14.<org.apache.ambari.server.orm.dao.HostDAO: org.apache.ambari.server.orm.entities.HostEntity findByName(java.lang.String)>($r15) >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : $r16 = virtualinvoke r7.<org.apache.ambari.server.orm.entities.HostEntity: java.lang.Long getLastRegistrationTime()>()
org.apache.ambari.server.state.host.HostTest.registerHost : $r16 = virtualinvoke r7.<org.apache.ambari.server.orm.entities.HostEntity: java.lang.Long getLastRegistrationTime()>() >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : $l2 = virtualinvoke $r16.<java.lang.Long: long longValue()>()
org.apache.ambari.server.state.host.HostTest.registerHost : $l2 = virtualinvoke $r16.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : staticinvoke <org.junit.Assert: void assertEquals(long,long)>(l0, $l2)
org.apache.ambari.server.state.host.HostTest.registerHost : staticinvoke <org.junit.Assert: void assertEquals(long,long)>(l0, $l2) >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : $r17 = virtualinvoke r7.<org.apache.ambari.server.orm.entities.HostEntity: java.lang.String getOsArch()>()
org.apache.ambari.server.state.host.HostTest.registerHost : $r17 = virtualinvoke r7.<org.apache.ambari.server.orm.entities.HostEntity: java.lang.String getOsArch()>() >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("os_arch", $r17)
org.apache.ambari.server.state.host.HostTest.registerHost : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("os_arch", $r17) >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : $r18 = virtualinvoke r7.<org.apache.ambari.server.orm.entities.HostEntity: java.lang.String getOsType()>()
org.apache.ambari.server.state.host.HostTest.registerHost : $r18 = virtualinvoke r7.<org.apache.ambari.server.orm.entities.HostEntity: java.lang.String getOsType()>() >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("os_type", $r18)
org.apache.ambari.server.state.host.HostTest.registerHost : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>("os_type", $r18) >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : $r19 = virtualinvoke r7.<org.apache.ambari.server.orm.entities.HostEntity: java.lang.Long getTotalMem()>()
org.apache.ambari.server.state.host.HostTest.registerHost : $r19 = virtualinvoke r7.<org.apache.ambari.server.orm.entities.HostEntity: java.lang.Long getTotalMem()>() >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : $l3 = virtualinvoke $r19.<java.lang.Long: long longValue()>()
org.apache.ambari.server.state.host.HostTest.registerHost : $l3 = virtualinvoke $r19.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $l3)
org.apache.ambari.server.state.host.HostTest.registerHost : staticinvoke <org.junit.Assert: void assertEquals(long,long)>(10L, $l3) >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : return
org.apache.ambari.server.state.host.HostTest.registerHost : $r12 = interfaceinvoke r1.<org.apache.ambari.server.state.Host: java.lang.Long getHostId()>() >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r12)
org.apache.ambari.server.state.host.HostTest.registerHost : staticinvoke <org.junit.Assert: void assertNotNull(java.lang.Object)>($r12) >>>>>>>> org.apache.ambari.server.state.host.HostTest.registerHost : interfaceinvoke r1.<org.apache.ambari.server.state.Host: void handleEvent(org.apache.ambari.server.state.HostEvent)>(r6)
