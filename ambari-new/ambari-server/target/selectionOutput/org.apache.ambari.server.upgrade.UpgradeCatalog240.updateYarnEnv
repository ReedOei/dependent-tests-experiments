org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r9 = r0.<org.apache.ambari.server.upgrade.UpgradeCatalog240: com.google.inject.Injector injector> >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r10 = interfaceinvoke $r9.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "org/apache/ambari/server/controller/AmbariManagementController")
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r10 = interfaceinvoke $r9.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "org/apache/ambari/server/controller/AmbariManagementController") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : r1 = (org.apache.ambari.server.controller.AmbariManagementController) $r10
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : r1 = (org.apache.ambari.server.controller.AmbariManagementController) $r10 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : r2 = interfaceinvoke r1.<org.apache.ambari.server.controller.AmbariManagementController: org.apache.ambari.server.state.Clusters getClusters()>()
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : r2 = interfaceinvoke r1.<org.apache.ambari.server.controller.AmbariManagementController: org.apache.ambari.server.state.Clusters getClusters()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : r3 = virtualinvoke r0.<org.apache.ambari.server.upgrade.UpgradeCatalog240: java.util.Map getCheckedClusterMap(org.apache.ambari.server.state.Clusters)>(r2)
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : r3 = virtualinvoke r0.<org.apache.ambari.server.upgrade.UpgradeCatalog240: java.util.Map getCheckedClusterMap(org.apache.ambari.server.state.Clusters)>(r2) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r11 = interfaceinvoke r3.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r11 = interfaceinvoke r3.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : r4 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : r4 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : if $z0 == 0
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : if $z0 == 0 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : if $z0 == 0 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : return
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : r5 = (org.apache.ambari.server.state.Cluster) $r12
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : r5 = (org.apache.ambari.server.state.Cluster) $r12 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : r6 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getDesiredConfigByType(java.lang.String)>("yarn-env")
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : r6 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getDesiredConfigByType(java.lang.String)>("yarn-env") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r13 = new java.util.HashMap
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r13 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : specialinvoke $r13.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : specialinvoke $r13.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : r7 = $r13
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : r7 = $r13 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : if r6 == null
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : if r6 == null >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r14 = interfaceinvoke r6.<org.apache.ambari.server.state.Config: java.util.Map getProperties()>()
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : if r6 == null >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r14 = interfaceinvoke r6.<org.apache.ambari.server.state.Config: java.util.Map getProperties()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>("content")
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>("content") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : r8 = (java.lang.String) $r15
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : r8 = (java.lang.String) $r15 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : r16 = virtualinvoke r8.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("export YARN_HISTORYSERVER_HEAPSIZE=\\{\\{apptimelineserver_heapsize\\}\\}", "# export YARN_HISTORYSERVER_HEAPSIZE=\\{\\{apptimelineserver_heapsize\\}\\}")
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : r16 = virtualinvoke r8.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("export YARN_HISTORYSERVER_HEAPSIZE=\\{\\{apptimelineserver_heapsize\\}\\}", "# export YARN_HISTORYSERVER_HEAPSIZE=\\{\\{apptimelineserver_heapsize\\}\\}") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r17 = new java.lang.StringBuilder
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r17 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16)
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r16) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n      # Specify the max Heapsize for the timeline server using a numerical value\n")
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n      # Specify the max Heapsize for the timeline server using a numerical value\n") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      # in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set\n")
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      # in the scale of MB. For example, to specify an jvm option of -Xmx1000m, set\n") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      # the value to 1024.\n")
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      # the value to 1024.\n") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      # This value will be overridden by an Xmx setting specified in either YARN_OPTS\n")
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      # This value will be overridden by an Xmx setting specified in either YARN_OPTS\n") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      # and/or YARN_TIMELINESERVER_OPTS.\n")
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      # and/or YARN_TIMELINESERVER_OPTS.\n") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      # If not specified, the default value will be picked from either YARN_HEAPMAX\n")
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      # If not specified, the default value will be picked from either YARN_HEAPMAX\n") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      # or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.\n")
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      # or JAVA_HEAP_MAX with YARN_HEAPMAX as the preferred option of the two.\n") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      export YARN_TIMELINESERVER_HEAPSIZE={{apptimelineserver_heapsize}}")
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("      export YARN_TIMELINESERVER_HEAPSIZE={{apptimelineserver_heapsize}}") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("content", r27)
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("content", r27) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : virtualinvoke r0.<org.apache.ambari.server.upgrade.UpgradeCatalog240: void updateConfigurationPropertiesForCluster(org.apache.ambari.server.state.Cluster,java.lang.String,java.util.Map,boolean,boolean)>(r5, "yarn-env", r7, 1, 1)
org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : virtualinvoke r0.<org.apache.ambari.server.upgrade.UpgradeCatalog240: void updateConfigurationPropertiesForCluster(org.apache.ambari.server.state.Cluster,java.lang.String,java.util.Map,boolean,boolean)>(r5, "yarn-env", r7, 1, 1) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog240.updateYarnEnv : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
