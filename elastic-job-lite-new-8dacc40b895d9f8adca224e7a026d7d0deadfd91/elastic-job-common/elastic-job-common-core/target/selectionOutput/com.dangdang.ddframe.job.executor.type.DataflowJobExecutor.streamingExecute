com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : r3 = specialinvoke r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutor: java.util.List fetchData(com.dangdang.ddframe.job.api.ShardingContext)>(r1) >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : if null == r3
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : if null == r3 >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>()
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : if null == r3 >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : return
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>() >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : if $z0 != 0
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : if $z0 != 0 >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : specialinvoke r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutor: void processData(com.dangdang.ddframe.job.api.ShardingContext,java.util.List)>(r1, r3)
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : if $z0 != 0 >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : return
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : specialinvoke r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutor: void processData(com.dangdang.ddframe.job.api.ShardingContext,java.util.List)>(r1, r3) >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : $r2 = virtualinvoke r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutor: com.dangdang.ddframe.job.executor.JobFacade getJobFacade()>()
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : $r2 = virtualinvoke r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutor: com.dangdang.ddframe.job.executor.JobFacade getJobFacade()>() >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : $z1 = interfaceinvoke $r2.<com.dangdang.ddframe.job.executor.JobFacade: boolean isEligibleForJobRunning()>()
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : $z1 = interfaceinvoke $r2.<com.dangdang.ddframe.job.executor.JobFacade: boolean isEligibleForJobRunning()>() >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : if $z1 != 0
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : if $z1 != 0 >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : goto [?= return]
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : if $z1 != 0 >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : r3 = specialinvoke r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutor: java.util.List fetchData(com.dangdang.ddframe.job.api.ShardingContext)>(r1)
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : r3 = specialinvoke r0.<com.dangdang.ddframe.job.executor.type.DataflowJobExecutor: java.util.List fetchData(com.dangdang.ddframe.job.api.ShardingContext)>(r1) >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : goto [?= (branch)]
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : goto [?= (branch)] >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : if null == r3
com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : goto [?= return] >>>>>>>> com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute : return
