org.apache.ambari.server.view.ViewDirectoryWatcher.loggingHook : $r1 = new org.apache.ambari.server.view.ViewDirectoryWatcher$1 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.loggingHook : specialinvoke $r1.<org.apache.ambari.server.view.ViewDirectoryWatcher$1: void <init>(org.apache.ambari.server.view.ViewDirectoryWatcher)>(r0)
org.apache.ambari.server.view.ViewDirectoryWatcher.loggingHook : specialinvoke $r1.<org.apache.ambari.server.view.ViewDirectoryWatcher$1: void <init>(org.apache.ambari.server.view.ViewDirectoryWatcher)>(r0) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.loggingHook : return $r1
org.apache.ambari.server.view.ViewDirectoryWatcher.loggingHook : return $r1 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.addHook : $r2 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.util.List hooks>
org.apache.ambari.server.view.ViewDirectoryWatcher.addHook : $r2 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.util.List hooks> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.addHook : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1)
org.apache.ambari.server.view.ViewDirectoryWatcher.addHook : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.start : r6 = specialinvoke r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.nio.file.Path buildWatchService()>()
org.apache.ambari.server.view.ViewDirectoryWatcher.start : r6 = specialinvoke r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.nio.file.Path buildWatchService()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r3 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: org.apache.ambari.server.configuration.Configuration configuration>
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r3 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: org.apache.ambari.server.configuration.Configuration configuration> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : r1 = virtualinvoke $r3.<org.apache.ambari.server.configuration.Configuration: java.io.File getViewsDir()>()
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : r1 = virtualinvoke $r3.<org.apache.ambari.server.configuration.Configuration: java.io.File getViewsDir()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r4 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r4 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r5 = newarray (java.lang.String)[0]
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r5 = newarray (java.lang.String)[0] >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : r2 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($r4, $r5)
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : r2 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($r4, $r5) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r6 = interfaceinvoke r2.<java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>()
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r6 = interfaceinvoke r2.<java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r7 = virtualinvoke $r6.<java.nio.file.FileSystem: java.nio.file.WatchService newWatchService()>()
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r7 = virtualinvoke $r6.<java.nio.file.FileSystem: java.nio.file.WatchService newWatchService()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.nio.file.WatchService watchService> = $r7
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.nio.file.WatchService watchService> = $r7 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r10 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.nio.file.WatchService watchService>
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r10 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.nio.file.WatchService watchService> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r8 = newarray (java.nio.file.WatchEvent$Kind)[1]
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r8 = newarray (java.nio.file.WatchEvent$Kind)[1] >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r9 = <java.nio.file.StandardWatchEventKinds: java.nio.file.WatchEvent$Kind ENTRY_CREATE>
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r9 = <java.nio.file.StandardWatchEventKinds: java.nio.file.WatchEvent$Kind ENTRY_CREATE> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r8[0] = $r9
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r8[0] = $r9 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : interfaceinvoke r2.<java.nio.file.Path: java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind[])>($r10, $r8)
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : interfaceinvoke r2.<java.nio.file.Path: java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind[])>($r10, $r8) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r8 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: org.slf4j.Logger access$000()>()
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r8 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.access$000 : $r0 = <org.apache.ambari.server.view.ViewDirectoryWatcher: org.slf4j.Logger LOG>
org.apache.ambari.server.view.ViewDirectoryWatcher.access$000 : $r0 = <org.apache.ambari.server.view.ViewDirectoryWatcher: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.access$000 : return $r0
org.apache.ambari.server.view.ViewDirectoryWatcher.access$000 : return $r0 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String)>("Watcher Key was signalled")
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String)>("Watcher Key was signalled") >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r9 = interfaceinvoke r39.<java.nio.file.WatchKey: java.util.List pollEvents()>()
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r9 = interfaceinvoke r39.<java.nio.file.WatchKey: java.util.List pollEvents()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : r1 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : r1 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $z4 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $z4 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : if $z4 == 0
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : if $z4 == 0 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $z0 = interfaceinvoke r39.<java.nio.file.WatchKey: boolean reset()>()
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $z0 = interfaceinvoke r39.<java.nio.file.WatchKey: boolean reset()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : if $z0 != 0
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : if $z0 != 0 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r10 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: org.slf4j.Logger access$000()>()
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r10 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : interfaceinvoke $r10.<org.slf4j.Logger: void error(java.lang.String)>("The watch key could not be reset, Directory watcher will not run anymore")
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : interfaceinvoke $r10.<org.slf4j.Logger: void error(java.lang.String)>("The watch key could not be reset, Directory watcher will not run anymore") >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : goto [?= (branch)]
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : goto [?= return]
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : goto [?= return] >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : return r2
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : return r2 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.start : r1 = specialinvoke r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.lang.Runnable startWatching(java.nio.file.Path)>(r6)
org.apache.ambari.server.view.ViewDirectoryWatcher.start : r1 = specialinvoke r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.lang.Runnable startWatching(java.nio.file.Path)>(r6) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.startWatching : $r2 = new org.apache.ambari.server.view.ViewDirectoryWatcher$2
org.apache.ambari.server.view.ViewDirectoryWatcher.startWatching : $r2 = new org.apache.ambari.server.view.ViewDirectoryWatcher$2 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.startWatching : specialinvoke $r2.<org.apache.ambari.server.view.ViewDirectoryWatcher$2: void <init>(org.apache.ambari.server.view.ViewDirectoryWatcher,java.nio.file.Path)>(r0, r1)
org.apache.ambari.server.view.ViewDirectoryWatcher.startWatching : specialinvoke $r2.<org.apache.ambari.server.view.ViewDirectoryWatcher$2: void <init>(org.apache.ambari.server.view.ViewDirectoryWatcher,java.nio.file.Path)>(r0, r1) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.startWatching : return $r2
org.apache.ambari.server.view.ViewDirectoryWatcher.startWatching : return $r2 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.start : $r2 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.util.concurrent.ExecutorService executorService>
org.apache.ambari.server.view.ViewDirectoryWatcher.start : $r2 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.util.concurrent.ExecutorService executorService> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.start : $r3 = interfaceinvoke $r2.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>(r1)
org.apache.ambari.server.view.ViewDirectoryWatcher.start : $r3 = interfaceinvoke $r2.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>(r1) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.start : r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.util.concurrent.Future watchTask> = $r3
org.apache.ambari.server.view.ViewDirectoryWatcher.start : r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.util.concurrent.Future watchTask> = $r3 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.start : goto [?= return]
org.apache.ambari.server.view.ViewDirectoryWatcher.start : goto [?= return] >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r5 = new java.io.File
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r5 = new java.io.File >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r6 = new java.lang.StringBuilder
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r6 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r7 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir")
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r7 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.io.tmpdir") >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r9 = <java.io.File: java.lang.String separator>
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r9 = <java.io.File: java.lang.String separator> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("view.xml")
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("view.xml") >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r12)
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : specialinvoke $r5.<java.io.File: void <init>(java.lang.String)>($r12) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : virtualinvoke $r5.<java.io.File: boolean createNewFile()>()
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : virtualinvoke $r5.<java.io.File: boolean createNewFile()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r13 = new java.io.FileInputStream
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r13 = new java.io.FileInputStream >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : specialinvoke $r13.<java.io.FileInputStream: void <init>(java.io.File)>($r5)
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : specialinvoke $r13.<java.io.FileInputStream: void <init>(java.io.File)>($r5) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r14 = new java.util.zip.ZipOutputStream
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r14 = new java.util.zip.ZipOutputStream >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r15 = new java.io.FileOutputStream
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r15 = new java.io.FileOutputStream >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r16 = new java.io.File
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r16 = new java.io.File >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r17 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcherTest: java.io.File testDir>
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r17 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcherTest: java.io.File testDir> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : specialinvoke $r16.<java.io.File: void <init>(java.io.File,java.lang.String)>($r17, "file.jar")
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : specialinvoke $r16.<java.io.File: void <init>(java.io.File,java.lang.String)>($r17, "file.jar") >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : specialinvoke $r15.<java.io.FileOutputStream: void <init>(java.io.File)>($r16)
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : specialinvoke $r15.<java.io.FileOutputStream: void <init>(java.io.File)>($r16) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : specialinvoke $r14.<java.util.zip.ZipOutputStream: void <init>(java.io.OutputStream)>($r15)
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : specialinvoke $r14.<java.util.zip.ZipOutputStream: void <init>(java.io.OutputStream)>($r15) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r18 = new java.util.zip.ZipEntry
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $r18 = new java.util.zip.ZipEntry >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : specialinvoke $r18.<java.util.zip.ZipEntry: void <init>(java.lang.String)>("view.xml")
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : specialinvoke $r18.<java.util.zip.ZipEntry: void <init>(java.lang.String)>("view.xml") >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : virtualinvoke $r14.<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)>($r18)
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : virtualinvoke $r14.<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)>($r18) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : r4 = newarray (byte)[1024]
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : r4 = newarray (byte)[1024] >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $i1 = virtualinvoke $r13.<java.io.FileInputStream: int read(byte[])>(r4)
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : $i1 = virtualinvoke $r13.<java.io.FileInputStream: int read(byte[])>(r4) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : if $i1 <= 0
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : if $i1 <= 0 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : virtualinvoke $r14.<java.util.zip.ZipOutputStream: void close()>()
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : virtualinvoke $r14.<java.util.zip.ZipOutputStream: void close()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : virtualinvoke $r13.<java.io.FileInputStream: void close()>()
org.apache.ambari.server.view.ViewDirectoryWatcherTest.createZipFile : virtualinvoke $r13.<java.io.FileInputStream: void close()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r6 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher$2: org.apache.ambari.server.view.ViewDirectoryWatcher this$0>
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r6 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher$2: org.apache.ambari.server.view.ViewDirectoryWatcher this$0> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r7 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: java.nio.file.WatchService access$100(org.apache.ambari.server.view.ViewDirectoryWatcher)>($r6)
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r7 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: java.nio.file.WatchService access$100(org.apache.ambari.server.view.ViewDirectoryWatcher)>($r6) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.access$100 : $r1 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.nio.file.WatchService watchService>
org.apache.ambari.server.view.ViewDirectoryWatcher.access$100 : $r1 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.nio.file.WatchService watchService> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.access$100 : return $r1
org.apache.ambari.server.view.ViewDirectoryWatcher.access$100 : return $r1 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : r39 = interfaceinvoke $r7.<java.nio.file.WatchService: java.nio.file.WatchKey take()>()
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : r39 = interfaceinvoke $r7.<java.nio.file.WatchService: java.nio.file.WatchKey take()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r11 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r11 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : r2 = (java.nio.file.WatchEvent) $r11
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : r2 = (java.nio.file.WatchEvent) $r11 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r12 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: org.slf4j.Logger access$000()>()
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r12 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String)>("Watcher recieved poll event")
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String)>("Watcher recieved poll event") >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : r3 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: java.nio.file.WatchEvent access$200(java.nio.file.WatchEvent)>(r2)
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : r3 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: java.nio.file.WatchEvent access$200(java.nio.file.WatchEvent)>(r2) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.access$200 : $r1 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: java.nio.file.WatchEvent cast(java.nio.file.WatchEvent)>(r0)
org.apache.ambari.server.view.ViewDirectoryWatcher.access$200 : $r1 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: java.nio.file.WatchEvent cast(java.nio.file.WatchEvent)>(r0) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.cast : return r0
org.apache.ambari.server.view.ViewDirectoryWatcher.cast : return r0 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.access$200 : return $r1
org.apache.ambari.server.view.ViewDirectoryWatcher.access$200 : return $r1 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r13 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher$2: java.nio.file.Path val$path>
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r13 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher$2: java.nio.file.Path val$path> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r14 = interfaceinvoke r3.<java.nio.file.WatchEvent: java.lang.Object context()>()
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r14 = interfaceinvoke r3.<java.nio.file.WatchEvent: java.lang.Object context()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r15 = (java.nio.file.Path) $r14
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r15 = (java.nio.file.Path) $r14 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : r4 = interfaceinvoke $r13.<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>($r15)
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : r4 = interfaceinvoke $r13.<java.nio.file.Path: java.nio.file.Path resolve(java.nio.file.Path)>($r15) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r16 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: org.slf4j.Logger access$000()>()
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r16 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r17 = newarray (java.lang.Object)[2]
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r17 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r18 = interfaceinvoke r3.<java.nio.file.WatchEvent: java.nio.file.WatchEvent$Kind kind()>()
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r18 = interfaceinvoke r3.<java.nio.file.WatchEvent: java.nio.file.WatchEvent$Kind kind()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r17[0] = $r18
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r17[0] = $r18 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r17[1] = r4
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r17[1] = r4 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r19 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Event %s: %s\n", $r17)
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r19 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Event %s: %s\n", $r17) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : interfaceinvoke $r16.<org.slf4j.Logger: void info(java.lang.String)>($r19)
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : interfaceinvoke $r16.<org.slf4j.Logger: void info(java.lang.String)>($r19) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r20 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher$2: org.apache.ambari.server.view.ViewDirectoryWatcher this$0>
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r20 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher$2: org.apache.ambari.server.view.ViewDirectoryWatcher this$0> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $z1 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: boolean access$300(org.apache.ambari.server.view.ViewDirectoryWatcher,java.nio.file.Path)>($r20, r4)
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $z1 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: boolean access$300(org.apache.ambari.server.view.ViewDirectoryWatcher,java.nio.file.Path)>($r20, r4) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.access$300 : $z0 = specialinvoke r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: boolean canBlockTillFileAvailable(java.nio.file.Path)>(r1)
org.apache.ambari.server.view.ViewDirectoryWatcher.access$300 : $z0 = specialinvoke r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: boolean canBlockTillFileAvailable(java.nio.file.Path)>(r1) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : l6 = 0L
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : l6 = 0L >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : i7 = 0
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : i7 = 0 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : $r3 = interfaceinvoke r1.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>()
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : $r3 = interfaceinvoke r1.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : r2 = interfaceinvoke $r3.<java.nio.file.Path: java.io.File toFile()>()
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : r2 = interfaceinvoke $r3.<java.nio.file.Path: java.io.File toFile()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : $l1 = virtualinvoke r2.<java.io.File: long length()>()
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : $l1 = virtualinvoke r2.<java.io.File: long length()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : $b2 = $l1 cmp 0L
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : $b2 = $l1 cmp 0L >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : if $b2 != 0
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : if $b2 != 0 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : $b3 = l6 cmp 5L
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : $b3 = l6 cmp 5L >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : if $b3 != 0
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : if $b3 != 0 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : l8 = virtualinvoke r2.<java.io.File: long length()>()
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : l8 = virtualinvoke r2.<java.io.File: long length()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : $r10 = <org.apache.ambari.server.view.ViewDirectoryWatcher: org.slf4j.Logger LOG>
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : $r10 = <org.apache.ambari.server.view.ViewDirectoryWatcher: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String)>("Waiting for file to be completely copied")
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : interfaceinvoke $r10.<org.slf4j.Logger: void info(java.lang.String)>("Waiting for file to be completely copied") >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : staticinvoke <java.lang.Thread: void sleep(long)>(200L)
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : staticinvoke <java.lang.Thread: void sleep(long)>(200L) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : l0 = virtualinvoke r2.<java.io.File: long length()>()
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : l0 = virtualinvoke r2.<java.io.File: long length()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : $b9 = l0 cmp l8
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : $b9 = l0 cmp l8 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : if $b9 <= 0
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : if $b9 <= 0 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : $b4 = l8 cmp l0
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : $b4 = l8 cmp l0 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : if $b4 != 0
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : if $b4 != 0 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : i7 = i7 + 1
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : i7 = i7 + 1 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : goto [?= (branch)]
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : if i7 <= 30
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : if i7 <= 30 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : $r5 = <org.apache.ambari.server.view.ViewDirectoryWatcher: org.slf4j.Logger LOG>
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : $r5 = <org.apache.ambari.server.view.ViewDirectoryWatcher: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : $r4 = new java.lang.StringBuilder
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : $r4 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File ")
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("File ") >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1)
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has finished copying")
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has finished copying") >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String)>($r9)
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : interfaceinvoke $r5.<org.slf4j.Logger: void info(java.lang.String)>($r9) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : return 1
org.apache.ambari.server.view.ViewDirectoryWatcher.canBlockTillFileAvailable : return 1 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.access$300 : return $z0
org.apache.ambari.server.view.ViewDirectoryWatcher.access$300 : return $z0 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : if $z1 != 0
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : if $z1 != 0 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r21 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher$2: org.apache.ambari.server.view.ViewDirectoryWatcher this$0>
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r21 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher$2: org.apache.ambari.server.view.ViewDirectoryWatcher this$0> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $z2 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: boolean access$400(org.apache.ambari.server.view.ViewDirectoryWatcher,java.nio.file.Path)>($r21, r4)
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $z2 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: boolean access$400(org.apache.ambari.server.view.ViewDirectoryWatcher,java.nio.file.Path)>($r21, r4) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.access$400 : $z0 = specialinvoke r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: boolean verify(java.nio.file.Path)>(r1)
org.apache.ambari.server.view.ViewDirectoryWatcher.access$400 : $z0 = specialinvoke r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: boolean verify(java.nio.file.Path)>(r1) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.verify : $r3 = interfaceinvoke r1.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>()
org.apache.ambari.server.view.ViewDirectoryWatcher.verify : $r3 = interfaceinvoke r1.<java.nio.file.Path: java.nio.file.Path toAbsolutePath()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.verify : r8 = interfaceinvoke $r3.<java.nio.file.Path: java.io.File toFile()>()
org.apache.ambari.server.view.ViewDirectoryWatcher.verify : r8 = interfaceinvoke $r3.<java.nio.file.Path: java.io.File toFile()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.verify : $z0 = virtualinvoke r8.<java.io.File: boolean isDirectory()>()
org.apache.ambari.server.view.ViewDirectoryWatcher.verify : $z0 = virtualinvoke r8.<java.io.File: boolean isDirectory()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.verify : if $z0 != 0
org.apache.ambari.server.view.ViewDirectoryWatcher.verify : if $z0 != 0 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.verify : $z1 = 1
org.apache.ambari.server.view.ViewDirectoryWatcher.verify : $z1 = 1 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.verify : goto [?= staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z1)]
org.apache.ambari.server.view.ViewDirectoryWatcher.verify : goto [?= staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z1)] >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.verify : staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z1)
org.apache.ambari.server.view.ViewDirectoryWatcher.verify : staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z1) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.verify : $l0 = virtualinvoke r8.<java.io.File: long length()>()
org.apache.ambari.server.view.ViewDirectoryWatcher.verify : $l0 = virtualinvoke r8.<java.io.File: long length()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.verify : $b1 = $l0 cmp 0L
org.apache.ambari.server.view.ViewDirectoryWatcher.verify : $b1 = $l0 cmp 0L >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.verify : if $b1 <= 0
org.apache.ambari.server.view.ViewDirectoryWatcher.verify : if $b1 <= 0 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.verify : $z2 = 1
org.apache.ambari.server.view.ViewDirectoryWatcher.verify : $z2 = 1 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.verify : goto [?= staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z2)]
org.apache.ambari.server.view.ViewDirectoryWatcher.verify : goto [?= staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z2)] >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.verify : staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z2)
org.apache.ambari.server.view.ViewDirectoryWatcher.verify : staticinvoke <com.google.common.base.Preconditions: void checkArgument(boolean)>($z2) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.verify : $r4 = new java.util.zip.ZipFile
org.apache.ambari.server.view.ViewDirectoryWatcher.verify : $r4 = new java.util.zip.ZipFile >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.verify : specialinvoke $r4.<java.util.zip.ZipFile: void <init>(java.io.File)>(r8)
org.apache.ambari.server.view.ViewDirectoryWatcher.verify : specialinvoke $r4.<java.util.zip.ZipFile: void <init>(java.io.File)>(r8) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.verify : staticinvoke <org.apache.ambari.server.utils.Closeables: void closeSilently(java.io.Closeable)>($r4)
org.apache.ambari.server.view.ViewDirectoryWatcher.verify : staticinvoke <org.apache.ambari.server.utils.Closeables: void closeSilently(java.io.Closeable)>($r4) >>>>>>>> org.apache.ambari.server.utils.Closeables.closeSilently : staticinvoke <org.apache.ambari.server.utils.Closeables: void close(java.io.Closeable,org.slf4j.Logger)>(r0, null)
org.apache.ambari.server.utils.Closeables.closeSilently : staticinvoke <org.apache.ambari.server.utils.Closeables: void close(java.io.Closeable,org.slf4j.Logger)>(r0, null) >>>>>>>> org.apache.ambari.server.utils.Closeables.close : if r0 == null
org.apache.ambari.server.utils.Closeables.close : if r0 == null >>>>>>>> org.apache.ambari.server.utils.Closeables.close : interfaceinvoke r0.<java.io.Closeable: void close()>()
org.apache.ambari.server.utils.Closeables.close : interfaceinvoke r0.<java.io.Closeable: void close()>() >>>>>>>> org.apache.ambari.server.utils.Closeables.close : goto [?= return]
org.apache.ambari.server.utils.Closeables.close : goto [?= return] >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.verify : goto [?= return 1]
org.apache.ambari.server.view.ViewDirectoryWatcher.verify : goto [?= return 1] >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.verify : return 1
org.apache.ambari.server.view.ViewDirectoryWatcher.verify : return 1 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.access$400 : return $z0
org.apache.ambari.server.view.ViewDirectoryWatcher.access$400 : return $z0 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : if $z2 != 0
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : if $z2 != 0 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r22 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: org.slf4j.Logger access$000()>()
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r22 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : interfaceinvoke $r22.<org.slf4j.Logger: void info(java.lang.String)>("Starting view extraction")
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : interfaceinvoke $r22.<org.slf4j.Logger: void info(java.lang.String)>("Starting view extraction") >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r23 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher$2: org.apache.ambari.server.view.ViewDirectoryWatcher this$0>
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r23 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher$2: org.apache.ambari.server.view.ViewDirectoryWatcher this$0> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r24 = $r23.<org.apache.ambari.server.view.ViewDirectoryWatcher: org.apache.ambari.server.view.ViewRegistry viewRegistry>
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r24 = $r23.<org.apache.ambari.server.view.ViewDirectoryWatcher: org.apache.ambari.server.view.ViewRegistry viewRegistry> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : virtualinvoke $r24.<org.apache.ambari.server.view.ViewRegistry: void readViewArchive(java.nio.file.Path)>(r4)
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : virtualinvoke $r24.<org.apache.ambari.server.view.ViewRegistry: void readViewArchive(java.nio.file.Path)>(r4) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r25 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher$2: org.apache.ambari.server.view.ViewDirectoryWatcher this$0>
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r25 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher$2: org.apache.ambari.server.view.ViewDirectoryWatcher this$0> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r26 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: java.util.List access$500(org.apache.ambari.server.view.ViewDirectoryWatcher)>($r25)
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r26 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: java.util.List access$500(org.apache.ambari.server.view.ViewDirectoryWatcher)>($r25) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.access$500 : $r1 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.util.List hooks>
org.apache.ambari.server.view.ViewDirectoryWatcher.access$500 : $r1 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.util.List hooks> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.access$500 : return $r1
org.apache.ambari.server.view.ViewDirectoryWatcher.access$500 : return $r1 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : r40 = interfaceinvoke $r26.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : r40 = interfaceinvoke $r26.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $z3 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $z3 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : if $z3 == 0
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : if $z3 == 0 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r27 = interfaceinvoke r40.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r27 = interfaceinvoke r40.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : r5 = (com.google.common.base.Function) $r27
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : r5 = (com.google.common.base.Function) $r27 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : interfaceinvoke r5.<com.google.common.base.Function: java.lang.Object apply(java.lang.Object)>(r4)
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : interfaceinvoke r5.<com.google.common.base.Function: java.lang.Object apply(java.lang.Object)>(r4) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$1.apply : $r2 = (java.nio.file.Path) r1
org.apache.ambari.server.view.ViewDirectoryWatcher$1.apply : $r2 = (java.nio.file.Path) r1 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$1.apply : $r3 = virtualinvoke r0.<org.apache.ambari.server.view.ViewDirectoryWatcher$1: java.lang.Boolean apply(java.nio.file.Path)>($r2)
org.apache.ambari.server.view.ViewDirectoryWatcher$1.apply : $r3 = virtualinvoke r0.<org.apache.ambari.server.view.ViewDirectoryWatcher$1: java.lang.Boolean apply(java.nio.file.Path)>($r2) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$1.apply : $r2 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: org.slf4j.Logger access$000()>()
org.apache.ambari.server.view.ViewDirectoryWatcher$1.apply : $r2 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$1.apply : $r3 = new java.lang.StringBuilder
org.apache.ambari.server.view.ViewDirectoryWatcher$1.apply : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$1.apply : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.view.ViewDirectoryWatcher$1.apply : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$1.apply : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Finished processing the view definition for")
org.apache.ambari.server.view.ViewDirectoryWatcher$1.apply : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Finished processing the view definition for") >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$1.apply : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1)
org.apache.ambari.server.view.ViewDirectoryWatcher$1.apply : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$1.apply : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.view.ViewDirectoryWatcher$1.apply : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$1.apply : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String)>($r6)
org.apache.ambari.server.view.ViewDirectoryWatcher$1.apply : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String)>($r6) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$1.apply : $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1)
org.apache.ambari.server.view.ViewDirectoryWatcher$1.apply : $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$1.apply : return $r7
org.apache.ambari.server.view.ViewDirectoryWatcher$1.apply : return $r7 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$1.apply : return $r3
org.apache.ambari.server.view.ViewDirectoryWatcher$1.apply : return $r3 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : goto [?= $z3 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : goto [?= $z3 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest$2.apply : $r2 = (java.nio.file.Path) r1
org.apache.ambari.server.view.ViewDirectoryWatcherTest$2.apply : $r2 = (java.nio.file.Path) r1 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest$2.apply : $r3 = virtualinvoke r0.<org.apache.ambari.server.view.ViewDirectoryWatcherTest$2: java.lang.Boolean apply(java.nio.file.Path)>($r2)
org.apache.ambari.server.view.ViewDirectoryWatcherTest$2.apply : $r3 = virtualinvoke r0.<org.apache.ambari.server.view.ViewDirectoryWatcherTest$2: java.lang.Boolean apply(java.nio.file.Path)>($r2) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest$2.apply : $r2 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcherTest$2: java.util.concurrent.CountDownLatch val$countDownLatch>
org.apache.ambari.server.view.ViewDirectoryWatcherTest$2.apply : $r2 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcherTest$2: java.util.concurrent.CountDownLatch val$countDownLatch> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest$2.apply : virtualinvoke $r2.<java.util.concurrent.CountDownLatch: void countDown()>()
