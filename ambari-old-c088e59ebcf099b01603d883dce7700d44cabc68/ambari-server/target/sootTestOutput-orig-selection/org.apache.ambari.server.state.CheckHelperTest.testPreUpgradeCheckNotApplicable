org.apache.ambari.server.state.CheckHelperTest.access$000 : $r1 = r0.<org.apache.ambari.server.state.CheckHelperTest: org.apache.ambari.server.checks.CheckDescription m_mockCheckDescription> >>>>>>>> org.apache.ambari.server.state.CheckHelperTest.access$000 : return $r1
org.apache.ambari.server.state.CheckHelperTest.access$000 : return $r1 >>>>>>>> org.apache.ambari.server.state.CheckHelper.performChecks : r4 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>()
org.apache.ambari.server.state.CheckHelper.performChecks : r4 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName>
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1 >>>>>>>> org.apache.ambari.server.state.CheckHelper.performChecks : $r11 = new java.util.ArrayList
org.apache.ambari.server.state.CheckHelper.performChecks : $r11 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.CheckHelper.performChecks : specialinvoke $r11.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.CheckHelper.performChecks : specialinvoke $r11.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.CheckHelper.performChecks : z0 = virtualinvoke r3.<org.apache.ambari.server.configuration.Configuration: boolean isUpgradePrecheckBypass()>()
org.apache.ambari.server.state.CheckHelper.performChecks : z0 = virtualinvoke r3.<org.apache.ambari.server.configuration.Configuration: boolean isUpgradePrecheckBypass()>() >>>>>>>> org.apache.ambari.server.state.CheckHelper.performChecks : r6 = virtualinvoke r0.<org.apache.ambari.server.state.CheckHelper: java.util.List getApplicablePrerequisiteChecks(org.apache.ambari.server.controller.PrereqCheckRequest,java.util.List)>(r1, r2)
org.apache.ambari.server.state.CheckHelper.performChecks : r6 = virtualinvoke r0.<org.apache.ambari.server.state.CheckHelper: java.util.List getApplicablePrerequisiteChecks(org.apache.ambari.server.controller.PrereqCheckRequest,java.util.List)>(r1, r2) >>>>>>>> org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : $r9 = new java.util.LinkedList
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : $r9 = new java.util.LinkedList >>>>>>>> org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : specialinvoke $r9.<java.util.LinkedList: void <init>()>()
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : specialinvoke $r9.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : r4 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>()
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : r4 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : r5 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : r5 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : if $z0 == 0
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : $r10 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : $r10 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : r6 = (org.apache.ambari.server.checks.AbstractCheckDescriptor) $r10
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : r6 = (org.apache.ambari.server.checks.AbstractCheckDescriptor) $r10 >>>>>>>> org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : $r11 = new org.apache.ambari.server.state.stack.PrerequisiteCheck
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : $r11 = new org.apache.ambari.server.state.stack.PrerequisiteCheck >>>>>>>> org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : $r12 = virtualinvoke r6.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription getDescription()>()
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : $r12 = virtualinvoke r6.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription getDescription()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getDescription : $r1 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription m_description>
org.apache.ambari.server.checks.AbstractCheckDescriptor.getDescription : $r1 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription m_description> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getDescription : return $r1
org.apache.ambari.server.checks.AbstractCheckDescriptor.getDescription : return $r1 >>>>>>>> org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : specialinvoke $r11.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void <init>(org.apache.ambari.server.checks.CheckDescription,java.lang.String)>($r12, r4)
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : specialinvoke $r11.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void <init>(org.apache.ambari.server.checks.CheckDescription,java.lang.String)>($r12, r4) >>>>>>>> org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : $z1 = virtualinvoke r6.<org.apache.ambari.server.checks.AbstractCheckDescriptor: boolean isApplicable(org.apache.ambari.server.controller.PrereqCheckRequest)>(r1)
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : $z1 = virtualinvoke r6.<org.apache.ambari.server.checks.AbstractCheckDescriptor: boolean isApplicable(org.apache.ambari.server.controller.PrereqCheckRequest)>(r1) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r5 = newarray (org.apache.ambari.server.checks.AbstractCheckDescriptor$CheckQualification)[2]
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r5 = newarray (org.apache.ambari.server.checks.AbstractCheckDescriptor$CheckQualification)[2] >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r6 = new org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r6 = new org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : specialinvoke $r6.<org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification: void <init>(org.apache.ambari.server.checks.AbstractCheckDescriptor)>(r0)
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : specialinvoke $r6.<org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification: void <init>(org.apache.ambari.server.checks.AbstractCheckDescriptor)>(r0) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r5[0] = $r6
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r5[0] = $r6 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r7 = new org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r7 = new org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : specialinvoke $r7.<org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification: void <init>(org.apache.ambari.server.checks.AbstractCheckDescriptor,java.lang.Class)>(r0, $r8)
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : specialinvoke $r7.<org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification: void <init>(org.apache.ambari.server.checks.AbstractCheckDescriptor,java.lang.Class)>(r0, $r8) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r5[1] = $r7
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r5[1] = $r7 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>($r5)
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>($r5) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r9 = virtualinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.util.List getQualifications()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r9 = virtualinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.util.List getQualifications()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getQualifications : $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getQualifications : $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getQualifications : return $r1
org.apache.ambari.server.checks.AbstractCheckDescriptor.getQualifications : return $r1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>($r9)
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>($r9) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z1 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z1 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r4 = (org.apache.ambari.server.checks.AbstractCheckDescriptor$CheckQualification) $r10
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r4 = (org.apache.ambari.server.checks.AbstractCheckDescriptor$CheckQualification) $r10 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z2 = interfaceinvoke r4.<org.apache.ambari.server.checks.AbstractCheckDescriptor$CheckQualification: boolean isApplicable(org.apache.ambari.server.controller.PrereqCheckRequest)>(r1)
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z2 = interfaceinvoke r4.<org.apache.ambari.server.checks.AbstractCheckDescriptor$CheckQualification: boolean isApplicable(org.apache.ambari.server.controller.PrereqCheckRequest)>(r1) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : $r6 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification: org.apache.ambari.server.checks.AbstractCheckDescriptor this$0>
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : $r6 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification: org.apache.ambari.server.checks.AbstractCheckDescriptor this$0> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : r2 = virtualinvoke $r6.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.util.Set getApplicableServices()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : r2 = virtualinvoke $r6.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.util.Set getApplicableServices()>() >>>>>>>> org.apache.ambari.server.state.CheckHelperTest$MockCheck.getApplicableServices : $r1 = r0.<org.apache.ambari.server.state.CheckHelperTest$MockCheck: org.apache.ambari.server.state.CheckHelperTest this$0>
org.apache.ambari.server.state.CheckHelperTest$MockCheck.getApplicableServices : $r1 = r0.<org.apache.ambari.server.state.CheckHelperTest$MockCheck: org.apache.ambari.server.state.CheckHelperTest this$0> >>>>>>>> org.apache.ambari.server.state.CheckHelperTest$MockCheck.getApplicableServices : $r2 = $r1.<org.apache.ambari.server.state.CheckHelperTest: java.util.Map m_services>
org.apache.ambari.server.state.CheckHelperTest$MockCheck.getApplicableServices : $r2 = $r1.<org.apache.ambari.server.state.CheckHelperTest: java.util.Map m_services> >>>>>>>> org.apache.ambari.server.state.CheckHelperTest$MockCheck.getApplicableServices : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>()
org.apache.ambari.server.state.CheckHelperTest$MockCheck.getApplicableServices : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.ambari.server.state.CheckHelperTest$MockCheck.getApplicableServices : return $r3
org.apache.ambari.server.state.CheckHelperTest$MockCheck.getApplicableServices : return $r3 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : $z0 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : $z0 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : if $z0 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : $r7 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification: org.apache.ambari.server.checks.AbstractCheckDescriptor this$0>
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : $r7 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification: org.apache.ambari.server.checks.AbstractCheckDescriptor this$0> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : r3 = virtualinvoke $r7.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.util.Set getServicesInUpgrade(org.apache.ambari.server.controller.PrereqCheckRequest)>(r1)
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : r3 = virtualinvoke $r7.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.util.Set getServicesInUpgrade(org.apache.ambari.server.controller.PrereqCheckRequest)>(r1) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r4 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r4 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: com.google.inject.Provider clustersProvider> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r5 = interfaceinvoke $r4.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r5 = interfaceinvoke $r4.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.state.CheckHelperTest$MockCheck$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.state.CheckHelperTest$MockCheck$1: org.apache.ambari.server.state.Clusters get()>()
org.apache.ambari.server.state.CheckHelperTest$MockCheck$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.state.CheckHelperTest$MockCheck$1: org.apache.ambari.server.state.Clusters get()>() >>>>>>>> org.apache.ambari.server.state.CheckHelperTest$MockCheck$1.get : $r1 = r0.<org.apache.ambari.server.state.CheckHelperTest$MockCheck$1: org.apache.ambari.server.state.CheckHelperTest$MockCheck this$1>
org.apache.ambari.server.state.CheckHelperTest$MockCheck$1.get : $r1 = r0.<org.apache.ambari.server.state.CheckHelperTest$MockCheck$1: org.apache.ambari.server.state.CheckHelperTest$MockCheck this$1> >>>>>>>> org.apache.ambari.server.state.CheckHelperTest$MockCheck$1.get : $r2 = $r1.<org.apache.ambari.server.state.CheckHelperTest$MockCheck: org.apache.ambari.server.state.CheckHelperTest this$0>
org.apache.ambari.server.state.CheckHelperTest$MockCheck$1.get : $r2 = $r1.<org.apache.ambari.server.state.CheckHelperTest$MockCheck: org.apache.ambari.server.state.CheckHelperTest this$0> >>>>>>>> org.apache.ambari.server.state.CheckHelperTest$MockCheck$1.get : $r3 = staticinvoke <org.apache.ambari.server.state.CheckHelperTest: org.apache.ambari.server.state.Clusters access$100(org.apache.ambari.server.state.CheckHelperTest)>($r2)
org.apache.ambari.server.state.CheckHelperTest$MockCheck$1.get : $r3 = staticinvoke <org.apache.ambari.server.state.CheckHelperTest: org.apache.ambari.server.state.Clusters access$100(org.apache.ambari.server.state.CheckHelperTest)>($r2) >>>>>>>> org.apache.ambari.server.state.CheckHelperTest.access$100 : $r1 = r0.<org.apache.ambari.server.state.CheckHelperTest: org.apache.ambari.server.state.Clusters clusters>
org.apache.ambari.server.state.CheckHelperTest.access$100 : $r1 = r0.<org.apache.ambari.server.state.CheckHelperTest: org.apache.ambari.server.state.Clusters clusters> >>>>>>>> org.apache.ambari.server.state.CheckHelperTest.access$100 : return $r1
org.apache.ambari.server.state.CheckHelperTest.access$100 : return $r1 >>>>>>>> org.apache.ambari.server.state.CheckHelperTest$MockCheck$1.get : return $r3
org.apache.ambari.server.state.CheckHelperTest$MockCheck$1.get : return $r3 >>>>>>>> org.apache.ambari.server.state.CheckHelperTest$MockCheck$1.get : return $r1
org.apache.ambari.server.state.CheckHelperTest$MockCheck$1.get : return $r1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r6 = (org.apache.ambari.server.state.Clusters) $r5
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r6 = (org.apache.ambari.server.state.Clusters) $r5 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r7 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r7 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : r2 = interfaceinvoke $r6.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>($r7)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : r2 = interfaceinvoke $r6.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>($r7) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : r11 = virtualinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.state.repository.VersionDefinitionXml getVersionDefinitionXml(org.apache.ambari.server.controller.PrereqCheckRequest)>(r1)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : r11 = virtualinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.state.repository.VersionDefinitionXml getVersionDefinitionXml(org.apache.ambari.server.controller.PrereqCheckRequest)>(r1) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : r2 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : r2 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity m_targetRepositoryVersion>
org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity m_targetRepositoryVersion> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : return $r1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : r5 = virtualinvoke r2.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.state.repository.VersionDefinitionXml getRepositoryXml()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : r5 = virtualinvoke r2.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.state.repository.VersionDefinitionXml getRepositoryXml()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : $r4 = new org.apache.ambari.server.AmbariException
org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : $r4 = new org.apache.ambari.server.AmbariException >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : specialinvoke $r4.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to run upgrade checks because of an invalid VDF", $r3)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : specialinvoke $r4.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to run upgrade checks because of an invalid VDF", $r3) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : throw $r4
org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : throw $r4 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r10 = new org.apache.ambari.server.AmbariException
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r10 = new org.apache.ambari.server.AmbariException >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : specialinvoke $r10.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to run upgrade checks because of an invalid VDF", $r9)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : specialinvoke $r10.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String,java.lang.Throwable)>("Unable to run upgrade checks because of an invalid VDF", $r9) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : throw $r10
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : throw $r10 >>>>>>>> org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : $r15 = <org.apache.ambari.server.state.CheckHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : $r15 = <org.apache.ambari.server.state.CheckHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : $r16 = virtualinvoke r6.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription getDescription()>()
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : $r16 = virtualinvoke r6.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription getDescription()>() >>>>>>>> org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : $r17 = virtualinvoke $r16.<org.apache.ambari.server.checks.CheckDescription: java.lang.String name()>()
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : $r17 = virtualinvoke $r16.<org.apache.ambari.server.checks.CheckDescription: java.lang.String name()>() >>>>>>>> org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : interfaceinvoke $r15.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)>("Unable to determine whether the pre-upgrade check {} is applicable to this upgrade", $r17, $r14)
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : interfaceinvoke $r15.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)>("Unable to determine whether the pre-upgrade check {} is applicable to this upgrade", $r17, $r14) >>>>>>>> org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : return $r9
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : return $r9 >>>>>>>> org.apache.ambari.server.state.CheckHelper.performChecks : r7 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.CheckHelper.performChecks : r7 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.CheckHelper.performChecks : $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.CheckHelper.performChecks : $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.CheckHelper.performChecks : if $z1 == 0
org.apache.ambari.server.state.CheckHelper.performChecks : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.CheckHelper.performChecks : return $r11
org.apache.ambari.server.state.CheckHelper.performChecks : return $r11 >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getResult : $r2 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.util.Map m_results>
org.apache.ambari.server.controller.PrereqCheckRequest.getResult : $r2 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.util.Map m_results> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getResult : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.ambari.server.controller.PrereqCheckRequest.getResult : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getResult : $r4 = (org.apache.ambari.server.state.stack.PrereqCheckStatus) $r3
org.apache.ambari.server.controller.PrereqCheckRequest.getResult : $r4 = (org.apache.ambari.server.state.stack.PrereqCheckStatus) $r3 >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getResult : return $r4
