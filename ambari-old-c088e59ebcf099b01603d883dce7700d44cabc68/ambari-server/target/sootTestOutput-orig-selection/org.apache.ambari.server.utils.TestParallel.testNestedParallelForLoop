org.apache.ambari.server.utils.Parallel.forLoop : if r0 == null >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.utils.Parallel.forLoop : $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : if $z0 == 0
org.apache.ambari.server.utils.Parallel.forLoop : if $z0 == 0 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $i0 = interfaceinvoke r0.<java.util.List: int size()>()
org.apache.ambari.server.utils.Parallel.forLoop : $i0 = interfaceinvoke r0.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $r4 = staticinvoke <org.apache.ambari.server.utils.Parallel: org.apache.ambari.server.utils.ParallelLoopResult forLoop(java.util.List,int,int,org.apache.ambari.server.utils.LoopBody)>(r0, 0, $i0, r1)
org.apache.ambari.server.utils.Parallel.forLoop : $r4 = staticinvoke <org.apache.ambari.server.utils.Parallel: org.apache.ambari.server.utils.ParallelLoopResult forLoop(java.util.List,int,int,org.apache.ambari.server.utils.LoopBody)>(r0, 0, $i0, r1) >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : if $z0 != 0
org.apache.ambari.server.utils.Parallel.forLoop : if $z0 != 0 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : if i0 != i1
org.apache.ambari.server.utils.Parallel.forLoop : if i0 != i1 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : if i0 < 0
org.apache.ambari.server.utils.Parallel.forLoop : if i0 < 0 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $i2 = interfaceinvoke r0.<java.util.List: int size()>()
org.apache.ambari.server.utils.Parallel.forLoop : $i2 = interfaceinvoke r0.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : if i0 < $i2
org.apache.ambari.server.utils.Parallel.forLoop : if i0 < $i2 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : if i1 < 0
org.apache.ambari.server.utils.Parallel.forLoop : if i1 < 0 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $i3 = interfaceinvoke r0.<java.util.List: int size()>()
org.apache.ambari.server.utils.Parallel.forLoop : $i3 = interfaceinvoke r0.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : if i1 <= $i3
org.apache.ambari.server.utils.Parallel.forLoop : if i1 <= $i3 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : if i0 <= i1
org.apache.ambari.server.utils.Parallel.forLoop : if i0 <= i1 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $i4 = interfaceinvoke r0.<java.util.List: int size()>()
org.apache.ambari.server.utils.Parallel.forLoop : $i4 = interfaceinvoke r0.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : if $i4 == 1
org.apache.ambari.server.utils.Parallel.forLoop : if $i4 == 1 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $i5 = i1 - i0
org.apache.ambari.server.utils.Parallel.forLoop : $i5 = i1 - i0 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : if $i5 != 1
org.apache.ambari.server.utils.Parallel.forLoop : if $i5 != 1 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $r9 = new java.util.concurrent.ExecutorCompletionService
org.apache.ambari.server.utils.Parallel.forLoop : $r9 = new java.util.concurrent.ExecutorCompletionService >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $r10 = <org.apache.ambari.server.utils.Parallel: java.util.concurrent.ExecutorService executor>
org.apache.ambari.server.utils.Parallel.forLoop : $r10 = <org.apache.ambari.server.utils.Parallel: java.util.concurrent.ExecutorService executor> >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : specialinvoke $r9.<java.util.concurrent.ExecutorCompletionService: void <init>(java.util.concurrent.Executor)>($r10)
org.apache.ambari.server.utils.Parallel.forLoop : specialinvoke $r9.<java.util.concurrent.ExecutorCompletionService: void <init>(java.util.concurrent.Executor)>($r10) >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $r11 = new java.util.LinkedList
org.apache.ambari.server.utils.Parallel.forLoop : $r11 = new java.util.LinkedList >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : specialinvoke $r11.<java.util.LinkedList: void <init>()>()
org.apache.ambari.server.utils.Parallel.forLoop : specialinvoke $r11.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : i11 = i0
org.apache.ambari.server.utils.Parallel.forLoop : i11 = i0 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : if i11 >= i1
org.apache.ambari.server.utils.Parallel.forLoop : if i11 >= i1 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i11)
org.apache.ambari.server.utils.Parallel.forLoop : r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i11) >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $r31 = new org.apache.ambari.server.utils.Parallel$1
org.apache.ambari.server.utils.Parallel.forLoop : $r31 = new org.apache.ambari.server.utils.Parallel$1 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : specialinvoke $r31.<org.apache.ambari.server.utils.Parallel$1: void <init>(java.lang.Integer,org.apache.ambari.server.utils.LoopBody,java.util.List)>(r45, r1, r0)
org.apache.ambari.server.utils.Parallel.forLoop : specialinvoke $r31.<org.apache.ambari.server.utils.Parallel$1: void <init>(java.lang.Integer,org.apache.ambari.server.utils.LoopBody,java.util.List)>(r45, r1, r0) >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : r46 = interfaceinvoke $r9.<java.util.concurrent.CompletionService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r31)
org.apache.ambari.server.utils.Parallel.forLoop : r46 = interfaceinvoke $r9.<java.util.concurrent.CompletionService: java.util.concurrent.Future submit(java.util.concurrent.Callable)>($r31) >>>>>>>> org.apache.ambari.server.utils.Parallel$1.call : $r1 = virtualinvoke r0.<org.apache.ambari.server.utils.Parallel$1: org.apache.ambari.server.utils.Parallel$ResultWrapper call()>()
org.apache.ambari.server.utils.Parallel$1.call : $r1 = virtualinvoke r0.<org.apache.ambari.server.utils.Parallel$1: org.apache.ambari.server.utils.Parallel$ResultWrapper call()>() >>>>>>>> org.apache.ambari.server.utils.Parallel$1.call : $r2 = new org.apache.ambari.server.utils.Parallel$ResultWrapper
org.apache.ambari.server.utils.Parallel$1.call : $r2 = new org.apache.ambari.server.utils.Parallel$ResultWrapper >>>>>>>> org.apache.ambari.server.utils.Parallel$1.call : specialinvoke $r2.<org.apache.ambari.server.utils.Parallel$ResultWrapper: void <init>(org.apache.ambari.server.utils.Parallel$1)>(null)
org.apache.ambari.server.utils.Parallel$1.call : specialinvoke $r2.<org.apache.ambari.server.utils.Parallel$ResultWrapper: void <init>(org.apache.ambari.server.utils.Parallel$1)>(null) >>>>>>>> org.apache.ambari.server.utils.Parallel$1.call : $r3 = r0.<org.apache.ambari.server.utils.Parallel$1: java.lang.Integer val$k>
org.apache.ambari.server.utils.Parallel$1.call : $r3 = r0.<org.apache.ambari.server.utils.Parallel$1: java.lang.Integer val$k> >>>>>>>> org.apache.ambari.server.utils.Parallel$1.call : $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.utils.Parallel$1.call : $i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.ambari.server.utils.Parallel$1.call : $r2.<org.apache.ambari.server.utils.Parallel$ResultWrapper: int index> = $i0
org.apache.ambari.server.utils.Parallel$1.call : $r2.<org.apache.ambari.server.utils.Parallel$ResultWrapper: int index> = $i0 >>>>>>>> org.apache.ambari.server.utils.Parallel$1.call : $r5 = r0.<org.apache.ambari.server.utils.Parallel$1: org.apache.ambari.server.utils.LoopBody val$loopBody>
org.apache.ambari.server.utils.Parallel$1.call : $r5 = r0.<org.apache.ambari.server.utils.Parallel$1: org.apache.ambari.server.utils.LoopBody val$loopBody> >>>>>>>> org.apache.ambari.server.utils.Parallel$1.call : $r6 = r0.<org.apache.ambari.server.utils.Parallel$1: java.util.List val$source>
org.apache.ambari.server.utils.Parallel$1.call : $r6 = r0.<org.apache.ambari.server.utils.Parallel$1: java.util.List val$source> >>>>>>>> org.apache.ambari.server.utils.Parallel$1.call : $r4 = r0.<org.apache.ambari.server.utils.Parallel$1: java.lang.Integer val$k>
org.apache.ambari.server.utils.Parallel$1.call : $r4 = r0.<org.apache.ambari.server.utils.Parallel$1: java.lang.Integer val$k> >>>>>>>> org.apache.ambari.server.utils.Parallel$1.call : $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.utils.Parallel$1.call : $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.ambari.server.utils.Parallel$1.call : $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i1)
org.apache.ambari.server.utils.Parallel$1.call : $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i1) >>>>>>>> org.apache.ambari.server.utils.Parallel$1.call : $r8 = interfaceinvoke $r5.<org.apache.ambari.server.utils.LoopBody: java.lang.Object run(java.lang.Object)>($r7)
org.apache.ambari.server.utils.Parallel$1.call : $r8 = interfaceinvoke $r5.<org.apache.ambari.server.utils.LoopBody: java.lang.Object run(java.lang.Object)>($r7) >>>>>>>> org.apache.ambari.server.utils.TestParallel$5.run : $r2 = (java.lang.Integer) r1
org.apache.ambari.server.utils.TestParallel$5.run : $r2 = (java.lang.Integer) r1 >>>>>>>> org.apache.ambari.server.utils.TestParallel$5.run : $r3 = virtualinvoke r0.<org.apache.ambari.server.utils.TestParallel$5: java.lang.Integer run(java.lang.Integer)>($r2)
org.apache.ambari.server.utils.TestParallel$5.run : $r3 = virtualinvoke r0.<org.apache.ambari.server.utils.TestParallel$5: java.lang.Integer run(java.lang.Integer)>($r2) >>>>>>>> org.apache.ambari.server.utils.TestParallel$5.run : virtualinvoke r1.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.utils.TestParallel$5.run : virtualinvoke r1.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.ambari.server.utils.TestParallel$5.run : $r4 = r0.<org.apache.ambari.server.utils.TestParallel$5: java.util.List val$input>
org.apache.ambari.server.utils.TestParallel$5.run : $r4 = r0.<org.apache.ambari.server.utils.TestParallel$5: java.util.List val$input> >>>>>>>> org.apache.ambari.server.utils.TestParallel$5.run : $r3 = new org.apache.ambari.server.utils.TestParallel$5$1
org.apache.ambari.server.utils.TestParallel$5.run : $r3 = new org.apache.ambari.server.utils.TestParallel$5$1 >>>>>>>> org.apache.ambari.server.utils.TestParallel$5.run : specialinvoke $r3.<org.apache.ambari.server.utils.TestParallel$5$1: void <init>(org.apache.ambari.server.utils.TestParallel$5,java.lang.Integer)>(r0, r1)
org.apache.ambari.server.utils.TestParallel$5.run : specialinvoke $r3.<org.apache.ambari.server.utils.TestParallel$5$1: void <init>(org.apache.ambari.server.utils.TestParallel$5,java.lang.Integer)>(r0, r1) >>>>>>>> org.apache.ambari.server.utils.TestParallel$5.run : r2 = staticinvoke <org.apache.ambari.server.utils.Parallel: org.apache.ambari.server.utils.ParallelLoopResult forLoop(java.util.List,org.apache.ambari.server.utils.LoopBody)>($r4, $r3)
org.apache.ambari.server.utils.TestParallel$5.run : r2 = staticinvoke <org.apache.ambari.server.utils.Parallel: org.apache.ambari.server.utils.ParallelLoopResult forLoop(java.util.List,org.apache.ambari.server.utils.LoopBody)>($r4, $r3) >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r46)
org.apache.ambari.server.utils.Parallel.forLoop : interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r46) >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : i11 = i11 + 1
org.apache.ambari.server.utils.Parallel.forLoop : i11 = i11 + 1 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : goto [?= (branch)]
org.apache.ambari.server.utils.Parallel.forLoop : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>()
org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>() >>>>>>>> org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : r2 = interfaceinvoke $r3.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>(r1)
org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : r2 = interfaceinvoke $r3.<java.util.concurrent.ThreadFactory: java.lang.Thread newThread(java.lang.Runnable)>(r1) >>>>>>>> org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $r4 = new java.lang.StringBuilder
org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $r4 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parallel-loop-")
org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("parallel-loop-") >>>>>>>> org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $r6 = <org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory: java.util.concurrent.atomic.AtomicInteger threadId>
org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $r6 = <org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory: java.util.concurrent.atomic.AtomicInteger threadId> >>>>>>>> org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $i0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>()
org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $i0 = virtualinvoke $r6.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>() >>>>>>>> org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : virtualinvoke r2.<java.lang.Thread: void setName(java.lang.String)>($r8)
org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : virtualinvoke r2.<java.lang.Thread: void setName(java.lang.String)>($r8) >>>>>>>> org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : return r2
org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory.newThread : return r2 >>>>>>>> org.apache.ambari.server.utils.TestParallel$5$1.run : $r2 = (java.lang.Integer) r1
org.apache.ambari.server.utils.TestParallel$5$1.run : $r2 = (java.lang.Integer) r1 >>>>>>>> org.apache.ambari.server.utils.TestParallel$5$1.run : $r3 = virtualinvoke r0.<org.apache.ambari.server.utils.TestParallel$5$1: java.lang.Integer run(java.lang.Integer)>($r2)
org.apache.ambari.server.utils.TestParallel$5$1.run : $r3 = virtualinvoke r0.<org.apache.ambari.server.utils.TestParallel$5$1: java.lang.Integer run(java.lang.Integer)>($r2) >>>>>>>> org.apache.ambari.server.utils.TestParallel$5$1.run : $r2 = r0.<org.apache.ambari.server.utils.TestParallel$5$1: java.lang.Integer val$in1>
org.apache.ambari.server.utils.TestParallel$5$1.run : $r2 = r0.<org.apache.ambari.server.utils.TestParallel$5$1: java.lang.Integer val$in1> >>>>>>>> org.apache.ambari.server.utils.TestParallel$5$1.run : $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.utils.TestParallel$5$1.run : $i0 = virtualinvoke $r2.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.ambari.server.utils.TestParallel$5$1.run : $i1 = virtualinvoke r1.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.utils.TestParallel$5$1.run : $i1 = virtualinvoke r1.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.ambari.server.utils.TestParallel$5$1.run : $i2 = $i0 * $i1
org.apache.ambari.server.utils.TestParallel$5$1.run : $i2 = $i0 * $i1 >>>>>>>> org.apache.ambari.server.utils.TestParallel$5$1.run : $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)
org.apache.ambari.server.utils.TestParallel$5$1.run : $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2) >>>>>>>> org.apache.ambari.server.utils.TestParallel$5$1.run : return $r3
org.apache.ambari.server.utils.TestParallel$5$1.run : return $r3 >>>>>>>> org.apache.ambari.server.utils.Parallel$1.call : $r2.<org.apache.ambari.server.utils.Parallel$ResultWrapper: java.lang.Object result> = $r8
org.apache.ambari.server.utils.Parallel$1.call : $r2.<org.apache.ambari.server.utils.Parallel$ResultWrapper: java.lang.Object result> = $r8 >>>>>>>> org.apache.ambari.server.utils.Parallel$1.call : return $r2
org.apache.ambari.server.utils.Parallel$1.call : return $r2 >>>>>>>> org.apache.ambari.server.utils.Parallel$1.call : return $r1
org.apache.ambari.server.utils.Parallel$1.call : return $r1 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : z5 = 1
org.apache.ambari.server.utils.Parallel.forLoop : z5 = 1 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $i6 = interfaceinvoke $r11.<java.util.List: int size()>()
org.apache.ambari.server.utils.Parallel.forLoop : $i6 = interfaceinvoke $r11.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $r12 = newarray (java.lang.Object)[$i6]
org.apache.ambari.server.utils.Parallel.forLoop : $r12 = newarray (java.lang.Object)[$i6] >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : r47 = (java.lang.Object[]) $r12
org.apache.ambari.server.utils.Parallel.forLoop : r47 = (java.lang.Object[]) $r12 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : i12 = 0
org.apache.ambari.server.utils.Parallel.forLoop : i12 = 0 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $i7 = interfaceinvoke $r11.<java.util.List: int size()>()
org.apache.ambari.server.utils.Parallel.forLoop : $i7 = interfaceinvoke $r11.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : if i12 >= $i7
org.apache.ambari.server.utils.Parallel.forLoop : if i12 >= $i7 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : r48 = null
org.apache.ambari.server.utils.Parallel.forLoop : r48 = null >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $r15 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.ambari.server.utils.Parallel.forLoop : $r15 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : r48 = interfaceinvoke $r9.<java.util.concurrent.CompletionService: java.util.concurrent.Future poll(long,java.util.concurrent.TimeUnit)>(10000L, $r15)
org.apache.ambari.server.utils.Parallel.forLoop : r48 = interfaceinvoke $r9.<java.util.concurrent.CompletionService: java.util.concurrent.Future poll(long,java.util.concurrent.TimeUnit)>(10000L, $r15) >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : if r48 != null
org.apache.ambari.server.utils.Parallel.forLoop : if r48 != null >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $r16 = interfaceinvoke r48.<java.util.concurrent.Future: java.lang.Object get()>()
org.apache.ambari.server.utils.Parallel.forLoop : $r16 = interfaceinvoke r48.<java.util.concurrent.Future: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : r50 = (org.apache.ambari.server.utils.Parallel$ResultWrapper) $r16
org.apache.ambari.server.utils.Parallel.forLoop : r50 = (org.apache.ambari.server.utils.Parallel$ResultWrapper) $r16 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $r17 = r50.<org.apache.ambari.server.utils.Parallel$ResultWrapper: java.lang.Object result>
org.apache.ambari.server.utils.Parallel.forLoop : $r17 = r50.<org.apache.ambari.server.utils.Parallel$ResultWrapper: java.lang.Object result> >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : if $r17 == null
org.apache.ambari.server.utils.Parallel.forLoop : if $r17 == null >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $i9 = r50.<org.apache.ambari.server.utils.Parallel$ResultWrapper: int index>
org.apache.ambari.server.utils.Parallel.forLoop : $i9 = r50.<org.apache.ambari.server.utils.Parallel$ResultWrapper: int index> >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $r20 = r50.<org.apache.ambari.server.utils.Parallel$ResultWrapper: java.lang.Object result>
org.apache.ambari.server.utils.Parallel.forLoop : $r20 = r50.<org.apache.ambari.server.utils.Parallel$ResultWrapper: java.lang.Object result> >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : r47[$i9] = $r20
org.apache.ambari.server.utils.Parallel.forLoop : r47[$i9] = $r20 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : goto [?= i12 = i12 + 1]
org.apache.ambari.server.utils.Parallel.forLoop : goto [?= i12 = i12 + 1] >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : i12 = i12 + 1
org.apache.ambari.server.utils.Parallel.forLoop : i12 = i12 + 1 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : goto [?= $i7 = interfaceinvoke $r11.<java.util.List: int size()>()]
org.apache.ambari.server.utils.Parallel.forLoop : goto [?= $i7 = interfaceinvoke $r11.<java.util.List: int size()>()] >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $r13 = new org.apache.ambari.server.utils.ParallelLoopResult
org.apache.ambari.server.utils.Parallel.forLoop : $r13 = new org.apache.ambari.server.utils.ParallelLoopResult >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $r14 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r47)
org.apache.ambari.server.utils.Parallel.forLoop : $r14 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r47) >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : specialinvoke $r13.<org.apache.ambari.server.utils.ParallelLoopResult: void <init>(boolean,java.util.List)>(z5, $r14)
org.apache.ambari.server.utils.Parallel.forLoop : specialinvoke $r13.<org.apache.ambari.server.utils.ParallelLoopResult: void <init>(boolean,java.util.List)>(z5, $r14) >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : return $r13
org.apache.ambari.server.utils.Parallel.forLoop : return $r13 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : return $r4
org.apache.ambari.server.utils.Parallel.forLoop : return $r4 >>>>>>>> org.apache.ambari.server.utils.TestParallel$5.run : $r5 = r0.<org.apache.ambari.server.utils.TestParallel$5: org.apache.ambari.server.utils.ParallelLoopResult[] val$innerLoopResults>
org.apache.ambari.server.utils.TestParallel$5.run : $r5 = r0.<org.apache.ambari.server.utils.TestParallel$5: org.apache.ambari.server.utils.ParallelLoopResult[] val$innerLoopResults> >>>>>>>> org.apache.ambari.server.utils.TestParallel$5.run : $i3 = virtualinvoke r1.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.utils.TestParallel$5.run : $i3 = virtualinvoke r1.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.ambari.server.utils.TestParallel$5.run : $r5[$i3] = r2
org.apache.ambari.server.utils.TestParallel$5.run : $r5[$i3] = r2 >>>>>>>> org.apache.ambari.server.utils.TestParallel$5.run : $i4 = virtualinvoke r1.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.utils.TestParallel$5.run : $i4 = virtualinvoke r1.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.ambari.server.utils.TestParallel$5.run : $i5 = virtualinvoke r1.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.utils.TestParallel$5.run : $i5 = virtualinvoke r1.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.ambari.server.utils.TestParallel$5.run : $i6 = $i4 * $i5
org.apache.ambari.server.utils.TestParallel$5.run : $i6 = $i4 * $i5 >>>>>>>> org.apache.ambari.server.utils.TestParallel$5.run : $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6)
org.apache.ambari.server.utils.TestParallel$5.run : $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6) >>>>>>>> org.apache.ambari.server.utils.TestParallel$5.run : return $r6
org.apache.ambari.server.utils.TestParallel$5.run : return $r6 >>>>>>>> org.apache.ambari.server.utils.TestParallel$5.run : return $r3
org.apache.ambari.server.utils.TestParallel$5.run : return $r3 >>>>>>>> org.apache.ambari.server.utils.ParallelLoopResult.getIsCompleted : $z0 = r0.<org.apache.ambari.server.utils.ParallelLoopResult: boolean isCompleted>
org.apache.ambari.server.utils.ParallelLoopResult.getIsCompleted : $z0 = r0.<org.apache.ambari.server.utils.ParallelLoopResult: boolean isCompleted> >>>>>>>> org.apache.ambari.server.utils.ParallelLoopResult.getIsCompleted : return $z0
org.apache.ambari.server.utils.ParallelLoopResult.getIsCompleted : return $z0 >>>>>>>> org.apache.ambari.server.utils.ParallelLoopResult.getResult : $r1 = r0.<org.apache.ambari.server.utils.ParallelLoopResult: java.util.List result>
org.apache.ambari.server.utils.ParallelLoopResult.getResult : $r1 = r0.<org.apache.ambari.server.utils.ParallelLoopResult: java.util.List result> >>>>>>>> org.apache.ambari.server.utils.ParallelLoopResult.getResult : return $r1
