org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.createFromJSON : $r1 = new com.google.gson.Gson >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.createFromJSON : specialinvoke $r1.<com.google.gson.Gson: void <init>()>()
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.createFromJSON : specialinvoke $r1.<com.google.gson.Gson: void <init>()>() >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.createFromJSON : $r2 = new org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest$1
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.createFromJSON : $r2 = new org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest$1 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.createFromJSON : specialinvoke $r2.<org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest$1: void <init>()>()
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.createFromJSON : specialinvoke $r2.<org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest$1: void <init>()>() >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.createFromJSON : $r3 = virtualinvoke $r2.<org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest$1: java.lang.reflect.Type getType()>()
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.createFromJSON : $r3 = virtualinvoke $r2.<org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest$1: java.lang.reflect.Type getType()>() >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.createFromJSON : $r4 = virtualinvoke $r1.<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.reflect.Type)>(" {  \"name\": \"COMPONENT_NAME\",  \"identities\": [{  \"name\": \"identity_1\",  \"principal\":{\"value\": \"service/_HOST@_REALM\",\"configuration\": \"service-site/service.component.kerberos.principal\",\"type\": \"service\",\"local_username\": \"localUser\"},  \"keytab\":{  \"file\": \"/etc/security/keytabs/${host}/subject.service.keytab\",  \"owner\": {      \"name\": \"subject\",      \"access\": \"rw\"  },  \"group\": {      \"name\": \"hadoop\",      \"access\": \"r\"  },  \"configuration\": \"service-site/service.component.keytab.file\"},  \"when\": {\"contains\" : [\"services\", \"HIVE\"]}}],  \"configurations\": [    {      \"service-site\": {        \"service.component.property1\": \"value1\",        \"service.component.property2\": \"value2\"      }    }  ],  \"auth_to_local_properties\": [      component.name.rules1    ]}", $r3)
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.createFromJSON : $r4 = virtualinvoke $r1.<com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.reflect.Type)>(" {  \"name\": \"COMPONENT_NAME\",  \"identities\": [{  \"name\": \"identity_1\",  \"principal\":{\"value\": \"service/_HOST@_REALM\",\"configuration\": \"service-site/service.component.kerberos.principal\",\"type\": \"service\",\"local_username\": \"localUser\"},  \"keytab\":{  \"file\": \"/etc/security/keytabs/${host}/subject.service.keytab\",  \"owner\": {      \"name\": \"subject\",      \"access\": \"rw\"  },  \"group\": {      \"name\": \"hadoop\",      \"access\": \"r\"  },  \"configuration\": \"service-site/service.component.keytab.file\"},  \"when\": {\"contains\" : [\"services\", \"HIVE\"]}}],  \"configurations\": [    {      \"service-site\": {        \"service.component.property1\": \"value1\",        \"service.component.property2\": \"value2\"      }    }  ],  \"auth_to_local_properties\": [      component.name.rules1    ]}", $r3) >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.createFromJSON : r0 = (java.util.Map) $r4
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.createFromJSON : r0 = (java.util.Map) $r4 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.createFromJSON : $r5 = new org.apache.ambari.server.state.kerberos.KerberosComponentDescriptor
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.createFromJSON : $r5 = new org.apache.ambari.server.state.kerberos.KerberosComponentDescriptor >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.createFromJSON : specialinvoke $r5.<org.apache.ambari.server.state.kerberos.KerberosComponentDescriptor: void <init>(java.util.Map)>(r0)
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.createFromJSON : specialinvoke $r5.<org.apache.ambari.server.state.kerberos.KerberosComponentDescriptor: void <init>(java.util.Map)>(r0) >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.getStringValue : r2 = staticinvoke <org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor: java.lang.Object getValue(java.util.Map,java.lang.String)>(r0, r1)
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.getStringValue : r2 = staticinvoke <org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor: java.lang.Object getValue(java.util.Map,java.lang.String)>(r0, r1) >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.getValue : if r0 == null
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.getValue : if r0 == null >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.getValue : if r1 != null
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.getValue : if r1 != null >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.getValue : $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.getValue : $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.getValue : return $r2
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.getValue : return $r2 >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.getStringValue : if r2 != null
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.getStringValue : if r2 != null >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.getStringValue : $r3 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>()
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.getStringValue : $r3 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.getStringValue : return $r3
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.getStringValue : return $r3 >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.setName : r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor: java.lang.String name> = r1
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.setName : r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor: java.lang.String name> = r1 >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.getStringValue : $r3 = null
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.getStringValue : $r3 = null >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.getStringValue : goto [?= return $r3]
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.getStringValue : goto [?= return $r3] >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor.setReference : r0.<org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor: java.lang.String reference> = r1
org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor.setReference : r0.<org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor: java.lang.String reference> = r1 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor.getKerberosPrincipalTypeValue : r2 = staticinvoke <org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor: java.lang.String getStringValue(java.util.Map,java.lang.String)>(r0, r1)
org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor.getKerberosPrincipalTypeValue : r2 = staticinvoke <org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor: java.lang.String getStringValue(java.util.Map,java.lang.String)>(r0, r1) >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor.getKerberosPrincipalTypeValue : if r2 == null
org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor.getKerberosPrincipalTypeValue : if r2 == null >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor.getKerberosPrincipalTypeValue : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor.getKerberosPrincipalTypeValue : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor.getKerberosPrincipalTypeValue : if $z0 == 0
org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor.getKerberosPrincipalTypeValue : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor.getKerberosPrincipalTypeValue : $r3 = virtualinvoke r2.<java.lang.String: java.lang.String toUpperCase()>()
org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor.getKerberosPrincipalTypeValue : $r3 = virtualinvoke r2.<java.lang.String: java.lang.String toUpperCase()>() >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor.getKerberosPrincipalTypeValue : $r4 = staticinvoke <org.apache.ambari.server.state.kerberos.KerberosPrincipalType: org.apache.ambari.server.state.kerberos.KerberosPrincipalType valueOf(java.lang.String)>($r3)
org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor.getKerberosPrincipalTypeValue : $r4 = staticinvoke <org.apache.ambari.server.state.kerberos.KerberosPrincipalType: org.apache.ambari.server.state.kerberos.KerberosPrincipalType valueOf(java.lang.String)>($r3) >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosPrincipalType.valueOf : $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/apache/ambari/server/state/kerberos/KerberosPrincipalType;", r0)
org.apache.ambari.server.state.kerberos.KerberosPrincipalType.valueOf : $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/apache/ambari/server/state/kerberos/KerberosPrincipalType;", r0) >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosPrincipalType.valueOf : $r2 = (org.apache.ambari.server.state.kerberos.KerberosPrincipalType) $r1
org.apache.ambari.server.state.kerberos.KerberosPrincipalType.valueOf : $r2 = (org.apache.ambari.server.state.kerberos.KerberosPrincipalType) $r1 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosPrincipalType.valueOf : return $r2
org.apache.ambari.server.state.kerberos.KerberosPrincipalType.valueOf : return $r2 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor.getKerberosPrincipalTypeValue : return $r4
org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor.getKerberosPrincipalTypeValue : return $r4 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor.setType : r0.<org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor: org.apache.ambari.server.state.kerberos.KerberosPrincipalType type> = r1
org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor.setType : r0.<org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor: org.apache.ambari.server.state.kerberos.KerberosPrincipalType type> = r1 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor.setConfiguration : r0.<org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor: java.lang.String configuration> = r1
org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor.setConfiguration : r0.<org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor: java.lang.String configuration> = r1 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor.setLocalUsername : r0.<org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor: java.lang.String localUsername> = r1
org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor.setLocalUsername : r0.<org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor: java.lang.String localUsername> = r1 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor.setPrincipalDescriptor : r0.<org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor: org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor principal> = r1
org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor.setPrincipalDescriptor : r0.<org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor: org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor principal> = r1 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor.setPrincipalDescriptor : $r2 = r0.<org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor: org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor principal>
org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor.setPrincipalDescriptor : $r2 = r0.<org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor: org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor principal> >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor.setPrincipalDescriptor : if $r2 == null
org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor.setPrincipalDescriptor : if $r2 == null >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor.setPrincipalDescriptor : $r3 = r0.<org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor: org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor principal>
org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor.setPrincipalDescriptor : $r3 = r0.<org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor: org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor principal> >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor.setPrincipalDescriptor : virtualinvoke $r3.<org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor: void setParent(org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor)>(r0)
org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor.setPrincipalDescriptor : virtualinvoke $r3.<org.apache.ambari.server.state.kerberos.KerberosPrincipalDescriptor: void setParent(org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor)>(r0) >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.setParent : r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor: org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor parent> = r1
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.setParent : r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor: org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor parent> = r1 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor.setOwnerName : r0.<org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor: java.lang.String ownerName> = r1
org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor.setOwnerName : r0.<org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor: java.lang.String ownerName> = r1 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor.setOwnerAccess : r0.<org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor: java.lang.String ownerAccess> = r1
org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor.setOwnerAccess : r0.<org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor: java.lang.String ownerAccess> = r1 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor.setGroupName : r0.<org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor: java.lang.String groupName> = r1
org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor.setGroupName : r0.<org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor: java.lang.String groupName> = r1 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor.setGroupAccess : r0.<org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor: java.lang.String groupAccess> = r1
org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor.setGroupAccess : r0.<org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor: java.lang.String groupAccess> = r1 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor.setConfiguration : r0.<org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor: java.lang.String configuration> = r1
org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor.setConfiguration : r0.<org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor: java.lang.String configuration> = r1 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor.setCachable : r0.<org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor: boolean cachable> = z0
org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor.setCachable : r0.<org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor: boolean cachable> = z0 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor.setKeytabDescriptor : r0.<org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor: org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor keytab> = r1
org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor.setKeytabDescriptor : r0.<org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor: org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor keytab> = r1 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor.setKeytabDescriptor : $r2 = r0.<org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor: org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor keytab>
org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor.setKeytabDescriptor : $r2 = r0.<org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor: org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor keytab> >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor.setKeytabDescriptor : if $r2 == null
org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor.setKeytabDescriptor : if $r2 == null >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor.setKeytabDescriptor : $r3 = r0.<org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor: org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor keytab>
org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor.setKeytabDescriptor : $r3 = r0.<org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor: org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor keytab> >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor.setKeytabDescriptor : virtualinvoke $r3.<org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor: void setParent(org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor)>(r0)
org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor.setKeytabDescriptor : virtualinvoke $r3.<org.apache.ambari.server.state.kerberos.KerberosKeytabDescriptor: void setParent(org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor)>(r0) >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : r30 = null
org.apache.ambari.server.collections.PredicateUtils.fromMap : r30 = null >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : if r0 == null
org.apache.ambari.server.collections.PredicateUtils.fromMap : if r0 == null >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>()
org.apache.ambari.server.collections.PredicateUtils.fromMap : $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : if $z0 != 0
org.apache.ambari.server.collections.PredicateUtils.fromMap : if $z0 != 0 >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : $i0 = interfaceinvoke r0.<java.util.Map: int size()>()
org.apache.ambari.server.collections.PredicateUtils.fromMap : $i0 = interfaceinvoke r0.<java.util.Map: int size()>() >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : if $i0 != 1
org.apache.ambari.server.collections.PredicateUtils.fromMap : if $i0 != 1 >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : $r8 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.collections.PredicateUtils.fromMap : $r8 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.collections.PredicateUtils.fromMap : $r9 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.collections.PredicateUtils.fromMap : $r10 = interfaceinvoke $r9.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : r1 = (java.util.Map$Entry) $r10
org.apache.ambari.server.collections.PredicateUtils.fromMap : r1 = (java.util.Map$Entry) $r10 >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : $r11 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.ambari.server.collections.PredicateUtils.fromMap : $r11 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : r2 = staticinvoke <java.util.Objects: java.lang.String toString(java.lang.Object)>($r11)
org.apache.ambari.server.collections.PredicateUtils.fromMap : r2 = staticinvoke <java.util.Objects: java.lang.String toString(java.lang.Object)>($r11) >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : r3 = staticinvoke <org.apache.ambari.server.collections.functors.PredicateClassFactory: java.lang.Class getPredicateClass(java.lang.String)>(r2)
org.apache.ambari.server.collections.PredicateUtils.fromMap : r3 = staticinvoke <org.apache.ambari.server.collections.functors.PredicateClassFactory: java.lang.Class getPredicateClass(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.collections.functors.PredicateClassFactory.getPredicateClass : if r0 != null
org.apache.ambari.server.collections.functors.PredicateClassFactory.getPredicateClass : if r0 != null >>>>>>>> org.apache.ambari.server.collections.functors.PredicateClassFactory.getPredicateClass : $r1 = <org.apache.ambari.server.collections.functors.PredicateClassFactory: java.util.Map NAME_TO_CLASS>
org.apache.ambari.server.collections.functors.PredicateClassFactory.getPredicateClass : $r1 = <org.apache.ambari.server.collections.functors.PredicateClassFactory: java.util.Map NAME_TO_CLASS> >>>>>>>> org.apache.ambari.server.collections.functors.PredicateClassFactory.getPredicateClass : $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.apache.ambari.server.collections.functors.PredicateClassFactory.getPredicateClass : $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.apache.ambari.server.collections.functors.PredicateClassFactory.getPredicateClass : $r3 = (java.lang.Class) $r2
org.apache.ambari.server.collections.functors.PredicateClassFactory.getPredicateClass : $r3 = (java.lang.Class) $r2 >>>>>>>> org.apache.ambari.server.collections.functors.PredicateClassFactory.getPredicateClass : return $r3
org.apache.ambari.server.collections.functors.PredicateClassFactory.getPredicateClass : return $r3 >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : if r3 != null
org.apache.ambari.server.collections.PredicateUtils.fromMap : if r3 != null >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : $r12 = newarray (java.lang.Class)[1]
org.apache.ambari.server.collections.PredicateUtils.fromMap : $r12 = newarray (java.lang.Class)[1] >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : $r12[0] = class "Ljava/util/Map;"
org.apache.ambari.server.collections.PredicateUtils.fromMap : $r12[0] = class "Ljava/util/Map;" >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : r31 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("fromMap", $r12)
org.apache.ambari.server.collections.PredicateUtils.fromMap : r31 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("fromMap", $r12) >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : if r31 != null
org.apache.ambari.server.collections.PredicateUtils.fromMap : if r31 != null >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : $r13 = newarray (java.lang.Object)[1]
org.apache.ambari.server.collections.PredicateUtils.fromMap : $r13 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : $r14 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.collections.PredicateUtils.fromMap : $r14 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : $r15 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>(r2, $r14)
org.apache.ambari.server.collections.PredicateUtils.fromMap : $r15 = staticinvoke <java.util.Collections: java.util.Map singletonMap(java.lang.Object,java.lang.Object)>(r2, $r14) >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : $r13[0] = $r15
org.apache.ambari.server.collections.PredicateUtils.fromMap : $r13[0] = $r15 >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : $r16 = virtualinvoke r31.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r13)
org.apache.ambari.server.collections.PredicateUtils.fromMap : $r16 = virtualinvoke r31.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r13) >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if r0 != null
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if r0 != null >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r27 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("contains")
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r27 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>("contains") >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if $r27 != null
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if $r27 != null >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $z0 = $r27 instanceof java.util.Collection
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $z0 = $r27 instanceof java.util.Collection >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if $z0 == 0
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if $z0 == 0 >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : r2 = (java.util.Collection) $r27
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : r2 = (java.util.Collection) $r27 >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $i0 = interfaceinvoke r2.<java.util.Collection: int size()>()
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $i0 = interfaceinvoke r2.<java.util.Collection: int size()>() >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if $i0 != 2
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if $i0 != 2 >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $z1 = r4 instanceof java.lang.String
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $z1 = r4 instanceof java.lang.String >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if $z1 == 0
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if $z1 == 0 >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $z2 = r5 instanceof java.lang.String
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $z2 = r5 instanceof java.lang.String >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if $z2 == 0
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : if $z2 == 0 >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r22 = new org.apache.ambari.server.collections.functors.ContainsPredicate
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r22 = new org.apache.ambari.server.collections.functors.ContainsPredicate >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r23 = new org.apache.ambari.server.collections.functors.ContextTransformer
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r23 = new org.apache.ambari.server.collections.functors.ContextTransformer >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r24 = (java.lang.String) r4
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r24 = (java.lang.String) r4 >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : specialinvoke $r23.<org.apache.ambari.server.collections.functors.ContextTransformer: void <init>(java.lang.String)>($r24)
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : specialinvoke $r23.<org.apache.ambari.server.collections.functors.ContextTransformer: void <init>(java.lang.String)>($r24) >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r25 = (java.lang.String) r5
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : $r25 = (java.lang.String) r5 >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : specialinvoke $r22.<org.apache.ambari.server.collections.functors.ContainsPredicate: void <init>(org.apache.ambari.server.collections.functors.ContextTransformer,java.lang.String)>($r23, $r25)
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : specialinvoke $r22.<org.apache.ambari.server.collections.functors.ContainsPredicate: void <init>(org.apache.ambari.server.collections.functors.ContextTransformer,java.lang.String)>($r23, $r25) >>>>>>>> org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : return $r22
org.apache.ambari.server.collections.functors.ContainsPredicate.fromMap : return $r22 >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : r30 = (org.apache.ambari.server.collections.Predicate) $r16
org.apache.ambari.server.collections.PredicateUtils.fromMap : r30 = (org.apache.ambari.server.collections.Predicate) $r16 >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : goto [?= (branch)]
org.apache.ambari.server.collections.PredicateUtils.fromMap : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : goto [?= return r30]
org.apache.ambari.server.collections.PredicateUtils.fromMap : goto [?= return r30] >>>>>>>> org.apache.ambari.server.collections.PredicateUtils.fromMap : return r30
org.apache.ambari.server.collections.PredicateUtils.fromMap : return r30 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor.setWhen : r0.<org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor: org.apache.ambari.server.collections.Predicate when> = r1
org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor.setWhen : r0.<org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor: org.apache.ambari.server.collections.Predicate when> = r1 >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : if r1 == null
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : if r1 == null >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : r2 = virtualinvoke r1.<org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor: java.lang.String getName()>()
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : r2 = virtualinvoke r1.<org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.getName : $r1 = r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor: java.lang.String name>
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.getName : $r1 = r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor: java.lang.String name> >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.getName : return $r1
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor.getName : return $r1 >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : $r3 = r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.List identities>
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : $r3 = r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.List identities> >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : if $r3 != null
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : if $r3 != null >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : $r5 = new java.util.ArrayList
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : $r5 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : specialinvoke $r5.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : specialinvoke $r5.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.List identities> = $r5
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.List identities> = $r5 >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : if r2 == null
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : if r2 == null >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : $z1 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : $z1 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : if $z1 != 0
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : if $z1 != 0 >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : $r4 = virtualinvoke r1.<org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor: java.lang.String getName()>()
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : $r4 = virtualinvoke r1.<org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : virtualinvoke r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: void removeIdentity(java.lang.String)>($r4)
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : virtualinvoke r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: void removeIdentity(java.lang.String)>($r4) >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.removeIdentity : if r1 == null
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.removeIdentity : if r1 == null >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.removeIdentity : $r4 = r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.List identities>
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.removeIdentity : $r4 = r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.List identities> >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.removeIdentity : if $r4 == null
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.removeIdentity : if $r4 == null >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.removeIdentity : $r5 = r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.List identities>
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.removeIdentity : $r5 = r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.List identities> >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.removeIdentity : r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.removeIdentity : r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.removeIdentity : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.removeIdentity : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.removeIdentity : if $z0 == 0
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.removeIdentity : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : $r6 = r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.List identities>
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : $r6 = r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.List identities> >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r1)
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : virtualinvoke r1.<org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor: void setParent(org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor)>(r0)
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putIdentity : virtualinvoke r1.<org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor: void setParent(org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor)>(r0) >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor.setType : virtualinvoke r0.<org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor: void setName(java.lang.String)>(r1)
org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor.setType : virtualinvoke r0.<org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor: void setName(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor.putProperty : if r1 != null
org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor.putProperty : if r1 != null >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor.putProperty : $r3 = r0.<org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor: java.util.Map properties>
org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor.putProperty : $r3 = r0.<org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor: java.util.Map properties> >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor.putProperty : if $r3 != null
org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor.putProperty : if $r3 != null >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor.putProperty : $r6 = new java.util.TreeMap
org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor.putProperty : $r6 = new java.util.TreeMap >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor.putProperty : specialinvoke $r6.<java.util.TreeMap: void <init>()>()
org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor.putProperty : specialinvoke $r6.<java.util.TreeMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor.putProperty : r0.<org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor: java.util.Map properties> = $r6
org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor.putProperty : r0.<org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor: java.util.Map properties> = $r6 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor.putProperty : $r4 = r0.<org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor: java.util.Map properties>
org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor.putProperty : $r4 = r0.<org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor: java.util.Map properties> >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor.putProperty : interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor.putProperty : interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putConfiguration : if r1 == null
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putConfiguration : if r1 == null >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putConfiguration : r2 = virtualinvoke r1.<org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor: java.lang.String getType()>()
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putConfiguration : r2 = virtualinvoke r1.<org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor: java.lang.String getType()>() >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor.getType : $r1 = virtualinvoke r0.<org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor: java.lang.String getName()>()
org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor.getType : $r1 = virtualinvoke r0.<org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor.getType : return $r1
org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor.getType : return $r1 >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putConfiguration : if r2 != null
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putConfiguration : if r2 != null >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putConfiguration : $r3 = r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.Map configurations>
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putConfiguration : $r3 = r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.Map configurations> >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putConfiguration : if $r3 != null
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putConfiguration : if $r3 != null >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putConfiguration : $r6 = new java.util.TreeMap
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putConfiguration : $r6 = new java.util.TreeMap >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putConfiguration : specialinvoke $r6.<java.util.TreeMap: void <init>()>()
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putConfiguration : specialinvoke $r6.<java.util.TreeMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putConfiguration : r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.Map configurations> = $r6
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putConfiguration : r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.Map configurations> = $r6 >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putConfiguration : $r4 = r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.Map configurations>
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putConfiguration : $r4 = r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.Map configurations> >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putConfiguration : interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1)
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putConfiguration : interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1) >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putConfiguration : virtualinvoke r1.<org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor: void setParent(org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor)>(r0)
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putConfiguration : virtualinvoke r1.<org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor: void setParent(org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptor)>(r0) >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putAuthToLocalProperty : if r1 == null
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putAuthToLocalProperty : if r1 == null >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putAuthToLocalProperty : $r2 = r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.Set authToLocalProperties>
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putAuthToLocalProperty : $r2 = r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.Set authToLocalProperties> >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putAuthToLocalProperty : if $r2 != null
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putAuthToLocalProperty : if $r2 != null >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putAuthToLocalProperty : $r4 = new java.util.TreeSet
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putAuthToLocalProperty : $r4 = new java.util.TreeSet >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putAuthToLocalProperty : specialinvoke $r4.<java.util.TreeSet: void <init>()>()
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putAuthToLocalProperty : specialinvoke $r4.<java.util.TreeSet: void <init>()>() >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putAuthToLocalProperty : r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.Set authToLocalProperties> = $r4
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putAuthToLocalProperty : r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.Set authToLocalProperties> = $r4 >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putAuthToLocalProperty : $r3 = r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.Set authToLocalProperties>
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putAuthToLocalProperty : $r3 = r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.Set authToLocalProperties> >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putAuthToLocalProperty : interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r1)
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.putAuthToLocalProperty : interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.createFromJSON : return $r5
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.createFromJSON : return $r5 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertNotNull(java.lang.Object)>(r0)
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertNotNull(java.lang.Object)>(r0) >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $z0 = virtualinvoke r0.<org.apache.ambari.server.state.kerberos.KerberosComponentDescriptor: boolean isContainer()>()
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $z0 = virtualinvoke r0.<org.apache.ambari.server.state.kerberos.KerberosComponentDescriptor: boolean isContainer()>() >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.isContainer : return 1
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.isContainer : return 1 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertTrue(boolean)>($z0)
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertTrue(boolean)>($z0) >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $r6 = virtualinvoke r0.<org.apache.ambari.server.state.kerberos.KerberosComponentDescriptor: java.lang.String getName()>()
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $r6 = virtualinvoke r0.<org.apache.ambari.server.state.kerberos.KerberosComponentDescriptor: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("COMPONENT_NAME", $r6)
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("COMPONENT_NAME", $r6) >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : r1 = virtualinvoke r0.<org.apache.ambari.server.state.kerberos.KerberosComponentDescriptor: java.util.List getIdentities()>()
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : r1 = virtualinvoke r0.<org.apache.ambari.server.state.kerberos.KerberosComponentDescriptor: java.util.List getIdentities()>() >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : $r2 = virtualinvoke r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.List getIdentities(boolean,java.util.Map)>(0, null)
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : $r2 = virtualinvoke r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.List getIdentities(boolean,java.util.Map)>(0, null) >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : $r5 = r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.List identities>
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : $r5 = r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.List identities> >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : if $r5 != null
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : if $r5 != null >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : $r6 = new java.util.ArrayList
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : $r6 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : specialinvoke $r6.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : specialinvoke $r6.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : $r7 = r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.List identities>
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : $r7 = r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.List identities> >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : r3 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : r3 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : if $z1 == 0
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : r4 = (org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor) $r8
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : r4 = (org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor) $r8 >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : if z0 == 0
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : if z0 == 0 >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : r11 = r4
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : r11 = r4 >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : if r11 == null
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : if r11 == null >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : if r1 == null
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : if r1 == null >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : $z2 = staticinvoke <org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: boolean isReferredServiceInstalled(org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor,java.util.Map)>(r4, r1)
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : $z2 = staticinvoke <org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: boolean isReferredServiceInstalled(org.apache.ambari.server.state.kerberos.KerberosIdentityDescriptor,java.util.Map)>(r4, r1) >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.isReferredServiceInstalled : if r1 == null
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.isReferredServiceInstalled : if r1 == null >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.isReferredServiceInstalled : return 1
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.isReferredServiceInstalled : return 1 >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : if $z2 == 0
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r11)
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r11) >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : goto [?= (branch)]
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : return $r6
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : return $r6 >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : return $r2
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getIdentities : return $r2 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertNotNull(java.lang.Object)>(r1)
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertNotNull(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $i0 = interfaceinvoke r1.<java.util.List: int size()>()
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $i0 = interfaceinvoke r1.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(1, $i0)
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(1, $i0) >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : r2 = virtualinvoke r0.<org.apache.ambari.server.state.kerberos.KerberosComponentDescriptor: java.util.Map getConfigurations()>()
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : r2 = virtualinvoke r0.<org.apache.ambari.server.state.kerberos.KerberosComponentDescriptor: java.util.Map getConfigurations()>() >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getConfigurations : $r1 = virtualinvoke r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.Map getConfigurations(boolean)>(0)
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getConfigurations : $r1 = virtualinvoke r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.Map getConfigurations(boolean)>(0) >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getConfigurations : if z0 == 0
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getConfigurations : if z0 == 0 >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getConfigurations : $r10 = r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.Map configurations>
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getConfigurations : $r10 = r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.Map configurations> >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getConfigurations : return $r10
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getConfigurations : return $r10 >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getConfigurations : return $r1
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getConfigurations : return $r1 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertNotNull(java.lang.Object)>(r2)
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertNotNull(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $i1 = interfaceinvoke r2.<java.util.Map: int size()>()
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $i1 = interfaceinvoke r2.<java.util.Map: int size()>() >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(1, $i1)
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(1, $i1) >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $r7 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("service-site")
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $r7 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("service-site") >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : r3 = (org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor) $r7
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : r3 = (org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor) $r7 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertNotNull(java.lang.Object)>(r3)
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertNotNull(java.lang.Object)>(r3) >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : r4 = virtualinvoke r3.<org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor: java.util.Map getProperties()>()
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : r4 = virtualinvoke r3.<org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor: java.util.Map getProperties()>() >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor.getProperties : $r1 = r0.<org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor: java.util.Map properties>
org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor.getProperties : $r1 = r0.<org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor: java.util.Map properties> >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor.getProperties : return $r1
org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor.getProperties : return $r1 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $r8 = virtualinvoke r3.<org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor: java.lang.String getType()>()
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $r8 = virtualinvoke r3.<org.apache.ambari.server.state.kerberos.KerberosConfigurationDescriptor: java.lang.String getType()>() >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("service-site", $r8)
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("service-site", $r8) >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertNotNull(java.lang.Object)>(r4)
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertNotNull(java.lang.Object)>(r4) >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $i2 = interfaceinvoke r4.<java.util.Map: int size()>()
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $i2 = interfaceinvoke r4.<java.util.Map: int size()>() >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(2, $i2)
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(2, $i2) >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $r9 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>("service.component.property1")
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $r9 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>("service.component.property1") >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $r10 = (java.lang.String) $r9
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $r10 = (java.lang.String) $r9 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("value1", $r10)
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("value1", $r10) >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $r11 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>("service.component.property2")
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $r11 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>("service.component.property2") >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $r12 = (java.lang.String) $r11
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $r12 = (java.lang.String) $r11 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("value2", $r12)
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("value2", $r12) >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : r5 = virtualinvoke r0.<org.apache.ambari.server.state.kerberos.KerberosComponentDescriptor: java.util.Set getAuthToLocalProperties()>()
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : r5 = virtualinvoke r0.<org.apache.ambari.server.state.kerberos.KerberosComponentDescriptor: java.util.Set getAuthToLocalProperties()>() >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getAuthToLocalProperties : $r1 = r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.Set authToLocalProperties>
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getAuthToLocalProperties : $r1 = r0.<org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer: java.util.Set authToLocalProperties> >>>>>>>> org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getAuthToLocalProperties : return $r1
org.apache.ambari.server.state.kerberos.AbstractKerberosDescriptorContainer.getAuthToLocalProperties : return $r1 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertNotNull(java.lang.Object)>(r5)
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertNotNull(java.lang.Object)>(r5) >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $i3 = interfaceinvoke r5.<java.util.Set: int size()>()
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $i3 = interfaceinvoke r5.<java.util.Set: int size()>() >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(1, $i3)
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(1, $i3) >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $r13 = interfaceinvoke r5.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $r13 = interfaceinvoke r5.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $r14 = interfaceinvoke $r13.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $r15 = (java.lang.String) $r14
org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : $r15 = (java.lang.String) $r14 >>>>>>>> org.apache.ambari.server.state.kerberos.KerberosComponentDescriptorTest.validateFromJSON : staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("component.name.rules1", $r15)
