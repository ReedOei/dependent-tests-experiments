org.apache.ambari.server.upgrade.UpgradeCatalog260Test.getInjector : $r1 = newarray (com.google.inject.Module)[1] >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test.getInjector : $r2 = new org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11
org.apache.ambari.server.upgrade.UpgradeCatalog260Test.getInjector : $r2 = new org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test.getInjector : specialinvoke $r2.<org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11: void <init>(org.apache.ambari.server.upgrade.UpgradeCatalog260Test)>(r0)
org.apache.ambari.server.upgrade.UpgradeCatalog260Test.getInjector : specialinvoke $r2.<org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11: void <init>(org.apache.ambari.server.upgrade.UpgradeCatalog260Test)>(r0) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test.getInjector : $r1[0] = $r2
org.apache.ambari.server.upgrade.UpgradeCatalog260Test.getInjector : $r1[0] = $r2 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test.getInjector : $r3 = staticinvoke <com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Module[])>($r1)
org.apache.ambari.server.upgrade.UpgradeCatalog260Test.getInjector : $r3 = staticinvoke <com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Module[])>($r1) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r2 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/DBAccessor;")
org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r2 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/DBAccessor;") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r3 = r0.<org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11: org.apache.ambari.server.upgrade.UpgradeCatalog260Test this$0>
org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r3 = r0.<org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11: org.apache.ambari.server.upgrade.UpgradeCatalog260Test this$0> >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r4 = staticinvoke <org.apache.ambari.server.upgrade.UpgradeCatalog260Test: org.apache.ambari.server.orm.DBAccessor access$000(org.apache.ambari.server.upgrade.UpgradeCatalog260Test)>($r3)
org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r4 = staticinvoke <org.apache.ambari.server.upgrade.UpgradeCatalog260Test: org.apache.ambari.server.orm.DBAccessor access$000(org.apache.ambari.server.upgrade.UpgradeCatalog260Test)>($r3) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test.access$000 : $r1 = r0.<org.apache.ambari.server.upgrade.UpgradeCatalog260Test: org.apache.ambari.server.orm.DBAccessor dbAccessor>
org.apache.ambari.server.upgrade.UpgradeCatalog260Test.access$000 : $r1 = r0.<org.apache.ambari.server.upgrade.UpgradeCatalog260Test: org.apache.ambari.server.orm.DBAccessor dbAccessor> >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test.access$000 : return $r1
org.apache.ambari.server.upgrade.UpgradeCatalog260Test.access$000 : return $r1 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : interfaceinvoke $r2.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r4)
org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : interfaceinvoke $r2.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r4) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r5 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/state/stack/OsFamily;")
org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r5 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/state/stack/OsFamily;") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r6 = r0.<org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11: org.apache.ambari.server.upgrade.UpgradeCatalog260Test this$0>
org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r6 = r0.<org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11: org.apache.ambari.server.upgrade.UpgradeCatalog260Test this$0> >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r7 = staticinvoke <org.apache.ambari.server.upgrade.UpgradeCatalog260Test: org.apache.ambari.server.state.stack.OsFamily access$100(org.apache.ambari.server.upgrade.UpgradeCatalog260Test)>($r6)
org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r7 = staticinvoke <org.apache.ambari.server.upgrade.UpgradeCatalog260Test: org.apache.ambari.server.state.stack.OsFamily access$100(org.apache.ambari.server.upgrade.UpgradeCatalog260Test)>($r6) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test.access$100 : $r1 = r0.<org.apache.ambari.server.upgrade.UpgradeCatalog260Test: org.apache.ambari.server.state.stack.OsFamily osFamily>
org.apache.ambari.server.upgrade.UpgradeCatalog260Test.access$100 : $r1 = r0.<org.apache.ambari.server.upgrade.UpgradeCatalog260Test: org.apache.ambari.server.state.stack.OsFamily osFamily> >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test.access$100 : return $r1
org.apache.ambari.server.upgrade.UpgradeCatalog260Test.access$100 : return $r1 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : interfaceinvoke $r5.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r7)
org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : interfaceinvoke $r5.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r7) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r8 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Ljavax/persistence/EntityManager;")
org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r8 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Ljavax/persistence/EntityManager;") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r9 = r0.<org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11: org.apache.ambari.server.upgrade.UpgradeCatalog260Test this$0>
org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r9 = r0.<org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11: org.apache.ambari.server.upgrade.UpgradeCatalog260Test this$0> >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r10 = staticinvoke <org.apache.ambari.server.upgrade.UpgradeCatalog260Test: javax.persistence.EntityManager access$200(org.apache.ambari.server.upgrade.UpgradeCatalog260Test)>($r9)
org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r10 = staticinvoke <org.apache.ambari.server.upgrade.UpgradeCatalog260Test: javax.persistence.EntityManager access$200(org.apache.ambari.server.upgrade.UpgradeCatalog260Test)>($r9) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test.access$200 : $r1 = r0.<org.apache.ambari.server.upgrade.UpgradeCatalog260Test: javax.persistence.EntityManager entityManager>
org.apache.ambari.server.upgrade.UpgradeCatalog260Test.access$200 : $r1 = r0.<org.apache.ambari.server.upgrade.UpgradeCatalog260Test: javax.persistence.EntityManager entityManager> >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test.access$200 : return $r1
org.apache.ambari.server.upgrade.UpgradeCatalog260Test.access$200 : return $r1 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : interfaceinvoke $r8.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r10)
org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : interfaceinvoke $r8.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r10) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r11 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/configuration/Configuration;")
org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r11 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/configuration/Configuration;") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r12 = r0.<org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11: org.apache.ambari.server.upgrade.UpgradeCatalog260Test this$0>
org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r12 = r0.<org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11: org.apache.ambari.server.upgrade.UpgradeCatalog260Test this$0> >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r13 = staticinvoke <org.apache.ambari.server.upgrade.UpgradeCatalog260Test: org.apache.ambari.server.configuration.Configuration access$300(org.apache.ambari.server.upgrade.UpgradeCatalog260Test)>($r12)
org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r13 = staticinvoke <org.apache.ambari.server.upgrade.UpgradeCatalog260Test: org.apache.ambari.server.configuration.Configuration access$300(org.apache.ambari.server.upgrade.UpgradeCatalog260Test)>($r12) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test.access$300 : $r1 = r0.<org.apache.ambari.server.upgrade.UpgradeCatalog260Test: org.apache.ambari.server.configuration.Configuration configuration>
org.apache.ambari.server.upgrade.UpgradeCatalog260Test.access$300 : $r1 = r0.<org.apache.ambari.server.upgrade.UpgradeCatalog260Test: org.apache.ambari.server.configuration.Configuration configuration> >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test.access$300 : return $r1
org.apache.ambari.server.upgrade.UpgradeCatalog260Test.access$300 : return $r1 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : interfaceinvoke $r11.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r13)
org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : interfaceinvoke $r11.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r13) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r14 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Clusters;")
org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r14 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Clusters;") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r15 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Clusters;")
org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r15 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Clusters;") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : interfaceinvoke $r14.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r15)
org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : interfaceinvoke $r14.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r15) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r16 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/controller/AmbariManagementController;")
org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r16 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/controller/AmbariManagementController;") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r17 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/controller/AmbariManagementController;")
org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : $r17 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/controller/AmbariManagementController;") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : interfaceinvoke $r16.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r17)
org.apache.ambari.server.upgrade.UpgradeCatalog260Test$11.configure : interfaceinvoke $r16.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r17) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260Test.getInjector : return $r3
org.apache.ambari.server.upgrade.UpgradeCatalog260Test.getInjector : return $r3 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if r2 == null
org.apache.ambari.server.state.StackId.parseStackIdHelper : if r2 == null >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if $z0 == 0
org.apache.ambari.server.state.StackId.parseStackIdHelper : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45)
org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1
org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i1 = virtualinvoke r2.<java.lang.String: int length()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i1 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i2 = i0 + 1
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i2 = i0 + 1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if $i1 > $i2
org.apache.ambari.server.state.StackId.parseStackIdHelper : if $i1 > $i2 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0)
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = $r8
org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = $r8 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3)
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> = $r9
org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> = $r9 >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.registerCatalog : $r2 = <org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: java.util.Map upgradeCatalogMap>
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.registerCatalog : $r2 = <org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: java.util.Map upgradeCatalogMap> >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.registerCatalog : $r3 = interfaceinvoke r1.<org.apache.ambari.server.upgrade.UpgradeCatalog: java.lang.String getTargetVersion()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.registerCatalog : $r3 = interfaceinvoke r1.<org.apache.ambari.server.upgrade.UpgradeCatalog: java.lang.String getTargetVersion()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.getTargetVersion : return "2.6.0"
org.apache.ambari.server.upgrade.UpgradeCatalog260.getTargetVersion : return "2.6.0" >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.registerCatalog : interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.registerCatalog : interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $r12 = r0.<org.apache.ambari.server.upgrade.UpgradeCatalog260: com.google.inject.Injector injector>
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $r12 = r0.<org.apache.ambari.server.upgrade.UpgradeCatalog260: com.google.inject.Injector injector> >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $r13 = interfaceinvoke $r12.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Clusters;")
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $r13 = interfaceinvoke $r12.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Clusters;") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : r1 = (org.apache.ambari.server.state.Clusters) $r13
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : r1 = (org.apache.ambari.server.state.Clusters) $r13 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : r2 = virtualinvoke r0.<org.apache.ambari.server.upgrade.UpgradeCatalog260: java.util.Map getCheckedClusterMap(org.apache.ambari.server.state.Clusters)>(r1)
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : r2 = virtualinvoke r0.<org.apache.ambari.server.upgrade.UpgradeCatalog260: java.util.Map getCheckedClusterMap(org.apache.ambari.server.state.Clusters)>(r1) >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.getCheckedClusterMap : if r1 == null
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.getCheckedClusterMap : if r1 == null >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.getCheckedClusterMap : r2 = interfaceinvoke r1.<org.apache.ambari.server.state.Clusters: java.util.Map getClusters()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.getCheckedClusterMap : r2 = interfaceinvoke r1.<org.apache.ambari.server.state.Clusters: java.util.Map getClusters()>() >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.getCheckedClusterMap : if r2 == null
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.getCheckedClusterMap : if r2 == null >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.getCheckedClusterMap : return r2
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.getCheckedClusterMap : return r2 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : if r2 == null
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : if r2 == null >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $z0 = interfaceinvoke r2.<java.util.Map: boolean isEmpty()>()
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $z0 = interfaceinvoke r2.<java.util.Map: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : if $z0 != 0
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : if $z0 != 0 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $r14 = interfaceinvoke r2.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $r14 = interfaceinvoke r2.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : r3 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : r3 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : if $z1 == 0
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : if $z1 == 0 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $r15 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $r15 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : r4 = (org.apache.ambari.server.state.Cluster) $r15
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : r4 = (org.apache.ambari.server.state.Cluster) $r15 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : r5 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getDesiredConfigByType(java.lang.String)>("zeppelin-env")
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : r5 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getDesiredConfigByType(java.lang.String)>("zeppelin-env") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : if r5 == null
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : if r5 == null >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : r6 = interfaceinvoke r5.<org.apache.ambari.server.state.Config: java.util.Map getProperties()>()
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : r6 = interfaceinvoke r5.<org.apache.ambari.server.state.Config: java.util.Map getProperties()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : r24 = null
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : r24 = null >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : if r6 == null
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : if r6 == null >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $r23 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>("zeppelin_user")
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $r23 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>("zeppelin_user") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : r24 = (java.lang.String) $r23
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : r24 = (java.lang.String) $r23 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $z2 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r24)
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $z2 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isEmpty(java.lang.String)>(r24) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : if $z2 != 0
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : if $z2 != 0 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : r7 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getDesiredConfigByType(java.lang.String)>("core-site")
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : r7 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getDesiredConfigByType(java.lang.String)>("core-site") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : if r7 == null
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : if r7 == null >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $r16 = newarray (java.lang.Object)[1]
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $r16 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $r16[0] = r24
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $r16[0] = r24 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("hadoop.proxyuser.%s.hosts", $r16)
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("hadoop.proxyuser.%s.hosts", $r16) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $r17 = newarray (java.lang.Object)[1]
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $r17 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $r17[0] = r24
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $r17[0] = r24 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("hadoop.proxyuser.%s.groups", $r17)
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : r9 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("hadoop.proxyuser.%s.groups", $r17) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $r18 = new java.util.HashMap
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $r18 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : specialinvoke $r18.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : specialinvoke $r18.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, "*")
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, "*") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, "*")
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, "*") >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : r11 = interfaceinvoke r7.<org.apache.ambari.server.state.Config: java.util.Map getProperties()>()
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : r11 = interfaceinvoke r7.<org.apache.ambari.server.state.Config: java.util.Map getProperties()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : if r11 == null
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : if r11 == null >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $z3 = interfaceinvoke r11.<java.util.Map: boolean containsKey(java.lang.Object)>(r8)
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $z3 = interfaceinvoke r11.<java.util.Map: boolean containsKey(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : if $z3 == 0
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : if $z3 == 0 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : interfaceinvoke $r18.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r8)
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : interfaceinvoke $r18.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $z4 = interfaceinvoke r11.<java.util.Map: boolean containsKey(java.lang.Object)>(r9)
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $z4 = interfaceinvoke r11.<java.util.Map: boolean containsKey(java.lang.Object)>(r9) >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : if $z4 == 0
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : if $z4 == 0 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $z5 = interfaceinvoke $r18.<java.util.Map: boolean isEmpty()>()
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : $z5 = interfaceinvoke $r18.<java.util.Map: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : if $z5 != 0
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : if $z5 != 0 >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : virtualinvoke r0.<org.apache.ambari.server.upgrade.UpgradeCatalog260: void updateConfigurationPropertiesForCluster(org.apache.ambari.server.state.Cluster,java.lang.String,java.util.Map,boolean,boolean)>(r4, "core-site", $r18, 1, 0)
org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : virtualinvoke r0.<org.apache.ambari.server.upgrade.UpgradeCatalog260: void updateConfigurationPropertiesForCluster(org.apache.ambari.server.state.Cluster,java.lang.String,java.util.Map,boolean,boolean)>(r4, "core-site", $r18, 1, 0) >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : virtualinvoke r0.<org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: void updateConfigurationPropertiesForCluster(org.apache.ambari.server.state.Cluster,java.lang.String,java.util.Map,java.util.Set,boolean,boolean)>(r1, r2, r3, null, z0, z1)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : virtualinvoke r0.<org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: void updateConfigurationPropertiesForCluster(org.apache.ambari.server.state.Cluster,java.lang.String,java.util.Map,java.util.Set,boolean,boolean)>(r1, r2, r3, null, z0, z1) >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r15 = r0.<org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: com.google.inject.Injector injector>
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r15 = r0.<org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: com.google.inject.Injector injector> >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r16 = interfaceinvoke $r15.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/apache/ambari/server/controller/AmbariManagementController;")
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r16 = interfaceinvoke $r15.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/apache/ambari/server/controller/AmbariManagementController;") >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r5 = (org.apache.ambari.server.controller.AmbariManagementController) $r16
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r5 = (org.apache.ambari.server.controller.AmbariManagementController) $r16 >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r17 = new java.lang.StringBuilder
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r17 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("version")
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("version") >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0) >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r6 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r6 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if r3 == null
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if r3 == null >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r7 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: java.util.Map getConfigsByType(java.lang.String)>(r2)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r7 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: java.util.Map getConfigsByType(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if r7 == null
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if r7 == null >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $z2 = interfaceinvoke r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r6)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $z2 = interfaceinvoke r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if $z2 == 0
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if $z2 == 0 >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r8 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getDesiredConfigByType(java.lang.String)>(r2)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r8 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getDesiredConfigByType(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if r8 != null
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if r8 != null >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r68 = interfaceinvoke r8.<org.apache.ambari.server.state.Config: java.util.Map getProperties()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r68 = interfaceinvoke r8.<org.apache.ambari.server.state.Config: java.util.Map getProperties()>() >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r9 = staticinvoke <com.google.common.collect.ArrayListMultimap: com.google.common.collect.ArrayListMultimap create()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r9 = staticinvoke <com.google.common.collect.ArrayListMultimap: com.google.common.collect.ArrayListMultimap create()>() >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r10 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: java.lang.String getServiceByConfigType(java.lang.String)>(r2)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r10 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: java.lang.String getServiceByConfigType(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r69 = specialinvoke r0.<org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: java.util.Map mergeProperties(java.util.Map,java.util.Map,boolean,com.google.common.collect.Multimap)>(r68, r3, z0, r9)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r69 = specialinvoke r0.<org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: java.util.Map mergeProperties(java.util.Map,java.util.Map,boolean,com.google.common.collect.Multimap)>(r68, r3, z0, r9) >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r7 = new java.util.HashMap
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r7 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : specialinvoke $r7.<java.util.HashMap: void <init>(java.util.Map)>(r1)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : specialinvoke $r7.<java.util.HashMap: void <init>(java.util.Map)>(r1) >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r8 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r8 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : r5 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : r5 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : if $z1 == 0
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : if $z1 == 0 >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : r6 = (java.util.Map$Entry) $r9
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : r6 = (java.util.Map$Entry) $r9 >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r10 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r10 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $z2 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>($r10)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $z2 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>($r10) >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : if $z2 != 0
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : if $z2 != 0 >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r15 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r15 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r16 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r16 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r16)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r16) >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r18 = <org.apache.ambari.server.upgrade.AbstractUpgradeCatalog$ConfigUpdateType: org.apache.ambari.server.upgrade.AbstractUpgradeCatalog$ConfigUpdateType ADDED>
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r18 = <org.apache.ambari.server.upgrade.AbstractUpgradeCatalog$ConfigUpdateType: org.apache.ambari.server.upgrade.AbstractUpgradeCatalog$ConfigUpdateType ADDED> >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : interfaceinvoke r3.<com.google.common.collect.Multimap: boolean put(java.lang.Object,java.lang.Object)>($r18, r6)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : interfaceinvoke r3.<com.google.common.collect.Multimap: boolean put(java.lang.Object,java.lang.Object)>($r18, r6) >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : if z0 == 0
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : if z0 == 0 >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r11 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r11 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r12 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r12 = interfaceinvoke r6.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r12)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r12) >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r14 = <org.apache.ambari.server.upgrade.AbstractUpgradeCatalog$ConfigUpdateType: org.apache.ambari.server.upgrade.AbstractUpgradeCatalog$ConfigUpdateType UPDATED>
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : $r14 = <org.apache.ambari.server.upgrade.AbstractUpgradeCatalog$ConfigUpdateType: org.apache.ambari.server.upgrade.AbstractUpgradeCatalog$ConfigUpdateType UPDATED> >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : interfaceinvoke r3.<com.google.common.collect.Multimap: boolean put(java.lang.Object,java.lang.Object)>($r14, r6)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : interfaceinvoke r3.<com.google.common.collect.Multimap: boolean put(java.lang.Object,java.lang.Object)>($r14, r6) >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : return $r7
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.mergeProperties : return $r7 >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if r4 == null
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if r4 == null >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $i1 = interfaceinvoke r9.<com.google.common.collect.Multimap: int size()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $i1 = interfaceinvoke r9.<com.google.common.collect.Multimap: int size()>() >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if $i1 <= 0
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if $i1 <= 0 >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r58 = r0.<org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: org.apache.ambari.server.configuration.Configuration configuration>
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r58 = r0.<org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: org.apache.ambari.server.configuration.Configuration configuration> >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r57 = r0.<org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: java.lang.String ambariUpgradeConfigUpdatesFileName>
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r57 = r0.<org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: java.lang.String ambariUpgradeConfigUpdatesFileName> >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : virtualinvoke $r58.<org.apache.ambari.server.configuration.Configuration: void writeToAmbariUpgradeConfigUpdatesFile(com.google.common.collect.Multimap,java.lang.String,java.lang.String,java.lang.String)>(r9, r2, r10, $r57)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : virtualinvoke $r58.<org.apache.ambari.server.configuration.Configuration: void writeToAmbariUpgradeConfigUpdatesFile(com.google.common.collect.Multimap,java.lang.String,java.lang.String,java.lang.String)>(r9, r2, r10, $r57) >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : goto [?= $r71 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.MapDifference difference(java.util.Map,java.util.Map)>(r68, r69)]
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : goto [?= $r71 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.MapDifference difference(java.util.Map,java.util.Map)>(r68, r69)] >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r71 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.MapDifference difference(java.util.Map,java.util.Map)>(r68, r69)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r71 = staticinvoke <com.google.common.collect.Maps: com.google.common.collect.MapDifference difference(java.util.Map,java.util.Map)>(r68, r69) >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $z3 = interfaceinvoke $r71.<com.google.common.collect.MapDifference: boolean areEqual()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $z3 = interfaceinvoke $r71.<com.google.common.collect.MapDifference: boolean areEqual()>() >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if $z3 != 0
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if $z3 != 0 >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r27 = <org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: org.slf4j.Logger LOG>
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r27 = <org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r26 = newarray (java.lang.Object)[3]
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r26 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r26[0] = r6
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r26[0] = r6 >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r26[1] = r2
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r26[1] = r2 >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r28 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: java.lang.String getClusterName()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r28 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r26[2] = $r28
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r26[2] = $r28 >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : interfaceinvoke $r27.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Applying configuration with tag \'{}\' and configType \'{}\' to cluster \'{}\'", $r26)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : interfaceinvoke $r27.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Applying configuration with tag \'{}\' and configType \'{}\' to cluster \'{}\'", $r26) >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r72 = null
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r72 = null >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if r8 == null
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if r8 == null >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r72 = interfaceinvoke r8.<org.apache.ambari.server.state.Config: java.util.Map getPropertiesAttributes()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r72 = interfaceinvoke r8.<org.apache.ambari.server.state.Config: java.util.Map getPropertiesAttributes()>() >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if null != r72
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if null != r72 >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r29 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.StackId getDesiredStackVersion()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r29 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.StackId getDesiredStackVersion()>() >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : interfaceinvoke r5.<org.apache.ambari.server.controller.AmbariManagementController: org.apache.ambari.server.state.Config createConfig(org.apache.ambari.server.state.Cluster,org.apache.ambari.server.state.StackId,java.lang.String,java.util.Map,java.lang.String,java.util.Map)>(r1, $r29, r2, r69, r6, r72)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : interfaceinvoke r5.<org.apache.ambari.server.controller.AmbariManagementController: org.apache.ambari.server.state.Config createConfig(org.apache.ambari.server.state.Cluster,org.apache.ambari.server.state.StackId,java.lang.String,java.util.Map,java.lang.String,java.util.Map)>(r1, $r29, r2, r69, r6, r72) >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r11 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getConfig(java.lang.String,java.lang.String)>(r2, r6)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r11 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getConfig(java.lang.String,java.lang.String)>(r2, r6) >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if r11 == null
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if r11 == null >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r31 = newarray (java.lang.Object)[3]
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r31 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r31[0] = r2
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r31[0] = r2 >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r32 = virtualinvoke r0.<org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: java.lang.String getSourceVersion()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r32 = virtualinvoke r0.<org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: java.lang.String getSourceVersion()>() >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.getSourceVersion : return "2.5.2"
org.apache.ambari.server.upgrade.UpgradeCatalog260.getSourceVersion : return "2.5.2" >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r31[1] = $r32
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r31[1] = $r32 >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r33 = virtualinvoke r0.<org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: java.lang.String getTargetVersion()>()
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r33 = virtualinvoke r0.<org.apache.ambari.server.upgrade.AbstractUpgradeCatalog: java.lang.String getTargetVersion()>() >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r31[2] = $r33
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r31[2] = $r33 >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Updated %s during Ambari Upgrade from %s to %s.", $r31)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Updated %s during Ambari Upgrade from %s to %s.", $r31) >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r34 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r11)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r34 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r11) >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r35 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.controller.ServiceConfigVersionResponse addDesiredConfig(java.lang.String,java.util.Set,java.lang.String)>("ambari-upgrade", $r34, r13)
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : $r35 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.controller.ServiceConfigVersionResponse addDesiredConfig(java.lang.String,java.util.Set,java.lang.String)>("ambari-upgrade", $r34, r13) >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if $r35 == null
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : if $r35 == null >>>>>>>> org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : goto [?= return]
org.apache.ambari.server.upgrade.AbstractUpgradeCatalog.updateConfigurationPropertiesForCluster : goto [?= return] >>>>>>>> org.apache.ambari.server.upgrade.UpgradeCatalog260.ensureZeppelinProxyUserConfigs : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
