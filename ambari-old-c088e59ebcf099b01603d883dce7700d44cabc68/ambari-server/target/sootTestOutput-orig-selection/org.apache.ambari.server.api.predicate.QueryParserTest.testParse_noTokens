org.apache.ambari.server.api.predicate.QueryParser.parse : r2 = specialinvoke r0.<org.apache.ambari.server.api.predicate.QueryParser: org.apache.ambari.server.api.predicate.QueryParser$ParseContext parseExpressions(org.apache.ambari.server.api.predicate.Token[])>(r1) >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser.parseExpressions : $r3 = new org.apache.ambari.server.api.predicate.QueryParser$ParseContext
org.apache.ambari.server.api.predicate.QueryParser.parseExpressions : $r3 = new org.apache.ambari.server.api.predicate.QueryParser$ParseContext >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser.parseExpressions : specialinvoke $r3.<org.apache.ambari.server.api.predicate.QueryParser$ParseContext: void <init>(org.apache.ambari.server.api.predicate.QueryParser,org.apache.ambari.server.api.predicate.Token[])>(r0, r1)
org.apache.ambari.server.api.predicate.QueryParser.parseExpressions : specialinvoke $r3.<org.apache.ambari.server.api.predicate.QueryParser$ParseContext: void <init>(org.apache.ambari.server.api.predicate.QueryParser,org.apache.ambari.server.api.predicate.Token[])>(r0, r1) >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser.parseExpressions : $i0 = virtualinvoke $r3.<org.apache.ambari.server.api.predicate.QueryParser$ParseContext: int getCurrentTokensIndex()>()
org.apache.ambari.server.api.predicate.QueryParser.parseExpressions : $i0 = virtualinvoke $r3.<org.apache.ambari.server.api.predicate.QueryParser$ParseContext: int getCurrentTokensIndex()>() >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser$ParseContext.getCurrentTokensIndex : $i0 = r0.<org.apache.ambari.server.api.predicate.QueryParser$ParseContext: int m_tokensIdx>
org.apache.ambari.server.api.predicate.QueryParser$ParseContext.getCurrentTokensIndex : $i0 = r0.<org.apache.ambari.server.api.predicate.QueryParser$ParseContext: int m_tokensIdx> >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser$ParseContext.getCurrentTokensIndex : return $i0
org.apache.ambari.server.api.predicate.QueryParser$ParseContext.getCurrentTokensIndex : return $i0 >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser.parseExpressions : $i1 = lengthof r1
org.apache.ambari.server.api.predicate.QueryParser.parseExpressions : $i1 = lengthof r1 >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser.parseExpressions : if $i0 >= $i1
org.apache.ambari.server.api.predicate.QueryParser.parseExpressions : if $i0 >= $i1 >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser.parseExpressions : $i2 = virtualinvoke $r3.<org.apache.ambari.server.api.predicate.QueryParser$ParseContext: int getPrecedenceLevel()>()
org.apache.ambari.server.api.predicate.QueryParser.parseExpressions : $i2 = virtualinvoke $r3.<org.apache.ambari.server.api.predicate.QueryParser$ParseContext: int getPrecedenceLevel()>() >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser$ParseContext.getPrecedenceLevel : $i0 = r0.<org.apache.ambari.server.api.predicate.QueryParser$ParseContext: int m_precedence>
org.apache.ambari.server.api.predicate.QueryParser$ParseContext.getPrecedenceLevel : $i0 = r0.<org.apache.ambari.server.api.predicate.QueryParser$ParseContext: int m_precedence> >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser$ParseContext.getPrecedenceLevel : return $i0
org.apache.ambari.server.api.predicate.QueryParser$ParseContext.getPrecedenceLevel : return $i0 >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser.parseExpressions : if $i2 == 0
org.apache.ambari.server.api.predicate.QueryParser.parseExpressions : if $i2 == 0 >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser.parseExpressions : return $r3
org.apache.ambari.server.api.predicate.QueryParser.parseExpressions : return $r3 >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser.parse : r3 = virtualinvoke r2.<org.apache.ambari.server.api.predicate.QueryParser$ParseContext: java.util.List getExpressions()>()
org.apache.ambari.server.api.predicate.QueryParser.parse : r3 = virtualinvoke r2.<org.apache.ambari.server.api.predicate.QueryParser$ParseContext: java.util.List getExpressions()>() >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser$ParseContext.getExpressions : $r1 = r0.<org.apache.ambari.server.api.predicate.QueryParser$ParseContext: java.util.List m_listExpressions>
org.apache.ambari.server.api.predicate.QueryParser$ParseContext.getExpressions : $r1 = r0.<org.apache.ambari.server.api.predicate.QueryParser$ParseContext: java.util.List m_listExpressions> >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser$ParseContext.getExpressions : return $r1
org.apache.ambari.server.api.predicate.QueryParser$ParseContext.getExpressions : return $r1 >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser.parse : specialinvoke r0.<org.apache.ambari.server.api.predicate.QueryParser: void changeHostNameToLowerCase(java.util.List)>(r3)
org.apache.ambari.server.api.predicate.QueryParser.parse : specialinvoke r0.<org.apache.ambari.server.api.predicate.QueryParser: void changeHostNameToLowerCase(java.util.List)>(r3) >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser.changeHostNameToLowerCase : r16 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.api.predicate.QueryParser.changeHostNameToLowerCase : r16 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser.changeHostNameToLowerCase : $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.api.predicate.QueryParser.changeHostNameToLowerCase : $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser.changeHostNameToLowerCase : if $z0 == 0
org.apache.ambari.server.api.predicate.QueryParser.changeHostNameToLowerCase : if $z0 == 0 >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser.changeHostNameToLowerCase : goto [?= return]
org.apache.ambari.server.api.predicate.QueryParser.changeHostNameToLowerCase : goto [?= return] >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser.parse : $i0 = virtualinvoke r2.<org.apache.ambari.server.api.predicate.QueryParser$ParseContext: int getMaxPrecedence()>()
org.apache.ambari.server.api.predicate.QueryParser.parse : $i0 = virtualinvoke r2.<org.apache.ambari.server.api.predicate.QueryParser$ParseContext: int getMaxPrecedence()>() >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser$ParseContext.getMaxPrecedence : $i0 = r0.<org.apache.ambari.server.api.predicate.QueryParser$ParseContext: int m_maxPrecedence>
org.apache.ambari.server.api.predicate.QueryParser$ParseContext.getMaxPrecedence : $i0 = r0.<org.apache.ambari.server.api.predicate.QueryParser$ParseContext: int m_maxPrecedence> >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser$ParseContext.getMaxPrecedence : return $i0
org.apache.ambari.server.api.predicate.QueryParser$ParseContext.getMaxPrecedence : return $i0 >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser.parse : r4 = specialinvoke r0.<org.apache.ambari.server.api.predicate.QueryParser: java.util.List mergeExpressions(java.util.List,int)>(r3, $i0)
org.apache.ambari.server.api.predicate.QueryParser.parse : r4 = specialinvoke r0.<org.apache.ambari.server.api.predicate.QueryParser: java.util.List mergeExpressions(java.util.List,int)>(r3, $i0) >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser.mergeExpressions : $i1 = interfaceinvoke r1.<java.util.List: int size()>()
org.apache.ambari.server.api.predicate.QueryParser.mergeExpressions : $i1 = interfaceinvoke r1.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser.mergeExpressions : if $i1 <= 1
org.apache.ambari.server.api.predicate.QueryParser.mergeExpressions : if $i1 <= 1 >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser.mergeExpressions : return r1
org.apache.ambari.server.api.predicate.QueryParser.mergeExpressions : return r1 >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser.parse : $z0 = interfaceinvoke r4.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.api.predicate.QueryParser.parse : $z0 = interfaceinvoke r4.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser.parse : if $z0 == 0
org.apache.ambari.server.api.predicate.QueryParser.parse : if $z0 == 0 >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser.parse : $r7 = null
org.apache.ambari.server.api.predicate.QueryParser.parse : $r7 = null >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser.parse : goto [?= return $r7]
org.apache.ambari.server.api.predicate.QueryParser.parse : goto [?= return $r7] >>>>>>>> org.apache.ambari.server.api.predicate.QueryParser.parse : return $r7
