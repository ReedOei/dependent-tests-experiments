org.apache.ambari.server.orm.dao.UserDAOTest.user : $r1 = <org.apache.ambari.server.orm.dao.UserDAOTest: java.lang.String SERVICEOP_USER_NAME> >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.user : $r2 = staticinvoke <org.apache.ambari.server.orm.dao.UserDAOTest: org.apache.ambari.server.orm.entities.UserEntity user(java.lang.String,org.apache.ambari.server.security.authorization.UserType)>($r1, r0)
org.apache.ambari.server.orm.dao.UserDAOTest.user : $r2 = staticinvoke <org.apache.ambari.server.orm.dao.UserDAOTest: org.apache.ambari.server.orm.entities.UserEntity user(java.lang.String,org.apache.ambari.server.security.authorization.UserType)>($r1, r0) >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.user : $r3 = new org.apache.ambari.server.orm.entities.UserEntity
org.apache.ambari.server.orm.dao.UserDAOTest.user : $r3 = new org.apache.ambari.server.orm.entities.UserEntity >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.user : specialinvoke $r3.<org.apache.ambari.server.orm.entities.UserEntity: void <init>()>()
org.apache.ambari.server.orm.dao.UserDAOTest.user : specialinvoke $r3.<org.apache.ambari.server.orm.entities.UserEntity: void <init>()>() >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.user : $r4 = staticinvoke <org.apache.ambari.server.security.authorization.UserName: org.apache.ambari.server.security.authorization.UserName fromString(java.lang.String)>(r0)
org.apache.ambari.server.orm.dao.UserDAOTest.user : $r4 = staticinvoke <org.apache.ambari.server.security.authorization.UserName: org.apache.ambari.server.security.authorization.UserName fromString(java.lang.String)>(r0) >>>>>>>> org.apache.ambari.server.security.authorization.UserName.fromString : $r1 = new org.apache.ambari.server.security.authorization.UserName
org.apache.ambari.server.security.authorization.UserName.fromString : $r1 = new org.apache.ambari.server.security.authorization.UserName >>>>>>>> org.apache.ambari.server.security.authorization.UserName.fromString : $r2 = staticinvoke <org.apache.ambari.server.security.authorization.UserName: java.lang.String validated(java.lang.String)>(r0)
org.apache.ambari.server.security.authorization.UserName.fromString : $r2 = staticinvoke <org.apache.ambari.server.security.authorization.UserName: java.lang.String validated(java.lang.String)>(r0) >>>>>>>> org.apache.ambari.server.security.authorization.UserName.validated : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isBlank(java.lang.String)>(r0)
org.apache.ambari.server.security.authorization.UserName.validated : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isBlank(java.lang.String)>(r0) >>>>>>>> org.apache.ambari.server.security.authorization.UserName.validated : if $z0 == 0
org.apache.ambari.server.security.authorization.UserName.validated : if $z0 == 0 >>>>>>>> org.apache.ambari.server.security.authorization.UserName.validated : $r1 = <org.apache.ambari.server.security.authorization.UserName: char[] FORBIDDEN_CHARS>
org.apache.ambari.server.security.authorization.UserName.validated : $r1 = <org.apache.ambari.server.security.authorization.UserName: char[] FORBIDDEN_CHARS> >>>>>>>> org.apache.ambari.server.security.authorization.UserName.validated : staticinvoke <org.apache.ambari.server.security.authorization.UserName: void rejectIfContainsAnyOf(java.lang.String,char[])>(r0, $r1)
org.apache.ambari.server.security.authorization.UserName.validated : staticinvoke <org.apache.ambari.server.security.authorization.UserName: void rejectIfContainsAnyOf(java.lang.String,char[])>(r0, $r1) >>>>>>>> org.apache.ambari.server.security.authorization.UserName.rejectIfContainsAnyOf : i0 = lengthof r1
org.apache.ambari.server.security.authorization.UserName.rejectIfContainsAnyOf : i0 = lengthof r1 >>>>>>>> org.apache.ambari.server.security.authorization.UserName.rejectIfContainsAnyOf : i2 = 0
org.apache.ambari.server.security.authorization.UserName.rejectIfContainsAnyOf : i2 = 0 >>>>>>>> org.apache.ambari.server.security.authorization.UserName.rejectIfContainsAnyOf : if i2 >= i0
org.apache.ambari.server.security.authorization.UserName.rejectIfContainsAnyOf : if i2 >= i0 >>>>>>>> org.apache.ambari.server.security.authorization.UserName.rejectIfContainsAnyOf : c1 = r1[i2]
org.apache.ambari.server.security.authorization.UserName.rejectIfContainsAnyOf : c1 = r1[i2] >>>>>>>> org.apache.ambari.server.security.authorization.UserName.rejectIfContainsAnyOf : $r3 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(c1)
org.apache.ambari.server.security.authorization.UserName.rejectIfContainsAnyOf : $r3 = staticinvoke <java.lang.Character: java.lang.String toString(char)>(c1) >>>>>>>> org.apache.ambari.server.security.authorization.UserName.rejectIfContainsAnyOf : $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>($r3)
org.apache.ambari.server.security.authorization.UserName.rejectIfContainsAnyOf : $z0 = virtualinvoke r0.<java.lang.String: boolean contains(java.lang.CharSequence)>($r3) >>>>>>>> org.apache.ambari.server.security.authorization.UserName.rejectIfContainsAnyOf : if $z0 == 0
org.apache.ambari.server.security.authorization.UserName.rejectIfContainsAnyOf : if $z0 == 0 >>>>>>>> org.apache.ambari.server.security.authorization.UserName.rejectIfContainsAnyOf : i2 = i2 + 1
org.apache.ambari.server.security.authorization.UserName.rejectIfContainsAnyOf : i2 = i2 + 1 >>>>>>>> org.apache.ambari.server.security.authorization.UserName.rejectIfContainsAnyOf : goto [?= (branch)]
org.apache.ambari.server.security.authorization.UserName.rejectIfContainsAnyOf : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.security.authorization.UserName.validated : return r0
org.apache.ambari.server.security.authorization.UserName.validated : return r0 >>>>>>>> org.apache.ambari.server.security.authorization.UserName.fromString : specialinvoke $r1.<org.apache.ambari.server.security.authorization.UserName: void <init>(java.lang.String)>($r2)
org.apache.ambari.server.security.authorization.UserName.fromString : specialinvoke $r1.<org.apache.ambari.server.security.authorization.UserName: void <init>(java.lang.String)>($r2) >>>>>>>> org.apache.ambari.server.security.authorization.UserName.fromString : return $r1
org.apache.ambari.server.security.authorization.UserName.fromString : return $r1 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.user : virtualinvoke $r3.<org.apache.ambari.server.orm.entities.UserEntity: void setUserName(org.apache.ambari.server.security.authorization.UserName)>($r4)
org.apache.ambari.server.orm.dao.UserDAOTest.user : virtualinvoke $r3.<org.apache.ambari.server.orm.entities.UserEntity: void setUserName(org.apache.ambari.server.security.authorization.UserName)>($r4) >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity.setUserName : $r2 = virtualinvoke r1.<org.apache.ambari.server.security.authorization.UserName: java.lang.String toString()>()
org.apache.ambari.server.orm.entities.UserEntity.setUserName : $r2 = virtualinvoke r1.<org.apache.ambari.server.security.authorization.UserName: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.security.authorization.UserName.toString : $r1 = r0.<org.apache.ambari.server.security.authorization.UserName: java.lang.String userName>
org.apache.ambari.server.security.authorization.UserName.toString : $r1 = r0.<org.apache.ambari.server.security.authorization.UserName: java.lang.String userName> >>>>>>>> org.apache.ambari.server.security.authorization.UserName.toString : return $r1
org.apache.ambari.server.security.authorization.UserName.toString : return $r1 >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity.setUserName : virtualinvoke r0.<org.apache.ambari.server.orm.entities.UserEntity: void _persistence_set_userName(java.lang.String)>($r2)
org.apache.ambari.server.orm.entities.UserEntity.setUserName : virtualinvoke r0.<org.apache.ambari.server.orm.entities.UserEntity: void _persistence_set_userName(java.lang.String)>($r2) >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity._persistence_set_userName : virtualinvoke r0.<org.apache.ambari.server.orm.entities.UserEntity: void _persistence_checkFetchedForSet(java.lang.String)>("userName")
org.apache.ambari.server.orm.entities.UserEntity._persistence_set_userName : virtualinvoke r0.<org.apache.ambari.server.orm.entities.UserEntity: void _persistence_checkFetchedForSet(java.lang.String)>("userName") >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity._persistence_checkFetchedForSet : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.UserEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1)
org.apache.ambari.server.orm.entities.UserEntity._persistence_checkFetchedForSet : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.UserEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity._persistence_isAttributeFetched : $r2 = r0.<org.apache.ambari.server.orm.entities.UserEntity: org.eclipse.persistence.queries.FetchGroup _persistence_fetchGroup>
org.apache.ambari.server.orm.entities.UserEntity._persistence_isAttributeFetched : $r2 = r0.<org.apache.ambari.server.orm.entities.UserEntity: org.eclipse.persistence.queries.FetchGroup _persistence_fetchGroup> >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity._persistence_isAttributeFetched : if $r2 == null
org.apache.ambari.server.orm.entities.UserEntity._persistence_isAttributeFetched : if $r2 == null >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity._persistence_isAttributeFetched : $z1 = 1
org.apache.ambari.server.orm.entities.UserEntity._persistence_isAttributeFetched : $z1 = 1 >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity._persistence_isAttributeFetched : goto [?= return $z1]
org.apache.ambari.server.orm.entities.UserEntity._persistence_isAttributeFetched : goto [?= return $z1] >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity._persistence_isAttributeFetched : return $z1
org.apache.ambari.server.orm.entities.UserEntity._persistence_isAttributeFetched : return $z1 >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity._persistence_checkFetchedForSet : if $z0 != 0
org.apache.ambari.server.orm.entities.UserEntity._persistence_checkFetchedForSet : if $z0 != 0 >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity._persistence_set_userName : $r2 = r0.<org.apache.ambari.server.orm.entities.UserEntity: java.lang.String userName>
org.apache.ambari.server.orm.entities.UserEntity._persistence_set_userName : $r2 = r0.<org.apache.ambari.server.orm.entities.UserEntity: java.lang.String userName> >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity._persistence_set_userName : virtualinvoke r0.<org.apache.ambari.server.orm.entities.UserEntity: void _persistence_propertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("userName", $r2, r1)
org.apache.ambari.server.orm.entities.UserEntity._persistence_set_userName : virtualinvoke r0.<org.apache.ambari.server.orm.entities.UserEntity: void _persistence_propertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("userName", $r2, r1) >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity._persistence_propertyChange : $r4 = r0.<org.apache.ambari.server.orm.entities.UserEntity: java.beans.PropertyChangeListener _persistence_listener>
org.apache.ambari.server.orm.entities.UserEntity._persistence_propertyChange : $r4 = r0.<org.apache.ambari.server.orm.entities.UserEntity: java.beans.PropertyChangeListener _persistence_listener> >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity._persistence_propertyChange : if $r4 == null
org.apache.ambari.server.orm.entities.UserEntity._persistence_propertyChange : if $r4 == null >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity._persistence_set_userName : r0.<org.apache.ambari.server.orm.entities.UserEntity: java.lang.String userName> = r1
org.apache.ambari.server.orm.entities.UserEntity._persistence_set_userName : r0.<org.apache.ambari.server.orm.entities.UserEntity: java.lang.String userName> = r1 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.user : virtualinvoke $r3.<org.apache.ambari.server.orm.entities.UserEntity: void setUserType(org.apache.ambari.server.security.authorization.UserType)>(r1)
org.apache.ambari.server.orm.dao.UserDAOTest.user : virtualinvoke $r3.<org.apache.ambari.server.orm.entities.UserEntity: void setUserType(org.apache.ambari.server.security.authorization.UserType)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity.setUserType : virtualinvoke r0.<org.apache.ambari.server.orm.entities.UserEntity: void _persistence_set_userType(org.apache.ambari.server.security.authorization.UserType)>(r1)
org.apache.ambari.server.orm.entities.UserEntity.setUserType : virtualinvoke r0.<org.apache.ambari.server.orm.entities.UserEntity: void _persistence_set_userType(org.apache.ambari.server.security.authorization.UserType)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity._persistence_set_userType : virtualinvoke r0.<org.apache.ambari.server.orm.entities.UserEntity: void _persistence_checkFetchedForSet(java.lang.String)>("userType")
org.apache.ambari.server.orm.entities.UserEntity._persistence_set_userType : virtualinvoke r0.<org.apache.ambari.server.orm.entities.UserEntity: void _persistence_checkFetchedForSet(java.lang.String)>("userType") >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity._persistence_set_userType : $r2 = r0.<org.apache.ambari.server.orm.entities.UserEntity: org.apache.ambari.server.security.authorization.UserType userType>
org.apache.ambari.server.orm.entities.UserEntity._persistence_set_userType : $r2 = r0.<org.apache.ambari.server.orm.entities.UserEntity: org.apache.ambari.server.security.authorization.UserType userType> >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity._persistence_set_userType : virtualinvoke r0.<org.apache.ambari.server.orm.entities.UserEntity: void _persistence_propertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("userType", $r2, r1)
org.apache.ambari.server.orm.entities.UserEntity._persistence_set_userType : virtualinvoke r0.<org.apache.ambari.server.orm.entities.UserEntity: void _persistence_propertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("userType", $r2, r1) >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity._persistence_set_userType : r0.<org.apache.ambari.server.orm.entities.UserEntity: org.apache.ambari.server.security.authorization.UserType userType> = r1
org.apache.ambari.server.orm.entities.UserEntity._persistence_set_userType : r0.<org.apache.ambari.server.orm.entities.UserEntity: org.apache.ambari.server.security.authorization.UserType userType> = r1 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.user : return $r3
org.apache.ambari.server.orm.dao.UserDAOTest.user : return $r3 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.user : return $r2
org.apache.ambari.server.orm.dao.UserDAOTest.user : return $r2 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r7 = staticinvoke <org.easymock.EasyMock: java.lang.Object createStrictMock(java.lang.Class)>(class "Ljavax/persistence/EntityManager;")
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r7 = staticinvoke <org.easymock.EasyMock: java.lang.Object createStrictMock(java.lang.Class)>(class "Ljavax/persistence/EntityManager;") >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : r2 = (javax.persistence.EntityManager) $r7
org.apache.ambari.server.orm.dao.UserDAOTest.init : r2 = (javax.persistence.EntityManager) $r7 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r8 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/dao/DaoUtils;")
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r8 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/dao/DaoUtils;") >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : r3 = (org.apache.ambari.server.orm.dao.DaoUtils) $r8
org.apache.ambari.server.orm.dao.UserDAOTest.init : r3 = (org.apache.ambari.server.orm.dao.DaoUtils) $r8 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r9 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/DBAccessor;")
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r9 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/DBAccessor;") >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : r4 = (org.apache.ambari.server.orm.DBAccessor) $r9
org.apache.ambari.server.orm.dao.UserDAOTest.init : r4 = (org.apache.ambari.server.orm.DBAccessor) $r9 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r10 = newarray (com.google.inject.Module)[1]
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r10 = newarray (com.google.inject.Module)[1] >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r11 = new org.apache.ambari.server.orm.dao.UserDAOTest$1
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r11 = new org.apache.ambari.server.orm.dao.UserDAOTest$1 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : specialinvoke $r11.<org.apache.ambari.server.orm.dao.UserDAOTest$1: void <init>(org.apache.ambari.server.orm.dao.UserDAOTest,javax.persistence.EntityManager,org.apache.ambari.server.orm.DBAccessor,org.apache.ambari.server.orm.dao.DaoUtils)>(r0, r2, r4, r3)
org.apache.ambari.server.orm.dao.UserDAOTest.init : specialinvoke $r11.<org.apache.ambari.server.orm.dao.UserDAOTest$1: void <init>(org.apache.ambari.server.orm.dao.UserDAOTest,javax.persistence.EntityManager,org.apache.ambari.server.orm.DBAccessor,org.apache.ambari.server.orm.dao.DaoUtils)>(r0, r2, r4, r3) >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r10[0] = $r11
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r10[0] = $r11 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : r5 = staticinvoke <com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Module[])>($r10)
org.apache.ambari.server.orm.dao.UserDAOTest.init : r5 = staticinvoke <com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Module[])>($r10) >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest$1.configure : virtualinvoke r0.<org.apache.ambari.server.orm.dao.UserDAOTest$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/dao/UserDAOTest$EntityManagerProvider;")
org.apache.ambari.server.orm.dao.UserDAOTest$1.configure : virtualinvoke r0.<org.apache.ambari.server.orm.dao.UserDAOTest$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/dao/UserDAOTest$EntityManagerProvider;") >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest$1.configure : $r2 = virtualinvoke r0.<org.apache.ambari.server.orm.dao.UserDAOTest$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Ljavax/persistence/EntityManager;")
org.apache.ambari.server.orm.dao.UserDAOTest$1.configure : $r2 = virtualinvoke r0.<org.apache.ambari.server.orm.dao.UserDAOTest$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Ljavax/persistence/EntityManager;") >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest$1.configure : $r3 = r0.<org.apache.ambari.server.orm.dao.UserDAOTest$1: javax.persistence.EntityManager val$entityManager>
org.apache.ambari.server.orm.dao.UserDAOTest$1.configure : $r3 = r0.<org.apache.ambari.server.orm.dao.UserDAOTest$1: javax.persistence.EntityManager val$entityManager> >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest$1.configure : interfaceinvoke $r2.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r3)
org.apache.ambari.server.orm.dao.UserDAOTest$1.configure : interfaceinvoke $r2.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r3) >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest$1.configure : $r4 = virtualinvoke r0.<org.apache.ambari.server.orm.dao.UserDAOTest$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/DBAccessor;")
org.apache.ambari.server.orm.dao.UserDAOTest$1.configure : $r4 = virtualinvoke r0.<org.apache.ambari.server.orm.dao.UserDAOTest$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/DBAccessor;") >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest$1.configure : $r5 = r0.<org.apache.ambari.server.orm.dao.UserDAOTest$1: org.apache.ambari.server.orm.DBAccessor val$dbAccessor>
org.apache.ambari.server.orm.dao.UserDAOTest$1.configure : $r5 = r0.<org.apache.ambari.server.orm.dao.UserDAOTest$1: org.apache.ambari.server.orm.DBAccessor val$dbAccessor> >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest$1.configure : interfaceinvoke $r4.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r5)
org.apache.ambari.server.orm.dao.UserDAOTest$1.configure : interfaceinvoke $r4.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r5) >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest$1.configure : $r6 = virtualinvoke r0.<org.apache.ambari.server.orm.dao.UserDAOTest$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/dao/DaoUtils;")
org.apache.ambari.server.orm.dao.UserDAOTest$1.configure : $r6 = virtualinvoke r0.<org.apache.ambari.server.orm.dao.UserDAOTest$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/dao/DaoUtils;") >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest$1.configure : $r7 = r0.<org.apache.ambari.server.orm.dao.UserDAOTest$1: org.apache.ambari.server.orm.dao.DaoUtils val$daoUtils>
org.apache.ambari.server.orm.dao.UserDAOTest$1.configure : $r7 = r0.<org.apache.ambari.server.orm.dao.UserDAOTest$1: org.apache.ambari.server.orm.dao.DaoUtils val$daoUtils> >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest$1.configure : interfaceinvoke $r6.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r7)
org.apache.ambari.server.orm.dao.UserDAOTest$1.configure : interfaceinvoke $r6.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r7) >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r12 = interfaceinvoke r5.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/dao/UserDAO;")
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r12 = interfaceinvoke r5.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/dao/UserDAO;") >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r13 = (org.apache.ambari.server.orm.dao.UserDAO) $r12
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r13 = (org.apache.ambari.server.orm.dao.UserDAO) $r12 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : r0.<org.apache.ambari.server.orm.dao.UserDAOTest: org.apache.ambari.server.orm.dao.UserDAO userDAO> = $r13
org.apache.ambari.server.orm.dao.UserDAOTest.init : r0.<org.apache.ambari.server.orm.dao.UserDAOTest: org.apache.ambari.server.orm.dao.UserDAO userDAO> = $r13 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r14 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Ljavax/persistence/TypedQuery;")
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r14 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Ljavax/persistence/TypedQuery;") >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : r6 = (javax.persistence.TypedQuery) $r14
org.apache.ambari.server.orm.dao.UserDAOTest.init : r6 = (javax.persistence.TypedQuery) $r14 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r15 = interfaceinvoke r6.<javax.persistence.TypedQuery: java.util.List getResultList()>()
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r15 = interfaceinvoke r6.<javax.persistence.TypedQuery: java.util.List getResultList()>() >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r16 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r15)
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r16 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r15) >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r17 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1)
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r17 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1) >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : interfaceinvoke $r16.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r17)
org.apache.ambari.server.orm.dao.UserDAOTest.init : interfaceinvoke $r16.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r17) >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r19 = staticinvoke <org.easymock.EasyMock: java.lang.String anyString()>()
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r19 = staticinvoke <org.easymock.EasyMock: java.lang.String anyString()>() >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r20 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/Class;")
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r20 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/Class;") >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r21 = (java.lang.Class) $r20
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r21 = (java.lang.Class) $r20 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r22 = interfaceinvoke r2.<javax.persistence.EntityManager: javax.persistence.TypedQuery createNamedQuery(java.lang.String,java.lang.Class)>($r19, $r21)
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r22 = interfaceinvoke r2.<javax.persistence.EntityManager: javax.persistence.TypedQuery createNamedQuery(java.lang.String,java.lang.Class)>($r19, $r21) >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r23 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r22)
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r23 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r22) >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : interfaceinvoke $r23.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r6)
org.apache.ambari.server.orm.dao.UserDAOTest.init : interfaceinvoke $r23.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r25 = newarray (java.lang.Object)[4]
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r25 = newarray (java.lang.Object)[4] >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r25[0] = r2
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r25[0] = r2 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r25[1] = r3
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r25[1] = r3 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r25[2] = r4
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r25[2] = r4 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r25[3] = r6
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r25[3] = r6 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r25)
org.apache.ambari.server.orm.dao.UserDAOTest.init : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r25) >>>>>>>> org.apache.ambari.server.orm.dao.UserDAO.findSingleUserByName : $r5 = r0.<org.apache.ambari.server.orm.dao.UserDAO: com.google.inject.Provider entityManagerProvider>
org.apache.ambari.server.orm.dao.UserDAO.findSingleUserByName : $r5 = r0.<org.apache.ambari.server.orm.dao.UserDAO: com.google.inject.Provider entityManagerProvider> >>>>>>>> org.apache.ambari.server.orm.dao.UserDAO.findSingleUserByName : $r6 = interfaceinvoke $r5.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.orm.dao.UserDAO.findSingleUserByName : $r6 = interfaceinvoke $r5.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.orm.dao.UserDAO.findSingleUserByName : $r7 = (javax.persistence.EntityManager) $r6
org.apache.ambari.server.orm.dao.UserDAO.findSingleUserByName : $r7 = (javax.persistence.EntityManager) $r6 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAO.findSingleUserByName : r2 = interfaceinvoke $r7.<javax.persistence.EntityManager: javax.persistence.TypedQuery createNamedQuery(java.lang.String,java.lang.Class)>("userByName", class "Lorg/apache/ambari/server/orm/entities/UserEntity;")
org.apache.ambari.server.orm.dao.UserDAO.findSingleUserByName : r2 = interfaceinvoke $r7.<javax.persistence.EntityManager: javax.persistence.TypedQuery createNamedQuery(java.lang.String,java.lang.Class)>("userByName", class "Lorg/apache/ambari/server/orm/entities/UserEntity;") >>>>>>>> org.apache.ambari.server.orm.dao.UserDAO.findSingleUserByName : $r8 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>()
org.apache.ambari.server.orm.dao.UserDAO.findSingleUserByName : $r8 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>() >>>>>>>> org.apache.ambari.server.orm.dao.UserDAO.findSingleUserByName : interfaceinvoke r2.<javax.persistence.TypedQuery: javax.persistence.TypedQuery setParameter(java.lang.String,java.lang.Object)>("username", $r8)
org.apache.ambari.server.orm.dao.UserDAO.findSingleUserByName : interfaceinvoke r2.<javax.persistence.TypedQuery: javax.persistence.TypedQuery setParameter(java.lang.String,java.lang.Object)>("username", $r8) >>>>>>>> org.apache.ambari.server.orm.dao.UserDAO.findSingleUserByName : r3 = interfaceinvoke r2.<javax.persistence.TypedQuery: java.util.List getResultList()>()
org.apache.ambari.server.orm.dao.UserDAO.findSingleUserByName : r3 = interfaceinvoke r2.<javax.persistence.TypedQuery: java.util.List getResultList()>() >>>>>>>> org.apache.ambari.server.orm.dao.UserDAO.findSingleUserByName : $i0 = interfaceinvoke r3.<java.util.List: int size()>()
org.apache.ambari.server.orm.dao.UserDAO.findSingleUserByName : $i0 = interfaceinvoke r3.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.orm.dao.UserDAO.findSingleUserByName : lookupswitch($i0) {     case 0:
org.apache.ambari.server.orm.dao.UserDAO.findSingleUserByName : lookupswitch($i0) {     case 0: >>>>>>>> org.apache.ambari.server.orm.dao.UserDAO.findSingleUserByName : $r10 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0)
org.apache.ambari.server.orm.dao.UserDAO.findSingleUserByName : $r10 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> org.apache.ambari.server.orm.dao.UserDAO.findSingleUserByName : $r11 = (org.apache.ambari.server.orm.entities.UserEntity) $r10
org.apache.ambari.server.orm.dao.UserDAO.findSingleUserByName : $r11 = (org.apache.ambari.server.orm.entities.UserEntity) $r10 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAO.findSingleUserByName : return $r11
org.apache.ambari.server.orm.dao.UserDAO.findSingleUserByName : return $r11 >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity.getUserType : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.UserEntity: org.apache.ambari.server.security.authorization.UserType _persistence_get_userType()>()
org.apache.ambari.server.orm.entities.UserEntity.getUserType : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.UserEntity: org.apache.ambari.server.security.authorization.UserType _persistence_get_userType()>() >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity._persistence_get_userType : virtualinvoke r0.<org.apache.ambari.server.orm.entities.UserEntity: void _persistence_checkFetched(java.lang.String)>("userType")
org.apache.ambari.server.orm.entities.UserEntity._persistence_get_userType : virtualinvoke r0.<org.apache.ambari.server.orm.entities.UserEntity: void _persistence_checkFetched(java.lang.String)>("userType") >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity._persistence_checkFetched : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.UserEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1)
org.apache.ambari.server.orm.entities.UserEntity._persistence_checkFetched : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.UserEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity._persistence_checkFetched : if $z0 != 0
org.apache.ambari.server.orm.entities.UserEntity._persistence_checkFetched : if $z0 != 0 >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity._persistence_get_userType : $r1 = r0.<org.apache.ambari.server.orm.entities.UserEntity: org.apache.ambari.server.security.authorization.UserType userType>
org.apache.ambari.server.orm.entities.UserEntity._persistence_get_userType : $r1 = r0.<org.apache.ambari.server.orm.entities.UserEntity: org.apache.ambari.server.security.authorization.UserType userType> >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity._persistence_get_userType : return $r1
org.apache.ambari.server.orm.entities.UserEntity._persistence_get_userType : return $r1 >>>>>>>> org.apache.ambari.server.orm.entities.UserEntity.getUserType : return $r1
