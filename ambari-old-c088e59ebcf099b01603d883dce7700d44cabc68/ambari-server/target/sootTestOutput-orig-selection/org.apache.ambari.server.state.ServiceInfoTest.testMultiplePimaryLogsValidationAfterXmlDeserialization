org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r8 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r9 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>()
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r9 = virtualinvoke r0.<java.lang.String: byte[] getBytes()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : specialinvoke $r8.<java.io.ByteArrayInputStream: void <init>(byte[])>($r9)
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : specialinvoke $r8.<java.io.ByteArrayInputStream: void <init>(byte[])>($r9) >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r10 = newarray (java.lang.Class)[1]
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r10 = newarray (java.lang.Class)[1] >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r10[0] = class "Lorg/apache/ambari/server/state/stack/ServiceMetainfoXml;"
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r10[0] = class "Lorg/apache/ambari/server/state/stack/ServiceMetainfoXml;" >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : r2 = staticinvoke <javax.xml.bind.JAXBContext: javax.xml.bind.JAXBContext newInstance(java.lang.Class[])>($r10)
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : r2 = staticinvoke <javax.xml.bind.JAXBContext: javax.xml.bind.JAXBContext newInstance(java.lang.Class[])>($r10) >>>>>>>> org.apache.ambari.server.state.ServiceInfo$Selection.values : $r0 = <org.apache.ambari.server.state.ServiceInfo$Selection: org.apache.ambari.server.state.ServiceInfo$Selection[] $VALUES>
org.apache.ambari.server.state.ServiceInfo$Selection.values : $r0 = <org.apache.ambari.server.state.ServiceInfo$Selection: org.apache.ambari.server.state.ServiceInfo$Selection[] $VALUES> >>>>>>>> org.apache.ambari.server.state.ServiceInfo$Selection.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
org.apache.ambari.server.state.ServiceInfo$Selection.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo$Selection.values : $r2 = (org.apache.ambari.server.state.ServiceInfo$Selection[]) $r1
org.apache.ambari.server.state.ServiceInfo$Selection.values : $r2 = (org.apache.ambari.server.state.ServiceInfo$Selection[]) $r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo$Selection.values : return $r2
org.apache.ambari.server.state.ServiceInfo$Selection.values : return $r2 >>>>>>>> org.apache.ambari.server.state.ServiceInfo$ServiceAdvisorType.values : $r0 = <org.apache.ambari.server.state.ServiceInfo$ServiceAdvisorType: org.apache.ambari.server.state.ServiceInfo$ServiceAdvisorType[] $VALUES>
org.apache.ambari.server.state.ServiceInfo$ServiceAdvisorType.values : $r0 = <org.apache.ambari.server.state.ServiceInfo$ServiceAdvisorType: org.apache.ambari.server.state.ServiceInfo$ServiceAdvisorType[] $VALUES> >>>>>>>> org.apache.ambari.server.state.ServiceInfo$ServiceAdvisorType.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
org.apache.ambari.server.state.ServiceInfo$ServiceAdvisorType.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo$ServiceAdvisorType.values : $r2 = (org.apache.ambari.server.state.ServiceInfo$ServiceAdvisorType[]) $r1
org.apache.ambari.server.state.ServiceInfo$ServiceAdvisorType.values : $r2 = (org.apache.ambari.server.state.ServiceInfo$ServiceAdvisorType[]) $r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo$ServiceAdvisorType.values : return $r2
org.apache.ambari.server.state.ServiceInfo$ServiceAdvisorType.values : return $r2 >>>>>>>> org.apache.ambari.server.state.UnlimitedKeyJCERequirement.values : $r0 = <org.apache.ambari.server.state.UnlimitedKeyJCERequirement: org.apache.ambari.server.state.UnlimitedKeyJCERequirement[] $VALUES>
org.apache.ambari.server.state.UnlimitedKeyJCERequirement.values : $r0 = <org.apache.ambari.server.state.UnlimitedKeyJCERequirement: org.apache.ambari.server.state.UnlimitedKeyJCERequirement[] $VALUES> >>>>>>>> org.apache.ambari.server.state.UnlimitedKeyJCERequirement.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
org.apache.ambari.server.state.UnlimitedKeyJCERequirement.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.ambari.server.state.UnlimitedKeyJCERequirement.values : $r2 = (org.apache.ambari.server.state.UnlimitedKeyJCERequirement[]) $r1
org.apache.ambari.server.state.UnlimitedKeyJCERequirement.values : $r2 = (org.apache.ambari.server.state.UnlimitedKeyJCERequirement[]) $r1 >>>>>>>> org.apache.ambari.server.state.UnlimitedKeyJCERequirement.values : return $r2
org.apache.ambari.server.state.UnlimitedKeyJCERequirement.values : return $r2 >>>>>>>> org.apache.ambari.server.state.CommandScriptDefinition$Type.values : $r0 = <org.apache.ambari.server.state.CommandScriptDefinition$Type: org.apache.ambari.server.state.CommandScriptDefinition$Type[] $VALUES>
org.apache.ambari.server.state.CommandScriptDefinition$Type.values : $r0 = <org.apache.ambari.server.state.CommandScriptDefinition$Type: org.apache.ambari.server.state.CommandScriptDefinition$Type[] $VALUES> >>>>>>>> org.apache.ambari.server.state.CommandScriptDefinition$Type.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
org.apache.ambari.server.state.CommandScriptDefinition$Type.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.ambari.server.state.CommandScriptDefinition$Type.values : $r2 = (org.apache.ambari.server.state.CommandScriptDefinition$Type[]) $r1
org.apache.ambari.server.state.CommandScriptDefinition$Type.values : $r2 = (org.apache.ambari.server.state.CommandScriptDefinition$Type[]) $r1 >>>>>>>> org.apache.ambari.server.state.CommandScriptDefinition$Type.values : return $r2
org.apache.ambari.server.state.CommandScriptDefinition$Type.values : return $r2 >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : r3 = virtualinvoke r2.<javax.xml.bind.JAXBContext: javax.xml.bind.Unmarshaller createUnmarshaller()>()
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : r3 = virtualinvoke r2.<javax.xml.bind.JAXBContext: javax.xml.bind.Unmarshaller createUnmarshaller()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r11 = interfaceinvoke r3.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.InputStream)>($r8)
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r11 = interfaceinvoke r3.<javax.xml.bind.Unmarshaller: java.lang.Object unmarshal(java.io.InputStream)>($r8) >>>>>>>> org.apache.ambari.server.state.stack.TrimmingAdapter.unmarshal : $r2 = (java.lang.String) r1
org.apache.ambari.server.state.stack.TrimmingAdapter.unmarshal : $r2 = (java.lang.String) r1 >>>>>>>> org.apache.ambari.server.state.stack.TrimmingAdapter.unmarshal : $r3 = virtualinvoke r0.<org.apache.ambari.server.state.stack.TrimmingAdapter: java.lang.String unmarshal(java.lang.String)>($r2)
org.apache.ambari.server.state.stack.TrimmingAdapter.unmarshal : $r3 = virtualinvoke r0.<org.apache.ambari.server.state.stack.TrimmingAdapter: java.lang.String unmarshal(java.lang.String)>($r2) >>>>>>>> org.apache.ambari.server.state.stack.TrimmingAdapter.unmarshal : $r2 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String trim(java.lang.String)>(r1)
org.apache.ambari.server.state.stack.TrimmingAdapter.unmarshal : $r2 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String trim(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.state.stack.TrimmingAdapter.unmarshal : return $r2
org.apache.ambari.server.state.stack.TrimmingAdapter.unmarshal : return $r2 >>>>>>>> org.apache.ambari.server.state.stack.TrimmingAdapter.unmarshal : return $r3
org.apache.ambari.server.state.stack.TrimmingAdapter.unmarshal : return $r3 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureMandatoryServiceProperties : $r2 = specialinvoke r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map ensureVisibilityServiceProperties(java.util.Map)>(r1)
org.apache.ambari.server.state.ServiceInfo.ensureMandatoryServiceProperties : $r2 = specialinvoke r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map ensureVisibilityServiceProperties(java.util.Map)>(r1) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r2 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r2 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r3 = virtualinvoke $r2.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r3 = virtualinvoke $r2.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r3)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r3) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z0 != 0
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z0 != 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r18 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r18 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r19 = virtualinvoke $r18.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r19 = virtualinvoke $r18.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r20 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r20 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r21 = virtualinvoke $r20.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r21 = virtualinvoke $r20.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r21)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r21) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r4 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r4 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r5 = virtualinvoke $r4.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r5 = virtualinvoke $r4.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z1 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r5)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z1 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r5) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z1 != 0
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z1 != 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r13 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r13 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r14 = virtualinvoke $r13.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r14 = virtualinvoke $r13.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r15 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r15 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r16 = virtualinvoke $r15.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r16 = virtualinvoke $r15.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r16)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r16) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r6 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r6 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r7 = virtualinvoke $r6.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r7 = virtualinvoke $r6.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z2 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r7)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z2 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r7) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z2 != 0
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z2 != 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r8 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r8 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r9 = virtualinvoke $r8.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r9 = virtualinvoke $r8.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r10 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r10 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r11 = virtualinvoke $r10.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r11 = virtualinvoke $r10.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r11)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r11) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : return r1
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : return r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureMandatoryServiceProperties : return $r2
org.apache.ambari.server.state.ServiceInfo.ensureMandatoryServiceProperties : return $r2 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.afterUnmarshal : specialinvoke r0.<org.apache.ambari.server.state.ServiceInfo: void afterServicePropertyListSet()>()
org.apache.ambari.server.state.ServiceInfo.afterUnmarshal : specialinvoke r0.<org.apache.ambari.server.state.ServiceInfo: void afterServicePropertyListSet()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.afterServicePropertyListSet : specialinvoke r0.<org.apache.ambari.server.state.ServiceInfo: void validateServiceProperties()>()
org.apache.ambari.server.state.ServiceInfo.afterServicePropertyListSet : specialinvoke r0.<org.apache.ambari.server.state.ServiceInfo: void validateServiceProperties()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r4 = virtualinvoke r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List getServicePropertyList()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r4 = virtualinvoke r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List getServicePropertyList()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getServicePropertyList : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List servicePropertyList>
org.apache.ambari.server.state.ServiceInfo.getServicePropertyList : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List servicePropertyList> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getServicePropertyList : return $r1
org.apache.ambari.server.state.ServiceInfo.getServicePropertyList : return $r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r5 = new org.apache.ambari.server.state.ServiceInfo$1
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r5 = new org.apache.ambari.server.state.ServiceInfo$1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : specialinvoke $r5.<org.apache.ambari.server.state.ServiceInfo$1: void <init>(org.apache.ambari.server.state.ServiceInfo)>(r0)
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : specialinvoke $r5.<org.apache.ambari.server.state.ServiceInfo$1: void <init>(org.apache.ambari.server.state.ServiceInfo)>(r0) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : r1 = staticinvoke <com.google.common.collect.Multimaps: com.google.common.collect.ImmutableListMultimap index(java.lang.Iterable,com.google.common.base.Function)>($r4, $r5)
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : r1 = staticinvoke <com.google.common.collect.Multimaps: com.google.common.collect.ImmutableListMultimap index(java.lang.Iterable,com.google.common.base.Function)>($r4, $r5) >>>>>>>> org.apache.ambari.server.state.ServiceInfo$1.apply : $r2 = (org.apache.ambari.server.state.ServicePropertyInfo) r1
org.apache.ambari.server.state.ServiceInfo$1.apply : $r2 = (org.apache.ambari.server.state.ServicePropertyInfo) r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo$1.apply : $r3 = virtualinvoke r0.<org.apache.ambari.server.state.ServiceInfo$1: java.lang.String apply(org.apache.ambari.server.state.ServicePropertyInfo)>($r2)
org.apache.ambari.server.state.ServiceInfo$1.apply : $r3 = virtualinvoke r0.<org.apache.ambari.server.state.ServiceInfo$1: java.lang.String apply(org.apache.ambari.server.state.ServicePropertyInfo)>($r2) >>>>>>>> org.apache.ambari.server.state.ServiceInfo$1.apply : $r2 = virtualinvoke r1.<org.apache.ambari.server.state.ServicePropertyInfo: java.lang.String getName()>()
org.apache.ambari.server.state.ServiceInfo$1.apply : $r2 = virtualinvoke r1.<org.apache.ambari.server.state.ServicePropertyInfo: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.state.ServicePropertyInfo.getName : $r1 = r0.<org.apache.ambari.server.state.ServicePropertyInfo: java.lang.String name>
org.apache.ambari.server.state.ServicePropertyInfo.getName : $r1 = r0.<org.apache.ambari.server.state.ServicePropertyInfo: java.lang.String name> >>>>>>>> org.apache.ambari.server.state.ServicePropertyInfo.getName : return $r1
org.apache.ambari.server.state.ServicePropertyInfo.getName : return $r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo$1.apply : return $r2
org.apache.ambari.server.state.ServiceInfo$1.apply : return $r2 >>>>>>>> org.apache.ambari.server.state.ServiceInfo$1.apply : return $r3
org.apache.ambari.server.state.ServiceInfo$1.apply : return $r3 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r6 = interfaceinvoke r1.<com.google.common.collect.Multimap: java.util.Set keySet()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r6 = interfaceinvoke r1.<com.google.common.collect.Multimap: java.util.Set keySet()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : r56 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : r56 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $z0 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $z0 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : if $z0 == 0
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r43 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r43 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : r57 = (java.lang.String) $r43
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : r57 = (java.lang.String) $r43 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r44 = interfaceinvoke r1.<com.google.common.collect.Multimap: java.util.Collection get(java.lang.Object)>(r57)
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r44 = interfaceinvoke r1.<com.google.common.collect.Multimap: java.util.Collection get(java.lang.Object)>(r57) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $i1 = interfaceinvoke $r44.<java.util.Collection: int size()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $i1 = interfaceinvoke $r44.<java.util.Collection: int size()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : if $i1 <= 1
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : if $i1 <= 1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : goto [?= $z0 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : goto [?= $z0 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r7 = virtualinvoke r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List getComponents()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r7 = virtualinvoke r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List getComponents()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComponents : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List components>
org.apache.ambari.server.state.ServiceInfo.getComponents : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List components> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComponents : if $r1 != null
org.apache.ambari.server.state.ServiceInfo.getComponents : if $r1 != null >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComponents : $r2 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List components>
org.apache.ambari.server.state.ServiceInfo.getComponents : $r2 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List components> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComponents : return $r2
org.apache.ambari.server.state.ServiceInfo.getComponents : return $r2 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : r58 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : r58 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $z1 = interfaceinvoke r58.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $z1 = interfaceinvoke r58.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : if $z1 == 0
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r35 = interfaceinvoke r58.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r35 = interfaceinvoke r58.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : r59 = (org.apache.ambari.server.state.ComponentInfo) $r35
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : r59 = (org.apache.ambari.server.state.ComponentInfo) $r35 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : i2 = 0
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : i2 = 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r36 = virtualinvoke r59.<org.apache.ambari.server.state.ComponentInfo: java.util.List getLogs()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r36 = virtualinvoke r59.<org.apache.ambari.server.state.ComponentInfo: java.util.List getLogs()>() >>>>>>>> org.apache.ambari.server.state.ComponentInfo.getLogs : $r1 = r0.<org.apache.ambari.server.state.ComponentInfo: java.util.List logs>
org.apache.ambari.server.state.ComponentInfo.getLogs : $r1 = r0.<org.apache.ambari.server.state.ComponentInfo: java.util.List logs> >>>>>>>> org.apache.ambari.server.state.ComponentInfo.getLogs : if $r1 != null
org.apache.ambari.server.state.ComponentInfo.getLogs : if $r1 != null >>>>>>>> org.apache.ambari.server.state.ComponentInfo.getLogs : $r2 = r0.<org.apache.ambari.server.state.ComponentInfo: java.util.List logs>
org.apache.ambari.server.state.ComponentInfo.getLogs : $r2 = r0.<org.apache.ambari.server.state.ComponentInfo: java.util.List logs> >>>>>>>> org.apache.ambari.server.state.ComponentInfo.getLogs : return $r2
org.apache.ambari.server.state.ComponentInfo.getLogs : return $r2 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : r2 = interfaceinvoke $r36.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : r2 = interfaceinvoke $r36.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $z4 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $z4 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : if $z4 == 0
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : if $z4 == 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r42 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r42 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : r3 = (org.apache.ambari.server.state.LogDefinition) $r42
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : r3 = (org.apache.ambari.server.state.LogDefinition) $r42 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $i0 = i2
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $i0 = i2 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $z5 = virtualinvoke r3.<org.apache.ambari.server.state.LogDefinition: boolean isPrimary()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $z5 = virtualinvoke r3.<org.apache.ambari.server.state.LogDefinition: boolean isPrimary()>() >>>>>>>> org.apache.ambari.server.state.LogDefinition.isPrimary : $z0 = r0.<org.apache.ambari.server.state.LogDefinition: boolean primary>
org.apache.ambari.server.state.LogDefinition.isPrimary : $z0 = r0.<org.apache.ambari.server.state.LogDefinition: boolean primary> >>>>>>>> org.apache.ambari.server.state.LogDefinition.isPrimary : return $z0
org.apache.ambari.server.state.LogDefinition.isPrimary : return $z0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : if $z5 == 0
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : if $z5 == 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $b3 = 1
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $b3 = 1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : goto [?= i2 = $i0 + $b3]
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : goto [?= i2 = $i0 + $b3] >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : i2 = $i0 + $b3
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : i2 = $i0 + $b3 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : goto [?= $z4 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : goto [?= $z4 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : if i2 <= 1
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : if i2 <= 1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : virtualinvoke r0.<org.apache.ambari.server.state.ServiceInfo: void setValid(boolean)>(0)
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : virtualinvoke r0.<org.apache.ambari.server.state.ServiceInfo: void setValid(boolean)>(0) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setValid : r0.<org.apache.ambari.server.state.ServiceInfo: boolean valid> = z0
org.apache.ambari.server.state.ServiceInfo.setValid : r0.<org.apache.ambari.server.state.ServiceInfo: boolean valid> = z0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r37 = new java.lang.StringBuilder
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r37 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : specialinvoke $r37.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : specialinvoke $r37.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("More than one primary log exists for the component ")
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("More than one primary log exists for the component ") >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r39 = virtualinvoke r59.<org.apache.ambari.server.state.ComponentInfo: java.lang.String getName()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r39 = virtualinvoke r59.<org.apache.ambari.server.state.ComponentInfo: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.state.ComponentInfo.getName : $r1 = r0.<org.apache.ambari.server.state.ComponentInfo: java.lang.String name>
org.apache.ambari.server.state.ComponentInfo.getName : $r1 = r0.<org.apache.ambari.server.state.ComponentInfo: java.lang.String name> >>>>>>>> org.apache.ambari.server.state.ComponentInfo.getName : return $r1
org.apache.ambari.server.state.ComponentInfo.getName : return $r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39)
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r40 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r39) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : virtualinvoke r0.<org.apache.ambari.server.state.ServiceInfo: void addError(java.lang.String)>($r41)
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : virtualinvoke r0.<org.apache.ambari.server.state.ServiceInfo: void addError(java.lang.String)>($r41) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.addError : $r2 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Set errorSet>
org.apache.ambari.server.state.ServiceInfo.addError : $r2 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Set errorSet> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.addError : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1)
org.apache.ambari.server.state.ServiceInfo.addError : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : goto [?= $z1 = interfaceinvoke r58.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : goto [?= $z1 = interfaceinvoke r58.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r8 = r0.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.CredentialStoreInfo credentialStoreInfo>
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : $r8 = r0.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.CredentialStoreInfo credentialStoreInfo> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : if $r8 == null
org.apache.ambari.server.state.ServiceInfo.validateServiceProperties : if $r8 == null >>>>>>>> org.apache.ambari.server.state.ServiceInfo.afterServicePropertyListSet : specialinvoke r0.<org.apache.ambari.server.state.ServiceInfo: void buildServiceProperties()>()
org.apache.ambari.server.state.ServiceInfo.afterServicePropertyListSet : specialinvoke r0.<org.apache.ambari.server.state.ServiceInfo: void buildServiceProperties()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : $z0 = virtualinvoke r0.<org.apache.ambari.server.state.ServiceInfo: boolean isValid()>()
org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : $z0 = virtualinvoke r0.<org.apache.ambari.server.state.ServiceInfo: boolean isValid()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.isValid : $z0 = r0.<org.apache.ambari.server.state.ServiceInfo: boolean valid>
org.apache.ambari.server.state.ServiceInfo.isValid : $z0 = r0.<org.apache.ambari.server.state.ServiceInfo: boolean valid> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.isValid : return $z0
org.apache.ambari.server.state.ServiceInfo.isValid : return $z0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : if $z0 == 0
org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : $r4 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>()
org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : $r4 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map servicePropertyMap> = $r4
org.apache.ambari.server.state.ServiceInfo.buildServiceProperties : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map servicePropertyMap> = $r4 >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : r4 = (org.apache.ambari.server.state.stack.ServiceMetainfoXml) $r11
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : r4 = (org.apache.ambari.server.state.stack.ServiceMetainfoXml) $r11 >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r12 = new java.util.HashMap
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r12 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : specialinvoke $r12.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : specialinvoke $r12.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r13 = virtualinvoke r4.<org.apache.ambari.server.state.stack.ServiceMetainfoXml: java.util.List getServices()>()
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r13 = virtualinvoke r4.<org.apache.ambari.server.state.stack.ServiceMetainfoXml: java.util.List getServices()>() >>>>>>>> org.apache.ambari.server.state.stack.ServiceMetainfoXml.getServices : $r1 = r0.<org.apache.ambari.server.state.stack.ServiceMetainfoXml: java.util.List services>
org.apache.ambari.server.state.stack.ServiceMetainfoXml.getServices : $r1 = r0.<org.apache.ambari.server.state.stack.ServiceMetainfoXml: java.util.List services> >>>>>>>> org.apache.ambari.server.state.stack.ServiceMetainfoXml.getServices : return $r1
org.apache.ambari.server.state.stack.ServiceMetainfoXml.getServices : return $r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : r6 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : r6 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : if $z0 == 0
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r14 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r14 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : r7 = (org.apache.ambari.server.state.ServiceInfo) $r14
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : r7 = (org.apache.ambari.server.state.ServiceInfo) $r14 >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r15 = virtualinvoke r7.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getName()>()
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : $r15 = virtualinvoke r7.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getName : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String name>
org.apache.ambari.server.state.ServiceInfo.getName : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String name> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getName : return $r1
org.apache.ambari.server.state.ServiceInfo.getName : return $r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, r7)
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, r7) >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : return $r12
org.apache.ambari.server.state.ServiceInfoTest.getServiceInfo : return $r12 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getErrors : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Set errorSet>
org.apache.ambari.server.state.ServiceInfo.getErrors : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Set errorSet> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getErrors : return $r1
