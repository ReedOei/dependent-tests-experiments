org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : r2 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type HostComponentProcess> >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r10 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/controller/AmbariManagementController;")
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r10 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/controller/AmbariManagementController;") >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : r3 = (org.apache.ambari.server.controller.AmbariManagementController) $r10
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : r3 = (org.apache.ambari.server.controller.AmbariManagementController) $r10 >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r11 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Clusters;")
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r11 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Clusters;") >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : r4 = (org.apache.ambari.server.state.Clusters) $r11
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : r4 = (org.apache.ambari.server.state.Clusters) $r11 >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r12 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Cluster;")
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r12 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Cluster;") >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : r5 = (org.apache.ambari.server.state.Cluster) $r12
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : r5 = (org.apache.ambari.server.state.Cluster) $r12 >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r13 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/ServiceComponentHost;")
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r13 = staticinvoke <org.easymock.EasyMock: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/ServiceComponentHost;") >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : r6 = (org.apache.ambari.server.state.ServiceComponentHost) $r13
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : r6 = (org.apache.ambari.server.state.ServiceComponentHost) $r13 >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r14 = newarray (org.apache.ambari.server.state.ServiceComponentHost)[1]
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r14 = newarray (org.apache.ambari.server.state.ServiceComponentHost)[1] >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r14[0] = r6
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r14[0] = r6 >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r14)
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r14) >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1)
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1) >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r15 = interfaceinvoke r3.<org.apache.ambari.server.controller.AmbariManagementController: org.apache.ambari.server.state.Clusters getClusters()>()
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r15 = interfaceinvoke r3.<org.apache.ambari.server.controller.AmbariManagementController: org.apache.ambari.server.state.Clusters getClusters()>() >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r16 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r15)
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r16 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r15) >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : interfaceinvoke $r16.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r4)
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : interfaceinvoke $r16.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r4) >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r18 = interfaceinvoke r4.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>("c1")
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r18 = interfaceinvoke r4.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>("c1") >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r19 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r18)
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r19 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r18) >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : interfaceinvoke $r19.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r5)
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : interfaceinvoke $r19.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r5) >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r21 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject()>()
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r21 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject()>() >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r22 = (java.lang.String) $r21
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r22 = (java.lang.String) $r21 >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r23 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: java.util.List getServiceComponentHosts(java.lang.String)>($r22)
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r23 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: java.util.List getServiceComponentHosts(java.lang.String)>($r22) >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r24 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r23)
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r24 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r23) >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : interfaceinvoke $r24.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r7)
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : interfaceinvoke $r24.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r7) >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r26 = interfaceinvoke r6.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>()
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r26 = interfaceinvoke r6.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>() >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r27 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r26)
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r27 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r26) >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : interfaceinvoke $r27.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("comp1")
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : interfaceinvoke $r27.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("comp1") >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r29 = interfaceinvoke r6.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getHostName()>()
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r29 = interfaceinvoke r6.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r30 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r29)
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r30 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r29) >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r31 = interfaceinvoke $r30.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("h1")
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r31 = interfaceinvoke $r30.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("h1") >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : interfaceinvoke $r31.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : interfaceinvoke $r31.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r33 = interfaceinvoke r6.<org.apache.ambari.server.state.ServiceComponentHost: java.util.List getProcesses()>()
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r33 = interfaceinvoke r6.<org.apache.ambari.server.state.ServiceComponentHost: java.util.List getProcesses()>() >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r34 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r33)
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r34 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r33) >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : interfaceinvoke $r34.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r8)
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : interfaceinvoke $r34.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r36 = newarray (java.lang.Object)[4]
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r36 = newarray (java.lang.Object)[4] >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r36[0] = r3
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r36[0] = r3 >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r36[1] = r4
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r36[1] = r4 >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r36[2] = r5
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r36[2] = r5 >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r36[3] = r6
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : $r36[3] = r6 >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r36)
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r36) >>>>>>>> org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : r9 = staticinvoke <org.apache.ambari.server.controller.internal.AbstractControllerResourceProvider: org.apache.ambari.server.controller.spi.ResourceProvider getResourceProvider(org.apache.ambari.server.controller.spi.Resource$Type,org.apache.ambari.server.controller.AmbariManagementController)>(r2, r3)
org.apache.ambari.server.controller.internal.HostComponentProcessResourceProviderTest.init : r9 = staticinvoke <org.apache.ambari.server.controller.internal.AbstractControllerResourceProvider: org.apache.ambari.server.controller.spi.ResourceProvider getResourceProvider(org.apache.ambari.server.controller.spi.Resource$Type,org.apache.ambari.server.controller.AmbariManagementController)>(r2, r3) >>>>>>>> org.apache.ambari.server.controller.internal.AbstractControllerResourceProvider.getResourceProvider : $r2 = <org.apache.ambari.server.controller.internal.AbstractControllerResourceProvider$1: int[] $SwitchMap$org$apache$ambari$server$controller$spi$Resource$InternalType>
org.apache.ambari.server.controller.internal.AbstractControllerResourceProvider.getResourceProvider : $r2 = <org.apache.ambari.server.controller.internal.AbstractControllerResourceProvider$1: int[] $SwitchMap$org$apache$ambari$server$controller$spi$Resource$InternalType> >>>>>>>> org.apache.ambari.server.controller.internal.AbstractControllerResourceProvider.getResourceProvider : $r3 = virtualinvoke r0.<org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$InternalType getInternalType()>()
org.apache.ambari.server.controller.internal.AbstractControllerResourceProvider.getResourceProvider : $r3 = virtualinvoke r0.<org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$InternalType getInternalType()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : $z0 = virtualinvoke r0.<org.apache.ambari.server.controller.spi.Resource$Type: boolean isInternalType()>()
org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : $z0 = virtualinvoke r0.<org.apache.ambari.server.controller.spi.Resource$Type: boolean isInternalType()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : $i0 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal>
org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : $i0 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal> >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : $r1 = staticinvoke <org.apache.ambari.server.controller.spi.Resource$InternalType: org.apache.ambari.server.controller.spi.Resource$InternalType[] values()>()
org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : $r1 = staticinvoke <org.apache.ambari.server.controller.spi.Resource$InternalType: org.apache.ambari.server.controller.spi.Resource$InternalType[] values()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$InternalType.values : $r0 = <org.apache.ambari.server.controller.spi.Resource$InternalType: org.apache.ambari.server.controller.spi.Resource$InternalType[] $VALUES>
org.apache.ambari.server.controller.spi.Resource$InternalType.values : $r0 = <org.apache.ambari.server.controller.spi.Resource$InternalType: org.apache.ambari.server.controller.spi.Resource$InternalType[] $VALUES> >>>>>>>> org.apache.ambari.server.controller.spi.Resource$InternalType.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
org.apache.ambari.server.controller.spi.Resource$InternalType.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$InternalType.values : $r2 = (org.apache.ambari.server.controller.spi.Resource$InternalType[]) $r1
org.apache.ambari.server.controller.spi.Resource$InternalType.values : $r2 = (org.apache.ambari.server.controller.spi.Resource$InternalType[]) $r1 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$InternalType.values : return $r2
org.apache.ambari.server.controller.spi.Resource$InternalType.values : return $r2 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : $i1 = lengthof $r1
org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : $i1 = lengthof $r1 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : if $i0 >= $i1
org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : if $i0 >= $i1 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : $z0 = 1
org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : $z0 = 1 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : goto [?= return $z0]
org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : goto [?= return $z0] >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : return $z0
org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : return $z0 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : if $z0 == 0
org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : if $z0 == 0 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : $r7 = staticinvoke <org.apache.ambari.server.controller.spi.Resource$InternalType: org.apache.ambari.server.controller.spi.Resource$InternalType[] values()>()
org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : $r7 = staticinvoke <org.apache.ambari.server.controller.spi.Resource$InternalType: org.apache.ambari.server.controller.spi.Resource$InternalType[] values()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : $i0 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal>
org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : $i0 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal> >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : $r8 = $r7[$i0]
org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : $r8 = $r7[$i0] >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : return $r8
org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : return $r8 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractControllerResourceProvider.getResourceProvider : $i0 = virtualinvoke $r3.<org.apache.ambari.server.controller.spi.Resource$InternalType: int ordinal()>()
org.apache.ambari.server.controller.internal.AbstractControllerResourceProvider.getResourceProvider : $i0 = virtualinvoke $r3.<org.apache.ambari.server.controller.spi.Resource$InternalType: int ordinal()>() >>>>>>>> org.apache.ambari.server.controller.internal.AbstractControllerResourceProvider.getResourceProvider : $i1 = $r2[$i0]
org.apache.ambari.server.controller.internal.AbstractControllerResourceProvider.getResourceProvider : $i1 = $r2[$i0] >>>>>>>> org.apache.ambari.server.controller.internal.AbstractControllerResourceProvider.getResourceProvider : tableswitch($i1) {     case 1:
org.apache.ambari.server.controller.internal.AbstractControllerResourceProvider.getResourceProvider : tableswitch($i1) {     case 1: >>>>>>>> org.apache.ambari.server.controller.internal.AbstractControllerResourceProvider.getResourceProvider : $r33 = new org.apache.ambari.server.controller.internal.HostComponentProcessResourceProvider
org.apache.ambari.server.controller.internal.AbstractControllerResourceProvider.getResourceProvider : $r33 = new org.apache.ambari.server.controller.internal.HostComponentProcessResourceProvider >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.hashCode : $r1 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: java.lang.String name>
org.apache.ambari.server.controller.spi.Resource$Type.hashCode : $r1 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: java.lang.String name> >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.hashCode : i2 = virtualinvoke $r1.<java.lang.String: int hashCode()>()
org.apache.ambari.server.controller.spi.Resource$Type.hashCode : i2 = virtualinvoke $r1.<java.lang.String: int hashCode()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.hashCode : $i1 = 31 * i2
org.apache.ambari.server.controller.spi.Resource$Type.hashCode : $i1 = 31 * i2 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.hashCode : $i0 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal>
org.apache.ambari.server.controller.spi.Resource$Type.hashCode : $i0 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal> >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.hashCode : i3 = $i1 + $i0
org.apache.ambari.server.controller.spi.Resource$Type.hashCode : i3 = $i1 + $i0 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.hashCode : return i3
org.apache.ambari.server.controller.spi.Resource$Type.hashCode : return i3 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : if r0 != r1
org.apache.ambari.server.controller.spi.Resource$Type.equals : if r0 != r1 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : if r1 == null
org.apache.ambari.server.controller.spi.Resource$Type.equals : if r1 == null >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
org.apache.ambari.server.controller.spi.Resource$Type.equals : $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
org.apache.ambari.server.controller.spi.Resource$Type.equals : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : if $r3 == $r4
org.apache.ambari.server.controller.spi.Resource$Type.equals : if $r3 == $r4 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : r2 = (org.apache.ambari.server.controller.spi.Resource$Type) r1
org.apache.ambari.server.controller.spi.Resource$Type.equals : r2 = (org.apache.ambari.server.controller.spi.Resource$Type) r1 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : $i1 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal>
org.apache.ambari.server.controller.spi.Resource$Type.equals : $i1 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal> >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : $i0 = r2.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal>
org.apache.ambari.server.controller.spi.Resource$Type.equals : $i0 = r2.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal> >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : if $i1 != $i0
org.apache.ambari.server.controller.spi.Resource$Type.equals : if $i1 != $i0 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : $z1 = 0
org.apache.ambari.server.controller.spi.Resource$Type.equals : $z1 = 0 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : return $z1
org.apache.ambari.server.controller.spi.Resource$Type.equals : return $z1 >>>>>>>> org.apache.ambari.server.controller.internal.AbstractControllerResourceProvider.getResourceProvider : specialinvoke $r33.<org.apache.ambari.server.controller.internal.HostComponentProcessResourceProvider: void <init>(org.apache.ambari.server.controller.AmbariManagementController)>(r1)
