org.apache.ambari.server.state.AutoDeployInfo.setEnabled : r0.<org.apache.ambari.server.state.AutoDeployInfo: boolean m_enabled> = z0 >>>>>>>> org.apache.ambari.server.state.AutoDeployInfo.setCoLocate : r0.<org.apache.ambari.server.state.AutoDeployInfo: java.lang.String m_coLocate> = r1
org.apache.ambari.server.state.AutoDeployInfo.setCoLocate : r0.<org.apache.ambari.server.state.AutoDeployInfo: java.lang.String m_coLocate> = r1 >>>>>>>> org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : $r2 = staticinvoke <org.easymock.EasyMock: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/ambari/server/configuration/Configuration;")
org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : $r2 = staticinvoke <org.easymock.EasyMock: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/ambari/server/configuration/Configuration;") >>>>>>>> org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : r0 = (org.apache.ambari.server.configuration.Configuration) $r2
org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : r0 = (org.apache.ambari.server.configuration.Configuration) $r2 >>>>>>>> org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : $r3 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.Boolean getGplLicenseAccepted()>()
org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : $r3 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.Boolean getGplLicenseAccepted()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : $r4 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r3)
org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : $r4 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r3) >>>>>>>> org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0)
org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0) >>>>>>>> org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : $r6 = interfaceinvoke $r4.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r5)
org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : $r6 = interfaceinvoke $r4.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r5) >>>>>>>> org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : interfaceinvoke $r6.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters atLeastOnce()>()
org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : interfaceinvoke $r6.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters atLeastOnce()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : $r8 = class "Lorg/apache/ambari/server/topology/BlueprintValidatorImpl;"
org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : $r8 = class "Lorg/apache/ambari/server/topology/BlueprintValidatorImpl;" >>>>>>>> org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : r1 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("configuration")
org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : r1 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("configuration") >>>>>>>> org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : virtualinvoke r1.<java.lang.reflect.Field: void setAccessible(boolean)>(1)
org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : virtualinvoke r1.<java.lang.reflect.Field: void setAccessible(boolean)>(1) >>>>>>>> org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : virtualinvoke r1.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(null, r0)
org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : virtualinvoke r1.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(null, r0) >>>>>>>> org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : return r0
org.apache.ambari.server.topology.BlueprintImplTest.setupConfigurationWithGPLLicense : return r0 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r5 = r0.<org.apache.ambari.server.topology.BlueprintValidatorImpl: org.apache.ambari.server.topology.Blueprint blueprint>
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r5 = r0.<org.apache.ambari.server.topology.BlueprintValidatorImpl: org.apache.ambari.server.topology.Blueprint blueprint> >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r6 = interfaceinvoke $r5.<org.apache.ambari.server.topology.Blueprint: org.apache.ambari.server.topology.Configuration getConfiguration()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r6 = interfaceinvoke $r5.<org.apache.ambari.server.topology.Blueprint: org.apache.ambari.server.topology.Configuration getConfiguration()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : r1 = virtualinvoke $r6.<org.apache.ambari.server.topology.Configuration: java.util.Map getProperties()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : r1 = virtualinvoke $r6.<org.apache.ambari.server.topology.Configuration: java.util.Map getProperties()>() >>>>>>>> org.apache.ambari.server.topology.Configuration.getProperties : $r1 = r0.<org.apache.ambari.server.topology.Configuration: java.util.Map properties>
org.apache.ambari.server.topology.Configuration.getProperties : $r1 = r0.<org.apache.ambari.server.topology.Configuration: java.util.Map properties> >>>>>>>> org.apache.ambari.server.topology.Configuration.getProperties : return $r1
org.apache.ambari.server.topology.Configuration.getProperties : return $r1 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if r1 == null
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if r1 == null >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r70 = <org.apache.ambari.server.topology.BlueprintValidatorImpl: org.apache.ambari.server.configuration.Configuration configuration>
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r70 = <org.apache.ambari.server.topology.BlueprintValidatorImpl: org.apache.ambari.server.configuration.Configuration configuration> >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r71 = virtualinvoke $r70.<org.apache.ambari.server.configuration.Configuration: java.lang.Boolean getGplLicenseAccepted()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r71 = virtualinvoke $r70.<org.apache.ambari.server.configuration.Configuration: java.lang.Boolean getGplLicenseAccepted()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : z27 = virtualinvoke $r71.<java.lang.Boolean: boolean booleanValue()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : z27 = virtualinvoke $r71.<java.lang.Boolean: boolean booleanValue()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r72 = new java.lang.StringBuilder
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r72 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : specialinvoke $r72.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : specialinvoke $r72.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : z28 = 0
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : z28 = 0 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r73 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r73 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : r98 = interfaceinvoke $r73.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : r98 = interfaceinvoke $r73.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $z21 = interfaceinvoke r98.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $z21 = interfaceinvoke r98.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $z21 == 0
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $z21 == 0 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r79 = interfaceinvoke r98.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r79 = interfaceinvoke r98.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : r99 = (java.util.Map$Entry) $r79
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : r99 = (java.util.Map$Entry) $r79 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r80 = interfaceinvoke r99.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r80 = interfaceinvoke r99.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : r100 = (java.lang.String) $r80
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : r100 = (java.lang.String) $r80 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r81 = interfaceinvoke r99.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r81 = interfaceinvoke r99.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $r81 == null
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $r81 == null >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r82 = interfaceinvoke r99.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r82 = interfaceinvoke r99.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r83 = (java.util.Map) $r82
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r83 = (java.util.Map) $r82 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r84 = interfaceinvoke $r83.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r84 = interfaceinvoke $r83.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : r101 = interfaceinvoke $r84.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : r101 = interfaceinvoke $r84.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $z22 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $z22 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $z22 == 0
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $z22 == 0 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r85 = interfaceinvoke r101.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r85 = interfaceinvoke r101.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : r102 = (java.util.Map$Entry) $r85
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : r102 = (java.util.Map$Entry) $r85 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r86 = interfaceinvoke r102.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r86 = interfaceinvoke r102.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : r103 = (java.lang.String) $r86
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : r103 = (java.lang.String) $r86 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r87 = interfaceinvoke r102.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r87 = interfaceinvoke r102.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : r104 = (java.lang.String) $r87
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : r104 = (java.lang.String) $r87 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if r104 == null
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if r104 == null >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if z27 != 0
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if z27 != 0 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $z29 = staticinvoke <org.apache.ambari.server.utils.SecretReference: boolean isSecret(java.lang.String)>(r104)
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $z29 = staticinvoke <org.apache.ambari.server.utils.SecretReference: boolean isSecret(java.lang.String)>(r104) >>>>>>>> org.apache.ambari.server.utils.SecretReference.isSecret : r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")
org.apache.ambari.server.utils.SecretReference.isSecret : r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":") >>>>>>>> org.apache.ambari.server.utils.SecretReference.isSecret : $i0 = lengthof r1
org.apache.ambari.server.utils.SecretReference.isSecret : $i0 = lengthof r1 >>>>>>>> org.apache.ambari.server.utils.SecretReference.isSecret : if $i0 != 4
org.apache.ambari.server.utils.SecretReference.isSecret : if $i0 != 4 >>>>>>>> org.apache.ambari.server.utils.SecretReference.isSecret : $z1 = 0
org.apache.ambari.server.utils.SecretReference.isSecret : $z1 = 0 >>>>>>>> org.apache.ambari.server.utils.SecretReference.isSecret : return $z1
org.apache.ambari.server.utils.SecretReference.isSecret : return $z1 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $z29 == 0
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $z29 == 0 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : goto [?= $z22 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : goto [?= $z22 = interfaceinvoke r101.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : goto [?= $z21 = interfaceinvoke r98.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : goto [?= $z21 = interfaceinvoke r98.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if z28 == 0
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if z28 == 0 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r7 = r0.<org.apache.ambari.server.topology.BlueprintValidatorImpl: org.apache.ambari.server.topology.Blueprint blueprint>
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r7 = r0.<org.apache.ambari.server.topology.BlueprintValidatorImpl: org.apache.ambari.server.topology.Blueprint blueprint> >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r8 = interfaceinvoke $r7.<org.apache.ambari.server.topology.Blueprint: java.util.Map getHostGroups()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r8 = interfaceinvoke $r7.<org.apache.ambari.server.topology.Blueprint: java.util.Map getHostGroups()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : r105 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : r105 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $z30 = interfaceinvoke r105.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $z30 = interfaceinvoke r105.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $z30 == 0
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $z30 == 0 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r10 = interfaceinvoke r105.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r10 = interfaceinvoke r105.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : r106 = (org.apache.ambari.server.topology.HostGroup) $r10
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : r106 = (org.apache.ambari.server.topology.HostGroup) $r10 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r11 = new java.util.HashSet
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r11 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : specialinvoke $r11.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : specialinvoke $r11.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r12 = new java.util.HashMap
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r12 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : specialinvoke $r12.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : specialinvoke $r12.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r13 = new java.util.HashMap
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r13 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : specialinvoke $r13.<java.util.HashMap: void <init>(java.util.Map)>(r1)
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : specialinvoke $r13.<java.util.HashMap: void <init>(java.util.Map)>(r1) >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r14 = interfaceinvoke r106.<org.apache.ambari.server.topology.HostGroup: org.apache.ambari.server.topology.Configuration getConfiguration()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r14 = interfaceinvoke r106.<org.apache.ambari.server.topology.HostGroup: org.apache.ambari.server.topology.Configuration getConfiguration()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r15 = virtualinvoke $r14.<org.apache.ambari.server.topology.Configuration: java.util.Map getProperties()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r15 = virtualinvoke $r14.<org.apache.ambari.server.topology.Configuration: java.util.Map getProperties()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : interfaceinvoke $r13.<java.util.Map: void putAll(java.util.Map)>($r15)
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : interfaceinvoke $r13.<java.util.Map: void putAll(java.util.Map)>($r15) >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r16 = interfaceinvoke r106.<org.apache.ambari.server.topology.HostGroup: java.util.Collection getComponentNames()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r16 = interfaceinvoke r106.<org.apache.ambari.server.topology.HostGroup: java.util.Collection getComponentNames()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : r110 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : r110 = interfaceinvoke $r16.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $z0 = interfaceinvoke r110.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $z0 = interfaceinvoke r110.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $z0 == 0
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $z0 == 0 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r17 = interfaceinvoke r110.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r17 = interfaceinvoke r110.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : r111 = (java.lang.String) $r17
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : r111 = (java.lang.String) $r17 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $z1 = virtualinvoke r111.<java.lang.String: boolean equals(java.lang.Object)>("MYSQL_SERVER")
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $z1 = virtualinvoke r111.<java.lang.String: boolean equals(java.lang.Object)>("MYSQL_SERVER") >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $z1 == 0
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $z1 == 0 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $z31 = staticinvoke <org.apache.ambari.server.topology.ClusterTopologyImpl: boolean isNameNodeHAEnabled(java.util.Map)>(r1)
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $z31 = staticinvoke <org.apache.ambari.server.topology.ClusterTopologyImpl: boolean isNameNodeHAEnabled(java.util.Map)>(r1) >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.isNameNodeHAEnabled : $z0 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>("hdfs-site")
org.apache.ambari.server.topology.ClusterTopologyImpl.isNameNodeHAEnabled : $z0 = interfaceinvoke r0.<java.util.Map: boolean containsKey(java.lang.Object)>("hdfs-site") >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.isNameNodeHAEnabled : if $z0 == 0
org.apache.ambari.server.topology.ClusterTopologyImpl.isNameNodeHAEnabled : if $z0 == 0 >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.isNameNodeHAEnabled : $z3 = 0
org.apache.ambari.server.topology.ClusterTopologyImpl.isNameNodeHAEnabled : $z3 = 0 >>>>>>>> org.apache.ambari.server.topology.ClusterTopologyImpl.isNameNodeHAEnabled : return $z3
org.apache.ambari.server.topology.ClusterTopologyImpl.isNameNodeHAEnabled : return $z3 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $z31 == 0
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $z31 == 0 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $z33 = virtualinvoke r111.<java.lang.String: boolean equals(java.lang.Object)>("HIVE_METASTORE")
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $z33 = virtualinvoke r111.<java.lang.String: boolean equals(java.lang.Object)>("HIVE_METASTORE") >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $z33 == 0
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $z33 == 0 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r27 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("hive-env")
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r27 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("hive-env") >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : r116 = (java.util.Map) $r27
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : r116 = (java.util.Map) $r27 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if r116 == null
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if r116 == null >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $z5 = interfaceinvoke r116.<java.util.Map: boolean isEmpty()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $z5 = interfaceinvoke r116.<java.util.Map: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $z5 != 0
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $z5 != 0 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r28 = interfaceinvoke r116.<java.util.Map: java.lang.Object get(java.lang.Object)>("hive_database")
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r28 = interfaceinvoke r116.<java.util.Map: java.lang.Object get(java.lang.Object)>("hive_database") >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $r28 == null
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $r28 == null >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r29 = interfaceinvoke r116.<java.util.Map: java.lang.Object get(java.lang.Object)>("hive_database")
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r29 = interfaceinvoke r116.<java.util.Map: java.lang.Object get(java.lang.Object)>("hive_database") >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r30 = (java.lang.String) $r29
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r30 = (java.lang.String) $r29 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $z6 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>("Existing SQL Anywhere Database")
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $z6 = virtualinvoke $r30.<java.lang.String: boolean equals(java.lang.Object)>("Existing SQL Anywhere Database") >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $z6 == 0
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $z6 == 0 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r31 = r0.<org.apache.ambari.server.topology.BlueprintValidatorImpl: org.apache.ambari.server.controller.internal.Stack stack>
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r31 = r0.<org.apache.ambari.server.topology.BlueprintValidatorImpl: org.apache.ambari.server.controller.internal.Stack stack> >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r32 = virtualinvoke $r31.<org.apache.ambari.server.controller.internal.Stack: java.lang.String getVersion()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r32 = virtualinvoke $r31.<org.apache.ambari.server.controller.internal.Stack: java.lang.String getVersion()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $i1 = staticinvoke <org.apache.ambari.server.utils.VersionUtils: int compareVersions(java.lang.String,java.lang.String)>($r32, "2.3.0.0")
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $i1 = staticinvoke <org.apache.ambari.server.utils.VersionUtils: int compareVersions(java.lang.String,java.lang.String)>($r32, "2.3.0.0") >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i0 = staticinvoke <org.apache.ambari.server.utils.VersionUtils: int compareVersions(java.lang.String,java.lang.String,int)>(r0, r1, 0)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i0 = staticinvoke <org.apache.ambari.server.utils.VersionUtils: int compareVersions(java.lang.String,java.lang.String,int)>(r0, r1, 0) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if r27 != null
org.apache.ambari.server.utils.VersionUtils.compareVersions : if r27 != null >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if r28 != null
org.apache.ambari.server.utils.VersionUtils.compareVersions : if r28 != null >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : r29 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String trim(java.lang.String)>(r27)
org.apache.ambari.server.utils.VersionUtils.compareVersions : r29 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String trim(java.lang.String)>(r27) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : r30 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String trim(java.lang.String)>(r28)
org.apache.ambari.server.utils.VersionUtils.compareVersions : r30 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String trim(java.lang.String)>(r28) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i1 = virtualinvoke r29.<java.lang.String: int indexOf(int)>(45)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i1 = virtualinvoke r29.<java.lang.String: int indexOf(int)>(45) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if $i1 < 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : if $i1 < 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i2 = virtualinvoke r30.<java.lang.String: int indexOf(int)>(45)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i2 = virtualinvoke r30.<java.lang.String: int indexOf(int)>(45) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if $i2 < 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : if $i2 < 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $z0 = virtualinvoke r29.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $z0 = virtualinvoke r29.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if $z0 == 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : if $z0 == 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $z1 = virtualinvoke r30.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $z1 = virtualinvoke r30.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if $z1 == 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : if $z1 == 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if i0 >= 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : if i0 >= 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r6 = "${ambariVersion}"
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r6 = "${ambariVersion}" >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r7 = virtualinvoke r29.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r7 = virtualinvoke r29.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if $z2 == 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : if $z2 == 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r8 = virtualinvoke r29.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("([0-9]+).([0-9]+).([0-9]+).?([0-9]+)?.*", "$1.$2.$3.$4")
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r8 = virtualinvoke r29.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("([0-9]+).([0-9]+).([0-9]+).?([0-9]+)?.*", "$1.$2.$3.$4") >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : r1 = virtualinvoke $r8.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.")
org.apache.ambari.server.utils.VersionUtils.compareVersions : r1 = virtualinvoke $r8.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.") >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r9 = virtualinvoke r30.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("([0-9]+).([0-9]+).([0-9]+).?([0-9]+)?.*", "$1.$2.$3.$4")
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r9 = virtualinvoke r30.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("([0-9]+).([0-9]+).([0-9]+).?([0-9]+)?.*", "$1.$2.$3.$4") >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : r2 = virtualinvoke $r9.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.")
org.apache.ambari.server.utils.VersionUtils.compareVersions : r2 = virtualinvoke $r9.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.") >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i4 = lengthof r1
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i4 = lengthof r1 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i3 = lengthof r2
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i3 = lengthof r2 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : i15 = staticinvoke <java.lang.Math: int max(int,int)>($i4, $i3)
org.apache.ambari.server.utils.VersionUtils.compareVersions : i15 = staticinvoke <java.lang.Math: int max(int,int)>($i4, $i3) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if i0 == 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : if i0 == 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i16 = i15
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i16 = i15 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= i17 = $i16]
org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= i17 = $i16] >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : i17 = $i16
org.apache.ambari.server.utils.VersionUtils.compareVersions : i17 = $i16 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r10 = new java.util.ArrayList
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r10 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : specialinvoke $r10.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : specialinvoke $r10.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r11 = new java.util.ArrayList
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r11 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : specialinvoke $r11.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : specialinvoke $r11.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : i18 = 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : i18 = 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if i18 >= i17
org.apache.ambari.server.utils.VersionUtils.compareVersions : if i18 >= i17 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i11 = lengthof r1
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i11 = lengthof r1 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if i18 >= $i11
org.apache.ambari.server.utils.VersionUtils.compareVersions : if i18 >= $i11 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r17 = r1[i18]
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r17 = r1[i18] >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i19 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r17)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i19 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r17) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i19)]
org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i19)] >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i19)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i19) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r14)
org.apache.ambari.server.utils.VersionUtils.compareVersions : interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r14) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= $i12 = lengthof r2]
org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= $i12 = lengthof r2] >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i12 = lengthof r2
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i12 = lengthof r2 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if i18 >= $i12
org.apache.ambari.server.utils.VersionUtils.compareVersions : if i18 >= $i12 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r16 = r2[i18]
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r16 = r2[i18] >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i21 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r16)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i21 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r16) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i21)]
org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i21)] >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i21)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i21) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r15)
org.apache.ambari.server.utils.VersionUtils.compareVersions : interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>($r15) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= i18 = i18 + 1]
org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= i18 = i18 + 1] >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : i18 = i18 + 1
org.apache.ambari.server.utils.VersionUtils.compareVersions : i18 = i18 + 1 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= (branch)]
org.apache.ambari.server.utils.VersionUtils.compareVersions : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i19 = 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i19 = 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i5 = interfaceinvoke $r10.<java.util.List: int size()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i5 = interfaceinvoke $r10.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i6 = interfaceinvoke $r11.<java.util.List: int size()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i6 = interfaceinvoke $r11.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : i23 = staticinvoke <java.lang.Math: int max(int,int)>($i5, $i6)
org.apache.ambari.server.utils.VersionUtils.compareVersions : i23 = staticinvoke <java.lang.Math: int max(int,int)>($i5, $i6) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : i24 = 0
org.apache.ambari.server.utils.VersionUtils.compareVersions : i24 = 0 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if i24 >= i23
org.apache.ambari.server.utils.VersionUtils.compareVersions : if i24 >= i23 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r12 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i24)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r12 = interfaceinvoke $r10.<java.util.List: java.lang.Object get(int)>(i24) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : r33 = (java.lang.Integer) $r12
org.apache.ambari.server.utils.VersionUtils.compareVersions : r33 = (java.lang.Integer) $r12 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $r13 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(i24)
org.apache.ambari.server.utils.VersionUtils.compareVersions : $r13 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(i24) >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : r5 = (java.lang.Integer) $r13
org.apache.ambari.server.utils.VersionUtils.compareVersions : r5 = (java.lang.Integer) $r13 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i7 = virtualinvoke r33.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i7 = virtualinvoke r33.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i8 = virtualinvoke r5.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i8 = virtualinvoke r5.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if $i7 >= $i8
org.apache.ambari.server.utils.VersionUtils.compareVersions : if $i7 >= $i8 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i9 = virtualinvoke r33.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i9 = virtualinvoke r33.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : $i10 = virtualinvoke r5.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.utils.VersionUtils.compareVersions : $i10 = virtualinvoke r5.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : if $i9 <= $i10
org.apache.ambari.server.utils.VersionUtils.compareVersions : if $i9 <= $i10 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : i24 = i24 + 1
org.apache.ambari.server.utils.VersionUtils.compareVersions : i24 = i24 + 1 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : return -1
org.apache.ambari.server.utils.VersionUtils.compareVersions : return -1 >>>>>>>> org.apache.ambari.server.utils.VersionUtils.compareVersions : return $i0
org.apache.ambari.server.utils.VersionUtils.compareVersions : return $i0 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $i1 >= 0
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $i1 >= 0 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r33 = r0.<org.apache.ambari.server.topology.BlueprintValidatorImpl: org.apache.ambari.server.controller.internal.Stack stack>
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r33 = r0.<org.apache.ambari.server.topology.BlueprintValidatorImpl: org.apache.ambari.server.controller.internal.Stack stack> >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r34 = virtualinvoke $r33.<org.apache.ambari.server.controller.internal.Stack: java.lang.String getName()>()
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r34 = virtualinvoke $r33.<org.apache.ambari.server.controller.internal.Stack: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $z7 = virtualinvoke $r34.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("HDP")
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $z7 = virtualinvoke $r34.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("HDP") >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $z7 == 0
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : if $z7 == 0 >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r35 = new org.apache.ambari.server.topology.InvalidTopologyException
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : $r35 = new org.apache.ambari.server.topology.InvalidTopologyException >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : specialinvoke $r35.<org.apache.ambari.server.topology.InvalidTopologyException: void <init>(java.lang.String)>("Incorrect configuration: SQL Anywhere db is available only for stack HDP-2.3+ and repo version 2.3.2+!")
org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : specialinvoke $r35.<org.apache.ambari.server.topology.InvalidTopologyException: void <init>(java.lang.String)>("Incorrect configuration: SQL Anywhere db is available only for stack HDP-2.3+ and repo version 2.3.2+!") >>>>>>>> org.apache.ambari.server.topology.BlueprintValidatorImpl.validateRequiredProperties : throw $r35
