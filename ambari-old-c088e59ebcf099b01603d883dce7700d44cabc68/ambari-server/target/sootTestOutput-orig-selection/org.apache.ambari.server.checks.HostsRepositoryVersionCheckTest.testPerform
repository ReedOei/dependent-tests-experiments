org.apache.ambari.server.state.StackId.parseStackIdHelper : if r2 == null >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if $z0 == 0
org.apache.ambari.server.state.StackId.parseStackIdHelper : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45)
org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1
org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i1 = virtualinvoke r2.<java.lang.String: int length()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i1 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i2 = i0 + 1
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i2 = i0 + 1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if $i1 > $i2
org.apache.ambari.server.state.StackId.parseStackIdHelper : if $i1 > $i2 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0)
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = $r8
org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = $r8 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3)
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> = $r9
org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> = $r9 >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.setTargetRepositoryVersion : r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity m_targetRepositoryVersion> = r1
org.apache.ambari.server.controller.PrereqCheckRequest.setTargetRepositoryVersion : r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity m_targetRepositoryVersion> = r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r3 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r3 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName>
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r13 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r13 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: com.google.inject.Provider clustersProvider> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r14 = interfaceinvoke $r13.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r14 = interfaceinvoke $r13.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1: org.apache.ambari.server.state.Clusters get()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1: org.apache.ambari.server.state.Clusters get()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1: org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest this$0>
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1: org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest this$0> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1.get : $r2 = staticinvoke <org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.state.Clusters access$000(org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest)>($r1)
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1.get : $r2 = staticinvoke <org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.state.Clusters access$000(org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest)>($r1) >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.state.Clusters clusters>
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.state.Clusters clusters> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$000 : return $r1
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$000 : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1.get : return $r2
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1.get : return $r2 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1.get : return $r1
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$1.get : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r15 = (org.apache.ambari.server.state.Clusters) $r14
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r15 = (org.apache.ambari.server.state.Clusters) $r14 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r4 = interfaceinvoke $r15.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r3)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r4 = interfaceinvoke $r15.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r16 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r16 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: com.google.inject.Provider clustersProvider> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r17 = interfaceinvoke $r16.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r17 = interfaceinvoke $r16.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r18 = (org.apache.ambari.server.state.Clusters) $r17
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r18 = (org.apache.ambari.server.state.Clusters) $r17 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r5 = interfaceinvoke $r18.<org.apache.ambari.server.state.Clusters: java.util.Map getHostsForCluster(java.lang.String)>(r3)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r5 = interfaceinvoke $r18.<org.apache.ambari.server.state.Clusters: java.util.Map getHostsForCluster(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r19 = interfaceinvoke r5.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r19 = interfaceinvoke r5.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r6 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r6 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if $z3 == 0
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if $z3 == 0 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r23 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r23 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r7 = (org.apache.ambari.server.state.Host) $r23
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r7 = (org.apache.ambari.server.state.Host) $r23 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $l0 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: long getClusterId()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $l0 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: long getClusterId()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r8 = interfaceinvoke r7.<org.apache.ambari.server.state.Host: org.apache.ambari.server.state.MaintenanceState getMaintenanceState(long)>($l0)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r8 = interfaceinvoke r7.<org.apache.ambari.server.state.Host: org.apache.ambari.server.state.MaintenanceState getMaintenanceState(long)>($l0) >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r24 = <org.apache.ambari.server.state.MaintenanceState: org.apache.ambari.server.state.MaintenanceState OFF>
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r24 = <org.apache.ambari.server.state.MaintenanceState: org.apache.ambari.server.state.MaintenanceState OFF> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if r8 == $r24
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if r8 == $r24 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r9 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r9 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity m_targetRepositoryVersion>
org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity m_targetRepositoryVersion> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r10 = virtualinvoke r9.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.state.StackId getStackId()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r10 = virtualinvoke r9.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.state.StackId getStackId()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r25 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: com.google.inject.Provider hostVersionDaoProvider>
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r25 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: com.google.inject.Provider hostVersionDaoProvider> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r26 = interfaceinvoke $r25.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r26 = interfaceinvoke $r25.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3: org.apache.ambari.server.orm.dao.HostVersionDAO get()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3: org.apache.ambari.server.orm.dao.HostVersionDAO get()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3.get : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3: org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest this$0>
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3.get : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3: org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest this$0> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3.get : $r2 = staticinvoke <org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.orm.dao.HostVersionDAO access$200(org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest)>($r1)
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3.get : $r2 = staticinvoke <org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.orm.dao.HostVersionDAO access$200(org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest)>($r1) >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$200 : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.orm.dao.HostVersionDAO hostVersionDAO>
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$200 : $r1 = r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest: org.apache.ambari.server.orm.dao.HostVersionDAO hostVersionDAO> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$200 : return $r1
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest.access$200 : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3.get : return $r2
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3.get : return $r2 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3.get : return $r1
org.apache.ambari.server.checks.HostsRepositoryVersionCheckTest$3.get : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r27 = (org.apache.ambari.server.orm.dao.HostVersionDAO) $r26
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r27 = (org.apache.ambari.server.orm.dao.HostVersionDAO) $r26 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r28 = virtualinvoke r9.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String getVersion()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r28 = virtualinvoke r9.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String getVersion()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r29 = interfaceinvoke r7.<org.apache.ambari.server.state.Host: java.lang.String getHostName()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r29 = interfaceinvoke r7.<org.apache.ambari.server.state.Host: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r11 = virtualinvoke $r27.<org.apache.ambari.server.orm.dao.HostVersionDAO: org.apache.ambari.server.orm.entities.HostVersionEntity findByClusterStackVersionAndHost(java.lang.String,org.apache.ambari.server.state.StackId,java.lang.String,java.lang.String)>(r3, r10, $r28, $r29)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r11 = virtualinvoke $r27.<org.apache.ambari.server.orm.dao.HostVersionDAO: org.apache.ambari.server.orm.entities.HostVersionEntity findByClusterStackVersionAndHost(java.lang.String,org.apache.ambari.server.state.StackId,java.lang.String,java.lang.String)>(r3, r10, $r28, $r29) >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r31 = <org.apache.ambari.server.state.RepositoryVersionState: org.apache.ambari.server.state.RepositoryVersionState INSTALLED>
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r31 = <org.apache.ambari.server.state.RepositoryVersionState: org.apache.ambari.server.state.RepositoryVersionState INSTALLED> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r30 = <org.apache.ambari.server.state.RepositoryVersionState: org.apache.ambari.server.state.RepositoryVersionState NOT_REQUIRED>
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r30 = <org.apache.ambari.server.state.RepositoryVersionState: org.apache.ambari.server.state.RepositoryVersionState NOT_REQUIRED> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r12 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>($r31, $r30)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : r12 = staticinvoke <java.util.EnumSet: java.util.EnumSet of(java.lang.Enum,java.lang.Enum)>($r31, $r30) >>>>>>>> org.apache.ambari.server.state.RepositoryVersionState.values : $r0 = <org.apache.ambari.server.state.RepositoryVersionState: org.apache.ambari.server.state.RepositoryVersionState[] $VALUES>
org.apache.ambari.server.state.RepositoryVersionState.values : $r0 = <org.apache.ambari.server.state.RepositoryVersionState: org.apache.ambari.server.state.RepositoryVersionState[] $VALUES> >>>>>>>> org.apache.ambari.server.state.RepositoryVersionState.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
org.apache.ambari.server.state.RepositoryVersionState.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.ambari.server.state.RepositoryVersionState.values : $r2 = (org.apache.ambari.server.state.RepositoryVersionState[]) $r1
org.apache.ambari.server.state.RepositoryVersionState.values : $r2 = (org.apache.ambari.server.state.RepositoryVersionState[]) $r1 >>>>>>>> org.apache.ambari.server.state.RepositoryVersionState.values : return $r2
org.apache.ambari.server.state.RepositoryVersionState.values : return $r2 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if r11 == null
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if r11 == null >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r32 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r32 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>() >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet m_failedOn>
org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet m_failedOn> >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : return $r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r33 = interfaceinvoke r7.<org.apache.ambari.server.state.Host: java.lang.String getHostName()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r33 = interfaceinvoke r7.<org.apache.ambari.server.state.Host: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : virtualinvoke $r32.<java.util.LinkedHashSet: boolean add(java.lang.Object)>($r33)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : virtualinvoke $r32.<java.util.LinkedHashSet: boolean add(java.lang.Object)>($r33) >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : goto [?= $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : goto [?= $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r20 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r20 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $z0 = virtualinvoke $r20.<java.util.LinkedHashSet: boolean isEmpty()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $z0 = virtualinvoke $r20.<java.util.LinkedHashSet: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if $z0 != 0
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if $z0 != 0 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r21 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus FAIL>
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r21 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus FAIL> >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setStatus(org.apache.ambari.server.state.stack.PrereqCheckStatus)>($r21)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setStatus(org.apache.ambari.server.state.stack.PrereqCheckStatus)>($r21) >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.setStatus : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> = r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.setStatus : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> = r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r22 = virtualinvoke r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: java.lang.String getFailReason(org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>(r1, r2)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r22 = virtualinvoke r0.<org.apache.ambari.server.checks.HostsRepositoryVersionCheck: java.lang.String getFailReason(org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>(r1, r2) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r3 = virtualinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("default", r1, r2)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r3 = virtualinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("default", r1, r2) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r12 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription m_description>
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r12 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription m_description> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r32 = virtualinvoke $r12.<org.apache.ambari.server.checks.CheckDescription: java.lang.String getFail(java.lang.String)>(r1)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r32 = virtualinvoke $r12.<org.apache.ambari.server.checks.CheckDescription: java.lang.String getFail(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r2 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails>
org.apache.ambari.server.checks.CheckDescription.getFail : $r2 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails> >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.ambari.server.checks.CheckDescription.getFail : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : if $z0 == 0
org.apache.ambari.server.checks.CheckDescription.getFail : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r3 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails>
org.apache.ambari.server.checks.CheckDescription.getFail : $r3 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails> >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.ambari.server.checks.CheckDescription.getFail : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r5 = (java.lang.String) $r4
org.apache.ambari.server.checks.CheckDescription.getFail : $r5 = (java.lang.String) $r4 >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : goto [?= return $r5]
org.apache.ambari.server.checks.CheckDescription.getFail : goto [?= return $r5] >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : return $r5
org.apache.ambari.server.checks.CheckDescription.getFail : return $r5 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r4 = virtualinvoke r3.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r4 = virtualinvoke r3.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z0 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{version}}")
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z0 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{version}}") >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z0 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if null == r4
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if null == r4 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r31 = virtualinvoke r4.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String getVersion()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r31 = virtualinvoke r4.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String getVersion()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r32 = virtualinvoke r32.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("{{version}}", $r31)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r32 = virtualinvoke r32.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("{{version}}", $r31) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z5 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{fails}}")
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z5 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{fails}}") >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z5 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z5 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r33 = virtualinvoke r2.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r33 = virtualinvoke r2.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r13 = virtualinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription getDescription()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r13 = virtualinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription getDescription()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getDescription : $r1 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription m_description>
org.apache.ambari.server.checks.AbstractCheckDescriptor.getDescription : $r1 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription m_description> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getDescription : return $r1
org.apache.ambari.server.checks.AbstractCheckDescriptor.getDescription : return $r1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r14 = virtualinvoke $r13.<org.apache.ambari.server.checks.CheckDescription: org.apache.ambari.server.state.stack.PrereqCheckType getType()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r14 = virtualinvoke $r13.<org.apache.ambari.server.checks.CheckDescription: org.apache.ambari.server.state.stack.PrereqCheckType getType()>() >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getType : $r1 = r0.<org.apache.ambari.server.checks.CheckDescription: org.apache.ambari.server.state.stack.PrereqCheckType m_type>
org.apache.ambari.server.checks.CheckDescription.getType : $r1 = r0.<org.apache.ambari.server.checks.CheckDescription: org.apache.ambari.server.state.stack.PrereqCheckType m_type> >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getType : return $r1
org.apache.ambari.server.checks.CheckDescription.getType : return $r1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r15 = <org.apache.ambari.server.state.stack.PrereqCheckType: org.apache.ambari.server.state.stack.PrereqCheckType SERVICE>
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r15 = <org.apache.ambari.server.state.stack.PrereqCheckType: org.apache.ambari.server.state.stack.PrereqCheckType SERVICE> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $r14 != $r15
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $r14 != $r15 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r16 = virtualinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.lang.String formatEntityList(java.util.LinkedHashSet)>(r33)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r16 = virtualinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.lang.String formatEntityList(java.util.LinkedHashSet)>(r33) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : if r1 == null
org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : if r1 == null >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : $z0 = virtualinvoke r1.<java.util.LinkedHashSet: boolean isEmpty()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : $z0 = virtualinvoke r1.<java.util.LinkedHashSet: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : if $z0 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : $r3 = new java.lang.StringBuilder
org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : $r4 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,java.lang.String)>(r1, ", ")
org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : $r4 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,java.lang.String)>(r1, ", ") >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4)
org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : $i0 = virtualinvoke r1.<java.util.LinkedHashSet: int size()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : $i0 = virtualinvoke r1.<java.util.LinkedHashSet: int size()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : if $i0 <= 1
org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : if $i0 <= 1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : return $r5
org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : return $r5 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r32 = virtualinvoke r32.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("{{fails}}", $r16)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r32 = virtualinvoke r32.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("{{fails}}", $r16) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : return r32
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : return r32 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : return $r3
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : return $r3 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailReason(java.lang.String)>($r22)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailReason(java.lang.String)>($r22) >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.setFailReason : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.lang.String m_failReason> = r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.setFailReason : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.lang.String m_failReason> = r1 >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status>
org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : return $r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : return $r1 >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity.setStackName : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_set_stackName(java.lang.String)>(r1)
org.apache.ambari.server.orm.entities.StackEntity.setStackName : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_set_stackName(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackName : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_checkFetchedForSet(java.lang.String)>("stackName")
org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackName : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_checkFetchedForSet(java.lang.String)>("stackName") >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_checkFetchedForSet : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1)
org.apache.ambari.server.orm.entities.StackEntity._persistence_checkFetchedForSet : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_isAttributeFetched : $r2 = r0.<org.apache.ambari.server.orm.entities.StackEntity: org.eclipse.persistence.queries.FetchGroup _persistence_fetchGroup>
org.apache.ambari.server.orm.entities.StackEntity._persistence_isAttributeFetched : $r2 = r0.<org.apache.ambari.server.orm.entities.StackEntity: org.eclipse.persistence.queries.FetchGroup _persistence_fetchGroup> >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_isAttributeFetched : if $r2 == null
org.apache.ambari.server.orm.entities.StackEntity._persistence_isAttributeFetched : if $r2 == null >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_isAttributeFetched : $z1 = 1
org.apache.ambari.server.orm.entities.StackEntity._persistence_isAttributeFetched : $z1 = 1 >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_isAttributeFetched : goto [?= return $z1]
org.apache.ambari.server.orm.entities.StackEntity._persistence_isAttributeFetched : goto [?= return $z1] >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_isAttributeFetched : return $z1
org.apache.ambari.server.orm.entities.StackEntity._persistence_isAttributeFetched : return $z1 >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_checkFetchedForSet : if $z0 != 0
org.apache.ambari.server.orm.entities.StackEntity._persistence_checkFetchedForSet : if $z0 != 0 >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackName : $r2 = r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String stackName>
org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackName : $r2 = r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String stackName> >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackName : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_propertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("stackName", $r2, r1)
org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackName : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_propertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("stackName", $r2, r1) >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_propertyChange : $r4 = r0.<org.apache.ambari.server.orm.entities.StackEntity: java.beans.PropertyChangeListener _persistence_listener>
org.apache.ambari.server.orm.entities.StackEntity._persistence_propertyChange : $r4 = r0.<org.apache.ambari.server.orm.entities.StackEntity: java.beans.PropertyChangeListener _persistence_listener> >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_propertyChange : if $r4 == null
org.apache.ambari.server.orm.entities.StackEntity._persistence_propertyChange : if $r4 == null >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackName : r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String stackName> = r1
org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackName : r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String stackName> = r1 >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity.setStackVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_set_stackVersion(java.lang.String)>(r1)
org.apache.ambari.server.orm.entities.StackEntity.setStackVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_set_stackVersion(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_checkFetchedForSet(java.lang.String)>("stackVersion")
org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_checkFetchedForSet(java.lang.String)>("stackVersion") >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackVersion : $r2 = r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String stackVersion>
org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackVersion : $r2 = r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String stackVersion> >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_propertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("stackVersion", $r2, r1)
org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_propertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("stackVersion", $r2, r1) >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackVersion : r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String stackVersion> = r1
org.apache.ambari.server.orm.entities.StackEntity._persistence_set_stackVersion : r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String stackVersion> = r1 >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity.setStack : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_set_stack(org.apache.ambari.server.orm.entities.StackEntity)>(r1)
org.apache.ambari.server.orm.entities.RepositoryVersionEntity.setStack : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_set_stack(org.apache.ambari.server.orm.entities.StackEntity)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_set_stack : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_checkFetchedForSet(java.lang.String)>("stack")
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_set_stack : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_checkFetchedForSet(java.lang.String)>("stack") >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_checkFetchedForSet : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1)
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_checkFetchedForSet : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : $r2 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.eclipse.persistence.queries.FetchGroup _persistence_fetchGroup>
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : $r2 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.eclipse.persistence.queries.FetchGroup _persistence_fetchGroup> >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : if $r2 == null
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : if $r2 == null >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : $z1 = 1
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : $z1 = 1 >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : goto [?= return $z1]
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : goto [?= return $z1] >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : return $z1
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_isAttributeFetched : return $z1 >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_checkFetchedForSet : if $z0 != 0
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_checkFetchedForSet : if $z0 != 0 >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_set_stack : $r2 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.orm.entities.StackEntity stack>
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_set_stack : $r2 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.orm.entities.StackEntity stack> >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_set_stack : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_propertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("stack", $r2, r1)
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_set_stack : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_propertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("stack", $r2, r1) >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_propertyChange : $r4 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.beans.PropertyChangeListener _persistence_listener>
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_propertyChange : $r4 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.beans.PropertyChangeListener _persistence_listener> >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_propertyChange : if $r4 == null
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_propertyChange : if $r4 == null >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_set_stack : r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.orm.entities.StackEntity stack> = r1
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_set_stack : r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.orm.entities.StackEntity stack> = r1 >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity.setState : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_set_state(org.apache.ambari.server.state.RepositoryVersionState)>(r1)
org.apache.ambari.server.orm.entities.HostVersionEntity.setState : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_set_state(org.apache.ambari.server.state.RepositoryVersionState)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_state : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_checkFetchedForSet(java.lang.String)>("state")
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_state : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_checkFetchedForSet(java.lang.String)>("state") >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_checkFetchedForSet : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1)
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_checkFetchedForSet : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : $r2 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.eclipse.persistence.queries.FetchGroup _persistence_fetchGroup>
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : $r2 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.eclipse.persistence.queries.FetchGroup _persistence_fetchGroup> >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : if $r2 == null
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : if $r2 == null >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : $z1 = 1
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : $z1 = 1 >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : goto [?= return $z1]
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : goto [?= return $z1] >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : return $z1
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_isAttributeFetched : return $z1 >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_checkFetchedForSet : if $z0 != 0
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_checkFetchedForSet : if $z0 != 0 >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_state : $r2 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState state>
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_state : $r2 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState state> >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_state : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_propertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("state", $r2, r1)
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_state : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_propertyChange(java.lang.String,java.lang.Object,java.lang.Object)>("state", $r2, r1) >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_propertyChange : $r4 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: java.beans.PropertyChangeListener _persistence_listener>
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_propertyChange : $r4 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: java.beans.PropertyChangeListener _persistence_listener> >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_propertyChange : if $r4 == null
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_propertyChange : if $r4 == null >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_state : r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState state> = r1
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_set_state : r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState state> = r1 >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getStackId : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.orm.entities.StackEntity _persistence_get_stack()>()
org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getStackId : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.orm.entities.StackEntity _persistence_get_stack()>() >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_stack : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_checkFetched(java.lang.String)>("stack")
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_stack : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_checkFetched(java.lang.String)>("stack") >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_checkFetched : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1)
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_checkFetched : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_checkFetched : if $z0 != 0
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_checkFetched : if $z0 != 0 >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_stack : $r1 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.orm.entities.StackEntity stack>
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_stack : $r1 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.orm.entities.StackEntity stack> >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_stack : return $r1
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_stack : return $r1 >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getStackId : if null != $r1
org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getStackId : if null != $r1 >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getStackId : $r2 = new org.apache.ambari.server.state.StackId
org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getStackId : $r2 = new org.apache.ambari.server.state.StackId >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getStackId : $r3 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.orm.entities.StackEntity _persistence_get_stack()>()
org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getStackId : $r3 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.orm.entities.StackEntity _persistence_get_stack()>() >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getStackId : $r4 = virtualinvoke $r3.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String getStackName()>()
org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getStackId : $r4 = virtualinvoke $r3.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String getStackName()>() >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity.getStackName : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String _persistence_get_stackName()>()
org.apache.ambari.server.orm.entities.StackEntity.getStackName : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String _persistence_get_stackName()>() >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_get_stackName : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_checkFetched(java.lang.String)>("stackName")
org.apache.ambari.server.orm.entities.StackEntity._persistence_get_stackName : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_checkFetched(java.lang.String)>("stackName") >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_checkFetched : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1)
org.apache.ambari.server.orm.entities.StackEntity._persistence_checkFetched : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_checkFetched : if $z0 != 0
org.apache.ambari.server.orm.entities.StackEntity._persistence_checkFetched : if $z0 != 0 >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_get_stackName : $r1 = r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String stackName>
org.apache.ambari.server.orm.entities.StackEntity._persistence_get_stackName : $r1 = r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String stackName> >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_get_stackName : return $r1
org.apache.ambari.server.orm.entities.StackEntity._persistence_get_stackName : return $r1 >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity.getStackName : return $r1
org.apache.ambari.server.orm.entities.StackEntity.getStackName : return $r1 >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getStackId : $r5 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.orm.entities.StackEntity _persistence_get_stack()>()
org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getStackId : $r5 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.orm.entities.StackEntity _persistence_get_stack()>() >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getStackId : $r6 = virtualinvoke $r5.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String getStackVersion()>()
org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getStackId : $r6 = virtualinvoke $r5.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String getStackVersion()>() >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity.getStackVersion : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String _persistence_get_stackVersion()>()
org.apache.ambari.server.orm.entities.StackEntity.getStackVersion : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String _persistence_get_stackVersion()>() >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_get_stackVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_checkFetched(java.lang.String)>("stackVersion")
org.apache.ambari.server.orm.entities.StackEntity._persistence_get_stackVersion : virtualinvoke r0.<org.apache.ambari.server.orm.entities.StackEntity: void _persistence_checkFetched(java.lang.String)>("stackVersion") >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_get_stackVersion : $r1 = r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String stackVersion>
org.apache.ambari.server.orm.entities.StackEntity._persistence_get_stackVersion : $r1 = r0.<org.apache.ambari.server.orm.entities.StackEntity: java.lang.String stackVersion> >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity._persistence_get_stackVersion : return $r1
org.apache.ambari.server.orm.entities.StackEntity._persistence_get_stackVersion : return $r1 >>>>>>>> org.apache.ambari.server.orm.entities.StackEntity.getStackVersion : return $r1
org.apache.ambari.server.orm.entities.StackEntity.getStackVersion : return $r1 >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getStackId : specialinvoke $r2.<org.apache.ambari.server.state.StackId: void <init>(java.lang.String,java.lang.String)>($r4, $r6)
org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getStackId : specialinvoke $r2.<org.apache.ambari.server.state.StackId: void <init>(java.lang.String,java.lang.String)>($r4, $r6) >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getStackId : return $r2
org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getStackId : return $r2 >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getVersion : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String _persistence_get_version()>()
org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getVersion : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String _persistence_get_version()>() >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_version : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_checkFetched(java.lang.String)>("version")
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_version : virtualinvoke r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: void _persistence_checkFetched(java.lang.String)>("version") >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_version : $r1 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String version>
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_version : $r1 = r0.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String version> >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_version : return $r1
org.apache.ambari.server.orm.entities.RepositoryVersionEntity._persistence_get_version : return $r1 >>>>>>>> org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getVersion : return $r1
org.apache.ambari.server.orm.entities.RepositoryVersionEntity.getVersion : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r34 = virtualinvoke r11.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState getState()>()
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $r34 = virtualinvoke r11.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState getState()>() >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity.getState : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState _persistence_get_state()>()
org.apache.ambari.server.orm.entities.HostVersionEntity.getState : $r1 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState _persistence_get_state()>() >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_get_state : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_checkFetched(java.lang.String)>("state")
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_get_state : virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: void _persistence_checkFetched(java.lang.String)>("state") >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_checkFetched : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1)
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_checkFetched : $z0 = virtualinvoke r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: boolean _persistence_isAttributeFetched(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_checkFetched : if $z0 != 0
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_checkFetched : if $z0 != 0 >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_get_state : $r1 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState state>
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_get_state : $r1 = r0.<org.apache.ambari.server.orm.entities.HostVersionEntity: org.apache.ambari.server.state.RepositoryVersionState state> >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_get_state : return $r1
org.apache.ambari.server.orm.entities.HostVersionEntity._persistence_get_state : return $r1 >>>>>>>> org.apache.ambari.server.orm.entities.HostVersionEntity.getState : return $r1
org.apache.ambari.server.orm.entities.HostVersionEntity.getState : return $r1 >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $z2 = interfaceinvoke r12.<java.util.Set: boolean contains(java.lang.Object)>($r34)
org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : $z2 = interfaceinvoke r12.<java.util.Set: boolean contains(java.lang.Object)>($r34) >>>>>>>> org.apache.ambari.server.checks.HostsRepositoryVersionCheck.perform : if $z2 != 0
