org.apache.ambari.server.topology.HostGroupInfo.getRequestedHostCount : $r3 = r0.<org.apache.ambari.server.topology.HostGroupInfo: java.util.Collection hostNames> >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.getRequestedHostCount : entermonitor $r3
org.apache.ambari.server.topology.HostGroupInfo.getRequestedHostCount : entermonitor $r3 >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.getRequestedHostCount : $i0 = r0.<org.apache.ambari.server.topology.HostGroupInfo: int requested_count>
org.apache.ambari.server.topology.HostGroupInfo.getRequestedHostCount : $i0 = r0.<org.apache.ambari.server.topology.HostGroupInfo: int requested_count> >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.getRequestedHostCount : if $i0 != 0
org.apache.ambari.server.topology.HostGroupInfo.getRequestedHostCount : if $i0 != 0 >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.getRequestedHostCount : $r4 = r0.<org.apache.ambari.server.topology.HostGroupInfo: java.util.Collection hostNames>
org.apache.ambari.server.topology.HostGroupInfo.getRequestedHostCount : $r4 = r0.<org.apache.ambari.server.topology.HostGroupInfo: java.util.Collection hostNames> >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.getRequestedHostCount : $i1 = interfaceinvoke $r4.<java.util.Collection: int size()>()
org.apache.ambari.server.topology.HostGroupInfo.getRequestedHostCount : $i1 = interfaceinvoke $r4.<java.util.Collection: int size()>() >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.getRequestedHostCount : goto [?= exitmonitor $r3]
org.apache.ambari.server.topology.HostGroupInfo.getRequestedHostCount : goto [?= exitmonitor $r3] >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.getRequestedHostCount : exitmonitor $r3
org.apache.ambari.server.topology.HostGroupInfo.getRequestedHostCount : exitmonitor $r3 >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.getRequestedHostCount : return $i1
org.apache.ambari.server.topology.HostGroupInfo.getRequestedHostCount : return $i1 >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.addHosts : $r6 = r0.<org.apache.ambari.server.topology.HostGroupInfo: java.util.Collection hostNames>
org.apache.ambari.server.topology.HostGroupInfo.addHosts : $r6 = r0.<org.apache.ambari.server.topology.HostGroupInfo: java.util.Collection hostNames> >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.addHosts : entermonitor $r6
org.apache.ambari.server.topology.HostGroupInfo.addHosts : entermonitor $r6 >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.addHosts : r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.topology.HostGroupInfo.addHosts : r3 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.addHosts : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.HostGroupInfo.addHosts : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.addHosts : if $z0 == 0
org.apache.ambari.server.topology.HostGroupInfo.addHosts : if $z0 == 0 >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.addHosts : $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.topology.HostGroupInfo.addHosts : $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.addHosts : r4 = (java.lang.String) $r7
org.apache.ambari.server.topology.HostGroupInfo.addHosts : r4 = (java.lang.String) $r7 >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.addHosts : virtualinvoke r0.<org.apache.ambari.server.topology.HostGroupInfo: void addHost(java.lang.String)>(r4)
org.apache.ambari.server.topology.HostGroupInfo.addHosts : virtualinvoke r0.<org.apache.ambari.server.topology.HostGroupInfo: void addHost(java.lang.String)>(r4) >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.addHost : $r5 = r0.<org.apache.ambari.server.topology.HostGroupInfo: java.util.Collection hostNames>
org.apache.ambari.server.topology.HostGroupInfo.addHost : $r5 = r0.<org.apache.ambari.server.topology.HostGroupInfo: java.util.Collection hostNames> >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.addHost : entermonitor $r5
org.apache.ambari.server.topology.HostGroupInfo.addHost : entermonitor $r5 >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.addHost : r3 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>()
org.apache.ambari.server.topology.HostGroupInfo.addHost : r3 = virtualinvoke r1.<java.lang.String: java.lang.String toLowerCase()>() >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.addHost : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r3)
org.apache.ambari.server.topology.HostGroupInfo.addHost : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r3) >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.addHost : if $z0 != 0
org.apache.ambari.server.topology.HostGroupInfo.addHost : if $z0 != 0 >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.addHost : $r6 = r0.<org.apache.ambari.server.topology.HostGroupInfo: java.util.Collection hostNames>
org.apache.ambari.server.topology.HostGroupInfo.addHost : $r6 = r0.<org.apache.ambari.server.topology.HostGroupInfo: java.util.Collection hostNames> >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.addHost : interfaceinvoke $r6.<java.util.Collection: boolean add(java.lang.Object)>(r3)
org.apache.ambari.server.topology.HostGroupInfo.addHost : interfaceinvoke $r6.<java.util.Collection: boolean add(java.lang.Object)>(r3) >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.addHost : exitmonitor $r5
org.apache.ambari.server.topology.HostGroupInfo.addHost : exitmonitor $r5 >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.addHost : goto [?= return]
org.apache.ambari.server.topology.HostGroupInfo.addHost : goto [?= return] >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.addHosts : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.topology.HostGroupInfo.addHosts : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.addHosts : exitmonitor $r6
org.apache.ambari.server.topology.HostGroupInfo.addHosts : exitmonitor $r6 >>>>>>>> org.apache.ambari.server.topology.HostGroupInfo.addHosts : goto [?= return]
