org.apache.ambari.server.controller.spi.Resource$Type.equals : if r0 != r1 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : if r1 == null
org.apache.ambari.server.controller.spi.Resource$Type.equals : if r1 == null >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
org.apache.ambari.server.controller.spi.Resource$Type.equals : $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
org.apache.ambari.server.controller.spi.Resource$Type.equals : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : if $r3 == $r4
org.apache.ambari.server.controller.spi.Resource$Type.equals : if $r3 == $r4 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : r2 = (org.apache.ambari.server.controller.spi.Resource$Type) r1
org.apache.ambari.server.controller.spi.Resource$Type.equals : r2 = (org.apache.ambari.server.controller.spi.Resource$Type) r1 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : $i1 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal>
org.apache.ambari.server.controller.spi.Resource$Type.equals : $i1 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal> >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : $i0 = r2.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal>
org.apache.ambari.server.controller.spi.Resource$Type.equals : $i0 = r2.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal> >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : if $i1 != $i0
org.apache.ambari.server.controller.spi.Resource$Type.equals : if $i1 != $i0 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : $z1 = 0
org.apache.ambari.server.controller.spi.Resource$Type.equals : $z1 = 0 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : return $z1
org.apache.ambari.server.controller.spi.Resource$Type.equals : return $z1 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.setKeyValueMap : $r2 = r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map keyValueMap>
org.apache.ambari.server.api.query.QueryImpl.setKeyValueMap : $r2 = r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map keyValueMap> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.setKeyValueMap : interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r1)
org.apache.ambari.server.api.query.QueryImpl.setKeyValueMap : interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r1) >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.setRenderer : r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.api.query.render.Renderer renderer> = r1
org.apache.ambari.server.api.query.QueryImpl.setRenderer : r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.api.query.render.Renderer renderer> = r1 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.setRenderer : $r2 = r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.controller.spi.ClusterController clusterController>
org.apache.ambari.server.api.query.QueryImpl.setRenderer : $r2 = r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.controller.spi.ClusterController clusterController> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.setRenderer : interfaceinvoke r1.<org.apache.ambari.server.api.query.render.Renderer: void init(org.apache.ambari.server.controller.spi.SchemaFactory)>($r2)
org.apache.ambari.server.api.query.QueryImpl.setRenderer : interfaceinvoke r1.<org.apache.ambari.server.api.query.render.Renderer: void init(org.apache.ambari.server.controller.spi.SchemaFactory)>($r2) >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : $r9 = r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map availableSubResources>
org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : $r9 = r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map availableSubResources> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : if $r9 != null
org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : if $r9 != null >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : $r11 = new java.util.HashMap
org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : $r11 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : specialinvoke $r11.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : specialinvoke $r11.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map availableSubResources> = $r11
org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map availableSubResources> = $r11 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : $r12 = virtualinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.api.resources.ResourceDefinition getResourceDefinition()>()
org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : $r12 = virtualinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.api.resources.ResourceDefinition getResourceDefinition()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.getResourceDefinition : $r1 = r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition>
org.apache.ambari.server.api.query.QueryImpl.getResourceDefinition : $r1 = r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.getResourceDefinition : return $r1
org.apache.ambari.server.api.query.QueryImpl.getResourceDefinition : return $r1 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : r1 = interfaceinvoke $r12.<org.apache.ambari.server.api.resources.ResourceDefinition: java.util.Set getSubResourceDefinitions()>()
org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : r1 = interfaceinvoke $r12.<org.apache.ambari.server.api.resources.ResourceDefinition: java.util.Set getSubResourceDefinitions()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : r2 = r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.controller.spi.ClusterController clusterController>
org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : r2 = r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.controller.spi.ClusterController clusterController> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : r3 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : r3 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : if $z0 == 0
org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : if $z0 == 0 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : $r13 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : $r13 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : r4 = (org.apache.ambari.server.api.resources.SubResourceDefinition) $r13
org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : r4 = (org.apache.ambari.server.api.resources.SubResourceDefinition) $r13 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : r5 = virtualinvoke r4.<org.apache.ambari.server.api.resources.SubResourceDefinition: org.apache.ambari.server.controller.spi.Resource$Type getType()>()
org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : r5 = virtualinvoke r4.<org.apache.ambari.server.api.resources.SubResourceDefinition: org.apache.ambari.server.controller.spi.Resource$Type getType()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : r6 = virtualinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map getKeyValueMap()>()
org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : r6 = virtualinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map getKeyValueMap()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.getKeyValueMap : $r1 = new java.util.HashMap
org.apache.ambari.server.api.query.QueryImpl.getKeyValueMap : $r1 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.getKeyValueMap : $r2 = r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map keyValueMap>
org.apache.ambari.server.api.query.QueryImpl.getKeyValueMap : $r2 = r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map keyValueMap> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.getKeyValueMap : specialinvoke $r1.<java.util.HashMap: void <init>(java.util.Map)>($r2)
org.apache.ambari.server.api.query.QueryImpl.getKeyValueMap : specialinvoke $r1.<java.util.HashMap: void <init>(java.util.Map)>($r2) >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.getKeyValueMap : return $r1
org.apache.ambari.server.api.query.QueryImpl.getKeyValueMap : return $r1 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : $r14 = new org.apache.ambari.server.api.query.QueryImpl
org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : $r14 = new org.apache.ambari.server.api.query.QueryImpl >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : $r15 = staticinvoke <org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl: org.apache.ambari.server.api.resources.ResourceDefinition getResourceDefinition(org.apache.ambari.server.controller.spi.Resource$Type,java.util.Map)>(r5, r6)
org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : $r15 = staticinvoke <org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl: org.apache.ambari.server.api.resources.ResourceDefinition getResourceDefinition(org.apache.ambari.server.controller.spi.Resource$Type,java.util.Map)>(r5, r6) >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : $r5 = <org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl: java.util.Map resourceDefinitions>
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : $r5 = <org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl: java.util.Map resourceDefinitions> >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r0)
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r0) >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.hashCode : $r1 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: java.lang.String name>
org.apache.ambari.server.controller.spi.Resource$Type.hashCode : $r1 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: java.lang.String name> >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.hashCode : i2 = virtualinvoke $r1.<java.lang.String: int hashCode()>()
org.apache.ambari.server.controller.spi.Resource$Type.hashCode : i2 = virtualinvoke $r1.<java.lang.String: int hashCode()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.hashCode : $i1 = 31 * i2
org.apache.ambari.server.controller.spi.Resource$Type.hashCode : $i1 = 31 * i2 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.hashCode : $i0 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal>
org.apache.ambari.server.controller.spi.Resource$Type.hashCode : $i0 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal> >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.hashCode : i3 = $i1 + $i0
org.apache.ambari.server.controller.spi.Resource$Type.hashCode : i3 = $i1 + $i0 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.hashCode : return i3
org.apache.ambari.server.controller.spi.Resource$Type.hashCode : return i3 >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : if $z0 == 0
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : if $z0 == 0 >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : $r6 = <org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl$1: int[] $SwitchMap$org$apache$ambari$server$controller$spi$Resource$InternalType>
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : $r6 = <org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl$1: int[] $SwitchMap$org$apache$ambari$server$controller$spi$Resource$InternalType> >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : $r7 = virtualinvoke r0.<org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$InternalType getInternalType()>()
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : $r7 = virtualinvoke r0.<org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$InternalType getInternalType()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : $z0 = virtualinvoke r0.<org.apache.ambari.server.controller.spi.Resource$Type: boolean isInternalType()>()
org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : $z0 = virtualinvoke r0.<org.apache.ambari.server.controller.spi.Resource$Type: boolean isInternalType()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : $i0 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal>
org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : $i0 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal> >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : $r1 = staticinvoke <org.apache.ambari.server.controller.spi.Resource$InternalType: org.apache.ambari.server.controller.spi.Resource$InternalType[] values()>()
org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : $r1 = staticinvoke <org.apache.ambari.server.controller.spi.Resource$InternalType: org.apache.ambari.server.controller.spi.Resource$InternalType[] values()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$InternalType.values : $r0 = <org.apache.ambari.server.controller.spi.Resource$InternalType: org.apache.ambari.server.controller.spi.Resource$InternalType[] $VALUES>
org.apache.ambari.server.controller.spi.Resource$InternalType.values : $r0 = <org.apache.ambari.server.controller.spi.Resource$InternalType: org.apache.ambari.server.controller.spi.Resource$InternalType[] $VALUES> >>>>>>>> org.apache.ambari.server.controller.spi.Resource$InternalType.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
org.apache.ambari.server.controller.spi.Resource$InternalType.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$InternalType.values : $r2 = (org.apache.ambari.server.controller.spi.Resource$InternalType[]) $r1
org.apache.ambari.server.controller.spi.Resource$InternalType.values : $r2 = (org.apache.ambari.server.controller.spi.Resource$InternalType[]) $r1 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$InternalType.values : return $r2
org.apache.ambari.server.controller.spi.Resource$InternalType.values : return $r2 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : $i1 = lengthof $r1
org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : $i1 = lengthof $r1 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : if $i0 >= $i1
org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : if $i0 >= $i1 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : $z0 = 1
org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : $z0 = 1 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : goto [?= return $z0]
org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : goto [?= return $z0] >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : return $z0
org.apache.ambari.server.controller.spi.Resource$Type.isInternalType : return $z0 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : if $z0 == 0
org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : if $z0 == 0 >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : $r7 = staticinvoke <org.apache.ambari.server.controller.spi.Resource$InternalType: org.apache.ambari.server.controller.spi.Resource$InternalType[] values()>()
org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : $r7 = staticinvoke <org.apache.ambari.server.controller.spi.Resource$InternalType: org.apache.ambari.server.controller.spi.Resource$InternalType[] values()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : $i0 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal>
org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : $i0 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: int ordinal> >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : $r8 = $r7[$i0]
org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : $r8 = $r7[$i0] >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : return $r8
org.apache.ambari.server.controller.spi.Resource$Type.getInternalType : return $r8 >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : $i0 = virtualinvoke $r7.<org.apache.ambari.server.controller.spi.Resource$InternalType: int ordinal()>()
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : $i0 = virtualinvoke $r7.<org.apache.ambari.server.controller.spi.Resource$InternalType: int ordinal()>() >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : $i1 = $r6[$i0]
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : $i1 = $r6[$i0] >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : tableswitch($i1) {     case 1:
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : tableswitch($i1) {     case 1: >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : r165 = new org.apache.ambari.server.api.resources.ConfigurationResourceDefinition
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : r165 = new org.apache.ambari.server.api.resources.ConfigurationResourceDefinition >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : specialinvoke r165.<org.apache.ambari.server.api.resources.ConfigurationResourceDefinition: void <init>()>()
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : specialinvoke r165.<org.apache.ambari.server.api.resources.ConfigurationResourceDefinition: void <init>()>() >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : $r4 = new java.util.HashSet
org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : $r4 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : specialinvoke $r4.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : specialinvoke $r4.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : if r2 == null
org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : if r2 == null >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : $r9 = r0.<org.apache.ambari.server.api.resources.BaseResourceDefinition: java.util.Map directives>
org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : $r9 = r0.<org.apache.ambari.server.api.resources.BaseResourceDefinition: java.util.Map directives> >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4)
org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4) >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : r155 = r165
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : r155 = r165 >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : goto [?= return r155]
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : goto [?= return r155] >>>>>>>> org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : return r155
org.apache.ambari.server.api.resources.ResourceInstanceFactoryImpl.getResourceDefinition : return r155 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : specialinvoke $r14.<org.apache.ambari.server.api.query.QueryImpl: void <init>(java.util.Map,org.apache.ambari.server.api.resources.ResourceDefinition,org.apache.ambari.server.controller.spi.ClusterController)>(r6, $r15, r2)
org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : specialinvoke $r14.<org.apache.ambari.server.api.query.QueryImpl: void <init>(java.util.Map,org.apache.ambari.server.api.resources.ResourceDefinition,org.apache.ambari.server.controller.spi.ClusterController)>(r6, $r15, r2) >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : $r16 = virtualinvoke $r14.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.api.resources.ResourceDefinition getResourceDefinition()>()
org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : $r16 = virtualinvoke $r14.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.api.resources.ResourceDefinition getResourceDefinition()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : r8 = specialinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: java.lang.String getSubResourceName(org.apache.ambari.server.api.resources.ResourceDefinition,org.apache.ambari.server.api.resources.SubResourceDefinition)>($r16, r4)
org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : r8 = specialinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: java.lang.String getSubResourceName(org.apache.ambari.server.api.resources.ResourceDefinition,org.apache.ambari.server.api.resources.SubResourceDefinition)>($r16, r4) >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.getSubResourceName : $z0 = virtualinvoke r2.<org.apache.ambari.server.api.resources.SubResourceDefinition: boolean isCollection()>()
org.apache.ambari.server.api.query.QueryImpl.getSubResourceName : $z0 = virtualinvoke r2.<org.apache.ambari.server.api.resources.SubResourceDefinition: boolean isCollection()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.getSubResourceName : if $z0 == 0
org.apache.ambari.server.api.query.QueryImpl.getSubResourceName : if $z0 == 0 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.getSubResourceName : $r3 = interfaceinvoke r1.<org.apache.ambari.server.api.resources.ResourceDefinition: java.lang.String getSingularName()>()
org.apache.ambari.server.api.query.QueryImpl.getSubResourceName : $r3 = interfaceinvoke r1.<org.apache.ambari.server.api.resources.ResourceDefinition: java.lang.String getSingularName()>() >>>>>>>> org.apache.ambari.server.api.resources.ConfigurationResourceDefinition.getSingularName : return "configuration"
org.apache.ambari.server.api.resources.ConfigurationResourceDefinition.getSingularName : return "configuration" >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.getSubResourceName : return $r3
org.apache.ambari.server.api.query.QueryImpl.getSubResourceName : return $r3 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : $r17 = r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map availableSubResources>
org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : $r17 = r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map availableSubResources> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r14)
org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r14) >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : $r10 = r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map availableSubResources>
org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : $r10 = r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map availableSubResources> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : return $r10
org.apache.ambari.server.api.query.QueryImpl.ensureSubResources : return $r10 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addProperty : $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("*")
org.apache.ambari.server.api.query.QueryImpl.addProperty : $z0 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("*") >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addProperty : if $z0 == 0
org.apache.ambari.server.api.query.QueryImpl.addProperty : if $z0 == 0 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addProperty : specialinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: void addAllProperties(org.apache.ambari.server.controller.spi.TemporalInfo)>(r1)
org.apache.ambari.server.api.query.QueryImpl.addProperty : specialinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: void addAllProperties(org.apache.ambari.server.controller.spi.TemporalInfo)>(r1) >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addAllProperties : r0.<org.apache.ambari.server.api.query.QueryImpl: boolean allProperties> = 1
org.apache.ambari.server.api.query.QueryImpl.addAllProperties : r0.<org.apache.ambari.server.api.query.QueryImpl: boolean allProperties> = 1 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addAllProperties : if r1 == null
org.apache.ambari.server.api.query.QueryImpl.addAllProperties : if r1 == null >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addAllProperties : $r5 = virtualinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map ensureSubResources()>()
org.apache.ambari.server.api.query.QueryImpl.addAllProperties : $r5 = virtualinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map ensureSubResources()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addAllProperties : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.api.query.QueryImpl.addAllProperties : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addAllProperties : r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.api.query.QueryImpl.addAllProperties : r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addAllProperties : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.api.query.QueryImpl.addAllProperties : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addAllProperties : if $z1 == 0
org.apache.ambari.server.api.query.QueryImpl.addAllProperties : if $z1 == 0 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addAllProperties : $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.api.query.QueryImpl.addAllProperties : $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addAllProperties : r3 = (java.util.Map$Entry) $r7
org.apache.ambari.server.api.query.QueryImpl.addAllProperties : r3 = (java.util.Map$Entry) $r7 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addAllProperties : $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.ambari.server.api.query.QueryImpl.addAllProperties : $r8 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addAllProperties : r4 = (java.lang.String) $r8
org.apache.ambari.server.api.query.QueryImpl.addAllProperties : r4 = (java.lang.String) $r8 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addAllProperties : $r9 = r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map requestedSubResources>
org.apache.ambari.server.api.query.QueryImpl.addAllProperties : $r9 = r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map requestedSubResources> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addAllProperties : $z0 = interfaceinvoke $r9.<java.util.Map: boolean containsKey(java.lang.Object)>(r4)
org.apache.ambari.server.api.query.QueryImpl.addAllProperties : $z0 = interfaceinvoke $r9.<java.util.Map: boolean containsKey(java.lang.Object)>(r4) >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addAllProperties : if $z0 != 0
org.apache.ambari.server.api.query.QueryImpl.addAllProperties : if $z0 != 0 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addAllProperties : $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.api.query.QueryImpl.addAllProperties : $r10 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addAllProperties : $r11 = (org.apache.ambari.server.api.query.QueryImpl) $r10
org.apache.ambari.server.api.query.QueryImpl.addAllProperties : $r11 = (org.apache.ambari.server.api.query.QueryImpl) $r10 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addAllProperties : specialinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: void addSubResource(java.lang.String,org.apache.ambari.server.api.query.QueryImpl)>(r4, $r11)
org.apache.ambari.server.api.query.QueryImpl.addAllProperties : specialinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: void addSubResource(java.lang.String,org.apache.ambari.server.api.query.QueryImpl)>(r4, $r11) >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addSubResource : $r3 = new org.apache.ambari.server.api.query.render.DefaultRenderer
org.apache.ambari.server.api.query.QueryImpl.addSubResource : $r3 = new org.apache.ambari.server.api.query.render.DefaultRenderer >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addSubResource : specialinvoke $r3.<org.apache.ambari.server.api.query.render.DefaultRenderer: void <init>()>()
org.apache.ambari.server.api.query.QueryImpl.addSubResource : specialinvoke $r3.<org.apache.ambari.server.api.query.render.DefaultRenderer: void <init>()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addSubResource : virtualinvoke r2.<org.apache.ambari.server.api.query.QueryImpl: void setRenderer(org.apache.ambari.server.api.query.render.Renderer)>($r3)
org.apache.ambari.server.api.query.QueryImpl.addSubResource : virtualinvoke r2.<org.apache.ambari.server.api.query.QueryImpl: void setRenderer(org.apache.ambari.server.api.query.render.Renderer)>($r3) >>>>>>>> org.apache.ambari.server.api.query.render.BaseRenderer.init : r0.<org.apache.ambari.server.api.query.render.BaseRenderer: org.apache.ambari.server.controller.spi.SchemaFactory m_schemaFactory> = r1
org.apache.ambari.server.api.query.render.BaseRenderer.init : r0.<org.apache.ambari.server.api.query.render.BaseRenderer: org.apache.ambari.server.controller.spi.SchemaFactory m_schemaFactory> = r1 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addSubResource : $r4 = r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map requestedSubResources>
org.apache.ambari.server.api.query.QueryImpl.addSubResource : $r4 = r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map requestedSubResources> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addSubResource : interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
org.apache.ambari.server.api.query.QueryImpl.addSubResource : interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addAllProperties : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.api.query.QueryImpl.addAllProperties : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.addProperty : goto [?= return]
org.apache.ambari.server.api.query.QueryImpl.addProperty : goto [?= return] >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.execute : specialinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: void queryForResources()>()
org.apache.ambari.server.api.query.QueryImpl.execute : specialinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: void queryForResources()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.queryForResources : $r9 = virtualinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.api.resources.ResourceDefinition getResourceDefinition()>()
org.apache.ambari.server.api.query.QueryImpl.queryForResources : $r9 = virtualinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.api.resources.ResourceDefinition getResourceDefinition()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.queryForResources : r1 = interfaceinvoke $r9.<org.apache.ambari.server.api.resources.ResourceDefinition: org.apache.ambari.server.controller.spi.Resource$Type getType()>()
org.apache.ambari.server.api.query.QueryImpl.queryForResources : r1 = interfaceinvoke $r9.<org.apache.ambari.server.api.resources.ResourceDefinition: org.apache.ambari.server.controller.spi.Resource$Type getType()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.queryForResources : $r10 = virtualinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map getKeyValueMap()>()
org.apache.ambari.server.api.query.QueryImpl.queryForResources : $r10 = virtualinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map getKeyValueMap()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.queryForResources : $r11 = r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.controller.spi.Predicate userPredicate>
org.apache.ambari.server.api.query.QueryImpl.queryForResources : $r11 = r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.controller.spi.Predicate userPredicate> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.queryForResources : $r12 = specialinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.controller.spi.Predicate processUserPredicate(org.apache.ambari.server.controller.spi.Predicate)>($r11)
org.apache.ambari.server.api.query.QueryImpl.queryForResources : $r12 = specialinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.controller.spi.Predicate processUserPredicate(org.apache.ambari.server.controller.spi.Predicate)>($r11) >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.processUserPredicate : if r1 != null
org.apache.ambari.server.api.query.QueryImpl.processUserPredicate : if r1 != null >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.processUserPredicate : return null
org.apache.ambari.server.api.query.QueryImpl.processUserPredicate : return null >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.queryForResources : r2 = specialinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.controller.spi.Predicate createPredicate(java.util.Map,org.apache.ambari.server.controller.spi.Predicate)>($r10, $r12)
org.apache.ambari.server.api.query.QueryImpl.queryForResources : r2 = specialinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.controller.spi.Predicate createPredicate(java.util.Map,org.apache.ambari.server.controller.spi.Predicate)>($r10, $r12) >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createPredicate : r3 = specialinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.controller.spi.Predicate createInternalPredicate(java.util.Map)>(r1)
org.apache.ambari.server.api.query.QueryImpl.createPredicate : r3 = specialinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.controller.spi.Predicate createInternalPredicate(java.util.Map)>(r1) >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : $r5 = virtualinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.api.resources.ResourceDefinition getResourceDefinition()>()
org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : $r5 = virtualinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.api.resources.ResourceDefinition getResourceDefinition()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : r2 = interfaceinvoke $r5.<org.apache.ambari.server.api.resources.ResourceDefinition: org.apache.ambari.server.controller.spi.Resource$Type getType()>()
org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : r2 = interfaceinvoke $r5.<org.apache.ambari.server.api.resources.ResourceDefinition: org.apache.ambari.server.controller.spi.Resource$Type getType()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : $r6 = r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.controller.spi.ClusterController clusterController>
org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : $r6 = r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.controller.spi.ClusterController clusterController> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : r3 = interfaceinvoke $r6.<org.apache.ambari.server.controller.spi.ClusterController: org.apache.ambari.server.controller.spi.Schema getSchema(org.apache.ambari.server.controller.spi.Resource$Type)>(r2)
org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : r3 = interfaceinvoke $r6.<org.apache.ambari.server.controller.spi.ClusterController: org.apache.ambari.server.controller.spi.Schema getSchema(org.apache.ambari.server.controller.spi.Resource$Type)>(r2) >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.equals : return 1
org.apache.ambari.server.controller.spi.Resource$Type.equals : return 1 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : $r7 = new java.util.HashSet
org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : $r7 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : specialinvoke $r7.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : specialinvoke $r7.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : $r8 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : $r8 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : r24 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : r24 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : $z0 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : $z0 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : if $z0 == 0
org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : if $z0 == 0 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : $i0 = interfaceinvoke $r7.<java.util.Set: int size()>()
org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : $i0 = interfaceinvoke $r7.<java.util.Set: int size()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : if $i0 != 1
org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : if $i0 != 1 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : $i1 = interfaceinvoke $r7.<java.util.Set: int size()>()
org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : $i1 = interfaceinvoke $r7.<java.util.Set: int size()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : if $i1 <= 1
org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : if $i1 <= 1 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : return null
org.apache.ambari.server.api.query.QueryImpl.createInternalPredicate : return null >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createPredicate : if r3 != null
org.apache.ambari.server.api.query.QueryImpl.createPredicate : if r3 != null >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createPredicate : return r2
org.apache.ambari.server.api.query.QueryImpl.createPredicate : return r2 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.queryForResources : specialinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: void finalizeProperties()>()
org.apache.ambari.server.api.query.QueryImpl.queryForResources : specialinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: void finalizeProperties()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.finalizeProperties : r1 = r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition>
org.apache.ambari.server.api.query.QueryImpl.finalizeProperties : r1 = r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.finalizeProperties : $r5 = new org.apache.ambari.server.api.query.QueryInfo
org.apache.ambari.server.api.query.QueryImpl.finalizeProperties : $r5 = new org.apache.ambari.server.api.query.QueryInfo >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.finalizeProperties : $r6 = r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Set requestedProperties>
org.apache.ambari.server.api.query.QueryImpl.finalizeProperties : $r6 = r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Set requestedProperties> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.finalizeProperties : specialinvoke $r5.<org.apache.ambari.server.api.query.QueryInfo: void <init>(org.apache.ambari.server.api.resources.ResourceDefinition,java.util.Set)>(r1, $r6)
org.apache.ambari.server.api.query.QueryImpl.finalizeProperties : specialinvoke $r5.<org.apache.ambari.server.api.query.QueryInfo: void <init>(org.apache.ambari.server.api.resources.ResourceDefinition,java.util.Set)>(r1, $r6) >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.finalizeProperties : $r7 = new org.apache.ambari.server.api.util.TreeNodeImpl
org.apache.ambari.server.api.query.QueryImpl.finalizeProperties : $r7 = new org.apache.ambari.server.api.util.TreeNodeImpl >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.finalizeProperties : $r8 = interfaceinvoke r1.<org.apache.ambari.server.api.resources.ResourceDefinition: org.apache.ambari.server.controller.spi.Resource$Type getType()>()
org.apache.ambari.server.api.query.QueryImpl.finalizeProperties : $r8 = interfaceinvoke r1.<org.apache.ambari.server.api.resources.ResourceDefinition: org.apache.ambari.server.controller.spi.Resource$Type getType()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.finalizeProperties : $r9 = virtualinvoke $r8.<org.apache.ambari.server.controller.spi.Resource$Type: java.lang.String name()>()
org.apache.ambari.server.api.query.QueryImpl.finalizeProperties : $r9 = virtualinvoke $r8.<org.apache.ambari.server.controller.spi.Resource$Type: java.lang.String name()>() >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.name : $r1 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: java.lang.String name>
org.apache.ambari.server.controller.spi.Resource$Type.name : $r1 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: java.lang.String name> >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.name : return $r1
org.apache.ambari.server.controller.spi.Resource$Type.name : return $r1 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.finalizeProperties : specialinvoke $r7.<org.apache.ambari.server.api.util.TreeNodeImpl: void <init>(org.apache.ambari.server.api.util.TreeNode,java.lang.Object,java.lang.String)>(null, $r5, $r9)
org.apache.ambari.server.api.query.QueryImpl.finalizeProperties : specialinvoke $r7.<org.apache.ambari.server.api.util.TreeNodeImpl: void <init>(org.apache.ambari.server.api.util.TreeNode,java.lang.Object,java.lang.String)>(null, $r5, $r9) >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.finalizeProperties : r4 = specialinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.api.util.TreeNode buildQueryPropertyTree(org.apache.ambari.server.api.query.QueryImpl,org.apache.ambari.server.api.util.TreeNode)>(r0, $r7)
org.apache.ambari.server.api.query.QueryImpl.finalizeProperties : r4 = specialinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.api.util.TreeNode buildQueryPropertyTree(org.apache.ambari.server.api.query.QueryImpl,org.apache.ambari.server.api.util.TreeNode)>(r0, $r7) >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : $r8 = r1.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map requestedSubResources>
org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : $r8 = r1.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map requestedSubResources> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : r3 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : r3 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : if $z0 == 0
org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : if $z0 == 0 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : r4 = (org.apache.ambari.server.api.query.QueryImpl) $r10
org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : r4 = (org.apache.ambari.server.api.query.QueryImpl) $r10 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : r5 = r4.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition>
org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : r5 = r4.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : $r11 = new org.apache.ambari.server.api.query.QueryInfo
org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : $r11 = new org.apache.ambari.server.api.query.QueryInfo >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : $r12 = r4.<org.apache.ambari.server.api.query.QueryImpl: java.util.Set requestedProperties>
org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : $r12 = r4.<org.apache.ambari.server.api.query.QueryImpl: java.util.Set requestedProperties> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : specialinvoke $r11.<org.apache.ambari.server.api.query.QueryInfo: void <init>(org.apache.ambari.server.api.resources.ResourceDefinition,java.util.Set)>(r5, $r12)
org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : specialinvoke $r11.<org.apache.ambari.server.api.query.QueryInfo: void <init>(org.apache.ambari.server.api.resources.ResourceDefinition,java.util.Set)>(r5, $r12) >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : $r13 = interfaceinvoke r5.<org.apache.ambari.server.api.resources.ResourceDefinition: org.apache.ambari.server.controller.spi.Resource$Type getType()>()
org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : $r13 = interfaceinvoke r5.<org.apache.ambari.server.api.resources.ResourceDefinition: org.apache.ambari.server.controller.spi.Resource$Type getType()>() >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getType : $r1 = r0.<org.apache.ambari.server.api.resources.BaseResourceDefinition: org.apache.ambari.server.controller.spi.Resource$Type m_type>
org.apache.ambari.server.api.resources.BaseResourceDefinition.getType : $r1 = r0.<org.apache.ambari.server.api.resources.BaseResourceDefinition: org.apache.ambari.server.controller.spi.Resource$Type m_type> >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getType : return $r1
org.apache.ambari.server.api.resources.BaseResourceDefinition.getType : return $r1 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : $r14 = virtualinvoke $r13.<org.apache.ambari.server.controller.spi.Resource$Type: java.lang.String name()>()
org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : $r14 = virtualinvoke $r13.<org.apache.ambari.server.controller.spi.Resource$Type: java.lang.String name()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : r7 = interfaceinvoke r2.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>($r11, $r14)
org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : r7 = interfaceinvoke r2.<org.apache.ambari.server.api.util.TreeNode: org.apache.ambari.server.api.util.TreeNode addChild(java.lang.Object,java.lang.String)>($r11, $r14) >>>>>>>> org.apache.ambari.server.api.util.TreeNodeImpl.addChild : $r4 = new org.apache.ambari.server.api.util.TreeNodeImpl
org.apache.ambari.server.api.util.TreeNodeImpl.addChild : $r4 = new org.apache.ambari.server.api.util.TreeNodeImpl >>>>>>>> org.apache.ambari.server.api.util.TreeNodeImpl.addChild : specialinvoke $r4.<org.apache.ambari.server.api.util.TreeNodeImpl: void <init>(org.apache.ambari.server.api.util.TreeNode,java.lang.Object,java.lang.String)>(r0, r1, r2)
org.apache.ambari.server.api.util.TreeNodeImpl.addChild : specialinvoke $r4.<org.apache.ambari.server.api.util.TreeNodeImpl: void <init>(org.apache.ambari.server.api.util.TreeNode,java.lang.Object,java.lang.String)>(r0, r1, r2) >>>>>>>> org.apache.ambari.server.api.util.TreeNodeImpl.addChild : $r5 = r0.<org.apache.ambari.server.api.util.TreeNodeImpl: java.util.Map m_mapChildren>
org.apache.ambari.server.api.util.TreeNodeImpl.addChild : $r5 = r0.<org.apache.ambari.server.api.util.TreeNodeImpl: java.util.Map m_mapChildren> >>>>>>>> org.apache.ambari.server.api.util.TreeNodeImpl.addChild : interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r4)
org.apache.ambari.server.api.util.TreeNodeImpl.addChild : interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r4) >>>>>>>> org.apache.ambari.server.api.util.TreeNodeImpl.addChild : return $r4
org.apache.ambari.server.api.util.TreeNodeImpl.addChild : return $r4 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : specialinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.api.util.TreeNode buildQueryPropertyTree(org.apache.ambari.server.api.query.QueryImpl,org.apache.ambari.server.api.util.TreeNode)>(r4, r7)
org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : specialinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.api.util.TreeNode buildQueryPropertyTree(org.apache.ambari.server.api.query.QueryImpl,org.apache.ambari.server.api.util.TreeNode)>(r4, r7) >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : return r2
org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : return r2 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.api.query.QueryImpl.buildQueryPropertyTree : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.finalizeProperties : $r10 = r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.api.query.render.Renderer renderer>
org.apache.ambari.server.api.query.QueryImpl.finalizeProperties : $r10 = r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.api.query.render.Renderer renderer> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.finalizeProperties : $z0 = virtualinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: boolean isCollectionResource()>()
org.apache.ambari.server.api.query.QueryImpl.finalizeProperties : $z0 = virtualinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: boolean isCollectionResource()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.isCollectionResource : $r1 = virtualinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map getKeyValueMap()>()
org.apache.ambari.server.api.query.QueryImpl.isCollectionResource : $r1 = virtualinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map getKeyValueMap()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.isCollectionResource : $r2 = virtualinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.api.resources.ResourceDefinition getResourceDefinition()>()
org.apache.ambari.server.api.query.QueryImpl.isCollectionResource : $r2 = virtualinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.api.resources.ResourceDefinition getResourceDefinition()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.isCollectionResource : $r3 = interfaceinvoke $r2.<org.apache.ambari.server.api.resources.ResourceDefinition: org.apache.ambari.server.controller.spi.Resource$Type getType()>()
org.apache.ambari.server.api.query.QueryImpl.isCollectionResource : $r3 = interfaceinvoke $r2.<org.apache.ambari.server.api.resources.ResourceDefinition: org.apache.ambari.server.controller.spi.Resource$Type getType()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.isCollectionResource : $r4 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3)
org.apache.ambari.server.api.query.QueryImpl.isCollectionResource : $r4 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r3) >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.isCollectionResource : if $r4 != null
org.apache.ambari.server.api.query.QueryImpl.isCollectionResource : if $r4 != null >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.isCollectionResource : $z0 = 1
org.apache.ambari.server.api.query.QueryImpl.isCollectionResource : $z0 = 1 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.isCollectionResource : goto [?= return $z0]
org.apache.ambari.server.api.query.QueryImpl.isCollectionResource : goto [?= return $z0] >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.isCollectionResource : return $z0
org.apache.ambari.server.api.query.QueryImpl.isCollectionResource : return $z0 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.finalizeProperties : $r11 = interfaceinvoke $r10.<org.apache.ambari.server.api.query.render.Renderer: org.apache.ambari.server.api.util.TreeNode finalizeProperties(org.apache.ambari.server.api.util.TreeNode,boolean)>(r4, $z0)
org.apache.ambari.server.api.query.QueryImpl.finalizeProperties : $r11 = interfaceinvoke $r10.<org.apache.ambari.server.api.query.render.Renderer: org.apache.ambari.server.api.util.TreeNode finalizeProperties(org.apache.ambari.server.api.util.TreeNode,boolean)>(r4, $z0) >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.finalizeProperties : specialinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: void mergeFinalizedProperties(org.apache.ambari.server.api.util.TreeNode,org.apache.ambari.server.api.query.QueryImpl)>($r11, r0)
org.apache.ambari.server.api.query.QueryImpl.finalizeProperties : specialinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: void mergeFinalizedProperties(org.apache.ambari.server.api.util.TreeNode,org.apache.ambari.server.api.query.QueryImpl)>($r11, r0) >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.mergeFinalizedProperties : $r11 = interfaceinvoke r1.<org.apache.ambari.server.api.util.TreeNode: java.lang.Object getObject()>()
org.apache.ambari.server.api.query.QueryImpl.mergeFinalizedProperties : $r11 = interfaceinvoke r1.<org.apache.ambari.server.api.util.TreeNode: java.lang.Object getObject()>() >>>>>>>> org.apache.ambari.server.api.util.TreeNodeImpl.getObject : $r1 = r0.<org.apache.ambari.server.api.util.TreeNodeImpl: java.lang.Object m_object>
org.apache.ambari.server.api.util.TreeNodeImpl.getObject : $r1 = r0.<org.apache.ambari.server.api.util.TreeNodeImpl: java.lang.Object m_object> >>>>>>>> org.apache.ambari.server.api.util.TreeNodeImpl.getObject : return $r1
org.apache.ambari.server.api.util.TreeNodeImpl.getObject : return $r1 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.mergeFinalizedProperties : r3 = (java.util.Set) $r11
org.apache.ambari.server.api.query.QueryImpl.mergeFinalizedProperties : r3 = (java.util.Set) $r11 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.mergeFinalizedProperties : $r12 = r2.<org.apache.ambari.server.api.query.QueryImpl: java.util.Set requestedProperties>
org.apache.ambari.server.api.query.QueryImpl.mergeFinalizedProperties : $r12 = r2.<org.apache.ambari.server.api.query.QueryImpl: java.util.Set requestedProperties> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.mergeFinalizedProperties : interfaceinvoke $r12.<java.util.Set: void clear()>()
org.apache.ambari.server.api.query.QueryImpl.mergeFinalizedProperties : interfaceinvoke $r12.<java.util.Set: void clear()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.mergeFinalizedProperties : $r13 = r2.<org.apache.ambari.server.api.query.QueryImpl: java.util.Set requestedProperties>
org.apache.ambari.server.api.query.QueryImpl.mergeFinalizedProperties : $r13 = r2.<org.apache.ambari.server.api.query.QueryImpl: java.util.Set requestedProperties> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.mergeFinalizedProperties : interfaceinvoke $r13.<java.util.Set: boolean addAll(java.util.Collection)>(r3)
org.apache.ambari.server.api.query.QueryImpl.mergeFinalizedProperties : interfaceinvoke $r13.<java.util.Set: boolean addAll(java.util.Collection)>(r3) >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.mergeFinalizedProperties : $r14 = interfaceinvoke r1.<org.apache.ambari.server.api.util.TreeNode: java.util.Collection getChildren()>()
org.apache.ambari.server.api.query.QueryImpl.mergeFinalizedProperties : $r14 = interfaceinvoke r1.<org.apache.ambari.server.api.util.TreeNode: java.util.Collection getChildren()>() >>>>>>>> org.apache.ambari.server.api.util.TreeNodeImpl.getChildren : $r1 = r0.<org.apache.ambari.server.api.util.TreeNodeImpl: java.util.Map m_mapChildren>
org.apache.ambari.server.api.util.TreeNodeImpl.getChildren : $r1 = r0.<org.apache.ambari.server.api.util.TreeNodeImpl: java.util.Map m_mapChildren> >>>>>>>> org.apache.ambari.server.api.util.TreeNodeImpl.getChildren : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.api.util.TreeNodeImpl.getChildren : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.api.util.TreeNodeImpl.getChildren : return $r2
org.apache.ambari.server.api.util.TreeNodeImpl.getChildren : return $r2 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.mergeFinalizedProperties : r4 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.api.query.QueryImpl.mergeFinalizedProperties : r4 = interfaceinvoke $r14.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.mergeFinalizedProperties : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.api.query.QueryImpl.mergeFinalizedProperties : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.mergeFinalizedProperties : if $z1 == 0
org.apache.ambari.server.api.query.QueryImpl.mergeFinalizedProperties : if $z1 == 0 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.queryForResources : r3 = specialinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.controller.spi.Request createRequest()>()
org.apache.ambari.server.api.query.QueryImpl.queryForResources : r3 = specialinvoke r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.controller.spi.Request createRequest()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createRequest : $r8 = new java.util.HashMap
org.apache.ambari.server.api.query.QueryImpl.createRequest : $r8 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createRequest : $r9 = r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map requestInfoProperties>
org.apache.ambari.server.api.query.QueryImpl.createRequest : $r9 = r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map requestInfoProperties> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createRequest : specialinvoke $r8.<java.util.HashMap: void <init>(java.util.Map)>($r9)
org.apache.ambari.server.api.query.QueryImpl.createRequest : specialinvoke $r8.<java.util.HashMap: void <init>(java.util.Map)>($r9) >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createRequest : $r10 = r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.controller.spi.PageRequest pageRequest>
org.apache.ambari.server.api.query.QueryImpl.createRequest : $r10 = r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.controller.spi.PageRequest pageRequest> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createRequest : if $r10 == null
org.apache.ambari.server.api.query.QueryImpl.createRequest : if $r10 == null >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createRequest : $z3 = r0.<org.apache.ambari.server.api.query.QueryImpl: boolean allProperties>
org.apache.ambari.server.api.query.QueryImpl.createRequest : $z3 = r0.<org.apache.ambari.server.api.query.QueryImpl: boolean allProperties> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createRequest : if $z3 == 0
org.apache.ambari.server.api.query.QueryImpl.createRequest : if $z3 == 0 >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createRequest : $r24 = staticinvoke <java.util.Collections: java.util.Set emptySet()>()
org.apache.ambari.server.api.query.QueryImpl.createRequest : $r24 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createRequest : $r26 = r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.controller.spi.PageRequest pageRequest>
org.apache.ambari.server.api.query.QueryImpl.createRequest : $r26 = r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.controller.spi.PageRequest pageRequest> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createRequest : $r25 = r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.controller.spi.SortRequest sortRequest>
org.apache.ambari.server.api.query.QueryImpl.createRequest : $r25 = r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.controller.spi.SortRequest sortRequest> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.createRequest : $r27 = staticinvoke <org.apache.ambari.server.controller.utilities.PropertyHelper: org.apache.ambari.server.controller.spi.Request getReadRequest(java.util.Set,java.util.Map,java.util.Map,org.apache.ambari.server.controller.spi.PageRequest,org.apache.ambari.server.controller.spi.SortRequest)>($r24, $r8, null, $r26, $r25)
