org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : r3 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>() >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : r12 = <org.apache.ambari.server.checks.DruidHighAvailabilityCheck: java.lang.String[] DRUID_COMPONENT_NAMES>
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : r12 = <org.apache.ambari.server.checks.DruidHighAvailabilityCheck: java.lang.String[] DRUID_COMPONENT_NAMES> >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : i0 = lengthof r12
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : i0 = lengthof r12 >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : i2 = 0
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : i2 = 0 >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : if i2 >= i0
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : if i2 >= i0 >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : r4 = r12[i2]
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : r4 = r12[i2] >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : r5 = specialinvoke r0.<org.apache.ambari.server.checks.DruidHighAvailabilityCheck: java.util.Set getHostsForComponent(org.apache.ambari.server.controller.PrereqCheckRequest,java.lang.String)>(r2, r4)
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : r5 = specialinvoke r0.<org.apache.ambari.server.checks.DruidHighAvailabilityCheck: java.util.Set getHostsForComponent(org.apache.ambari.server.controller.PrereqCheckRequest,java.lang.String)>(r2, r4) >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : $r5 = new java.util.HashSet
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : $r5 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : specialinvoke $r5.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : specialinvoke $r5.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : r12 = $r5
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : r12 = $r5 >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : r3 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>()
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : r3 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName>
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1 >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : $r6 = r0.<org.apache.ambari.server.checks.DruidHighAvailabilityCheck: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : $r6 = r0.<org.apache.ambari.server.checks.DruidHighAvailabilityCheck: com.google.inject.Provider clustersProvider> >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : $r7 = interfaceinvoke $r6.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : $r7 = interfaceinvoke $r6.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.DruidHighAvailabilityCheckTest$1: org.apache.ambari.server.state.Clusters get()>()
org.apache.ambari.server.checks.DruidHighAvailabilityCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.DruidHighAvailabilityCheckTest$1: org.apache.ambari.server.state.Clusters get()>() >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.DruidHighAvailabilityCheckTest$1: org.apache.ambari.server.checks.DruidHighAvailabilityCheckTest this$0>
org.apache.ambari.server.checks.DruidHighAvailabilityCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.DruidHighAvailabilityCheckTest$1: org.apache.ambari.server.checks.DruidHighAvailabilityCheckTest this$0> >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheckTest$1.get : $r2 = staticinvoke <org.apache.ambari.server.checks.DruidHighAvailabilityCheckTest: org.apache.ambari.server.state.Clusters access$000(org.apache.ambari.server.checks.DruidHighAvailabilityCheckTest)>($r1)
org.apache.ambari.server.checks.DruidHighAvailabilityCheckTest$1.get : $r2 = staticinvoke <org.apache.ambari.server.checks.DruidHighAvailabilityCheckTest: org.apache.ambari.server.state.Clusters access$000(org.apache.ambari.server.checks.DruidHighAvailabilityCheckTest)>($r1) >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.DruidHighAvailabilityCheckTest: org.apache.ambari.server.state.Clusters clusters>
org.apache.ambari.server.checks.DruidHighAvailabilityCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.DruidHighAvailabilityCheckTest: org.apache.ambari.server.state.Clusters clusters> >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheckTest.access$000 : return $r1
org.apache.ambari.server.checks.DruidHighAvailabilityCheckTest.access$000 : return $r1 >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheckTest$1.get : return $r2
org.apache.ambari.server.checks.DruidHighAvailabilityCheckTest$1.get : return $r2 >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheckTest$1.get : return $r1
org.apache.ambari.server.checks.DruidHighAvailabilityCheckTest$1.get : return $r1 >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : $r8 = (org.apache.ambari.server.state.Clusters) $r7
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : $r8 = (org.apache.ambari.server.state.Clusters) $r7 >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : r4 = interfaceinvoke $r8.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r3)
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : r4 = interfaceinvoke $r8.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : $r9 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Service getService(java.lang.String)>("DRUID")
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : $r9 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Service getService(java.lang.String)>("DRUID") >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : r13 = interfaceinvoke $r9.<org.apache.ambari.server.state.Service: org.apache.ambari.server.state.ServiceComponent getServiceComponent(java.lang.String)>(r2)
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : r13 = interfaceinvoke $r9.<org.apache.ambari.server.state.Service: org.apache.ambari.server.state.ServiceComponent getServiceComponent(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : if r13 == null
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : if r13 == null >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : $r10 = interfaceinvoke r13.<org.apache.ambari.server.state.ServiceComponent: java.util.Map getServiceComponentHosts()>()
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : $r10 = interfaceinvoke r13.<org.apache.ambari.server.state.ServiceComponent: java.util.Map getServiceComponentHosts()>() >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : r12 = interfaceinvoke $r10.<java.util.Map: java.util.Set keySet()>()
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : r12 = interfaceinvoke $r10.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : goto [?= return r12]
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : goto [?= return r12] >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : return r12
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.getHostsForComponent : return r12 >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : $i1 = interfaceinvoke r5.<java.util.Set: int size()>()
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : $i1 = interfaceinvoke r5.<java.util.Set: int size()>() >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : if $i1 != 1
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : if $i1 != 1 >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r4)
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>(r4) >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : i2 = i2 + 1
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : i2 = i2 + 1 >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : goto [?= (branch)]
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : $z0 = interfaceinvoke r3.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : if $z0 != 0
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : if $z0 != 0 >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : $r6 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>()
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : $r6 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>() >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet m_failedOn>
org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet m_failedOn> >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : return $r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : return $r1 >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : virtualinvoke $r6.<java.util.LinkedHashSet: boolean add(java.lang.Object)>("DRUID")
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : virtualinvoke $r6.<java.util.LinkedHashSet: boolean add(java.lang.Object)>("DRUID") >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : $r7 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus WARNING>
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : $r7 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus WARNING> >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setStatus(org.apache.ambari.server.state.stack.PrereqCheckStatus)>($r7)
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setStatus(org.apache.ambari.server.state.stack.PrereqCheckStatus)>($r7) >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.setStatus : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> = r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.setStatus : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> = r1 >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : r13 = virtualinvoke r0.<org.apache.ambari.server.checks.DruidHighAvailabilityCheck: java.lang.String getFailReason(org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>(r1, r2)
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : r13 = virtualinvoke r0.<org.apache.ambari.server.checks.DruidHighAvailabilityCheck: java.lang.String getFailReason(org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>(r1, r2) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r3 = virtualinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("default", r1, r2)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r3 = virtualinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("default", r1, r2) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r12 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription m_description>
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r12 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription m_description> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r32 = virtualinvoke $r12.<org.apache.ambari.server.checks.CheckDescription: java.lang.String getFail(java.lang.String)>(r1)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r32 = virtualinvoke $r12.<org.apache.ambari.server.checks.CheckDescription: java.lang.String getFail(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r2 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails>
org.apache.ambari.server.checks.CheckDescription.getFail : $r2 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails> >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.ambari.server.checks.CheckDescription.getFail : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : if $z0 == 0
org.apache.ambari.server.checks.CheckDescription.getFail : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r3 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails>
org.apache.ambari.server.checks.CheckDescription.getFail : $r3 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails> >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.ambari.server.checks.CheckDescription.getFail : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r5 = (java.lang.String) $r4
org.apache.ambari.server.checks.CheckDescription.getFail : $r5 = (java.lang.String) $r4 >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : goto [?= return $r5]
org.apache.ambari.server.checks.CheckDescription.getFail : goto [?= return $r5] >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : return $r5
org.apache.ambari.server.checks.CheckDescription.getFail : return $r5 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r4 = virtualinvoke r3.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r4 = virtualinvoke r3.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity m_targetRepositoryVersion>
org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity m_targetRepositoryVersion> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : return $r1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z0 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{version}}")
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z0 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{version}}") >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z0 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z5 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{fails}}")
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z5 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{fails}}") >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z5 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z5 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : return r32
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : return r32 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : return $r3
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : return $r3 >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : $r8 = newarray (java.lang.Object)[1]
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : $r8 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : $r9 = interfaceinvoke r3.<java.util.List: java.lang.Object[] toArray()>()
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : $r9 = interfaceinvoke r3.<java.util.List: java.lang.Object[] toArray()>() >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : $r10 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String)>($r9, ", ")
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : $r10 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.lang.Object[],java.lang.String)>($r9, ", ") >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : $r8[0] = $r10
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : $r8[0] = $r10 >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r13, $r8)
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : $r11 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r13, $r8) >>>>>>>> org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailReason(java.lang.String)>($r11)
org.apache.ambari.server.checks.DruidHighAvailabilityCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailReason(java.lang.String)>($r11) >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.setFailReason : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.lang.String m_failReason> = r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.setFailReason : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.lang.String m_failReason> = r1 >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status>
org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : return $r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : return $r1 >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailReason : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.lang.String m_failReason>
org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailReason : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.lang.String m_failReason> >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailReason : return $r1
