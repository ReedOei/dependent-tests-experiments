org.apache.ambari.server.utils.Parallel.initExecutor : $r2 = new java.util.concurrent.SynchronousQueue >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : specialinvoke $r2.<java.util.concurrent.SynchronousQueue: void <init>()>()
org.apache.ambari.server.utils.Parallel.initExecutor : specialinvoke $r2.<java.util.concurrent.SynchronousQueue: void <init>()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r3 = new java.util.concurrent.ThreadPoolExecutor
org.apache.ambari.server.utils.Parallel.initExecutor : $r3 = new java.util.concurrent.ThreadPoolExecutor >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $i0 = <org.apache.ambari.server.utils.Parallel: int MAX_POOL_SIZE>
org.apache.ambari.server.utils.Parallel.initExecutor : $i0 = <org.apache.ambari.server.utils.Parallel: int MAX_POOL_SIZE> >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>
org.apache.ambari.server.utils.Parallel.initExecutor : $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES> >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r4 = new org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory
org.apache.ambari.server.utils.Parallel.initExecutor : $r4 = new org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : specialinvoke $r4.<org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory: void <init>(org.apache.ambari.server.utils.Parallel$1)>(null)
org.apache.ambari.server.utils.Parallel.initExecutor : specialinvoke $r4.<org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory: void <init>(org.apache.ambari.server.utils.Parallel$1)>(null) >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r6 = new java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy
org.apache.ambari.server.utils.Parallel.initExecutor : $r6 = new java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : specialinvoke $r6.<java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy: void <init>()>()
org.apache.ambari.server.utils.Parallel.initExecutor : specialinvoke $r6.<java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy: void <init>()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : specialinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>(2, $i0, 15L, $r5, $r2, $r4, $r6)
org.apache.ambari.server.utils.Parallel.initExecutor : specialinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>(2, $i0, 15L, $r5, $r2, $r4, $r6) >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : virtualinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: void allowCoreThreadTimeOut(boolean)>(1)
org.apache.ambari.server.utils.Parallel.initExecutor : virtualinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: void allowCoreThreadTimeOut(boolean)>(1) >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r8 = <org.apache.ambari.server.utils.Parallel: org.slf4j.Logger LOG>
org.apache.ambari.server.utils.Parallel.initExecutor : $r8 = <org.apache.ambari.server.utils.Parallel: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r7 = newarray (java.lang.Object)[4]
org.apache.ambari.server.utils.Parallel.initExecutor : $r7 = newarray (java.lang.Object)[4] >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $i1 = staticinvoke <java.lang.Thread: int activeCount()>()
org.apache.ambari.server.utils.Parallel.initExecutor : $i1 = staticinvoke <java.lang.Thread: int activeCount()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)
org.apache.ambari.server.utils.Parallel.initExecutor : $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r7[0] = $r9
org.apache.ambari.server.utils.Parallel.initExecutor : $r7[0] = $r9 >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $i2 = virtualinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: int getPoolSize()>()
org.apache.ambari.server.utils.Parallel.initExecutor : $i2 = virtualinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: int getPoolSize()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)
org.apache.ambari.server.utils.Parallel.initExecutor : $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2) >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r7[1] = $r10
org.apache.ambari.server.utils.Parallel.initExecutor : $r7[1] = $r10 >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $i3 = virtualinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: int getCorePoolSize()>()
org.apache.ambari.server.utils.Parallel.initExecutor : $i3 = virtualinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: int getCorePoolSize()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3)
org.apache.ambari.server.utils.Parallel.initExecutor : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3) >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r7[2] = $r11
org.apache.ambari.server.utils.Parallel.initExecutor : $r7[2] = $r11 >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $i4 = virtualinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: int getMaximumPoolSize()>()
org.apache.ambari.server.utils.Parallel.initExecutor : $i4 = virtualinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: int getMaximumPoolSize()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4)
org.apache.ambari.server.utils.Parallel.initExecutor : $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r7[3] = $r12
org.apache.ambari.server.utils.Parallel.initExecutor : $r7[3] = $r12 >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Parallel library initialized: ThreadCount = {}, CurrentPoolSize = {}, CorePoolSize = {}, MaxPoolSize = {}", $r7)
org.apache.ambari.server.utils.Parallel.initExecutor : interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Parallel library initialized: ThreadCount = {}, CurrentPoolSize = {}, CorePoolSize = {}, MaxPoolSize = {}", $r7) >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : return $r3
org.apache.ambari.server.utils.Parallel.initExecutor : return $r3 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : if r0 == null
org.apache.ambari.server.utils.Parallel.forLoop : if r0 == null >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $r2 = new org.apache.ambari.server.utils.ParallelLoopResult
org.apache.ambari.server.utils.Parallel.forLoop : $r2 = new org.apache.ambari.server.utils.ParallelLoopResult >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>()
org.apache.ambari.server.utils.Parallel.forLoop : $r3 = staticinvoke <java.util.Collections: java.util.List emptyList()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : specialinvoke $r2.<org.apache.ambari.server.utils.ParallelLoopResult: void <init>(boolean,java.util.List)>(1, $r3)
org.apache.ambari.server.utils.Parallel.forLoop : specialinvoke $r2.<org.apache.ambari.server.utils.ParallelLoopResult: void <init>(boolean,java.util.List)>(1, $r3) >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : return $r2
org.apache.ambari.server.utils.Parallel.forLoop : return $r2 >>>>>>>> org.apache.ambari.server.utils.ParallelLoopResult.getIsCompleted : $z0 = r0.<org.apache.ambari.server.utils.ParallelLoopResult: boolean isCompleted>
org.apache.ambari.server.utils.ParallelLoopResult.getIsCompleted : $z0 = r0.<org.apache.ambari.server.utils.ParallelLoopResult: boolean isCompleted> >>>>>>>> org.apache.ambari.server.utils.ParallelLoopResult.getIsCompleted : return $z0
org.apache.ambari.server.utils.ParallelLoopResult.getIsCompleted : return $z0 >>>>>>>> org.apache.ambari.server.utils.ParallelLoopResult.getResult : $r1 = r0.<org.apache.ambari.server.utils.ParallelLoopResult: java.util.List result>
org.apache.ambari.server.utils.ParallelLoopResult.getResult : $r1 = r0.<org.apache.ambari.server.utils.ParallelLoopResult: java.util.List result> >>>>>>>> org.apache.ambari.server.utils.ParallelLoopResult.getResult : return $r1
org.apache.ambari.server.utils.ParallelLoopResult.getResult : return $r1 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.utils.Parallel.forLoop : $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : if $z0 == 0
org.apache.ambari.server.utils.Parallel.forLoop : if $z0 == 0 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $i0 = interfaceinvoke r0.<java.util.List: int size()>()
org.apache.ambari.server.utils.Parallel.forLoop : $i0 = interfaceinvoke r0.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $r4 = staticinvoke <org.apache.ambari.server.utils.Parallel: org.apache.ambari.server.utils.ParallelLoopResult forLoop(java.util.List,int,int,org.apache.ambari.server.utils.LoopBody)>(r0, 0, $i0, r1)
org.apache.ambari.server.utils.Parallel.forLoop : $r4 = staticinvoke <org.apache.ambari.server.utils.Parallel: org.apache.ambari.server.utils.ParallelLoopResult forLoop(java.util.List,int,int,org.apache.ambari.server.utils.LoopBody)>(r0, 0, $i0, r1) >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : if $z0 != 0
org.apache.ambari.server.utils.Parallel.forLoop : if $z0 != 0 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : if i0 != i1
org.apache.ambari.server.utils.Parallel.forLoop : if i0 != i1 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : if i0 < 0
org.apache.ambari.server.utils.Parallel.forLoop : if i0 < 0 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $i2 = interfaceinvoke r0.<java.util.List: int size()>()
org.apache.ambari.server.utils.Parallel.forLoop : $i2 = interfaceinvoke r0.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : if i0 < $i2
org.apache.ambari.server.utils.Parallel.forLoop : if i0 < $i2 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : if i1 < 0
org.apache.ambari.server.utils.Parallel.forLoop : if i1 < 0 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $i3 = interfaceinvoke r0.<java.util.List: int size()>()
org.apache.ambari.server.utils.Parallel.forLoop : $i3 = interfaceinvoke r0.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : if i1 <= $i3
org.apache.ambari.server.utils.Parallel.forLoop : if i1 <= $i3 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : if i0 <= i1
org.apache.ambari.server.utils.Parallel.forLoop : if i0 <= i1 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $i4 = interfaceinvoke r0.<java.util.List: int size()>()
org.apache.ambari.server.utils.Parallel.forLoop : $i4 = interfaceinvoke r0.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : if $i4 == 1
org.apache.ambari.server.utils.Parallel.forLoop : if $i4 == 1 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0)
org.apache.ambari.server.utils.Parallel.forLoop : $r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $r7 = interfaceinvoke r1.<org.apache.ambari.server.utils.LoopBody: java.lang.Object run(java.lang.Object)>($r6)
org.apache.ambari.server.utils.Parallel.forLoop : $r7 = interfaceinvoke r1.<org.apache.ambari.server.utils.LoopBody: java.lang.Object run(java.lang.Object)>($r6) >>>>>>>> org.apache.ambari.server.utils.TestParallel$3.run : $r2 = (java.lang.Integer) r1
org.apache.ambari.server.utils.TestParallel$3.run : $r2 = (java.lang.Integer) r1 >>>>>>>> org.apache.ambari.server.utils.TestParallel$3.run : $r3 = virtualinvoke r0.<org.apache.ambari.server.utils.TestParallel$3: java.lang.Integer run(java.lang.Integer)>($r2)
org.apache.ambari.server.utils.TestParallel$3.run : $r3 = virtualinvoke r0.<org.apache.ambari.server.utils.TestParallel$3: java.lang.Integer run(java.lang.Integer)>($r2) >>>>>>>> org.apache.ambari.server.utils.TestParallel$3.run : return r1
org.apache.ambari.server.utils.TestParallel$3.run : return r1 >>>>>>>> org.apache.ambari.server.utils.TestParallel$3.run : return $r3
org.apache.ambari.server.utils.TestParallel$3.run : return $r3 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : r43 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r7)
org.apache.ambari.server.utils.Parallel.forLoop : r43 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r7) >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : $r8 = new org.apache.ambari.server.utils.ParallelLoopResult
org.apache.ambari.server.utils.Parallel.forLoop : $r8 = new org.apache.ambari.server.utils.ParallelLoopResult >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : specialinvoke $r8.<org.apache.ambari.server.utils.ParallelLoopResult: void <init>(boolean,java.util.List)>(1, r43)
org.apache.ambari.server.utils.Parallel.forLoop : specialinvoke $r8.<org.apache.ambari.server.utils.ParallelLoopResult: void <init>(boolean,java.util.List)>(1, r43) >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : return $r8
org.apache.ambari.server.utils.Parallel.forLoop : return $r8 >>>>>>>> org.apache.ambari.server.utils.Parallel.forLoop : return $r4
