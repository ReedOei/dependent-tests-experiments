org.apache.ambari.server.stack.StackModuleTest.repoInfo : $r4 = specialinvoke r0.<org.apache.ambari.server.stack.StackModuleTest: org.apache.ambari.server.state.RepositoryInfo repoInfo(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>(r1, r2, r3, "centos6") >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.repoInfo : $r6 = new org.apache.ambari.server.state.RepositoryInfo
org.apache.ambari.server.stack.StackModuleTest.repoInfo : $r6 = new org.apache.ambari.server.state.RepositoryInfo >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.repoInfo : specialinvoke $r6.<org.apache.ambari.server.state.RepositoryInfo: void <init>()>()
org.apache.ambari.server.stack.StackModuleTest.repoInfo : specialinvoke $r6.<org.apache.ambari.server.state.RepositoryInfo: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.repoInfo : $r7 = newarray (java.lang.Object)[2]
org.apache.ambari.server.stack.StackModuleTest.repoInfo : $r7 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.repoInfo : $r7[0] = r1
org.apache.ambari.server.stack.StackModuleTest.repoInfo : $r7[0] = r1 >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.repoInfo : $r7[1] = r2
org.apache.ambari.server.stack.StackModuleTest.repoInfo : $r7[1] = r2 >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.repoInfo : $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s:%s", $r7)
org.apache.ambari.server.stack.StackModuleTest.repoInfo : $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s:%s", $r7) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.repoInfo : virtualinvoke $r6.<org.apache.ambari.server.state.RepositoryInfo: void setRepoId(java.lang.String)>($r8)
org.apache.ambari.server.stack.StackModuleTest.repoInfo : virtualinvoke $r6.<org.apache.ambari.server.state.RepositoryInfo: void setRepoId(java.lang.String)>($r8) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.setRepoId : r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoId> = r1
org.apache.ambari.server.state.RepositoryInfo.setRepoId : r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoId> = r1 >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.repoInfo : virtualinvoke $r6.<org.apache.ambari.server.state.RepositoryInfo: void setRepoName(java.lang.String)>(r1)
org.apache.ambari.server.stack.StackModuleTest.repoInfo : virtualinvoke $r6.<org.apache.ambari.server.state.RepositoryInfo: void setRepoName(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.setRepoName : r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoName> = r1
org.apache.ambari.server.state.RepositoryInfo.setRepoName : r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoName> = r1 >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.repoInfo : virtualinvoke $r6.<org.apache.ambari.server.state.RepositoryInfo: void setBaseUrl(java.lang.String)>(r3)
org.apache.ambari.server.stack.StackModuleTest.repoInfo : virtualinvoke $r6.<org.apache.ambari.server.state.RepositoryInfo: void setBaseUrl(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.setBaseUrl : r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String baseUrl> = r1
org.apache.ambari.server.state.RepositoryInfo.setBaseUrl : r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String baseUrl> = r1 >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.repoInfo : virtualinvoke $r6.<org.apache.ambari.server.state.RepositoryInfo: void setOsType(java.lang.String)>(r4)
org.apache.ambari.server.stack.StackModuleTest.repoInfo : virtualinvoke $r6.<org.apache.ambari.server.state.RepositoryInfo: void setOsType(java.lang.String)>(r4) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.setOsType : r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String osType> = r1
org.apache.ambari.server.state.RepositoryInfo.setOsType : r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String osType> = r1 >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.repoInfo : return $r6
org.apache.ambari.server.stack.StackModuleTest.repoInfo : return $r6 >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.repoInfo : return $r4
org.apache.ambari.server.stack.StackModuleTest.repoInfo : return $r4 >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r11 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/ambari/server/stack/StackDirectory;")
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r11 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/ambari/server/stack/StackDirectory;") >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : r4 = (org.apache.ambari.server.stack.StackDirectory) $r11
org.apache.ambari.server.stack.StackModuleTest.createStackModule : r4 = (org.apache.ambari.server.stack.StackDirectory) $r11 >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : r5 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>()
org.apache.ambari.server.stack.StackModuleTest.createStackModule : r5 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList()>() >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : i0 = lengthof r3
org.apache.ambari.server.stack.StackModuleTest.createStackModule : i0 = lengthof r3 >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : i1 = 0
org.apache.ambari.server.stack.StackModuleTest.createStackModule : i1 = 0 >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : if i1 >= i0
org.apache.ambari.server.stack.StackModuleTest.createStackModule : if i1 >= i0 >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : r6 = r3[i1]
org.apache.ambari.server.stack.StackModuleTest.createStackModule : r6 = r3[i1] >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r37 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/ambari/server/stack/StackServiceDirectory;")
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r37 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/ambari/server/stack/StackServiceDirectory;") >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : r7 = (org.apache.ambari.server.stack.StackServiceDirectory) $r37
org.apache.ambari.server.stack.StackModuleTest.createStackModule : r7 = (org.apache.ambari.server.stack.StackServiceDirectory) $r37 >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r38 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/stack/RepositoryXml;")
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r38 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/stack/RepositoryXml;") >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : r8 = (org.apache.ambari.server.state.stack.RepositoryXml) $r38
org.apache.ambari.server.stack.StackModuleTest.createStackModule : r8 = (org.apache.ambari.server.state.stack.RepositoryXml) $r38 >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r39 = virtualinvoke r7.<org.apache.ambari.server.stack.StackServiceDirectory: org.apache.ambari.server.state.stack.RepositoryXml getRepoFile()>()
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r39 = virtualinvoke r7.<org.apache.ambari.server.stack.StackServiceDirectory: org.apache.ambari.server.state.stack.RepositoryXml getRepoFile()>() >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r40 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r39)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r40 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r39) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : interfaceinvoke $r40.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r8)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : interfaceinvoke $r40.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r42 = virtualinvoke r8.<org.apache.ambari.server.state.stack.RepositoryXml: java.util.List getRepositories()>()
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r42 = virtualinvoke r8.<org.apache.ambari.server.state.stack.RepositoryXml: java.util.List getRepositories()>() >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r43 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r42)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r43 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r42) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : interfaceinvoke $r43.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r6)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : interfaceinvoke $r43.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r45 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/stack/ServiceMetainfoXml;")
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r45 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/stack/ServiceMetainfoXml;") >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : r9 = (org.apache.ambari.server.state.stack.ServiceMetainfoXml) $r45
org.apache.ambari.server.stack.StackModuleTest.createStackModule : r9 = (org.apache.ambari.server.state.stack.ServiceMetainfoXml) $r45 >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $z1 = virtualinvoke r9.<org.apache.ambari.server.state.stack.ServiceMetainfoXml: boolean isValid()>()
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $z1 = virtualinvoke r9.<org.apache.ambari.server.state.stack.ServiceMetainfoXml: boolean isValid()>() >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r46 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r46 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r47 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r46)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r47 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r46) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r48 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r48 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : interfaceinvoke $r47.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r48)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : interfaceinvoke $r47.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r48) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r50 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/ServiceInfo;")
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r50 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/ServiceInfo;") >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : r10 = (org.apache.ambari.server.state.ServiceInfo) $r50
org.apache.ambari.server.stack.StackModuleTest.createStackModule : r10 = (org.apache.ambari.server.state.ServiceInfo) $r50 >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $z2 = virtualinvoke r10.<org.apache.ambari.server.state.ServiceInfo: boolean isValid()>()
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $z2 = virtualinvoke r10.<org.apache.ambari.server.state.ServiceInfo: boolean isValid()>() >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r51 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r51 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r52 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r51)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r52 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r51) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r53 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r53 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : interfaceinvoke $r52.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r53)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : interfaceinvoke $r52.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r53) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r55 = virtualinvoke r10.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getName()>()
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r55 = virtualinvoke r10.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r56 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r55)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r56 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r55) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r57 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>()
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r57 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>() >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r58 = virtualinvoke $r57.<java.util.UUID: java.lang.String toString()>()
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r58 = virtualinvoke $r57.<java.util.UUID: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : interfaceinvoke $r56.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r58)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : interfaceinvoke $r56.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r58) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r60 = virtualinvoke r9.<org.apache.ambari.server.state.stack.ServiceMetainfoXml: java.util.List getServices()>()
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r60 = virtualinvoke r9.<org.apache.ambari.server.state.stack.ServiceMetainfoXml: java.util.List getServices()>() >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r61 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r60)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r61 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r60) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r62 = newarray (org.apache.ambari.server.state.ServiceInfo)[1]
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r62 = newarray (org.apache.ambari.server.state.ServiceInfo)[1] >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r62[0] = r10
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r62[0] = r10 >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r63 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>($r62)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r63 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>($r62) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : interfaceinvoke $r61.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r63)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : interfaceinvoke $r61.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r63) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r65 = virtualinvoke r7.<org.apache.ambari.server.stack.StackServiceDirectory: org.apache.ambari.server.state.stack.ServiceMetainfoXml getMetaInfoFile()>()
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r65 = virtualinvoke r7.<org.apache.ambari.server.stack.StackServiceDirectory: org.apache.ambari.server.state.stack.ServiceMetainfoXml getMetaInfoFile()>() >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r66 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r65)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r66 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r65) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : interfaceinvoke $r66.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r9)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : interfaceinvoke $r66.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r9) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r7)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r7) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : i1 = i1 + 1
org.apache.ambari.server.stack.StackModuleTest.createStackModule : i1 = i1 + 1 >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : goto [?= (branch)]
org.apache.ambari.server.stack.StackModuleTest.createStackModule : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $z0 = virtualinvoke r2.<com.google.common.base.Optional: boolean isPresent()>()
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $z0 = virtualinvoke r2.<com.google.common.base.Optional: boolean isPresent()>() >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : if $z0 == 0
org.apache.ambari.server.stack.StackModuleTest.createStackModule : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r29 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/stack/RepositoryXml;")
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r29 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/stack/RepositoryXml;") >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : r69 = (org.apache.ambari.server.state.stack.RepositoryXml) $r29
org.apache.ambari.server.stack.StackModuleTest.createStackModule : r69 = (org.apache.ambari.server.state.stack.RepositoryXml) $r29 >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r30 = virtualinvoke r4.<org.apache.ambari.server.stack.StackDirectory: org.apache.ambari.server.state.stack.RepositoryXml getRepoFile()>()
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r30 = virtualinvoke r4.<org.apache.ambari.server.stack.StackDirectory: org.apache.ambari.server.state.stack.RepositoryXml getRepoFile()>() >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r31 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r30)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r31 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r30) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : interfaceinvoke $r31.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r69)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : interfaceinvoke $r31.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r69) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r33 = virtualinvoke r69.<org.apache.ambari.server.state.stack.RepositoryXml: java.util.List getRepositories()>()
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r33 = virtualinvoke r69.<org.apache.ambari.server.state.stack.RepositoryXml: java.util.List getRepositories()>() >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r34 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r33)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r34 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r33) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r35 = virtualinvoke r2.<com.google.common.base.Optional: java.lang.Object get()>()
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r35 = virtualinvoke r2.<com.google.common.base.Optional: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : interfaceinvoke $r34.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r35)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : interfaceinvoke $r34.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r35) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r12 = virtualinvoke r4.<org.apache.ambari.server.stack.StackDirectory: java.util.Collection getServiceDirectories()>()
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r12 = virtualinvoke r4.<org.apache.ambari.server.stack.StackDirectory: java.util.Collection getServiceDirectories()>() >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r13 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r12)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r13 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r12) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : interfaceinvoke $r13.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r5)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : interfaceinvoke $r13.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r5) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r15 = virtualinvoke r4.<org.apache.ambari.server.stack.StackDirectory: java.lang.String getStackDirName()>()
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r15 = virtualinvoke r4.<org.apache.ambari.server.stack.StackDirectory: java.lang.String getStackDirName()>() >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r16 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r15)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r16 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r15) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : interfaceinvoke $r16.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r0)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : interfaceinvoke $r16.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>(r0) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r18 = virtualinvoke r4.<org.apache.ambari.server.stack.StackDirectory: java.io.File getDirectory()>()
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r18 = virtualinvoke r4.<org.apache.ambari.server.stack.StackDirectory: java.io.File getDirectory()>() >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r19 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r18)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r19 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r18) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r20 = new java.io.File
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r20 = new java.io.File >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : specialinvoke $r20.<java.io.File: void <init>(java.lang.String)>(r1)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : specialinvoke $r20.<java.io.File: void <init>(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : interfaceinvoke $r19.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r20)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : interfaceinvoke $r19.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r20) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r22 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/ambari/server/stack/StackContext;")
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r22 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/ambari/server/stack/StackContext;") >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : r70 = (org.apache.ambari.server.stack.StackContext) $r22
org.apache.ambari.server.stack.StackModuleTest.createStackModule : r70 = (org.apache.ambari.server.stack.StackContext) $r22 >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r23 = new org.apache.ambari.server.stack.StackModule
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r23 = new org.apache.ambari.server.stack.StackModule >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : specialinvoke $r23.<org.apache.ambari.server.stack.StackModule: void <init>(org.apache.ambari.server.stack.StackDirectory,org.apache.ambari.server.stack.StackContext)>(r4, r70)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : specialinvoke $r23.<org.apache.ambari.server.stack.StackModule: void <init>(org.apache.ambari.server.stack.StackDirectory,org.apache.ambari.server.stack.StackContext)>(r4, r70) >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r4 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r4 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r3 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.stack.StackDirectory stackDirectory>
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r3 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.stack.StackDirectory stackDirectory> >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r5 = virtualinvoke $r3.<org.apache.ambari.server.stack.StackDirectory: java.lang.String getStackDirName()>()
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r5 = virtualinvoke $r3.<org.apache.ambari.server.stack.StackDirectory: java.lang.String getStackDirName()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : virtualinvoke $r4.<org.apache.ambari.server.state.StackInfo: void setName(java.lang.String)>($r5)
org.apache.ambari.server.stack.StackModule.populateStackInfo : virtualinvoke $r4.<org.apache.ambari.server.state.StackInfo: void setName(java.lang.String)>($r5) >>>>>>>> org.apache.ambari.server.state.StackInfo.setName : r0.<org.apache.ambari.server.state.StackInfo: java.lang.String name> = r1
org.apache.ambari.server.state.StackInfo.setName : r0.<org.apache.ambari.server.state.StackInfo: java.lang.String name> = r1 >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r7 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r7 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r6 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.stack.StackDirectory stackDirectory>
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r6 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.stack.StackDirectory stackDirectory> >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r8 = virtualinvoke $r6.<org.apache.ambari.server.stack.StackDirectory: java.lang.String getName()>()
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r8 = virtualinvoke $r6.<org.apache.ambari.server.stack.StackDirectory: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : virtualinvoke $r7.<org.apache.ambari.server.state.StackInfo: void setVersion(java.lang.String)>($r8)
org.apache.ambari.server.stack.StackModule.populateStackInfo : virtualinvoke $r7.<org.apache.ambari.server.state.StackInfo: void setVersion(java.lang.String)>($r8) >>>>>>>> org.apache.ambari.server.state.StackInfo.setVersion : r0.<org.apache.ambari.server.state.StackInfo: java.lang.String version> = r1
org.apache.ambari.server.state.StackInfo.setVersion : r0.<org.apache.ambari.server.state.StackInfo: java.lang.String version> = r1 >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r9 = newarray (java.lang.Object)[2]
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r9 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r10 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r10 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r11 = virtualinvoke $r10.<org.apache.ambari.server.state.StackInfo: java.lang.String getName()>()
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r11 = virtualinvoke $r10.<org.apache.ambari.server.state.StackInfo: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.state.StackInfo.getName : $r1 = r0.<org.apache.ambari.server.state.StackInfo: java.lang.String name>
org.apache.ambari.server.state.StackInfo.getName : $r1 = r0.<org.apache.ambari.server.state.StackInfo: java.lang.String name> >>>>>>>> org.apache.ambari.server.state.StackInfo.getName : return $r1
org.apache.ambari.server.state.StackInfo.getName : return $r1 >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r9[0] = $r11
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r9[0] = $r11 >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r12 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r12 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r13 = virtualinvoke $r12.<org.apache.ambari.server.state.StackInfo: java.lang.String getVersion()>()
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r13 = virtualinvoke $r12.<org.apache.ambari.server.state.StackInfo: java.lang.String getVersion()>() >>>>>>>> org.apache.ambari.server.state.StackInfo.getVersion : $r1 = r0.<org.apache.ambari.server.state.StackInfo: java.lang.String version>
org.apache.ambari.server.state.StackInfo.getVersion : $r1 = r0.<org.apache.ambari.server.state.StackInfo: java.lang.String version> >>>>>>>> org.apache.ambari.server.state.StackInfo.getVersion : return $r1
org.apache.ambari.server.state.StackInfo.getVersion : return $r1 >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r9[1] = $r13
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r9[1] = $r13 >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s:%s", $r9)
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s:%s", $r9) >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : r0.<org.apache.ambari.server.stack.StackModule: java.lang.String id> = $r14
org.apache.ambari.server.stack.StackModule.populateStackInfo : r0.<org.apache.ambari.server.stack.StackModule: java.lang.String id> = $r14 >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r16 = <org.apache.ambari.server.stack.StackModule: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r16 = <org.apache.ambari.server.stack.StackModule: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r15 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r15 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r17 = virtualinvoke $r15.<org.apache.ambari.server.state.StackInfo: java.lang.String getName()>()
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r17 = virtualinvoke $r15.<org.apache.ambari.server.state.StackInfo: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r18 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r18 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r19 = virtualinvoke $r18.<org.apache.ambari.server.state.StackInfo: java.lang.String getVersion()>()
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r19 = virtualinvoke $r18.<org.apache.ambari.server.state.StackInfo: java.lang.String getVersion()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Adding new stack to known stacks, stackName = {}, stackVersion = {}", $r17, $r19)
org.apache.ambari.server.stack.StackModule.populateStackInfo : interfaceinvoke $r16.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Adding new stack to known stacks, stackName = {}, stackVersion = {}", $r17, $r19) >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r20 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.stack.StackDirectory stackDirectory>
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r20 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.stack.StackDirectory stackDirectory> >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : r1 = virtualinvoke $r20.<org.apache.ambari.server.stack.StackDirectory: org.apache.ambari.server.state.stack.StackMetainfoXml getMetaInfoFile()>()
org.apache.ambari.server.stack.StackModule.populateStackInfo : r1 = virtualinvoke $r20.<org.apache.ambari.server.stack.StackDirectory: org.apache.ambari.server.state.stack.StackMetainfoXml getMetaInfoFile()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : if r1 == null
org.apache.ambari.server.stack.StackModule.populateStackInfo : if r1 == null >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r71 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.stack.StackDirectory stackDirectory>
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r71 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.stack.StackDirectory stackDirectory> >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : r72 = virtualinvoke $r71.<org.apache.ambari.server.stack.StackDirectory: org.apache.ambari.server.state.stack.RepositoryXml getRepoFile()>()
org.apache.ambari.server.stack.StackModule.populateStackInfo : r72 = virtualinvoke $r71.<org.apache.ambari.server.stack.StackDirectory: org.apache.ambari.server.state.stack.RepositoryXml getRepoFile()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : if r72 == null
org.apache.ambari.server.stack.StackModule.populateStackInfo : if r72 == null >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $z0 = virtualinvoke r72.<org.apache.ambari.server.state.stack.RepositoryXml: boolean isValid()>()
org.apache.ambari.server.stack.StackModule.populateStackInfo : $z0 = virtualinvoke r72.<org.apache.ambari.server.state.stack.RepositoryXml: boolean isValid()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : if $z0 != 0
org.apache.ambari.server.stack.StackModule.populateStackInfo : if $z0 != 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r23 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r23 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : virtualinvoke $r23.<org.apache.ambari.server.state.StackInfo: void setValid(boolean)>(0)
org.apache.ambari.server.stack.StackModule.populateStackInfo : virtualinvoke $r23.<org.apache.ambari.server.state.StackInfo: void setValid(boolean)>(0) >>>>>>>> org.apache.ambari.server.state.StackInfo.setValid : r0.<org.apache.ambari.server.state.StackInfo: boolean valid> = z0
org.apache.ambari.server.state.StackInfo.setValid : r0.<org.apache.ambari.server.state.StackInfo: boolean valid> = z0 >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r24 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r24 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r25 = virtualinvoke r72.<org.apache.ambari.server.state.stack.RepositoryXml: java.util.Collection getErrors()>()
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r25 = virtualinvoke r72.<org.apache.ambari.server.state.stack.RepositoryXml: java.util.Collection getErrors()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : virtualinvoke $r24.<org.apache.ambari.server.state.StackInfo: void addErrors(java.util.Collection)>($r25)
org.apache.ambari.server.stack.StackModule.populateStackInfo : virtualinvoke $r24.<org.apache.ambari.server.state.StackInfo: void addErrors(java.util.Collection)>($r25) >>>>>>>> org.apache.ambari.server.state.StackInfo.addErrors : $r2 = r0.<org.apache.ambari.server.state.StackInfo: java.util.Set errorSet>
org.apache.ambari.server.state.StackInfo.addErrors : $r2 = r0.<org.apache.ambari.server.state.StackInfo: java.util.Set errorSet> >>>>>>>> org.apache.ambari.server.state.StackInfo.addErrors : interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1)
org.apache.ambari.server.state.StackInfo.addErrors : interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1) >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : specialinvoke r0.<org.apache.ambari.server.stack.StackModule: void populateServices()>()
org.apache.ambari.server.stack.StackModule.populateStackInfo : specialinvoke r0.<org.apache.ambari.server.stack.StackModule: void populateServices()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.populateServices : $r3 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.stack.StackDirectory stackDirectory>
org.apache.ambari.server.stack.StackModule.populateServices : $r3 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.stack.StackDirectory stackDirectory> >>>>>>>> org.apache.ambari.server.stack.StackModule.populateServices : $r4 = virtualinvoke $r3.<org.apache.ambari.server.stack.StackDirectory: java.util.Collection getServiceDirectories()>()
org.apache.ambari.server.stack.StackModule.populateServices : $r4 = virtualinvoke $r3.<org.apache.ambari.server.stack.StackDirectory: java.util.Collection getServiceDirectories()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.populateServices : r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.StackModule.populateServices : r1 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.populateServices : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.StackModule.populateServices : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.populateServices : if $z0 == 0
org.apache.ambari.server.stack.StackModule.populateServices : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.populateServices : $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.stack.StackModule.populateServices : $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.populateServices : r2 = (org.apache.ambari.server.stack.ServiceDirectory) $r5
org.apache.ambari.server.stack.StackModule.populateServices : r2 = (org.apache.ambari.server.stack.ServiceDirectory) $r5 >>>>>>>> org.apache.ambari.server.stack.StackModule.populateServices : specialinvoke r0.<org.apache.ambari.server.stack.StackModule: void populateService(org.apache.ambari.server.stack.ServiceDirectory)>(r2)
org.apache.ambari.server.stack.StackModule.populateServices : specialinvoke r0.<org.apache.ambari.server.stack.StackModule: void populateService(org.apache.ambari.server.stack.ServiceDirectory)>(r2) >>>>>>>> org.apache.ambari.server.stack.StackModule.populateService : $r8 = new java.util.ArrayList
org.apache.ambari.server.stack.StackModule.populateService : $r8 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.stack.StackModule.populateService : specialinvoke $r8.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.stack.StackModule.populateService : specialinvoke $r8.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.populateService : r3 = virtualinvoke r1.<org.apache.ambari.server.stack.ServiceDirectory: org.apache.ambari.server.state.stack.ServiceMetainfoXml getMetaInfoFile()>()
org.apache.ambari.server.stack.StackModule.populateService : r3 = virtualinvoke r1.<org.apache.ambari.server.stack.ServiceDirectory: org.apache.ambari.server.state.stack.ServiceMetainfoXml getMetaInfoFile()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.populateService : $z0 = virtualinvoke r3.<org.apache.ambari.server.state.stack.ServiceMetainfoXml: boolean isValid()>()
org.apache.ambari.server.stack.StackModule.populateService : $z0 = virtualinvoke r3.<org.apache.ambari.server.state.stack.ServiceMetainfoXml: boolean isValid()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.populateService : if $z0 != 0
org.apache.ambari.server.stack.StackModule.populateService : if $z0 != 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.populateService : r4 = virtualinvoke r3.<org.apache.ambari.server.state.stack.ServiceMetainfoXml: java.util.List getServices()>()
org.apache.ambari.server.stack.StackModule.populateService : r4 = virtualinvoke r3.<org.apache.ambari.server.state.stack.ServiceMetainfoXml: java.util.List getServices()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.populateService : r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.StackModule.populateService : r5 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.populateService : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.StackModule.populateService : $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.populateService : if $z1 == 0
org.apache.ambari.server.stack.StackModule.populateService : if $z1 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.populateService : $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.stack.StackModule.populateService : $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.populateService : r6 = (org.apache.ambari.server.state.ServiceInfo) $r9
org.apache.ambari.server.stack.StackModule.populateService : r6 = (org.apache.ambari.server.state.ServiceInfo) $r9 >>>>>>>> org.apache.ambari.server.stack.StackModule.populateService : $r10 = new org.apache.ambari.server.stack.ServiceModule
org.apache.ambari.server.stack.StackModule.populateService : $r10 = new org.apache.ambari.server.stack.ServiceModule >>>>>>>> org.apache.ambari.server.stack.StackModule.populateService : $r11 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.stack.StackContext stackContext>
org.apache.ambari.server.stack.StackModule.populateService : $r11 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.stack.StackContext stackContext> >>>>>>>> org.apache.ambari.server.stack.StackModule.populateService : specialinvoke $r10.<org.apache.ambari.server.stack.ServiceModule: void <init>(org.apache.ambari.server.stack.StackContext,org.apache.ambari.server.state.ServiceInfo,org.apache.ambari.server.stack.ServiceDirectory)>($r11, r6, r1)
org.apache.ambari.server.stack.StackModule.populateService : specialinvoke $r10.<org.apache.ambari.server.stack.ServiceModule: void <init>(org.apache.ambari.server.stack.StackContext,org.apache.ambari.server.state.ServiceInfo,org.apache.ambari.server.stack.ServiceDirectory)>($r11, r6, r1) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateComponentModules : $r3 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateComponentModules : $r3 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateComponentModules : $r4 = virtualinvoke $r3.<org.apache.ambari.server.state.ServiceInfo: java.util.List getComponents()>()
org.apache.ambari.server.stack.ServiceModule.populateComponentModules : $r4 = virtualinvoke $r3.<org.apache.ambari.server.state.ServiceInfo: java.util.List getComponents()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateComponentModules : r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.ServiceModule.populateComponentModules : r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateComponentModules : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.ServiceModule.populateComponentModules : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateComponentModules : if $z0 == 0
org.apache.ambari.server.stack.ServiceModule.populateComponentModules : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r4 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.stack.ServiceDirectory serviceDirectory>
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r4 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.stack.ServiceDirectory serviceDirectory> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r3 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r3 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r5 = virtualinvoke $r3.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getConfigDir()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r5 = virtualinvoke $r3.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getConfigDir()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : r1 = virtualinvoke $r4.<org.apache.ambari.server.stack.ServiceDirectory: org.apache.ambari.server.stack.ConfigurationDirectory getConfigurationDirectory(java.lang.String,java.lang.String)>($r5, "properties")
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : r1 = virtualinvoke $r4.<org.apache.ambari.server.stack.ServiceDirectory: org.apache.ambari.server.stack.ConfigurationDirectory getConfigurationDirectory(java.lang.String,java.lang.String)>($r5, "properties") >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if r1 == null
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if r1 == null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r7 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r7 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r8 = virtualinvoke $r7.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getThemesDir()>()
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r8 = virtualinvoke $r7.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getThemesDir()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : if $r8 != null
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : if $r8 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r43 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r43 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : virtualinvoke $r43.<org.apache.ambari.server.state.ServiceInfo: void setThemesDir(java.lang.String)>("themes")
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : virtualinvoke $r43.<org.apache.ambari.server.state.ServiceInfo: void setThemesDir(java.lang.String)>("themes") >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r9 = new java.lang.StringBuilder
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r9 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r10 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.stack.ServiceDirectory serviceDirectory>
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r10 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.stack.ServiceDirectory serviceDirectory> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r11 = virtualinvoke $r10.<org.apache.ambari.server.stack.ServiceDirectory: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r11 = virtualinvoke $r10.<org.apache.ambari.server.stack.ServiceDirectory: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11)
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r13 = <java.io.File: java.lang.String separator>
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r13 = <java.io.File: java.lang.String separator> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13)
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r15 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r15 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r16 = virtualinvoke $r15.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getThemesDir()>()
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r16 = virtualinvoke $r15.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getThemesDir()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16)
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : r1 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : r1 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r18 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r18 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r19 = virtualinvoke $r18.<org.apache.ambari.server.state.ServiceInfo: java.util.List getThemes()>()
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r19 = virtualinvoke $r18.<org.apache.ambari.server.state.ServiceInfo: java.util.List getThemes()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : if $r19 == null
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : if $r19 == null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r20 = new java.util.ArrayList
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r20 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r21 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r21 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r22 = virtualinvoke $r21.<org.apache.ambari.server.state.ServiceInfo: java.util.List getThemes()>()
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r22 = virtualinvoke $r21.<org.apache.ambari.server.state.ServiceInfo: java.util.List getThemes()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $i0 = interfaceinvoke $r22.<java.util.List: int size()>()
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $i0 = interfaceinvoke $r22.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : specialinvoke $r20.<java.util.ArrayList: void <init>(int)>($i0)
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : specialinvoke $r20.<java.util.ArrayList: void <init>(int)>($i0) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r23 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r23 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r24 = virtualinvoke $r23.<org.apache.ambari.server.state.ServiceInfo: java.util.List getThemes()>()
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r24 = virtualinvoke $r23.<org.apache.ambari.server.state.ServiceInfo: java.util.List getThemes()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : r3 = interfaceinvoke $r24.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : r3 = interfaceinvoke $r24.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : if $z0 == 0
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r25 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r25 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : virtualinvoke $r25.<org.apache.ambari.server.state.ServiceInfo: void setThemes(java.util.List)>($r20)
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : virtualinvoke $r25.<org.apache.ambari.server.state.ServiceInfo: void setThemes(java.util.List)>($r20) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r6 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r6 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r7 = virtualinvoke $r6.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getQuickLinksConfigurationsDir()>()
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r7 = virtualinvoke $r6.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getQuickLinksConfigurationsDir()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : if $r7 != null
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : if $r7 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r34 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r34 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : virtualinvoke $r34.<org.apache.ambari.server.state.ServiceInfo: void setQuickLinksConfigurationsDir(java.lang.String)>("quicklinks")
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : virtualinvoke $r34.<org.apache.ambari.server.state.ServiceInfo: void setQuickLinksConfigurationsDir(java.lang.String)>("quicklinks") >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r8 = new java.lang.StringBuilder
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r8 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r9 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.stack.ServiceDirectory serviceDirectory>
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r9 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.stack.ServiceDirectory serviceDirectory> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r10 = virtualinvoke $r9.<org.apache.ambari.server.stack.ServiceDirectory: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r10 = virtualinvoke $r9.<org.apache.ambari.server.stack.ServiceDirectory: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10)
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r12 = <java.io.File: java.lang.String separator>
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r12 = <java.io.File: java.lang.String separator> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r14 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r14 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r15 = virtualinvoke $r14.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getQuickLinksConfigurationsDir()>()
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r15 = virtualinvoke $r14.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getQuickLinksConfigurationsDir()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15)
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : r1 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : r1 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r17 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r17 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r18 = virtualinvoke $r17.<org.apache.ambari.server.state.ServiceInfo: java.util.List getQuickLinksConfigurations()>()
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r18 = virtualinvoke $r17.<org.apache.ambari.server.state.ServiceInfo: java.util.List getQuickLinksConfigurations()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : if $r18 == null
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : if $r18 == null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r19 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r19 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r20 = virtualinvoke $r19.<org.apache.ambari.server.state.ServiceInfo: java.util.List getQuickLinksConfigurations()>()
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r20 = virtualinvoke $r19.<org.apache.ambari.server.state.ServiceInfo: java.util.List getQuickLinksConfigurations()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : r2 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : r2 = interfaceinvoke $r20.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : if $z0 == 0
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.validateServiceInfo : $r1 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.validateServiceInfo : $r1 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.validateServiceInfo : $z0 = virtualinvoke $r1.<org.apache.ambari.server.state.ServiceInfo: boolean isValid()>()
org.apache.ambari.server.stack.ServiceModule.validateServiceInfo : $z0 = virtualinvoke $r1.<org.apache.ambari.server.state.ServiceInfo: boolean isValid()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.validateServiceInfo : if $z0 != 0
org.apache.ambari.server.stack.ServiceModule.validateServiceInfo : if $z0 != 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.populateService : interfaceinvoke $r8.<java.util.Collection: boolean add(java.lang.Object)>($r10)
org.apache.ambari.server.stack.StackModule.populateService : interfaceinvoke $r8.<java.util.Collection: boolean add(java.lang.Object)>($r10) >>>>>>>> org.apache.ambari.server.stack.StackModule.populateService : $z3 = virtualinvoke $r10.<org.apache.ambari.server.stack.ServiceModule: boolean isValid()>()
org.apache.ambari.server.stack.StackModule.populateService : $z3 = virtualinvoke $r10.<org.apache.ambari.server.stack.ServiceModule: boolean isValid()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.isValid : $z0 = r0.<org.apache.ambari.server.stack.ServiceModule: boolean valid>
org.apache.ambari.server.stack.ServiceModule.isValid : $z0 = r0.<org.apache.ambari.server.stack.ServiceModule: boolean valid> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.isValid : return $z0
org.apache.ambari.server.stack.ServiceModule.isValid : return $z0 >>>>>>>> org.apache.ambari.server.stack.StackModule.populateService : if $z3 != 0
org.apache.ambari.server.stack.StackModule.populateService : if $z3 != 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.populateService : goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.stack.StackModule.populateService : goto [?= $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.stack.StackModule.populateService : specialinvoke r0.<org.apache.ambari.server.stack.StackModule: void addServices(java.util.Collection)>($r8)
org.apache.ambari.server.stack.StackModule.populateService : specialinvoke r0.<org.apache.ambari.server.stack.StackModule: void addServices(java.util.Collection)>($r8) >>>>>>>> org.apache.ambari.server.stack.StackModule.addServices : r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.StackModule.addServices : r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.addServices : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.StackModule.addServices : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.addServices : if $z0 == 0
org.apache.ambari.server.stack.StackModule.addServices : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.addServices : $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.stack.StackModule.addServices : $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.addServices : r3 = (org.apache.ambari.server.stack.ServiceModule) $r4
org.apache.ambari.server.stack.StackModule.addServices : r3 = (org.apache.ambari.server.stack.ServiceModule) $r4 >>>>>>>> org.apache.ambari.server.stack.StackModule.addServices : specialinvoke r0.<org.apache.ambari.server.stack.StackModule: void addService(org.apache.ambari.server.stack.ServiceModule)>(r3)
org.apache.ambari.server.stack.StackModule.addServices : specialinvoke r0.<org.apache.ambari.server.stack.StackModule: void addService(org.apache.ambari.server.stack.ServiceModule)>(r3) >>>>>>>> org.apache.ambari.server.stack.StackModule.addService : r2 = virtualinvoke r1.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo getModuleInfo()>()
org.apache.ambari.server.stack.StackModule.addService : r2 = virtualinvoke r1.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo getModuleInfo()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.getModuleInfo : $r1 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.getModuleInfo : $r1 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.getModuleInfo : return $r1
org.apache.ambari.server.stack.ServiceModule.getModuleInfo : return $r1 >>>>>>>> org.apache.ambari.server.stack.StackModule.addService : $r4 = r0.<org.apache.ambari.server.stack.StackModule: java.util.Map serviceModules>
org.apache.ambari.server.stack.StackModule.addService : $r4 = r0.<org.apache.ambari.server.stack.StackModule: java.util.Map serviceModules> >>>>>>>> org.apache.ambari.server.stack.StackModule.addService : $r5 = virtualinvoke r1.<org.apache.ambari.server.stack.ServiceModule: java.lang.String getId()>()
org.apache.ambari.server.stack.StackModule.addService : $r5 = virtualinvoke r1.<org.apache.ambari.server.stack.ServiceModule: java.lang.String getId()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.getId : $r1 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.getId : $r1 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.getId : $r2 = virtualinvoke $r1.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getName()>()
org.apache.ambari.server.stack.ServiceModule.getId : $r2 = virtualinvoke $r1.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.getId : return $r2
org.apache.ambari.server.stack.ServiceModule.getId : return $r2 >>>>>>>> org.apache.ambari.server.stack.StackModule.addService : r3 = interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r1)
org.apache.ambari.server.stack.StackModule.addService : r3 = interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r1) >>>>>>>> org.apache.ambari.server.stack.StackModule.addService : if r3 != null
org.apache.ambari.server.stack.StackModule.addService : if r3 != null >>>>>>>> org.apache.ambari.server.stack.StackModule.addService : $r6 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.addService : $r6 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.addService : $r7 = virtualinvoke $r6.<org.apache.ambari.server.state.StackInfo: java.util.Collection getServices()>()
org.apache.ambari.server.stack.StackModule.addService : $r7 = virtualinvoke $r6.<org.apache.ambari.server.state.StackInfo: java.util.Collection getServices()>() >>>>>>>> org.apache.ambari.server.state.StackInfo.getServices : $r1 = r0.<org.apache.ambari.server.state.StackInfo: java.util.Collection services>
org.apache.ambari.server.state.StackInfo.getServices : $r1 = r0.<org.apache.ambari.server.state.StackInfo: java.util.Collection services> >>>>>>>> org.apache.ambari.server.state.StackInfo.getServices : if $r1 != null
org.apache.ambari.server.state.StackInfo.getServices : if $r1 != null >>>>>>>> org.apache.ambari.server.state.StackInfo.getServices : $r3 = new java.util.ArrayList
org.apache.ambari.server.state.StackInfo.getServices : $r3 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.StackInfo.getServices : specialinvoke $r3.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.StackInfo.getServices : specialinvoke $r3.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.StackInfo.getServices : r0.<org.apache.ambari.server.state.StackInfo: java.util.Collection services> = $r3
org.apache.ambari.server.state.StackInfo.getServices : r0.<org.apache.ambari.server.state.StackInfo: java.util.Collection services> = $r3 >>>>>>>> org.apache.ambari.server.state.StackInfo.getServices : $r2 = r0.<org.apache.ambari.server.state.StackInfo: java.util.Collection services>
org.apache.ambari.server.state.StackInfo.getServices : $r2 = r0.<org.apache.ambari.server.state.StackInfo: java.util.Collection services> >>>>>>>> org.apache.ambari.server.state.StackInfo.getServices : return $r2
org.apache.ambari.server.state.StackInfo.getServices : return $r2 >>>>>>>> org.apache.ambari.server.stack.StackModule.addService : interfaceinvoke $r7.<java.util.Collection: boolean add(java.lang.Object)>(r2)
org.apache.ambari.server.stack.StackModule.addService : interfaceinvoke $r7.<java.util.Collection: boolean add(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.stack.StackModule.addServices : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.stack.StackModule.addServices : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.stack.StackModule.populateServices : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.stack.StackModule.populateServices : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r73 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r73 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $z3 = virtualinvoke $r73.<org.apache.ambari.server.state.StackInfo: boolean isValid()>()
org.apache.ambari.server.stack.StackModule.populateStackInfo : $z3 = virtualinvoke $r73.<org.apache.ambari.server.state.StackInfo: boolean isValid()>() >>>>>>>> org.apache.ambari.server.state.StackInfo.isValid : $z0 = r0.<org.apache.ambari.server.state.StackInfo: boolean valid>
org.apache.ambari.server.state.StackInfo.isValid : $z0 = r0.<org.apache.ambari.server.state.StackInfo: boolean valid> >>>>>>>> org.apache.ambari.server.state.StackInfo.isValid : return $z0
org.apache.ambari.server.state.StackInfo.isValid : return $z0 >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : if $z3 != 0
org.apache.ambari.server.stack.StackModule.populateStackInfo : if $z3 != 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : virtualinvoke r0.<org.apache.ambari.server.stack.StackModule: void setValid(boolean)>(0)
org.apache.ambari.server.stack.StackModule.populateStackInfo : virtualinvoke r0.<org.apache.ambari.server.stack.StackModule: void setValid(boolean)>(0) >>>>>>>> org.apache.ambari.server.stack.StackModule.setValid : r0.<org.apache.ambari.server.stack.StackModule: boolean valid> = z0
org.apache.ambari.server.stack.StackModule.setValid : r0.<org.apache.ambari.server.stack.StackModule: boolean valid> = z0 >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r21 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r21 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : $r22 = virtualinvoke $r21.<org.apache.ambari.server.state.StackInfo: java.util.Collection getErrors()>()
org.apache.ambari.server.stack.StackModule.populateStackInfo : $r22 = virtualinvoke $r21.<org.apache.ambari.server.state.StackInfo: java.util.Collection getErrors()>() >>>>>>>> org.apache.ambari.server.state.StackInfo.getErrors : $r1 = r0.<org.apache.ambari.server.state.StackInfo: java.util.Set errorSet>
org.apache.ambari.server.state.StackInfo.getErrors : $r1 = r0.<org.apache.ambari.server.state.StackInfo: java.util.Set errorSet> >>>>>>>> org.apache.ambari.server.state.StackInfo.getErrors : return $r1
org.apache.ambari.server.state.StackInfo.getErrors : return $r1 >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : virtualinvoke r0.<org.apache.ambari.server.stack.StackModule: void addErrors(java.util.Collection)>($r22)
org.apache.ambari.server.stack.StackModule.populateStackInfo : virtualinvoke r0.<org.apache.ambari.server.stack.StackModule: void addErrors(java.util.Collection)>($r22) >>>>>>>> org.apache.ambari.server.stack.StackModule.addErrors : $r2 = r0.<org.apache.ambari.server.stack.StackModule: java.util.Set errorSet>
org.apache.ambari.server.stack.StackModule.addErrors : $r2 = r0.<org.apache.ambari.server.stack.StackModule: java.util.Set errorSet> >>>>>>>> org.apache.ambari.server.stack.StackModule.addErrors : interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1)
org.apache.ambari.server.stack.StackModule.addErrors : interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1) >>>>>>>> org.apache.ambari.server.stack.StackModule.populateStackInfo : goto [?= return]
org.apache.ambari.server.stack.StackModule.populateStackInfo : goto [?= return] >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r24 = newarray (java.lang.Object)[2]
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r24 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r24[0] = r0
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r24[0] = r0 >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r24[1] = r1
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r24[1] = r1 >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r25 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s:%s", $r24)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r25 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s:%s", $r24) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r26 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object)>($r25, $r23)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r26 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of(java.lang.Object,java.lang.Object)>($r25, $r23) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r27 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>()
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r27 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>() >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r28 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>()
org.apache.ambari.server.stack.StackModuleTest.createStackModule : $r28 = staticinvoke <com.google.common.collect.ImmutableMap: com.google.common.collect.ImmutableMap of()>() >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : virtualinvoke $r23.<org.apache.ambari.server.stack.StackModule: void resolve(org.apache.ambari.server.stack.StackModule,java.util.Map,java.util.Map,java.util.Map)>(null, $r26, $r27, $r28)
org.apache.ambari.server.stack.StackModuleTest.createStackModule : virtualinvoke $r23.<org.apache.ambari.server.stack.StackModule: void resolve(org.apache.ambari.server.stack.StackModule,java.util.Map,java.util.Map,java.util.Map)>(null, $r26, $r27, $r28) >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : $r10 = <org.apache.ambari.server.stack.ModuleState: org.apache.ambari.server.stack.ModuleState VISITED>
org.apache.ambari.server.stack.StackModule.resolve : $r10 = <org.apache.ambari.server.stack.ModuleState: org.apache.ambari.server.stack.ModuleState VISITED> >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.stack.ModuleState moduleState> = $r10
org.apache.ambari.server.stack.StackModule.resolve : r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.stack.ModuleState moduleState> = $r10 >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : $r13 = <org.apache.ambari.server.stack.StackModule: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.StackModule.resolve : $r13 = <org.apache.ambari.server.stack.StackModule: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : $r11 = newarray (java.lang.Object)[2]
org.apache.ambari.server.stack.StackModule.resolve : $r11 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : $r12 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.resolve : $r12 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : $r14 = virtualinvoke $r12.<org.apache.ambari.server.state.StackInfo: java.lang.String getName()>()
org.apache.ambari.server.stack.StackModule.resolve : $r14 = virtualinvoke $r12.<org.apache.ambari.server.state.StackInfo: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : $r11[0] = $r14
org.apache.ambari.server.stack.StackModule.resolve : $r11[0] = $r14 >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : $r15 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.resolve : $r15 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : $r16 = virtualinvoke $r15.<org.apache.ambari.server.state.StackInfo: java.lang.String getVersion()>()
org.apache.ambari.server.stack.StackModule.resolve : $r16 = virtualinvoke $r15.<org.apache.ambari.server.state.StackInfo: java.lang.String getVersion()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : $r11[1] = $r16
org.apache.ambari.server.stack.StackModule.resolve : $r11[1] = $r16 >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : $r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Resolve: %s:%s", $r11)
org.apache.ambari.server.stack.StackModule.resolve : $r17 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Resolve: %s:%s", $r11) >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : interfaceinvoke $r13.<org.slf4j.Logger: void info(java.lang.String)>($r17)
org.apache.ambari.server.stack.StackModule.resolve : interfaceinvoke $r13.<org.slf4j.Logger: void info(java.lang.String)>($r17) >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : $r18 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.resolve : $r18 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : r5 = virtualinvoke $r18.<org.apache.ambari.server.state.StackInfo: java.lang.String getParentStackVersion()>()
org.apache.ambari.server.stack.StackModule.resolve : r5 = virtualinvoke $r18.<org.apache.ambari.server.state.StackInfo: java.lang.String getParentStackVersion()>() >>>>>>>> org.apache.ambari.server.state.StackInfo.getParentStackVersion : $r1 = r0.<org.apache.ambari.server.state.StackInfo: java.lang.String parentStackVersion>
org.apache.ambari.server.state.StackInfo.getParentStackVersion : $r1 = r0.<org.apache.ambari.server.state.StackInfo: java.lang.String parentStackVersion> >>>>>>>> org.apache.ambari.server.state.StackInfo.getParentStackVersion : return $r1
org.apache.ambari.server.state.StackInfo.getParentStackVersion : return $r1 >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : specialinvoke r0.<org.apache.ambari.server.stack.StackModule: void mergeServicesWithExplicitParent(java.util.Map,java.util.Map,java.util.Map)>(r2, r3, r4)
org.apache.ambari.server.stack.StackModule.resolve : specialinvoke r0.<org.apache.ambari.server.stack.StackModule: void mergeServicesWithExplicitParent(java.util.Map,java.util.Map,java.util.Map)>(r2, r3, r4) >>>>>>>> org.apache.ambari.server.stack.StackModule.mergeServicesWithExplicitParent : $r8 = r0.<org.apache.ambari.server.stack.StackModule: java.util.Map serviceModules>
org.apache.ambari.server.stack.StackModule.mergeServicesWithExplicitParent : $r8 = r0.<org.apache.ambari.server.stack.StackModule: java.util.Map serviceModules> >>>>>>>> org.apache.ambari.server.stack.StackModule.mergeServicesWithExplicitParent : $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.stack.StackModule.mergeServicesWithExplicitParent : $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.mergeServicesWithExplicitParent : r4 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.StackModule.mergeServicesWithExplicitParent : r4 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.mergeServicesWithExplicitParent : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.StackModule.mergeServicesWithExplicitParent : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.mergeServicesWithExplicitParent : if $z0 == 0
org.apache.ambari.server.stack.StackModule.mergeServicesWithExplicitParent : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.mergeServicesWithExplicitParent : $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.stack.StackModule.mergeServicesWithExplicitParent : $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.mergeServicesWithExplicitParent : r5 = (org.apache.ambari.server.stack.ServiceModule) $r10
org.apache.ambari.server.stack.StackModule.mergeServicesWithExplicitParent : r5 = (org.apache.ambari.server.stack.ServiceModule) $r10 >>>>>>>> org.apache.ambari.server.stack.StackModule.mergeServicesWithExplicitParent : r6 = virtualinvoke r5.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo getModuleInfo()>()
org.apache.ambari.server.stack.StackModule.mergeServicesWithExplicitParent : r6 = virtualinvoke r5.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo getModuleInfo()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.mergeServicesWithExplicitParent : r7 = virtualinvoke r6.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getParent()>()
org.apache.ambari.server.stack.StackModule.mergeServicesWithExplicitParent : r7 = virtualinvoke r6.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getParent()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.mergeServicesWithExplicitParent : if r7 == null
org.apache.ambari.server.stack.StackModule.mergeServicesWithExplicitParent : if r7 == null >>>>>>>> org.apache.ambari.server.stack.StackModule.mergeServicesWithExplicitParent : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.stack.StackModule.mergeServicesWithExplicitParent : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : specialinvoke r0.<org.apache.ambari.server.stack.StackModule: void addExtensionServices()>()
org.apache.ambari.server.stack.StackModule.resolve : specialinvoke r0.<org.apache.ambari.server.stack.StackModule: void addExtensionServices()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.addExtensionServices : $r5 = r0.<org.apache.ambari.server.stack.StackModule: java.util.Map extensionModules>
org.apache.ambari.server.stack.StackModule.addExtensionServices : $r5 = r0.<org.apache.ambari.server.stack.StackModule: java.util.Map extensionModules> >>>>>>>> org.apache.ambari.server.stack.StackModule.addExtensionServices : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.stack.StackModule.addExtensionServices : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.addExtensionServices : r1 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.StackModule.addExtensionServices : r1 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.addExtensionServices : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.StackModule.addExtensionServices : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.addExtensionServices : if $z0 == 0
org.apache.ambari.server.stack.StackModule.addExtensionServices : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : if r5 == null
org.apache.ambari.server.stack.StackModule.resolve : if r5 == null >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : $r19 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.resolve : $r19 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : $r20 = virtualinvoke $r19.<org.apache.ambari.server.state.StackInfo: java.util.Collection getExtensions()>()
org.apache.ambari.server.stack.StackModule.resolve : $r20 = virtualinvoke $r19.<org.apache.ambari.server.state.StackInfo: java.util.Collection getExtensions()>() >>>>>>>> org.apache.ambari.server.state.StackInfo.getExtensions : $r1 = r0.<org.apache.ambari.server.state.StackInfo: java.util.Collection extensions>
org.apache.ambari.server.state.StackInfo.getExtensions : $r1 = r0.<org.apache.ambari.server.state.StackInfo: java.util.Collection extensions> >>>>>>>> org.apache.ambari.server.state.StackInfo.getExtensions : if $r1 != null
org.apache.ambari.server.state.StackInfo.getExtensions : if $r1 != null >>>>>>>> org.apache.ambari.server.state.StackInfo.getExtensions : $r3 = new java.util.ArrayList
org.apache.ambari.server.state.StackInfo.getExtensions : $r3 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.StackInfo.getExtensions : specialinvoke $r3.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.StackInfo.getExtensions : specialinvoke $r3.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.StackInfo.getExtensions : r0.<org.apache.ambari.server.state.StackInfo: java.util.Collection extensions> = $r3
org.apache.ambari.server.state.StackInfo.getExtensions : r0.<org.apache.ambari.server.state.StackInfo: java.util.Collection extensions> = $r3 >>>>>>>> org.apache.ambari.server.state.StackInfo.getExtensions : $r2 = r0.<org.apache.ambari.server.state.StackInfo: java.util.Collection extensions>
org.apache.ambari.server.state.StackInfo.getExtensions : $r2 = r0.<org.apache.ambari.server.state.StackInfo: java.util.Collection extensions> >>>>>>>> org.apache.ambari.server.state.StackInfo.getExtensions : return $r2
org.apache.ambari.server.state.StackInfo.getExtensions : return $r2 >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : r6 = interfaceinvoke $r20.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.StackModule.resolve : r6 = interfaceinvoke $r20.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.StackModule.resolve : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : if $z0 == 0
org.apache.ambari.server.stack.StackModule.resolve : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : specialinvoke r0.<org.apache.ambari.server.stack.StackModule: void processUpgradePacks()>()
org.apache.ambari.server.stack.StackModule.resolve : specialinvoke r0.<org.apache.ambari.server.stack.StackModule: void processUpgradePacks()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processUpgradePacks : $r4 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.processUpgradePacks : $r4 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.processUpgradePacks : $r5 = virtualinvoke $r4.<org.apache.ambari.server.state.StackInfo: java.util.Map getUpgradePacks()>()
org.apache.ambari.server.stack.StackModule.processUpgradePacks : $r5 = virtualinvoke $r4.<org.apache.ambari.server.state.StackInfo: java.util.Map getUpgradePacks()>() >>>>>>>> org.apache.ambari.server.state.StackInfo.getUpgradePacks : $r1 = r0.<org.apache.ambari.server.state.StackInfo: java.util.Map upgradePacks>
org.apache.ambari.server.state.StackInfo.getUpgradePacks : $r1 = r0.<org.apache.ambari.server.state.StackInfo: java.util.Map upgradePacks> >>>>>>>> org.apache.ambari.server.state.StackInfo.getUpgradePacks : return $r1
org.apache.ambari.server.state.StackInfo.getUpgradePacks : return $r1 >>>>>>>> org.apache.ambari.server.stack.StackModule.processUpgradePacks : if $r5 != null
org.apache.ambari.server.stack.StackModule.processUpgradePacks : if $r5 != null >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : specialinvoke r0.<org.apache.ambari.server.stack.StackModule: void processRepositories()>()
org.apache.ambari.server.stack.StackModule.resolve : specialinvoke r0.<org.apache.ambari.server.stack.StackModule: void processRepositories()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : r19 = staticinvoke <java.util.Collections: java.util.List emptyList()>()
org.apache.ambari.server.stack.StackModule.processRepositories : r19 = staticinvoke <java.util.Collections: java.util.List emptyList()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : $r3 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.stack.StackDirectory stackDirectory>
org.apache.ambari.server.stack.StackModule.processRepositories : $r3 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.stack.StackDirectory stackDirectory> >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : r1 = virtualinvoke $r3.<org.apache.ambari.server.stack.StackDirectory: org.apache.ambari.server.state.stack.RepositoryXml getRepoFile()>()
org.apache.ambari.server.stack.StackModule.processRepositories : r1 = virtualinvoke $r3.<org.apache.ambari.server.stack.StackDirectory: org.apache.ambari.server.state.stack.RepositoryXml getRepoFile()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : if null == r1
org.apache.ambari.server.stack.StackModule.processRepositories : if null == r1 >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : $r8 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.processRepositories : $r8 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : virtualinvoke $r8.<org.apache.ambari.server.state.StackInfo: void setRepositoryXml(org.apache.ambari.server.state.stack.RepositoryXml)>(r1)
org.apache.ambari.server.stack.StackModule.processRepositories : virtualinvoke $r8.<org.apache.ambari.server.state.StackInfo: void setRepositoryXml(org.apache.ambari.server.state.stack.RepositoryXml)>(r1) >>>>>>>> org.apache.ambari.server.state.StackInfo.setRepositoryXml : r0.<org.apache.ambari.server.state.StackInfo: org.apache.ambari.server.state.stack.RepositoryXml repoXml> = r1
org.apache.ambari.server.state.StackInfo.setRepositoryXml : r0.<org.apache.ambari.server.state.StackInfo: org.apache.ambari.server.state.stack.RepositoryXml repoXml> = r1 >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : $r11 = <org.apache.ambari.server.stack.StackModule: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.StackModule.processRepositories : $r11 = <org.apache.ambari.server.stack.StackModule: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : $r9 = newarray (java.lang.Object)[3]
org.apache.ambari.server.stack.StackModule.processRepositories : $r9 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : $r10 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.processRepositories : $r10 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : $r12 = virtualinvoke $r10.<org.apache.ambari.server.state.StackInfo: java.lang.String getName()>()
org.apache.ambari.server.stack.StackModule.processRepositories : $r12 = virtualinvoke $r10.<org.apache.ambari.server.state.StackInfo: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : $r9[0] = $r12
org.apache.ambari.server.stack.StackModule.processRepositories : $r9[0] = $r12 >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : $r13 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.processRepositories : $r13 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : $r14 = virtualinvoke $r13.<org.apache.ambari.server.state.StackInfo: java.lang.String getVersion()>()
org.apache.ambari.server.stack.StackModule.processRepositories : $r14 = virtualinvoke $r13.<org.apache.ambari.server.state.StackInfo: java.lang.String getVersion()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : $r9[1] = $r14
org.apache.ambari.server.stack.StackModule.processRepositories : $r9[1] = $r14 >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : $r15 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.stack.StackDirectory stackDirectory>
org.apache.ambari.server.stack.StackModule.processRepositories : $r15 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.stack.StackDirectory stackDirectory> >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : $r16 = virtualinvoke $r15.<org.apache.ambari.server.stack.StackDirectory: java.lang.String getRepoDir()>()
org.apache.ambari.server.stack.StackModule.processRepositories : $r16 = virtualinvoke $r15.<org.apache.ambari.server.stack.StackDirectory: java.lang.String getRepoDir()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : $r9[2] = $r16
org.apache.ambari.server.stack.StackModule.processRepositories : $r9[2] = $r16 >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Adding repositories to stack, stackName={}, stackVersion={}, repoFolder={}", $r9)
org.apache.ambari.server.stack.StackModule.processRepositories : interfaceinvoke $r11.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Adding repositories to stack, stackName={}, stackVersion={}, repoFolder={}", $r9) >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : r19 = virtualinvoke r1.<org.apache.ambari.server.state.stack.RepositoryXml: java.util.List getRepositories()>()
org.apache.ambari.server.stack.StackModule.processRepositories : r19 = virtualinvoke r1.<org.apache.ambari.server.state.stack.RepositoryXml: java.util.List getRepositories()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : $r17 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.processRepositories : $r17 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : $r18 = virtualinvoke $r17.<org.apache.ambari.server.state.StackInfo: java.util.List getRepositories()>()
org.apache.ambari.server.stack.StackModule.processRepositories : $r18 = virtualinvoke $r17.<org.apache.ambari.server.state.StackInfo: java.util.List getRepositories()>() >>>>>>>> org.apache.ambari.server.state.StackInfo.getRepositories : $r1 = r0.<org.apache.ambari.server.state.StackInfo: java.util.List repositories>
org.apache.ambari.server.state.StackInfo.getRepositories : $r1 = r0.<org.apache.ambari.server.state.StackInfo: java.util.List repositories> >>>>>>>> org.apache.ambari.server.state.StackInfo.getRepositories : if $r1 != null
org.apache.ambari.server.state.StackInfo.getRepositories : if $r1 != null >>>>>>>> org.apache.ambari.server.state.StackInfo.getRepositories : $r3 = new java.util.ArrayList
org.apache.ambari.server.state.StackInfo.getRepositories : $r3 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.StackInfo.getRepositories : specialinvoke $r3.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.StackInfo.getRepositories : specialinvoke $r3.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.StackInfo.getRepositories : r0.<org.apache.ambari.server.state.StackInfo: java.util.List repositories> = $r3
org.apache.ambari.server.state.StackInfo.getRepositories : r0.<org.apache.ambari.server.state.StackInfo: java.util.List repositories> = $r3 >>>>>>>> org.apache.ambari.server.state.StackInfo.getRepositories : $r2 = r0.<org.apache.ambari.server.state.StackInfo: java.util.List repositories>
org.apache.ambari.server.state.StackInfo.getRepositories : $r2 = r0.<org.apache.ambari.server.state.StackInfo: java.util.List repositories> >>>>>>>> org.apache.ambari.server.state.StackInfo.getRepositories : return $r2
org.apache.ambari.server.state.StackInfo.getRepositories : return $r2 >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : interfaceinvoke $r18.<java.util.List: boolean addAll(java.util.Collection)>(r19)
org.apache.ambari.server.stack.StackModule.processRepositories : interfaceinvoke $r18.<java.util.List: boolean addAll(java.util.Collection)>(r19) >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : $r4 = <org.apache.ambari.server.stack.StackModule: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.StackModule.processRepositories : $r4 = <org.apache.ambari.server.stack.StackModule: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String)>("Process service custom repositories")
org.apache.ambari.server.stack.StackModule.processRepositories : interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String)>("Process service custom repositories") >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : r2 = specialinvoke r0.<org.apache.ambari.server.stack.StackModule: java.util.Set getUniqueServiceRepos(java.util.List)>(r19)
org.apache.ambari.server.stack.StackModule.processRepositories : r2 = specialinvoke r0.<org.apache.ambari.server.stack.StackModule: java.util.Set getUniqueServiceRepos(java.util.List)>(r19) >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : r2 = specialinvoke r0.<org.apache.ambari.server.stack.StackModule: java.util.List getAllServiceRepos()>()
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : r2 = specialinvoke r0.<org.apache.ambari.server.stack.StackModule: java.util.List getAllServiceRepos()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.getAllServiceRepos : $r7 = new java.util.ArrayList
org.apache.ambari.server.stack.StackModule.getAllServiceRepos : $r7 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.stack.StackModule.getAllServiceRepos : specialinvoke $r7.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.stack.StackModule.getAllServiceRepos : specialinvoke $r7.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.getAllServiceRepos : $r8 = r0.<org.apache.ambari.server.stack.StackModule: java.util.Map serviceModules>
org.apache.ambari.server.stack.StackModule.getAllServiceRepos : $r8 = r0.<org.apache.ambari.server.stack.StackModule: java.util.Map serviceModules> >>>>>>>> org.apache.ambari.server.stack.StackModule.getAllServiceRepos : $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.stack.StackModule.getAllServiceRepos : $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.getAllServiceRepos : r2 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.StackModule.getAllServiceRepos : r2 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.getAllServiceRepos : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.StackModule.getAllServiceRepos : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.getAllServiceRepos : if $z0 == 0
org.apache.ambari.server.stack.StackModule.getAllServiceRepos : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.getAllServiceRepos : $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.stack.StackModule.getAllServiceRepos : $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.getAllServiceRepos : r3 = (org.apache.ambari.server.stack.ServiceModule) $r10
org.apache.ambari.server.stack.StackModule.getAllServiceRepos : r3 = (org.apache.ambari.server.stack.ServiceModule) $r10 >>>>>>>> org.apache.ambari.server.stack.StackModule.getAllServiceRepos : r4 = virtualinvoke r3.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.stack.ServiceDirectory getServiceDirectory()>()
org.apache.ambari.server.stack.StackModule.getAllServiceRepos : r4 = virtualinvoke r3.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.stack.ServiceDirectory getServiceDirectory()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.getServiceDirectory : $r1 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.stack.ServiceDirectory serviceDirectory>
org.apache.ambari.server.stack.ServiceModule.getServiceDirectory : $r1 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.stack.ServiceDirectory serviceDirectory> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.getServiceDirectory : return $r1
org.apache.ambari.server.stack.ServiceModule.getServiceDirectory : return $r1 >>>>>>>> org.apache.ambari.server.stack.StackModule.getAllServiceRepos : $z1 = r4 instanceof org.apache.ambari.server.stack.StackServiceDirectory
org.apache.ambari.server.stack.StackModule.getAllServiceRepos : $z1 = r4 instanceof org.apache.ambari.server.stack.StackServiceDirectory >>>>>>>> org.apache.ambari.server.stack.StackModule.getAllServiceRepos : if $z1 == 0
org.apache.ambari.server.stack.StackModule.getAllServiceRepos : if $z1 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.getAllServiceRepos : r5 = (org.apache.ambari.server.stack.StackServiceDirectory) r4
org.apache.ambari.server.stack.StackModule.getAllServiceRepos : r5 = (org.apache.ambari.server.stack.StackServiceDirectory) r4 >>>>>>>> org.apache.ambari.server.stack.StackModule.getAllServiceRepos : r6 = virtualinvoke r5.<org.apache.ambari.server.stack.StackServiceDirectory: org.apache.ambari.server.state.stack.RepositoryXml getRepoFile()>()
org.apache.ambari.server.stack.StackModule.getAllServiceRepos : r6 = virtualinvoke r5.<org.apache.ambari.server.stack.StackServiceDirectory: org.apache.ambari.server.state.stack.RepositoryXml getRepoFile()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.getAllServiceRepos : if null == r6
org.apache.ambari.server.stack.StackModule.getAllServiceRepos : if null == r6 >>>>>>>> org.apache.ambari.server.stack.StackModule.getAllServiceRepos : $r11 = virtualinvoke r6.<org.apache.ambari.server.state.stack.RepositoryXml: java.util.List getRepositories()>()
org.apache.ambari.server.stack.StackModule.getAllServiceRepos : $r11 = virtualinvoke r6.<org.apache.ambari.server.state.stack.RepositoryXml: java.util.List getRepositories()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.getAllServiceRepos : interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r11)
org.apache.ambari.server.stack.StackModule.getAllServiceRepos : interfaceinvoke $r7.<java.util.List: boolean addAll(java.util.Collection)>($r11) >>>>>>>> org.apache.ambari.server.stack.StackModule.getAllServiceRepos : $r12 = virtualinvoke r6.<org.apache.ambari.server.state.stack.RepositoryXml: java.lang.String getLatestURI()>()
org.apache.ambari.server.stack.StackModule.getAllServiceRepos : $r12 = virtualinvoke r6.<org.apache.ambari.server.state.stack.RepositoryXml: java.lang.String getLatestURI()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.getAllServiceRepos : if null == $r12
org.apache.ambari.server.stack.StackModule.getAllServiceRepos : if null == $r12 >>>>>>>> org.apache.ambari.server.stack.StackModule.getAllServiceRepos : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.stack.StackModule.getAllServiceRepos : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.stack.StackModule.getAllServiceRepos : return $r7
org.apache.ambari.server.stack.StackModule.getAllServiceRepos : return $r7 >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r16 = <org.apache.ambari.server.state.RepositoryInfo: com.google.common.base.Function GET_OSTYPE_FUNCTION>
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r16 = <org.apache.ambari.server.state.RepositoryInfo: com.google.common.base.Function GET_OSTYPE_FUNCTION> >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : r3 = staticinvoke <com.google.common.collect.Multimaps: com.google.common.collect.ImmutableListMultimap index(java.lang.Iterable,com.google.common.base.Function)>(r2, $r16)
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : r3 = staticinvoke <com.google.common.collect.Multimaps: com.google.common.collect.ImmutableListMultimap index(java.lang.Iterable,com.google.common.base.Function)>(r2, $r16) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$4.apply : $r2 = (org.apache.ambari.server.state.RepositoryInfo) r1
org.apache.ambari.server.state.RepositoryInfo$4.apply : $r2 = (org.apache.ambari.server.state.RepositoryInfo) r1 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$4.apply : $r3 = virtualinvoke r0.<org.apache.ambari.server.state.RepositoryInfo$4: java.lang.String apply(org.apache.ambari.server.state.RepositoryInfo)>($r2)
org.apache.ambari.server.state.RepositoryInfo$4.apply : $r3 = virtualinvoke r0.<org.apache.ambari.server.state.RepositoryInfo$4: java.lang.String apply(org.apache.ambari.server.state.RepositoryInfo)>($r2) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$4.apply : $r2 = staticinvoke <org.apache.ambari.server.state.RepositoryInfo: java.lang.String access$300(org.apache.ambari.server.state.RepositoryInfo)>(r1)
org.apache.ambari.server.state.RepositoryInfo$4.apply : $r2 = staticinvoke <org.apache.ambari.server.state.RepositoryInfo: java.lang.String access$300(org.apache.ambari.server.state.RepositoryInfo)>(r1) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.access$300 : $r1 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String osType>
org.apache.ambari.server.state.RepositoryInfo.access$300 : $r1 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String osType> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.access$300 : return $r1
org.apache.ambari.server.state.RepositoryInfo.access$300 : return $r1 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$4.apply : return $r2
org.apache.ambari.server.state.RepositoryInfo$4.apply : return $r2 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$4.apply : return $r3
org.apache.ambari.server.state.RepositoryInfo$4.apply : return $r3 >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r17 = <org.apache.ambari.server.state.RepositoryInfo: com.google.common.base.Function GET_OSTYPE_FUNCTION>
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r17 = <org.apache.ambari.server.state.RepositoryInfo: com.google.common.base.Function GET_OSTYPE_FUNCTION> >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : r4 = staticinvoke <com.google.common.collect.Multimaps: com.google.common.collect.ImmutableListMultimap index(java.lang.Iterable,com.google.common.base.Function)>(r1, $r17)
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : r4 = staticinvoke <com.google.common.collect.Multimaps: com.google.common.collect.ImmutableListMultimap index(java.lang.Iterable,com.google.common.base.Function)>(r1, $r17) >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r18 = new java.util.HashSet
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r18 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : specialinvoke $r18.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : specialinvoke $r18.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r19 = virtualinvoke r3.<com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableSet keySet()>()
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r19 = virtualinvoke r3.<com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableSet keySet()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : r6 = virtualinvoke $r19.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>()
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : r6 = virtualinvoke $r19.<com.google.common.collect.ImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : if $z0 == 0
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r20 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r20 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : r7 = (java.lang.String) $r20
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : r7 = (java.lang.String) $r20 >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $z1 = virtualinvoke r4.<com.google.common.collect.ImmutableListMultimap: boolean containsKey(java.lang.Object)>(r7)
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $z1 = virtualinvoke r4.<com.google.common.collect.ImmutableListMultimap: boolean containsKey(java.lang.Object)>(r7) >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : if $z1 == 0
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : if $z1 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r35 = virtualinvoke r4.<com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableList get(java.lang.Object)>(r7)
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r35 = virtualinvoke r4.<com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableList get(java.lang.Object)>(r7) >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : goto [?= r9 = virtualinvoke r3.<com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableList get(java.lang.Object)>(r7)]
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : goto [?= r9 = virtualinvoke r3.<com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableList get(java.lang.Object)>(r7)] >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : r9 = virtualinvoke r3.<com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableList get(java.lang.Object)>(r7)
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : r9 = virtualinvoke r3.<com.google.common.collect.ImmutableListMultimap: com.google.common.collect.ImmutableList get(java.lang.Object)>(r7) >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r21 = <org.apache.ambari.server.state.RepositoryInfo: com.google.common.base.Function GET_REPO_NAME_FUNCTION>
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r21 = <org.apache.ambari.server.state.RepositoryInfo: com.google.common.base.Function GET_REPO_NAME_FUNCTION> >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r22 = staticinvoke <com.google.common.collect.Lists: java.util.List transform(java.util.List,com.google.common.base.Function)>($r35, $r21)
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r22 = staticinvoke <com.google.common.collect.Lists: java.util.List transform(java.util.List,com.google.common.base.Function)>($r35, $r21) >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : r10 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>($r22)
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : r10 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>($r22) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$1.apply : $r2 = (org.apache.ambari.server.state.RepositoryInfo) r1
org.apache.ambari.server.state.RepositoryInfo$1.apply : $r2 = (org.apache.ambari.server.state.RepositoryInfo) r1 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$1.apply : $r3 = virtualinvoke r0.<org.apache.ambari.server.state.RepositoryInfo$1: java.lang.String apply(org.apache.ambari.server.state.RepositoryInfo)>($r2)
org.apache.ambari.server.state.RepositoryInfo$1.apply : $r3 = virtualinvoke r0.<org.apache.ambari.server.state.RepositoryInfo$1: java.lang.String apply(org.apache.ambari.server.state.RepositoryInfo)>($r2) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$1.apply : $r2 = staticinvoke <org.apache.ambari.server.state.RepositoryInfo: java.lang.String access$000(org.apache.ambari.server.state.RepositoryInfo)>(r1)
org.apache.ambari.server.state.RepositoryInfo$1.apply : $r2 = staticinvoke <org.apache.ambari.server.state.RepositoryInfo: java.lang.String access$000(org.apache.ambari.server.state.RepositoryInfo)>(r1) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.access$000 : $r1 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoName>
org.apache.ambari.server.state.RepositoryInfo.access$000 : $r1 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoName> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.access$000 : return $r1
org.apache.ambari.server.state.RepositoryInfo.access$000 : return $r1 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$1.apply : return $r2
org.apache.ambari.server.state.RepositoryInfo$1.apply : return $r2 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$1.apply : return $r3
org.apache.ambari.server.state.RepositoryInfo$1.apply : return $r3 >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r23 = <org.apache.ambari.server.state.RepositoryInfo: com.google.common.base.Function SAFE_GET_BASE_URL_FUNCTION>
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r23 = <org.apache.ambari.server.state.RepositoryInfo: com.google.common.base.Function SAFE_GET_BASE_URL_FUNCTION> >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r24 = staticinvoke <com.google.common.collect.Lists: java.util.List transform(java.util.List,com.google.common.base.Function)>($r35, $r23)
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r24 = staticinvoke <com.google.common.collect.Lists: java.util.List transform(java.util.List,com.google.common.base.Function)>($r35, $r23) >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : r11 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>($r24)
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : r11 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>($r24) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$3.apply : $r2 = (org.apache.ambari.server.state.RepositoryInfo) r1
org.apache.ambari.server.state.RepositoryInfo$3.apply : $r2 = (org.apache.ambari.server.state.RepositoryInfo) r1 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$3.apply : $r3 = virtualinvoke r0.<org.apache.ambari.server.state.RepositoryInfo$3: java.lang.String apply(org.apache.ambari.server.state.RepositoryInfo)>($r2)
org.apache.ambari.server.state.RepositoryInfo$3.apply : $r3 = virtualinvoke r0.<org.apache.ambari.server.state.RepositoryInfo$3: java.lang.String apply(org.apache.ambari.server.state.RepositoryInfo)>($r2) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$3.apply : $r2 = staticinvoke <org.apache.ambari.server.state.RepositoryInfo: java.lang.String access$200(org.apache.ambari.server.state.RepositoryInfo)>(r1)
org.apache.ambari.server.state.RepositoryInfo$3.apply : $r2 = staticinvoke <org.apache.ambari.server.state.RepositoryInfo: java.lang.String access$200(org.apache.ambari.server.state.RepositoryInfo)>(r1) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.access$200 : $r1 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String baseUrl>
org.apache.ambari.server.state.RepositoryInfo.access$200 : $r1 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String baseUrl> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.access$200 : return $r1
org.apache.ambari.server.state.RepositoryInfo.access$200 : return $r1 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$3.apply : $r3 = staticinvoke <com.google.common.base.Strings: java.lang.String nullToEmpty(java.lang.String)>($r2)
org.apache.ambari.server.state.RepositoryInfo$3.apply : $r3 = staticinvoke <com.google.common.base.Strings: java.lang.String nullToEmpty(java.lang.String)>($r2) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$3.apply : return $r3
org.apache.ambari.server.state.RepositoryInfo$3.apply : return $r3 >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r25 = <org.apache.ambari.server.state.RepositoryInfo: com.google.common.base.Function GET_REPO_NAME_FUNCTION>
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r25 = <org.apache.ambari.server.state.RepositoryInfo: com.google.common.base.Function GET_REPO_NAME_FUNCTION> >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : r12 = staticinvoke <org.apache.ambari.server.stack.StackModule: java.util.Set findDuplicates(java.util.List,com.google.common.base.Function)>(r9, $r25)
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : r12 = staticinvoke <org.apache.ambari.server.stack.StackModule: java.util.Set findDuplicates(java.util.List,com.google.common.base.Function)>(r9, $r25) >>>>>>>> org.apache.ambari.server.stack.StackModule.findDuplicates : r2 = staticinvoke <com.google.common.collect.Multimaps: com.google.common.collect.ImmutableListMultimap index(java.lang.Iterable,com.google.common.base.Function)>(r0, r1)
org.apache.ambari.server.stack.StackModule.findDuplicates : r2 = staticinvoke <com.google.common.collect.Multimaps: com.google.common.collect.ImmutableListMultimap index(java.lang.Iterable,com.google.common.base.Function)>(r0, r1) >>>>>>>> org.apache.ambari.server.stack.StackModule.findDuplicates : $r7 = new java.util.HashSet
org.apache.ambari.server.stack.StackModule.findDuplicates : $r7 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.stack.StackModule.findDuplicates : specialinvoke $r7.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.stack.StackModule.findDuplicates : specialinvoke $r7.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.findDuplicates : $r8 = interfaceinvoke r2.<com.google.common.collect.ListMultimap: java.util.Map asMap()>()
org.apache.ambari.server.stack.StackModule.findDuplicates : $r8 = interfaceinvoke r2.<com.google.common.collect.ListMultimap: java.util.Map asMap()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.findDuplicates : $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.stack.StackModule.findDuplicates : $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.findDuplicates : r4 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.StackModule.findDuplicates : r4 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.findDuplicates : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.StackModule.findDuplicates : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.findDuplicates : if $z0 == 0
org.apache.ambari.server.stack.StackModule.findDuplicates : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.findDuplicates : $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.stack.StackModule.findDuplicates : $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.findDuplicates : r5 = (java.util.Map$Entry) $r10
org.apache.ambari.server.stack.StackModule.findDuplicates : r5 = (java.util.Map$Entry) $r10 >>>>>>>> org.apache.ambari.server.stack.StackModule.findDuplicates : $r11 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.stack.StackModule.findDuplicates : $r11 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.findDuplicates : $r12 = (java.util.Collection) $r11
org.apache.ambari.server.stack.StackModule.findDuplicates : $r12 = (java.util.Collection) $r11 >>>>>>>> org.apache.ambari.server.stack.StackModule.findDuplicates : $i0 = interfaceinvoke $r12.<java.util.Collection: int size()>()
org.apache.ambari.server.stack.StackModule.findDuplicates : $i0 = interfaceinvoke $r12.<java.util.Collection: int size()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.findDuplicates : if $i0 <= 1
org.apache.ambari.server.stack.StackModule.findDuplicates : if $i0 <= 1 >>>>>>>> org.apache.ambari.server.stack.StackModule.findDuplicates : $r13 = new java.util.HashSet
org.apache.ambari.server.stack.StackModule.findDuplicates : $r13 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.stack.StackModule.findDuplicates : specialinvoke $r13.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.stack.StackModule.findDuplicates : specialinvoke $r13.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.findDuplicates : $r14 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.stack.StackModule.findDuplicates : $r14 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.findDuplicates : $r15 = (java.util.Collection) $r14
org.apache.ambari.server.stack.StackModule.findDuplicates : $r15 = (java.util.Collection) $r14 >>>>>>>> org.apache.ambari.server.stack.StackModule.findDuplicates : interfaceinvoke $r13.<java.util.Set: boolean addAll(java.util.Collection)>($r15)
org.apache.ambari.server.stack.StackModule.findDuplicates : interfaceinvoke $r13.<java.util.Set: boolean addAll(java.util.Collection)>($r15) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.hashCode : $r1 = newarray (java.lang.Object)[9]
org.apache.ambari.server.state.RepositoryInfo.hashCode : $r1 = newarray (java.lang.Object)[9] >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.hashCode : $r2 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String baseUrl>
org.apache.ambari.server.state.RepositoryInfo.hashCode : $r2 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String baseUrl> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.hashCode : $r1[0] = $r2
org.apache.ambari.server.state.RepositoryInfo.hashCode : $r1[0] = $r2 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.hashCode : $r3 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String osType>
org.apache.ambari.server.state.RepositoryInfo.hashCode : $r3 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String osType> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.hashCode : $r1[1] = $r3
org.apache.ambari.server.state.RepositoryInfo.hashCode : $r1[1] = $r3 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.hashCode : $r4 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoId>
org.apache.ambari.server.state.RepositoryInfo.hashCode : $r4 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoId> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.hashCode : $r1[2] = $r4
org.apache.ambari.server.state.RepositoryInfo.hashCode : $r1[2] = $r4 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.hashCode : $r5 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoName>
org.apache.ambari.server.state.RepositoryInfo.hashCode : $r5 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoName> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.hashCode : $r1[3] = $r5
org.apache.ambari.server.state.RepositoryInfo.hashCode : $r1[3] = $r5 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.hashCode : $r6 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String distribution>
org.apache.ambari.server.state.RepositoryInfo.hashCode : $r6 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String distribution> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.hashCode : $r1[4] = $r6
org.apache.ambari.server.state.RepositoryInfo.hashCode : $r1[4] = $r6 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.hashCode : $r7 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String components>
org.apache.ambari.server.state.RepositoryInfo.hashCode : $r7 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String components> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.hashCode : $r1[5] = $r7
org.apache.ambari.server.state.RepositoryInfo.hashCode : $r1[5] = $r7 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.hashCode : $r8 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String mirrorsList>
org.apache.ambari.server.state.RepositoryInfo.hashCode : $r8 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String mirrorsList> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.hashCode : $r1[6] = $r8
org.apache.ambari.server.state.RepositoryInfo.hashCode : $r1[6] = $r8 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.hashCode : $r9 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String defaultBaseUrl>
org.apache.ambari.server.state.RepositoryInfo.hashCode : $r9 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String defaultBaseUrl> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.hashCode : $r1[7] = $r9
org.apache.ambari.server.state.RepositoryInfo.hashCode : $r1[7] = $r9 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.hashCode : $z0 = r0.<org.apache.ambari.server.state.RepositoryInfo: boolean ambariManagedRepositories>
org.apache.ambari.server.state.RepositoryInfo.hashCode : $z0 = r0.<org.apache.ambari.server.state.RepositoryInfo: boolean ambariManagedRepositories> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.hashCode : $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0)
org.apache.ambari.server.state.RepositoryInfo.hashCode : $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.hashCode : $r1[8] = $r10
org.apache.ambari.server.state.RepositoryInfo.hashCode : $r1[8] = $r10 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.hashCode : $i0 = staticinvoke <com.google.common.base.Objects: int hashCode(java.lang.Object[])>($r1)
org.apache.ambari.server.state.RepositoryInfo.hashCode : $i0 = staticinvoke <com.google.common.base.Objects: int hashCode(java.lang.Object[])>($r1) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.hashCode : return $i0
org.apache.ambari.server.state.RepositoryInfo.hashCode : return $i0 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : if r0 != r1
org.apache.ambari.server.state.RepositoryInfo.equals : if r0 != r1 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : if r1 == null
org.apache.ambari.server.state.RepositoryInfo.equals : if r1 == null >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
org.apache.ambari.server.state.RepositoryInfo.equals : $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
org.apache.ambari.server.state.RepositoryInfo.equals : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : if $r3 == $r4
org.apache.ambari.server.state.RepositoryInfo.equals : if $r3 == $r4 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : r2 = (org.apache.ambari.server.state.RepositoryInfo) r1
org.apache.ambari.server.state.RepositoryInfo.equals : r2 = (org.apache.ambari.server.state.RepositoryInfo) r1 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $z1 = r0.<org.apache.ambari.server.state.RepositoryInfo: boolean repoSaved>
org.apache.ambari.server.state.RepositoryInfo.equals : $z1 = r0.<org.apache.ambari.server.state.RepositoryInfo: boolean repoSaved> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $z0 = r2.<org.apache.ambari.server.state.RepositoryInfo: boolean repoSaved>
org.apache.ambari.server.state.RepositoryInfo.equals : $z0 = r2.<org.apache.ambari.server.state.RepositoryInfo: boolean repoSaved> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : if $z1 != $z0
org.apache.ambari.server.state.RepositoryInfo.equals : if $z1 != $z0 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $z3 = r0.<org.apache.ambari.server.state.RepositoryInfo: boolean unique>
org.apache.ambari.server.state.RepositoryInfo.equals : $z3 = r0.<org.apache.ambari.server.state.RepositoryInfo: boolean unique> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $z2 = r2.<org.apache.ambari.server.state.RepositoryInfo: boolean unique>
org.apache.ambari.server.state.RepositoryInfo.equals : $z2 = r2.<org.apache.ambari.server.state.RepositoryInfo: boolean unique> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : if $z3 != $z2
org.apache.ambari.server.state.RepositoryInfo.equals : if $z3 != $z2 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $r6 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String baseUrl>
org.apache.ambari.server.state.RepositoryInfo.equals : $r6 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String baseUrl> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $r5 = r2.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String baseUrl>
org.apache.ambari.server.state.RepositoryInfo.equals : $r5 = r2.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String baseUrl> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $z4 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r6, $r5)
org.apache.ambari.server.state.RepositoryInfo.equals : $z4 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r6, $r5) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : if $z4 == 0
org.apache.ambari.server.state.RepositoryInfo.equals : if $z4 == 0 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $r8 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String osType>
org.apache.ambari.server.state.RepositoryInfo.equals : $r8 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String osType> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $r7 = r2.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String osType>
org.apache.ambari.server.state.RepositoryInfo.equals : $r7 = r2.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String osType> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $z5 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r8, $r7)
org.apache.ambari.server.state.RepositoryInfo.equals : $z5 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r8, $r7) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : if $z5 == 0
org.apache.ambari.server.state.RepositoryInfo.equals : if $z5 == 0 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $r10 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoId>
org.apache.ambari.server.state.RepositoryInfo.equals : $r10 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoId> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $r9 = r2.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoId>
org.apache.ambari.server.state.RepositoryInfo.equals : $r9 = r2.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoId> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $z6 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r10, $r9)
org.apache.ambari.server.state.RepositoryInfo.equals : $z6 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r10, $r9) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : if $z6 == 0
org.apache.ambari.server.state.RepositoryInfo.equals : if $z6 == 0 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $r12 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoName>
org.apache.ambari.server.state.RepositoryInfo.equals : $r12 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoName> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $r11 = r2.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoName>
org.apache.ambari.server.state.RepositoryInfo.equals : $r11 = r2.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoName> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $z7 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r12, $r11)
org.apache.ambari.server.state.RepositoryInfo.equals : $z7 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r12, $r11) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : if $z7 == 0
org.apache.ambari.server.state.RepositoryInfo.equals : if $z7 == 0 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $r14 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String distribution>
org.apache.ambari.server.state.RepositoryInfo.equals : $r14 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String distribution> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $r13 = r2.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String distribution>
org.apache.ambari.server.state.RepositoryInfo.equals : $r13 = r2.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String distribution> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $z8 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r14, $r13)
org.apache.ambari.server.state.RepositoryInfo.equals : $z8 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r14, $r13) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : if $z8 == 0
org.apache.ambari.server.state.RepositoryInfo.equals : if $z8 == 0 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $r16 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String components>
org.apache.ambari.server.state.RepositoryInfo.equals : $r16 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String components> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $r15 = r2.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String components>
org.apache.ambari.server.state.RepositoryInfo.equals : $r15 = r2.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String components> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $z9 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r16, $r15)
org.apache.ambari.server.state.RepositoryInfo.equals : $z9 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r16, $r15) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : if $z9 == 0
org.apache.ambari.server.state.RepositoryInfo.equals : if $z9 == 0 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $r18 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String mirrorsList>
org.apache.ambari.server.state.RepositoryInfo.equals : $r18 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String mirrorsList> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $r17 = r2.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String mirrorsList>
org.apache.ambari.server.state.RepositoryInfo.equals : $r17 = r2.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String mirrorsList> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $z10 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r18, $r17)
org.apache.ambari.server.state.RepositoryInfo.equals : $z10 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r18, $r17) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : if $z10 == 0
org.apache.ambari.server.state.RepositoryInfo.equals : if $z10 == 0 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $r20 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String defaultBaseUrl>
org.apache.ambari.server.state.RepositoryInfo.equals : $r20 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String defaultBaseUrl> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $r19 = r2.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String defaultBaseUrl>
org.apache.ambari.server.state.RepositoryInfo.equals : $r19 = r2.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String defaultBaseUrl> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $z11 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r20, $r19)
org.apache.ambari.server.state.RepositoryInfo.equals : $z11 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r20, $r19) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : if $z11 == 0
org.apache.ambari.server.state.RepositoryInfo.equals : if $z11 == 0 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $z12 = r0.<org.apache.ambari.server.state.RepositoryInfo: boolean ambariManagedRepositories>
org.apache.ambari.server.state.RepositoryInfo.equals : $z12 = r0.<org.apache.ambari.server.state.RepositoryInfo: boolean ambariManagedRepositories> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z12)
org.apache.ambari.server.state.RepositoryInfo.equals : $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z12) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $z13 = r2.<org.apache.ambari.server.state.RepositoryInfo: boolean ambariManagedRepositories>
org.apache.ambari.server.state.RepositoryInfo.equals : $z13 = r2.<org.apache.ambari.server.state.RepositoryInfo: boolean ambariManagedRepositories> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $r22 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z13)
org.apache.ambari.server.state.RepositoryInfo.equals : $r22 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z13) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $z14 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r21, $r22)
org.apache.ambari.server.state.RepositoryInfo.equals : $z14 = staticinvoke <com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r21, $r22) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : if $z14 == 0
org.apache.ambari.server.state.RepositoryInfo.equals : if $z14 == 0 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : $z15 = 1
org.apache.ambari.server.state.RepositoryInfo.equals : $z15 = 1 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : goto [?= return $z15]
org.apache.ambari.server.state.RepositoryInfo.equals : goto [?= return $z15] >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.equals : return $z15
org.apache.ambari.server.state.RepositoryInfo.equals : return $z15 >>>>>>>> org.apache.ambari.server.stack.StackModule.findDuplicates : $i1 = interfaceinvoke $r13.<java.util.Set: int size()>()
org.apache.ambari.server.stack.StackModule.findDuplicates : $i1 = interfaceinvoke $r13.<java.util.Set: int size()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.findDuplicates : if $i1 <= 1
org.apache.ambari.server.stack.StackModule.findDuplicates : if $i1 <= 1 >>>>>>>> org.apache.ambari.server.stack.StackModule.findDuplicates : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.stack.StackModule.findDuplicates : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.stack.StackModule.findDuplicates : $r16 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.ambari.server.stack.StackModule.findDuplicates : $r16 = interfaceinvoke r5.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.findDuplicates : interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>($r16)
org.apache.ambari.server.stack.StackModule.findDuplicates : interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>($r16) >>>>>>>> org.apache.ambari.server.stack.StackModule.findDuplicates : return $r7
org.apache.ambari.server.stack.StackModule.findDuplicates : return $r7 >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r26 = <org.apache.ambari.server.state.RepositoryInfo: com.google.common.base.Function SAFE_GET_BASE_URL_FUNCTION>
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r26 = <org.apache.ambari.server.state.RepositoryInfo: com.google.common.base.Function SAFE_GET_BASE_URL_FUNCTION> >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : r13 = staticinvoke <org.apache.ambari.server.stack.StackModule: java.util.Set findDuplicates(java.util.List,com.google.common.base.Function)>(r9, $r26)
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : r13 = staticinvoke <org.apache.ambari.server.stack.StackModule: java.util.Set findDuplicates(java.util.List,com.google.common.base.Function)>(r9, $r26) >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : r14 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : r14 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $z6 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $z6 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : if $z6 == 0
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : if $z6 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r27 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r27 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : r15 = (org.apache.ambari.server.state.RepositoryInfo) $r27
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : r15 = (org.apache.ambari.server.state.RepositoryInfo) $r27 >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r28 = virtualinvoke r15.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String getBaseUrl()>()
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r28 = virtualinvoke r15.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String getBaseUrl()>() >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.getBaseUrl : $r1 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String baseUrl>
org.apache.ambari.server.state.RepositoryInfo.getBaseUrl : $r1 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String baseUrl> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.getBaseUrl : return $r1
org.apache.ambari.server.state.RepositoryInfo.getBaseUrl : return $r1 >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $z2 = interfaceinvoke r11.<java.util.Set: boolean contains(java.lang.Object)>($r28)
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $z2 = interfaceinvoke r11.<java.util.Set: boolean contains(java.lang.Object)>($r28) >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : if $z2 == 0
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : if $z2 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r29 = virtualinvoke r15.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String getBaseUrl()>()
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r29 = virtualinvoke r15.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String getBaseUrl()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $z3 = interfaceinvoke r13.<java.util.Set: boolean contains(java.lang.Object)>($r29)
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $z3 = interfaceinvoke r13.<java.util.Set: boolean contains(java.lang.Object)>($r29) >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : if $z3 == 0
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : if $z3 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r33 = <org.apache.ambari.server.stack.StackModule: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r33 = <org.apache.ambari.server.stack.StackModule: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : interfaceinvoke $r33.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Service repo has a base url that is identical to that of another service repo: {}", r15)
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : interfaceinvoke $r33.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Service repo has a base url that is identical to that of another service repo: {}", r15) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r1 = new java.lang.StringBuilder
org.apache.ambari.server.state.RepositoryInfo.toString : $r1 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.state.RepositoryInfo.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ repoInfo: , osType=")
org.apache.ambari.server.state.RepositoryInfo.toString : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[ repoInfo: , osType=") >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r3 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String osType>
org.apache.ambari.server.state.RepositoryInfo.toString : $r3 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String osType> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)
org.apache.ambari.server.state.RepositoryInfo.toString : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", repoId=")
org.apache.ambari.server.state.RepositoryInfo.toString : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", repoId=") >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r6 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoId>
org.apache.ambari.server.state.RepositoryInfo.toString : $r6 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoId> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)
org.apache.ambari.server.state.RepositoryInfo.toString : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", baseUrl=")
org.apache.ambari.server.state.RepositoryInfo.toString : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", baseUrl=") >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r9 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String baseUrl>
org.apache.ambari.server.state.RepositoryInfo.toString : $r9 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String baseUrl> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)
org.apache.ambari.server.state.RepositoryInfo.toString : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", repoName=")
org.apache.ambari.server.state.RepositoryInfo.toString : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", repoName=") >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r12 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoName>
org.apache.ambari.server.state.RepositoryInfo.toString : $r12 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoName> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)
org.apache.ambari.server.state.RepositoryInfo.toString : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", distribution=")
org.apache.ambari.server.state.RepositoryInfo.toString : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", distribution=") >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r15 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String distribution>
org.apache.ambari.server.state.RepositoryInfo.toString : $r15 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String distribution> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15)
org.apache.ambari.server.state.RepositoryInfo.toString : $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", components=")
org.apache.ambari.server.state.RepositoryInfo.toString : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", components=") >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r18 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String components>
org.apache.ambari.server.state.RepositoryInfo.toString : $r18 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String components> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18)
org.apache.ambari.server.state.RepositoryInfo.toString : $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mirrorsList=")
org.apache.ambari.server.state.RepositoryInfo.toString : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", mirrorsList=") >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r21 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String mirrorsList>
org.apache.ambari.server.state.RepositoryInfo.toString : $r21 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String mirrorsList> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21)
org.apache.ambari.server.state.RepositoryInfo.toString : $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", unique=")
org.apache.ambari.server.state.RepositoryInfo.toString : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", unique=") >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $z0 = r0.<org.apache.ambari.server.state.RepositoryInfo: boolean unique>
org.apache.ambari.server.state.RepositoryInfo.toString : $z0 = r0.<org.apache.ambari.server.state.RepositoryInfo: boolean unique> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0)
org.apache.ambari.server.state.RepositoryInfo.toString : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ambariManagedRepositories=")
org.apache.ambari.server.state.RepositoryInfo.toString : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ambariManagedRepositories=") >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $z1 = r0.<org.apache.ambari.server.state.RepositoryInfo: boolean ambariManagedRepositories>
org.apache.ambari.server.state.RepositoryInfo.toString : $z1 = r0.<org.apache.ambari.server.state.RepositoryInfo: boolean ambariManagedRepositories> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1)
org.apache.ambari.server.state.RepositoryInfo.toString : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ]")
org.apache.ambari.server.state.RepositoryInfo.toString : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ]") >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.state.RepositoryInfo.toString : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.toString : return $r28
org.apache.ambari.server.state.RepositoryInfo.toString : return $r28 >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r36 = virtualinvoke r15.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String getRepoName()>()
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r36 = virtualinvoke r15.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String getRepoName()>() >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.getRepoName : $r1 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoName>
org.apache.ambari.server.state.RepositoryInfo.getRepoName : $r1 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoName> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.getRepoName : return $r1
org.apache.ambari.server.state.RepositoryInfo.getRepoName : return $r1 >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $z7 = interfaceinvoke r10.<java.util.Set: boolean contains(java.lang.Object)>($r36)
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $z7 = interfaceinvoke r10.<java.util.Set: boolean contains(java.lang.Object)>($r36) >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : if $z7 == 0
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : if $z7 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r30 = virtualinvoke r15.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String getRepoName()>()
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r30 = virtualinvoke r15.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String getRepoName()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $z4 = interfaceinvoke r12.<java.util.Set: boolean contains(java.lang.Object)>($r30)
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $z4 = interfaceinvoke r12.<java.util.Set: boolean contains(java.lang.Object)>($r30) >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : if $z4 == 0
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : if $z4 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : interfaceinvoke $r18.<java.util.Set: boolean add(java.lang.Object)>(r15)
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : interfaceinvoke $r18.<java.util.Set: boolean add(java.lang.Object)>(r15) >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : goto [?= $z6 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : goto [?= $z6 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r31 = <org.apache.ambari.server.stack.StackModule: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r31 = <org.apache.ambari.server.stack.StackModule: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : interfaceinvoke $r31.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Discarding service repository with duplicate name and different content: {}", r15)
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : interfaceinvoke $r31.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Discarding service repository with duplicate name and different content: {}", r15) >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : goto [?= (branch)]
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r32 = <org.apache.ambari.server.stack.StackModule: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r32 = <org.apache.ambari.server.stack.StackModule: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : interfaceinvoke $r32.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Discarding service repository with the same name as one of the stack repos: {}", r15)
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : interfaceinvoke $r32.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Discarding service repository with the same name as one of the stack repos: {}", r15) >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r34 = <org.apache.ambari.server.stack.StackModule: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : $r34 = <org.apache.ambari.server.stack.StackModule: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : interfaceinvoke $r34.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Service repo has a base url that is identical to that of a stack repo: {}", r15)
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : interfaceinvoke $r34.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Service repo has a base url that is identical to that of a stack repo: {}", r15) >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : goto [?= $r36 = virtualinvoke r15.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String getRepoName()>()]
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : goto [?= $r36 = virtualinvoke r15.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String getRepoName()>()] >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : return $r18
org.apache.ambari.server.stack.StackModule.getUniqueServiceRepos : return $r18 >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : $r5 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.processRepositories : $r5 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : $r6 = virtualinvoke $r5.<org.apache.ambari.server.state.StackInfo: java.util.List getRepositories()>()
org.apache.ambari.server.stack.StackModule.processRepositories : $r6 = virtualinvoke $r5.<org.apache.ambari.server.state.StackInfo: java.util.List getRepositories()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : interfaceinvoke $r6.<java.util.List: boolean addAll(java.util.Collection)>(r2)
org.apache.ambari.server.stack.StackModule.processRepositories : interfaceinvoke $r6.<java.util.List: boolean addAll(java.util.Collection)>(r2) >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : $r7 = virtualinvoke r1.<org.apache.ambari.server.state.stack.RepositoryXml: java.lang.String getLatestURI()>()
org.apache.ambari.server.stack.StackModule.processRepositories : $r7 = virtualinvoke r1.<org.apache.ambari.server.state.stack.RepositoryXml: java.lang.String getLatestURI()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processRepositories : if null == $r7
org.apache.ambari.server.stack.StackModule.processRepositories : if null == $r7 >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : specialinvoke r0.<org.apache.ambari.server.stack.StackModule: void processPropertyDependencies()>()
org.apache.ambari.server.stack.StackModule.resolve : specialinvoke r0.<org.apache.ambari.server.stack.StackModule: void processPropertyDependencies()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r5 = new java.util.HashMap
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r5 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : specialinvoke $r5.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : specialinvoke $r5.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r6 = r0.<org.apache.ambari.server.stack.StackModule: java.util.Map serviceModules>
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r6 = r0.<org.apache.ambari.server.stack.StackModule: java.util.Map serviceModules> >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : r46 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : r46 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $z0 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $z0 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : if $z0 == 0
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r15 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r15 = interfaceinvoke r46.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : r47 = (org.apache.ambari.server.stack.ServiceModule) $r15
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : r47 = (org.apache.ambari.server.stack.ServiceModule) $r15 >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r16 = new java.util.HashMap
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r16 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : specialinvoke $r16.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : specialinvoke $r16.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r17 = virtualinvoke r47.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo getModuleInfo()>()
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r17 = virtualinvoke r47.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo getModuleInfo()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r18 = virtualinvoke $r17.<org.apache.ambari.server.state.ServiceInfo: java.util.List getProperties()>()
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r18 = virtualinvoke $r17.<org.apache.ambari.server.state.ServiceInfo: java.util.List getProperties()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : r3 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : r3 = interfaceinvoke $r18.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : if $z2 == 0
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : if $z2 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r19 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r19 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r20 = virtualinvoke $r19.<org.apache.ambari.server.state.StackInfo: org.apache.ambari.server.state.RefreshCommandConfiguration getRefreshCommandConfiguration()>()
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r20 = virtualinvoke $r19.<org.apache.ambari.server.state.StackInfo: org.apache.ambari.server.state.RefreshCommandConfiguration getRefreshCommandConfiguration()>() >>>>>>>> org.apache.ambari.server.state.StackInfo.getRefreshCommandConfiguration : $r1 = r0.<org.apache.ambari.server.state.StackInfo: org.apache.ambari.server.state.RefreshCommandConfiguration refreshCommandConfiguration>
org.apache.ambari.server.state.StackInfo.getRefreshCommandConfiguration : $r1 = r0.<org.apache.ambari.server.state.StackInfo: org.apache.ambari.server.state.RefreshCommandConfiguration refreshCommandConfiguration> >>>>>>>> org.apache.ambari.server.state.StackInfo.getRefreshCommandConfiguration : return $r1
org.apache.ambari.server.state.StackInfo.getRefreshCommandConfiguration : return $r1 >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : virtualinvoke $r20.<org.apache.ambari.server.state.RefreshCommandConfiguration: void addRefreshCommands(java.util.Map)>($r16)
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : virtualinvoke $r20.<org.apache.ambari.server.state.RefreshCommandConfiguration: void addRefreshCommands(java.util.Map)>($r16) >>>>>>>> org.apache.ambari.server.state.RefreshCommandConfiguration.addRefreshCommands : $r2 = r0.<org.apache.ambari.server.state.RefreshCommandConfiguration: java.util.Map propertyComponentCommandMap>
org.apache.ambari.server.state.RefreshCommandConfiguration.addRefreshCommands : $r2 = r0.<org.apache.ambari.server.state.RefreshCommandConfiguration: java.util.Map propertyComponentCommandMap> >>>>>>>> org.apache.ambari.server.state.RefreshCommandConfiguration.addRefreshCommands : if $r2 != null
org.apache.ambari.server.state.RefreshCommandConfiguration.addRefreshCommands : if $r2 != null >>>>>>>> org.apache.ambari.server.state.RefreshCommandConfiguration.addRefreshCommands : $r4 = new java.util.HashMap
org.apache.ambari.server.state.RefreshCommandConfiguration.addRefreshCommands : $r4 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.RefreshCommandConfiguration.addRefreshCommands : specialinvoke $r4.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.RefreshCommandConfiguration.addRefreshCommands : specialinvoke $r4.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.RefreshCommandConfiguration.addRefreshCommands : r0.<org.apache.ambari.server.state.RefreshCommandConfiguration: java.util.Map propertyComponentCommandMap> = $r4
org.apache.ambari.server.state.RefreshCommandConfiguration.addRefreshCommands : r0.<org.apache.ambari.server.state.RefreshCommandConfiguration: java.util.Map propertyComponentCommandMap> = $r4 >>>>>>>> org.apache.ambari.server.state.RefreshCommandConfiguration.addRefreshCommands : $r3 = r0.<org.apache.ambari.server.state.RefreshCommandConfiguration: java.util.Map propertyComponentCommandMap>
org.apache.ambari.server.state.RefreshCommandConfiguration.addRefreshCommands : $r3 = r0.<org.apache.ambari.server.state.RefreshCommandConfiguration: java.util.Map propertyComponentCommandMap> >>>>>>>> org.apache.ambari.server.state.RefreshCommandConfiguration.addRefreshCommands : interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>(r1)
org.apache.ambari.server.state.RefreshCommandConfiguration.addRefreshCommands : interfaceinvoke $r3.<java.util.Map: void putAll(java.util.Map)>(r1) >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : goto [?= $z0 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : goto [?= $z0 = interfaceinvoke r46.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r8 = r0.<org.apache.ambari.server.stack.StackModule: java.util.Map serviceModules>
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r8 = r0.<org.apache.ambari.server.stack.StackModule: java.util.Map serviceModules> >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r9 = interfaceinvoke $r8.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : r60 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : r60 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $z1 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $z1 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : if $z1 == 0
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : if $z1 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r12 = interfaceinvoke r60.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r12 = interfaceinvoke r60.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : r61 = (org.apache.ambari.server.stack.ServiceModule) $r12
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : r61 = (org.apache.ambari.server.stack.ServiceModule) $r12 >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r13 = virtualinvoke r61.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo getModuleInfo()>()
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r13 = virtualinvoke r61.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo getModuleInfo()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r14 = virtualinvoke $r13.<org.apache.ambari.server.state.ServiceInfo: java.util.List getProperties()>()
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r14 = virtualinvoke $r13.<org.apache.ambari.server.state.ServiceInfo: java.util.List getProperties()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : specialinvoke r0.<org.apache.ambari.server.stack.StackModule: void addDependedByProperties(java.util.Map,java.util.Collection)>($r5, $r14)
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : specialinvoke r0.<org.apache.ambari.server.stack.StackModule: void addDependedByProperties(java.util.Map,java.util.Collection)>($r5, $r14) >>>>>>>> org.apache.ambari.server.stack.StackModule.addDependedByProperties : r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.StackModule.addDependedByProperties : r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.addDependedByProperties : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.StackModule.addDependedByProperties : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.addDependedByProperties : if $z0 == 0
org.apache.ambari.server.stack.StackModule.addDependedByProperties : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : goto [?= $z1 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : goto [?= $z1 = interfaceinvoke r60.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r10 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r10 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r11 = virtualinvoke $r10.<org.apache.ambari.server.state.StackInfo: java.util.List getProperties()>()
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : $r11 = virtualinvoke $r10.<org.apache.ambari.server.state.StackInfo: java.util.List getProperties()>() >>>>>>>> org.apache.ambari.server.state.StackInfo.getProperties : $r1 = r0.<org.apache.ambari.server.state.StackInfo: java.util.List properties>
org.apache.ambari.server.state.StackInfo.getProperties : $r1 = r0.<org.apache.ambari.server.state.StackInfo: java.util.List properties> >>>>>>>> org.apache.ambari.server.state.StackInfo.getProperties : if $r1 != null
org.apache.ambari.server.state.StackInfo.getProperties : if $r1 != null >>>>>>>> org.apache.ambari.server.state.StackInfo.getProperties : $r3 = new java.util.ArrayList
org.apache.ambari.server.state.StackInfo.getProperties : $r3 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.StackInfo.getProperties : specialinvoke $r3.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.StackInfo.getProperties : specialinvoke $r3.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.StackInfo.getProperties : r0.<org.apache.ambari.server.state.StackInfo: java.util.List properties> = $r3
org.apache.ambari.server.state.StackInfo.getProperties : r0.<org.apache.ambari.server.state.StackInfo: java.util.List properties> = $r3 >>>>>>>> org.apache.ambari.server.state.StackInfo.getProperties : $r2 = r0.<org.apache.ambari.server.state.StackInfo: java.util.List properties>
org.apache.ambari.server.state.StackInfo.getProperties : $r2 = r0.<org.apache.ambari.server.state.StackInfo: java.util.List properties> >>>>>>>> org.apache.ambari.server.state.StackInfo.getProperties : return $r2
org.apache.ambari.server.state.StackInfo.getProperties : return $r2 >>>>>>>> org.apache.ambari.server.stack.StackModule.processPropertyDependencies : specialinvoke r0.<org.apache.ambari.server.stack.StackModule: void addDependedByProperties(java.util.Map,java.util.Collection)>($r5, $r11)
org.apache.ambari.server.stack.StackModule.processPropertyDependencies : specialinvoke r0.<org.apache.ambari.server.stack.StackModule: void addDependedByProperties(java.util.Map,java.util.Collection)>($r5, $r11) >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : specialinvoke r0.<org.apache.ambari.server.stack.StackModule: void validateBulkCommandComponents(java.util.Map)>(r2)
org.apache.ambari.server.stack.StackModule.resolve : specialinvoke r0.<org.apache.ambari.server.stack.StackModule: void validateBulkCommandComponents(java.util.Map)>(r2) >>>>>>>> org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : $r13 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : $r13 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : if null == $r13
org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : if null == $r13 >>>>>>>> org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : $r14 = new java.lang.StringBuilder
org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : $r14 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : $r15 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : $r15 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : $r16 = virtualinvoke $r15.<org.apache.ambari.server.state.StackInfo: java.lang.String getName()>()
org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : $r16 = virtualinvoke $r15.<org.apache.ambari.server.state.StackInfo: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16)
org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) >>>>>>>> org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : $r18 = <org.apache.ambari.server.stack.StackManager: java.lang.String PATH_DELIMITER>
org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : $r18 = <org.apache.ambari.server.stack.StackManager: java.lang.String PATH_DELIMITER> >>>>>>>> org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18)
org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) >>>>>>>> org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : $r20 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : $r20 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : $r21 = virtualinvoke $r20.<org.apache.ambari.server.state.StackInfo: java.lang.String getVersion()>()
org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : $r21 = virtualinvoke $r20.<org.apache.ambari.server.state.StackInfo: java.lang.String getVersion()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21)
org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : $r22 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) >>>>>>>> org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : r2 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : r2 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : $r23 = <org.apache.ambari.server.stack.StackModule: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : $r23 = <org.apache.ambari.server.stack.StackModule: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : interfaceinvoke $r23.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Validate bulk command components for: {}", r2)
org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : interfaceinvoke $r23.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Validate bulk command components for: {}", r2) >>>>>>>> org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : $r24 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : $r24 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : r3 = (org.apache.ambari.server.stack.StackModule) $r24
org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : r3 = (org.apache.ambari.server.stack.StackModule) $r24 >>>>>>>> org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : if null == r3
org.apache.ambari.server.stack.StackModule.validateBulkCommandComponents : if null == r3 >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : $r21 = <org.apache.ambari.server.stack.ModuleState: org.apache.ambari.server.stack.ModuleState RESOLVED>
org.apache.ambari.server.stack.StackModule.resolve : $r21 = <org.apache.ambari.server.stack.ModuleState: org.apache.ambari.server.stack.ModuleState RESOLVED> >>>>>>>> org.apache.ambari.server.stack.StackModule.resolve : r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.stack.ModuleState moduleState> = $r21
org.apache.ambari.server.stack.StackModule.resolve : r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.stack.ModuleState moduleState> = $r21 >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.createStackModule : return $r23
org.apache.ambari.server.stack.StackModuleTest.createStackModule : return $r23 >>>>>>>> org.apache.ambari.server.stack.StackModule.getModuleInfo : $r1 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo>
org.apache.ambari.server.stack.StackModule.getModuleInfo : $r1 = r0.<org.apache.ambari.server.stack.StackModule: org.apache.ambari.server.state.StackInfo stackInfo> >>>>>>>> org.apache.ambari.server.stack.StackModule.getModuleInfo : return $r1
org.apache.ambari.server.stack.StackModule.getModuleInfo : return $r1 >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.getIds : $r2 = <org.apache.ambari.server.state.RepositoryInfo: com.google.common.base.Function GET_REPO_ID_FUNCTION>
org.apache.ambari.server.stack.StackModuleTest.getIds : $r2 = <org.apache.ambari.server.state.RepositoryInfo: com.google.common.base.Function GET_REPO_ID_FUNCTION> >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.getIds : $r3 = staticinvoke <com.google.common.collect.Lists: java.util.List transform(java.util.List,com.google.common.base.Function)>(r1, $r2)
org.apache.ambari.server.stack.StackModuleTest.getIds : $r3 = staticinvoke <com.google.common.collect.Lists: java.util.List transform(java.util.List,com.google.common.base.Function)>(r1, $r2) >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.getIds : $r4 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>($r3)
org.apache.ambari.server.stack.StackModuleTest.getIds : $r4 = staticinvoke <com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet copyOf(java.util.Collection)>($r3) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$2.apply : $r2 = (org.apache.ambari.server.state.RepositoryInfo) r1
org.apache.ambari.server.state.RepositoryInfo$2.apply : $r2 = (org.apache.ambari.server.state.RepositoryInfo) r1 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$2.apply : $r3 = virtualinvoke r0.<org.apache.ambari.server.state.RepositoryInfo$2: java.lang.String apply(org.apache.ambari.server.state.RepositoryInfo)>($r2)
org.apache.ambari.server.state.RepositoryInfo$2.apply : $r3 = virtualinvoke r0.<org.apache.ambari.server.state.RepositoryInfo$2: java.lang.String apply(org.apache.ambari.server.state.RepositoryInfo)>($r2) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$2.apply : $r2 = staticinvoke <org.apache.ambari.server.state.RepositoryInfo: java.lang.String access$100(org.apache.ambari.server.state.RepositoryInfo)>(r1)
org.apache.ambari.server.state.RepositoryInfo$2.apply : $r2 = staticinvoke <org.apache.ambari.server.state.RepositoryInfo: java.lang.String access$100(org.apache.ambari.server.state.RepositoryInfo)>(r1) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.access$100 : $r1 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoId>
org.apache.ambari.server.state.RepositoryInfo.access$100 : $r1 = r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoId> >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.access$100 : return $r1
org.apache.ambari.server.state.RepositoryInfo.access$100 : return $r1 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$2.apply : return $r2
org.apache.ambari.server.state.RepositoryInfo$2.apply : return $r2 >>>>>>>> org.apache.ambari.server.state.RepositoryInfo$2.apply : return $r3
org.apache.ambari.server.state.RepositoryInfo$2.apply : return $r3 >>>>>>>> org.apache.ambari.server.stack.StackModuleTest.getIds : return $r4
