org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.setLoggingRequestHelperFactory : r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: org.apache.ambari.server.controller.logging.LoggingRequestHelperFactory loggingRequestHelperFactory> = r1 >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.setInjector : r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: com.google.inject.Injector injector> = r1
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.setInjector : r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: com.google.inject.Injector injector> = r1 >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.setConfiguration : r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: org.apache.ambari.server.configuration.Configuration ambariServerConfiguration> = r1
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.setConfiguration : r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: org.apache.ambari.server.configuration.Configuration ambariServerConfiguration> = r1 >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $r1 = <org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $r1 = <org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String)>("Initializing caches")
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : interfaceinvoke $r1.<org.slf4j.Logger: void debug(java.lang.String)>("Initializing caches") >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $r2 = r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: org.apache.ambari.server.configuration.Configuration ambariServerConfiguration>
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $r2 = r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: org.apache.ambari.server.configuration.Configuration ambariServerConfiguration> >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : i0 = virtualinvoke $r2.<org.apache.ambari.server.configuration.Configuration: int getLogSearchMetadataCacheExpireTimeout()>()
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : i0 = virtualinvoke $r2.<org.apache.ambari.server.configuration.Configuration: int getLogSearchMetadataCacheExpireTimeout()>() >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $r3 = <org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $r3 = <org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Caches configured with a max expire timeout of {} hours.", $r4)
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : interfaceinvoke $r3.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Caches configured with a max expire timeout of {} hours.", $r4) >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $r5 = staticinvoke <com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder newBuilder()>()
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $r5 = staticinvoke <com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder newBuilder()>() >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $l1 = (long) i0
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $l1 = (long) i0 >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit HOURS>
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit HOURS> >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $r7 = virtualinvoke $r5.<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>($l1, $r6)
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $r7 = virtualinvoke $r5.<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>($l1, $r6) >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $r8 = virtualinvoke $r7.<com.google.common.cache.CacheBuilder: com.google.common.cache.Cache build()>()
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $r8 = virtualinvoke $r7.<com.google.common.cache.CacheBuilder: com.google.common.cache.Cache build()>() >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: com.google.common.cache.Cache logFileNameCache> = $r8
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: com.google.common.cache.Cache logFileNameCache> = $r8 >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $r9 = staticinvoke <com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder newBuilder()>()
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $r9 = staticinvoke <com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder newBuilder()>() >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $l2 = (long) i0
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $l2 = (long) i0 >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $r10 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit HOURS>
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $r10 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit HOURS> >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $r11 = virtualinvoke $r9.<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>($l2, $r10)
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $r11 = virtualinvoke $r9.<com.google.common.cache.CacheBuilder: com.google.common.cache.CacheBuilder expireAfterWrite(long,java.util.concurrent.TimeUnit)>($l2, $r10) >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $r12 = virtualinvoke $r11.<com.google.common.cache.CacheBuilder: com.google.common.cache.Cache build()>()
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $r12 = virtualinvoke $r11.<com.google.common.cache.CacheBuilder: com.google.common.cache.Cache build()>() >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: com.google.common.cache.Cache logFileTailURICache> = $r12
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: com.google.common.cache.Cache logFileTailURICache> = $r12 >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $r13 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>()
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : $r13 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ExecutorService newSingleThreadExecutor()>() >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: java.util.concurrent.Executor executor> = $r13
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.doStart : r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: java.util.concurrent.Executor executor> = $r13 >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.setExecutor : r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: java.util.concurrent.Executor executor> = r1
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.setExecutor : r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: java.util.concurrent.Executor executor> = r1 >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getComponentRequestFailureCounts : $r1 = r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: java.util.Map componentRequestFailureCounts>
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getComponentRequestFailureCounts : $r1 = r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: java.util.Map componentRequestFailureCounts> >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getComponentRequestFailureCounts : return $r1
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getComponentRequestFailureCounts : return $r1 >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getCurrentRequests : $r1 = r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: java.util.Set currentRequests>
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getCurrentRequests : $r1 = r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: java.util.Set currentRequests> >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getCurrentRequests : return $r1
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getCurrentRequests : return $r1 >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : r4 = staticinvoke <org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: java.lang.String generateKey(java.lang.String,java.lang.String)>(r1, r2)
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : r4 = staticinvoke <org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: java.lang.String generateKey(java.lang.String,java.lang.String)>(r1, r2) >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.generateKey : $r2 = new java.lang.StringBuilder
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.generateKey : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.generateKey : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.generateKey : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.generateKey : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.generateKey : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.generateKey : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+")
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.generateKey : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+") >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.generateKey : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.generateKey : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.generateKey : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.generateKey : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.generateKey : return $r6
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.generateKey : return $r6 >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : $r6 = r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: com.google.common.cache.Cache logFileNameCache>
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : $r6 = r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: com.google.common.cache.Cache logFileNameCache> >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : $r7 = interfaceinvoke $r6.<com.google.common.cache.Cache: java.lang.Object getIfPresent(java.lang.Object)>(r4)
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : $r7 = interfaceinvoke $r6.<com.google.common.cache.Cache: java.lang.Object getIfPresent(java.lang.Object)>(r4) >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : r5 = (java.util.Set) $r7
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : r5 = (java.util.Set) $r7 >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : if r5 == null
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : if r5 == null >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : $r8 = r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: java.util.Map componentRequestFailureCounts>
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : $r8 = r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: java.util.Map componentRequestFailureCounts> >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : $z0 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : $z0 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : if $z0 == 0
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : if $z0 == 0 >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : $r13 = r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: java.util.Map componentRequestFailureCounts>
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : $r13 = r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: java.util.Map componentRequestFailureCounts> >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : $r15 = (java.util.concurrent.atomic.AtomicInteger) $r14
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : $r15 = (java.util.concurrent.atomic.AtomicInteger) $r14 >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : $i0 = virtualinvoke $r15.<java.util.concurrent.atomic.AtomicInteger: int get()>()
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : $i0 = virtualinvoke $r15.<java.util.concurrent.atomic.AtomicInteger: int get()>() >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : $i1 = <org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: int MAX_RETRIES_FOR_FAILED_METADATA_REQUEST>
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : $i1 = <org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: int MAX_RETRIES_FOR_FAILED_METADATA_REQUEST> >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : if $i0 >= $i1
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : if $i0 >= $i1 >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : $r9 = r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: java.util.Set currentRequests>
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : $r9 = r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: java.util.Set currentRequests> >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : $z1 = interfaceinvoke $r9.<java.util.Set: boolean contains(java.lang.Object)>(r4)
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : $z1 = interfaceinvoke $r9.<java.util.Set: boolean contains(java.lang.Object)>(r4) >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : if $z1 == 0
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : if $z1 == 0 >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : $r10 = <org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : $r10 = <org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("LogFileNames result for key = {} not in cache, queueing up remote request", r4)
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : interfaceinvoke $r10.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("LogFileNames result for key = {} not in cache, queueing up remote request", r4) >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : $r11 = r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: java.util.Set currentRequests>
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : $r11 = r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: java.util.Set currentRequests> >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : interfaceinvoke $r11.<java.util.Set: boolean add(java.lang.Object)>(r4)
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : interfaceinvoke $r11.<java.util.Set: boolean add(java.lang.Object)>(r4) >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : specialinvoke r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: void startLogSearchFileNameRequest(java.lang.String,java.lang.String,java.lang.String)>(r2, r1, r3)
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : specialinvoke r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: void startLogSearchFileNameRequest(java.lang.String,java.lang.String,java.lang.String)>(r2, r1, r3) >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.startLogSearchFileNameRequest : $r6 = r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: java.util.concurrent.Executor executor>
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.startLogSearchFileNameRequest : $r6 = r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: java.util.concurrent.Executor executor> >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.startLogSearchFileNameRequest : $r4 = new org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService$LogSearchFileNameRequestRunnable
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.startLogSearchFileNameRequest : $r4 = new org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService$LogSearchFileNameRequestRunnable >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.startLogSearchFileNameRequest : $r7 = r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: com.google.common.cache.Cache logFileNameCache>
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.startLogSearchFileNameRequest : $r7 = r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: com.google.common.cache.Cache logFileNameCache> >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.startLogSearchFileNameRequest : $r8 = r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: java.util.Set currentRequests>
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.startLogSearchFileNameRequest : $r8 = r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: java.util.Set currentRequests> >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.startLogSearchFileNameRequest : $r5 = r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: com.google.inject.Injector injector>
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.startLogSearchFileNameRequest : $r5 = r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: com.google.inject.Injector injector> >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.startLogSearchFileNameRequest : $r9 = interfaceinvoke $r5.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/apache/ambari/server/controller/logging/LoggingRequestHelperFactory;")
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.startLogSearchFileNameRequest : $r9 = interfaceinvoke $r5.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/apache/ambari/server/controller/logging/LoggingRequestHelperFactory;") >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.startLogSearchFileNameRequest : $r11 = (org.apache.ambari.server.controller.logging.LoggingRequestHelperFactory) $r9
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.startLogSearchFileNameRequest : $r11 = (org.apache.ambari.server.controller.logging.LoggingRequestHelperFactory) $r9 >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.startLogSearchFileNameRequest : $r10 = r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: java.util.Map componentRequestFailureCounts>
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.startLogSearchFileNameRequest : $r10 = r0.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService: java.util.Map componentRequestFailureCounts> >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.startLogSearchFileNameRequest : specialinvoke $r4.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService$LogSearchFileNameRequestRunnable: void <init>(java.lang.String,java.lang.String,java.lang.String,com.google.common.cache.Cache,java.util.Set,org.apache.ambari.server.controller.logging.LoggingRequestHelperFactory,java.util.Map)>(r1, r2, r3, $r7, $r8, $r11, $r10)
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.startLogSearchFileNameRequest : specialinvoke $r4.<org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService$LogSearchFileNameRequestRunnable: void <init>(java.lang.String,java.lang.String,java.lang.String,com.google.common.cache.Cache,java.util.Set,org.apache.ambari.server.controller.logging.LoggingRequestHelperFactory,java.util.Map)>(r1, r2, r3, $r7, $r8, $r11, $r10) >>>>>>>> org.apache.ambari.server.controller.AmbariServer.getController : $r0 = <org.apache.ambari.server.controller.AmbariServer: org.apache.ambari.server.controller.AmbariManagementController clusterController>
org.apache.ambari.server.controller.AmbariServer.getController : $r0 = <org.apache.ambari.server.controller.AmbariServer: org.apache.ambari.server.controller.AmbariManagementController clusterController> >>>>>>>> org.apache.ambari.server.controller.AmbariServer.getController : return $r0
org.apache.ambari.server.controller.AmbariServer.getController : return $r0 >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.startLogSearchFileNameRequest : interfaceinvoke $r6.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4)
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.startLogSearchFileNameRequest : interfaceinvoke $r6.<java.util.concurrent.Executor: void execute(java.lang.Runnable)>($r4) >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : goto [?= return null]
org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : goto [?= return null] >>>>>>>> org.apache.ambari.server.controller.logging.LogSearchDataRetrievalService.getLogFileNames : return null
