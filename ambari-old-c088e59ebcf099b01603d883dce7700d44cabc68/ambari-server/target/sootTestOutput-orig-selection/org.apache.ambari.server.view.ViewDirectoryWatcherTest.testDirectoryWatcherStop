org.apache.ambari.server.view.ViewDirectoryWatcher.loggingHook : $r1 = new org.apache.ambari.server.view.ViewDirectoryWatcher$1 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.loggingHook : specialinvoke $r1.<org.apache.ambari.server.view.ViewDirectoryWatcher$1: void <init>(org.apache.ambari.server.view.ViewDirectoryWatcher)>(r0)
org.apache.ambari.server.view.ViewDirectoryWatcher.loggingHook : specialinvoke $r1.<org.apache.ambari.server.view.ViewDirectoryWatcher$1: void <init>(org.apache.ambari.server.view.ViewDirectoryWatcher)>(r0) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.loggingHook : return $r1
org.apache.ambari.server.view.ViewDirectoryWatcher.loggingHook : return $r1 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.start : r6 = specialinvoke r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.nio.file.Path buildWatchService()>()
org.apache.ambari.server.view.ViewDirectoryWatcher.start : r6 = specialinvoke r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.nio.file.Path buildWatchService()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r3 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: org.apache.ambari.server.configuration.Configuration configuration>
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r3 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: org.apache.ambari.server.configuration.Configuration configuration> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : r1 = virtualinvoke $r3.<org.apache.ambari.server.configuration.Configuration: java.io.File getViewsDir()>()
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : r1 = virtualinvoke $r3.<org.apache.ambari.server.configuration.Configuration: java.io.File getViewsDir()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r4 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r4 = virtualinvoke r1.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r5 = newarray (java.lang.String)[0]
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r5 = newarray (java.lang.String)[0] >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : r2 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($r4, $r5)
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : r2 = staticinvoke <java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])>($r4, $r5) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r6 = interfaceinvoke r2.<java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>()
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r6 = interfaceinvoke r2.<java.nio.file.Path: java.nio.file.FileSystem getFileSystem()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r7 = virtualinvoke $r6.<java.nio.file.FileSystem: java.nio.file.WatchService newWatchService()>()
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r7 = virtualinvoke $r6.<java.nio.file.FileSystem: java.nio.file.WatchService newWatchService()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest$2.apply : $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1)
org.apache.ambari.server.view.ViewDirectoryWatcherTest$2.apply : $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcherTest$2.apply : return $r3
org.apache.ambari.server.view.ViewDirectoryWatcherTest$2.apply : return $r3 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : goto [?= $z3 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : goto [?= $z3 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $z3 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $z3 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : if $z3 == 0
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : if $z3 == 0 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : goto [?= (branch)]
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : goto [?= $z4 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : goto [?= $z4 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $z4 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $z4 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : if $z4 == 0
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : if $z4 == 0 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $z0 = interfaceinvoke r39.<java.nio.file.WatchKey: boolean reset()>()
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $z0 = interfaceinvoke r39.<java.nio.file.WatchKey: boolean reset()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : if $z0 != 0
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : if $z0 != 0 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r10 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: org.slf4j.Logger access$000()>()
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r10 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.access$000 : $r0 = <org.apache.ambari.server.view.ViewDirectoryWatcher: org.slf4j.Logger LOG>
org.apache.ambari.server.view.ViewDirectoryWatcher.access$000 : $r0 = <org.apache.ambari.server.view.ViewDirectoryWatcher: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.access$000 : return $r0
org.apache.ambari.server.view.ViewDirectoryWatcher.access$000 : return $r0 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : interfaceinvoke $r10.<org.slf4j.Logger: void error(java.lang.String)>("The watch key could not be reset, Directory watcher will not run anymore")
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : interfaceinvoke $r10.<org.slf4j.Logger: void error(java.lang.String)>("The watch key could not be reset, Directory watcher will not run anymore") >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : goto [?= return]
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : goto [?= return] >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.nio.file.WatchService watchService> = $r7
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.nio.file.WatchService watchService> = $r7 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r10 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.nio.file.WatchService watchService>
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r10 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.nio.file.WatchService watchService> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r8 = newarray (java.nio.file.WatchEvent$Kind)[1]
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r8 = newarray (java.nio.file.WatchEvent$Kind)[1] >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r9 = <java.nio.file.StandardWatchEventKinds: java.nio.file.WatchEvent$Kind ENTRY_CREATE>
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r9 = <java.nio.file.StandardWatchEventKinds: java.nio.file.WatchEvent$Kind ENTRY_CREATE> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r8[0] = $r9
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : $r8[0] = $r9 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : interfaceinvoke r2.<java.nio.file.Path: java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind[])>($r10, $r8)
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : interfaceinvoke r2.<java.nio.file.Path: java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind[])>($r10, $r8) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : return r2
org.apache.ambari.server.view.ViewDirectoryWatcher.buildWatchService : return r2 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.start : r1 = specialinvoke r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.lang.Runnable startWatching(java.nio.file.Path)>(r6)
org.apache.ambari.server.view.ViewDirectoryWatcher.start : r1 = specialinvoke r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.lang.Runnable startWatching(java.nio.file.Path)>(r6) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.startWatching : $r2 = new org.apache.ambari.server.view.ViewDirectoryWatcher$2
org.apache.ambari.server.view.ViewDirectoryWatcher.startWatching : $r2 = new org.apache.ambari.server.view.ViewDirectoryWatcher$2 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.startWatching : specialinvoke $r2.<org.apache.ambari.server.view.ViewDirectoryWatcher$2: void <init>(org.apache.ambari.server.view.ViewDirectoryWatcher,java.nio.file.Path)>(r0, r1)
org.apache.ambari.server.view.ViewDirectoryWatcher.startWatching : specialinvoke $r2.<org.apache.ambari.server.view.ViewDirectoryWatcher$2: void <init>(org.apache.ambari.server.view.ViewDirectoryWatcher,java.nio.file.Path)>(r0, r1) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.startWatching : return $r2
org.apache.ambari.server.view.ViewDirectoryWatcher.startWatching : return $r2 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.start : $r2 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.util.concurrent.ExecutorService executorService>
org.apache.ambari.server.view.ViewDirectoryWatcher.start : $r2 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.util.concurrent.ExecutorService executorService> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.start : $r3 = interfaceinvoke $r2.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>(r1)
org.apache.ambari.server.view.ViewDirectoryWatcher.start : $r3 = interfaceinvoke $r2.<java.util.concurrent.ExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)>(r1) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.start : r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.util.concurrent.Future watchTask> = $r3
org.apache.ambari.server.view.ViewDirectoryWatcher.start : r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.util.concurrent.Future watchTask> = $r3 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.start : goto [?= return]
org.apache.ambari.server.view.ViewDirectoryWatcher.start : goto [?= return] >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r6 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher$2: org.apache.ambari.server.view.ViewDirectoryWatcher this$0>
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r6 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher$2: org.apache.ambari.server.view.ViewDirectoryWatcher this$0> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r7 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: java.nio.file.WatchService access$100(org.apache.ambari.server.view.ViewDirectoryWatcher)>($r6)
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : $r7 = staticinvoke <org.apache.ambari.server.view.ViewDirectoryWatcher: java.nio.file.WatchService access$100(org.apache.ambari.server.view.ViewDirectoryWatcher)>($r6) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.access$100 : $r1 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.nio.file.WatchService watchService>
org.apache.ambari.server.view.ViewDirectoryWatcher.access$100 : $r1 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.nio.file.WatchService watchService> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.access$100 : return $r1
org.apache.ambari.server.view.ViewDirectoryWatcher.access$100 : return $r1 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : r39 = interfaceinvoke $r7.<java.nio.file.WatchService: java.nio.file.WatchKey take()>()
org.apache.ambari.server.view.ViewDirectoryWatcher$2.run : r39 = interfaceinvoke $r7.<java.nio.file.WatchService: java.nio.file.WatchKey take()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.stop : $r1 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.util.concurrent.Future watchTask>
org.apache.ambari.server.view.ViewDirectoryWatcher.stop : $r1 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.util.concurrent.Future watchTask> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.stop : interfaceinvoke $r1.<java.util.concurrent.Future: boolean cancel(boolean)>(1)
org.apache.ambari.server.view.ViewDirectoryWatcher.stop : interfaceinvoke $r1.<java.util.concurrent.Future: boolean cancel(boolean)>(1) >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.isRunning : $r1 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.util.concurrent.Future watchTask>
org.apache.ambari.server.view.ViewDirectoryWatcher.isRunning : $r1 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.util.concurrent.Future watchTask> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.isRunning : if $r1 == null
org.apache.ambari.server.view.ViewDirectoryWatcher.isRunning : if $r1 == null >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.isRunning : $r2 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.util.concurrent.Future watchTask>
org.apache.ambari.server.view.ViewDirectoryWatcher.isRunning : $r2 = r0.<org.apache.ambari.server.view.ViewDirectoryWatcher: java.util.concurrent.Future watchTask> >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.isRunning : $z0 = interfaceinvoke $r2.<java.util.concurrent.Future: boolean isDone()>()
org.apache.ambari.server.view.ViewDirectoryWatcher.isRunning : $z0 = interfaceinvoke $r2.<java.util.concurrent.Future: boolean isDone()>() >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.isRunning : if $z0 != 0
org.apache.ambari.server.view.ViewDirectoryWatcher.isRunning : if $z0 != 0 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.isRunning : $z1 = 0
org.apache.ambari.server.view.ViewDirectoryWatcher.isRunning : $z1 = 0 >>>>>>>> org.apache.ambari.server.view.ViewDirectoryWatcher.isRunning : return $z1
