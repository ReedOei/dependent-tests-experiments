org.apache.ambari.server.controller.AmbariManagementControllerImplTest.setupAuthentication : $r1 = new org.apache.ambari.server.security.authorization.internal.InternalAuthenticationToken >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImplTest.setupAuthentication : specialinvoke $r1.<org.apache.ambari.server.security.authorization.internal.InternalAuthenticationToken: void <init>(java.lang.String)>("admin")
org.apache.ambari.server.controller.AmbariManagementControllerImplTest.setupAuthentication : specialinvoke $r1.<org.apache.ambari.server.security.authorization.internal.InternalAuthenticationToken: void <init>(java.lang.String)>("admin") >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImplTest.setupAuthentication : virtualinvoke $r1.<org.apache.ambari.server.security.authorization.internal.InternalAuthenticationToken: void setAuthenticated(boolean)>(1)
org.apache.ambari.server.controller.AmbariManagementControllerImplTest.setupAuthentication : virtualinvoke $r1.<org.apache.ambari.server.security.authorization.internal.InternalAuthenticationToken: void setAuthenticated(boolean)>(1) >>>>>>>> org.apache.ambari.server.security.authorization.internal.InternalAuthenticationToken.setAuthenticated : r0.<org.apache.ambari.server.security.authorization.internal.InternalAuthenticationToken: boolean authenticated> = z0
org.apache.ambari.server.security.authorization.internal.InternalAuthenticationToken.setAuthenticated : r0.<org.apache.ambari.server.security.authorization.internal.InternalAuthenticationToken: boolean authenticated> = z0 >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImplTest.setupAuthentication : $r2 = staticinvoke <org.springframework.security.core.context.SecurityContextHolder: org.springframework.security.core.context.SecurityContext getContext()>()
org.apache.ambari.server.controller.AmbariManagementControllerImplTest.setupAuthentication : $r2 = staticinvoke <org.springframework.security.core.context.SecurityContextHolder: org.springframework.security.core.context.SecurityContext getContext()>() >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImplTest.setupAuthentication : interfaceinvoke $r2.<org.springframework.security.core.context.SecurityContext: void setAuthentication(org.springframework.security.core.Authentication)>($r1)
org.apache.ambari.server.controller.AmbariManagementControllerImplTest.setupAuthentication : interfaceinvoke $r2.<org.springframework.security.core.context.SecurityContext: void setAuthentication(org.springframework.security.core.Authentication)>($r1) >>>>>>>> org.apache.ambari.server.state.RepositoryInfo.setRepoName : r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoName> = r1
org.apache.ambari.server.state.RepositoryInfo.setRepoName : r0.<org.apache.ambari.server.state.RepositoryInfo: java.lang.String repoName> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureMandatoryServiceProperties : $r2 = specialinvoke r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map ensureVisibilityServiceProperties(java.util.Map)>(r1)
org.apache.ambari.server.state.ServiceInfo.ensureMandatoryServiceProperties : $r2 = specialinvoke r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map ensureVisibilityServiceProperties(java.util.Map)>(r1) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r2 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r2 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r3 = virtualinvoke $r2.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r3 = virtualinvoke $r2.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r3)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r3) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z0 != 0
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z0 != 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r18 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r18 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r19 = virtualinvoke $r18.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r19 = virtualinvoke $r18.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r20 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r20 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r21 = virtualinvoke $r20.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r21 = virtualinvoke $r20.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r21)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r21) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r4 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r4 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r5 = virtualinvoke $r4.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r5 = virtualinvoke $r4.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z1 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r5)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z1 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r5) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z1 != 0
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z1 != 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r13 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r13 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r14 = virtualinvoke $r13.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r14 = virtualinvoke $r13.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r15 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r15 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r16 = virtualinvoke $r15.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r16 = virtualinvoke $r15.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r16)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r16) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r6 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r6 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r7 = virtualinvoke $r6.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r7 = virtualinvoke $r6.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z2 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r7)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z2 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r7) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z2 != 0
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z2 != 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r8 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r8 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r9 = virtualinvoke $r8.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r9 = virtualinvoke $r8.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r10 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r10 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r11 = virtualinvoke $r10.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r11 = virtualinvoke $r10.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r11)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r11) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : return r1
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : return r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureMandatoryServiceProperties : return $r2
org.apache.ambari.server.state.ServiceInfo.ensureMandatoryServiceProperties : return $r2 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setRestartRequiredAfterRackChange : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean restartRequiredAfterRackChange> = r1
org.apache.ambari.server.state.ServiceInfo.setRestartRequiredAfterRackChange : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean restartRequiredAfterRackChange> = r1 >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImplTest.setAmbariMetaInfo : r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>()
org.apache.ambari.server.controller.AmbariManagementControllerImplTest.setAmbariMetaInfo : r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImplTest.setAmbariMetaInfo : r4 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("ambariMetaInfo")
org.apache.ambari.server.controller.AmbariManagementControllerImplTest.setAmbariMetaInfo : r4 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("ambariMetaInfo") >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImplTest.setAmbariMetaInfo : virtualinvoke r4.<java.lang.reflect.Field: void setAccessible(boolean)>(1)
org.apache.ambari.server.controller.AmbariManagementControllerImplTest.setAmbariMetaInfo : virtualinvoke r4.<java.lang.reflect.Field: void setAccessible(boolean)>(1) >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImplTest.setAmbariMetaInfo : virtualinvoke r4.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r2, r1)
org.apache.ambari.server.controller.AmbariManagementControllerImplTest.setAmbariMetaInfo : virtualinvoke r4.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r2, r1) >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $r13 = r0.<org.apache.ambari.server.controller.AmbariManagementControllerImpl: org.apache.ambari.server.state.Clusters clusters>
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $r13 = r0.<org.apache.ambari.server.controller.AmbariManagementControllerImpl: org.apache.ambari.server.state.Clusters clusters> >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : r2 = interfaceinvoke $r13.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r1)
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : r2 = interfaceinvoke $r13.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $r14 = interfaceinvoke r2.<org.apache.ambari.server.state.Cluster: java.util.Map getServices()>()
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $r14 = interfaceinvoke r2.<org.apache.ambari.server.state.Cluster: java.util.Map getServices()>() >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $r15 = interfaceinvoke $r14.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $r15 = interfaceinvoke $r14.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : r3 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : r3 = interfaceinvoke $r15.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : if $z3 == 0
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : if $z3 == 0 >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $r16 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $r16 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : r4 = (org.apache.ambari.server.state.Service) $r16
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : r4 = (org.apache.ambari.server.state.Service) $r16 >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $r17 = r0.<org.apache.ambari.server.controller.AmbariManagementControllerImpl: org.apache.ambari.server.api.services.AmbariMetaInfo ambariMetaInfo>
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $r17 = r0.<org.apache.ambari.server.controller.AmbariManagementControllerImpl: org.apache.ambari.server.api.services.AmbariMetaInfo ambariMetaInfo> >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : r5 = virtualinvoke $r17.<org.apache.ambari.server.api.services.AmbariMetaInfo: org.apache.ambari.server.state.ServiceInfo getService(org.apache.ambari.server.state.Service)>(r4)
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : r5 = virtualinvoke $r17.<org.apache.ambari.server.api.services.AmbariMetaInfo: org.apache.ambari.server.state.ServiceInfo getService(org.apache.ambari.server.state.Service)>(r4) >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $r18 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean isRestartRequiredAfterRackChange()>()
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $r18 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean isRestartRequiredAfterRackChange()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.isRestartRequiredAfterRackChange : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean restartRequiredAfterRackChange>
org.apache.ambari.server.state.ServiceInfo.isRestartRequiredAfterRackChange : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean restartRequiredAfterRackChange> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.isRestartRequiredAfterRackChange : return $r1
org.apache.ambari.server.state.ServiceInfo.isRestartRequiredAfterRackChange : return $r1 >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $z0 = staticinvoke <org.apache.commons.lang.BooleanUtils: boolean toBoolean(java.lang.Boolean)>($r18)
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $z0 = staticinvoke <org.apache.commons.lang.BooleanUtils: boolean toBoolean(java.lang.Boolean)>($r18) >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : if $z0 != 0
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : if $z0 != 0 >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : r6 = interfaceinvoke r4.<org.apache.ambari.server.state.Service: java.util.Map getServiceComponents()>()
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : r6 = interfaceinvoke r4.<org.apache.ambari.server.state.Service: java.util.Map getServiceComponents()>() >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $r19 = interfaceinvoke r6.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $r19 = interfaceinvoke r6.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : r7 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : r7 = interfaceinvoke $r19.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : if $z1 == 0
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : if $z1 == 0 >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $r20 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $r20 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : r8 = (org.apache.ambari.server.state.ServiceComponent) $r20
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : r8 = (org.apache.ambari.server.state.ServiceComponent) $r20 >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : r9 = interfaceinvoke r8.<org.apache.ambari.server.state.ServiceComponent: java.util.Map getServiceComponentHosts()>()
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : r9 = interfaceinvoke r8.<org.apache.ambari.server.state.ServiceComponent: java.util.Map getServiceComponentHosts()>() >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $r21 = interfaceinvoke r9.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $r21 = interfaceinvoke r9.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : r10 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : r10 = interfaceinvoke $r21.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $z2 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $z2 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : if $z2 == 0
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : if $z2 == 0 >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $r22 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $r22 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : r11 = (java.util.Map$Entry) $r22
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : r11 = (java.util.Map$Entry) $r22 >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $r23 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : $r23 = interfaceinvoke r11.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : r12 = (org.apache.ambari.server.state.ServiceComponentHost) $r23
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : r12 = (org.apache.ambari.server.state.ServiceComponentHost) $r23 >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : interfaceinvoke r12.<org.apache.ambari.server.state.ServiceComponentHost: void setRestartRequired(boolean)>(1)
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : interfaceinvoke r12.<org.apache.ambari.server.state.ServiceComponentHost: void setRestartRequired(boolean)>(1) >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : goto [?= $z2 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : goto [?= $z2 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : goto [?= $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : goto [?= $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.controller.AmbariManagementControllerImpl.registerRackChange : goto [?= $z3 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
