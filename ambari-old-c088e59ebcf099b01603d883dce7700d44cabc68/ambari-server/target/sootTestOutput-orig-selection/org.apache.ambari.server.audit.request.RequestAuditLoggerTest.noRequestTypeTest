org.apache.ambari.server.audit.request.RequestAuditLoggerTest.beforeClass : $r1 = newarray (com.google.inject.Module)[1] >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.beforeClass : $r2 = new org.apache.ambari.server.audit.request.RequestAuditLogModule
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.beforeClass : $r2 = new org.apache.ambari.server.audit.request.RequestAuditLogModule >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.beforeClass : specialinvoke $r2.<org.apache.ambari.server.audit.request.RequestAuditLogModule: void <init>()>()
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.beforeClass : specialinvoke $r2.<org.apache.ambari.server.audit.request.RequestAuditLogModule: void <init>()>() >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.beforeClass : $r1[0] = $r2
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.beforeClass : $r1[0] = $r2 >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.beforeClass : r0 = staticinvoke <com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Module[])>($r1)
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.beforeClass : r0 = staticinvoke <com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Module[])>($r1) >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLogModule.configure : $r2 = virtualinvoke r0.<org.apache.ambari.server.audit.request.RequestAuditLogModule: com.google.inject.Binder binder()>()
org.apache.ambari.server.audit.request.RequestAuditLogModule.configure : $r2 = virtualinvoke r0.<org.apache.ambari.server.audit.request.RequestAuditLogModule: com.google.inject.Binder binder()>() >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLogModule.configure : r1 = staticinvoke <com.google.inject.multibindings.Multibinder: com.google.inject.multibindings.Multibinder newSetBinder(com.google.inject.Binder,java.lang.Class)>($r2, class "Lorg/apache/ambari/server/audit/request/eventcreator/RequestAuditEventCreator;")
org.apache.ambari.server.audit.request.RequestAuditLogModule.configure : r1 = staticinvoke <com.google.inject.multibindings.Multibinder: com.google.inject.multibindings.Multibinder newSetBinder(com.google.inject.Binder,java.lang.Class)>($r2, class "Lorg/apache/ambari/server/audit/request/eventcreator/RequestAuditEventCreator;") >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLogModule.configure : $r3 = virtualinvoke r1.<com.google.inject.multibindings.Multibinder: com.google.inject.binder.LinkedBindingBuilder addBinding()>()
org.apache.ambari.server.audit.request.RequestAuditLogModule.configure : $r3 = virtualinvoke r1.<com.google.inject.multibindings.Multibinder: com.google.inject.binder.LinkedBindingBuilder addBinding()>() >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLogModule.configure : interfaceinvoke $r3.<com.google.inject.binder.LinkedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/audit/request/AllPostAndPutCreator;")
org.apache.ambari.server.audit.request.RequestAuditLogModule.configure : interfaceinvoke $r3.<com.google.inject.binder.LinkedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/audit/request/AllPostAndPutCreator;") >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLogModule.configure : $r5 = virtualinvoke r1.<com.google.inject.multibindings.Multibinder: com.google.inject.binder.LinkedBindingBuilder addBinding()>()
org.apache.ambari.server.audit.request.RequestAuditLogModule.configure : $r5 = virtualinvoke r1.<com.google.inject.multibindings.Multibinder: com.google.inject.binder.LinkedBindingBuilder addBinding()>() >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLogModule.configure : interfaceinvoke $r5.<com.google.inject.binder.LinkedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/audit/request/AllGetCreator;")
org.apache.ambari.server.audit.request.RequestAuditLogModule.configure : interfaceinvoke $r5.<com.google.inject.binder.LinkedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/audit/request/AllGetCreator;") >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLogModule.configure : $r7 = virtualinvoke r1.<com.google.inject.multibindings.Multibinder: com.google.inject.binder.LinkedBindingBuilder addBinding()>()
org.apache.ambari.server.audit.request.RequestAuditLogModule.configure : $r7 = virtualinvoke r1.<com.google.inject.multibindings.Multibinder: com.google.inject.binder.LinkedBindingBuilder addBinding()>() >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLogModule.configure : interfaceinvoke $r7.<com.google.inject.binder.LinkedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/audit/request/PutHostComponentCreator;")
org.apache.ambari.server.audit.request.RequestAuditLogModule.configure : interfaceinvoke $r7.<com.google.inject.binder.LinkedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/audit/request/PutHostComponentCreator;") >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLogModule.configure : $r9 = virtualinvoke r0.<org.apache.ambari.server.audit.request.RequestAuditLogModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/audit/AuditLogger;")
org.apache.ambari.server.audit.request.RequestAuditLogModule.configure : $r9 = virtualinvoke r0.<org.apache.ambari.server.audit.request.RequestAuditLogModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/audit/AuditLogger;") >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLogModule.configure : $r10 = staticinvoke <org.easymock.EasyMock: java.lang.Object createStrictMock(java.lang.Class)>(class "Lorg/apache/ambari/server/audit/AuditLoggerDefaultImpl;")
org.apache.ambari.server.audit.request.RequestAuditLogModule.configure : $r10 = staticinvoke <org.easymock.EasyMock: java.lang.Object createStrictMock(java.lang.Class)>(class "Lorg/apache/ambari/server/audit/AuditLoggerDefaultImpl;") >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLogModule.configure : interfaceinvoke $r9.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r10)
org.apache.ambari.server.audit.request.RequestAuditLogModule.configure : interfaceinvoke $r9.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r10) >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLogModule.configure : $r11 = virtualinvoke r0.<org.apache.ambari.server.audit.request.RequestAuditLogModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/audit/request/RequestAuditLogger;")
org.apache.ambari.server.audit.request.RequestAuditLogModule.configure : $r11 = virtualinvoke r0.<org.apache.ambari.server.audit.request.RequestAuditLogModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/audit/request/RequestAuditLogger;") >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLogModule.configure : interfaceinvoke $r11.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/audit/request/RequestAuditLoggerImpl;")
org.apache.ambari.server.audit.request.RequestAuditLogModule.configure : interfaceinvoke $r11.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/audit/request/RequestAuditLoggerImpl;") >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.beforeClass : $r3 = interfaceinvoke r0.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/apache/ambari/server/audit/request/RequestAuditLogger;")
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.beforeClass : $r3 = interfaceinvoke r0.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/apache/ambari/server/audit/request/RequestAuditLogger;") >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.beforeClass : $r4 = (org.apache.ambari.server.audit.request.RequestAuditLogger) $r3
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.beforeClass : $r4 = (org.apache.ambari.server.audit.request.RequestAuditLogger) $r3 >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.beforeClass : <org.apache.ambari.server.audit.request.RequestAuditLoggerTest: org.apache.ambari.server.audit.request.RequestAuditLogger requestAuditLogger> = $r4
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.beforeClass : <org.apache.ambari.server.audit.request.RequestAuditLoggerTest: org.apache.ambari.server.audit.request.RequestAuditLogger requestAuditLogger> = $r4 >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.beforeClass : $r5 = interfaceinvoke r0.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/apache/ambari/server/audit/AuditLogger;")
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.beforeClass : $r5 = interfaceinvoke r0.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/apache/ambari/server/audit/AuditLogger;") >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.beforeClass : $r6 = (org.apache.ambari.server.audit.AuditLogger) $r5
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.beforeClass : $r6 = (org.apache.ambari.server.audit.AuditLogger) $r5 >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.beforeClass : <org.apache.ambari.server.audit.request.RequestAuditLoggerTest: org.apache.ambari.server.audit.AuditLogger mockAuditLogger> = $r6
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.beforeClass : <org.apache.ambari.server.audit.request.RequestAuditLoggerTest: org.apache.ambari.server.audit.AuditLogger mockAuditLogger> = $r6 >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : $r4 = new java.util.HashSet
org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : $r4 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : specialinvoke $r4.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : specialinvoke $r4.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : if r2 == null
org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : if r2 == null >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : $r9 = r0.<org.apache.ambari.server.api.resources.BaseResourceDefinition: java.util.Map directives>
org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : $r9 = r0.<org.apache.ambari.server.api.resources.BaseResourceDefinition: java.util.Map directives> >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4)
org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4) >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createRequest : $r4 = new org.apache.ambari.server.api.query.QueryImpl
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createRequest : $r4 = new org.apache.ambari.server.api.query.QueryImpl >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createRequest : $r5 = new java.util.HashMap
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createRequest : $r5 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createRequest : specialinvoke $r5.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createRequest : specialinvoke $r5.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createRequest : specialinvoke $r4.<org.apache.ambari.server.api.query.QueryImpl: void <init>(java.util.Map,org.apache.ambari.server.api.resources.ResourceDefinition,org.apache.ambari.server.controller.spi.ClusterController)>($r5, r1, null)
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createRequest : specialinvoke $r4.<org.apache.ambari.server.api.query.QueryImpl: void <init>(java.util.Map,org.apache.ambari.server.api.resources.ResourceDefinition,org.apache.ambari.server.controller.spi.ClusterController)>($r5, r1, null) >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.setKeyValueMap : $r2 = r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map keyValueMap>
org.apache.ambari.server.api.query.QueryImpl.setKeyValueMap : $r2 = r0.<org.apache.ambari.server.api.query.QueryImpl: java.util.Map keyValueMap> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.setKeyValueMap : interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r1)
org.apache.ambari.server.api.query.QueryImpl.setKeyValueMap : interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r1) >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createRequest : $r7 = r0.<org.apache.ambari.server.audit.request.RequestAuditLoggerTest: org.apache.ambari.server.api.services.RequestFactory requestFactory>
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createRequest : $r7 = r0.<org.apache.ambari.server.audit.request.RequestAuditLoggerTest: org.apache.ambari.server.api.services.RequestFactory requestFactory> >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createRequest : $r6 = new org.apache.ambari.server.api.services.RequestBody
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createRequest : $r6 = new org.apache.ambari.server.api.services.RequestBody >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createRequest : specialinvoke $r6.<org.apache.ambari.server.api.services.RequestBody: void <init>()>()
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createRequest : specialinvoke $r6.<org.apache.ambari.server.api.services.RequestBody: void <init>()>() >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createRequest : $r8 = new org.apache.ambari.server.api.services.LocalUriInfo
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createRequest : $r8 = new org.apache.ambari.server.api.services.LocalUriInfo >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createRequest : specialinvoke $r8.<org.apache.ambari.server.api.services.LocalUriInfo: void <init>(java.lang.String)>("http://apache.org")
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createRequest : specialinvoke $r8.<org.apache.ambari.server.api.services.LocalUriInfo: void <init>(java.lang.String)>("http://apache.org") >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createRequest : $r9 = virtualinvoke $r7.<org.apache.ambari.server.api.services.RequestFactory: org.apache.ambari.server.api.services.Request createRequest(javax.ws.rs.core.HttpHeaders,org.apache.ambari.server.api.services.RequestBody,javax.ws.rs.core.UriInfo,org.apache.ambari.server.api.services.Request$Type,org.apache.ambari.server.api.resources.ResourceInstance)>(null, $r6, $r8, r2, $r4)
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createRequest : $r9 = virtualinvoke $r7.<org.apache.ambari.server.api.services.RequestFactory: org.apache.ambari.server.api.services.Request createRequest(javax.ws.rs.core.HttpHeaders,org.apache.ambari.server.api.services.RequestBody,javax.ws.rs.core.UriInfo,org.apache.ambari.server.api.services.Request$Type,org.apache.ambari.server.api.resources.ResourceInstance)>(null, $r6, $r8, r2, $r4) >>>>>>>> org.apache.ambari.server.api.services.RequestFactory.createRequest : $r6 = <org.apache.ambari.server.api.services.RequestFactory$1: int[] $SwitchMap$org$apache$ambari$server$api$services$Request$Type>
org.apache.ambari.server.api.services.RequestFactory.createRequest : $r6 = <org.apache.ambari.server.api.services.RequestFactory$1: int[] $SwitchMap$org$apache$ambari$server$api$services$Request$Type> >>>>>>>> org.apache.ambari.server.api.services.RequestFactory.createRequest : $i0 = virtualinvoke r4.<org.apache.ambari.server.api.services.Request$Type: int ordinal()>()
org.apache.ambari.server.api.services.RequestFactory.createRequest : $i0 = virtualinvoke r4.<org.apache.ambari.server.api.services.Request$Type: int ordinal()>() >>>>>>>> org.apache.ambari.server.api.services.RequestFactory.createRequest : $i1 = $r6[$i0]
org.apache.ambari.server.api.services.RequestFactory.createRequest : $i1 = $r6[$i0] >>>>>>>> org.apache.ambari.server.api.services.RequestFactory.createRequest : tableswitch($i1) {     case 1:
org.apache.ambari.server.api.services.RequestFactory.createRequest : tableswitch($i1) {     case 1: >>>>>>>> org.apache.ambari.server.api.services.RequestFactory.createRequest : $r9 = specialinvoke r0.<org.apache.ambari.server.api.services.RequestFactory: org.apache.ambari.server.api.services.DeleteRequest createDeleteRequest(javax.ws.rs.core.HttpHeaders,org.apache.ambari.server.api.services.RequestBody,javax.ws.rs.core.UriInfo,org.apache.ambari.server.api.resources.ResourceInstance)>(r1, r2, r3, r5)
org.apache.ambari.server.api.services.RequestFactory.createRequest : $r9 = specialinvoke r0.<org.apache.ambari.server.api.services.RequestFactory: org.apache.ambari.server.api.services.DeleteRequest createDeleteRequest(javax.ws.rs.core.HttpHeaders,org.apache.ambari.server.api.services.RequestBody,javax.ws.rs.core.UriInfo,org.apache.ambari.server.api.resources.ResourceInstance)>(r1, r2, r3, r5) >>>>>>>> org.apache.ambari.server.api.services.RequestFactory.createDeleteRequest : $r5 = <org.apache.ambari.server.api.services.Request$Type: org.apache.ambari.server.api.services.Request$Type DELETE>
org.apache.ambari.server.api.services.RequestFactory.createDeleteRequest : $r5 = <org.apache.ambari.server.api.services.Request$Type: org.apache.ambari.server.api.services.Request$Type DELETE> >>>>>>>> org.apache.ambari.server.api.services.RequestFactory.createDeleteRequest : specialinvoke r0.<org.apache.ambari.server.api.services.RequestFactory: boolean applyDirectives(org.apache.ambari.server.api.services.Request$Type,org.apache.ambari.server.api.services.RequestBody,javax.ws.rs.core.UriInfo,org.apache.ambari.server.api.resources.ResourceInstance)>($r5, r2, r3, r4)
org.apache.ambari.server.api.services.RequestFactory.createDeleteRequest : specialinvoke r0.<org.apache.ambari.server.api.services.RequestFactory: boolean applyDirectives(org.apache.ambari.server.api.services.Request$Type,org.apache.ambari.server.api.services.RequestBody,javax.ws.rs.core.UriInfo,org.apache.ambari.server.api.resources.ResourceInstance)>($r5, r2, r3, r4) >>>>>>>> org.apache.ambari.server.api.services.RequestFactory.applyDirectives : r5 = specialinvoke r0.<org.apache.ambari.server.api.services.RequestFactory: java.util.Map getQueryParameters(javax.ws.rs.core.UriInfo,org.apache.ambari.server.api.services.RequestBody)>(r3, r2)
org.apache.ambari.server.api.services.RequestFactory.applyDirectives : r5 = specialinvoke r0.<org.apache.ambari.server.api.services.RequestFactory: java.util.Map getQueryParameters(javax.ws.rs.core.UriInfo,org.apache.ambari.server.api.services.RequestBody)>(r3, r2) >>>>>>>> org.apache.ambari.server.api.services.RequestFactory.getQueryParameters : $r7 = new java.util.HashMap
org.apache.ambari.server.api.services.RequestFactory.getQueryParameters : $r7 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.api.services.RequestFactory.getQueryParameters : specialinvoke $r7.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.api.services.RequestFactory.getQueryParameters : specialinvoke $r7.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.api.services.RequestFactory.getQueryParameters : $r8 = interfaceinvoke r1.<javax.ws.rs.core.UriInfo: javax.ws.rs.core.MultivaluedMap getQueryParameters()>()
org.apache.ambari.server.api.services.RequestFactory.getQueryParameters : $r8 = interfaceinvoke r1.<javax.ws.rs.core.UriInfo: javax.ws.rs.core.MultivaluedMap getQueryParameters()>() >>>>>>>> org.apache.ambari.server.api.services.LocalUriInfo.getQueryParameters : $r5 = r0.<org.apache.ambari.server.api.services.LocalUriInfo: java.net.URI uri>
org.apache.ambari.server.api.services.LocalUriInfo.getQueryParameters : $r5 = r0.<org.apache.ambari.server.api.services.LocalUriInfo: java.net.URI uri> >>>>>>>> org.apache.ambari.server.api.services.LocalUriInfo.getQueryParameters : r1 = staticinvoke <org.apache.http.client.utils.URLEncodedUtils: java.util.List parse(java.net.URI,java.lang.String)>($r5, "UTF-8")
org.apache.ambari.server.api.services.LocalUriInfo.getQueryParameters : r1 = staticinvoke <org.apache.http.client.utils.URLEncodedUtils: java.util.List parse(java.net.URI,java.lang.String)>($r5, "UTF-8") >>>>>>>> org.apache.ambari.server.api.services.LocalUriInfo.getQueryParameters : $r6 = new com.sun.jersey.core.util.MultivaluedMapImpl
org.apache.ambari.server.api.services.LocalUriInfo.getQueryParameters : $r6 = new com.sun.jersey.core.util.MultivaluedMapImpl >>>>>>>> org.apache.ambari.server.api.services.LocalUriInfo.getQueryParameters : specialinvoke $r6.<com.sun.jersey.core.util.MultivaluedMapImpl: void <init>()>()
org.apache.ambari.server.api.services.LocalUriInfo.getQueryParameters : specialinvoke $r6.<com.sun.jersey.core.util.MultivaluedMapImpl: void <init>()>() >>>>>>>> org.apache.ambari.server.api.services.LocalUriInfo.getQueryParameters : r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.api.services.LocalUriInfo.getQueryParameters : r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.api.services.LocalUriInfo.getQueryParameters : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.api.services.LocalUriInfo.getQueryParameters : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.api.services.LocalUriInfo.getQueryParameters : if $z0 == 0
org.apache.ambari.server.api.services.LocalUriInfo.getQueryParameters : if $z0 == 0 >>>>>>>> org.apache.ambari.server.api.services.LocalUriInfo.getQueryParameters : return $r6
org.apache.ambari.server.api.services.LocalUriInfo.getQueryParameters : return $r6 >>>>>>>> org.apache.ambari.server.api.services.RequestFactory.getQueryParameters : $r9 = interfaceinvoke $r8.<javax.ws.rs.core.MultivaluedMap: java.util.Set entrySet()>()
org.apache.ambari.server.api.services.RequestFactory.getQueryParameters : $r9 = interfaceinvoke $r8.<javax.ws.rs.core.MultivaluedMap: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.api.services.RequestFactory.getQueryParameters : r19 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.api.services.RequestFactory.getQueryParameters : r19 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.api.services.RequestFactory.getQueryParameters : $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.api.services.RequestFactory.getQueryParameters : $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.api.services.RequestFactory.getQueryParameters : if $z0 == 0
org.apache.ambari.server.api.services.RequestFactory.getQueryParameters : if $z0 == 0 >>>>>>>> org.apache.ambari.server.api.services.RequestFactory.getQueryParameters : r21 = virtualinvoke r2.<org.apache.ambari.server.api.services.RequestBody: java.lang.String getQueryString()>()
org.apache.ambari.server.api.services.RequestFactory.getQueryParameters : r21 = virtualinvoke r2.<org.apache.ambari.server.api.services.RequestBody: java.lang.String getQueryString()>() >>>>>>>> org.apache.ambari.server.api.services.RequestBody.getQueryString : $r1 = r0.<org.apache.ambari.server.api.services.RequestBody: java.lang.String m_query>
org.apache.ambari.server.api.services.RequestBody.getQueryString : $r1 = r0.<org.apache.ambari.server.api.services.RequestBody: java.lang.String m_query> >>>>>>>> org.apache.ambari.server.api.services.RequestBody.getQueryString : return $r1
org.apache.ambari.server.api.services.RequestBody.getQueryString : return $r1 >>>>>>>> org.apache.ambari.server.api.services.RequestFactory.getQueryParameters : if r21 == null
org.apache.ambari.server.api.services.RequestFactory.getQueryParameters : if r21 == null >>>>>>>> org.apache.ambari.server.api.services.RequestFactory.getQueryParameters : return $r7
org.apache.ambari.server.api.services.RequestFactory.getQueryParameters : return $r7 >>>>>>>> org.apache.ambari.server.api.services.RequestFactory.applyDirectives : z2 = 1
org.apache.ambari.server.api.services.RequestFactory.applyDirectives : z2 = 1 >>>>>>>> org.apache.ambari.server.api.services.RequestFactory.applyDirectives : $z0 = interfaceinvoke r5.<java.util.Map: boolean isEmpty()>()
org.apache.ambari.server.api.services.RequestFactory.applyDirectives : $z0 = interfaceinvoke r5.<java.util.Map: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.api.services.RequestFactory.applyDirectives : if $z0 != 0
org.apache.ambari.server.api.services.RequestFactory.applyDirectives : if $z0 != 0 >>>>>>>> org.apache.ambari.server.api.services.RequestFactory.applyDirectives : return z2
org.apache.ambari.server.api.services.RequestFactory.applyDirectives : return z2 >>>>>>>> org.apache.ambari.server.api.services.RequestFactory.createDeleteRequest : $r6 = new org.apache.ambari.server.api.services.DeleteRequest
org.apache.ambari.server.api.services.RequestFactory.createDeleteRequest : $r6 = new org.apache.ambari.server.api.services.DeleteRequest >>>>>>>> org.apache.ambari.server.api.services.RequestFactory.createDeleteRequest : specialinvoke $r6.<org.apache.ambari.server.api.services.DeleteRequest: void <init>(javax.ws.rs.core.HttpHeaders,org.apache.ambari.server.api.services.RequestBody,javax.ws.rs.core.UriInfo,org.apache.ambari.server.api.resources.ResourceInstance)>(r1, r2, r3, r4)
org.apache.ambari.server.api.services.RequestFactory.createDeleteRequest : specialinvoke $r6.<org.apache.ambari.server.api.services.DeleteRequest: void <init>(javax.ws.rs.core.HttpHeaders,org.apache.ambari.server.api.services.RequestBody,javax.ws.rs.core.UriInfo,org.apache.ambari.server.api.resources.ResourceInstance)>(r1, r2, r3, r4) >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z0 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean hasValidRequest()>()
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z0 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean hasValidRequest()>() >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $r0 = staticinvoke <org.springframework.web.context.request.RequestContextHolder: org.springframework.web.context.request.RequestAttributes getRequestAttributes()>()
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $r0 = staticinvoke <org.springframework.web.context.request.RequestContextHolder: org.springframework.web.context.request.RequestAttributes getRequestAttributes()>() >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : if $r0 == null
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : if $r0 == null >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $r1 = staticinvoke <org.springframework.web.context.request.RequestContextHolder: org.springframework.web.context.request.RequestAttributes getRequestAttributes()>()
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $r1 = staticinvoke <org.springframework.web.context.request.RequestContextHolder: org.springframework.web.context.request.RequestAttributes getRequestAttributes()>() >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $z0 = $r1 instanceof org.springframework.web.context.request.ServletRequestAttributes
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $z0 = $r1 instanceof org.springframework.web.context.request.ServletRequestAttributes >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : if $z0 == 0
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : if $z0 == 0 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $r2 = staticinvoke <org.springframework.web.context.request.RequestContextHolder: org.springframework.web.context.request.RequestAttributes getRequestAttributes()>()
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $r2 = staticinvoke <org.springframework.web.context.request.RequestContextHolder: org.springframework.web.context.request.RequestAttributes getRequestAttributes()>() >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $r3 = (org.springframework.web.context.request.ServletRequestAttributes) $r2
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $r3 = (org.springframework.web.context.request.ServletRequestAttributes) $r2 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $r4 = virtualinvoke $r3.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest getRequest()>()
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $r4 = virtualinvoke $r3.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest getRequest()>() >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : if $r4 == null
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : if $r4 == null >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $z1 = 1
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : $z1 = 1 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : goto [?= return $z1]
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : goto [?= return $z1] >>>>>>>> org.apache.ambari.server.utils.RequestUtils.hasValidRequest : return $z1
org.apache.ambari.server.utils.RequestUtils.hasValidRequest : return $z1 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : if $z0 == 0
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : if $z0 == 0 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $r0 = staticinvoke <org.springframework.web.context.request.RequestContextHolder: org.springframework.web.context.request.RequestAttributes getRequestAttributes()>()
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $r0 = staticinvoke <org.springframework.web.context.request.RequestContextHolder: org.springframework.web.context.request.RequestAttributes getRequestAttributes()>() >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $r1 = (org.springframework.web.context.request.ServletRequestAttributes) $r0
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $r1 = (org.springframework.web.context.request.ServletRequestAttributes) $r0 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $r2 = virtualinvoke $r1.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest getRequest()>()
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $r2 = virtualinvoke $r1.<org.springframework.web.context.request.ServletRequestAttributes: javax.servlet.http.HttpServletRequest getRequest()>() >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $r3 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: java.lang.String getRemoteAddress(javax.servlet.http.HttpServletRequest)>($r2)
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $r3 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: java.lang.String getRemoteAddress(javax.servlet.http.HttpServletRequest)>($r2) >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : r5 = null
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : r5 = null >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $r3 = <org.apache.ambari.server.utils.RequestUtils: java.util.Set headersToCheck>
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $r3 = <org.apache.ambari.server.utils.RequestUtils: java.util.Set headersToCheck> >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : r1 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : r2 = (java.lang.String) $r4
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : r2 = (java.lang.String) $r4 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : r5 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>(r2)
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : r5 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.audit.request.DefaultEventCreatorTest$2.getHeader : return null
org.apache.ambari.server.audit.request.DefaultEventCreatorTest$2.getHeader : return null >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z3 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean isRemoteAddressUnknown(java.lang.String)>(r5)
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z3 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean isRemoteAddressUnknown(java.lang.String)>(r5) >>>>>>>> org.apache.ambari.server.utils.RequestUtils.isRemoteAddressUnknown : if r0 == null
org.apache.ambari.server.utils.RequestUtils.isRemoteAddressUnknown : if r0 == null >>>>>>>> org.apache.ambari.server.utils.RequestUtils.isRemoteAddressUnknown : $z1 = 1
org.apache.ambari.server.utils.RequestUtils.isRemoteAddressUnknown : $z1 = 1 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.isRemoteAddressUnknown : goto [?= return $z1]
org.apache.ambari.server.utils.RequestUtils.isRemoteAddressUnknown : goto [?= return $z1] >>>>>>>> org.apache.ambari.server.utils.RequestUtils.isRemoteAddressUnknown : return $z1
org.apache.ambari.server.utils.RequestUtils.isRemoteAddressUnknown : return $z1 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : if $z3 != 0
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : if $z3 != 0 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z1 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean isRemoteAddressUnknown(java.lang.String)>(r5)
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z1 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean isRemoteAddressUnknown(java.lang.String)>(r5) >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : if $z1 == 0
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : if $z1 == 0 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : r5 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getRemoteAddr()>()
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : r5 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getRemoteAddr()>() >>>>>>>> org.apache.ambari.server.audit.request.DefaultEventCreatorTest$2.getRemoteAddr : return "1.2.3.4"
org.apache.ambari.server.audit.request.DefaultEventCreatorTest$2.getRemoteAddr : return "1.2.3.4" >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z2 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean containsMultipleRemoteAddresses(java.lang.String)>(r5)
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z2 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean containsMultipleRemoteAddresses(java.lang.String)>(r5) >>>>>>>> org.apache.ambari.server.utils.RequestUtils.containsMultipleRemoteAddresses : if r0 == null
org.apache.ambari.server.utils.RequestUtils.containsMultipleRemoteAddresses : if r0 == null >>>>>>>> org.apache.ambari.server.utils.RequestUtils.containsMultipleRemoteAddresses : $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(",")
org.apache.ambari.server.utils.RequestUtils.containsMultipleRemoteAddresses : $i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(",") >>>>>>>> org.apache.ambari.server.utils.RequestUtils.containsMultipleRemoteAddresses : if $i0 <= 0
org.apache.ambari.server.utils.RequestUtils.containsMultipleRemoteAddresses : if $i0 <= 0 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.containsMultipleRemoteAddresses : $z0 = 0
org.apache.ambari.server.utils.RequestUtils.containsMultipleRemoteAddresses : $z0 = 0 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.containsMultipleRemoteAddresses : return $z0
org.apache.ambari.server.utils.RequestUtils.containsMultipleRemoteAddresses : return $z0 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : if $z2 == 0
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : if $z2 == 0 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : return r5
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : return r5 >>>>>>>> org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : return $r3
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : return $r3 >>>>>>>> org.apache.ambari.server.api.services.RequestFactory.createDeleteRequest : return $r6
org.apache.ambari.server.api.services.RequestFactory.createDeleteRequest : return $r6 >>>>>>>> org.apache.ambari.server.api.services.RequestFactory.createRequest : return $r9
org.apache.ambari.server.api.services.RequestFactory.createRequest : return $r9 >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createRequest : return $r9
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createRequest : return $r9 >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : $r2 = <org.apache.ambari.server.audit.request.RequestAuditLoggerTest: org.apache.ambari.server.audit.AuditLogger mockAuditLogger>
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : $r2 = <org.apache.ambari.server.audit.request.RequestAuditLoggerTest: org.apache.ambari.server.audit.AuditLogger mockAuditLogger> >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : $z0 = interfaceinvoke $r2.<org.apache.ambari.server.audit.AuditLogger: boolean isEnabled()>()
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : $z0 = interfaceinvoke $r2.<org.apache.ambari.server.audit.AuditLogger: boolean isEnabled()>() >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0)
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : $r3 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : $r4 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r3)
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : $r4 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r3) >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1)
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : $r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : $r6 = interfaceinvoke $r4.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r5)
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : $r6 = interfaceinvoke $r4.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r5) >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : interfaceinvoke $r6.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : interfaceinvoke $r6.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : r1 = staticinvoke <org.easymock.EasyMock: org.easymock.Capture newCapture()>()
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : r1 = staticinvoke <org.easymock.EasyMock: org.easymock.Capture newCapture()>() >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : $r8 = <org.apache.ambari.server.audit.request.RequestAuditLoggerTest: org.apache.ambari.server.audit.AuditLogger mockAuditLogger>
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : $r8 = <org.apache.ambari.server.audit.request.RequestAuditLoggerTest: org.apache.ambari.server.audit.AuditLogger mockAuditLogger> >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : $r9 = staticinvoke <org.easymock.EasyMock: java.lang.Object capture(org.easymock.Capture)>(r1)
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : $r9 = staticinvoke <org.easymock.EasyMock: java.lang.Object capture(org.easymock.Capture)>(r1) >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : $r10 = (org.apache.ambari.server.audit.event.AuditEvent) $r9
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : $r10 = (org.apache.ambari.server.audit.event.AuditEvent) $r9 >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : interfaceinvoke $r8.<org.apache.ambari.server.audit.AuditLogger: void log(org.apache.ambari.server.audit.event.AuditEvent)>($r10)
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : interfaceinvoke $r8.<org.apache.ambari.server.audit.AuditLogger: void log(org.apache.ambari.server.audit.event.AuditEvent)>($r10) >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expectLastCall()>()
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expectLastCall()>() >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : $r12 = newarray (java.lang.Object)[1]
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : $r12 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : $r13 = <org.apache.ambari.server.audit.request.RequestAuditLoggerTest: org.apache.ambari.server.audit.AuditLogger mockAuditLogger>
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : $r13 = <org.apache.ambari.server.audit.request.RequestAuditLoggerTest: org.apache.ambari.server.audit.AuditLogger mockAuditLogger> >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : $r12[0] = $r13
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : $r12[0] = $r13 >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r12)
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r12) >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : return r1
org.apache.ambari.server.audit.request.RequestAuditLoggerTest.createCapture : return r1 >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.log : $r8 = r0.<org.apache.ambari.server.audit.request.RequestAuditLoggerImpl: org.apache.ambari.server.audit.AuditLogger auditLogger>
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.log : $r8 = r0.<org.apache.ambari.server.audit.request.RequestAuditLoggerImpl: org.apache.ambari.server.audit.AuditLogger auditLogger> >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.log : $z0 = interfaceinvoke $r8.<org.apache.ambari.server.audit.AuditLogger: boolean isEnabled()>()
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.log : $z0 = interfaceinvoke $r8.<org.apache.ambari.server.audit.AuditLogger: boolean isEnabled()>() >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.log : if $z0 != 0
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.log : if $z0 != 0 >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.log : $r9 = interfaceinvoke r1.<org.apache.ambari.server.api.services.Request: org.apache.ambari.server.api.resources.ResourceInstance getResource()>()
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.log : $r9 = interfaceinvoke r1.<org.apache.ambari.server.api.services.Request: org.apache.ambari.server.api.resources.ResourceInstance getResource()>() >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getResource : $r1 = r0.<org.apache.ambari.server.api.services.BaseRequest: org.apache.ambari.server.api.resources.ResourceInstance m_resource>
org.apache.ambari.server.api.services.BaseRequest.getResource : $r1 = r0.<org.apache.ambari.server.api.services.BaseRequest: org.apache.ambari.server.api.resources.ResourceInstance m_resource> >>>>>>>> org.apache.ambari.server.api.services.BaseRequest.getResource : return $r1
org.apache.ambari.server.api.services.BaseRequest.getResource : return $r1 >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.log : $r10 = interfaceinvoke $r9.<org.apache.ambari.server.api.resources.ResourceInstance: org.apache.ambari.server.api.resources.ResourceDefinition getResourceDefinition()>()
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.log : $r10 = interfaceinvoke $r9.<org.apache.ambari.server.api.resources.ResourceInstance: org.apache.ambari.server.api.resources.ResourceDefinition getResourceDefinition()>() >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.getResourceDefinition : $r1 = r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition>
org.apache.ambari.server.api.query.QueryImpl.getResourceDefinition : $r1 = r0.<org.apache.ambari.server.api.query.QueryImpl: org.apache.ambari.server.api.resources.ResourceDefinition resourceDefinition> >>>>>>>> org.apache.ambari.server.api.query.QueryImpl.getResourceDefinition : return $r1
org.apache.ambari.server.api.query.QueryImpl.getResourceDefinition : return $r1 >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.log : r3 = interfaceinvoke $r10.<org.apache.ambari.server.api.resources.ResourceDefinition: org.apache.ambari.server.controller.spi.Resource$Type getType()>()
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.log : r3 = interfaceinvoke $r10.<org.apache.ambari.server.api.resources.ResourceDefinition: org.apache.ambari.server.controller.spi.Resource$Type getType()>() >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getType : $r1 = r0.<org.apache.ambari.server.api.resources.BaseResourceDefinition: org.apache.ambari.server.controller.spi.Resource$Type m_type>
org.apache.ambari.server.api.resources.BaseResourceDefinition.getType : $r1 = r0.<org.apache.ambari.server.api.resources.BaseResourceDefinition: org.apache.ambari.server.controller.spi.Resource$Type m_type> >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getType : return $r1
org.apache.ambari.server.api.resources.BaseResourceDefinition.getType : return $r1 >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.log : r4 = interfaceinvoke r1.<org.apache.ambari.server.api.services.Request: org.apache.ambari.server.api.services.Request$Type getRequestType()>()
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.log : r4 = interfaceinvoke r1.<org.apache.ambari.server.api.services.Request: org.apache.ambari.server.api.services.Request$Type getRequestType()>() >>>>>>>> org.apache.ambari.server.api.services.DeleteRequest.getRequestType : $r1 = <org.apache.ambari.server.api.services.Request$Type: org.apache.ambari.server.api.services.Request$Type DELETE>
org.apache.ambari.server.api.services.DeleteRequest.getRequestType : $r1 = <org.apache.ambari.server.api.services.Request$Type: org.apache.ambari.server.api.services.Request$Type DELETE> >>>>>>>> org.apache.ambari.server.api.services.DeleteRequest.getRequestType : return $r1
org.apache.ambari.server.api.services.DeleteRequest.getRequestType : return $r1 >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.log : r5 = interfaceinvoke r2.<org.apache.ambari.server.api.services.Result: org.apache.ambari.server.api.services.ResultStatus getStatus()>()
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.log : r5 = interfaceinvoke r2.<org.apache.ambari.server.api.services.Result: org.apache.ambari.server.api.services.ResultStatus getStatus()>() >>>>>>>> org.apache.ambari.server.api.services.ResultImpl.getStatus : $r1 = r0.<org.apache.ambari.server.api.services.ResultImpl: org.apache.ambari.server.api.services.ResultStatus m_status>
org.apache.ambari.server.api.services.ResultImpl.getStatus : $r1 = r0.<org.apache.ambari.server.api.services.ResultImpl: org.apache.ambari.server.api.services.ResultStatus m_status> >>>>>>>> org.apache.ambari.server.api.services.ResultImpl.getStatus : return $r1
org.apache.ambari.server.api.services.ResultImpl.getStatus : return $r1 >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.log : r6 = specialinvoke r0.<org.apache.ambari.server.audit.request.RequestAuditLoggerImpl: org.apache.ambari.server.audit.request.eventcreator.RequestAuditEventCreator selectCreator(org.apache.ambari.server.controller.spi.Resource$Type,org.apache.ambari.server.api.services.ResultStatus,org.apache.ambari.server.api.services.Request$Type)>(r3, r5, r4)
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.log : r6 = specialinvoke r0.<org.apache.ambari.server.audit.request.RequestAuditLoggerImpl: org.apache.ambari.server.audit.request.eventcreator.RequestAuditEventCreator selectCreator(org.apache.ambari.server.controller.spi.Resource$Type,org.apache.ambari.server.api.services.ResultStatus,org.apache.ambari.server.api.services.Request$Type)>(r3, r5, r4) >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.selectCreator : r9 = null
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.selectCreator : r9 = null >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.selectCreator : r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1)
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.selectCreator : r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1) >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.selectCreator : $r7 = r0.<org.apache.ambari.server.audit.request.RequestAuditLoggerImpl: java.util.Set creators>
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.selectCreator : $r7 = r0.<org.apache.ambari.server.audit.request.RequestAuditLoggerImpl: java.util.Set creators> >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.selectCreator : r4 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.selectCreator : r4 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.selectCreator : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.selectCreator : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.selectCreator : if $z0 == 0
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.selectCreator : if $z0 == 0 >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.selectCreator : $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.selectCreator : $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.selectCreator : r5 = (org.apache.ambari.server.audit.request.eventcreator.RequestAuditEventCreator) $r8
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.selectCreator : r5 = (org.apache.ambari.server.audit.request.eventcreator.RequestAuditEventCreator) $r8 >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.selectCreator : r6 = specialinvoke r0.<org.apache.ambari.server.audit.request.RequestAuditLoggerImpl: java.lang.Integer getPriority(org.apache.ambari.server.audit.request.eventcreator.RequestAuditEventCreator,org.apache.ambari.server.controller.spi.Resource$Type,org.apache.ambari.server.api.services.ResultStatus,org.apache.ambari.server.api.services.Request$Type)>(r5, r1, r2, r3)
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.selectCreator : r6 = specialinvoke r0.<org.apache.ambari.server.audit.request.RequestAuditLoggerImpl: java.lang.Integer getPriority(org.apache.ambari.server.audit.request.eventcreator.RequestAuditEventCreator,org.apache.ambari.server.controller.spi.Resource$Type,org.apache.ambari.server.api.services.ResultStatus,org.apache.ambari.server.api.services.Request$Type)>(r5, r1, r2, r3) >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.getPriority : r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.getPriority : r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.getPriority : $z0 = specialinvoke r0.<org.apache.ambari.server.audit.request.RequestAuditLoggerImpl: boolean isIncompatible(org.apache.ambari.server.audit.request.eventcreator.RequestAuditEventCreator,org.apache.ambari.server.controller.spi.Resource$Type,org.apache.ambari.server.api.services.ResultStatus,org.apache.ambari.server.api.services.Request$Type)>(r1, r2, r3, r4)
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.getPriority : $z0 = specialinvoke r0.<org.apache.ambari.server.audit.request.RequestAuditLoggerImpl: boolean isIncompatible(org.apache.ambari.server.audit.request.eventcreator.RequestAuditEventCreator,org.apache.ambari.server.controller.spi.Resource$Type,org.apache.ambari.server.api.services.ResultStatus,org.apache.ambari.server.api.services.Request$Type)>(r1, r2, r3, r4) >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.isIncompatible : $r5 = interfaceinvoke r1.<org.apache.ambari.server.audit.request.eventcreator.RequestAuditEventCreator: java.util.Set getRequestTypes()>()
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.isIncompatible : $r5 = interfaceinvoke r1.<org.apache.ambari.server.audit.request.eventcreator.RequestAuditEventCreator: java.util.Set getRequestTypes()>() >>>>>>>> org.apache.ambari.server.audit.request.AllPostAndPutCreator.getRequestTypes : $r1 = new java.util.HashSet
org.apache.ambari.server.audit.request.AllPostAndPutCreator.getRequestTypes : $r1 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.audit.request.AllPostAndPutCreator.getRequestTypes : $r2 = newarray (org.apache.ambari.server.api.services.Request$Type)[2]
org.apache.ambari.server.audit.request.AllPostAndPutCreator.getRequestTypes : $r2 = newarray (org.apache.ambari.server.api.services.Request$Type)[2] >>>>>>>> org.apache.ambari.server.audit.request.AllPostAndPutCreator.getRequestTypes : $r3 = <org.apache.ambari.server.api.services.Request$Type: org.apache.ambari.server.api.services.Request$Type POST>
org.apache.ambari.server.audit.request.AllPostAndPutCreator.getRequestTypes : $r3 = <org.apache.ambari.server.api.services.Request$Type: org.apache.ambari.server.api.services.Request$Type POST> >>>>>>>> org.apache.ambari.server.audit.request.AllPostAndPutCreator.getRequestTypes : $r2[0] = $r3
org.apache.ambari.server.audit.request.AllPostAndPutCreator.getRequestTypes : $r2[0] = $r3 >>>>>>>> org.apache.ambari.server.audit.request.AllPostAndPutCreator.getRequestTypes : $r4 = <org.apache.ambari.server.api.services.Request$Type: org.apache.ambari.server.api.services.Request$Type PUT>
org.apache.ambari.server.audit.request.AllPostAndPutCreator.getRequestTypes : $r4 = <org.apache.ambari.server.api.services.Request$Type: org.apache.ambari.server.api.services.Request$Type PUT> >>>>>>>> org.apache.ambari.server.audit.request.AllPostAndPutCreator.getRequestTypes : $r2[1] = $r4
org.apache.ambari.server.audit.request.AllPostAndPutCreator.getRequestTypes : $r2[1] = $r4 >>>>>>>> org.apache.ambari.server.audit.request.AllPostAndPutCreator.getRequestTypes : $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2)
org.apache.ambari.server.audit.request.AllPostAndPutCreator.getRequestTypes : $r5 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r2) >>>>>>>> org.apache.ambari.server.audit.request.AllPostAndPutCreator.getRequestTypes : specialinvoke $r1.<java.util.HashSet: void <init>(java.util.Collection)>($r5)
org.apache.ambari.server.audit.request.AllPostAndPutCreator.getRequestTypes : specialinvoke $r1.<java.util.HashSet: void <init>(java.util.Collection)>($r5) >>>>>>>> org.apache.ambari.server.audit.request.AllPostAndPutCreator.getRequestTypes : return $r1
org.apache.ambari.server.audit.request.AllPostAndPutCreator.getRequestTypes : return $r1 >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.isIncompatible : if $r5 == null
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.isIncompatible : if $r5 == null >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.isIncompatible : $r11 = interfaceinvoke r1.<org.apache.ambari.server.audit.request.eventcreator.RequestAuditEventCreator: java.util.Set getRequestTypes()>()
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.isIncompatible : $r11 = interfaceinvoke r1.<org.apache.ambari.server.audit.request.eventcreator.RequestAuditEventCreator: java.util.Set getRequestTypes()>() >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.isIncompatible : $z2 = interfaceinvoke $r11.<java.util.Set: boolean contains(java.lang.Object)>(r4)
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.isIncompatible : $z2 = interfaceinvoke $r11.<java.util.Set: boolean contains(java.lang.Object)>(r4) >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.isIncompatible : if $z2 == 0
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.isIncompatible : if $z2 == 0 >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.isIncompatible : $z3 = 1
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.isIncompatible : $z3 = 1 >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.isIncompatible : goto [?= return $z3]
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.isIncompatible : goto [?= return $z3] >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.isIncompatible : return $z3
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.isIncompatible : return $z3 >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.getPriority : if $z0 == 0
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.getPriority : if $z0 == 0 >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.getPriority : return null
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.getPriority : return null >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.selectCreator : if r6 == null
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.selectCreator : if r6 == null >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.selectCreator : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.selectCreator : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.audit.request.AllGetCreator.getRequestTypes : $r1 = <org.apache.ambari.server.api.services.Request$Type: org.apache.ambari.server.api.services.Request$Type GET>
org.apache.ambari.server.audit.request.AllGetCreator.getRequestTypes : $r1 = <org.apache.ambari.server.api.services.Request$Type: org.apache.ambari.server.api.services.Request$Type GET> >>>>>>>> org.apache.ambari.server.audit.request.AllGetCreator.getRequestTypes : $r2 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r1)
org.apache.ambari.server.audit.request.AllGetCreator.getRequestTypes : $r2 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r1) >>>>>>>> org.apache.ambari.server.audit.request.AllGetCreator.getRequestTypes : return $r2
org.apache.ambari.server.audit.request.AllGetCreator.getRequestTypes : return $r2 >>>>>>>> org.apache.ambari.server.audit.request.PutHostComponentCreator.getRequestTypes : $r1 = <org.apache.ambari.server.api.services.Request$Type: org.apache.ambari.server.api.services.Request$Type PUT>
org.apache.ambari.server.audit.request.PutHostComponentCreator.getRequestTypes : $r1 = <org.apache.ambari.server.api.services.Request$Type: org.apache.ambari.server.api.services.Request$Type PUT> >>>>>>>> org.apache.ambari.server.audit.request.PutHostComponentCreator.getRequestTypes : $r2 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r1)
org.apache.ambari.server.audit.request.PutHostComponentCreator.getRequestTypes : $r2 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>($r1) >>>>>>>> org.apache.ambari.server.audit.request.PutHostComponentCreator.getRequestTypes : return $r2
org.apache.ambari.server.audit.request.PutHostComponentCreator.getRequestTypes : return $r2 >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.selectCreator : return r9
org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.selectCreator : return r9 >>>>>>>> org.apache.ambari.server.audit.request.RequestAuditLoggerImpl.log : if r6 == null
