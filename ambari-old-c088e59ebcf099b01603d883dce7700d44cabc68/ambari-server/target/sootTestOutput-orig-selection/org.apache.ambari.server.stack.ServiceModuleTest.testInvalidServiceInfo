org.apache.ambari.server.state.ServiceInfo.ensureMandatoryServiceProperties : $r2 = specialinvoke r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map ensureVisibilityServiceProperties(java.util.Map)>(r1) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r2 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r2 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r3 = virtualinvoke $r2.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r3 = virtualinvoke $r2.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r3)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r3) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z0 != 0
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z0 != 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r18 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r18 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r19 = virtualinvoke $r18.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r19 = virtualinvoke $r18.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r20 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r20 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r21 = virtualinvoke $r20.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r21 = virtualinvoke $r20.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r21)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r21) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r4 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r4 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r5 = virtualinvoke $r4.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r5 = virtualinvoke $r4.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z1 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r5)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z1 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r5) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z1 != 0
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z1 != 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r13 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r13 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r14 = virtualinvoke $r13.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r14 = virtualinvoke $r13.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r15 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r15 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r16 = virtualinvoke $r15.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r16 = virtualinvoke $r15.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r16)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r16) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r6 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r6 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r7 = virtualinvoke $r6.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r7 = virtualinvoke $r6.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z2 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r7)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z2 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r7) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z2 != 0
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z2 != 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r8 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r8 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r9 = virtualinvoke $r8.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r9 = virtualinvoke $r8.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r10 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r10 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r11 = virtualinvoke $r10.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r11 = virtualinvoke $r10.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r11)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r11) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : return r1
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : return r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureMandatoryServiceProperties : return $r2
org.apache.ambari.server.state.ServiceInfo.ensureMandatoryServiceProperties : return $r2 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setName : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String name> = r1
org.apache.ambari.server.state.ServiceInfo.setName : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String name> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setVersion : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String version> = r1
org.apache.ambari.server.state.ServiceInfo.setVersion : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String version> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setValid : r0.<org.apache.ambari.server.state.ServiceInfo: boolean valid> = z0
org.apache.ambari.server.state.ServiceInfo.setValid : r0.<org.apache.ambari.server.state.ServiceInfo: boolean valid> = z0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.addError : $r2 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Set errorSet>
org.apache.ambari.server.state.ServiceInfo.addError : $r2 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Set errorSet> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.addError : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1)
org.apache.ambari.server.state.ServiceInfo.addError : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r8 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getName()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r8 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getName : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String name>
org.apache.ambari.server.state.ServiceInfo.getName : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String name> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getName : return $r1
org.apache.ambari.server.state.ServiceInfo.getName : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : if $r8 != null
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : if $r8 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r9 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getName()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r9 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r3 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.StackContext createStackContext(java.lang.String,boolean)>($r9, 1)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r3 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.StackContext createStackContext(java.lang.String,boolean)>($r9, 1) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : $r3 = staticinvoke <org.easymock.EasyMock: java.lang.Object createStrictMock(java.lang.Class)>(class "Lorg/apache/ambari/server/stack/StackContext;")
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : $r3 = staticinvoke <org.easymock.EasyMock: java.lang.Object createStrictMock(java.lang.Class)>(class "Lorg/apache/ambari/server/stack/StackContext;") >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : r2 = (org.apache.ambari.server.stack.StackContext) $r3
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : r2 = (org.apache.ambari.server.stack.StackContext) $r3 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : if z0 == 0
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : if z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : virtualinvoke r2.<org.apache.ambari.server.stack.StackContext: void registerServiceCheck(java.lang.String)>(r1)
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : virtualinvoke r2.<org.apache.ambari.server.stack.StackContext: void registerServiceCheck(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : $r4 = newarray (java.lang.Object)[1]
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : $r4 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : $r4[0] = r2
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : $r4[0] = r2 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r4)
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r4) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : return r2
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : return r2 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r10 = staticinvoke <java.util.Collections: java.util.List emptyList()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r10 = staticinvoke <java.util.Collections: java.util.List emptyList()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r11 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r11 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r4 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ConfigurationInfo createConfigurationInfo(java.util.Collection,java.util.Map)>($r10, $r11)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r4 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ConfigurationInfo createConfigurationInfo(java.util.Collection,java.util.Map)>($r10, $r11) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationInfo : $r3 = new org.apache.ambari.server.stack.ConfigurationInfo
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationInfo : $r3 = new org.apache.ambari.server.stack.ConfigurationInfo >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationInfo : specialinvoke $r3.<org.apache.ambari.server.stack.ConfigurationInfo: void <init>(java.util.Collection,java.util.Map)>(r1, r2)
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationInfo : specialinvoke $r3.<org.apache.ambari.server.stack.ConfigurationInfo: void <init>(java.util.Collection,java.util.Map)>(r1, r2) >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r8 = new java.util.HashMap
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r8 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : specialinvoke $r8.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : specialinvoke $r8.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r9 = new java.util.HashMap
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r9 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : specialinvoke $r9.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : specialinvoke $r9.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("supports", $r9)
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("supports", $r9) >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r11 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r11 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r4 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r4 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : if $z0 == 0
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r0.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map attributes> = $r8
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r0.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map attributes> = $r8 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationInfo : return $r3
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationInfo : return $r3 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r5 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ConfigurationModule createConfigurationModule(java.lang.String,org.apache.ambari.server.stack.ConfigurationInfo)>("type1", r4)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r5 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ConfigurationModule createConfigurationModule(java.lang.String,org.apache.ambari.server.stack.ConfigurationInfo)>("type1", r4) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : $r3 = new org.apache.ambari.server.stack.ConfigurationModule
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : $r3 = new org.apache.ambari.server.stack.ConfigurationModule >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : specialinvoke $r3.<org.apache.ambari.server.stack.ConfigurationModule: void <init>(java.lang.String,org.apache.ambari.server.stack.ConfigurationInfo)>(r1, r2)
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : specialinvoke $r3.<org.apache.ambari.server.stack.ConfigurationModule: void <init>(java.lang.String,org.apache.ambari.server.stack.ConfigurationInfo)>(r1, r2) >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.isValid : $z0 = r0.<org.apache.ambari.server.stack.ConfigurationInfo: boolean valid>
org.apache.ambari.server.stack.ConfigurationInfo.isValid : $z0 = r0.<org.apache.ambari.server.stack.ConfigurationInfo: boolean valid> >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.isValid : return $z0
org.apache.ambari.server.stack.ConfigurationInfo.isValid : return $z0 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : return $r3
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : return $r3 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r12 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r5)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r12 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r5) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r6 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ConfigurationDirectory createConfigurationDirectory(java.util.Collection)>($r12)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r6 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ConfigurationDirectory createConfigurationDirectory(java.util.Collection)>($r12) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : $r3 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/stack/ConfigurationDirectory;")
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : $r3 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/stack/ConfigurationDirectory;") >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : r2 = (org.apache.ambari.server.stack.ConfigurationDirectory) $r3
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : r2 = (org.apache.ambari.server.stack.ConfigurationDirectory) $r3 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : $r4 = virtualinvoke r2.<org.apache.ambari.server.stack.ConfigurationDirectory: java.util.Collection getConfigurationModules()>()
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : $r4 = virtualinvoke r2.<org.apache.ambari.server.stack.ConfigurationDirectory: java.util.Collection getConfigurationModules()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : $r5 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r4)
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : $r5 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r4) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : $r6 = interfaceinvoke $r5.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r1)
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : $r6 = interfaceinvoke $r5.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : interfaceinvoke $r6.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : interfaceinvoke $r6.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : $r8 = newarray (java.lang.Object)[1]
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : $r8 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : $r8[0] = r2
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : $r8[0] = r2 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r8)
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r8) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : return r2
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : return r2 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r13 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getConfigDir()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r13 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getConfigDir()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getConfigDir : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String configDir>
org.apache.ambari.server.state.ServiceInfo.getConfigDir : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String configDir> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getConfigDir : return $r1
org.apache.ambari.server.state.ServiceInfo.getConfigDir : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r7 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ServiceDirectory createServiceDirectory(java.lang.String,org.apache.ambari.server.stack.ConfigurationDirectory)>($r13, r6)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r7 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ServiceDirectory createServiceDirectory(java.lang.String,org.apache.ambari.server.stack.ConfigurationDirectory)>($r13, r6) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r4 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/stack/ServiceDirectory;")
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r4 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/stack/ServiceDirectory;") >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : r3 = (org.apache.ambari.server.stack.ServiceDirectory) $r4
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : r3 = (org.apache.ambari.server.stack.ServiceDirectory) $r4 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r5 = virtualinvoke r3.<org.apache.ambari.server.stack.ServiceDirectory: org.apache.ambari.server.stack.ConfigurationDirectory getConfigurationDirectory(java.lang.String,java.lang.String)>(r1, "properties")
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r5 = virtualinvoke r3.<org.apache.ambari.server.stack.ServiceDirectory: org.apache.ambari.server.stack.ConfigurationDirectory getConfigurationDirectory(java.lang.String,java.lang.String)>(r1, "properties") >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r6 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r5)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r6 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r5) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r7 = interfaceinvoke $r6.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r2)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r7 = interfaceinvoke $r6.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : interfaceinvoke $r7.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : interfaceinvoke $r7.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r9 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;")
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r9 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;") >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r10 = (java.lang.String) $r9
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r10 = (java.lang.String) $r9 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r11 = virtualinvoke r3.<org.apache.ambari.server.stack.ServiceDirectory: java.io.File getMetricsFile(java.lang.String)>($r10)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r11 = virtualinvoke r3.<org.apache.ambari.server.stack.ServiceDirectory: java.io.File getMetricsFile(java.lang.String)>($r10) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r12 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r11)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r12 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r11) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r13 = new java.io.File
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r13 = new java.io.File >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>("testMetricsFile")
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>("testMetricsFile") >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r14 = interfaceinvoke $r12.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r13)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r14 = interfaceinvoke $r12.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r13) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : interfaceinvoke $r14.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : interfaceinvoke $r14.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r16 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;")
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r16 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;") >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r17 = (java.lang.String) $r16
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r17 = (java.lang.String) $r16 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r18 = virtualinvoke r3.<org.apache.ambari.server.stack.ServiceDirectory: java.io.File getWidgetsDescriptorFile(java.lang.String)>($r17)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r18 = virtualinvoke r3.<org.apache.ambari.server.stack.ServiceDirectory: java.io.File getWidgetsDescriptorFile(java.lang.String)>($r17) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r19 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r18)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r19 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r18) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r20 = new java.io.File
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r20 = new java.io.File >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : specialinvoke $r20.<java.io.File: void <init>(java.lang.String)>("testWidgetsFile")
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : specialinvoke $r20.<java.io.File: void <init>(java.lang.String)>("testWidgetsFile") >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r21 = interfaceinvoke $r19.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r20)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r21 = interfaceinvoke $r19.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r20) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : interfaceinvoke $r21.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : interfaceinvoke $r21.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r23 = virtualinvoke r3.<org.apache.ambari.server.stack.ServiceDirectory: java.io.File getAlertsFile()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r23 = virtualinvoke r3.<org.apache.ambari.server.stack.ServiceDirectory: java.io.File getAlertsFile()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r24 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r23)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r24 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r23) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r25 = new java.io.File
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r25 = new java.io.File >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : specialinvoke $r25.<java.io.File: void <init>(java.lang.String)>("testAlertsFile")
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : specialinvoke $r25.<java.io.File: void <init>(java.lang.String)>("testAlertsFile") >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r26 = interfaceinvoke $r24.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r25)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r26 = interfaceinvoke $r24.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r25) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : interfaceinvoke $r26.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : interfaceinvoke $r26.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r28 = virtualinvoke r3.<org.apache.ambari.server.stack.ServiceDirectory: java.io.File getKerberosDescriptorFile()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r28 = virtualinvoke r3.<org.apache.ambari.server.stack.ServiceDirectory: java.io.File getKerberosDescriptorFile()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r29 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r28)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r29 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r28) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r30 = new java.io.File
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r30 = new java.io.File >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : specialinvoke $r30.<java.io.File: void <init>(java.lang.String)>("testKerberosDescriptorFile")
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : specialinvoke $r30.<java.io.File: void <init>(java.lang.String)>("testKerberosDescriptorFile") >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r31 = interfaceinvoke $r29.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r30)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r31 = interfaceinvoke $r29.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r30) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : interfaceinvoke $r31.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : interfaceinvoke $r31.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r33 = virtualinvoke r3.<org.apache.ambari.server.stack.ServiceDirectory: java.lang.String getPackageDir()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r33 = virtualinvoke r3.<org.apache.ambari.server.stack.ServiceDirectory: java.lang.String getPackageDir()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r34 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r33)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r34 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r33) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r35 = interfaceinvoke $r34.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("packageDir")
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r35 = interfaceinvoke $r34.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("packageDir") >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : interfaceinvoke $r35.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : interfaceinvoke $r35.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r37 = newarray (java.lang.Object)[1]
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r37 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r37[0] = r3
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r37[0] = r3 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r37)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r37) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : return r3
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : return r3 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r14 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ServiceModule createServiceModule(org.apache.ambari.server.stack.StackContext,org.apache.ambari.server.state.ServiceInfo,org.apache.ambari.server.stack.ServiceDirectory)>(r3, r1, r7)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r14 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ServiceModule createServiceModule(org.apache.ambari.server.stack.StackContext,org.apache.ambari.server.state.ServiceInfo,org.apache.ambari.server.stack.ServiceDirectory)>(r3, r1, r7) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r4 = new org.apache.ambari.server.stack.ServiceModule
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r4 = new org.apache.ambari.server.stack.ServiceModule >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : specialinvoke $r4.<org.apache.ambari.server.stack.ServiceModule: void <init>(org.apache.ambari.server.stack.StackContext,org.apache.ambari.server.state.ServiceInfo,org.apache.ambari.server.stack.ServiceDirectory)>(r1, r2, r3)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : specialinvoke $r4.<org.apache.ambari.server.stack.ServiceModule: void <init>(org.apache.ambari.server.stack.StackContext,org.apache.ambari.server.state.ServiceInfo,org.apache.ambari.server.stack.ServiceDirectory)>(r1, r2, r3) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setMetricsFile : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File metricsFile> = r1
org.apache.ambari.server.state.ServiceInfo.setMetricsFile : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File metricsFile> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setAlertsFile : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File alertsFile> = r1
org.apache.ambari.server.state.ServiceInfo.setAlertsFile : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File alertsFile> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setKerberosDescriptorFile : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File kerberosDescriptorFile> = r1
org.apache.ambari.server.state.ServiceInfo.setKerberosDescriptorFile : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File kerberosDescriptorFile> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setWidgetsDescriptorFile : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File widgetsDescriptorFile> = r1
org.apache.ambari.server.state.ServiceInfo.setWidgetsDescriptorFile : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File widgetsDescriptorFile> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setRoleCommandOrder : r0.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.stack.StackRoleCommandOrder roleCommandOrder> = r1
org.apache.ambari.server.state.ServiceInfo.setRoleCommandOrder : r0.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.stack.StackRoleCommandOrder roleCommandOrder> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setSchemaVersion : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String schemaVersion> = r1
org.apache.ambari.server.state.ServiceInfo.setSchemaVersion : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String schemaVersion> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setServicePackageFolder : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String servicePackageFolder> = r1
org.apache.ambari.server.state.ServiceInfo.setServicePackageFolder : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String servicePackageFolder> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setServiceUpgradesFolder : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File serviceUpgradesFolder> = r1
org.apache.ambari.server.state.ServiceInfo.setServiceUpgradesFolder : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File serviceUpgradesFolder> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setChecksFolder : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File checksFolder> = r1
org.apache.ambari.server.state.ServiceInfo.setChecksFolder : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File checksFolder> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setServerActionsFolder : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File serverActionsFolder> = r1
org.apache.ambari.server.state.ServiceInfo.setServerActionsFolder : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File serverActionsFolder> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setAdvisorFile : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File advisorFile> = r1
org.apache.ambari.server.state.ServiceInfo.setAdvisorFile : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File advisorFile> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setAdvisorName : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String advisorName> = r1
org.apache.ambari.server.state.ServiceInfo.setAdvisorName : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String advisorName> = r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateComponentModules : $r3 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateComponentModules : $r3 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateComponentModules : $r4 = virtualinvoke $r3.<org.apache.ambari.server.state.ServiceInfo: java.util.List getComponents()>()
org.apache.ambari.server.stack.ServiceModule.populateComponentModules : $r4 = virtualinvoke $r3.<org.apache.ambari.server.state.ServiceInfo: java.util.List getComponents()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComponents : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List components>
org.apache.ambari.server.state.ServiceInfo.getComponents : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List components> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComponents : if $r1 != null
org.apache.ambari.server.state.ServiceInfo.getComponents : if $r1 != null >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComponents : $r3 = new java.util.ArrayList
org.apache.ambari.server.state.ServiceInfo.getComponents : $r3 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComponents : specialinvoke $r3.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.ServiceInfo.getComponents : specialinvoke $r3.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComponents : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List components> = $r3
org.apache.ambari.server.state.ServiceInfo.getComponents : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List components> = $r3 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComponents : $r2 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List components>
org.apache.ambari.server.state.ServiceInfo.getComponents : $r2 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List components> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComponents : return $r2
org.apache.ambari.server.state.ServiceInfo.getComponents : return $r2 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateComponentModules : r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.ServiceModule.populateComponentModules : r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateComponentModules : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.ServiceModule.populateComponentModules : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateComponentModules : if $z0 == 0
org.apache.ambari.server.stack.ServiceModule.populateComponentModules : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r4 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.stack.ServiceDirectory serviceDirectory>
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r4 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.stack.ServiceDirectory serviceDirectory> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r3 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r3 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r5 = virtualinvoke $r3.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getConfigDir()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r5 = virtualinvoke $r3.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getConfigDir()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : r1 = virtualinvoke $r4.<org.apache.ambari.server.stack.ServiceDirectory: org.apache.ambari.server.stack.ConfigurationDirectory getConfigurationDirectory(java.lang.String,java.lang.String)>($r5, "properties")
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : r1 = virtualinvoke $r4.<org.apache.ambari.server.stack.ServiceDirectory: org.apache.ambari.server.stack.ConfigurationDirectory getConfigurationDirectory(java.lang.String,java.lang.String)>($r5, "properties") >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if r1 == null
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if r1 == null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r6 = virtualinvoke r1.<org.apache.ambari.server.stack.ConfigurationDirectory: java.util.Collection getConfigurationModules()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r6 = virtualinvoke r1.<org.apache.ambari.server.stack.ConfigurationDirectory: java.util.Collection getConfigurationModules()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : r21 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : r21 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z0 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z0 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if $z0 == 0
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r17 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r17 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : r22 = (org.apache.ambari.server.stack.ConfigurationModule) $r17
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : r22 = (org.apache.ambari.server.stack.ConfigurationModule) $r17 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : r23 = virtualinvoke r22.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo getModuleInfo()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : r23 = virtualinvoke r22.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo getModuleInfo()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.getModuleInfo : $r1 = r0.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo info>
org.apache.ambari.server.stack.ConfigurationModule.getModuleInfo : $r1 = r0.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo info> >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.getModuleInfo : return $r1
org.apache.ambari.server.stack.ConfigurationModule.getModuleInfo : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z3 = virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: boolean isValid()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z3 = virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: boolean isValid()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.isValid : $z0 = r0.<org.apache.ambari.server.stack.ServiceModule: boolean valid>
org.apache.ambari.server.stack.ServiceModule.isValid : $z0 = r0.<org.apache.ambari.server.stack.ServiceModule: boolean valid> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.isValid : return $z0
org.apache.ambari.server.stack.ServiceModule.isValid : return $z0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if $z3 == 0
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if $z3 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z5 = virtualinvoke r22.<org.apache.ambari.server.stack.ConfigurationModule: boolean isValid()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z5 = virtualinvoke r22.<org.apache.ambari.server.stack.ConfigurationModule: boolean isValid()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.isValid : $z0 = r0.<org.apache.ambari.server.stack.ConfigurationModule: boolean valid>
org.apache.ambari.server.stack.ConfigurationModule.isValid : $z0 = r0.<org.apache.ambari.server.stack.ConfigurationModule: boolean valid> >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.isValid : return $z0
org.apache.ambari.server.stack.ConfigurationModule.isValid : return $z0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if $z5 == 0
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if $z5 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z6 = virtualinvoke r23.<org.apache.ambari.server.stack.ConfigurationInfo: boolean isValid()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z6 = virtualinvoke r23.<org.apache.ambari.server.stack.ConfigurationInfo: boolean isValid()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if $z6 == 0
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if $z6 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z7 = 1
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z7 = 1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : goto [?= virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void setValid(boolean)>($z7)]
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : goto [?= virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void setValid(boolean)>($z7)] >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void setValid(boolean)>($z7)
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void setValid(boolean)>($z7) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.setValid : r0.<org.apache.ambari.server.stack.ServiceModule: boolean valid> = z0
org.apache.ambari.server.stack.ServiceModule.setValid : r0.<org.apache.ambari.server.stack.ServiceModule: boolean valid> = z0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z8 = virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: boolean isValid()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z8 = virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: boolean isValid()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if $z8 != 0
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if $z8 != 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r25 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r25 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r26 = virtualinvoke $r25.<org.apache.ambari.server.state.ServiceInfo: java.util.List getProperties()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r26 = virtualinvoke $r25.<org.apache.ambari.server.state.ServiceInfo: java.util.List getProperties()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getProperties : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List properties>
org.apache.ambari.server.state.ServiceInfo.getProperties : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List properties> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getProperties : if $r1 != null
org.apache.ambari.server.state.ServiceInfo.getProperties : if $r1 != null >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getProperties : $r3 = new java.util.ArrayList
org.apache.ambari.server.state.ServiceInfo.getProperties : $r3 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getProperties : specialinvoke $r3.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.ServiceInfo.getProperties : specialinvoke $r3.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getProperties : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List properties> = $r3
org.apache.ambari.server.state.ServiceInfo.getProperties : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List properties> = $r3 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getProperties : $r2 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List properties>
org.apache.ambari.server.state.ServiceInfo.getProperties : $r2 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List properties> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getProperties : return $r2
org.apache.ambari.server.state.ServiceInfo.getProperties : return $r2 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r27 = virtualinvoke r23.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Collection getProperties()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r27 = virtualinvoke r23.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Collection getProperties()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.getProperties : $r1 = r0.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Collection properties>
org.apache.ambari.server.stack.ConfigurationInfo.getProperties : $r1 = r0.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Collection properties> >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.getProperties : return $r1
org.apache.ambari.server.stack.ConfigurationInfo.getProperties : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : interfaceinvoke $r26.<java.util.List: boolean addAll(java.util.Collection)>($r27)
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : interfaceinvoke $r26.<java.util.List: boolean addAll(java.util.Collection)>($r27) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r28 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r28 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r29 = virtualinvoke r22.<org.apache.ambari.server.stack.ConfigurationModule: java.lang.String getConfigType()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r29 = virtualinvoke r22.<org.apache.ambari.server.stack.ConfigurationModule: java.lang.String getConfigType()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.getConfigType : $r1 = r0.<org.apache.ambari.server.stack.ConfigurationModule: java.lang.String configType>
org.apache.ambari.server.stack.ConfigurationModule.getConfigType : $r1 = r0.<org.apache.ambari.server.stack.ConfigurationModule: java.lang.String configType> >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.getConfigType : return $r1
org.apache.ambari.server.stack.ConfigurationModule.getConfigType : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r30 = virtualinvoke r23.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map getAttributes()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r30 = virtualinvoke r23.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map getAttributes()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.getAttributes : $r1 = r0.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map attributes>
org.apache.ambari.server.stack.ConfigurationInfo.getAttributes : $r1 = r0.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map attributes> >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.getAttributes : return $r1
org.apache.ambari.server.stack.ConfigurationInfo.getAttributes : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : virtualinvoke $r28.<org.apache.ambari.server.state.ServiceInfo: void setTypeAttributes(java.lang.String,java.util.Map)>($r29, $r30)
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : virtualinvoke $r28.<org.apache.ambari.server.state.ServiceInfo: void setTypeAttributes(java.lang.String,java.util.Map)>($r29, $r30) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : $r3 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map configTypes>
org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : $r3 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map configTypes> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : if $r3 != null
org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : if $r3 != null >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : $r6 = new java.util.HashMap
org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : $r6 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : specialinvoke $r6.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : specialinvoke $r6.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map configTypes> = $r6
org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map configTypes> = $r6 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : $r4 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map configTypes>
org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : $r4 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map configTypes> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r31 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Map configurationModules>
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r31 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Map configurationModules> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r32 = virtualinvoke r22.<org.apache.ambari.server.stack.ConfigurationModule: java.lang.String getConfigType()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r32 = virtualinvoke r22.<org.apache.ambari.server.stack.ConfigurationModule: java.lang.String getConfigType()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, r22)
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, r22) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : goto [?= $z0 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : goto [?= $z0 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r7 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r7 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r8 = virtualinvoke $r7.<org.apache.ambari.server.state.ServiceInfo: java.util.Set getExcludedConfigTypes()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r8 = virtualinvoke $r7.<org.apache.ambari.server.state.ServiceInfo: java.util.Set getExcludedConfigTypes()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getExcludedConfigTypes : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Set excludedConfigTypes>
org.apache.ambari.server.state.ServiceInfo.getExcludedConfigTypes : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Set excludedConfigTypes> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getExcludedConfigTypes : return $r1
org.apache.ambari.server.state.ServiceInfo.getExcludedConfigTypes : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : r33 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : r33 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z1 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z1 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if $z1 == 0
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if $z1 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r7 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r7 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r8 = virtualinvoke $r7.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getThemesDir()>()
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r8 = virtualinvoke $r7.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getThemesDir()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getThemesDir : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String themesDir>
org.apache.ambari.server.state.ServiceInfo.getThemesDir : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String themesDir> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getThemesDir : return $r1
org.apache.ambari.server.state.ServiceInfo.getThemesDir : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : if $r8 != null
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : if $r8 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r9 = new java.lang.StringBuilder
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r9 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r10 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.stack.ServiceDirectory serviceDirectory>
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r10 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.stack.ServiceDirectory serviceDirectory> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r11 = virtualinvoke $r10.<org.apache.ambari.server.stack.ServiceDirectory: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r11 = virtualinvoke $r10.<org.apache.ambari.server.stack.ServiceDirectory: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11)
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r13 = <java.io.File: java.lang.String separator>
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r13 = <java.io.File: java.lang.String separator> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13)
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r15 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r15 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r16 = virtualinvoke $r15.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getThemesDir()>()
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r16 = virtualinvoke $r15.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getThemesDir()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16)
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : r1 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : r1 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r18 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r18 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r19 = virtualinvoke $r18.<org.apache.ambari.server.state.ServiceInfo: java.util.List getThemes()>()
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r19 = virtualinvoke $r18.<org.apache.ambari.server.state.ServiceInfo: java.util.List getThemes()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getThemes : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List themes>
org.apache.ambari.server.state.ServiceInfo.getThemes : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List themes> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getThemes : return $r1
org.apache.ambari.server.state.ServiceInfo.getThemes : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : if $r19 == null
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : if $r19 == null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r6 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r6 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r7 = virtualinvoke $r6.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getQuickLinksConfigurationsDir()>()
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r7 = virtualinvoke $r6.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getQuickLinksConfigurationsDir()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getQuickLinksConfigurationsDir : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String quickLinksConfigurationsDir>
org.apache.ambari.server.state.ServiceInfo.getQuickLinksConfigurationsDir : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String quickLinksConfigurationsDir> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getQuickLinksConfigurationsDir : return $r1
org.apache.ambari.server.state.ServiceInfo.getQuickLinksConfigurationsDir : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : if $r7 != null
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : if $r7 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r8 = new java.lang.StringBuilder
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r8 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r9 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.stack.ServiceDirectory serviceDirectory>
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r9 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.stack.ServiceDirectory serviceDirectory> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r10 = virtualinvoke $r9.<org.apache.ambari.server.stack.ServiceDirectory: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r10 = virtualinvoke $r9.<org.apache.ambari.server.stack.ServiceDirectory: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10)
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r12 = <java.io.File: java.lang.String separator>
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r12 = <java.io.File: java.lang.String separator> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r14 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r14 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r15 = virtualinvoke $r14.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getQuickLinksConfigurationsDir()>()
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r15 = virtualinvoke $r14.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getQuickLinksConfigurationsDir()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15)
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : r1 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : r1 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r17 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r17 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r18 = virtualinvoke $r17.<org.apache.ambari.server.state.ServiceInfo: java.util.List getQuickLinksConfigurations()>()
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r18 = virtualinvoke $r17.<org.apache.ambari.server.state.ServiceInfo: java.util.List getQuickLinksConfigurations()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getQuickLinksConfigurations : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List quickLinksConfigurations>
org.apache.ambari.server.state.ServiceInfo.getQuickLinksConfigurations : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List quickLinksConfigurations> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getQuickLinksConfigurations : return $r1
org.apache.ambari.server.state.ServiceInfo.getQuickLinksConfigurations : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : if $r18 == null
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : if $r18 == null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.validateServiceInfo : $r1 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.validateServiceInfo : $r1 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.validateServiceInfo : $z0 = virtualinvoke $r1.<org.apache.ambari.server.state.ServiceInfo: boolean isValid()>()
org.apache.ambari.server.stack.ServiceModule.validateServiceInfo : $z0 = virtualinvoke $r1.<org.apache.ambari.server.state.ServiceInfo: boolean isValid()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.isValid : $z0 = r0.<org.apache.ambari.server.state.ServiceInfo: boolean valid>
org.apache.ambari.server.state.ServiceInfo.isValid : $z0 = r0.<org.apache.ambari.server.state.ServiceInfo: boolean valid> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.isValid : return $z0
org.apache.ambari.server.state.ServiceInfo.isValid : return $z0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.validateServiceInfo : if $z0 != 0
org.apache.ambari.server.stack.ServiceModule.validateServiceInfo : if $z0 != 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.validateServiceInfo : virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void setValid(boolean)>(0)
org.apache.ambari.server.stack.ServiceModule.validateServiceInfo : virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void setValid(boolean)>(0) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.validateServiceInfo : $r2 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.validateServiceInfo : $r2 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.validateServiceInfo : $r3 = virtualinvoke $r2.<org.apache.ambari.server.state.ServiceInfo: java.util.Collection getErrors()>()
org.apache.ambari.server.stack.ServiceModule.validateServiceInfo : $r3 = virtualinvoke $r2.<org.apache.ambari.server.state.ServiceInfo: java.util.Collection getErrors()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getErrors : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Set errorSet>
org.apache.ambari.server.state.ServiceInfo.getErrors : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Set errorSet> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getErrors : return $r1
org.apache.ambari.server.state.ServiceInfo.getErrors : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.validateServiceInfo : virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void addErrors(java.util.Collection)>($r3)
org.apache.ambari.server.stack.ServiceModule.validateServiceInfo : virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void addErrors(java.util.Collection)>($r3) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.addErrors : $r2 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Set errorSet>
org.apache.ambari.server.stack.ServiceModule.addErrors : $r2 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Set errorSet> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.addErrors : interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1)
org.apache.ambari.server.stack.ServiceModule.addErrors : interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : return $r4
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : return $r4 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : return $r14
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : return $r14 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.getErrors : $r1 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Set errorSet>
org.apache.ambari.server.stack.ServiceModule.getErrors : $r1 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Set errorSet> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.getErrors : return $r1
