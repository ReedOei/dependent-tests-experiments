org.apache.ambari.server.bootstrap.BootStrapResourceTest.getPort : $r4 = new java.net.ServerSocket >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.getPort : specialinvoke $r4.<java.net.ServerSocket: void <init>(int)>(0)
org.apache.ambari.server.bootstrap.BootStrapResourceTest.getPort : specialinvoke $r4.<java.net.ServerSocket: void <init>(int)>(0) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.getPort : r11 = null
org.apache.ambari.server.bootstrap.BootStrapResourceTest.getPort : r11 = null >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.getPort : i1 = virtualinvoke $r4.<java.net.ServerSocket: int getLocalPort()>()
org.apache.ambari.server.bootstrap.BootStrapResourceTest.getPort : i1 = virtualinvoke $r4.<java.net.ServerSocket: int getLocalPort()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.getPort : if $r4 == null
org.apache.ambari.server.bootstrap.BootStrapResourceTest.getPort : if $r4 == null >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.getPort : goto [?= virtualinvoke $r4.<java.net.ServerSocket: void close()>()]
org.apache.ambari.server.bootstrap.BootStrapResourceTest.getPort : goto [?= virtualinvoke $r4.<java.net.ServerSocket: void close()>()] >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.getPort : virtualinvoke $r4.<java.net.ServerSocket: void close()>()
org.apache.ambari.server.bootstrap.BootStrapResourceTest.getPort : virtualinvoke $r4.<java.net.ServerSocket: void close()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.getPort : return i1
org.apache.ambari.server.bootstrap.BootStrapResourceTest.getPort : return i1 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.setUp : specialinvoke r0.<com.sun.jersey.test.framework.JerseyTest: void setUp()>()
org.apache.ambari.server.bootstrap.BootStrapResourceTest.setUp : specialinvoke r0.<com.sun.jersey.test.framework.JerseyTest: void setUp()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.setUp : $r1 = newarray (com.google.inject.Module)[1]
org.apache.ambari.server.bootstrap.BootStrapResourceTest.setUp : $r1 = newarray (com.google.inject.Module)[1] >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.setUp : $r2 = new org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule
org.apache.ambari.server.bootstrap.BootStrapResourceTest.setUp : $r2 = new org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.setUp : specialinvoke $r2.<org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule: void <init>(org.apache.ambari.server.bootstrap.BootStrapResourceTest)>(r0)
org.apache.ambari.server.bootstrap.BootStrapResourceTest.setUp : specialinvoke $r2.<org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule: void <init>(org.apache.ambari.server.bootstrap.BootStrapResourceTest)>(r0) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.setUp : $r1[0] = $r2
org.apache.ambari.server.bootstrap.BootStrapResourceTest.setUp : $r1[0] = $r2 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.setUp : $r3 = staticinvoke <com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Module[])>($r1)
org.apache.ambari.server.bootstrap.BootStrapResourceTest.setUp : $r3 = staticinvoke <com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Module[])>($r1) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r2 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/ambari/server/bootstrap/BootStrapImpl;")
org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r2 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/ambari/server/bootstrap/BootStrapImpl;") >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : r1 = (org.apache.ambari.server.bootstrap.BootStrapImpl) $r2
org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : r1 = (org.apache.ambari.server.bootstrap.BootStrapImpl) $r2 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r3 = virtualinvoke r1.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BootStrapStatus getStatus(long)>(0L)
org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r3 = virtualinvoke r1.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BootStrapStatus getStatus(long)>(0L) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r4 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r3)
org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r4 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r3) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r5 = r0.<org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule: org.apache.ambari.server.bootstrap.BootStrapResourceTest this$0>
org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r5 = r0.<org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule: org.apache.ambari.server.bootstrap.BootStrapResourceTest this$0> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r6 = virtualinvoke $r5.<org.apache.ambari.server.bootstrap.BootStrapResourceTest: org.apache.ambari.server.bootstrap.BootStrapStatus generateDummyBSStatus()>()
org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r6 = virtualinvoke $r5.<org.apache.ambari.server.bootstrap.BootStrapResourceTest: org.apache.ambari.server.bootstrap.BootStrapStatus generateDummyBSStatus()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateDummyBSStatus : $r2 = new org.apache.ambari.server.bootstrap.BootStrapStatus
org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateDummyBSStatus : $r2 = new org.apache.ambari.server.bootstrap.BootStrapStatus >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateDummyBSStatus : specialinvoke $r2.<org.apache.ambari.server.bootstrap.BootStrapStatus: void <init>()>()
org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateDummyBSStatus : specialinvoke $r2.<org.apache.ambari.server.bootstrap.BootStrapStatus: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateDummyBSStatus : virtualinvoke $r2.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setLog(java.lang.String)>("Logging ")
org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateDummyBSStatus : virtualinvoke $r2.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setLog(java.lang.String)>("Logging ") >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapStatus.setLog : r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.lang.String log> = r1
org.apache.ambari.server.bootstrap.BootStrapStatus.setLog : r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.lang.String log> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateDummyBSStatus : $r3 = <org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat: org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat ERROR>
org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateDummyBSStatus : $r3 = <org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat: org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat ERROR> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateDummyBSStatus : virtualinvoke $r2.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setStatus(org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat)>($r3)
org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateDummyBSStatus : virtualinvoke $r2.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setStatus(org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat)>($r3) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapStatus.setStatus : r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat status> = r1
org.apache.ambari.server.bootstrap.BootStrapStatus.setStatus : r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat status> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateDummyBSStatus : $r4 = new java.util.ArrayList
org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateDummyBSStatus : $r4 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateDummyBSStatus : specialinvoke $r4.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateDummyBSStatus : specialinvoke $r4.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateDummyBSStatus : virtualinvoke $r2.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setHostsStatus(java.util.List)>($r4)
org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateDummyBSStatus : virtualinvoke $r2.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setHostsStatus(java.util.List)>($r4) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapStatus.setHostsStatus : r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.util.List hostsStatus> = r1
org.apache.ambari.server.bootstrap.BootStrapStatus.setHostsStatus : r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.util.List hostsStatus> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateDummyBSStatus : return $r2
org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateDummyBSStatus : return $r2 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : interfaceinvoke $r4.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r6)
org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : interfaceinvoke $r4.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r6) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r8 = staticinvoke <org.mockito.Matchers: java.lang.Object any(java.lang.Class)>(class "Lorg/apache/ambari/server/bootstrap/SshHostInfo;")
org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r8 = staticinvoke <org.mockito.Matchers: java.lang.Object any(java.lang.Class)>(class "Lorg/apache/ambari/server/bootstrap/SshHostInfo;") >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r9 = (org.apache.ambari.server.bootstrap.SshHostInfo) $r8
org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r9 = (org.apache.ambari.server.bootstrap.SshHostInfo) $r8 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r10 = virtualinvoke r1.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BSResponse runBootStrap(org.apache.ambari.server.bootstrap.SshHostInfo)>($r9)
org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r10 = virtualinvoke r1.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BSResponse runBootStrap(org.apache.ambari.server.bootstrap.SshHostInfo)>($r9) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r11 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r10)
org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r11 = staticinvoke <org.mockito.Mockito: org.mockito.stubbing.OngoingStubbing when(java.lang.Object)>($r10) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r12 = r0.<org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule: org.apache.ambari.server.bootstrap.BootStrapResourceTest this$0>
org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r12 = r0.<org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule: org.apache.ambari.server.bootstrap.BootStrapResourceTest this$0> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r13 = virtualinvoke $r12.<org.apache.ambari.server.bootstrap.BootStrapResourceTest: org.apache.ambari.server.bootstrap.BSResponse generateBSResponse()>()
org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r13 = virtualinvoke $r12.<org.apache.ambari.server.bootstrap.BootStrapResourceTest: org.apache.ambari.server.bootstrap.BSResponse generateBSResponse()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateBSResponse : $r2 = new org.apache.ambari.server.bootstrap.BSResponse
org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateBSResponse : $r2 = new org.apache.ambari.server.bootstrap.BSResponse >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateBSResponse : specialinvoke $r2.<org.apache.ambari.server.bootstrap.BSResponse: void <init>()>()
org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateBSResponse : specialinvoke $r2.<org.apache.ambari.server.bootstrap.BSResponse: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateBSResponse : virtualinvoke $r2.<org.apache.ambari.server.bootstrap.BSResponse: void setLog(java.lang.String)>("Logging")
org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateBSResponse : virtualinvoke $r2.<org.apache.ambari.server.bootstrap.BSResponse: void setLog(java.lang.String)>("Logging") >>>>>>>> org.apache.ambari.server.bootstrap.BSResponse.setLog : r0.<org.apache.ambari.server.bootstrap.BSResponse: java.lang.String log> = r1
org.apache.ambari.server.bootstrap.BSResponse.setLog : r0.<org.apache.ambari.server.bootstrap.BSResponse: java.lang.String log> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateBSResponse : virtualinvoke $r2.<org.apache.ambari.server.bootstrap.BSResponse: void setRequestId(long)>(1L)
org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateBSResponse : virtualinvoke $r2.<org.apache.ambari.server.bootstrap.BSResponse: void setRequestId(long)>(1L) >>>>>>>> org.apache.ambari.server.bootstrap.BSResponse.setRequestId : r0.<org.apache.ambari.server.bootstrap.BSResponse: long requestId> = l0
org.apache.ambari.server.bootstrap.BSResponse.setRequestId : r0.<org.apache.ambari.server.bootstrap.BSResponse: long requestId> = l0 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateBSResponse : $r3 = <org.apache.ambari.server.bootstrap.BSResponse$BSRunStat: org.apache.ambari.server.bootstrap.BSResponse$BSRunStat OK>
org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateBSResponse : $r3 = <org.apache.ambari.server.bootstrap.BSResponse$BSRunStat: org.apache.ambari.server.bootstrap.BSResponse$BSRunStat OK> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateBSResponse : virtualinvoke $r2.<org.apache.ambari.server.bootstrap.BSResponse: void setStatus(org.apache.ambari.server.bootstrap.BSResponse$BSRunStat)>($r3)
org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateBSResponse : virtualinvoke $r2.<org.apache.ambari.server.bootstrap.BSResponse: void setStatus(org.apache.ambari.server.bootstrap.BSResponse$BSRunStat)>($r3) >>>>>>>> org.apache.ambari.server.bootstrap.BSResponse.setStatus : r0.<org.apache.ambari.server.bootstrap.BSResponse: org.apache.ambari.server.bootstrap.BSResponse$BSRunStat status> = r1
org.apache.ambari.server.bootstrap.BSResponse.setStatus : r0.<org.apache.ambari.server.bootstrap.BSResponse: org.apache.ambari.server.bootstrap.BSResponse$BSRunStat status> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateBSResponse : return $r2
org.apache.ambari.server.bootstrap.BootStrapResourceTest.generateBSResponse : return $r2 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : interfaceinvoke $r11.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r13)
org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : interfaceinvoke $r11.<org.mockito.stubbing.OngoingStubbing: org.mockito.stubbing.OngoingStubbing thenReturn(java.lang.Object)>($r13) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r15 = virtualinvoke r0.<org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/bootstrap/BootStrapImpl;")
org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r15 = virtualinvoke r0.<org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/bootstrap/BootStrapImpl;") >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : interfaceinvoke $r15.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>(r1)
org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : interfaceinvoke $r15.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r16 = newarray (java.lang.Class)[1]
org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r16 = newarray (java.lang.Class)[1] >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r16[0] = class "Lorg/apache/ambari/server/api/rest/BootStrapResource;"
org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : $r16[0] = class "Lorg/apache/ambari/server/api/rest/BootStrapResource;" >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : virtualinvoke r0.<org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule: void requestStaticInjection(java.lang.Class[])>($r16)
org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule.configure : virtualinvoke r0.<org.apache.ambari.server.bootstrap.BootStrapResourceTest$MockModule: void requestStaticInjection(java.lang.Class[])>($r16) >>>>>>>> org.apache.ambari.server.api.rest.BootStrapResource.init : <org.apache.ambari.server.api.rest.BootStrapResource: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl> = r0
org.apache.ambari.server.api.rest.BootStrapResource.init : <org.apache.ambari.server.api.rest.BootStrapResource: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl> = r0 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.setUp : r0.<org.apache.ambari.server.bootstrap.BootStrapResourceTest: com.google.inject.Injector injector> = $r3
org.apache.ambari.server.bootstrap.BootStrapResourceTest.setUp : r0.<org.apache.ambari.server.bootstrap.BootStrapResourceTest: com.google.inject.Injector injector> = $r3 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.createDummySshInfo : $r2 = new org.codehaus.jettison.json.JSONObject
org.apache.ambari.server.bootstrap.BootStrapResourceTest.createDummySshInfo : $r2 = new org.codehaus.jettison.json.JSONObject >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.createDummySshInfo : specialinvoke $r2.<org.codehaus.jettison.json.JSONObject: void <init>()>()
org.apache.ambari.server.bootstrap.BootStrapResourceTest.createDummySshInfo : specialinvoke $r2.<org.codehaus.jettison.json.JSONObject: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.createDummySshInfo : virtualinvoke $r2.<org.codehaus.jettison.json.JSONObject: org.codehaus.jettison.json.JSONObject put(java.lang.String,java.lang.Object)>("sshkey", "awesome")
org.apache.ambari.server.bootstrap.BootStrapResourceTest.createDummySshInfo : virtualinvoke $r2.<org.codehaus.jettison.json.JSONObject: org.codehaus.jettison.json.JSONObject put(java.lang.String,java.lang.Object)>("sshkey", "awesome") >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.createDummySshInfo : $r4 = new java.util.ArrayList
org.apache.ambari.server.bootstrap.BootStrapResourceTest.createDummySshInfo : $r4 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.createDummySshInfo : specialinvoke $r4.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.bootstrap.BootStrapResourceTest.createDummySshInfo : specialinvoke $r4.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.createDummySshInfo : virtualinvoke $r2.<org.codehaus.jettison.json.JSONObject: org.codehaus.jettison.json.JSONObject put(java.lang.String,java.util.Collection)>("hosts", $r4)
org.apache.ambari.server.bootstrap.BootStrapResourceTest.createDummySshInfo : virtualinvoke $r2.<org.codehaus.jettison.json.JSONObject: org.codehaus.jettison.json.JSONObject put(java.lang.String,java.util.Collection)>("hosts", $r4) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapResourceTest.createDummySshInfo : return $r2
org.apache.ambari.server.bootstrap.BootStrapResourceTest.createDummySshInfo : return $r2 >>>>>>>> org.apache.ambari.server.api.rest.BootStrapResource.bootStrap : specialinvoke r0.<org.apache.ambari.server.api.rest.BootStrapResource: void normalizeHosts(org.apache.ambari.server.bootstrap.SshHostInfo)>(r1)
org.apache.ambari.server.api.rest.BootStrapResource.bootStrap : specialinvoke r0.<org.apache.ambari.server.api.rest.BootStrapResource: void normalizeHosts(org.apache.ambari.server.bootstrap.SshHostInfo)>(r1) >>>>>>>> org.apache.ambari.server.api.rest.BootStrapResource.normalizeHosts : $r6 = new java.util.ArrayList
org.apache.ambari.server.api.rest.BootStrapResource.normalizeHosts : $r6 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.api.rest.BootStrapResource.normalizeHosts : specialinvoke $r6.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.api.rest.BootStrapResource.normalizeHosts : specialinvoke $r6.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.api.rest.BootStrapResource.normalizeHosts : $r7 = new java.util.ArrayList
org.apache.ambari.server.api.rest.BootStrapResource.normalizeHosts : $r7 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.api.rest.BootStrapResource.normalizeHosts : specialinvoke $r7.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.api.rest.BootStrapResource.normalizeHosts : specialinvoke $r7.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.api.rest.BootStrapResource.normalizeHosts : $r8 = virtualinvoke r1.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List getHosts()>()
org.apache.ambari.server.api.rest.BootStrapResource.normalizeHosts : $r8 = virtualinvoke r1.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List getHosts()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.getHosts : $r1 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List hosts>
org.apache.ambari.server.bootstrap.SshHostInfo.getHosts : $r1 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List hosts> >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.getHosts : return $r1
org.apache.ambari.server.bootstrap.SshHostInfo.getHosts : return $r1 >>>>>>>> org.apache.ambari.server.api.rest.BootStrapResource.normalizeHosts : r4 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.api.rest.BootStrapResource.normalizeHosts : r4 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.api.rest.BootStrapResource.normalizeHosts : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.api.rest.BootStrapResource.normalizeHosts : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.api.rest.BootStrapResource.normalizeHosts : if $z0 == 0
org.apache.ambari.server.api.rest.BootStrapResource.normalizeHosts : if $z0 == 0 >>>>>>>> org.apache.ambari.server.api.rest.BootStrapResource.normalizeHosts : virtualinvoke r1.<org.apache.ambari.server.bootstrap.SshHostInfo: void setHosts(java.util.List)>($r7)
org.apache.ambari.server.api.rest.BootStrapResource.normalizeHosts : virtualinvoke r1.<org.apache.ambari.server.bootstrap.SshHostInfo: void setHosts(java.util.List)>($r7) >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.setHosts : r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List hosts> = r1
org.apache.ambari.server.bootstrap.SshHostInfo.setHosts : r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List hosts> = r1 >>>>>>>> org.apache.ambari.server.api.rest.BootStrapResource.bootStrap : $r4 = <org.apache.ambari.server.api.rest.BootStrapResource: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl>
org.apache.ambari.server.api.rest.BootStrapResource.bootStrap : $r4 = <org.apache.ambari.server.api.rest.BootStrapResource: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl> >>>>>>>> org.apache.ambari.server.api.rest.BootStrapResource.bootStrap : r3 = virtualinvoke $r4.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BSResponse runBootStrap(org.apache.ambari.server.bootstrap.SshHostInfo)>(r1)
org.apache.ambari.server.api.rest.BootStrapResource.bootStrap : r3 = virtualinvoke $r4.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BSResponse runBootStrap(org.apache.ambari.server.bootstrap.SshHostInfo)>(r1) >>>>>>>> org.apache.ambari.server.api.rest.BootStrapResource.bootStrap : return r3
org.apache.ambari.server.api.rest.BootStrapResource.bootStrap : return r3 >>>>>>>> org.apache.ambari.server.bootstrap.BSResponse$BSRunStat.values : $r0 = <org.apache.ambari.server.bootstrap.BSResponse$BSRunStat: org.apache.ambari.server.bootstrap.BSResponse$BSRunStat[] $VALUES>
org.apache.ambari.server.bootstrap.BSResponse$BSRunStat.values : $r0 = <org.apache.ambari.server.bootstrap.BSResponse$BSRunStat: org.apache.ambari.server.bootstrap.BSResponse$BSRunStat[] $VALUES> >>>>>>>> org.apache.ambari.server.bootstrap.BSResponse$BSRunStat.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
org.apache.ambari.server.bootstrap.BSResponse$BSRunStat.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSResponse$BSRunStat.values : $r2 = (org.apache.ambari.server.bootstrap.BSResponse$BSRunStat[]) $r1
org.apache.ambari.server.bootstrap.BSResponse$BSRunStat.values : $r2 = (org.apache.ambari.server.bootstrap.BSResponse$BSRunStat[]) $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSResponse$BSRunStat.values : return $r2
