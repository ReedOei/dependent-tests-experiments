org.apache.ambari.server.controller.PrereqCheckRequest.setTargetRepositoryVersion : r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity m_targetRepositoryVersion> = r1 >>>>>>>> org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : r3 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>()
org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : r3 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName>
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1 >>>>>>>> org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : $r9 = r0.<org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : $r9 = r0.<org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck: com.google.inject.Provider clustersProvider> >>>>>>>> org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : $r10 = interfaceinvoke $r9.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : $r10 = interfaceinvoke $r9.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.RequiredServicesInRepositoryCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.RequiredServicesInRepositoryCheckTest$1: org.apache.ambari.server.state.Clusters get()>()
org.apache.ambari.server.checks.RequiredServicesInRepositoryCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.RequiredServicesInRepositoryCheckTest$1: org.apache.ambari.server.state.Clusters get()>() >>>>>>>> org.apache.ambari.server.checks.RequiredServicesInRepositoryCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.RequiredServicesInRepositoryCheckTest$1: org.apache.ambari.server.state.Clusters val$clusters>
org.apache.ambari.server.checks.RequiredServicesInRepositoryCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.RequiredServicesInRepositoryCheckTest$1: org.apache.ambari.server.state.Clusters val$clusters> >>>>>>>> org.apache.ambari.server.checks.RequiredServicesInRepositoryCheckTest$1.get : return $r1
org.apache.ambari.server.checks.RequiredServicesInRepositoryCheckTest$1.get : return $r1 >>>>>>>> org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : $r11 = (org.apache.ambari.server.state.Clusters) $r10
org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : $r11 = (org.apache.ambari.server.state.Clusters) $r10 >>>>>>>> org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : r4 = interfaceinvoke $r11.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r3)
org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : r4 = interfaceinvoke $r11.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : r5 = virtualinvoke r0.<org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck: org.apache.ambari.server.state.repository.VersionDefinitionXml getVersionDefinitionXml(org.apache.ambari.server.controller.PrereqCheckRequest)>(r2)
org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : r5 = virtualinvoke r0.<org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck: org.apache.ambari.server.state.repository.VersionDefinitionXml getVersionDefinitionXml(org.apache.ambari.server.controller.PrereqCheckRequest)>(r2) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : r2 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : r2 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity m_targetRepositoryVersion>
org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity m_targetRepositoryVersion> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : return $r1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : r5 = virtualinvoke r2.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.state.repository.VersionDefinitionXml getRepositoryXml()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : r5 = virtualinvoke r2.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.state.repository.VersionDefinitionXml getRepositoryXml()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : return r5
org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : return r5 >>>>>>>> org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : r6 = virtualinvoke r5.<org.apache.ambari.server.state.repository.VersionDefinitionXml: java.util.Set getMissingDependencies(org.apache.ambari.server.state.Cluster)>(r4)
org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : r6 = virtualinvoke r5.<org.apache.ambari.server.state.repository.VersionDefinitionXml: java.util.Set getMissingDependencies(org.apache.ambari.server.state.Cluster)>(r4) >>>>>>>> org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : $z0 = interfaceinvoke r6.<java.util.Set: boolean isEmpty()>()
org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : $z0 = interfaceinvoke r6.<java.util.Set: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : if $z0 != 0
org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : if $z0 != 0 >>>>>>>> org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : r7 = virtualinvoke r0.<org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck: java.lang.String getFailReason(org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>(r1, r2)
org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : r7 = virtualinvoke r0.<org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck: java.lang.String getFailReason(org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>(r1, r2) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r3 = virtualinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("default", r1, r2)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r3 = virtualinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("default", r1, r2) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r12 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription m_description>
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r12 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription m_description> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r32 = virtualinvoke $r12.<org.apache.ambari.server.checks.CheckDescription: java.lang.String getFail(java.lang.String)>(r1)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r32 = virtualinvoke $r12.<org.apache.ambari.server.checks.CheckDescription: java.lang.String getFail(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r2 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails>
org.apache.ambari.server.checks.CheckDescription.getFail : $r2 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails> >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.ambari.server.checks.CheckDescription.getFail : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : if $z0 == 0
org.apache.ambari.server.checks.CheckDescription.getFail : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r3 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails>
org.apache.ambari.server.checks.CheckDescription.getFail : $r3 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails> >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.ambari.server.checks.CheckDescription.getFail : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r5 = (java.lang.String) $r4
org.apache.ambari.server.checks.CheckDescription.getFail : $r5 = (java.lang.String) $r4 >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : goto [?= return $r5]
org.apache.ambari.server.checks.CheckDescription.getFail : goto [?= return $r5] >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : return $r5
org.apache.ambari.server.checks.CheckDescription.getFail : return $r5 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r4 = virtualinvoke r3.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r4 = virtualinvoke r3.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z0 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{version}}")
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z0 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{version}}") >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z0 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z5 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{fails}}")
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z5 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{fails}}") >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z5 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z5 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : return r32
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : return r32 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : return $r3
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : return $r3 >>>>>>>> org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : $r13 = newarray (java.lang.Object)[1]
org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : $r13 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : $r14 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,java.lang.String)>(r6, ", ")
org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : $r14 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,java.lang.String)>(r6, ", ") >>>>>>>> org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : $r13[0] = $r14
org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : $r13[0] = $r14 >>>>>>>> org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The following services are also required to be included in this upgrade: %s", $r13)
org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("The following services are also required to be included in this upgrade: %s", $r13) >>>>>>>> org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : $r15 = new java.util.LinkedHashSet
org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : $r15 = new java.util.LinkedHashSet >>>>>>>> org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : specialinvoke $r15.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(r6)
org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : specialinvoke $r15.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(r6) >>>>>>>> org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailedOn(java.util.LinkedHashSet)>($r15)
org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailedOn(java.util.LinkedHashSet)>($r15) >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.setFailedOn : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet m_failedOn> = r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.setFailedOn : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet m_failedOn> = r1 >>>>>>>> org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : $r16 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus FAIL>
org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : $r16 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus FAIL> >>>>>>>> org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setStatus(org.apache.ambari.server.state.stack.PrereqCheckStatus)>($r16)
org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setStatus(org.apache.ambari.server.state.stack.PrereqCheckStatus)>($r16) >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.setStatus : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> = r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.setStatus : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> = r1 >>>>>>>> org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : $r17 = newarray (java.lang.Object)[1]
org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : $r17 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : $r17[0] = r8
org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : $r17[0] = r8 >>>>>>>> org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : $r18 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r7, $r17)
org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : $r18 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>(r7, $r17) >>>>>>>> org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailReason(java.lang.String)>($r18)
org.apache.ambari.server.checks.RequiredServicesInRepositoryCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailReason(java.lang.String)>($r18) >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.setFailReason : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.lang.String m_failReason> = r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.setFailReason : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.lang.String m_failReason> = r1 >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status>
org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : return $r1
