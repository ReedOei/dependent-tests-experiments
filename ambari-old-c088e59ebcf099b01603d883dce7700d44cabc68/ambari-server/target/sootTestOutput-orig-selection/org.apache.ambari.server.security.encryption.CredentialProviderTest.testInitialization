org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyInitialized : $r1 = r0.<org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: char[] master> >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyInitialized : if $r1 == null
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyInitialized : if $r1 == null >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyInitialized : $z0 = 1
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyInitialized : $z0 = 1 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyInitialized : goto [?= return $z0]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyInitialized : goto [?= return $z0] >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyInitialized : return $z0
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyInitialized : return $z0 >>>>>>>> org.apache.ambari.server.security.encryption.AbstractCredentialStore.setMasterKeyService : r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService> = r1
org.apache.ambari.server.security.encryption.AbstractCredentialStore.setMasterKeyService : r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService> = r1 >>>>>>>> org.apache.ambari.server.security.encryption.CredentialProvider.getKeystoreService : $r1 = r0.<org.apache.ambari.server.security.encryption.CredentialProvider: org.apache.ambari.server.security.encryption.CredentialStore keystoreService>
org.apache.ambari.server.security.encryption.CredentialProvider.getKeystoreService : $r1 = r0.<org.apache.ambari.server.security.encryption.CredentialProvider: org.apache.ambari.server.security.encryption.CredentialStore keystoreService> >>>>>>>> org.apache.ambari.server.security.encryption.CredentialProvider.getKeystoreService : return $r1
org.apache.ambari.server.security.encryption.CredentialProvider.getKeystoreService : return $r1 >>>>>>>> org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : $r3 = r0.<org.apache.ambari.server.security.encryption.CredentialProviderTest: org.junit.rules.TemporaryFolder tmpFolder>
org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : $r3 = r0.<org.apache.ambari.server.security.encryption.CredentialProviderTest: org.junit.rules.TemporaryFolder tmpFolder> >>>>>>>> org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : r1 = virtualinvoke $r3.<org.junit.rules.TemporaryFolder: java.io.File newFile(java.lang.String)>("master")
org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : r1 = virtualinvoke $r3.<org.junit.rules.TemporaryFolder: java.io.File newFile(java.lang.String)>("master") >>>>>>>> org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : $z0 = staticinvoke <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: boolean initializeMasterKeyFile(java.io.File,java.lang.String)>(r1, "blahblah!")
org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : $z0 = staticinvoke <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: boolean initializeMasterKeyFile(java.io.File,java.lang.String)>(r1, "blahblah!") >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r4 = <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: org.slf4j.Logger LOG>
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r4 = <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r5 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r5 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Persisting master key into {}", $r5)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Persisting master key into {}", $r5) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : r66 = null
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : r66 = null >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : if r1 == null
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : if r1 == null >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r37 = <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: org.apache.ambari.server.security.encryption.AESEncryptor aes>
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r37 = <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: org.apache.ambari.server.security.encryption.AESEncryptor aes> >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : r66 = virtualinvoke $r37.<org.apache.ambari.server.security.encryption.AESEncryptor: org.apache.ambari.server.security.encryption.EncryptionResult encrypt(java.lang.String)>(r1)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : r66 = virtualinvoke $r37.<org.apache.ambari.server.security.encryption.AESEncryptor: org.apache.ambari.server.security.encryption.EncryptionResult encrypt(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8")
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8") >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : r3 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AESEncryptor: org.apache.ambari.server.security.encryption.EncryptionResult encrypt(byte[])>(r2)
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : r3 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AESEncryptor: org.apache.ambari.server.security.encryption.EncryptionResult encrypt(byte[])>(r2) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r3 = new org.apache.ambari.server.security.encryption.EncryptionResult
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r3 = new org.apache.ambari.server.security.encryption.EncryptionResult >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r5 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: byte[] salt>
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r5 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: byte[] salt> >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r4 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher ecipher>
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r4 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher ecipher> >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r6 = virtualinvoke $r4.<javax.crypto.Cipher: java.security.AlgorithmParameters getParameters()>()
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r6 = virtualinvoke $r4.<javax.crypto.Cipher: java.security.AlgorithmParameters getParameters()>() >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r7 = virtualinvoke $r6.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>(class "Ljavax/crypto/spec/IvParameterSpec;")
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r7 = virtualinvoke $r6.<java.security.AlgorithmParameters: java.security.spec.AlgorithmParameterSpec getParameterSpec(java.lang.Class)>(class "Ljavax/crypto/spec/IvParameterSpec;") >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r8 = (javax.crypto.spec.IvParameterSpec) $r7
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r8 = (javax.crypto.spec.IvParameterSpec) $r7 >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r9 = virtualinvoke $r8.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>()
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r9 = virtualinvoke $r8.<javax.crypto.spec.IvParameterSpec: byte[] getIV()>() >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r10 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher ecipher>
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r10 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher ecipher> >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r11 = virtualinvoke $r10.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1)
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r11 = virtualinvoke $r10.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r1) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : specialinvoke $r3.<org.apache.ambari.server.security.encryption.EncryptionResult: void <init>(byte[],byte[],byte[])>($r5, $r9, $r11)
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : specialinvoke $r3.<org.apache.ambari.server.security.encryption.EncryptionResult: void <init>(byte[],byte[],byte[])>($r5, $r9, $r11) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : return $r3
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : return $r3 >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : return r3
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : return r3 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : goto [?= $z0 = virtualinvoke r0.<java.io.File: boolean exists()>()]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : goto [?= $z0 = virtualinvoke r0.<java.io.File: boolean exists()>()] >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $z0 = virtualinvoke r0.<java.io.File: boolean exists()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : if $z0 == 0
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : if $z0 == 0 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $l0 = virtualinvoke r0.<java.io.File: long length()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $l0 = virtualinvoke r0.<java.io.File: long length()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $b1 = $l0 cmp 0L
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $b1 = $l0 cmp 0L >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : if $b1 == 0
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : if $b1 == 0 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r28 = <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: org.slf4j.Logger LOG>
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r28 = <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r27 = newarray (java.lang.Object)[1]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r27 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r29 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r29 = virtualinvoke r0.<java.io.File: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r27[0] = $r29
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r27[0] = $r29 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r30 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Master key file exists at %s, resetting.", $r27)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r30 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Master key file exists at %s, resetting.", $r27) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : interfaceinvoke $r28.<org.slf4j.Logger: void info(java.lang.String)>($r30)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : interfaceinvoke $r28.<org.slf4j.Logger: void info(java.lang.String)>($r30) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : r68 = null
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : r68 = null >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r31 = new java.io.FileOutputStream
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r31 = new java.io.FileOutputStream >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : specialinvoke $r31.<java.io.FileOutputStream: void <init>(java.io.File)>(r0)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : specialinvoke $r31.<java.io.FileOutputStream: void <init>(java.io.File)>(r0) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : r68 = virtualinvoke $r31.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : r68 = virtualinvoke $r31.<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : virtualinvoke r68.<java.nio.channels.FileChannel: java.nio.channels.FileChannel truncate(long)>(0L)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : virtualinvoke r68.<java.nio.channels.FileChannel: java.nio.channels.FileChannel truncate(long)>(0L) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : if r68 == null
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : if r68 == null >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : virtualinvoke r68.<java.nio.channels.FileChannel: void close()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : virtualinvoke r68.<java.nio.channels.FileChannel: void close()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : goto [?= (branch)]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : if r66 == null
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : if r66 == null >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r6 = new java.util.ArrayList
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r6 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : specialinvoke $r6.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : specialinvoke $r6.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r7 = new java.lang.StringBuilder
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r7 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#1.0# ")
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("#1.0# ") >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r9 = staticinvoke <org.apache.commons.net.ntp.TimeStamp: org.apache.commons.net.ntp.TimeStamp getCurrentTime()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r9 = staticinvoke <org.apache.commons.net.ntp.TimeStamp: org.apache.commons.net.ntp.TimeStamp getCurrentTime()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r10 = virtualinvoke $r9.<org.apache.commons.net.ntp.TimeStamp: java.lang.String toDateString()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r10 = virtualinvoke $r9.<org.apache.commons.net.ntp.TimeStamp: java.lang.String toDateString()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r12)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>($r12) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r13 = new java.lang.StringBuilder
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r13 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : specialinvoke $r13.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r14 = r66.<org.apache.ambari.server.security.encryption.EncryptionResult: byte[] salt>
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r14 = r66.<org.apache.ambari.server.security.encryption.EncryptionResult: byte[] salt> >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r15 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>($r14)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r15 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>($r14) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::")
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::") >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r18 = r66.<org.apache.ambari.server.security.encryption.EncryptionResult: byte[] iv>
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r18 = r66.<org.apache.ambari.server.security.encryption.EncryptionResult: byte[] iv> >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r19 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>($r18)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r19 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>($r18) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::")
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("::") >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r22 = r66.<org.apache.ambari.server.security.encryption.EncryptionResult: byte[] cipher>
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r22 = r66.<org.apache.ambari.server.security.encryption.EncryptionResult: byte[] cipher> >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r23 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>($r22)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r23 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>($r22) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r26 = virtualinvoke $r25.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8")
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r26 = virtualinvoke $r25.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8") >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : r75 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>($r26)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : r75 = staticinvoke <org.apache.commons.codec.binary.Base64: java.lang.String encodeBase64String(byte[])>($r26) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r75)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r75) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection)>(r0, "UTF8", $r6)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection)>(r0, "UTF8", $r6) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : staticinvoke <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: void protectAccess(java.io.File)>(r0)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : staticinvoke <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: void protectAccess(java.io.File)>(r0) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z0 = virtualinvoke r0.<java.io.File: boolean exists()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z0 == 0
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z0 == 0 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z1 = virtualinvoke r0.<java.io.File: boolean setReadable(boolean,boolean)>(0, 0)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z1 = virtualinvoke r0.<java.io.File: boolean setReadable(boolean,boolean)>(0, 0) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z1 == 0
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z1 == 0 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z2 = virtualinvoke r0.<java.io.File: boolean setReadable(boolean,boolean)>(1, 1)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z2 = virtualinvoke r0.<java.io.File: boolean setReadable(boolean,boolean)>(1, 1) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z2 != 0
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z2 != 0 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z3 = virtualinvoke r0.<java.io.File: boolean setWritable(boolean,boolean)>(0, 0)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z3 = virtualinvoke r0.<java.io.File: boolean setWritable(boolean,boolean)>(0, 0) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z3 == 0
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z3 == 0 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z4 = virtualinvoke r0.<java.io.File: boolean setWritable(boolean,boolean)>(1, 1)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z4 = virtualinvoke r0.<java.io.File: boolean setWritable(boolean,boolean)>(1, 1) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z4 != 0
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z4 != 0 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z5 = virtualinvoke r0.<java.io.File: boolean isDirectory()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z5 = virtualinvoke r0.<java.io.File: boolean isDirectory()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z5 == 0
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z5 == 0 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z6 = virtualinvoke r0.<java.io.File: boolean setExecutable(boolean,boolean)>(0, 0)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z6 = virtualinvoke r0.<java.io.File: boolean setExecutable(boolean,boolean)>(0, 0) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z6 != 0
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : if $z6 != 0 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : goto [?= return 1]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : goto [?= return 1] >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : return 1
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : return 1 >>>>>>>> org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : staticinvoke <junit.framework.Assert: void assertTrue(boolean)>($z0)
org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : staticinvoke <junit.framework.Assert: void assertTrue(boolean)>($z0) >>>>>>>> org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : $r4 = new org.apache.ambari.server.security.encryption.MasterKeyServiceImpl
org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : $r4 = new org.apache.ambari.server.security.encryption.MasterKeyServiceImpl >>>>>>>> org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : specialinvoke $r4.<org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: void <init>(java.io.File)>(r1)
org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : specialinvoke $r4.<org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: void <init>(java.io.File)>(r1) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : r13 = null
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : r13 = null >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $r4 = new java.io.FileReader
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $r4 = new java.io.FileReader >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : specialinvoke $r4.<java.io.FileReader: void <init>(java.io.File)>(r0)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : specialinvoke $r4.<java.io.FileReader: void <init>(java.io.File)>(r0) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : r13 = $r4
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : r13 = $r4 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $r5 = "#1.0# "
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $r5 = "#1.0# " >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $i0 = virtualinvoke $r5.<java.lang.String: int length()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $i0 = virtualinvoke $r5.<java.lang.String: int length()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : r14 = newarray (char)[$i0]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : r14 = newarray (char)[$i0] >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $i1 = virtualinvoke $r4.<java.io.FileReader: int read(char[])>(r14)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $i1 = virtualinvoke $r4.<java.io.FileReader: int read(char[])>(r14) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $i2 = lengthof r14
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $i2 = lengthof r14 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : if $i1 != $i2
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : if $i1 != $i2 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $r6 = "#1.0# "
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $r6 = "#1.0# " >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $r7 = virtualinvoke $r6.<java.lang.String: char[] toCharArray()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $r7 = virtualinvoke $r6.<java.lang.String: char[] toCharArray()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $z1 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>(r14, $r7)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $z1 = staticinvoke <java.util.Arrays: boolean equals(char[],char[])>(r14, $r7) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : if $z1 == 0
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : if $z1 == 0 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $z2 = 1
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $z2 = 1 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : goto [?= z0 = $z2]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : goto [?= z0 = $z2] >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : z0 = $z2
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : z0 = $z2 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : if $r4 == null
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : if $r4 == null >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : virtualinvoke $r4.<java.io.FileReader: void close()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : virtualinvoke $r4.<java.io.FileReader: void close()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : goto [?= return z0]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : goto [?= return z0] >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : return z0
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : return z0 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : r26 = staticinvoke <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.lang.String)>(r1, "UTF8")
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : r26 = staticinvoke <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.lang.String)>(r1, "UTF8") >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r5 = interfaceinvoke r26.<java.util.List: java.lang.Object get(int)>(0)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r5 = interfaceinvoke r26.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : r2 = (java.lang.String) $r5
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : r2 = (java.lang.String) $r5 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r7 = <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: org.slf4j.Logger LOG>
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r7 = <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r6 = new java.lang.StringBuilder
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r6 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Loading from persistent master: ")
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Loading from persistent master: ") >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String)>($r10)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : interfaceinvoke $r7.<org.slf4j.Logger: void info(java.lang.String)>($r10) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r11 = new java.lang.String
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r11 = new java.lang.String >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r12 = interfaceinvoke r26.<java.util.List: java.lang.Object get(int)>(1)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r12 = interfaceinvoke r26.<java.util.List: java.lang.Object get(int)>(1) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r13 = (java.lang.String) $r12
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r13 = (java.lang.String) $r12 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r14 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>($r13)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r14 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>($r13) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : specialinvoke $r11.<java.lang.String: void <init>(byte[])>($r14)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : specialinvoke $r11.<java.lang.String: void <init>(byte[])>($r14) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : r4 = virtualinvoke $r11.<java.lang.String: java.lang.String[] split(java.lang.String)>("::")
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : r4 = virtualinvoke $r11.<java.lang.String: java.lang.String[] split(java.lang.String)>("::") >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r15 = new java.lang.String
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r15 = new java.lang.String >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r17 = <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: org.apache.ambari.server.security.encryption.AESEncryptor aes>
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r17 = <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: org.apache.ambari.server.security.encryption.AESEncryptor aes> >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r16 = r4[0]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r16 = r4[0] >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r18 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>($r16)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r18 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>($r16) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r19 = r4[1]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r19 = r4[1] >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r20 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>($r19)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r20 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>($r19) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r21 = r4[2]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r21 = r4[2] >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r22 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>($r21)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r22 = staticinvoke <org.apache.commons.codec.binary.Base64: byte[] decodeBase64(java.lang.String)>($r21) >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r23 = virtualinvoke $r17.<org.apache.ambari.server.security.encryption.AESEncryptor: byte[] decrypt(byte[],byte[],byte[])>($r18, $r20, $r22)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r23 = virtualinvoke $r17.<org.apache.ambari.server.security.encryption.AESEncryptor: byte[] decrypt(byte[],byte[],byte[])>($r18, $r20, $r22) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r5 = new java.lang.String
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r5 = new java.lang.String >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r6 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: char[] passPhrase>
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r6 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: char[] passPhrase> >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : specialinvoke $r5.<java.lang.String: void <init>(char[])>($r6)
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : specialinvoke $r5.<java.lang.String: void <init>(char[])>($r6) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : r4 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.SecretKey getKeyFromPassword(java.lang.String,byte[])>($r5, r1)
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : r4 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.SecretKey getKeyFromPassword(java.lang.String,byte[])>($r5, r1) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r7 = null
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r7 = null >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r3 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>("PBKDF2WithHmacSHA1")
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r3 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>("PBKDF2WithHmacSHA1") >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : $r4 = new javax.crypto.spec.PBEKeySpec
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : $r4 = new javax.crypto.spec.PBEKeySpec >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : $r5 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>()
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : $r5 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>() >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, r2, 65536, 128)
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : specialinvoke $r4.<javax.crypto.spec.PBEKeySpec: void <init>(char[],byte[],int,int)>($r5, r2, 65536, 128) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r7 = virtualinvoke r3.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r4)
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r7 = virtualinvoke r3.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r4) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : goto [?= return r7]
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : goto [?= return r7] >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : return r7
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : return r7 >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r7 = new javax.crypto.spec.SecretKeySpec
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r7 = new javax.crypto.spec.SecretKeySpec >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r8 = interfaceinvoke r4.<javax.crypto.SecretKey: byte[] getEncoded()>()
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r8 = interfaceinvoke r4.<javax.crypto.SecretKey: byte[] getEncoded()>() >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, "AES")
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : specialinvoke $r7.<javax.crypto.spec.SecretKeySpec: void <init>(byte[],java.lang.String)>($r8, "AES") >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.SecretKey secret> = $r7
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.SecretKey secret> = $r7 >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r10 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher dcipher>
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r10 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher dcipher> >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r11 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.SecretKey secret>
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r11 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.SecretKey secret> >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r9 = new javax.crypto.spec.IvParameterSpec
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r9 = new javax.crypto.spec.IvParameterSpec >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : specialinvoke $r9.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r2)
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : specialinvoke $r9.<javax.crypto.spec.IvParameterSpec: void <init>(byte[])>(r2) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : virtualinvoke $r10.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r11, $r9)
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : virtualinvoke $r10.<javax.crypto.Cipher: void init(int,java.security.Key,java.security.spec.AlgorithmParameterSpec)>(2, $r11, $r9) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r12 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher dcipher>
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r12 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher dcipher> >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r13 = virtualinvoke $r12.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r3)
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r13 = virtualinvoke $r12.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r3) >>>>>>>> org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : return $r13
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : return $r13 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : specialinvoke $r15.<java.lang.String: void <init>(byte[],java.lang.String)>($r23, "UTF8")
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : specialinvoke $r15.<java.lang.String: void <init>(byte[],java.lang.String)>($r23, "UTF8") >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r24 = virtualinvoke $r15.<java.lang.String: char[] toCharArray()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r24 = virtualinvoke $r15.<java.lang.String: char[] toCharArray()>() >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : r0.<org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: char[] master> = $r24
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : r0.<org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: char[] master> = $r24 >>>>>>>> org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : goto [?= return]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : goto [?= return] >>>>>>>> org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : $z1 = interfaceinvoke $r4.<org.apache.ambari.server.security.encryption.MasterKeyService: boolean isMasterKeyInitialized()>()
org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : $z1 = interfaceinvoke $r4.<org.apache.ambari.server.security.encryption.MasterKeyService: boolean isMasterKeyInitialized()>() >>>>>>>> org.apache.ambari.server.security.encryption.CredentialProviderTest.createMasterKey : if $z1 != 0
