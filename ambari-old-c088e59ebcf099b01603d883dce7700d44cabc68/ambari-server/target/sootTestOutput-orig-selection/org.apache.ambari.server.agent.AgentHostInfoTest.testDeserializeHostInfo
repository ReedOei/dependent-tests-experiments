org.apache.ambari.server.agent.HeartbeatTestHelper.getTestModule : $r0 = new org.apache.ambari.server.agent.HeartbeatTestHelper$1 >>>>>>>> org.apache.ambari.server.agent.HeartbeatTestHelper.getTestModule : specialinvoke $r0.<org.apache.ambari.server.agent.HeartbeatTestHelper$1: void <init>()>()
org.apache.ambari.server.agent.HeartbeatTestHelper.getTestModule : specialinvoke $r0.<org.apache.ambari.server.agent.HeartbeatTestHelper$1: void <init>()>() >>>>>>>> org.apache.ambari.server.agent.HeartbeatTestHelper.getTestModule : return $r0
org.apache.ambari.server.agent.HeartbeatTestHelper.getTestModule : return $r0 >>>>>>>> org.apache.ambari.server.agent.HeartbeatTestHelper$1.configure : specialinvoke r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: void configure()>()
org.apache.ambari.server.agent.HeartbeatTestHelper$1.configure : specialinvoke r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: void configure()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r72 = "src/test/resources/stacks"
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r72 = "src/test/resources/stacks" >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r73 = "src/test/resources/version"
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r73 = "src/test/resources/version" >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r74 = "src/test/resources/"
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : r74 = "src/test/resources/" >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name")
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name") >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z0 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("Windows")
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z0 = virtualinvoke $r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("Windows") >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z0 == 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z0 == 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r4 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r4 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r3 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_PERSISTENCE_TYPE>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r3 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_PERSISTENCE_TYPE> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r5 = virtualinvoke $r3.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r5 = virtualinvoke $r3.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String m_key>
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String m_key> >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : return $r1
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : return $r1 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z1 = virtualinvoke $r4.<java.util.Properties: boolean containsKey(java.lang.Object)>($r5)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z1 = virtualinvoke $r4.<java.util.Properties: boolean containsKey(java.lang.Object)>($r5) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z1 != 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z1 != 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r57 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r57 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r56 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_PERSISTENCE_TYPE>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r56 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_PERSISTENCE_TYPE> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r58 = virtualinvoke $r56.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r58 = virtualinvoke $r56.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r57.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r58, "in-memory")
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r57.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r58, "in-memory") >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r7 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r7 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r6 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty METADATA_DIR_PATH>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r6 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty METADATA_DIR_PATH> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r8 = virtualinvoke $r6.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r8 = virtualinvoke $r6.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z2 = virtualinvoke $r7.<java.util.Properties: boolean containsKey(java.lang.Object)>($r8)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z2 = virtualinvoke $r7.<java.util.Properties: boolean containsKey(java.lang.Object)>($r8) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z2 != 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z2 != 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r53 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r53 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r52 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty METADATA_DIR_PATH>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r52 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty METADATA_DIR_PATH> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r54 = virtualinvoke $r52.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r54 = virtualinvoke $r52.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r53.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r54, r72)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r53.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r54, r72) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r10 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r10 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r9 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_VERSION_FILE>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r9 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_VERSION_FILE> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r11 = virtualinvoke $r9.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r11 = virtualinvoke $r9.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z3 = virtualinvoke $r10.<java.util.Properties: boolean containsKey(java.lang.Object)>($r11)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z3 = virtualinvoke $r10.<java.util.Properties: boolean containsKey(java.lang.Object)>($r11) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z3 != 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z3 != 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r49 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r49 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r48 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_VERSION_FILE>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r48 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_VERSION_FILE> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r50 = virtualinvoke $r48.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r50 = virtualinvoke $r48.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r49.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r50, r73)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r49.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r50, r73) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r13 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r13 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r12 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty OS_VERSION>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r12 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty OS_VERSION> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r14 = virtualinvoke $r12.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r14 = virtualinvoke $r12.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z4 = virtualinvoke $r13.<java.util.Properties: boolean containsKey(java.lang.Object)>($r14)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z4 = virtualinvoke $r13.<java.util.Properties: boolean containsKey(java.lang.Object)>($r14) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z4 != 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z4 != 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r45 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r45 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r44 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty OS_VERSION>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r44 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty OS_VERSION> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r46 = virtualinvoke $r44.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r46 = virtualinvoke $r44.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r45.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r46, "centos5")
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r45.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r46, "centos5") >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r16 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r16 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r15 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r15 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r17 = virtualinvoke $r15.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r17 = virtualinvoke $r15.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z5 = virtualinvoke $r16.<java.util.Properties: boolean containsKey(java.lang.Object)>($r17)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z5 = virtualinvoke $r16.<java.util.Properties: boolean containsKey(java.lang.Object)>($r17) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z5 != 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z5 != 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r41 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r41 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r40 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r40 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r42 = virtualinvoke $r40.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r42 = virtualinvoke $r40.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r41.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r42, r74)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r41.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r42, r74) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r19 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r19 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r18 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty RESOURCES_DIR>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r18 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty RESOURCES_DIR> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r20 = virtualinvoke $r18.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r20 = virtualinvoke $r18.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z6 = virtualinvoke $r19.<java.util.Properties: boolean containsKey(java.lang.Object)>($r20)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $z6 = virtualinvoke $r19.<java.util.Properties: boolean containsKey(java.lang.Object)>($r20) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z6 != 0
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : if $z6 != 0 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r37 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r37 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r36 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty RESOURCES_DIR>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r36 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty RESOURCES_DIR> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r38 = virtualinvoke $r36.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r38 = virtualinvoke $r36.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r37.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r38, "src/test/resources/")
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke $r37.<java.util.Properties: java.lang.Object setProperty(java.lang.String,java.lang.String)>($r38, "src/test/resources/") >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r21 = new org.apache.ambari.server.ldap.LdapModule
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r21 = new org.apache.ambari.server.ldap.LdapModule >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : specialinvoke $r21.<org.apache.ambari.server.ldap.LdapModule: void <init>()>()
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : specialinvoke $r21.<org.apache.ambari.server.ldap.LdapModule: void <init>()>() >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: void install(com.google.inject.Module)>($r21)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : virtualinvoke r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: void install(com.google.inject.Module)>($r21) >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : $r3 = virtualinvoke r0.<org.apache.ambari.server.ldap.LdapModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/LdapFacade;")
org.apache.ambari.server.ldap.LdapModule.configure : $r3 = virtualinvoke r0.<org.apache.ambari.server.ldap.LdapModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/LdapFacade;") >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : interfaceinvoke $r3.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/AmbariLdapFacade;")
org.apache.ambari.server.ldap.LdapModule.configure : interfaceinvoke $r3.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/AmbariLdapFacade;") >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : $r5 = virtualinvoke r0.<org.apache.ambari.server.ldap.LdapModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/LdapConfigurationService;")
org.apache.ambari.server.ldap.LdapModule.configure : $r5 = virtualinvoke r0.<org.apache.ambari.server.ldap.LdapModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/LdapConfigurationService;") >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : interfaceinvoke $r5.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/ads/DefaultLdapConfigurationService;")
org.apache.ambari.server.ldap.LdapModule.configure : interfaceinvoke $r5.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/ads/DefaultLdapConfigurationService;") >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : $r7 = virtualinvoke r0.<org.apache.ambari.server.ldap.LdapModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/LdapAttributeDetectionService;")
org.apache.ambari.server.ldap.LdapModule.configure : $r7 = virtualinvoke r0.<org.apache.ambari.server.ldap.LdapModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/LdapAttributeDetectionService;") >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : interfaceinvoke $r7.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/ads/DefaultLdapAttributeDetectionService;")
org.apache.ambari.server.ldap.LdapModule.configure : interfaceinvoke $r7.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/ads/DefaultLdapAttributeDetectionService;") >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : $r9 = virtualinvoke r0.<org.apache.ambari.server.ldap.LdapModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/LdapConnectionConfigService;")
org.apache.ambari.server.ldap.LdapModule.configure : $r9 = virtualinvoke r0.<org.apache.ambari.server.ldap.LdapModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/LdapConnectionConfigService;") >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : interfaceinvoke $r9.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/ads/DefaultLdapConnectionConfigService;")
org.apache.ambari.server.ldap.LdapModule.configure : interfaceinvoke $r9.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/ads/DefaultLdapConnectionConfigService;") >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : $r11 = virtualinvoke r0.<org.apache.ambari.server.ldap.LdapModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/domain/AmbariLdapConfiguration;")
org.apache.ambari.server.ldap.LdapModule.configure : $r11 = virtualinvoke r0.<org.apache.ambari.server.ldap.LdapModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/domain/AmbariLdapConfiguration;") >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : interfaceinvoke $r11.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder toProvider(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/AmbariLdapConfigurationProvider;")
org.apache.ambari.server.ldap.LdapModule.configure : interfaceinvoke $r11.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder toProvider(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/AmbariLdapConfigurationProvider;") >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : virtualinvoke r0.<org.apache.ambari.server.ldap.LdapModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/ads/detectors/AttributeDetectorFactory;")
org.apache.ambari.server.ldap.LdapModule.configure : virtualinvoke r0.<org.apache.ambari.server.ldap.LdapModule: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/ads/detectors/AttributeDetectorFactory;") >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : $r14 = virtualinvoke r0.<org.apache.ambari.server.ldap.LdapModule: com.google.inject.Binder binder()>()
org.apache.ambari.server.ldap.LdapModule.configure : $r14 = virtualinvoke r0.<org.apache.ambari.server.ldap.LdapModule: com.google.inject.Binder binder()>() >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : $r15 = staticinvoke <com.google.inject.name.Names: com.google.inject.name.Named named(java.lang.String)>("UserAttributesDetectors")
org.apache.ambari.server.ldap.LdapModule.configure : $r15 = staticinvoke <com.google.inject.name.Names: com.google.inject.name.Named named(java.lang.String)>("UserAttributesDetectors") >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : r1 = staticinvoke <com.google.inject.multibindings.Multibinder: com.google.inject.multibindings.Multibinder newSetBinder(com.google.inject.Binder,java.lang.Class,java.lang.'annotation'.Annotation)>($r14, class "Lorg/apache/ambari/server/ldap/service/AttributeDetector;", $r15)
org.apache.ambari.server.ldap.LdapModule.configure : r1 = staticinvoke <com.google.inject.multibindings.Multibinder: com.google.inject.multibindings.Multibinder newSetBinder(com.google.inject.Binder,java.lang.Class,java.lang.'annotation'.Annotation)>($r14, class "Lorg/apache/ambari/server/ldap/service/AttributeDetector;", $r15) >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : $r16 = virtualinvoke r1.<com.google.inject.multibindings.Multibinder: com.google.inject.binder.LinkedBindingBuilder addBinding()>()
org.apache.ambari.server.ldap.LdapModule.configure : $r16 = virtualinvoke r1.<com.google.inject.multibindings.Multibinder: com.google.inject.binder.LinkedBindingBuilder addBinding()>() >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : interfaceinvoke $r16.<com.google.inject.binder.LinkedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/ads/detectors/UserObjectClassDetector;")
org.apache.ambari.server.ldap.LdapModule.configure : interfaceinvoke $r16.<com.google.inject.binder.LinkedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/ads/detectors/UserObjectClassDetector;") >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : $r18 = virtualinvoke r1.<com.google.inject.multibindings.Multibinder: com.google.inject.binder.LinkedBindingBuilder addBinding()>()
org.apache.ambari.server.ldap.LdapModule.configure : $r18 = virtualinvoke r1.<com.google.inject.multibindings.Multibinder: com.google.inject.binder.LinkedBindingBuilder addBinding()>() >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : interfaceinvoke $r18.<com.google.inject.binder.LinkedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/ads/detectors/UserNameAttrDetector;")
org.apache.ambari.server.ldap.LdapModule.configure : interfaceinvoke $r18.<com.google.inject.binder.LinkedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/ads/detectors/UserNameAttrDetector;") >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : $r20 = virtualinvoke r1.<com.google.inject.multibindings.Multibinder: com.google.inject.binder.LinkedBindingBuilder addBinding()>()
org.apache.ambari.server.ldap.LdapModule.configure : $r20 = virtualinvoke r1.<com.google.inject.multibindings.Multibinder: com.google.inject.binder.LinkedBindingBuilder addBinding()>() >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : interfaceinvoke $r20.<com.google.inject.binder.LinkedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/ads/detectors/UserGroupMemberAttrDetector;")
org.apache.ambari.server.ldap.LdapModule.configure : interfaceinvoke $r20.<com.google.inject.binder.LinkedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/ads/detectors/UserGroupMemberAttrDetector;") >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : $r22 = virtualinvoke r0.<org.apache.ambari.server.ldap.LdapModule: com.google.inject.Binder binder()>()
org.apache.ambari.server.ldap.LdapModule.configure : $r22 = virtualinvoke r0.<org.apache.ambari.server.ldap.LdapModule: com.google.inject.Binder binder()>() >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : $r23 = staticinvoke <com.google.inject.name.Names: com.google.inject.name.Named named(java.lang.String)>("GroupAttributesDetectors")
org.apache.ambari.server.ldap.LdapModule.configure : $r23 = staticinvoke <com.google.inject.name.Names: com.google.inject.name.Named named(java.lang.String)>("GroupAttributesDetectors") >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : r2 = staticinvoke <com.google.inject.multibindings.Multibinder: com.google.inject.multibindings.Multibinder newSetBinder(com.google.inject.Binder,java.lang.Class,java.lang.'annotation'.Annotation)>($r22, class "Lorg/apache/ambari/server/ldap/service/AttributeDetector;", $r23)
org.apache.ambari.server.ldap.LdapModule.configure : r2 = staticinvoke <com.google.inject.multibindings.Multibinder: com.google.inject.multibindings.Multibinder newSetBinder(com.google.inject.Binder,java.lang.Class,java.lang.'annotation'.Annotation)>($r22, class "Lorg/apache/ambari/server/ldap/service/AttributeDetector;", $r23) >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : $r24 = virtualinvoke r2.<com.google.inject.multibindings.Multibinder: com.google.inject.binder.LinkedBindingBuilder addBinding()>()
org.apache.ambari.server.ldap.LdapModule.configure : $r24 = virtualinvoke r2.<com.google.inject.multibindings.Multibinder: com.google.inject.binder.LinkedBindingBuilder addBinding()>() >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : interfaceinvoke $r24.<com.google.inject.binder.LinkedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/ads/detectors/GroupObjectClassDetector;")
org.apache.ambari.server.ldap.LdapModule.configure : interfaceinvoke $r24.<com.google.inject.binder.LinkedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/ads/detectors/GroupObjectClassDetector;") >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : $r26 = virtualinvoke r2.<com.google.inject.multibindings.Multibinder: com.google.inject.binder.LinkedBindingBuilder addBinding()>()
org.apache.ambari.server.ldap.LdapModule.configure : $r26 = virtualinvoke r2.<com.google.inject.multibindings.Multibinder: com.google.inject.binder.LinkedBindingBuilder addBinding()>() >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : interfaceinvoke $r26.<com.google.inject.binder.LinkedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/ads/detectors/GroupNameAttrDetector;")
org.apache.ambari.server.ldap.LdapModule.configure : interfaceinvoke $r26.<com.google.inject.binder.LinkedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/ads/detectors/GroupNameAttrDetector;") >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : $r28 = virtualinvoke r2.<com.google.inject.multibindings.Multibinder: com.google.inject.binder.LinkedBindingBuilder addBinding()>()
org.apache.ambari.server.ldap.LdapModule.configure : $r28 = virtualinvoke r2.<com.google.inject.multibindings.Multibinder: com.google.inject.binder.LinkedBindingBuilder addBinding()>() >>>>>>>> org.apache.ambari.server.ldap.LdapModule.configure : interfaceinvoke $r28.<com.google.inject.binder.LinkedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/ads/detectors/GroupMemberAttrDetector;")
org.apache.ambari.server.ldap.LdapModule.configure : interfaceinvoke $r28.<com.google.inject.binder.LinkedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder 'to'(java.lang.Class)>(class "Lorg/apache/ambari/server/ldap/service/ads/detectors/GroupMemberAttrDetector;") >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r22 = newarray (com.google.inject.Module)[1]
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r22 = newarray (com.google.inject.Module)[1] >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r23 = new org.apache.ambari.server.orm.InMemoryDefaultTestModule$BeanDefinitionsCachingTestControllerModule
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r23 = new org.apache.ambari.server.orm.InMemoryDefaultTestModule$BeanDefinitionsCachingTestControllerModule >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r24 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties>
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r24 = r0.<org.apache.ambari.server.orm.InMemoryDefaultTestModule: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : specialinvoke $r23.<org.apache.ambari.server.orm.InMemoryDefaultTestModule$BeanDefinitionsCachingTestControllerModule: void <init>(java.util.Properties)>($r24)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : specialinvoke $r23.<org.apache.ambari.server.orm.InMemoryDefaultTestModule$BeanDefinitionsCachingTestControllerModule: void <init>(java.util.Properties)>($r24) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : r7 = null
org.apache.ambari.server.configuration.Configuration.getProperty : r7 = null >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r2 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r2 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object m_defaultValue>
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object m_defaultValue> >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : return $r1
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : return $r1 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : if null == $r2
org.apache.ambari.server.configuration.Configuration.getProperty : if null == $r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r6 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r6 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6)
org.apache.ambari.server.configuration.Configuration.getProperty : r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r3 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Properties properties>
org.apache.ambari.server.configuration.Configuration.getProperty : $r3 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r4 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r4 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r5 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>($r4, r7)
org.apache.ambari.server.configuration.Configuration.getProperty : $r5 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>($r4, r7) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : return $r5
org.apache.ambari.server.configuration.Configuration.getProperty : return $r5 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty API_USE_SSL>
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty API_USE_SSL> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r2)
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r2) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : return $z0
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : return $z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r7 = new org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r7 = new org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : specialinvoke $r7.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void <init>()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : specialinvoke $r7.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void <init>()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r8 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty KERBEROS_AUTH_ENABLED>
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r8 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty KERBEROS_AUTH_ENABLED> >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r9 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r8)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r9 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r8) >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r9)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r9) >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z0 = virtualinvoke $r10.<java.lang.Boolean: boolean booleanValue()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z0 = virtualinvoke $r10.<java.lang.Boolean: boolean booleanValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : virtualinvoke $r7.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void setKerberosAuthenticationEnabled(boolean)>($z0)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : virtualinvoke $r7.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void setKerberosAuthenticationEnabled(boolean)>($z0) >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.setKerberosAuthenticationEnabled : r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> = z0
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.setKerberosAuthenticationEnabled : r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> = z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z1 = virtualinvoke $r7.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean isKerberosAuthenticationEnabled()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z1 = virtualinvoke $r7.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean isKerberosAuthenticationEnabled()>() >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : $z0 = r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled>
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : $z0 = r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : return $z0
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : return $z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : if $z1 != 0
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : if $z1 != 0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : return $r7
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : return $r7 >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r2 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PATH>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r2 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PATH> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r3 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r2)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r3 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r2) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r3 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r3 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r4 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PASSWORD>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r4 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PASSWORD> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r5 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r4)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r5 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r4) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r5 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r5 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r18 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_TYPE>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r18 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_TYPE> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r19 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r18)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r19 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r18) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r19 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r19 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r2 = <org.apache.ambari.server.configuration.Configuration: org.slf4j.Logger LOG>
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r2 = <org.apache.ambari.server.configuration.Configuration: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r1 = new java.lang.StringBuilder
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r1 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hosts Mapping File ")
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hosts Mapping File ") >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r4 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_HOSTS_MAPPING>
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r4 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_HOSTS_MAPPING> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r5 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r4)
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r5 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r4) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String)>($r7)
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : interfaceinvoke $r2.<org.slf4j.Logger: void info(java.lang.String)>($r7) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r8 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_HOSTS_MAPPING>
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r8 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SRVR_HOSTS_MAPPING> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r9 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r8)
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : $r9 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r8) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getHostsMapFile : return $r9
org.apache.ambari.server.configuration.Configuration.getHostsMapFile : return $r9 >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : r34 = null
org.apache.ambari.server.controller.HostsMap.setupMap : r34 = null >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r4 = <org.apache.ambari.server.controller.HostsMap: org.slf4j.Logger LOG>
org.apache.ambari.server.controller.HostsMap.setupMap : $r4 = <org.apache.ambari.server.controller.HostsMap: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r3 = new java.lang.StringBuilder
org.apache.ambari.server.controller.HostsMap.setupMap : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.controller.HostsMap.setupMap : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using hostsmap file ")
org.apache.ambari.server.controller.HostsMap.setupMap : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Using hostsmap file ") >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r6 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile>
org.apache.ambari.server.controller.HostsMap.setupMap : $r6 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile> >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)
org.apache.ambari.server.controller.HostsMap.setupMap : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.controller.HostsMap.setupMap : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>($r8)
org.apache.ambari.server.controller.HostsMap.setupMap : interfaceinvoke $r4.<org.slf4j.Logger: void info(java.lang.String)>($r8) >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : $r9 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile>
org.apache.ambari.server.controller.HostsMap.setupMap : $r9 = r0.<org.apache.ambari.server.controller.HostsMap: java.lang.String hostsMapFile> >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : if $r9 == null
org.apache.ambari.server.controller.HostsMap.setupMap : if $r9 == null >>>>>>>> org.apache.ambari.server.controller.HostsMap.setupMap : if r34 == null
org.apache.ambari.server.controller.HostsMap.setupMap : if r34 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR>
org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SHARED_RESOURCES_DIR> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : return $r2
org.apache.ambari.server.configuration.Configuration.getSharedResourcesDirPath : return $r2 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : r23 = null
org.apache.ambari.server.state.stack.OsFamily.init : r23 = null >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r5 = new java.io.File
org.apache.ambari.server.state.stack.OsFamily.init : $r5 = new java.io.File >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r5.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r1, "os_family.json")
org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r5.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r1, "os_family.json") >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $z0 = virtualinvoke $r5.<java.io.File: boolean exists()>()
org.apache.ambari.server.state.stack.OsFamily.init : $z0 = virtualinvoke $r5.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : if $z0 != 0
org.apache.ambari.server.state.stack.OsFamily.init : if $z0 != 0 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r14 = new java.lang.Exception
org.apache.ambari.server.state.stack.OsFamily.init : $r14 = new java.lang.Exception >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r14.<java.lang.Exception: void <init>()>()
org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r14.<java.lang.Exception: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : throw $r14
org.apache.ambari.server.state.stack.OsFamily.init : throw $r14 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r19 = <org.apache.ambari.server.state.stack.OsFamily: org.slf4j.Logger LOG>
org.apache.ambari.server.state.stack.OsFamily.init : $r19 = <org.apache.ambari.server.state.stack.OsFamily: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r17 = newarray (java.lang.Object)[1]
org.apache.ambari.server.state.stack.OsFamily.init : $r17 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r18 = new java.io.File
org.apache.ambari.server.state.stack.OsFamily.init : $r18 = new java.io.File >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r18.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r1, "os_family.json")
org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r18.<java.io.File: void <init>(java.lang.String,java.lang.String)>(r1, "os_family.json") >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r20 = virtualinvoke $r18.<java.io.File: java.lang.String toString()>()
org.apache.ambari.server.state.stack.OsFamily.init : $r20 = virtualinvoke $r18.<java.io.File: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r17[0] = $r20
org.apache.ambari.server.state.stack.OsFamily.init : $r17[0] = $r20 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not load OS family definition from %s file", $r17)
org.apache.ambari.server.state.stack.OsFamily.init : $r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Could not load OS family definition from %s file", $r17) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : interfaceinvoke $r19.<org.slf4j.Logger: void error(java.lang.String)>($r21)
org.apache.ambari.server.state.stack.OsFamily.init : interfaceinvoke $r19.<org.slf4j.Logger: void error(java.lang.String)>($r21) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : $r22 = new java.lang.RuntimeException
org.apache.ambari.server.state.stack.OsFamily.init : $r22 = new java.lang.RuntimeException >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r22.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r16)
org.apache.ambari.server.state.stack.OsFamily.init : specialinvoke $r22.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r16) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : throw $r22
org.apache.ambari.server.state.stack.OsFamily.init : throw $r22 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r23)
org.apache.ambari.server.state.stack.OsFamily.init : staticinvoke <org.apache.commons.io.IOUtils: void closeQuietly(java.io.InputStream)>(r23) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.init : throw $r15
org.apache.ambari.server.state.stack.OsFamily.init : throw $r15 >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r71 = new java.lang.RuntimeException
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : $r71 = new java.lang.RuntimeException >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : specialinvoke $r71.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r70)
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : specialinvoke $r71.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r70) >>>>>>>> org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : throw $r71
org.apache.ambari.server.orm.InMemoryDefaultTestModule.configure : throw $r71 >>>>>>>> org.apache.ambari.server.RandomPortJerseyTest.getPort : r9 = null
org.apache.ambari.server.RandomPortJerseyTest.getPort : r9 = null >>>>>>>> org.apache.ambari.server.RandomPortJerseyTest.getPort : i2 = -1
org.apache.ambari.server.RandomPortJerseyTest.getPort : i2 = -1 >>>>>>>> org.apache.ambari.server.RandomPortJerseyTest.getPort : $r3 = new java.net.ServerSocket
org.apache.ambari.server.RandomPortJerseyTest.getPort : $r3 = new java.net.ServerSocket >>>>>>>> org.apache.ambari.server.RandomPortJerseyTest.getPort : specialinvoke $r3.<java.net.ServerSocket: void <init>(int)>(i0)
org.apache.ambari.server.RandomPortJerseyTest.getPort : specialinvoke $r3.<java.net.ServerSocket: void <init>(int)>(i0) >>>>>>>> org.apache.ambari.server.RandomPortJerseyTest.getPort : r9 = $r3
org.apache.ambari.server.RandomPortJerseyTest.getPort : r9 = $r3 >>>>>>>> org.apache.ambari.server.RandomPortJerseyTest.getPort : i2 = virtualinvoke $r3.<java.net.ServerSocket: int getLocalPort()>()
org.apache.ambari.server.RandomPortJerseyTest.getPort : i2 = virtualinvoke $r3.<java.net.ServerSocket: int getLocalPort()>() >>>>>>>> org.apache.ambari.server.RandomPortJerseyTest.getPort : if $r3 == null
org.apache.ambari.server.RandomPortJerseyTest.getPort : if $r3 == null >>>>>>>> org.apache.ambari.server.RandomPortJerseyTest.getPort : virtualinvoke $r3.<java.net.ServerSocket: void close()>()
org.apache.ambari.server.RandomPortJerseyTest.getPort : virtualinvoke $r3.<java.net.ServerSocket: void close()>() >>>>>>>> org.apache.ambari.server.RandomPortJerseyTest.getPort : goto [?= (branch)]
org.apache.ambari.server.RandomPortJerseyTest.getPort : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.RandomPortJerseyTest.getPort : if i2 != -1
org.apache.ambari.server.RandomPortJerseyTest.getPort : if i2 != -1 >>>>>>>> org.apache.ambari.server.RandomPortJerseyTest.getPort : <org.apache.ambari.server.RandomPortJerseyTest: int testPort> = i2
org.apache.ambari.server.RandomPortJerseyTest.getPort : <org.apache.ambari.server.RandomPortJerseyTest: int testPort> = i2 >>>>>>>> org.apache.ambari.server.RandomPortJerseyTest.getPort : return i2
org.apache.ambari.server.RandomPortJerseyTest.getPort : return i2 >>>>>>>> org.apache.ambari.server.agent.AgentResourceTest.setUp : specialinvoke r0.<org.apache.ambari.server.RandomPortJerseyTest: void setUp()>()
org.apache.ambari.server.agent.AgentResourceTest.setUp : specialinvoke r0.<org.apache.ambari.server.RandomPortJerseyTest: void setUp()>() >>>>>>>> org.apache.ambari.server.agent.AgentResourceTest.setUp : $r1 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/ambari/server/agent/HeartBeatHandler;")
org.apache.ambari.server.agent.AgentResourceTest.setUp : $r1 = staticinvoke <org.mockito.Mockito: java.lang.Object mock(java.lang.Class)>(class "Lorg/apache/ambari/server/agent/HeartBeatHandler;") >>>>>>>> org.apache.ambari.server.agent.AgentResourceTest.setUp : $r2 = (org.apache.ambari.server.agent.HeartBeatHandler) $r1
org.apache.ambari.server.agent.AgentResourceTest.setUp : $r2 = (org.apache.ambari.server.agent.HeartBeatHandler) $r1 >>>>>>>> org.apache.ambari.server.agent.AgentResourceTest.setUp : r0.<org.apache.ambari.server.agent.AgentResourceTest: org.apache.ambari.server.agent.HeartBeatHandler handler> = $r2
org.apache.ambari.server.agent.AgentResourceTest.setUp : r0.<org.apache.ambari.server.agent.AgentResourceTest: org.apache.ambari.server.agent.HeartBeatHandler handler> = $r2 >>>>>>>> org.apache.ambari.server.agent.AgentResourceTest.setUp : $r3 = newarray (com.google.inject.Module)[1]
org.apache.ambari.server.agent.AgentResourceTest.setUp : $r3 = newarray (com.google.inject.Module)[1] >>>>>>>> org.apache.ambari.server.agent.AgentResourceTest.setUp : $r4 = new org.apache.ambari.server.agent.AgentResourceTest$MockModule
org.apache.ambari.server.agent.AgentResourceTest.setUp : $r4 = new org.apache.ambari.server.agent.AgentResourceTest$MockModule >>>>>>>> org.apache.ambari.server.agent.AgentResourceTest.setUp : specialinvoke $r4.<org.apache.ambari.server.agent.AgentResourceTest$MockModule: void <init>(org.apache.ambari.server.agent.AgentResourceTest)>(r0)
org.apache.ambari.server.agent.AgentResourceTest.setUp : specialinvoke $r4.<org.apache.ambari.server.agent.AgentResourceTest$MockModule: void <init>(org.apache.ambari.server.agent.AgentResourceTest)>(r0) >>>>>>>> org.apache.ambari.server.agent.AgentResourceTest.setUp : $r3[0] = $r4
org.apache.ambari.server.agent.AgentResourceTest.setUp : $r3[0] = $r4 >>>>>>>> org.apache.ambari.server.agent.AgentResourceTest.setUp : $r5 = staticinvoke <com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Module[])>($r3)
org.apache.ambari.server.agent.AgentResourceTest.setUp : $r5 = staticinvoke <com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Module[])>($r3) >>>>>>>> org.apache.ambari.server.agent.AgentResourceTest$MockModule.configure : specialinvoke r0.<org.apache.ambari.server.agent.AgentResourceTest$MockModule: void installDependencies()>()
org.apache.ambari.server.agent.AgentResourceTest$MockModule.configure : specialinvoke r0.<org.apache.ambari.server.agent.AgentResourceTest$MockModule: void installDependencies()>() >>>>>>>> org.apache.ambari.server.agent.AgentResourceTest$MockModule.installDependencies : $r1 = new com.google.inject.assistedinject.FactoryModuleBuilder
org.apache.ambari.server.agent.AgentResourceTest$MockModule.installDependencies : $r1 = new com.google.inject.assistedinject.FactoryModuleBuilder >>>>>>>> org.apache.ambari.server.agent.AgentResourceTest$MockModule.installDependencies : specialinvoke $r1.<com.google.inject.assistedinject.FactoryModuleBuilder: void <init>()>()
org.apache.ambari.server.agent.AgentResourceTest$MockModule.installDependencies : specialinvoke $r1.<com.google.inject.assistedinject.FactoryModuleBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.agent.AgentResourceTest$MockModule.installDependencies : $r2 = virtualinvoke $r1.<com.google.inject.assistedinject.FactoryModuleBuilder: com.google.inject.Module build(java.lang.Class)>(class "Lorg/apache/ambari/server/state/UpgradeContextFactory;")
org.apache.ambari.server.agent.AgentResourceTest$MockModule.installDependencies : $r2 = virtualinvoke $r1.<com.google.inject.assistedinject.FactoryModuleBuilder: com.google.inject.Module build(java.lang.Class)>(class "Lorg/apache/ambari/server/state/UpgradeContextFactory;") >>>>>>>> org.apache.ambari.server.agent.AgentResourceTest$MockModule.installDependencies : virtualinvoke r0.<org.apache.ambari.server.agent.AgentResourceTest$MockModule: void install(com.google.inject.Module)>($r2)
org.apache.ambari.server.agent.AgentResourceTest$MockModule.installDependencies : virtualinvoke r0.<org.apache.ambari.server.agent.AgentResourceTest$MockModule: void install(com.google.inject.Module)>($r2) >>>>>>>> org.apache.ambari.server.agent.AgentResourceTest$MockModule.installDependencies : $r3 = new com.google.inject.assistedinject.FactoryModuleBuilder
org.apache.ambari.server.agent.AgentResourceTest$MockModule.installDependencies : $r3 = new com.google.inject.assistedinject.FactoryModuleBuilder >>>>>>>> org.apache.ambari.server.agent.AgentResourceTest$MockModule.installDependencies : specialinvoke $r3.<com.google.inject.assistedinject.FactoryModuleBuilder: void <init>()>()
org.apache.ambari.server.agent.AgentResourceTest$MockModule.installDependencies : specialinvoke $r3.<com.google.inject.assistedinject.FactoryModuleBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.agent.AgentResourceTest$MockModule.installDependencies : $r4 = virtualinvoke $r3.<com.google.inject.assistedinject.FactoryModuleBuilder: com.google.inject.Module build(java.lang.Class)>(class "Lorg/apache/ambari/server/stageplanner/RoleGraphFactory;")
org.apache.ambari.server.agent.AgentResourceTest$MockModule.installDependencies : $r4 = virtualinvoke $r3.<com.google.inject.assistedinject.FactoryModuleBuilder: com.google.inject.Module build(java.lang.Class)>(class "Lorg/apache/ambari/server/stageplanner/RoleGraphFactory;") >>>>>>>> org.apache.ambari.server.agent.AgentResourceTest$MockModule.installDependencies : virtualinvoke r0.<org.apache.ambari.server.agent.AgentResourceTest$MockModule: void install(com.google.inject.Module)>($r4)
org.apache.ambari.server.agent.AgentResourceTest$MockModule.installDependencies : virtualinvoke r0.<org.apache.ambari.server.agent.AgentResourceTest$MockModule: void install(com.google.inject.Module)>($r4) >>>>>>>> org.apache.ambari.server.agent.AgentResourceTest$MockModule.installDependencies : $r5 = new com.google.inject.assistedinject.FactoryModuleBuilder
org.apache.ambari.server.agent.AgentResourceTest$MockModule.installDependencies : $r5 = new com.google.inject.assistedinject.FactoryModuleBuilder >>>>>>>> org.apache.ambari.server.agent.AgentResourceTest$MockModule.installDependencies : specialinvoke $r5.<com.google.inject.assistedinject.FactoryModuleBuilder: void <init>()>()
org.apache.ambari.server.agent.AgentResourceTest$MockModule.installDependencies : specialinvoke $r5.<com.google.inject.assistedinject.FactoryModuleBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.agent.AgentResourceTest$MockModule.installDependencies : $r6 = virtualinvoke $r5.<com.google.inject.assistedinject.FactoryModuleBuilder: com.google.inject.assistedinject.FactoryModuleBuilder implement(java.lang.Class,java.lang.Class)>(class "Lorg/apache/ambari/server/state/Cluster;", class "Lorg/apache/ambari/server/state/cluster/ClusterImpl;")
org.apache.ambari.server.agent.AgentResourceTest$MockModule.installDependencies : $r6 = virtualinvoke $r5.<com.google.inject.assistedinject.FactoryModuleBuilder: com.google.inject.assistedinject.FactoryModuleBuilder implement(java.lang.Class,java.lang.Class)>(class "Lorg/apache/ambari/server/state/Cluster;", class "Lorg/apache/ambari/server/state/cluster/ClusterImpl;") >>>>>>>> org.apache.ambari.server.agent.AgentResourceTest$MockModule.installDependencies : $r7 = virtualinvoke $r6.<com.google.inject.assistedinject.FactoryModuleBuilder: com.google.inject.Module build(java.lang.Class)>(class "Lorg/apache/ambari/server/state/cluster/ClusterFactory;")
org.apache.ambari.server.agent.AgentResourceTest$MockModule.installDependencies : $r7 = virtualinvoke $r6.<com.google.inject.assistedinject.FactoryModuleBuilder: com.google.inject.Module build(java.lang.Class)>(class "Lorg/apache/ambari/server/state/cluster/ClusterFactory;") >>>>>>>> org.apache.ambari.server.agent.AgentResourceTest$MockModule.installDependencies : virtualinvoke r0.<org.apache.ambari.server.agent.AgentResourceTest$MockModule: void install(com.google.inject.Module)>($r7)
org.apache.ambari.server.agent.AgentResourceTest$MockModule.installDependencies : virtualinvoke r0.<org.apache.ambari.server.agent.AgentResourceTest$MockModule: void install(com.google.inject.Module)>($r7) >>>>>>>> org.apache.ambari.server.H2DatabaseCleaner.clearDatabaseAndStopPersistenceService : $r1 = interfaceinvoke r0.<com.google.inject.Injector: com.google.inject.Provider getProvider(java.lang.Class)>(class "Ljavax/persistence/EntityManager;")
org.apache.ambari.server.H2DatabaseCleaner.clearDatabaseAndStopPersistenceService : $r1 = interfaceinvoke r0.<com.google.inject.Injector: com.google.inject.Provider getProvider(java.lang.Class)>(class "Ljavax/persistence/EntityManager;") >>>>>>>> org.apache.ambari.server.agent.HostInfo.setArchitecture : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String architecture> = r1
org.apache.ambari.server.agent.HostInfo.setArchitecture : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String architecture> = r1 >>>>>>>> org.apache.ambari.server.agent.HostInfo.setDomain : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String domain> = r1
org.apache.ambari.server.agent.HostInfo.setDomain : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String domain> = r1 >>>>>>>> org.apache.ambari.server.agent.HostInfo.setFQDN : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String fqdn> = r1
org.apache.ambari.server.agent.HostInfo.setFQDN : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String fqdn> = r1 >>>>>>>> org.apache.ambari.server.agent.HostInfo.setHardwareIsa : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String hardwareisa> = r1
org.apache.ambari.server.agent.HostInfo.setHardwareIsa : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String hardwareisa> = r1 >>>>>>>> org.apache.ambari.server.agent.HostInfo.setHardwareModel : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String hardwaremodel> = r1
org.apache.ambari.server.agent.HostInfo.setHardwareModel : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String hardwaremodel> = r1 >>>>>>>> org.apache.ambari.server.agent.HostInfo.setHostName : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String hostname> = r1
org.apache.ambari.server.agent.HostInfo.setHostName : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String hostname> = r1 >>>>>>>> org.apache.ambari.server.agent.HostInfo.setAgentUserId : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String id> = r1
org.apache.ambari.server.agent.HostInfo.setAgentUserId : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String id> = r1 >>>>>>>> org.apache.ambari.server.agent.HostInfo.setInterfaces : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String interfaces> = r1
org.apache.ambari.server.agent.HostInfo.setInterfaces : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String interfaces> = r1 >>>>>>>> org.apache.ambari.server.agent.HostInfo.setIPAddress : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String ipaddress> = r1
org.apache.ambari.server.agent.HostInfo.setIPAddress : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String ipaddress> = r1 >>>>>>>> org.apache.ambari.server.agent.HostInfo.setKernel : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String kernel> = r1
org.apache.ambari.server.agent.HostInfo.setKernel : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String kernel> = r1 >>>>>>>> org.apache.ambari.server.agent.HostInfo.setKernelMajVersion : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String kernelmajversion> = r1
org.apache.ambari.server.agent.HostInfo.setKernelMajVersion : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String kernelmajversion> = r1 >>>>>>>> org.apache.ambari.server.agent.HostInfo.setKernelRelease : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String kernelrelease> = r1
org.apache.ambari.server.agent.HostInfo.setKernelRelease : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String kernelrelease> = r1 >>>>>>>> org.apache.ambari.server.agent.HostInfo.setKernelVersion : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String kernelversion> = r1
org.apache.ambari.server.agent.HostInfo.setKernelVersion : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String kernelversion> = r1 >>>>>>>> org.apache.ambari.server.agent.HostInfo.setMacAddress : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String macaddress> = r1
org.apache.ambari.server.agent.HostInfo.setMacAddress : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String macaddress> = r1 >>>>>>>> org.apache.ambari.server.agent.HostInfo.setFreeMemory : r0.<org.apache.ambari.server.agent.HostInfo: long memoryfree> = l0
org.apache.ambari.server.agent.HostInfo.setFreeMemory : r0.<org.apache.ambari.server.agent.HostInfo: long memoryfree> = l0 >>>>>>>> org.apache.ambari.server.agent.HostInfo.setMemorySize : r0.<org.apache.ambari.server.agent.HostInfo: long memorysize> = l0
org.apache.ambari.server.agent.HostInfo.setMemorySize : r0.<org.apache.ambari.server.agent.HostInfo: long memorysize> = l0 >>>>>>>> org.apache.ambari.server.agent.HostInfo.setMemoryTotal : r0.<org.apache.ambari.server.agent.HostInfo: long memorytotal> = l0
org.apache.ambari.server.agent.HostInfo.setMemoryTotal : r0.<org.apache.ambari.server.agent.HostInfo: long memorytotal> = l0 >>>>>>>> org.apache.ambari.server.agent.HostInfo.setNetMask : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String netmask> = r1
org.apache.ambari.server.agent.HostInfo.setNetMask : r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String netmask> = r1 >>>>>>>> org.apache.ambari.server.agent.HostInfo.getMemoryTotal : $l0 = r0.<org.apache.ambari.server.agent.HostInfo: long memorytotal>
org.apache.ambari.server.agent.HostInfo.getMemoryTotal : $l0 = r0.<org.apache.ambari.server.agent.HostInfo: long memorytotal> >>>>>>>> org.apache.ambari.server.agent.HostInfo.getMemoryTotal : return $l0
org.apache.ambari.server.agent.HostInfo.getMemoryTotal : return $l0 >>>>>>>> org.apache.ambari.server.agent.HostInfo.getKernel : $r1 = r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String kernel>
org.apache.ambari.server.agent.HostInfo.getKernel : $r1 = r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String kernel> >>>>>>>> org.apache.ambari.server.agent.HostInfo.getKernel : return $r1
org.apache.ambari.server.agent.HostInfo.getKernel : return $r1 >>>>>>>> org.apache.ambari.server.agent.HostInfo.getFQDN : $r1 = r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String fqdn>
org.apache.ambari.server.agent.HostInfo.getFQDN : $r1 = r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String fqdn> >>>>>>>> org.apache.ambari.server.agent.HostInfo.getFQDN : return $r1
org.apache.ambari.server.agent.HostInfo.getFQDN : return $r1 >>>>>>>> org.apache.ambari.server.agent.HostInfo.getAgentUserId : $r1 = r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String id>
org.apache.ambari.server.agent.HostInfo.getAgentUserId : $r1 = r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String id> >>>>>>>> org.apache.ambari.server.agent.HostInfo.getAgentUserId : return $r1
org.apache.ambari.server.agent.HostInfo.getAgentUserId : return $r1 >>>>>>>> org.apache.ambari.server.agent.HostInfo.getMemorySize : $l0 = r0.<org.apache.ambari.server.agent.HostInfo: long memorysize>
org.apache.ambari.server.agent.HostInfo.getMemorySize : $l0 = r0.<org.apache.ambari.server.agent.HostInfo: long memorysize> >>>>>>>> org.apache.ambari.server.agent.HostInfo.getMemorySize : return $l0
org.apache.ambari.server.agent.HostInfo.getMemorySize : return $l0 >>>>>>>> org.apache.ambari.server.agent.HostInfo.getArchitecture : $r1 = r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String architecture>
org.apache.ambari.server.agent.HostInfo.getArchitecture : $r1 = r0.<org.apache.ambari.server.agent.HostInfo: java.lang.String architecture> >>>>>>>> org.apache.ambari.server.agent.HostInfo.getArchitecture : return $r1
