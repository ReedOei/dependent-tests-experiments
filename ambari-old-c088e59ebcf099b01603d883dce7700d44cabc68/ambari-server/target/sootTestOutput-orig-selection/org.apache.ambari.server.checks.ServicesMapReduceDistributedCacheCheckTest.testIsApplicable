org.apache.ambari.server.controller.PrereqCheckRequest.setTargetRepositoryVersion : r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity m_targetRepositoryVersion> = r1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r5 = newarray (org.apache.ambari.server.checks.AbstractCheckDescriptor$CheckQualification)[2]
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r5 = newarray (org.apache.ambari.server.checks.AbstractCheckDescriptor$CheckQualification)[2] >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r6 = new org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r6 = new org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : specialinvoke $r6.<org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification: void <init>(org.apache.ambari.server.checks.AbstractCheckDescriptor)>(r0)
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : specialinvoke $r6.<org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification: void <init>(org.apache.ambari.server.checks.AbstractCheckDescriptor)>(r0) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r5[0] = $r6
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r5[0] = $r6 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r7 = new org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r7 = new org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : specialinvoke $r7.<org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification: void <init>(org.apache.ambari.server.checks.AbstractCheckDescriptor,java.lang.Class)>(r0, $r8)
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : specialinvoke $r7.<org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification: void <init>(org.apache.ambari.server.checks.AbstractCheckDescriptor,java.lang.Class)>(r0, $r8) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r5[1] = $r7
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r5[1] = $r7 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>($r5)
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>($r5) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r9 = virtualinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.util.List getQualifications()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r9 = virtualinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.util.List getQualifications()>() >>>>>>>> org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheck.getQualifications : $r1 = newarray (org.apache.ambari.server.checks.AbstractCheckDescriptor$CheckQualification)[1]
org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheck.getQualifications : $r1 = newarray (org.apache.ambari.server.checks.AbstractCheckDescriptor$CheckQualification)[1] >>>>>>>> org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheck.getQualifications : $r2 = new org.apache.ambari.server.checks.AbstractCheckDescriptor$PriorCheckQualification
org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheck.getQualifications : $r2 = new org.apache.ambari.server.checks.AbstractCheckDescriptor$PriorCheckQualification >>>>>>>> org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheck.getQualifications : $r3 = <org.apache.ambari.server.checks.CheckDescription: org.apache.ambari.server.checks.CheckDescription SERVICES_NAMENODE_HA>
org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheck.getQualifications : $r3 = <org.apache.ambari.server.checks.CheckDescription: org.apache.ambari.server.checks.CheckDescription SERVICES_NAMENODE_HA> >>>>>>>> org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheck.getQualifications : specialinvoke $r2.<org.apache.ambari.server.checks.AbstractCheckDescriptor$PriorCheckQualification: void <init>(org.apache.ambari.server.checks.AbstractCheckDescriptor,org.apache.ambari.server.checks.CheckDescription)>(r0, $r3)
org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheck.getQualifications : specialinvoke $r2.<org.apache.ambari.server.checks.AbstractCheckDescriptor$PriorCheckQualification: void <init>(org.apache.ambari.server.checks.AbstractCheckDescriptor,org.apache.ambari.server.checks.CheckDescription)>(r0, $r3) >>>>>>>> org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheck.getQualifications : $r1[0] = $r2
org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheck.getQualifications : $r1[0] = $r2 >>>>>>>> org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheck.getQualifications : $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1)
org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheck.getQualifications : $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r1) >>>>>>>> org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheck.getQualifications : return $r4
org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheck.getQualifications : return $r4 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>($r9)
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>($r9) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z1 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z1 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r4 = (org.apache.ambari.server.checks.AbstractCheckDescriptor$CheckQualification) $r10
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r4 = (org.apache.ambari.server.checks.AbstractCheckDescriptor$CheckQualification) $r10 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z2 = interfaceinvoke r4.<org.apache.ambari.server.checks.AbstractCheckDescriptor$CheckQualification: boolean isApplicable(org.apache.ambari.server.controller.PrereqCheckRequest)>(r1)
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z2 = interfaceinvoke r4.<org.apache.ambari.server.checks.AbstractCheckDescriptor$CheckQualification: boolean isApplicable(org.apache.ambari.server.controller.PrereqCheckRequest)>(r1) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : $r6 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification: org.apache.ambari.server.checks.AbstractCheckDescriptor this$0>
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : $r6 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification: org.apache.ambari.server.checks.AbstractCheckDescriptor this$0> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : r2 = virtualinvoke $r6.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.util.Set getApplicableServices()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : r2 = virtualinvoke $r6.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.util.Set getApplicableServices()>() >>>>>>>> org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheck.getApplicableServices : $r1 = newarray (java.lang.String)[1]
org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheck.getApplicableServices : $r1 = newarray (java.lang.String)[1] >>>>>>>> org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheck.getApplicableServices : $r1[0] = "YARN"
org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheck.getApplicableServices : $r1[0] = "YARN" >>>>>>>> org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheck.getApplicableServices : $r2 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Object[])>($r1)
org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheck.getApplicableServices : $r2 = staticinvoke <com.google.common.collect.Sets: java.util.HashSet newHashSet(java.lang.Object[])>($r1) >>>>>>>> org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheck.getApplicableServices : return $r2
org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheck.getApplicableServices : return $r2 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : $z0 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : $z0 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : if $z0 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : $r7 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification: org.apache.ambari.server.checks.AbstractCheckDescriptor this$0>
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : $r7 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification: org.apache.ambari.server.checks.AbstractCheckDescriptor this$0> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : r3 = virtualinvoke $r7.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.util.Set getServicesInUpgrade(org.apache.ambari.server.controller.PrereqCheckRequest)>(r1)
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : r3 = virtualinvoke $r7.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.util.Set getServicesInUpgrade(org.apache.ambari.server.controller.PrereqCheckRequest)>(r1) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r4 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r4 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: com.google.inject.Provider clustersProvider> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r5 = interfaceinvoke $r4.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r5 = interfaceinvoke $r4.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheckTest$1: org.apache.ambari.server.state.Clusters get()>()
org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheckTest$1: org.apache.ambari.server.state.Clusters get()>() >>>>>>>> org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheckTest$1: org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheckTest this$0>
org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheckTest$1: org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheckTest this$0> >>>>>>>> org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheckTest$1.get : $r2 = staticinvoke <org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheckTest: org.apache.ambari.server.state.Clusters access$000(org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheckTest)>($r1)
org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheckTest$1.get : $r2 = staticinvoke <org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheckTest: org.apache.ambari.server.state.Clusters access$000(org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheckTest)>($r1) >>>>>>>> org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheckTest: org.apache.ambari.server.state.Clusters clusters>
org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheckTest: org.apache.ambari.server.state.Clusters clusters> >>>>>>>> org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheckTest.access$000 : return $r1
org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheckTest.access$000 : return $r1 >>>>>>>> org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheckTest$1.get : return $r2
org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheckTest$1.get : return $r2 >>>>>>>> org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheckTest$1.get : return $r1
org.apache.ambari.server.checks.ServicesMapReduceDistributedCacheCheckTest$1.get : return $r1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r6 = (org.apache.ambari.server.state.Clusters) $r5
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r6 = (org.apache.ambari.server.state.Clusters) $r5 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r7 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r7 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName>
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : r2 = interfaceinvoke $r6.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>($r7)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : r2 = interfaceinvoke $r6.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>($r7) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : r11 = virtualinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.state.repository.VersionDefinitionXml getVersionDefinitionXml(org.apache.ambari.server.controller.PrereqCheckRequest)>(r1)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : r11 = virtualinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.state.repository.VersionDefinitionXml getVersionDefinitionXml(org.apache.ambari.server.controller.PrereqCheckRequest)>(r1) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : r2 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : r2 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity m_targetRepositoryVersion>
org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity m_targetRepositoryVersion> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : return $r1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : r5 = virtualinvoke r2.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.state.repository.VersionDefinitionXml getRepositoryXml()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : r5 = virtualinvoke r2.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.state.repository.VersionDefinitionXml getRepositoryXml()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : return r5
org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : return r5 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : r3 = virtualinvoke r11.<org.apache.ambari.server.state.repository.VersionDefinitionXml: org.apache.ambari.server.state.repository.ClusterVersionSummary getClusterSummary(org.apache.ambari.server.state.Cluster)>(r2)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : r3 = virtualinvoke r11.<org.apache.ambari.server.state.repository.VersionDefinitionXml: org.apache.ambari.server.state.repository.ClusterVersionSummary getClusterSummary(org.apache.ambari.server.state.Cluster)>(r2) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r8 = virtualinvoke r3.<org.apache.ambari.server.state.repository.ClusterVersionSummary: java.util.Set getAvailableServiceNames()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r8 = virtualinvoke r3.<org.apache.ambari.server.state.repository.ClusterVersionSummary: java.util.Set getAvailableServiceNames()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : return $r8
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : return $r8 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : r4 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : r4 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : if $z1 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : if $z1 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : r5 = (java.lang.String) $r8
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : r5 = (java.lang.String) $r8 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : $z2 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>(r5)
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : $z2 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>(r5) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : if $z2 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : if $z2 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : return 1
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : return 1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z2 != 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z2 != 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : r2 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : r2 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : r3 = virtualinvoke r2.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.state.RepositoryType getType()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : r3 = virtualinvoke r2.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.state.RepositoryType getType()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : $r6 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification: java.lang.Class m_checkClass>
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : $r6 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification: java.lang.Class m_checkClass> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/ambari/server/checks/UpgradeCheck;")
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/ambari/server/checks/UpgradeCheck;") >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : r4 = (org.apache.ambari.server.checks.UpgradeCheck) $r7
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : r4 = (org.apache.ambari.server.checks.UpgradeCheck) $r7 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : if null != r4
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : if null != r4 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : r5 = interfaceinvoke r4.<org.apache.ambari.server.checks.UpgradeCheck: org.apache.ambari.server.state.RepositoryType[] orchestration()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : r5 = interfaceinvoke r4.<org.apache.ambari.server.checks.UpgradeCheck: org.apache.ambari.server.state.RepositoryType[] orchestration()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : $z0 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r5)
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : $z0 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r5) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : if $z0 != 0
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : if $z0 != 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : $z1 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(r5, r3)
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : $z1 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(r5, r3) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : if $z1 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : if $z1 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : return 1
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : return 1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$PriorCheckQualification.isApplicable : $r3 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor$PriorCheckQualification: org.apache.ambari.server.checks.CheckDescription m_checkDescription>
org.apache.ambari.server.checks.AbstractCheckDescriptor$PriorCheckQualification.isApplicable : $r3 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor$PriorCheckQualification: org.apache.ambari.server.checks.CheckDescription m_checkDescription> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$PriorCheckQualification.isApplicable : r2 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.stack.PrereqCheckStatus getResult(org.apache.ambari.server.checks.CheckDescription)>($r3)
org.apache.ambari.server.checks.AbstractCheckDescriptor$PriorCheckQualification.isApplicable : r2 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.stack.PrereqCheckStatus getResult(org.apache.ambari.server.checks.CheckDescription)>($r3) >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getResult : $r2 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.util.Map m_results>
org.apache.ambari.server.controller.PrereqCheckRequest.getResult : $r2 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.util.Map m_results> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getResult : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.ambari.server.controller.PrereqCheckRequest.getResult : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getResult : $r4 = (org.apache.ambari.server.state.stack.PrereqCheckStatus) $r3
org.apache.ambari.server.controller.PrereqCheckRequest.getResult : $r4 = (org.apache.ambari.server.state.stack.PrereqCheckStatus) $r3 >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getResult : return $r4
org.apache.ambari.server.controller.PrereqCheckRequest.getResult : return $r4 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$PriorCheckQualification.isApplicable : if null == r2
org.apache.ambari.server.checks.AbstractCheckDescriptor$PriorCheckQualification.isApplicable : if null == r2 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$PriorCheckQualification.isApplicable : return 1
org.apache.ambari.server.checks.AbstractCheckDescriptor$PriorCheckQualification.isApplicable : return 1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : return 1
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : return 1 >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.addResult : $r3 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.util.Map m_results>
org.apache.ambari.server.controller.PrereqCheckRequest.addResult : $r3 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.util.Map m_results> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.addResult : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
org.apache.ambari.server.controller.PrereqCheckRequest.addResult : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$PriorCheckQualification.isApplicable : $r4 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus FAIL>
org.apache.ambari.server.checks.AbstractCheckDescriptor$PriorCheckQualification.isApplicable : $r4 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus FAIL> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$PriorCheckQualification.isApplicable : if r2 != $r4
org.apache.ambari.server.checks.AbstractCheckDescriptor$PriorCheckQualification.isApplicable : if r2 != $r4 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$PriorCheckQualification.isApplicable : return 0
org.apache.ambari.server.checks.AbstractCheckDescriptor$PriorCheckQualification.isApplicable : return 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : return 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : return 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : return 0
