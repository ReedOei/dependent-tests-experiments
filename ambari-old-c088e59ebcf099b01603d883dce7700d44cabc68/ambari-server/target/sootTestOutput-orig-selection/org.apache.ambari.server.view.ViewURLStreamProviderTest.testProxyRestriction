org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String m_key> >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : return $r1
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : return $r1 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : r7 = null
org.apache.ambari.server.configuration.Configuration.getProperty : r7 = null >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r2 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r2 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object m_defaultValue>
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object m_defaultValue> >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : return $r1
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : return $r1 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : if null == $r2
org.apache.ambari.server.configuration.Configuration.getProperty : if null == $r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r6 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r6 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6)
org.apache.ambari.server.configuration.Configuration.getProperty : r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r3 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Properties properties>
org.apache.ambari.server.configuration.Configuration.getProperty : $r3 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r4 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r4 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r5 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>($r4, r7)
org.apache.ambari.server.configuration.Configuration.getProperty : $r5 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>($r4, r7) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : return $r5
org.apache.ambari.server.configuration.Configuration.getProperty : return $r5 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty API_USE_SSL>
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty API_USE_SSL> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r2)
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r2) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : return $z0
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : return $z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r7 = new org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r7 = new org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : specialinvoke $r7.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void <init>()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : specialinvoke $r7.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void <init>()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r8 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty KERBEROS_AUTH_ENABLED>
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r8 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty KERBEROS_AUTH_ENABLED> >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r9 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r8)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r9 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r8) >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r9)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r9) >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z0 = virtualinvoke $r10.<java.lang.Boolean: boolean booleanValue()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z0 = virtualinvoke $r10.<java.lang.Boolean: boolean booleanValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : virtualinvoke $r7.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void setKerberosAuthenticationEnabled(boolean)>($z0)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : virtualinvoke $r7.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void setKerberosAuthenticationEnabled(boolean)>($z0) >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.setKerberosAuthenticationEnabled : r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> = z0
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.setKerberosAuthenticationEnabled : r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> = z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z1 = virtualinvoke $r7.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean isKerberosAuthenticationEnabled()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z1 = virtualinvoke $r7.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean isKerberosAuthenticationEnabled()>() >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : $z0 = r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled>
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : $z0 = r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : return $z0
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : return $z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : if $z1 != 0
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : if $z1 != 0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : return $r7
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : return $r7 >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r2 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PATH>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r2 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PATH> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r3 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r2)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r3 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r2) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r3 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r3 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r4 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PASSWORD>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r4 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PASSWORD> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r5 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r4)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r5 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r4) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r5 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r5 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r18 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_TYPE>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r18 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_TYPE> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r19 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r18)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r19 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r18) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r19 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r19 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProxyHostAndPorts : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty PROXY_ALLOWED_HOST_PORTS>
org.apache.ambari.server.configuration.Configuration.getProxyHostAndPorts : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty PROXY_ALLOWED_HOST_PORTS> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProxyHostAndPorts : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getProxyHostAndPorts : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProxyHostAndPorts : return $r2
org.apache.ambari.server.configuration.Configuration.getProxyHostAndPorts : return $r2 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.access$000 : $r0 = <org.apache.ambari.server.view.ViewURLStreamProvider: org.slf4j.Logger LOG>
org.apache.ambari.server.view.ViewURLStreamProvider.access$000 : $r0 = <org.apache.ambari.server.view.ViewURLStreamProvider: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.access$000 : return $r0
org.apache.ambari.server.view.ViewURLStreamProvider.access$000 : return $r0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : $r1 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : $r1 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : if $r1 != null
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : if $r1 != null >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: void initializeAllowedHostPorts()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: void initializeAllowedHostPorts()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : z6 = 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : z6 = 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r7 = new java.util.HashMap
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r7 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : specialinvoke $r7.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : specialinvoke $r7.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r8 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.String allowedHostPortsValue>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r8 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.String allowedHostPortsValue> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>($r8)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>($r8) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : if $z0 == 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : if $z0 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r9 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.String allowedHostPortsValue>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r9 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.String allowedHostPortsValue> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : r2 = virtualinvoke $r9.<java.lang.String: java.lang.String toLowerCase()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : r2 = virtualinvoke $r9.<java.lang.String: java.lang.String toLowerCase()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r10 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty PROXY_ALLOWED_HOST_PORTS>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r10 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty PROXY_ALLOWED_HOST_PORTS> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r11 = virtualinvoke $r10.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r11 = virtualinvoke $r10.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r11)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $z1 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r11) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : if $z1 != 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : if $z1 != 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts> = $r7
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts> = $r7 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r34 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z6)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r34 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z6) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.Boolean isProxyCallRestricted> = $r34
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.Boolean isProxyCallRestricted> = $r34 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : $r2 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.Boolean isProxyCallRestricted>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : $r2 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.Boolean isProxyCallRestricted> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : return $r2
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : return $r2 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r4 = staticinvoke <org.apache.ambari.server.view.ViewURLStreamProvider: org.slf4j.Logger access$000()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r4 = staticinvoke <org.apache.ambari.server.view.ViewURLStreamProvider: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Checking host {} port {} against allowed list.", r1, r2)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : interfaceinvoke $r4.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Checking host {} port {} against allowed list.", r1, r2) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>(r1)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z0 == 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z0 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r5 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r5 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : r3 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : r3 = virtualinvoke $r5.<java.lang.String: java.lang.String toLowerCase()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r6 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r6 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $r6 != null
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $r6 != null >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r7 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.Boolean isProxyCallRestricted>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r7 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.Boolean isProxyCallRestricted> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $z1 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $z1 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z1 == 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z1 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : return 1
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : return 1 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : z6 = 1
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : z6 = 1 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r12 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r12 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : r3 = virtualinvoke $r12.<java.lang.String: java.lang.String[] split(java.lang.String)>(",")
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : r3 = virtualinvoke $r12.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : i0 = lengthof r3
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : i0 = lengthof r3 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : i2 = 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : i2 = 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : if i2 >= i0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : if i2 >= i0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : r5 = r3[i2]
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : r5 = r3[i2] >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r13 = virtualinvoke r5.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r13 = virtualinvoke r5.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : r6 = virtualinvoke $r13.<java.lang.String: java.lang.String[] split(java.lang.String)>(":")
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : r6 = virtualinvoke $r13.<java.lang.String: java.lang.String[] split(java.lang.String)>(":") >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $i1 = lengthof r6
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $i1 = lengthof r6 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : if $i1 != 1
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : if $i1 != 1 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r14 = r6[0]
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r14 = r6[0] >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $z2 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>($r14)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $z2 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>($r14) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : if $z2 != 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : if $z2 != 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r23 = r6[0]
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r23 = r6[0] >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r22 = new java.util.HashSet
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r22 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : specialinvoke $r22.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : specialinvoke $r22.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r22)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r23, $r22) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r15 = r6[0]
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r15 = r6[0] >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r16 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r15)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r16 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r15) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r18 = (java.util.HashSet) $r16
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r18 = (java.util.HashSet) $r16 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r17 = r6[1]
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r17 = r6[1] >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : virtualinvoke $r18.<java.util.HashSet: boolean add(java.lang.Object)>($r17)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : virtualinvoke $r18.<java.util.HashSet: boolean add(java.lang.Object)>($r17) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r19 = staticinvoke <org.apache.ambari.server.view.ViewURLStreamProvider: org.slf4j.Logger access$000()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r19 = staticinvoke <org.apache.ambari.server.view.ViewURLStreamProvider: org.slf4j.Logger access$000()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r21 = r6[0]
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r21 = r6[0] >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r20 = r6[1]
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r20 = r6[1] >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : interfaceinvoke $r19.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Allow proxy to host {} and port {}", $r21, $r20)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : interfaceinvoke $r19.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Allow proxy to host {} and port {}", $r21, $r20) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : i2 = i2 + 1
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : i2 = i2 + 1 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : goto [?= (branch)]
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r8 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r8 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $z2 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>(r3)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $z2 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>(r3) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z2 == 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z2 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r9 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r9 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r11 = (java.util.HashSet) $r10
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r11 = (java.util.HashSet) $r10 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $z3 = virtualinvoke $r11.<java.util.HashSet: boolean contains(java.lang.Object)>("*")
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $z3 = virtualinvoke $r11.<java.util.HashSet: boolean contains(java.lang.Object)>("*") >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z3 == 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z3 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : return 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : return 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : r15 = ""
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : r15 = "" >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $z4 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>(r2)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $z4 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z4 == 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z4 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : r15 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : r15 = virtualinvoke r2.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r12 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r12 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r14 = (java.util.HashSet) $r13
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $r14 = (java.util.HashSet) $r13 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $z5 = virtualinvoke $r14.<java.util.HashSet: boolean contains(java.lang.Object)>(r15)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : $z5 = virtualinvoke $r14.<java.util.HashSet: boolean contains(java.lang.Object)>(r15) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z5 == 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.allowProxy : if $z5 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>(r1)
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : if $z0 == 0
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : if $z0 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $r2 = specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler getHostPortRestrictionHandler()>()
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $r2 = specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler getHostPortRestrictionHandler()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r2 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler hostPortRestrictionHandler>
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r2 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler hostPortRestrictionHandler> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : if $r2 != null
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : if $r2 != null >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r4 = new org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r4 = new org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r6 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.view.ViewContext viewContext>
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r6 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.view.ViewContext viewContext> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r5 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty PROXY_ALLOWED_HOST_PORTS>
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r5 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty PROXY_ALLOWED_HOST_PORTS> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r7 = virtualinvoke $r5.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r7 = virtualinvoke $r5.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r8 = interfaceinvoke $r6.<org.apache.ambari.view.ViewContext: java.lang.String getAmbariProperty(java.lang.String)>($r7)
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r8 = interfaceinvoke $r6.<org.apache.ambari.view.ViewContext: java.lang.String getAmbariProperty(java.lang.String)>($r7) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : specialinvoke $r4.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: void <init>(org.apache.ambari.server.view.ViewURLStreamProvider,java.lang.String)>(r0, $r8)
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : specialinvoke $r4.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: void <init>(org.apache.ambari.server.view.ViewURLStreamProvider,java.lang.String)>(r0, $r8) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler hostPortRestrictionHandler> = $r4
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler hostPortRestrictionHandler> = $r4 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r3 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler hostPortRestrictionHandler>
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r3 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler hostPortRestrictionHandler> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : return $r3
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : return $r3 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $r3 = virtualinvoke $r2.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.Boolean proxyCallRestricted()>()
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $r3 = virtualinvoke $r2.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.Boolean proxyCallRestricted()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $z1 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>()
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $z1 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : if $z1 == 0
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : if $z1 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $r4 = new java.net.URL
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $r4 = new java.net.URL >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : specialinvoke $r4.<java.net.URL: void <init>(java.lang.String)>(r1)
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : specialinvoke $r4.<java.net.URL: void <init>(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $r5 = specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler getHostPortRestrictionHandler()>()
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $r5 = specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler getHostPortRestrictionHandler()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $r6 = virtualinvoke $r4.<java.net.URL: java.lang.String getHost()>()
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $r6 = virtualinvoke $r4.<java.net.URL: java.lang.String getHost()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $i0 = virtualinvoke $r4.<java.net.URL: int getPort()>()
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $i0 = virtualinvoke $r4.<java.net.URL: int getPort()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : if $i0 != -1
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : if $i0 != -1 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $i1 = virtualinvoke $r4.<java.net.URL: int getDefaultPort()>()
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $i1 = virtualinvoke $r4.<java.net.URL: int getDefaultPort()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : goto [?= $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1)]
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : goto [?= $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1)] >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1)
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $r7 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $z2 = virtualinvoke $r5.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: boolean allowProxy(java.lang.String,java.lang.String)>($r6, $r7)
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $z2 = virtualinvoke $r5.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: boolean allowProxy(java.lang.String,java.lang.String)>($r6, $r7) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : return $z2
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : return $z2 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $i1 = virtualinvoke $r4.<java.net.URL: int getPort()>()
