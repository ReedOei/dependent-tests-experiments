org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String m_key> >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : return $r1
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : return $r1 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : r7 = null
org.apache.ambari.server.configuration.Configuration.getProperty : r7 = null >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r2 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r2 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object m_defaultValue>
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object m_defaultValue> >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : return $r1
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getDefaultValue : return $r1 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : if null == $r2
org.apache.ambari.server.configuration.Configuration.getProperty : if null == $r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r6 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r6 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.Object getDefaultValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6)
org.apache.ambari.server.configuration.Configuration.getProperty : r7 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r6) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r3 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Properties properties>
org.apache.ambari.server.configuration.Configuration.getProperty : $r3 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r4 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.configuration.Configuration.getProperty : $r4 = virtualinvoke r1.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : $r5 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>($r4, r7)
org.apache.ambari.server.configuration.Configuration.getProperty : $r5 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>($r4, r7) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getProperty : return $r5
org.apache.ambari.server.configuration.Configuration.getProperty : return $r5 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty API_USE_SSL>
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty API_USE_SSL> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r2)
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r2) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : return $z0
org.apache.ambari.server.configuration.Configuration.getApiSSLAuthentication : return $z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r7 = new org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r7 = new org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : specialinvoke $r7.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void <init>()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : specialinvoke $r7.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void <init>()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r8 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty KERBEROS_AUTH_ENABLED>
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r8 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty KERBEROS_AUTH_ENABLED> >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r9 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r8)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r9 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r8) >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r9)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>($r9) >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z0 = virtualinvoke $r10.<java.lang.Boolean: boolean booleanValue()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z0 = virtualinvoke $r10.<java.lang.Boolean: boolean booleanValue()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : virtualinvoke $r7.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void setKerberosAuthenticationEnabled(boolean)>($z0)
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : virtualinvoke $r7.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: void setKerberosAuthenticationEnabled(boolean)>($z0) >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.setKerberosAuthenticationEnabled : r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> = z0
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.setKerberosAuthenticationEnabled : r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> = z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z1 = virtualinvoke $r7.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean isKerberosAuthenticationEnabled()>()
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : $z1 = virtualinvoke $r7.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean isKerberosAuthenticationEnabled()>() >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : $z0 = r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled>
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : $z0 = r0.<org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties: boolean kerberosAuthenticationEnabled> >>>>>>>> org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : return $z0
org.apache.ambari.server.security.authentication.kerberos.AmbariKerberosAuthenticationProperties.isKerberosAuthenticationEnabled : return $z0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : if $z1 != 0
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : if $z1 != 0 >>>>>>>> org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : return $r7
org.apache.ambari.server.configuration.Configuration.createKerberosAuthenticationProperties : return $r7 >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r2 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PATH>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r2 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PATH> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r3 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r2)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r3 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r2) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r3 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r3 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r4 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PASSWORD>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r4 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_PASSWORD> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r5 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r4)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r5 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r4) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r5 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r5 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r18 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_TYPE>
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r18 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SSL_TRUSTSTORE_TYPE> >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r19 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r18)
org.apache.ambari.server.configuration.Configuration.loadSSLParams : $r19 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r18) >>>>>>>> org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r19 == null
org.apache.ambari.server.configuration.Configuration.loadSSLParams : if $r19 == null >>>>>>>> org.apache.ambari.server.configuration.Configuration.getMetadataPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty METADATA_DIR_PATH>
org.apache.ambari.server.configuration.Configuration.getMetadataPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty METADATA_DIR_PATH> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getMetadataPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getMetadataPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getMetadataPath : return $r2
org.apache.ambari.server.configuration.Configuration.getMetadataPath : return $r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getCommonServicesPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty COMMON_SERVICES_DIR_PATH>
org.apache.ambari.server.configuration.Configuration.getCommonServicesPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty COMMON_SERVICES_DIR_PATH> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getCommonServicesPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getCommonServicesPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getCommonServicesPath : return $r2
org.apache.ambari.server.configuration.Configuration.getCommonServicesPath : return $r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getExtensionsPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty EXTENSIONS_DIR_PATH>
org.apache.ambari.server.configuration.Configuration.getExtensionsPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty EXTENSIONS_DIR_PATH> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getExtensionsPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getExtensionsPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getExtensionsPath : return $r2
org.apache.ambari.server.configuration.Configuration.getExtensionsPath : return $r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getServerVersionFilePath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_VERSION_FILE>
org.apache.ambari.server.configuration.Configuration.getServerVersionFilePath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty SERVER_VERSION_FILE> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getServerVersionFilePath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getServerVersionFilePath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getServerVersionFilePath : return $r2
org.apache.ambari.server.configuration.Configuration.getServerVersionFilePath : return $r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getCustomActionDefinitionPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty CUSTOM_ACTION_DEFINITION>
org.apache.ambari.server.configuration.Configuration.getCustomActionDefinitionPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty CUSTOM_ACTION_DEFINITION> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getCustomActionDefinitionPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getCustomActionDefinitionPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getCustomActionDefinitionPath : return $r2
org.apache.ambari.server.configuration.Configuration.getCustomActionDefinitionPath : return $r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getResourceDirPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty RESOURCES_DIR>
org.apache.ambari.server.configuration.Configuration.getResourceDirPath : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty RESOURCES_DIR> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getResourceDirPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getResourceDirPath : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getResourceDirPath : return $r2
org.apache.ambari.server.configuration.Configuration.getResourceDirPath : return $r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootStrapDir : $r2 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty BOOTSTRAP_DIRECTORY>
org.apache.ambari.server.configuration.Configuration.getBootStrapDir : $r2 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty BOOTSTRAP_DIRECTORY> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootStrapDir : r1 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r2)
org.apache.ambari.server.configuration.Configuration.getBootStrapDir : r1 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r2) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootStrapDir : $r3 = new java.io.File
org.apache.ambari.server.configuration.Configuration.getBootStrapDir : $r3 = new java.io.File >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootStrapDir : specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r1)
org.apache.ambari.server.configuration.Configuration.getBootStrapDir : specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootStrapDir : return $r3
org.apache.ambari.server.configuration.Configuration.getBootStrapDir : return $r3 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootStrapScript : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty BOOTSTRAP_SCRIPT>
org.apache.ambari.server.configuration.Configuration.getBootStrapScript : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty BOOTSTRAP_SCRIPT> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootStrapScript : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getBootStrapScript : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootStrapScript : return $r2
org.apache.ambari.server.configuration.Configuration.getBootStrapScript : return $r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootSetupAgentScript : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty BOOTSTRAP_SETUP_AGENT_SCRIPT>
org.apache.ambari.server.configuration.Configuration.getBootSetupAgentScript : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty BOOTSTRAP_SETUP_AGENT_SCRIPT> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootSetupAgentScript : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getBootSetupAgentScript : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootSetupAgentScript : return $r2
org.apache.ambari.server.configuration.Configuration.getBootSetupAgentScript : return $r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : $r3 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Map configsMap>
org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : $r3 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Map configsMap> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : $r2 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty PASSPHRASE>
org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : $r2 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty PASSPHRASE> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : $r4 = virtualinvoke $r2.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : $r4 = virtualinvoke $r2.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4)
org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : $r5 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : r1 = (java.lang.String) $r5
org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : r1 = (java.lang.String) $r5 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : if null == r1
org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : if null == r1 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : $r6 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty BOOTSTRAP_SETUP_AGENT_PASSWORD>
org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : $r6 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty BOOTSTRAP_SETUP_AGENT_PASSWORD> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : $r7 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r6)
org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : $r7 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r6) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : return $r7
org.apache.ambari.server.configuration.Configuration.getBootSetupAgentPassword : return $r7 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getMasterHostname : $r3 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Properties properties>
org.apache.ambari.server.configuration.Configuration.getMasterHostname : $r3 = r0.<org.apache.ambari.server.configuration.Configuration: java.util.Properties properties> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getMasterHostname : $r2 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty BOOTSTRAP_MASTER_HOSTNAME>
org.apache.ambari.server.configuration.Configuration.getMasterHostname : $r2 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty BOOTSTRAP_MASTER_HOSTNAME> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getMasterHostname : $r4 = virtualinvoke $r2.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.configuration.Configuration.getMasterHostname : $r4 = virtualinvoke $r2.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration.getMasterHostname : $r5 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>($r4, r1)
org.apache.ambari.server.configuration.Configuration.getMasterHostname : $r5 = virtualinvoke $r3.<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>($r4, r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getMasterHostname : return $r5
org.apache.ambari.server.configuration.Configuration.getMasterHostname : return $r5 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getServerOsType : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty OS_VERSION>
org.apache.ambari.server.configuration.Configuration.getServerOsType : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty OS_VERSION> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getServerOsType : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getServerOsType : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getServerOsType : return $r2
org.apache.ambari.server.configuration.Configuration.getServerOsType : return $r2 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getServerOsFamily : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty OS_FAMILY>
org.apache.ambari.server.configuration.Configuration.getServerOsFamily : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty OS_FAMILY> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getServerOsFamily : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getServerOsFamily : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getServerOsFamily : return $r2
org.apache.ambari.server.configuration.Configuration.getServerOsFamily : return $r2 >>>>>>>> org.apache.ambari.server.api.services.AmbariMetaInfo.getServerVersion : $r1 = r0.<org.apache.ambari.server.api.services.AmbariMetaInfo: java.lang.String serverVersion>
org.apache.ambari.server.api.services.AmbariMetaInfo.getServerVersion : $r1 = r0.<org.apache.ambari.server.api.services.AmbariMetaInfo: java.lang.String serverVersion> >>>>>>>> org.apache.ambari.server.api.services.AmbariMetaInfo.getServerVersion : return $r1
org.apache.ambari.server.api.services.AmbariMetaInfo.getServerVersion : return $r1 >>>>>>>> org.apache.ambari.server.configuration.Configuration.getClientApiPort : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty CLIENT_API_PORT>
org.apache.ambari.server.configuration.Configuration.getClientApiPort : $r1 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty CLIENT_API_PORT> >>>>>>>> org.apache.ambari.server.configuration.Configuration.getClientApiPort : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1)
org.apache.ambari.server.configuration.Configuration.getClientApiPort : $r2 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getProperty(org.apache.ambari.server.configuration.Configuration$ConfigurationProperty)>($r1) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getClientApiPort : $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2)
org.apache.ambari.server.configuration.Configuration.getClientApiPort : $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r2) >>>>>>>> org.apache.ambari.server.configuration.Configuration.getClientApiPort : return $i0
org.apache.ambari.server.configuration.Configuration.getClientApiPort : return $i0 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.init : $r1 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.io.File bootStrapDir>
org.apache.ambari.server.bootstrap.BootStrapImpl.init : $r1 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.io.File bootStrapDir> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.init : $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>()
org.apache.ambari.server.bootstrap.BootStrapImpl.init : $z1 = virtualinvoke $r1.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.init : if $z1 != 0
org.apache.ambari.server.bootstrap.BootStrapImpl.init : if $z1 != 0 >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.setSshKey : r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String sshKey> = r1
org.apache.ambari.server.bootstrap.SshHostInfo.setSshKey : r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String sshKey> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.setUserRunAs : r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String userRunAs> = r1
org.apache.ambari.server.bootstrap.SshHostInfo.setUserRunAs : r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String userRunAs> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.setHosts : r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List hosts> = r1
org.apache.ambari.server.bootstrap.SshHostInfo.setHosts : r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List hosts> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.setUser : r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String user> = r1
org.apache.ambari.server.bootstrap.SshHostInfo.setUser : r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String user> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.setPassword : r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String password> = r1
org.apache.ambari.server.bootstrap.SshHostInfo.setPassword : r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String password> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r4 = new org.apache.ambari.server.bootstrap.BSResponse
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r4 = new org.apache.ambari.server.bootstrap.BSResponse >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : specialinvoke $r4.<org.apache.ambari.server.bootstrap.BSResponse: void <init>()>()
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : specialinvoke $r4.<org.apache.ambari.server.bootstrap.BSResponse: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r6 = <org.apache.ambari.server.bootstrap.BootStrapImpl: org.slf4j.Logger LOG>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r6 = <org.apache.ambari.server.bootstrap.BootStrapImpl: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r5 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r5 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BootStrapping hosts ")
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BootStrapping hosts ") >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r8 = virtualinvoke r1.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String hostListAsString()>()
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r8 = virtualinvoke r1.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String hostListAsString()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $r4 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $r4 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $r5 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List hosts>
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $r5 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List hosts> >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : if $r5 != null
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : if $r5 != null >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $r6 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List hosts>
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $r6 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List hosts> >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : r2 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : if $z0 == 0
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : if $z0 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $r8 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : r3 = (java.lang.String) $r8
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : r3 = (java.lang.String) $r8 >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":")
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : return $r7
org.apache.ambari.server.bootstrap.SshHostInfo.hostListAsString : return $r7 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>($r10)
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String)>($r10) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r11 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BSRunner bsRunner>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r11 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BSRunner bsRunner> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : if $r11 == null
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : if $r11 == null >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $i0 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: int requestId>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $i0 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: int requestId> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $i1 = $i0 + 1
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $i1 = $i0 + 1 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: int requestId> = $i1
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: int requestId> = $i1 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r12 = virtualinvoke r1.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List getHosts()>()
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r12 = virtualinvoke r1.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List getHosts()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.getHosts : $r1 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List hosts>
org.apache.ambari.server.bootstrap.SshHostInfo.getHosts : $r1 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List hosts> >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.getHosts : return $r1
org.apache.ambari.server.bootstrap.SshHostInfo.getHosts : return $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : if $r12 == null
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : if $r12 == null >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r17 = virtualinvoke r1.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List getHosts()>()
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r17 = virtualinvoke r1.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List getHosts()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $z0 = interfaceinvoke $r17.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $z0 = interfaceinvoke $r17.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : if $z0 == 0
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : if $z0 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r18 = new org.apache.ambari.server.bootstrap.BSRunner
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r18 = new org.apache.ambari.server.bootstrap.BSRunner >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r19 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.io.File bootStrapDir>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r19 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.io.File bootStrapDir> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r20 = virtualinvoke $r19.<java.io.File: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r20 = virtualinvoke $r19.<java.io.File: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r21 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.lang.String bootScript>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r21 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.lang.String bootScript> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r22 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.lang.String bootSetupAgentScript>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r22 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.lang.String bootSetupAgentScript> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r23 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.lang.String bootSetupAgentPassword>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r23 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.lang.String bootSetupAgentPassword> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $i6 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: int requestId>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $i6 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: int requestId> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r24 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.lang.String masterHostname>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r24 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.lang.String masterHostname> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $z1 = virtualinvoke r1.<org.apache.ambari.server.bootstrap.SshHostInfo: boolean isVerbose()>()
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $z1 = virtualinvoke r1.<org.apache.ambari.server.bootstrap.SshHostInfo: boolean isVerbose()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.isVerbose : $z0 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: boolean verbose>
org.apache.ambari.server.bootstrap.SshHostInfo.isVerbose : $z0 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: boolean verbose> >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.isVerbose : return $z0
org.apache.ambari.server.bootstrap.SshHostInfo.isVerbose : return $z0 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r26 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.lang.String clusterOsFamily>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r26 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.lang.String clusterOsFamily> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r25 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.lang.String projectVersion>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r25 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: java.lang.String projectVersion> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $i7 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: int serverPort>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $i7 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: int serverPort> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : specialinvoke $r18.<org.apache.ambari.server.bootstrap.BSRunner: void <init>(org.apache.ambari.server.bootstrap.BootStrapImpl,org.apache.ambari.server.bootstrap.SshHostInfo,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,long,java.lang.String,boolean,java.lang.String,java.lang.String,int)>(r0, r1, $r20, $r21, $r22, $r23, $i6, 0L, $r24, $z1, $r26, $r25, $i7)
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : specialinvoke $r18.<org.apache.ambari.server.bootstrap.BSRunner: void <init>(org.apache.ambari.server.bootstrap.BootStrapImpl,org.apache.ambari.server.bootstrap.SshHostInfo,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,long,java.lang.String,boolean,java.lang.String,java.lang.String,int)>(r0, r1, $r20, $r21, $r22, $r23, $i6, 0L, $r24, $z1, $r26, $r25, $i7) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapStatus.setLog : r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.lang.String log> = r1
org.apache.ambari.server.bootstrap.BootStrapStatus.setLog : r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.lang.String log> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapStatus.setStatus : r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat status> = r1
org.apache.ambari.server.bootstrap.BootStrapStatus.setStatus : r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat status> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.updateStatus : $r2 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.FifoLinkedHashMap bsStatus>
org.apache.ambari.server.bootstrap.BootStrapImpl.updateStatus : $r2 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.FifoLinkedHashMap bsStatus> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.updateStatus : $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.ambari.server.bootstrap.BootStrapImpl.updateStatus : $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.updateStatus : virtualinvoke $r2.<org.apache.ambari.server.bootstrap.FifoLinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1)
org.apache.ambari.server.bootstrap.BootStrapImpl.updateStatus : virtualinvoke $r2.<org.apache.ambari.server.bootstrap.FifoLinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1) >>>>>>>> org.apache.ambari.server.bootstrap.FifoLinkedHashMap.removeEldestEntry : $i0 = virtualinvoke r0.<org.apache.ambari.server.bootstrap.FifoLinkedHashMap: int size()>()
org.apache.ambari.server.bootstrap.FifoLinkedHashMap.removeEldestEntry : $i0 = virtualinvoke r0.<org.apache.ambari.server.bootstrap.FifoLinkedHashMap: int size()>() >>>>>>>> org.apache.ambari.server.bootstrap.FifoLinkedHashMap.removeEldestEntry : if $i0 <= 100
org.apache.ambari.server.bootstrap.FifoLinkedHashMap.removeEldestEntry : if $i0 <= 100 >>>>>>>> org.apache.ambari.server.bootstrap.FifoLinkedHashMap.removeEldestEntry : $z0 = 0
org.apache.ambari.server.bootstrap.FifoLinkedHashMap.removeEldestEntry : $z0 = 0 >>>>>>>> org.apache.ambari.server.bootstrap.FifoLinkedHashMap.removeEldestEntry : return $z0
org.apache.ambari.server.bootstrap.FifoLinkedHashMap.removeEldestEntry : return $z0 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BSRunner bsRunner> = $r18
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BSRunner bsRunner> = $r18 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r27 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BSRunner bsRunner>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r27 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BSRunner bsRunner> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : virtualinvoke $r27.<org.apache.ambari.server.bootstrap.BSRunner: void start()>()
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : virtualinvoke $r27.<org.apache.ambari.server.bootstrap.BSRunner: void start()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r28 = <org.apache.ambari.server.bootstrap.BSResponse$BSRunStat: org.apache.ambari.server.bootstrap.BSResponse$BSRunStat OK>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $r28 = <org.apache.ambari.server.bootstrap.BSResponse$BSRunStat: org.apache.ambari.server.bootstrap.BSResponse$BSRunStat OK> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : virtualinvoke $r4.<org.apache.ambari.server.bootstrap.BSResponse: void setStatus(org.apache.ambari.server.bootstrap.BSResponse$BSRunStat)>($r28)
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : virtualinvoke $r4.<org.apache.ambari.server.bootstrap.BSResponse: void setStatus(org.apache.ambari.server.bootstrap.BSResponse$BSRunStat)>($r28) >>>>>>>> org.apache.ambari.server.bootstrap.BSResponse.setStatus : r0.<org.apache.ambari.server.bootstrap.BSResponse: org.apache.ambari.server.bootstrap.BSResponse$BSRunStat status> = r1
org.apache.ambari.server.bootstrap.BSResponse.setStatus : r0.<org.apache.ambari.server.bootstrap.BSResponse: org.apache.ambari.server.bootstrap.BSResponse$BSRunStat status> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : virtualinvoke $r4.<org.apache.ambari.server.bootstrap.BSResponse: void setLog(java.lang.String)>("Running Bootstrap now.")
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : virtualinvoke $r4.<org.apache.ambari.server.bootstrap.BSResponse: void setLog(java.lang.String)>("Running Bootstrap now.") >>>>>>>> org.apache.ambari.server.bootstrap.BSResponse.setLog : r0.<org.apache.ambari.server.bootstrap.BSResponse: java.lang.String log> = r1
org.apache.ambari.server.bootstrap.BSResponse.setLog : r0.<org.apache.ambari.server.bootstrap.BSResponse: java.lang.String log> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $i8 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: int requestId>
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $i8 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: int requestId> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $l9 = (long) $i8
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : $l9 = (long) $i8 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : virtualinvoke $r4.<org.apache.ambari.server.bootstrap.BSResponse: void setRequestId(long)>($l9)
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : virtualinvoke $r4.<org.apache.ambari.server.bootstrap.BSResponse: void setRequestId(long)>($l9) >>>>>>>> org.apache.ambari.server.bootstrap.BSResponse.setRequestId : r0.<org.apache.ambari.server.bootstrap.BSResponse: long requestId> = l0
org.apache.ambari.server.bootstrap.BSResponse.setRequestId : r0.<org.apache.ambari.server.bootstrap.BSResponse: long requestId> = l0 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : return $r4
org.apache.ambari.server.bootstrap.BootStrapImpl.runBootStrap : return $r4 >>>>>>>> org.apache.ambari.server.bootstrap.BSResponse.getRequestId : $l0 = r0.<org.apache.ambari.server.bootstrap.BSResponse: long requestId>
org.apache.ambari.server.bootstrap.BSResponse.getRequestId : $l0 = r0.<org.apache.ambari.server.bootstrap.BSResponse: long requestId> >>>>>>>> org.apache.ambari.server.bootstrap.BSResponse.getRequestId : return $l0
org.apache.ambari.server.bootstrap.BSResponse.getRequestId : return $l0 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $r1 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.FifoLinkedHashMap bsStatus>
org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $r1 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.FifoLinkedHashMap bsStatus> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $z0 = virtualinvoke $r1.<org.apache.ambari.server.bootstrap.FifoLinkedHashMap: boolean containsKey(java.lang.Object)>($r2)
org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $z0 = virtualinvoke $r1.<org.apache.ambari.server.bootstrap.FifoLinkedHashMap: boolean containsKey(java.lang.Object)>($r2) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : if $z0 != 0
org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : if $z0 != 0 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $r3 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.FifoLinkedHashMap bsStatus>
org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $r3 = r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.FifoLinkedHashMap bsStatus> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $r5 = virtualinvoke $r3.<org.apache.ambari.server.bootstrap.FifoLinkedHashMap: java.lang.Object get(java.lang.Object)>($r4)
org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $r5 = virtualinvoke $r3.<org.apache.ambari.server.bootstrap.FifoLinkedHashMap: java.lang.Object get(java.lang.Object)>($r4) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $r6 = (org.apache.ambari.server.bootstrap.BootStrapStatus) $r5
org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : $r6 = (org.apache.ambari.server.bootstrap.BootStrapStatus) $r5 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : return $r6
org.apache.ambari.server.bootstrap.BootStrapImpl.getStatus : return $r6 >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapStatus.getStatus : $r1 = r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat status>
org.apache.ambari.server.bootstrap.BootStrapStatus.getStatus : $r1 = r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat status> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapStatus.getStatus : return $r1
org.apache.ambari.server.bootstrap.BootStrapStatus.getStatus : return $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r15 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo>
org.apache.ambari.server.bootstrap.BSRunner.run : $r15 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r16 = virtualinvoke $r15.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List getHosts()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r16 = virtualinvoke $r15.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List getHosts()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r1 = specialinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String createHostString(java.util.List)>($r16)
org.apache.ambari.server.bootstrap.BSRunner.run : r1 = specialinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String createHostString(java.util.List)>($r16) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : $r5 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSRunner.createHostString : $r5 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner.createHostString : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : if r1 != null
org.apache.ambari.server.bootstrap.BSRunner.createHostString : if r1 != null >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : i3 = 0
org.apache.ambari.server.bootstrap.BSRunner.createHostString : i3 = 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.bootstrap.BSRunner.createHostString : r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.bootstrap.BSRunner.createHostString : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : if $z0 == 0
org.apache.ambari.server.bootstrap.BSRunner.createHostString : if $z0 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.bootstrap.BSRunner.createHostString : $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : r4 = (java.lang.String) $r7
org.apache.ambari.server.bootstrap.BSRunner.createHostString : r4 = (java.lang.String) $r7 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
org.apache.ambari.server.bootstrap.BSRunner.createHostString : virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : $i0 = i3
org.apache.ambari.server.bootstrap.BSRunner.createHostString : $i0 = i3 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : i3 = i3 + 1
org.apache.ambari.server.bootstrap.BSRunner.createHostString : i3 = i3 + 1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : $i1 = interfaceinvoke r1.<java.util.List: int size()>()
org.apache.ambari.server.bootstrap.BSRunner.createHostString : $i1 = interfaceinvoke r1.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : $i2 = $i1 - 1
org.apache.ambari.server.bootstrap.BSRunner.createHostString : $i2 = $i1 - 1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : if $i0 == $i2
org.apache.ambari.server.bootstrap.BSRunner.createHostString : if $i0 == $i2 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",")
org.apache.ambari.server.bootstrap.BSRunner.createHostString : virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.bootstrap.BSRunner.createHostString : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.createHostString : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createHostString : return $r6
org.apache.ambari.server.bootstrap.BSRunner.createHostString : return $r6 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r17 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo>
org.apache.ambari.server.bootstrap.BSRunner.run : $r17 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r18 = virtualinvoke $r17.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List getHosts()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r18 = virtualinvoke $r17.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List getHosts()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $i1 = interfaceinvoke $r18.<java.util.List: int size()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $i1 = interfaceinvoke $r18.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : l0 = specialinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: long calculateBSTimeout(int)>($i1)
org.apache.ambari.server.bootstrap.BSRunner.run : l0 = specialinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: long calculateBSTimeout(int)>($i1) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.calculateBSTimeout : $l3 = (long) i0
org.apache.ambari.server.bootstrap.BSRunner.calculateBSTimeout : $l3 = (long) i0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.calculateBSTimeout : $l4 = 300000L * $l3
org.apache.ambari.server.bootstrap.BSRunner.calculateBSTimeout : $l4 = 300000L * $l3 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.calculateBSTimeout : $l5 = $l4 / 20L
org.apache.ambari.server.bootstrap.BSRunner.calculateBSTimeout : $l5 = $l4 / 20L >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.calculateBSTimeout : $l6 = staticinvoke <java.lang.Math: long max(long,long)>(300000L, $l5)
org.apache.ambari.server.bootstrap.BSRunner.calculateBSTimeout : $l6 = staticinvoke <java.lang.Math: long max(long,long)>(300000L, $l5) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.calculateBSTimeout : return $l6
org.apache.ambari.server.bootstrap.BSRunner.calculateBSTimeout : return $l6 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int)>(1)
org.apache.ambari.server.bootstrap.BSRunner.run : r2 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ScheduledExecutorService newScheduledThreadPool(int)>(1) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r19 = new org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector
org.apache.ambari.server.bootstrap.BSRunner.run : $r19 = new org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r19.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: void <init>(org.apache.ambari.server.bootstrap.BSRunner,org.apache.ambari.server.bootstrap.BSRunner$1)>(r0, null)
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r19.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: void <init>(org.apache.ambari.server.bootstrap.BSRunner,org.apache.ambari.server.bootstrap.BSRunner$1)>(r0, null) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r21 = <org.apache.ambari.server.bootstrap.BSRunner: org.slf4j.Logger LOG>
org.apache.ambari.server.bootstrap.BSRunner.run : $r21 = <org.apache.ambari.server.bootstrap.BSRunner: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r20 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSRunner.run : $r20 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r20.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r20.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Kicking off the scheduler for polling on logs in ")
org.apache.ambari.server.bootstrap.BSRunner.run : $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Kicking off the scheduler for polling on logs in ") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r23 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir>
org.apache.ambari.server.bootstrap.BSRunner.run : $r23 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23)
org.apache.ambari.server.bootstrap.BSRunner.run : $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r23) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke $r21.<org.slf4j.Logger: void info(java.lang.String)>($r25)
org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke $r21.<org.slf4j.Logger: void info(java.lang.String)>($r25) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r26 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo>
org.apache.ambari.server.bootstrap.BSRunner.run : $r26 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r160 = virtualinvoke $r26.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String getUser()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r160 = virtualinvoke $r26.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String getUser()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.getUser : $r1 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String user>
org.apache.ambari.server.bootstrap.SshHostInfo.getUser : $r1 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String user> >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.getUser : return $r1
org.apache.ambari.server.bootstrap.SshHostInfo.getUser : return $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r27 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo>
org.apache.ambari.server.bootstrap.BSRunner.run : $r27 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r4 = virtualinvoke $r27.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String getUserRunAs()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r4 = virtualinvoke $r27.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String getUserRunAs()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.getUserRunAs : $r1 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String userRunAs>
org.apache.ambari.server.bootstrap.SshHostInfo.getUserRunAs : $r1 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String userRunAs> >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.getUserRunAs : return $r1
org.apache.ambari.server.bootstrap.SshHostInfo.getUserRunAs : return $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if r160 == null
org.apache.ambari.server.bootstrap.BSRunner.run : if r160 == null >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $z10 = virtualinvoke r160.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $z10 = virtualinvoke r160.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $z10 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $z10 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r161 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo>
org.apache.ambari.server.bootstrap.BSRunner.run : $r161 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r162 = virtualinvoke $r161.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String getSshPort()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r162 = virtualinvoke $r161.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String getSshPort()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.getSshPort : $r1 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String sshPort>
org.apache.ambari.server.bootstrap.SshHostInfo.getSshPort : $r1 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String sshPort> >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.getSshPort : return $r1
org.apache.ambari.server.bootstrap.SshHostInfo.getSshPort : return $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if r162 == null
org.apache.ambari.server.bootstrap.BSRunner.run : if r162 == null >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r162 = "22"
org.apache.ambari.server.bootstrap.BSRunner.run : r162 = "22" >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r163 = newarray (java.lang.String)[13]
org.apache.ambari.server.bootstrap.BSRunner.run : r163 = newarray (java.lang.String)[13] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r164 = <org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat: org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat RUNNING>
org.apache.ambari.server.bootstrap.BSRunner.run : r164 = <org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat: org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat RUNNING> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r165 = ""
org.apache.ambari.server.bootstrap.BSRunner.run : r165 = "" >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: void createRunDir()>()
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: void createRunDir()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createRunDir : $r1 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File bootDir>
org.apache.ambari.server.bootstrap.BSRunner.createRunDir : $r1 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File bootDir> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createRunDir : $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>()
org.apache.ambari.server.bootstrap.BSRunner.createRunDir : $z0 = virtualinvoke $r1.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createRunDir : if $z0 != 0
org.apache.ambari.server.bootstrap.BSRunner.createRunDir : if $z0 != 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createRunDir : $r2 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir>
org.apache.ambari.server.bootstrap.BSRunner.createRunDir : $r2 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createRunDir : $z1 = virtualinvoke $r2.<java.io.File: boolean exists()>()
org.apache.ambari.server.bootstrap.BSRunner.createRunDir : $z1 = virtualinvoke $r2.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createRunDir : if $z1 == 0
org.apache.ambari.server.bootstrap.BSRunner.createRunDir : if $z1 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createRunDir : $r3 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir>
org.apache.ambari.server.bootstrap.BSRunner.createRunDir : $r3 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createRunDir : $z2 = virtualinvoke $r3.<java.io.File: boolean mkdirs()>()
org.apache.ambari.server.bootstrap.BSRunner.createRunDir : $z2 = virtualinvoke $r3.<java.io.File: boolean mkdirs()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.createRunDir : if $z2 != 0
org.apache.ambari.server.bootstrap.BSRunner.createRunDir : if $z2 != 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r166 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>
org.apache.ambari.server.bootstrap.BSRunner.run : $r166 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r167 = interfaceinvoke r2.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>($r19, 0L, 10L, $r166)
org.apache.ambari.server.bootstrap.BSRunner.run : r167 = interfaceinvoke r2.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture scheduleWithFixedDelay(java.lang.Runnable,long,long,java.util.concurrent.TimeUnit)>($r19, 0L, 10L, $r166) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r168 = <org.apache.ambari.server.bootstrap.BSRunner: org.slf4j.Logger LOG>
org.apache.ambari.server.bootstrap.BSRunner.run : $r168 = <org.apache.ambari.server.bootstrap.BSRunner: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $z15 = interfaceinvoke $r168.<org.slf4j.Logger: boolean isDebugEnabled()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $z15 = interfaceinvoke $r168.<org.slf4j.Logger: boolean isDebugEnabled()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $z15 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $z15 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r28 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo>
org.apache.ambari.server.bootstrap.BSRunner.run : $r28 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r169 = virtualinvoke $r28.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String getPassword()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r169 = virtualinvoke $r28.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String getPassword()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.getPassword : $r1 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String password>
org.apache.ambari.server.bootstrap.SshHostInfo.getPassword : $r1 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String password> >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.getPassword : return $r1
org.apache.ambari.server.bootstrap.SshHostInfo.getPassword : return $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if r169 == null
org.apache.ambari.server.bootstrap.BSRunner.run : if r169 == null >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $z8 = virtualinvoke r169.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $z8 = virtualinvoke r169.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $z8 != 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $z8 != 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r96 = new java.io.File
org.apache.ambari.server.bootstrap.BSRunner.run : $r96 = new java.io.File >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r97 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir>
org.apache.ambari.server.bootstrap.BSRunner.run : $r97 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r96.<java.io.File: void <init>(java.io.File,java.lang.String)>($r97, "host_pass")
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r96.<java.io.File: void <init>(java.io.File,java.lang.String)>($r97, "host_pass") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile> = $r96
org.apache.ambari.server.bootstrap.BSRunner.run : r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile> = $r96 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r170 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator")
org.apache.ambari.server.bootstrap.BSRunner.run : r170 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("line.separator") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r98 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSRunner.run : $r98 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r98.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r98.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r99 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r169)
org.apache.ambari.server.bootstrap.BSRunner.run : $r99 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r169) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r100 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r170)
org.apache.ambari.server.bootstrap.BSRunner.run : $r100 = virtualinvoke $r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r170) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r171 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r171 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: void writePasswordFile(java.lang.String)>(r171)
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: void writePasswordFile(java.lang.String)>(r171) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.writePasswordFile : $r2 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile>
org.apache.ambari.server.bootstrap.BSRunner.writePasswordFile : $r2 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.writePasswordFile : staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>($r2, r1)
org.apache.ambari.server.bootstrap.BSRunner.writePasswordFile : staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>($r2, r1) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r172 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo>
org.apache.ambari.server.bootstrap.BSRunner.run : $r172 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r173 = virtualinvoke $r172.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String getSshKey()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r173 = virtualinvoke $r172.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String getSshKey()>() >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.getSshKey : $r1 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String sshKey>
org.apache.ambari.server.bootstrap.SshHostInfo.getSshKey : $r1 = r0.<org.apache.ambari.server.bootstrap.SshHostInfo: java.lang.String sshKey> >>>>>>>> org.apache.ambari.server.bootstrap.SshHostInfo.getSshKey : return $r1
org.apache.ambari.server.bootstrap.SshHostInfo.getSshKey : return $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: void writeSshKeyFile(java.lang.String)>($r173)
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: void writeSshKeyFile(java.lang.String)>($r173) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.writeSshKeyFile : $r2 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File sshKeyFile>
org.apache.ambari.server.bootstrap.BSRunner.writeSshKeyFile : $r2 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File sshKeyFile> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.writeSshKeyFile : staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>($r2, r1)
org.apache.ambari.server.bootstrap.BSRunner.writeSshKeyFile : staticinvoke <org.apache.commons.io.FileUtils: void writeStringToFile(java.io.File,java.lang.String)>($r2, r1) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r174 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String bsScript>
org.apache.ambari.server.bootstrap.BSRunner.run : $r174 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String bsScript> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r163[0] = $r174
org.apache.ambari.server.bootstrap.BSRunner.run : r163[0] = $r174 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r163[1] = r1
org.apache.ambari.server.bootstrap.BSRunner.run : r163[1] = r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r175 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir>
org.apache.ambari.server.bootstrap.BSRunner.run : $r175 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r176 = virtualinvoke $r175.<java.io.File: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r176 = virtualinvoke $r175.<java.io.File: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r163[2] = $r176
org.apache.ambari.server.bootstrap.BSRunner.run : r163[2] = $r176 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r163[3] = r160
org.apache.ambari.server.bootstrap.BSRunner.run : r163[3] = r160 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r163[4] = r162
org.apache.ambari.server.bootstrap.BSRunner.run : r163[4] = r162 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r177 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File sshKeyFile>
org.apache.ambari.server.bootstrap.BSRunner.run : $r177 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File sshKeyFile> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r178 = virtualinvoke $r177.<java.io.File: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r178 = virtualinvoke $r177.<java.io.File: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r163[5] = $r178
org.apache.ambari.server.bootstrap.BSRunner.run : r163[5] = $r178 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r179 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String agentSetupScript>
org.apache.ambari.server.bootstrap.BSRunner.run : $r179 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String agentSetupScript> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r180 = virtualinvoke $r179.<java.lang.String: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r180 = virtualinvoke $r179.<java.lang.String: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r163[6] = $r180
org.apache.ambari.server.bootstrap.BSRunner.run : r163[6] = $r180 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r181 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String ambariHostname>
org.apache.ambari.server.bootstrap.BSRunner.run : $r181 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String ambariHostname> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r163[7] = $r181
org.apache.ambari.server.bootstrap.BSRunner.run : r163[7] = $r181 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r182 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String clusterOsFamily>
org.apache.ambari.server.bootstrap.BSRunner.run : $r182 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String clusterOsFamily> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r163[8] = $r182
org.apache.ambari.server.bootstrap.BSRunner.run : r163[8] = $r182 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r183 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String projectVersion>
org.apache.ambari.server.bootstrap.BSRunner.run : $r183 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String projectVersion> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r163[9] = $r183
org.apache.ambari.server.bootstrap.BSRunner.run : r163[9] = $r183 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r184 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSRunner.run : $r184 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r184.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r184.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $i15 = r0.<org.apache.ambari.server.bootstrap.BSRunner: int serverPort>
org.apache.ambari.server.bootstrap.BSRunner.run : $i15 = r0.<org.apache.ambari.server.bootstrap.BSRunner: int serverPort> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r185 = virtualinvoke $r184.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15)
org.apache.ambari.server.bootstrap.BSRunner.run : $r185 = virtualinvoke $r184.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i15) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r186 = virtualinvoke $r185.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.ambari.server.bootstrap.BSRunner.run : $r186 = virtualinvoke $r185.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r187 = virtualinvoke $r186.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r187 = virtualinvoke $r186.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r163[10] = $r187
org.apache.ambari.server.bootstrap.BSRunner.run : r163[10] = $r187 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r163[11] = r4
org.apache.ambari.server.bootstrap.BSRunner.run : r163[11] = r4 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r95 = r163
org.apache.ambari.server.bootstrap.BSRunner.run : $r95 = r163 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r188 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile>
org.apache.ambari.server.bootstrap.BSRunner.run : $r188 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $r188 != null
org.apache.ambari.server.bootstrap.BSRunner.run : if $r188 != null >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r29 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile>
org.apache.ambari.server.bootstrap.BSRunner.run : $r29 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r189 = virtualinvoke $r29.<java.io.File: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r189 = virtualinvoke $r29.<java.io.File: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r95[12] = $r189
org.apache.ambari.server.bootstrap.BSRunner.run : $r95[12] = $r189 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r30 = new java.util.HashMap
org.apache.ambari.server.bootstrap.BSRunner.run : $r30 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r30.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r30.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r31 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name")
org.apache.ambari.server.bootstrap.BSRunner.run : $r31 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("os.name") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $z0 = virtualinvoke $r31.<java.lang.String: boolean contains(java.lang.CharSequence)>("Windows")
org.apache.ambari.server.bootstrap.BSRunner.run : $z0 = virtualinvoke $r31.<java.lang.String: boolean contains(java.lang.CharSequence)>("Windows") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $z0 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $z0 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r193 = <org.apache.ambari.server.bootstrap.BSRunner: org.slf4j.Logger LOG>
org.apache.ambari.server.bootstrap.BSRunner.run : $r193 = <org.apache.ambari.server.bootstrap.BSRunner: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r194 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSRunner.run : $r194 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r194.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r194.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r195 = virtualinvoke $r194.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Host= ")
org.apache.ambari.server.bootstrap.BSRunner.run : $r195 = virtualinvoke $r194.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Host= ") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r196 = virtualinvoke $r195.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.ambari.server.bootstrap.BSRunner.run : $r196 = virtualinvoke $r195.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r197 = virtualinvoke $r196.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bs=")
org.apache.ambari.server.bootstrap.BSRunner.run : $r197 = virtualinvoke $r196.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" bs=") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r198 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String bsScript>
org.apache.ambari.server.bootstrap.BSRunner.run : $r198 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String bsScript> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r199 = virtualinvoke $r197.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r198)
org.apache.ambari.server.bootstrap.BSRunner.run : $r199 = virtualinvoke $r197.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r198) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r200 = virtualinvoke $r199.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requestDir=")
org.apache.ambari.server.bootstrap.BSRunner.run : $r200 = virtualinvoke $r199.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" requestDir=") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r201 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir>
org.apache.ambari.server.bootstrap.BSRunner.run : $r201 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r202 = virtualinvoke $r200.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r201)
org.apache.ambari.server.bootstrap.BSRunner.run : $r202 = virtualinvoke $r200.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r201) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r203 = virtualinvoke $r202.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" user=")
org.apache.ambari.server.bootstrap.BSRunner.run : $r203 = virtualinvoke $r202.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" user=") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r204 = virtualinvoke $r203.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r160)
org.apache.ambari.server.bootstrap.BSRunner.run : $r204 = virtualinvoke $r203.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r160) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r205 = virtualinvoke $r204.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sshPort=")
org.apache.ambari.server.bootstrap.BSRunner.run : $r205 = virtualinvoke $r204.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" sshPort=") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r206 = virtualinvoke $r205.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r162)
org.apache.ambari.server.bootstrap.BSRunner.run : $r206 = virtualinvoke $r205.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r162) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r207 = virtualinvoke $r206.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" keyfile=")
org.apache.ambari.server.bootstrap.BSRunner.run : $r207 = virtualinvoke $r206.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" keyfile=") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r208 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File sshKeyFile>
org.apache.ambari.server.bootstrap.BSRunner.run : $r208 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File sshKeyFile> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r209 = virtualinvoke $r207.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r208)
org.apache.ambari.server.bootstrap.BSRunner.run : $r209 = virtualinvoke $r207.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r208) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r210 = virtualinvoke $r209.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" passwordFile ")
org.apache.ambari.server.bootstrap.BSRunner.run : $r210 = virtualinvoke $r209.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" passwordFile ") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r211 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile>
org.apache.ambari.server.bootstrap.BSRunner.run : $r211 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r212 = virtualinvoke $r210.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r211)
org.apache.ambari.server.bootstrap.BSRunner.run : $r212 = virtualinvoke $r210.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r211) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r213 = virtualinvoke $r212.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" server=")
org.apache.ambari.server.bootstrap.BSRunner.run : $r213 = virtualinvoke $r212.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" server=") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r214 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String ambariHostname>
org.apache.ambari.server.bootstrap.BSRunner.run : $r214 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String ambariHostname> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r215 = virtualinvoke $r213.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r214)
org.apache.ambari.server.bootstrap.BSRunner.run : $r215 = virtualinvoke $r213.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r214) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r216 = virtualinvoke $r215.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" version=")
org.apache.ambari.server.bootstrap.BSRunner.run : $r216 = virtualinvoke $r215.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" version=") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r217 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String projectVersion>
org.apache.ambari.server.bootstrap.BSRunner.run : $r217 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String projectVersion> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r218 = virtualinvoke $r216.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r217)
org.apache.ambari.server.bootstrap.BSRunner.run : $r218 = virtualinvoke $r216.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r217) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r219 = virtualinvoke $r218.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" serverPort=")
org.apache.ambari.server.bootstrap.BSRunner.run : $r219 = virtualinvoke $r218.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" serverPort=") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $i16 = r0.<org.apache.ambari.server.bootstrap.BSRunner: int serverPort>
org.apache.ambari.server.bootstrap.BSRunner.run : $i16 = r0.<org.apache.ambari.server.bootstrap.BSRunner: int serverPort> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r220 = virtualinvoke $r219.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16)
org.apache.ambari.server.bootstrap.BSRunner.run : $r220 = virtualinvoke $r219.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i16) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r221 = virtualinvoke $r220.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" userRunAs=")
org.apache.ambari.server.bootstrap.BSRunner.run : $r221 = virtualinvoke $r220.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" userRunAs=") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r222 = virtualinvoke $r221.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
org.apache.ambari.server.bootstrap.BSRunner.run : $r222 = virtualinvoke $r221.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r223 = virtualinvoke $r222.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timeout=")
org.apache.ambari.server.bootstrap.BSRunner.run : $r223 = virtualinvoke $r222.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" timeout=") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $l17 = l0 / 1000L
org.apache.ambari.server.bootstrap.BSRunner.run : $l17 = l0 / 1000L >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r224 = virtualinvoke $r223.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l17)
org.apache.ambari.server.bootstrap.BSRunner.run : $r224 = virtualinvoke $r223.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l17) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r225 = virtualinvoke $r224.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r225 = virtualinvoke $r224.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke $r193.<org.slf4j.Logger: void info(java.lang.String)>($r225)
org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke $r193.<org.slf4j.Logger: void info(java.lang.String)>($r225) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r226 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String agentSetupPassword>
org.apache.ambari.server.bootstrap.BSRunner.run : $r226 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String agentSetupPassword> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke $r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("AMBARI_PASSPHRASE", $r226)
org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke $r30.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("AMBARI_PASSPHRASE", $r226) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $z16 = r0.<org.apache.ambari.server.bootstrap.BSRunner: boolean verbose>
org.apache.ambari.server.bootstrap.BSRunner.run : $z16 = r0.<org.apache.ambari.server.bootstrap.BSRunner: boolean verbose> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $z16 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $z16 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r32 = <org.apache.ambari.server.bootstrap.BSRunner: org.slf4j.Logger LOG>
org.apache.ambari.server.bootstrap.BSRunner.run : $r32 = <org.apache.ambari.server.bootstrap.BSRunner: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $z1 = interfaceinvoke $r32.<org.slf4j.Logger: boolean isDebugEnabled()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $z1 = interfaceinvoke $r32.<org.slf4j.Logger: boolean isDebugEnabled()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $z1 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $z1 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r33 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSRunner.run : $r33 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r33.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r33.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r34 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir>
org.apache.ambari.server.bootstrap.BSRunner.run : $r34 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r34)
org.apache.ambari.server.bootstrap.BSRunner.run : $r35 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r34) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r36 = <java.io.File: java.lang.String separator>
org.apache.ambari.server.bootstrap.BSRunner.run : $r36 = <java.io.File: java.lang.String separator> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36)
org.apache.ambari.server.bootstrap.BSRunner.run : $r37 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bootstrap.out")
org.apache.ambari.server.bootstrap.BSRunner.run : $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bootstrap.out") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r227 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r227 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r39 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSRunner.run : $r39 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r39.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r39.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r40 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir>
org.apache.ambari.server.bootstrap.BSRunner.run : $r40 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r40)
org.apache.ambari.server.bootstrap.BSRunner.run : $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r40) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r42 = <java.io.File: java.lang.String separator>
org.apache.ambari.server.bootstrap.BSRunner.run : $r42 = <java.io.File: java.lang.String separator> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42)
org.apache.ambari.server.bootstrap.BSRunner.run : $r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r42) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bootstrap.err")
org.apache.ambari.server.bootstrap.BSRunner.run : $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("bootstrap.err") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r228 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r228 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r45 = new java.lang.ProcessBuilder
org.apache.ambari.server.bootstrap.BSRunner.run : $r45 = new java.lang.ProcessBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r45.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>(r163)
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r45.<java.lang.ProcessBuilder: void <init>(java.lang.String[])>(r163) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r46 = new java.io.File
org.apache.ambari.server.bootstrap.BSRunner.run : $r46 = new java.io.File >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r46.<java.io.File: void <init>(java.lang.String)>(r227)
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r46.<java.io.File: void <init>(java.lang.String)>(r227) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke $r45.<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectOutput(java.io.File)>($r46)
org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke $r45.<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectOutput(java.io.File)>($r46) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r47 = new java.io.File
org.apache.ambari.server.bootstrap.BSRunner.run : $r47 = new java.io.File >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r47.<java.io.File: void <init>(java.lang.String)>(r228)
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r47.<java.io.File: void <init>(java.lang.String)>(r228) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke $r45.<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectError(java.io.File)>($r47)
org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke $r45.<java.lang.ProcessBuilder: java.lang.ProcessBuilder redirectError(java.io.File)>($r47) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r6 = virtualinvoke $r45.<java.lang.ProcessBuilder: java.util.Map environment()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r6 = virtualinvoke $r45.<java.lang.ProcessBuilder: java.util.Map environment()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke r6.<java.util.Map: void putAll(java.util.Map)>($r30)
org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke r6.<java.util.Map: void putAll(java.util.Map)>($r30) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r7 = virtualinvoke $r45.<java.lang.ProcessBuilder: java.lang.Process start()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r7 = virtualinvoke $r45.<java.lang.ProcessBuilder: java.lang.Process start()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r4 = new org.apache.ambari.server.bootstrap.BSHostStatusCollector
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r4 = new org.apache.ambari.server.bootstrap.BSHostStatusCollector >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r5 = r0.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: org.apache.ambari.server.bootstrap.BSRunner this$0>
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r5 = r0.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: org.apache.ambari.server.bootstrap.BSRunner this$0> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r6 = staticinvoke <org.apache.ambari.server.bootstrap.BSRunner: java.io.File access$000(org.apache.ambari.server.bootstrap.BSRunner)>($r5)
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r6 = staticinvoke <org.apache.ambari.server.bootstrap.BSRunner: java.io.File access$000(org.apache.ambari.server.bootstrap.BSRunner)>($r5) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.access$000 : $r1 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir>
org.apache.ambari.server.bootstrap.BSRunner.access$000 : $r1 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File requestIdDir> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.access$000 : return $r1
org.apache.ambari.server.bootstrap.BSRunner.access$000 : return $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r7 = r0.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: org.apache.ambari.server.bootstrap.BSRunner this$0>
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r7 = r0.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: org.apache.ambari.server.bootstrap.BSRunner this$0> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r8 = staticinvoke <org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo access$100(org.apache.ambari.server.bootstrap.BSRunner)>($r7)
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r8 = staticinvoke <org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo access$100(org.apache.ambari.server.bootstrap.BSRunner)>($r7) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.access$100 : $r1 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo>
org.apache.ambari.server.bootstrap.BSRunner.access$100 : $r1 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.SshHostInfo sshHostInfo> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.access$100 : return $r1
org.apache.ambari.server.bootstrap.BSRunner.access$100 : return $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r9 = virtualinvoke $r8.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List getHosts()>()
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r9 = virtualinvoke $r8.<org.apache.ambari.server.bootstrap.SshHostInfo: java.util.List getHosts()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : specialinvoke $r4.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: void <init>(java.io.File,java.util.List)>($r6, $r9)
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : specialinvoke $r4.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: void <init>(java.io.File,java.util.List)>($r6, $r9) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke $r4.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: void run()>()
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke $r4.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: void run()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r8 = <org.apache.ambari.server.bootstrap.BSHostStatusCollector: org.slf4j.Logger LOG>
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r8 = <org.apache.ambari.server.bootstrap.BSHostStatusCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r7 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r7 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Request directory ")
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Request directory ") >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r10 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.io.File requestIdDir>
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r10 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.io.File requestIdDir> >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10)
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10) >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String)>($r12)
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String)>($r12) >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r13 = new java.util.ArrayList
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r13 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r13.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r13.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hostStatus> = $r13
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hostStatus> = $r13 >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r14 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hosts>
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r14 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hosts> >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : if $r14 != null
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : if $r14 != null >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r16 = <org.apache.ambari.server.bootstrap.BSHostStatusCollector: org.slf4j.Logger LOG>
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r16 = <org.apache.ambari.server.bootstrap.BSHostStatusCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r15 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r15 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HostList for polling on ")
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HostList for polling on ") >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r18 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hosts>
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r18 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hosts> >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18)
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18) >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : interfaceinvoke $r16.<org.slf4j.Logger: void info(java.lang.String)>($r20)
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : interfaceinvoke $r16.<org.slf4j.Logger: void info(java.lang.String)>($r20) >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r21 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hosts>
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r21 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hosts> >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : r3 = interfaceinvoke $r21.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : r3 = interfaceinvoke $r21.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : if $z0 == 0
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : if $z0 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r22 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r22 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : r4 = (java.lang.String) $r22
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : r4 = (java.lang.String) $r22 >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r23 = new org.apache.ambari.server.bootstrap.BSHostStatus
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r23 = new org.apache.ambari.server.bootstrap.BSHostStatus >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r23.<org.apache.ambari.server.bootstrap.BSHostStatus: void <init>()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r23.<org.apache.ambari.server.bootstrap.BSHostStatus: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : virtualinvoke $r23.<org.apache.ambari.server.bootstrap.BSHostStatus: void setHostName(java.lang.String)>(r4)
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : virtualinvoke $r23.<org.apache.ambari.server.bootstrap.BSHostStatus: void setHostName(java.lang.String)>(r4) >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatus.setHostName : r0.<org.apache.ambari.server.bootstrap.BSHostStatus: java.lang.String hostName> = r1
org.apache.ambari.server.bootstrap.BSHostStatus.setHostName : r0.<org.apache.ambari.server.bootstrap.BSHostStatus: java.lang.String hostName> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r24 = new java.io.File
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r24 = new java.io.File >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r26 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.io.File requestIdDir>
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r26 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.io.File requestIdDir> >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r25 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r25 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r25.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r25.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".done")
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".done") >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r24.<java.io.File: void <init>(java.io.File,java.lang.String)>($r26, $r29)
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r24.<java.io.File: void <init>(java.io.File,java.lang.String)>($r26, $r29) >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r30 = new java.io.File
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r30 = new java.io.File >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r32 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.io.File requestIdDir>
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r32 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.io.File requestIdDir> >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r31 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r31 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r31.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r31.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".log")
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".log") >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r30.<java.io.File: void <init>(java.io.File,java.lang.String)>($r32, $r35)
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : specialinvoke $r30.<java.io.File: void <init>(java.io.File,java.lang.String)>($r32, $r35) >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r36 = <org.apache.ambari.server.bootstrap.BSHostStatusCollector: org.slf4j.Logger LOG>
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r36 = <org.apache.ambari.server.bootstrap.BSHostStatusCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $z1 = interfaceinvoke $r36.<org.slf4j.Logger: boolean isDebugEnabled()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $z1 = interfaceinvoke $r36.<org.slf4j.Logger: boolean isDebugEnabled()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : if $z1 == 0
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : if $z1 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $z2 = virtualinvoke $r24.<java.io.File: boolean exists()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $z2 = virtualinvoke $r24.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : if $z2 != 0
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : if $z2 != 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : virtualinvoke $r23.<org.apache.ambari.server.bootstrap.BSHostStatus: void setStatus(java.lang.String)>("RUNNING")
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : virtualinvoke $r23.<org.apache.ambari.server.bootstrap.BSHostStatus: void setStatus(java.lang.String)>("RUNNING") >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatus.setStatus : r0.<org.apache.ambari.server.bootstrap.BSHostStatus: java.lang.String status> = r1
org.apache.ambari.server.bootstrap.BSHostStatus.setStatus : r0.<org.apache.ambari.server.bootstrap.BSHostStatus: java.lang.String status> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : goto [?= $z8 = virtualinvoke $r30.<java.io.File: boolean exists()>()]
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : goto [?= $z8 = virtualinvoke $r30.<java.io.File: boolean exists()>()] >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $z8 = virtualinvoke $r30.<java.io.File: boolean exists()>()
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $z8 = virtualinvoke $r30.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : if $z8 != 0
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : if $z8 != 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : virtualinvoke $r23.<org.apache.ambari.server.bootstrap.BSHostStatus: void setLog(java.lang.String)>("")
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : virtualinvoke $r23.<org.apache.ambari.server.bootstrap.BSHostStatus: void setLog(java.lang.String)>("") >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatus.setLog : r0.<org.apache.ambari.server.bootstrap.BSHostStatus: java.lang.String log> = r1
org.apache.ambari.server.bootstrap.BSHostStatus.setLog : r0.<org.apache.ambari.server.bootstrap.BSHostStatus: java.lang.String log> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : goto [?= $r67 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hostStatus>]
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : goto [?= $r67 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hostStatus>] >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r67 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hostStatus>
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : $r67 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hostStatus> >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : interfaceinvoke $r67.<java.util.List: boolean add(java.lang.Object)>($r23)
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : interfaceinvoke $r67.<java.util.List: boolean add(java.lang.Object)>($r23) >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.bootstrap.BSHostStatusCollector.run : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : r2 = virtualinvoke $r4.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List getHostStatus()>()
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : r2 = virtualinvoke $r4.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List getHostStatus()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.getHostStatus : $r1 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hostStatus>
org.apache.ambari.server.bootstrap.BSHostStatusCollector.getHostStatus : $r1 = r0.<org.apache.ambari.server.bootstrap.BSHostStatusCollector: java.util.List hostStatus> >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatusCollector.getHostStatus : return $r1
org.apache.ambari.server.bootstrap.BSHostStatusCollector.getHostStatus : return $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r10 = new org.apache.ambari.server.bootstrap.BootStrapStatus
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r10 = new org.apache.ambari.server.bootstrap.BootStrapStatus >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : specialinvoke $r10.<org.apache.ambari.server.bootstrap.BootStrapStatus: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : specialinvoke $r10.<org.apache.ambari.server.bootstrap.BootStrapStatus: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke $r10.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setHostsStatus(java.util.List)>(r2)
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke $r10.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setHostsStatus(java.util.List)>(r2) >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapStatus.setHostsStatus : r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.util.List hostsStatus> = r1
org.apache.ambari.server.bootstrap.BootStrapStatus.setHostsStatus : r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.util.List hostsStatus> = r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke $r10.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setLog(java.lang.String)>("")
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke $r10.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setLog(java.lang.String)>("") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r11 = <org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat: org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat RUNNING>
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r11 = <org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat: org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat RUNNING> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke $r10.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setStatus(org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat)>($r11)
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke $r10.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setStatus(org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat)>($r11) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r12 = r0.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: org.apache.ambari.server.bootstrap.BSRunner this$0>
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r12 = r0.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: org.apache.ambari.server.bootstrap.BSRunner this$0> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r13 = staticinvoke <org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl access$300(org.apache.ambari.server.bootstrap.BSRunner)>($r12)
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r13 = staticinvoke <org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl access$300(org.apache.ambari.server.bootstrap.BSRunner)>($r12) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.access$300 : $r1 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl>
org.apache.ambari.server.bootstrap.BSRunner.access$300 : $r1 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.access$300 : return $r1
org.apache.ambari.server.bootstrap.BSRunner.access$300 : return $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r14 = r0.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: org.apache.ambari.server.bootstrap.BSRunner this$0>
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $r14 = r0.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: org.apache.ambari.server.bootstrap.BSRunner this$0> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $i0 = staticinvoke <org.apache.ambari.server.bootstrap.BSRunner: int access$200(org.apache.ambari.server.bootstrap.BSRunner)>($r14)
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $i0 = staticinvoke <org.apache.ambari.server.bootstrap.BSRunner: int access$200(org.apache.ambari.server.bootstrap.BSRunner)>($r14) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.access$200 : $i0 = r0.<org.apache.ambari.server.bootstrap.BSRunner: int requestId>
org.apache.ambari.server.bootstrap.BSRunner.access$200 : $i0 = r0.<org.apache.ambari.server.bootstrap.BSRunner: int requestId> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.access$200 : return $i0
org.apache.ambari.server.bootstrap.BSRunner.access$200 : return $i0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $l1 = (long) $i0
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : $l1 = (long) $i0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke $r13.<org.apache.ambari.server.bootstrap.BootStrapImpl: void updateStatus(long,org.apache.ambari.server.bootstrap.BootStrapStatus)>($l1, $r10)
org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector.run : virtualinvoke $r13.<org.apache.ambari.server.bootstrap.BootStrapImpl: void updateStatus(long,org.apache.ambari.server.bootstrap.BootStrapStatus)>($l1, $r10) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r48 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSRunner.run : $r48 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r48.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r48.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bootstrap output, log=")
org.apache.ambari.server.bootstrap.BSRunner.run : $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bootstrap output, log=") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r228)
org.apache.ambari.server.bootstrap.BSRunner.run : $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r228) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
org.apache.ambari.server.bootstrap.BSRunner.run : $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r227)
org.apache.ambari.server.bootstrap.BSRunner.run : $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r227) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ")
org.apache.ambari.server.bootstrap.BSRunner.run : $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" at ") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r54 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String ambariHostname>
org.apache.ambari.server.bootstrap.BSRunner.run : $r54 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.lang.String ambariHostname> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54)
org.apache.ambari.server.bootstrap.BSRunner.run : $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r229 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r229 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r56 = <org.apache.ambari.server.bootstrap.BSRunner: org.slf4j.Logger LOG>
org.apache.ambari.server.bootstrap.BSRunner.run : $r56 = <org.apache.ambari.server.bootstrap.BSRunner: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke $r56.<org.slf4j.Logger: void info(java.lang.String)>(r229)
org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke $r56.<org.slf4j.Logger: void info(java.lang.String)>(r229) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : i18 = 1
org.apache.ambari.server.bootstrap.BSRunner.run : i18 = 1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : z17 = 0
org.apache.ambari.server.bootstrap.BSRunner.run : z17 = 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $z2 = specialinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: boolean waitForProcessTermination(java.lang.Process,long)>(r7, l0)
org.apache.ambari.server.bootstrap.BSRunner.run : $z2 = specialinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: boolean waitForProcessTermination(java.lang.Process,long)>(r7, l0) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : l1 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : l1 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : virtualinvoke r1.<java.lang.Process: int exitValue()>()
org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : virtualinvoke r1.<java.lang.Process: int exitValue()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : staticinvoke <java.lang.Thread: void sleep(long)>(1000L)
org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : staticinvoke <java.lang.Thread: void sleep(long)>(1000L) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : $l4 = $l3 - l1
org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : $l4 = $l3 - l1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : $b5 = $l4 cmp l0
org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : $b5 = $l4 cmp l0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : if $b5 < 0
org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : if $b5 < 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : return 1
org.apache.ambari.server.bootstrap.BSRunner.waitForProcessTermination : return 1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $z2 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $z2 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : i18 = virtualinvoke r7.<java.lang.Process: int exitValue()>()
org.apache.ambari.server.bootstrap.BSRunner.run : i18 = virtualinvoke r7.<java.lang.Process: int exitValue()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= r230 = ""]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= r230 = ""] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r230 = ""
org.apache.ambari.server.bootstrap.BSRunner.run : r230 = "" >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r231 = ""
org.apache.ambari.server.bootstrap.BSRunner.run : r231 = "" >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r58 = new java.io.File
org.apache.ambari.server.bootstrap.BSRunner.run : $r58 = new java.io.File >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r58.<java.io.File: void <init>(java.lang.String)>(r227)
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r58.<java.io.File: void <init>(java.lang.String)>(r227) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r230 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>($r58)
org.apache.ambari.server.bootstrap.BSRunner.run : r230 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>($r58) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r59 = new java.io.File
org.apache.ambari.server.bootstrap.BSRunner.run : $r59 = new java.io.File >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r59.<java.io.File: void <init>(java.lang.String)>(r228)
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r59.<java.io.File: void <init>(java.lang.String)>(r228) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r231 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>($r59)
org.apache.ambari.server.bootstrap.BSRunner.run : r231 = staticinvoke <org.apache.commons.io.FileUtils: java.lang.String readFileToString(java.io.File)>($r59) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r60 = new java.lang.StringBuilder]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r60 = new java.lang.StringBuilder] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r60 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSRunner.run : $r60 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r60.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r60.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r230)
org.apache.ambari.server.bootstrap.BSRunner.run : $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r230) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n")
org.apache.ambari.server.bootstrap.BSRunner.run : $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\n") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r231)
org.apache.ambari.server.bootstrap.BSRunner.run : $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r231) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r165 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r165 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if z17 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if z17 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r65 = <org.apache.ambari.server.bootstrap.BSRunner: org.slf4j.Logger LOG>
org.apache.ambari.server.bootstrap.BSRunner.run : $r65 = <org.apache.ambari.server.bootstrap.BSRunner: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r64 = new java.lang.StringBuilder
org.apache.ambari.server.bootstrap.BSRunner.run : $r64 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r64.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r64.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r66 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Script log Mesg ")
org.apache.ambari.server.bootstrap.BSRunner.run : $r66 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Script log Mesg ") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r165)
org.apache.ambari.server.bootstrap.BSRunner.run : $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r165) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke $r65.<org.slf4j.Logger: void info(java.lang.String)>($r68)
org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke $r65.<org.slf4j.Logger: void info(java.lang.String)>($r68) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if i18 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if i18 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r164 = <org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat: org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat SUCCESS>
org.apache.ambari.server.bootstrap.BSRunner.run : r164 = <org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat: org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat SUCCESS> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r69 = new org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector
org.apache.ambari.server.bootstrap.BSRunner.run : $r69 = new org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r69.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: void <init>(org.apache.ambari.server.bootstrap.BSRunner,org.apache.ambari.server.bootstrap.BSRunner$1)>(r0, null)
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r69.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: void <init>(org.apache.ambari.server.bootstrap.BSRunner,org.apache.ambari.server.bootstrap.BSRunner$1)>(r0, null) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r70 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>
org.apache.ambari.server.bootstrap.BSRunner.run : $r70 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke r2.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r69, 0L, $r70)
org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke r2.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r69, 0L, $r70) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : l19 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.ambari.server.bootstrap.BSRunner.run : l19 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r233 = <org.apache.ambari.server.bootstrap.BSRunner: org.slf4j.Logger LOG>
org.apache.ambari.server.bootstrap.BSRunner.run : $r233 = <org.apache.ambari.server.bootstrap.BSRunner: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $z18 = interfaceinvoke $r233.<org.slf4j.Logger: boolean isDebugEnabled()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $z18 = interfaceinvoke $r233.<org.slf4j.Logger: boolean isDebugEnabled()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $z18 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $z18 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : z19 = 0
org.apache.ambari.server.bootstrap.BSRunner.run : z19 = 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r71 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl>
org.apache.ambari.server.bootstrap.BSRunner.run : $r71 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $i2 = r0.<org.apache.ambari.server.bootstrap.BSRunner: int requestId>
org.apache.ambari.server.bootstrap.BSRunner.run : $i2 = r0.<org.apache.ambari.server.bootstrap.BSRunner: int requestId> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $l3 = (long) $i2
org.apache.ambari.server.bootstrap.BSRunner.run : $l3 = (long) $i2 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r8 = virtualinvoke $r71.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BootStrapStatus getStatus(long)>($l3)
org.apache.ambari.server.bootstrap.BSRunner.run : r8 = virtualinvoke $r71.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BootStrapStatus getStatus(long)>($l3) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r9 = virtualinvoke r8.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.util.List getHostsStatus()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r9 = virtualinvoke r8.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.util.List getHostsStatus()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapStatus.getHostsStatus : $r1 = r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.util.List hostsStatus>
org.apache.ambari.server.bootstrap.BootStrapStatus.getHostsStatus : $r1 = r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.util.List hostsStatus> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapStatus.getHostsStatus : return $r1
org.apache.ambari.server.bootstrap.BootStrapStatus.getHostsStatus : return $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if r9 == null
org.apache.ambari.server.bootstrap.BSRunner.run : if r9 == null >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r234 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r234 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $z6 = interfaceinvoke r234.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $z6 = interfaceinvoke r234.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $z6 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $z6 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r87 = interfaceinvoke r234.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r87 = interfaceinvoke r234.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r10 = (org.apache.ambari.server.bootstrap.BSHostStatus) $r87
org.apache.ambari.server.bootstrap.BSRunner.run : r10 = (org.apache.ambari.server.bootstrap.BSHostStatus) $r87 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r88 = virtualinvoke r10.<org.apache.ambari.server.bootstrap.BSHostStatus: java.lang.String getStatus()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r88 = virtualinvoke r10.<org.apache.ambari.server.bootstrap.BSHostStatus: java.lang.String getStatus()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatus.getStatus : $r1 = r0.<org.apache.ambari.server.bootstrap.BSHostStatus: java.lang.String status>
org.apache.ambari.server.bootstrap.BSHostStatus.getStatus : $r1 = r0.<org.apache.ambari.server.bootstrap.BSHostStatus: java.lang.String status> >>>>>>>> org.apache.ambari.server.bootstrap.BSHostStatus.getStatus : return $r1
org.apache.ambari.server.bootstrap.BSHostStatus.getStatus : return $r1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $z7 = virtualinvoke $r88.<java.lang.String: boolean equals(java.lang.Object)>("RUNNING")
org.apache.ambari.server.bootstrap.BSRunner.run : $z7 = virtualinvoke $r88.<java.lang.String: boolean equals(java.lang.Object)>("RUNNING") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $z7 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $z7 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : z19 = 1
org.apache.ambari.server.bootstrap.BSRunner.run : z19 = 1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $z6 = interfaceinvoke r234.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $z6 = interfaceinvoke r234.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r72 = <org.apache.ambari.server.bootstrap.BSRunner: org.slf4j.Logger LOG>]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r72 = <org.apache.ambari.server.bootstrap.BSRunner: org.slf4j.Logger LOG>] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r72 = <org.apache.ambari.server.bootstrap.BSRunner: org.slf4j.Logger LOG>
org.apache.ambari.server.bootstrap.BSRunner.run : $r72 = <org.apache.ambari.server.bootstrap.BSRunner: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $z3 = interfaceinvoke $r72.<org.slf4j.Logger: boolean isDebugEnabled()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $z3 = interfaceinvoke $r72.<org.slf4j.Logger: boolean isDebugEnabled()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $z3 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $z3 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if z19 != 0
org.apache.ambari.server.bootstrap.BSRunner.run : if z19 != 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : staticinvoke <java.lang.Thread: void sleep(long)>(1000L)
org.apache.ambari.server.bootstrap.BSRunner.run : staticinvoke <java.lang.Thread: void sleep(long)>(1000L) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= l20 = staticinvoke <java.lang.System: long currentTimeMillis()>()]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= l20 = staticinvoke <java.lang.System: long currentTimeMillis()>()] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : l20 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.ambari.server.bootstrap.BSRunner.run : l20 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $l4 = l19 + 15000L
org.apache.ambari.server.bootstrap.BSRunner.run : $l4 = l19 + 15000L >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $b5 = l20 cmp $l4
org.apache.ambari.server.bootstrap.BSRunner.run : $b5 = l20 cmp $l4 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $b5 < 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $b5 < 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r233 = <org.apache.ambari.server.bootstrap.BSRunner: org.slf4j.Logger LOG>]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r233 = <org.apache.ambari.server.bootstrap.BSRunner: org.slf4j.Logger LOG>] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r73 = <org.apache.ambari.server.bootstrap.BSRunner: org.slf4j.Logger LOG>
org.apache.ambari.server.bootstrap.BSRunner.run : $r73 = <org.apache.ambari.server.bootstrap.BSRunner: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke $r73.<org.slf4j.Logger: void warn(java.lang.String)>("Gave up waiting for hosts status to be updated")
org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke $r73.<org.slf4j.Logger: void warn(java.lang.String)>("Gave up waiting for hosts status to be updated") >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= (branch)]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if r167 == null
org.apache.ambari.server.bootstrap.BSRunner.run : if r167 == null >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke r167.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(1)
org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke r167.<java.util.concurrent.ScheduledFuture: boolean cancel(boolean)>(1) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r74 = new org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector
org.apache.ambari.server.bootstrap.BSRunner.run : $r74 = new org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r74.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: void <init>(org.apache.ambari.server.bootstrap.BSRunner,org.apache.ambari.server.bootstrap.BSRunner$1)>(r0, null)
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r74.<org.apache.ambari.server.bootstrap.BSRunner$BSStatusCollector: void <init>(org.apache.ambari.server.bootstrap.BSRunner,org.apache.ambari.server.bootstrap.BSRunner$1)>(r0, null) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r75 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>
org.apache.ambari.server.bootstrap.BSRunner.run : $r75 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke r2.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r74, 0L, $r75)
org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke r2.<java.util.concurrent.ScheduledExecutorService: java.util.concurrent.ScheduledFuture schedule(java.lang.Runnable,long,java.util.concurrent.TimeUnit)>($r74, 0L, $r75) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke r2.<java.util.concurrent.ScheduledExecutorService: java.util.List shutdownNow()>()
org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke r2.<java.util.concurrent.ScheduledExecutorService: java.util.List shutdownNow()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r76 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS>
org.apache.ambari.server.bootstrap.BSRunner.run : $r76 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke r2.<java.util.concurrent.ScheduledExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(10L, $r76)
org.apache.ambari.server.bootstrap.BSRunner.run : interfaceinvoke r2.<java.util.concurrent.ScheduledExecutorService: boolean awaitTermination(long,java.util.concurrent.TimeUnit)>(10L, $r76) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= virtualinvoke r7.<java.lang.Process: void destroy()>()]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= virtualinvoke r7.<java.lang.Process: void destroy()>()] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke r7.<java.lang.Process: void destroy()>()
org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke r7.<java.lang.Process: void destroy()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r77 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl>]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r77 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl>] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r77 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl>
org.apache.ambari.server.bootstrap.BSRunner.run : $r77 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $i6 = r0.<org.apache.ambari.server.bootstrap.BSRunner: int requestId>
org.apache.ambari.server.bootstrap.BSRunner.run : $i6 = r0.<org.apache.ambari.server.bootstrap.BSRunner: int requestId> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $l7 = (long) $i6
org.apache.ambari.server.bootstrap.BSRunner.run : $l7 = (long) $i6 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r236 = virtualinvoke $r77.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BootStrapStatus getStatus(long)>($l7)
org.apache.ambari.server.bootstrap.BSRunner.run : r236 = virtualinvoke $r77.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BootStrapStatus getStatus(long)>($l7) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r237 = virtualinvoke r236.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.util.List getHostsStatus()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r237 = virtualinvoke r236.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.util.List getHostsStatus()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if r237 == null
org.apache.ambari.server.bootstrap.BSRunner.run : if r237 == null >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r238 = interfaceinvoke r237.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.bootstrap.BSRunner.run : r238 = interfaceinvoke r237.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $z4 = interfaceinvoke r238.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $z4 = interfaceinvoke r238.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $z4 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $z4 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r82 = interfaceinvoke r238.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r82 = interfaceinvoke r238.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : r239 = (org.apache.ambari.server.bootstrap.BSHostStatus) $r82
org.apache.ambari.server.bootstrap.BSRunner.run : r239 = (org.apache.ambari.server.bootstrap.BSHostStatus) $r82 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r83 = "FAILED"
org.apache.ambari.server.bootstrap.BSRunner.run : $r83 = "FAILED" >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r84 = virtualinvoke r239.<org.apache.ambari.server.bootstrap.BSHostStatus: java.lang.String getStatus()>()
org.apache.ambari.server.bootstrap.BSRunner.run : $r84 = virtualinvoke r239.<org.apache.ambari.server.bootstrap.BSHostStatus: java.lang.String getStatus()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $z5 = virtualinvoke $r83.<java.lang.String: boolean equals(java.lang.Object)>($r84)
org.apache.ambari.server.bootstrap.BSRunner.run : $z5 = virtualinvoke $r83.<java.lang.String: boolean equals(java.lang.Object)>($r84) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $z5 == 0
org.apache.ambari.server.bootstrap.BSRunner.run : if $z5 == 0 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $z4 = interfaceinvoke r238.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $z4 = interfaceinvoke r238.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r78 = new org.apache.ambari.server.bootstrap.BootStrapStatus]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r78 = new org.apache.ambari.server.bootstrap.BootStrapStatus] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r78 = new org.apache.ambari.server.bootstrap.BootStrapStatus
org.apache.ambari.server.bootstrap.BSRunner.run : $r78 = new org.apache.ambari.server.bootstrap.BootStrapStatus >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r78.<org.apache.ambari.server.bootstrap.BootStrapStatus: void <init>()>()
org.apache.ambari.server.bootstrap.BSRunner.run : specialinvoke $r78.<org.apache.ambari.server.bootstrap.BootStrapStatus: void <init>()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke $r78.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setHostsStatus(java.util.List)>(r237)
org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke $r78.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setHostsStatus(java.util.List)>(r237) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke $r78.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setLog(java.lang.String)>(r165)
org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke $r78.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setLog(java.lang.String)>(r165) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke $r78.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setStatus(org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat)>(r164)
org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke $r78.<org.apache.ambari.server.bootstrap.BootStrapStatus: void setStatus(org.apache.ambari.server.bootstrap.BootStrapStatus$BSStat)>(r164) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r79 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File sshKeyFile>
org.apache.ambari.server.bootstrap.BSRunner.run : $r79 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File sshKeyFile> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>($r79)
org.apache.ambari.server.bootstrap.BSRunner.run : staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>($r79) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r80 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile>]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r80 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile>] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r80 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile>
org.apache.ambari.server.bootstrap.BSRunner.run : $r80 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : if $r80 == null
org.apache.ambari.server.bootstrap.BSRunner.run : if $r80 == null >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r81 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile>
org.apache.ambari.server.bootstrap.BSRunner.run : $r81 = r0.<org.apache.ambari.server.bootstrap.BSRunner: java.io.File passwordFile> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>($r81)
org.apache.ambari.server.bootstrap.BSRunner.run : staticinvoke <org.apache.commons.io.FileUtils: void forceDelete(java.io.File)>($r81) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r243 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl>]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= $r243 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl>] >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r243 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl>
org.apache.ambari.server.bootstrap.BSRunner.run : $r243 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $i21 = r0.<org.apache.ambari.server.bootstrap.BSRunner: int requestId>
org.apache.ambari.server.bootstrap.BSRunner.run : $i21 = r0.<org.apache.ambari.server.bootstrap.BSRunner: int requestId> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $l22 = (long) $i21
org.apache.ambari.server.bootstrap.BSRunner.run : $l22 = (long) $i21 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke $r243.<org.apache.ambari.server.bootstrap.BootStrapImpl: void updateStatus(long,org.apache.ambari.server.bootstrap.BootStrapStatus)>($l22, $r78)
org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke $r243.<org.apache.ambari.server.bootstrap.BootStrapImpl: void updateStatus(long,org.apache.ambari.server.bootstrap.BootStrapStatus)>($l22, $r78) >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : $r244 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl>
org.apache.ambari.server.bootstrap.BSRunner.run : $r244 = r0.<org.apache.ambari.server.bootstrap.BSRunner: org.apache.ambari.server.bootstrap.BootStrapImpl bsImpl> >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke $r244.<org.apache.ambari.server.bootstrap.BootStrapImpl: void reset()>()
org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke $r244.<org.apache.ambari.server.bootstrap.BootStrapImpl: void reset()>() >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapImpl.reset : r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BSRunner bsRunner> = null
org.apache.ambari.server.bootstrap.BootStrapImpl.reset : r0.<org.apache.ambari.server.bootstrap.BootStrapImpl: org.apache.ambari.server.bootstrap.BSRunner bsRunner> = null >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: void finished()>()
org.apache.ambari.server.bootstrap.BSRunner.run : virtualinvoke r0.<org.apache.ambari.server.bootstrap.BSRunner: void finished()>() >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.finished : r0.<org.apache.ambari.server.bootstrap.BSRunner: boolean finished> = 1
org.apache.ambari.server.bootstrap.BSRunner.finished : r0.<org.apache.ambari.server.bootstrap.BSRunner: boolean finished> = 1 >>>>>>>> org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= return]
org.apache.ambari.server.bootstrap.BSRunner.run : goto [?= return] >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapStatus.getLog : $r1 = r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.lang.String log>
org.apache.ambari.server.bootstrap.BootStrapStatus.getLog : $r1 = r0.<org.apache.ambari.server.bootstrap.BootStrapStatus: java.lang.String log> >>>>>>>> org.apache.ambari.server.bootstrap.BootStrapStatus.getLog : return $r1
