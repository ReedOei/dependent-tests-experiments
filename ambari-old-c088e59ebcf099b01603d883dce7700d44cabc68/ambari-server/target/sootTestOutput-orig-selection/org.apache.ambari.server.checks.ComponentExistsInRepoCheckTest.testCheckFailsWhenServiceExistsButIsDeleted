org.apache.ambari.server.state.StackId.parseStackIdHelper : if r2 == null >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if $z0 == 0
org.apache.ambari.server.state.StackId.parseStackIdHelper : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45)
org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1
org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i1 = virtualinvoke r2.<java.lang.String: int length()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i1 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i2 = i0 + 1
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i2 = i0 + 1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if $i1 > $i2
org.apache.ambari.server.state.StackId.parseStackIdHelper : if $i1 > $i2 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0)
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = $r8
org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = $r8 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3)
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> = $r9
org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> = $r9 >>>>>>>> org.apache.ambari.server.state.StackId.getStackName : $r1 = r0.<org.apache.ambari.server.state.StackId: java.lang.String stackName>
org.apache.ambari.server.state.StackId.getStackName : $r1 = r0.<org.apache.ambari.server.state.StackId: java.lang.String stackName> >>>>>>>> org.apache.ambari.server.state.StackId.getStackName : return $r1
org.apache.ambari.server.state.StackId.getStackName : return $r1 >>>>>>>> org.apache.ambari.server.state.StackId.getStackVersion : $r1 = r0.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion>
org.apache.ambari.server.state.StackId.getStackVersion : $r1 = r0.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> >>>>>>>> org.apache.ambari.server.state.StackId.getStackVersion : return $r1
org.apache.ambari.server.state.StackId.getStackVersion : return $r1 >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.setSourceStackId : r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId m_sourceStackId> = r1
org.apache.ambari.server.controller.PrereqCheckRequest.setSourceStackId : r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId m_sourceStackId> = r1 >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.setTargetRepositoryVersion : r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity m_targetRepositoryVersion> = r1
org.apache.ambari.server.controller.PrereqCheckRequest.setTargetRepositoryVersion : r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity m_targetRepositoryVersion> = r1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r5 = newarray (org.apache.ambari.server.checks.AbstractCheckDescriptor$CheckQualification)[2]
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r5 = newarray (org.apache.ambari.server.checks.AbstractCheckDescriptor$CheckQualification)[2] >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r6 = new org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r6 = new org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : specialinvoke $r6.<org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification: void <init>(org.apache.ambari.server.checks.AbstractCheckDescriptor)>(r0)
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : specialinvoke $r6.<org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification: void <init>(org.apache.ambari.server.checks.AbstractCheckDescriptor)>(r0) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r5[0] = $r6
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r5[0] = $r6 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r7 = new org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r7 = new org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : specialinvoke $r7.<org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification: void <init>(org.apache.ambari.server.checks.AbstractCheckDescriptor,java.lang.Class)>(r0, $r8)
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : specialinvoke $r7.<org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification: void <init>(org.apache.ambari.server.checks.AbstractCheckDescriptor,java.lang.Class)>(r0, $r8) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r5[1] = $r7
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r5[1] = $r7 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>($r5)
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r2 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>($r5) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r9 = virtualinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.util.List getQualifications()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r9 = virtualinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.util.List getQualifications()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getQualifications : $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getQualifications : $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getQualifications : return $r1
org.apache.ambari.server.checks.AbstractCheckDescriptor.getQualifications : return $r1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>($r9)
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : interfaceinvoke r2.<java.util.List: boolean addAll(java.util.Collection)>($r9) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z1 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z1 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r4 = (org.apache.ambari.server.checks.AbstractCheckDescriptor$CheckQualification) $r10
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r4 = (org.apache.ambari.server.checks.AbstractCheckDescriptor$CheckQualification) $r10 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z2 = interfaceinvoke r4.<org.apache.ambari.server.checks.AbstractCheckDescriptor$CheckQualification: boolean isApplicable(org.apache.ambari.server.controller.PrereqCheckRequest)>(r1)
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z2 = interfaceinvoke r4.<org.apache.ambari.server.checks.AbstractCheckDescriptor$CheckQualification: boolean isApplicable(org.apache.ambari.server.controller.PrereqCheckRequest)>(r1) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : $r6 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification: org.apache.ambari.server.checks.AbstractCheckDescriptor this$0>
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : $r6 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification: org.apache.ambari.server.checks.AbstractCheckDescriptor this$0> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : r2 = virtualinvoke $r6.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.util.Set getApplicableServices()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : r2 = virtualinvoke $r6.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.util.Set getApplicableServices()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getApplicableServices : $r1 = staticinvoke <java.util.Collections: java.util.Set emptySet()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getApplicableServices : $r1 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getApplicableServices : return $r1
org.apache.ambari.server.checks.AbstractCheckDescriptor.getApplicableServices : return $r1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : $z0 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : $z0 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : if $z0 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : return 1
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : return 1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z2 != 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : if $z2 != 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : r2 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : r2 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity m_targetRepositoryVersion>
org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity m_targetRepositoryVersion> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : return $r1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : r3 = virtualinvoke r2.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.state.RepositoryType getType()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : r3 = virtualinvoke r2.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.state.RepositoryType getType()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : $r6 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification: java.lang.Class m_checkClass>
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : $r6 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification: java.lang.Class m_checkClass> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/ambari/server/checks/UpgradeCheck;")
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/apache/ambari/server/checks/UpgradeCheck;") >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : r4 = (org.apache.ambari.server.checks.UpgradeCheck) $r7
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : r4 = (org.apache.ambari.server.checks.UpgradeCheck) $r7 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : if null != r4
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : if null != r4 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : r5 = interfaceinvoke r4.<org.apache.ambari.server.checks.UpgradeCheck: org.apache.ambari.server.state.RepositoryType[] orchestration()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : r5 = interfaceinvoke r4.<org.apache.ambari.server.checks.UpgradeCheck: org.apache.ambari.server.state.RepositoryType[] orchestration()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : $z0 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r5)
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : $z0 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean isEmpty(java.lang.Object[])>(r5) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : if $z0 != 0
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : if $z0 != 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : $z1 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(r5, r3)
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : $z1 = staticinvoke <org.apache.commons.lang.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)>(r5, r3) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : if $z1 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : if $z1 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : return 1
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : return 1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : return 1
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : return 1 >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : r3 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>()
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : r3 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName>
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1 >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r15 = r0.<org.apache.ambari.server.checks.ComponentsExistInRepoCheck: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r15 = r0.<org.apache.ambari.server.checks.ComponentsExistInRepoCheck: com.google.inject.Provider clustersProvider> >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r16 = interfaceinvoke $r15.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r16 = interfaceinvoke $r15.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$1: org.apache.ambari.server.state.Clusters get()>()
org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$1: org.apache.ambari.server.state.Clusters get()>() >>>>>>>> org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$1: org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest this$0>
org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$1: org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest this$0> >>>>>>>> org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$1.get : $r2 = staticinvoke <org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest: org.apache.ambari.server.state.Clusters access$000(org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest)>($r1)
org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$1.get : $r2 = staticinvoke <org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest: org.apache.ambari.server.state.Clusters access$000(org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest)>($r1) >>>>>>>> org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest: org.apache.ambari.server.state.Clusters m_clusters>
org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest: org.apache.ambari.server.state.Clusters m_clusters> >>>>>>>> org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest.access$000 : return $r1
org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest.access$000 : return $r1 >>>>>>>> org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$1.get : return $r2
org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$1.get : return $r2 >>>>>>>> org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$1.get : return $r1
org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$1.get : return $r1 >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r17 = (org.apache.ambari.server.state.Clusters) $r16
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r17 = (org.apache.ambari.server.state.Clusters) $r16 >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : r4 = interfaceinvoke $r17.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r3)
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : r4 = interfaceinvoke $r17.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : r5 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>()
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : r5 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>() >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : r6 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId getSourceStackId()>()
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : r6 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId getSourceStackId()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getSourceStackId : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId m_sourceStackId>
org.apache.ambari.server.controller.PrereqCheckRequest.getSourceStackId : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId m_sourceStackId> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getSourceStackId : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getSourceStackId : return $r1 >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : r7 = virtualinvoke r5.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.state.StackId getStackId()>()
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : r7 = virtualinvoke r5.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.state.StackId getStackId()>() >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r18 = new java.util.TreeSet
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r18 = new java.util.TreeSet >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : specialinvoke $r18.<java.util.TreeSet: void <init>()>()
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : specialinvoke $r18.<java.util.TreeSet: void <init>()>() >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r19 = new java.util.TreeSet
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r19 = new java.util.TreeSet >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : specialinvoke $r19.<java.util.TreeSet: void <init>()>()
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : specialinvoke $r19.<java.util.TreeSet: void <init>()>() >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : r10 = virtualinvoke r0.<org.apache.ambari.server.checks.ComponentsExistInRepoCheck: java.util.Set getServicesInUpgrade(org.apache.ambari.server.controller.PrereqCheckRequest)>(r2)
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : r10 = virtualinvoke r0.<org.apache.ambari.server.checks.ComponentsExistInRepoCheck: java.util.Set getServicesInUpgrade(org.apache.ambari.server.controller.PrereqCheckRequest)>(r2) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r4 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r4 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: com.google.inject.Provider clustersProvider> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r5 = interfaceinvoke $r4.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r5 = interfaceinvoke $r4.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r6 = (org.apache.ambari.server.state.Clusters) $r5
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r6 = (org.apache.ambari.server.state.Clusters) $r5 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r7 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r7 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : r2 = interfaceinvoke $r6.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>($r7)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : r2 = interfaceinvoke $r6.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>($r7) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : r11 = virtualinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.state.repository.VersionDefinitionXml getVersionDefinitionXml(org.apache.ambari.server.controller.PrereqCheckRequest)>(r1)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : r11 = virtualinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.state.repository.VersionDefinitionXml getVersionDefinitionXml(org.apache.ambari.server.controller.PrereqCheckRequest)>(r1) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : r2 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : r2 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : r5 = virtualinvoke r2.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.state.repository.VersionDefinitionXml getRepositoryXml()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : r5 = virtualinvoke r2.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.state.repository.VersionDefinitionXml getRepositoryXml()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : return r5
org.apache.ambari.server.checks.AbstractCheckDescriptor.getVersionDefinitionXml : return r5 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : r3 = virtualinvoke r11.<org.apache.ambari.server.state.repository.VersionDefinitionXml: org.apache.ambari.server.state.repository.ClusterVersionSummary getClusterSummary(org.apache.ambari.server.state.Cluster)>(r2)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : r3 = virtualinvoke r11.<org.apache.ambari.server.state.repository.VersionDefinitionXml: org.apache.ambari.server.state.repository.ClusterVersionSummary getClusterSummary(org.apache.ambari.server.state.Cluster)>(r2) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r8 = virtualinvoke r3.<org.apache.ambari.server.state.repository.ClusterVersionSummary: java.util.Set getAvailableServiceNames()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : $r8 = virtualinvoke r3.<org.apache.ambari.server.state.repository.ClusterVersionSummary: java.util.Set getAvailableServiceNames()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : return $r8
org.apache.ambari.server.checks.AbstractCheckDescriptor.getServicesInUpgrade : return $r8 >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : r44 = interfaceinvoke r10.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : r44 = interfaceinvoke r10.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $z15 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $z15 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : if $z15 == 0
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : if $z15 == 0 >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r29 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r29 = interfaceinvoke r44.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : r45 = (java.lang.String) $r29
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : r45 = (java.lang.String) $r29 >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r30 = r0.<org.apache.ambari.server.checks.ComponentsExistInRepoCheck: com.google.inject.Provider ambariMetaInfo>
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r30 = r0.<org.apache.ambari.server.checks.ComponentsExistInRepoCheck: com.google.inject.Provider ambariMetaInfo> >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r31 = interfaceinvoke $r30.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r31 = interfaceinvoke $r30.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$2.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$2: org.apache.ambari.server.api.services.AmbariMetaInfo get()>()
org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$2.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$2: org.apache.ambari.server.api.services.AmbariMetaInfo get()>() >>>>>>>> org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$2.get : $r1 = r0.<org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$2: org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest this$0>
org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$2.get : $r1 = r0.<org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$2: org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest this$0> >>>>>>>> org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$2.get : $r2 = staticinvoke <org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest: org.apache.ambari.server.api.services.AmbariMetaInfo access$100(org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest)>($r1)
org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$2.get : $r2 = staticinvoke <org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest: org.apache.ambari.server.api.services.AmbariMetaInfo access$100(org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest)>($r1) >>>>>>>> org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest.access$100 : $r1 = r0.<org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest: org.apache.ambari.server.api.services.AmbariMetaInfo m_ambariMetaInfo>
org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest.access$100 : $r1 = r0.<org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest: org.apache.ambari.server.api.services.AmbariMetaInfo m_ambariMetaInfo> >>>>>>>> org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest.access$100 : return $r1
org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest.access$100 : return $r1 >>>>>>>> org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$2.get : return $r2
org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$2.get : return $r2 >>>>>>>> org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$2.get : return $r1
org.apache.ambari.server.checks.ComponentExistsInRepoCheckTest$2.get : return $r1 >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r32 = (org.apache.ambari.server.api.services.AmbariMetaInfo) $r31
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r32 = (org.apache.ambari.server.api.services.AmbariMetaInfo) $r31 >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r33 = virtualinvoke r7.<org.apache.ambari.server.state.StackId: java.lang.String getStackName()>()
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r33 = virtualinvoke r7.<org.apache.ambari.server.state.StackId: java.lang.String getStackName()>() >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r34 = virtualinvoke r7.<org.apache.ambari.server.state.StackId: java.lang.String getStackVersion()>()
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r34 = virtualinvoke r7.<org.apache.ambari.server.state.StackId: java.lang.String getStackVersion()>() >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : r46 = virtualinvoke $r32.<org.apache.ambari.server.api.services.AmbariMetaInfo: org.apache.ambari.server.state.ServiceInfo getService(java.lang.String,java.lang.String,java.lang.String)>($r33, $r34, r45)
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : r46 = virtualinvoke $r32.<org.apache.ambari.server.api.services.AmbariMetaInfo: org.apache.ambari.server.state.ServiceInfo getService(java.lang.String,java.lang.String,java.lang.String)>($r33, $r34, r45) >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $z7 = virtualinvoke r46.<org.apache.ambari.server.state.ServiceInfo: boolean isDeleted()>()
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $z7 = virtualinvoke r46.<org.apache.ambari.server.state.ServiceInfo: boolean isDeleted()>() >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : if $z7 != 0
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : if $z7 != 0 >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : interfaceinvoke $r18.<java.util.Set: boolean add(java.lang.Object)>(r45)
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : interfaceinvoke $r18.<java.util.Set: boolean add(java.lang.Object)>(r45) >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : goto [?= $z15 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : goto [?= $z15 = interfaceinvoke r44.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $z0 = interfaceinvoke $r18.<java.util.Set: boolean isEmpty()>()
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $z0 = interfaceinvoke $r18.<java.util.Set: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : if $z0 == 0
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r20 = new java.util.LinkedHashSet
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r20 = new java.util.LinkedHashSet >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : specialinvoke $r20.<java.util.LinkedHashSet: void <init>()>()
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : specialinvoke $r20.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : virtualinvoke $r20.<java.util.LinkedHashSet: boolean addAll(java.util.Collection)>($r18)
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : virtualinvoke $r20.<java.util.LinkedHashSet: boolean addAll(java.util.Collection)>($r18) >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : virtualinvoke $r20.<java.util.LinkedHashSet: boolean addAll(java.util.Collection)>($r19)
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : virtualinvoke $r20.<java.util.LinkedHashSet: boolean addAll(java.util.Collection)>($r19) >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailedOn(java.util.LinkedHashSet)>($r20)
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailedOn(java.util.LinkedHashSet)>($r20) >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.setFailedOn : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet m_failedOn> = r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.setFailedOn : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet m_failedOn> = r1 >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r21 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus FAIL>
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r21 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus FAIL> >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setStatus(org.apache.ambari.server.state.stack.PrereqCheckStatus)>($r21)
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setStatus(org.apache.ambari.server.state.stack.PrereqCheckStatus)>($r21) >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.setStatus : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> = r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.setStatus : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> = r1 >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : r52 = ""
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : r52 = "" >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $z3 = interfaceinvoke $r18.<java.util.Set: boolean isEmpty()>()
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $z3 = interfaceinvoke $r18.<java.util.Set: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : if $z3 != 0
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : if $z3 != 0 >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : r52 = "services"
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : r52 = "services" >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $z4 = interfaceinvoke $r19.<java.util.Set: boolean isEmpty()>()
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $z4 = interfaceinvoke $r19.<java.util.Set: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : if $z4 != 0
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : if $z4 != 0 >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r53 = newarray (java.lang.Object)[3]
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r53 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r53[0] = r52
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r53[0] = r52 >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r53[1] = r6
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r53[1] = r6 >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r53[2] = r7
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : $r53[2] = r7 >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : r54 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>("The following {0} exist in {1} but are not included in {2}. They must be removed before upgrading.", $r53)
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : r54 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>("The following {0} exist in {1} but are not included in {2}. They must be removed before upgrading.", $r53) >>>>>>>> org.apache.ambari.server.state.StackId.toString : $r1 = virtualinvoke r0.<org.apache.ambari.server.state.StackId: java.lang.String getStackId()>()
org.apache.ambari.server.state.StackId.toString : $r1 = virtualinvoke r0.<org.apache.ambari.server.state.StackId: java.lang.String getStackId()>() >>>>>>>> org.apache.ambari.server.state.StackId.getStackId : $r1 = r0.<org.apache.ambari.server.state.StackId: java.lang.String stackName>
org.apache.ambari.server.state.StackId.getStackId : $r1 = r0.<org.apache.ambari.server.state.StackId: java.lang.String stackName> >>>>>>>> org.apache.ambari.server.state.StackId.getStackId : $z0 = virtualinvoke $r1.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.state.StackId.getStackId : $z0 = virtualinvoke $r1.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.StackId.getStackId : if $z0 == 0
org.apache.ambari.server.state.StackId.getStackId : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.StackId.getStackId : $r2 = new java.lang.StringBuilder
org.apache.ambari.server.state.StackId.getStackId : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.state.StackId.getStackId : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.state.StackId.getStackId : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.state.StackId.getStackId : $r3 = r0.<org.apache.ambari.server.state.StackId: java.lang.String stackName>
org.apache.ambari.server.state.StackId.getStackId : $r3 = r0.<org.apache.ambari.server.state.StackId: java.lang.String stackName> >>>>>>>> org.apache.ambari.server.state.StackId.getStackId : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)
org.apache.ambari.server.state.StackId.getStackId : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) >>>>>>>> org.apache.ambari.server.state.StackId.getStackId : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-")
org.apache.ambari.server.state.StackId.getStackId : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-") >>>>>>>> org.apache.ambari.server.state.StackId.getStackId : $r6 = r0.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion>
org.apache.ambari.server.state.StackId.getStackId : $r6 = r0.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> >>>>>>>> org.apache.ambari.server.state.StackId.getStackId : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)
org.apache.ambari.server.state.StackId.getStackId : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) >>>>>>>> org.apache.ambari.server.state.StackId.getStackId : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.state.StackId.getStackId : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.StackId.getStackId : return $r8
org.apache.ambari.server.state.StackId.getStackId : return $r8 >>>>>>>> org.apache.ambari.server.state.StackId.toString : return $r1
org.apache.ambari.server.state.StackId.toString : return $r1 >>>>>>>> org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailReason(java.lang.String)>(r54)
org.apache.ambari.server.checks.ComponentsExistInRepoCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailReason(java.lang.String)>(r54) >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.setFailReason : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.lang.String m_failReason> = r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.setFailReason : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.lang.String m_failReason> = r1 >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status>
org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : return $r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : return $r1 >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet m_failedOn>
org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet m_failedOn> >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : return $r1
