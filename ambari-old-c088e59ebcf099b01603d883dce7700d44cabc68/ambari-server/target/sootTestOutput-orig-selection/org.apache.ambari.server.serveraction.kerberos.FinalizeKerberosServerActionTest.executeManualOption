org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r7 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : specialinvoke $r7.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : specialinvoke $r7.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r8 = virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Host;")
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r8 = virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Host;") >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("host1", $r8)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("host1", $r8) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r10 = virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/ServiceComponentHost;")
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r10 = virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/ServiceComponentHost;") >>>>>>>> org.apache.ambari.server.state.UpgradeState.values : $r0 = <org.apache.ambari.server.state.UpgradeState: org.apache.ambari.server.state.UpgradeState[] $VALUES>
org.apache.ambari.server.state.UpgradeState.values : $r0 = <org.apache.ambari.server.state.UpgradeState: org.apache.ambari.server.state.UpgradeState[] $VALUES> >>>>>>>> org.apache.ambari.server.state.UpgradeState.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
org.apache.ambari.server.state.UpgradeState.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.ambari.server.state.UpgradeState.values : $r2 = (org.apache.ambari.server.state.UpgradeState[]) $r1
org.apache.ambari.server.state.UpgradeState.values : $r2 = (org.apache.ambari.server.state.UpgradeState[]) $r1 >>>>>>>> org.apache.ambari.server.state.UpgradeState.values : return $r2
org.apache.ambari.server.state.UpgradeState.values : return $r2 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : r3 = (org.apache.ambari.server.state.ServiceComponentHost) $r10
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : r3 = (org.apache.ambari.server.state.ServiceComponentHost) $r10 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r11 = interfaceinvoke r3.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r11 = interfaceinvoke r3.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r12 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r11)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r12 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r11) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r13 = interfaceinvoke $r12.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("SERVICE1")
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r13 = interfaceinvoke $r12.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("SERVICE1") >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : interfaceinvoke $r13.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : interfaceinvoke $r13.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r15 = interfaceinvoke r3.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r15 = interfaceinvoke r3.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r16 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r15)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r16 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r15) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r17 = interfaceinvoke $r16.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("COMPONENT1A")
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r17 = interfaceinvoke $r16.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("COMPONENT1A") >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : interfaceinvoke $r17.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : interfaceinvoke $r17.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r19 = interfaceinvoke r3.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getHostName()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r19 = interfaceinvoke r3.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r20 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r19)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r20 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r19) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r21 = interfaceinvoke $r20.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("host1")
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r21 = interfaceinvoke $r20.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("host1") >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : interfaceinvoke $r21.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : interfaceinvoke $r21.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r23 = new java.util.ArrayList
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r23 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : specialinvoke $r23.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : specialinvoke $r23.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>(r3)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>(r3) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r24 = virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Cluster;")
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r24 = virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Cluster;") >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : r5 = (org.apache.ambari.server.state.Cluster) $r24
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : r5 = (org.apache.ambari.server.state.Cluster) $r24 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r25 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: java.lang.String getClusterName()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r25 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r26 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r25)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r26 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r25) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r27 = interfaceinvoke $r26.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r1)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r27 = interfaceinvoke $r26.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : interfaceinvoke $r27.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : interfaceinvoke $r27.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r29 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: java.util.List getServiceComponentHosts(java.lang.String)>("host1")
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r29 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: java.util.List getServiceComponentHosts(java.lang.String)>("host1") >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r30 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r29)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r30 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r29) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r31 = interfaceinvoke $r30.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r23)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r31 = interfaceinvoke $r30.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r23) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : interfaceinvoke $r31.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : interfaceinvoke $r31.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r33 = virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Clusters;")
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r33 = virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Clusters;") >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : r6 = (org.apache.ambari.server.state.Clusters) $r33
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : r6 = (org.apache.ambari.server.state.Clusters) $r33 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r34 = interfaceinvoke r6.<org.apache.ambari.server.state.Clusters: java.util.Map getHostsForCluster(java.lang.String)>(r1)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r34 = interfaceinvoke r6.<org.apache.ambari.server.state.Clusters: java.util.Map getHostsForCluster(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r35 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r34)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r35 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r34) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r36 = interfaceinvoke $r35.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r7)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r36 = interfaceinvoke $r35.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r7) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : interfaceinvoke $r36.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : interfaceinvoke $r36.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r38 = interfaceinvoke r6.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r1)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r38 = interfaceinvoke r6.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r39 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r38)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r39 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r38) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r40 = interfaceinvoke $r39.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r5)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r40 = interfaceinvoke $r39.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r5) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : interfaceinvoke $r40.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : interfaceinvoke $r40.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r42 = newarray (com.google.inject.Module)[1]
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r42 = newarray (com.google.inject.Module)[1] >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r43 = new org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r43 = new org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : specialinvoke $r43.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1: void <init>(org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest,org.apache.ambari.server.state.Clusters)>(r0, r6)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : specialinvoke $r43.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1: void <init>(org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest,org.apache.ambari.server.state.Clusters)>(r0, r6) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r42[0] = $r43
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r42[0] = $r43 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r44 = staticinvoke <com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Module[])>($r42)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : $r44 = staticinvoke <com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Module[])>($r42) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : $r1 = virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/controller/KerberosHelper;")
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : $r1 = virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/controller/KerberosHelper;") >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : $r2 = r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1: org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest this$0>
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : $r2 = r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1: org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest this$0> >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : $r3 = virtualinvoke $r2.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/controller/KerberosHelper;")
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : $r3 = virtualinvoke $r2.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/controller/KerberosHelper;") >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : interfaceinvoke $r1.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r3)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : interfaceinvoke $r1.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r3) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : $r4 = virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Clusters;")
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : $r4 = virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/state/Clusters;") >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : $r5 = r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1: org.apache.ambari.server.state.Clusters val$clusters>
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : $r5 = r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1: org.apache.ambari.server.state.Clusters val$clusters> >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : interfaceinvoke $r4.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r5)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : interfaceinvoke $r4.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r5) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : $r6 = virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/audit/AuditLogger;")
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : $r6 = virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/audit/AuditLogger;") >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : $r7 = r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1: org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest this$0>
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : $r7 = r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1: org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest this$0> >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : $r8 = virtualinvoke $r7.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/audit/AuditLogger;")
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : $r8 = virtualinvoke $r7.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/audit/AuditLogger;") >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : interfaceinvoke $r6.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r8)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : interfaceinvoke $r6.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r8) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : $r9 = virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Ljavax/persistence/EntityManager;")
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : $r9 = virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Ljavax/persistence/EntityManager;") >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : $r10 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lcom/google/inject/Provider;")
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : $r10 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lcom/google/inject/Provider;") >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : $r11 = (com.google.inject.Provider) $r10
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : $r11 = (com.google.inject.Provider) $r10 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : interfaceinvoke $r9.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder toProvider(com.google.inject.Provider)>($r11)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest$1.configure : interfaceinvoke $r9.<com.google.inject.binder.AnnotatedBindingBuilder: com.google.inject.binder.ScopedBindingBuilder toProvider(com.google.inject.Provider)>($r11) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : return $r44
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.setup : return $r44 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createDataDirectory : $r3 = r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest: org.junit.rules.TemporaryFolder folder>
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createDataDirectory : $r3 = r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest: org.junit.rules.TemporaryFolder folder> >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createDataDirectory : r1 = virtualinvoke $r3.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createDataDirectory : r1 = virtualinvoke $r3.<org.junit.rules.TemporaryFolder: java.io.File newFolder()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createDataDirectory : $r4 = new java.io.File
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createDataDirectory : $r4 = new java.io.File >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createDataDirectory : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, ".ambari__test")
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createDataDirectory : specialinvoke $r4.<java.io.File: void <init>(java.io.File,java.lang.String)>(r1, ".ambari__test") >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createDataDirectory : $z0 = virtualinvoke $r4.<java.io.File: boolean mkdir()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createDataDirectory : $z0 = virtualinvoke $r4.<java.io.File: boolean mkdir()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createDataDirectory : staticinvoke <junit.framework.Assert: void assertTrue(boolean)>($z0)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createDataDirectory : staticinvoke <junit.framework.Assert: void assertTrue(boolean)>($z0) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createDataDirectory : return $r4
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createDataDirectory : return $r4 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r4 = virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/agent/ExecutionCommand;")
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r4 = virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/agent/ExecutionCommand;") >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : r3 = (org.apache.ambari.server.agent.ExecutionCommand) $r4
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : r3 = (org.apache.ambari.server.agent.ExecutionCommand) $r4 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r5 = virtualinvoke r3.<org.apache.ambari.server.agent.ExecutionCommand: java.lang.String getClusterName()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r5 = virtualinvoke r3.<org.apache.ambari.server.agent.ExecutionCommand: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r6 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r5)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r6 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r5) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r7 = interfaceinvoke $r6.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r1)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r7 = interfaceinvoke $r6.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : interfaceinvoke $r7.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : interfaceinvoke $r7.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r9 = virtualinvoke r3.<org.apache.ambari.server.agent.ExecutionCommand: java.util.Map getCommandParams()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r9 = virtualinvoke r3.<org.apache.ambari.server.agent.ExecutionCommand: java.util.Map getCommandParams()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r10 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r9)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r10 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r9) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r11 = interfaceinvoke $r10.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r2)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r11 = interfaceinvoke $r10.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : interfaceinvoke $r11.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : interfaceinvoke $r11.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r13 = virtualinvoke r3.<org.apache.ambari.server.agent.ExecutionCommand: org.apache.ambari.server.RoleCommand getRoleCommand()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r13 = virtualinvoke r3.<org.apache.ambari.server.agent.ExecutionCommand: org.apache.ambari.server.RoleCommand getRoleCommand()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r14 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r13)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r14 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r13) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r15 = <org.apache.ambari.server.RoleCommand: org.apache.ambari.server.RoleCommand EXECUTE>
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r15 = <org.apache.ambari.server.RoleCommand: org.apache.ambari.server.RoleCommand EXECUTE> >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r16 = interfaceinvoke $r14.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r15)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r16 = interfaceinvoke $r14.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r15) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : interfaceinvoke $r16.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : interfaceinvoke $r16.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r18 = virtualinvoke r3.<org.apache.ambari.server.agent.ExecutionCommand: java.lang.String getRole()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r18 = virtualinvoke r3.<org.apache.ambari.server.agent.ExecutionCommand: java.lang.String getRole()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r19 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r18)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r19 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r18) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r20 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role AMBARI_SERVER_ACTION>
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r20 = <org.apache.ambari.server.Role: org.apache.ambari.server.Role AMBARI_SERVER_ACTION> >>>>>>>> org.apache.ambari.server.Role.valueOf : $r2 = <org.apache.ambari.server.Role: java.util.Map roles>
org.apache.ambari.server.Role.valueOf : $r2 = <org.apache.ambari.server.Role: java.util.Map roles> >>>>>>>> org.apache.ambari.server.Role.valueOf : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r0)
org.apache.ambari.server.Role.valueOf : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r0) >>>>>>>> org.apache.ambari.server.Role.valueOf : if $z0 == 0
org.apache.ambari.server.Role.valueOf : if $z0 == 0 >>>>>>>> org.apache.ambari.server.Role.valueOf : $r3 = new org.apache.ambari.server.Role
org.apache.ambari.server.Role.valueOf : $r3 = new org.apache.ambari.server.Role >>>>>>>> org.apache.ambari.server.Role.valueOf : specialinvoke $r3.<org.apache.ambari.server.Role: void <init>(java.lang.String)>(r0)
org.apache.ambari.server.Role.valueOf : specialinvoke $r3.<org.apache.ambari.server.Role: void <init>(java.lang.String)>(r0) >>>>>>>> org.apache.ambari.server.Role.valueOf : $r4 = <org.apache.ambari.server.Role: java.util.Map roles>
org.apache.ambari.server.Role.valueOf : $r4 = <org.apache.ambari.server.Role: java.util.Map roles> >>>>>>>> org.apache.ambari.server.Role.valueOf : interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r3)
org.apache.ambari.server.Role.valueOf : interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, $r3) >>>>>>>> org.apache.ambari.server.Role.valueOf : return $r3
org.apache.ambari.server.Role.valueOf : return $r3 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r21 = virtualinvoke $r20.<org.apache.ambari.server.Role: java.lang.String name()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r21 = virtualinvoke $r20.<org.apache.ambari.server.Role: java.lang.String name()>() >>>>>>>> org.apache.ambari.server.Role.name : $r1 = r0.<org.apache.ambari.server.Role: java.lang.String name>
org.apache.ambari.server.Role.name : $r1 = r0.<org.apache.ambari.server.Role: java.lang.String name> >>>>>>>> org.apache.ambari.server.Role.name : return $r1
org.apache.ambari.server.Role.name : return $r1 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r22 = interfaceinvoke $r19.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r21)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r22 = interfaceinvoke $r19.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r21) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : interfaceinvoke $r22.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : interfaceinvoke $r22.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r24 = virtualinvoke r3.<org.apache.ambari.server.agent.ExecutionCommand: java.util.Map getConfigurationTags()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r24 = virtualinvoke r3.<org.apache.ambari.server.agent.ExecutionCommand: java.util.Map getConfigurationTags()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r25 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r24)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r25 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r24) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r26 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r26 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r27 = interfaceinvoke $r25.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r26)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r27 = interfaceinvoke $r25.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r26) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : interfaceinvoke $r27.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : interfaceinvoke $r27.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r29 = virtualinvoke r3.<org.apache.ambari.server.agent.ExecutionCommand: java.lang.String getServiceName()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r29 = virtualinvoke r3.<org.apache.ambari.server.agent.ExecutionCommand: java.lang.String getServiceName()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r30 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r29)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r30 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r29) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r31 = <org.apache.ambari.server.controller.RootComponent: org.apache.ambari.server.controller.RootComponent AMBARI_SERVER>
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r31 = <org.apache.ambari.server.controller.RootComponent: org.apache.ambari.server.controller.RootComponent AMBARI_SERVER> >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r32 = virtualinvoke $r31.<org.apache.ambari.server.controller.RootComponent: java.lang.String name()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r32 = virtualinvoke $r31.<org.apache.ambari.server.controller.RootComponent: java.lang.String name()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r33 = interfaceinvoke $r30.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r32)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r33 = interfaceinvoke $r30.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r32) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : interfaceinvoke $r33.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : interfaceinvoke $r33.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $l0 = virtualinvoke r3.<org.apache.ambari.server.agent.ExecutionCommand: long getTaskId()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $l0 = virtualinvoke r3.<org.apache.ambari.server.agent.ExecutionCommand: long getTaskId()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r35 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r35 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r36 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r35)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r36 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r35) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r37 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3L)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r37 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3L) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r38 = interfaceinvoke $r36.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r37)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : $r38 = interfaceinvoke $r36.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r37) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : interfaceinvoke $r38.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : interfaceinvoke $r38.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : return r3
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockExecutionCommand : return r3 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $r2 = virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/actionmanager/HostRoleCommand;")
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $r2 = virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest: java.lang.Object createMock(java.lang.Class)>(class "Lorg/apache/ambari/server/actionmanager/HostRoleCommand;") >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : r1 = (org.apache.ambari.server.actionmanager.HostRoleCommand) $r2
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : r1 = (org.apache.ambari.server.actionmanager.HostRoleCommand) $r2 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $l0 = virtualinvoke r1.<org.apache.ambari.server.actionmanager.HostRoleCommand: long getRequestId()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $l0 = virtualinvoke r1.<org.apache.ambari.server.actionmanager.HostRoleCommand: long getRequestId()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $r4 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r3)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $r4 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r3) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $r6 = interfaceinvoke $r4.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r5)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $r6 = interfaceinvoke $r4.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r5) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : interfaceinvoke $r6.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : interfaceinvoke $r6.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $l1 = virtualinvoke r1.<org.apache.ambari.server.actionmanager.HostRoleCommand: long getStageId()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $l1 = virtualinvoke r1.<org.apache.ambari.server.actionmanager.HostRoleCommand: long getStageId()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $r9 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r8)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $r9 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r8) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(2L) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $r11 = interfaceinvoke $r9.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r10)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $r11 = interfaceinvoke $r9.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r10) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : interfaceinvoke $r11.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : interfaceinvoke $r11.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $l2 = virtualinvoke r1.<org.apache.ambari.server.actionmanager.HostRoleCommand: long getTaskId()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $l2 = virtualinvoke r1.<org.apache.ambari.server.actionmanager.HostRoleCommand: long getTaskId()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $r13 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l2) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $r14 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r13)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $r14 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r13) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3L)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $r15 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(3L) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $r16 = interfaceinvoke $r14.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r15)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : $r16 = interfaceinvoke $r14.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r15) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : interfaceinvoke $r16.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : interfaceinvoke $r16.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : return r1
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.createMockHostRoleCommand : return r1 >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.setExecutionCommand : r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.agent.ExecutionCommand executionCommand> = r1
org.apache.ambari.server.serveraction.AbstractServerAction.setExecutionCommand : r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.agent.ExecutionCommand executionCommand> = r1 >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.setHostRoleCommand : r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.actionmanager.HostRoleCommand hostRoleCommand> = r1
org.apache.ambari.server.serveraction.AbstractServerAction.setHostRoleCommand : r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.actionmanager.HostRoleCommand hostRoleCommand> = r1 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction.execute : r2 = virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction: java.lang.String getCommandParameterValue(java.lang.String)>("data_directory")
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction.execute : r2 = virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction: java.lang.String getCommandParameterValue(java.lang.String)>("data_directory") >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.getCommandParameterValue : r2 = virtualinvoke r0.<org.apache.ambari.server.serveraction.AbstractServerAction: java.util.Map getCommandParameters()>()
org.apache.ambari.server.serveraction.AbstractServerAction.getCommandParameterValue : r2 = virtualinvoke r0.<org.apache.ambari.server.serveraction.AbstractServerAction: java.util.Map getCommandParameters()>() >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.getCommandParameters : $r1 = r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.agent.ExecutionCommand executionCommand>
org.apache.ambari.server.serveraction.AbstractServerAction.getCommandParameters : $r1 = r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.agent.ExecutionCommand executionCommand> >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.getCommandParameters : if $r1 != null
org.apache.ambari.server.serveraction.AbstractServerAction.getCommandParameters : if $r1 != null >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.getCommandParameters : $r2 = r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.agent.ExecutionCommand executionCommand>
org.apache.ambari.server.serveraction.AbstractServerAction.getCommandParameters : $r2 = r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.agent.ExecutionCommand executionCommand> >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.getCommandParameters : $r3 = virtualinvoke $r2.<org.apache.ambari.server.agent.ExecutionCommand: java.util.Map getCommandParams()>()
org.apache.ambari.server.serveraction.AbstractServerAction.getCommandParameters : $r3 = virtualinvoke $r2.<org.apache.ambari.server.agent.ExecutionCommand: java.util.Map getCommandParams()>() >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.getCommandParameters : return $r3
org.apache.ambari.server.serveraction.AbstractServerAction.getCommandParameters : return $r3 >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.getCommandParameterValue : if r2 != null
org.apache.ambari.server.serveraction.AbstractServerAction.getCommandParameterValue : if r2 != null >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.getCommandParameterValue : $r3 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.ambari.server.serveraction.AbstractServerAction.getCommandParameterValue : $r3 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.getCommandParameterValue : $r4 = (java.lang.String) $r3
org.apache.ambari.server.serveraction.AbstractServerAction.getCommandParameterValue : $r4 = (java.lang.String) $r3 >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.getCommandParameterValue : return $r4
org.apache.ambari.server.serveraction.AbstractServerAction.getCommandParameterValue : return $r4 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction.execute : $r3 = virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction: java.util.Map getCommandParameters()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction.execute : $r3 = virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction: java.util.Map getCommandParameters()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction.execute : $r4 = staticinvoke <org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction: org.apache.ambari.server.serveraction.kerberos.KDCType getKDCType(java.util.Map)>($r3)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction.execute : $r4 = staticinvoke <org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction: org.apache.ambari.server.serveraction.kerberos.KDCType getKDCType(java.util.Map)>($r3) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.getKDCType : r1 = staticinvoke <org.apache.ambari.server.serveraction.kerberos.KerberosServerAction: java.lang.String getCommandParameterValue(java.util.Map,java.lang.String)>(r0, "kdc_type")
org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.getKDCType : r1 = staticinvoke <org.apache.ambari.server.serveraction.kerberos.KerberosServerAction: java.lang.String getCommandParameterValue(java.util.Map,java.lang.String)>(r0, "kdc_type") >>>>>>>> org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.getCommandParameterValue : if r0 == null
org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.getCommandParameterValue : if r0 == null >>>>>>>> org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.getCommandParameterValue : if r1 != null
org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.getCommandParameterValue : if r1 != null >>>>>>>> org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.getCommandParameterValue : $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.getCommandParameterValue : $r2 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.getCommandParameterValue : $r3 = (java.lang.String) $r2
org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.getCommandParameterValue : $r3 = (java.lang.String) $r2 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.getCommandParameterValue : return $r3
org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.getCommandParameterValue : return $r3 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.getKDCType : if r1 == null
org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.getKDCType : if r1 == null >>>>>>>> org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.getKDCType : $r2 = <org.apache.ambari.server.serveraction.kerberos.KDCType: org.apache.ambari.server.serveraction.kerberos.KDCType NONE>
org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.getKDCType : $r2 = <org.apache.ambari.server.serveraction.kerberos.KDCType: org.apache.ambari.server.serveraction.kerberos.KDCType NONE> >>>>>>>> org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.getKDCType : goto [?= return $r2]
org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.getKDCType : goto [?= return $r2] >>>>>>>> org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.getKDCType : return $r2
org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.getKDCType : return $r2 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction.execute : $r5 = <org.apache.ambari.server.serveraction.kerberos.KDCType: org.apache.ambari.server.serveraction.kerberos.KDCType NONE>
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction.execute : $r5 = <org.apache.ambari.server.serveraction.kerberos.KDCType: org.apache.ambari.server.serveraction.kerberos.KDCType NONE> >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction.execute : if $r4 == $r5
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction.execute : if $r4 == $r5 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction.execute : virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction: void deleteDataDirectory(java.lang.String)>(r2)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction.execute : virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction: void deleteDataDirectory(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : if r1 == null
org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : if r1 == null >>>>>>>> org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : $z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("/.ambari_")
org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : $z0 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("/.ambari_") >>>>>>>> org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : if $z0 == 0
org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : if $z0 == 0 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : $r6 = new java.io.File
org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : $r6 = new java.io.File >>>>>>>> org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>(r1)
org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : specialinvoke $r6.<java.io.File: void <init>(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : r3 = virtualinvoke $r6.<java.io.File: java.io.File getParentFile()>()
org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : r3 = virtualinvoke $r6.<java.io.File: java.io.File getParentFile()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : if r3 == null
org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : if r3 == null >>>>>>>> org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : $z1 = virtualinvoke $r6.<java.io.File: boolean isDirectory()>()
org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : $z1 = virtualinvoke $r6.<java.io.File: boolean isDirectory()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : if $z1 == 0
org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : if $z1 == 0 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : $z2 = virtualinvoke r3.<java.io.File: boolean isDirectory()>()
org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : $z2 = virtualinvoke r3.<java.io.File: boolean isDirectory()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : if $z2 == 0
org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : if $z2 == 0 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : $z3 = virtualinvoke r3.<java.io.File: boolean canWrite()>()
org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : $z3 = virtualinvoke r3.<java.io.File: boolean canWrite()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : if $z3 == 0
org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : if $z3 == 0 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r6)
org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : staticinvoke <org.apache.commons.io.FileUtils: void deleteDirectory(java.io.File)>($r6) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : goto [?= return]
org.apache.ambari.server.serveraction.kerberos.KerberosServerAction.deleteDataDirectory : goto [?= return] >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction.execute : $r7 = <org.apache.ambari.server.actionmanager.HostRoleStatus: org.apache.ambari.server.actionmanager.HostRoleStatus COMPLETED>
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction.execute : $r7 = <org.apache.ambari.server.actionmanager.HostRoleStatus: org.apache.ambari.server.actionmanager.HostRoleStatus COMPLETED> >>>>>>>> org.apache.ambari.server.actionmanager.HostRoleStatus.values : $r0 = <org.apache.ambari.server.actionmanager.HostRoleStatus: org.apache.ambari.server.actionmanager.HostRoleStatus[] $VALUES>
org.apache.ambari.server.actionmanager.HostRoleStatus.values : $r0 = <org.apache.ambari.server.actionmanager.HostRoleStatus: org.apache.ambari.server.actionmanager.HostRoleStatus[] $VALUES> >>>>>>>> org.apache.ambari.server.actionmanager.HostRoleStatus.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
org.apache.ambari.server.actionmanager.HostRoleStatus.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.ambari.server.actionmanager.HostRoleStatus.values : $r2 = (org.apache.ambari.server.actionmanager.HostRoleStatus[]) $r1
org.apache.ambari.server.actionmanager.HostRoleStatus.values : $r2 = (org.apache.ambari.server.actionmanager.HostRoleStatus[]) $r1 >>>>>>>> org.apache.ambari.server.actionmanager.HostRoleStatus.values : return $r2
org.apache.ambari.server.actionmanager.HostRoleStatus.values : return $r2 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction.execute : $r6 = r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction: org.apache.ambari.server.serveraction.ActionLog actionLog>
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction.execute : $r6 = r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction: org.apache.ambari.server.serveraction.ActionLog actionLog> >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction.execute : $r8 = virtualinvoke $r6.<org.apache.ambari.server.serveraction.ActionLog: java.lang.String getStdOut()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction.execute : $r8 = virtualinvoke $r6.<org.apache.ambari.server.serveraction.ActionLog: java.lang.String getStdOut()>() >>>>>>>> org.apache.ambari.server.serveraction.ActionLog.getStdOut : $r1 = r0.<org.apache.ambari.server.serveraction.ActionLog: java.lang.StringBuffer stdOut>
org.apache.ambari.server.serveraction.ActionLog.getStdOut : $r1 = r0.<org.apache.ambari.server.serveraction.ActionLog: java.lang.StringBuffer stdOut> >>>>>>>> org.apache.ambari.server.serveraction.ActionLog.getStdOut : $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>()
org.apache.ambari.server.serveraction.ActionLog.getStdOut : $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.serveraction.ActionLog.getStdOut : return $r2
org.apache.ambari.server.serveraction.ActionLog.getStdOut : return $r2 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction.execute : $r9 = r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction: org.apache.ambari.server.serveraction.ActionLog actionLog>
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction.execute : $r9 = r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction: org.apache.ambari.server.serveraction.ActionLog actionLog> >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction.execute : $r10 = virtualinvoke $r9.<org.apache.ambari.server.serveraction.ActionLog: java.lang.String getStdErr()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction.execute : $r10 = virtualinvoke $r9.<org.apache.ambari.server.serveraction.ActionLog: java.lang.String getStdErr()>() >>>>>>>> org.apache.ambari.server.serveraction.ActionLog.getStdErr : $r1 = r0.<org.apache.ambari.server.serveraction.ActionLog: java.lang.StringBuffer stdErr>
org.apache.ambari.server.serveraction.ActionLog.getStdErr : $r1 = r0.<org.apache.ambari.server.serveraction.ActionLog: java.lang.StringBuffer stdErr> >>>>>>>> org.apache.ambari.server.serveraction.ActionLog.getStdErr : $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>()
org.apache.ambari.server.serveraction.ActionLog.getStdErr : $r2 = virtualinvoke $r1.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.serveraction.ActionLog.getStdErr : return $r2
org.apache.ambari.server.serveraction.ActionLog.getStdErr : return $r2 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction.execute : $r11 = virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction: org.apache.ambari.server.agent.CommandReport createCommandReport(int,org.apache.ambari.server.actionmanager.HostRoleStatus,java.lang.String,java.lang.String,java.lang.String)>(0, $r7, "{}", $r8, $r10)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction.execute : $r11 = virtualinvoke r0.<org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction: org.apache.ambari.server.agent.CommandReport createCommandReport(int,org.apache.ambari.server.actionmanager.HostRoleStatus,java.lang.String,java.lang.String,java.lang.String)>(0, $r7, "{}", $r8, $r10) >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : r27 = null
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : r27 = null >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r5 = r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.actionmanager.HostRoleCommand hostRoleCommand>
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r5 = r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.actionmanager.HostRoleCommand hostRoleCommand> >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : if $r5 == null
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : if $r5 == null >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r6 = r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.agent.ExecutionCommand executionCommand>
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r6 = r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.agent.ExecutionCommand executionCommand> >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : if $r6 != null
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : if $r6 != null >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r29 = r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.agent.ExecutionCommand executionCommand>
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r29 = r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.agent.ExecutionCommand executionCommand> >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : if $r29 == null
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : if $r29 == null >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r7 = r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.agent.ExecutionCommand executionCommand>
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r7 = r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.agent.ExecutionCommand executionCommand> >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : r30 = virtualinvoke $r7.<org.apache.ambari.server.agent.ExecutionCommand: org.apache.ambari.server.RoleCommand getRoleCommand()>()
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : r30 = virtualinvoke $r7.<org.apache.ambari.server.agent.ExecutionCommand: org.apache.ambari.server.RoleCommand getRoleCommand()>() >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r8 = new org.apache.ambari.server.agent.CommandReport
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r8 = new org.apache.ambari.server.agent.CommandReport >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : specialinvoke $r8.<org.apache.ambari.server.agent.CommandReport: void <init>()>()
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : specialinvoke $r8.<org.apache.ambari.server.agent.CommandReport: void <init>()>() >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : r27 = $r8
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : r27 = $r8 >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r9 = r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.actionmanager.HostRoleCommand hostRoleCommand>
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r9 = r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.actionmanager.HostRoleCommand hostRoleCommand> >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $l1 = virtualinvoke $r9.<org.apache.ambari.server.actionmanager.HostRoleCommand: long getRequestId()>()
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $l1 = virtualinvoke $r9.<org.apache.ambari.server.actionmanager.HostRoleCommand: long getRequestId()>() >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r10 = r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.actionmanager.HostRoleCommand hostRoleCommand>
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r10 = r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.actionmanager.HostRoleCommand hostRoleCommand> >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $l2 = virtualinvoke $r10.<org.apache.ambari.server.actionmanager.HostRoleCommand: long getStageId()>()
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $l2 = virtualinvoke $r10.<org.apache.ambari.server.actionmanager.HostRoleCommand: long getStageId()>() >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r11 = staticinvoke <org.apache.ambari.server.utils.StageUtils: java.lang.String getActionId(long,long)>($l1, $l2)
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r11 = staticinvoke <org.apache.ambari.server.utils.StageUtils: java.lang.String getActionId(long,long)>($l1, $l2) >>>>>>>> org.apache.ambari.server.utils.StageUtils.getActionId : $r0 = new java.lang.StringBuilder
org.apache.ambari.server.utils.StageUtils.getActionId : $r0 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.utils.StageUtils.getActionId : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.utils.StageUtils.getActionId : specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.utils.StageUtils.getActionId : $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0)
org.apache.ambari.server.utils.StageUtils.getActionId : $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0) >>>>>>>> org.apache.ambari.server.utils.StageUtils.getActionId : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-")
org.apache.ambari.server.utils.StageUtils.getActionId : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-") >>>>>>>> org.apache.ambari.server.utils.StageUtils.getActionId : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1)
org.apache.ambari.server.utils.StageUtils.getActionId : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1) >>>>>>>> org.apache.ambari.server.utils.StageUtils.getActionId : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.utils.StageUtils.getActionId : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.utils.StageUtils.getActionId : return $r4
org.apache.ambari.server.utils.StageUtils.getActionId : return $r4 >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : virtualinvoke $r8.<org.apache.ambari.server.agent.CommandReport: void setActionId(java.lang.String)>($r11)
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : virtualinvoke $r8.<org.apache.ambari.server.agent.CommandReport: void setActionId(java.lang.String)>($r11) >>>>>>>> org.apache.ambari.server.agent.CommandReport.setActionId : r0.<org.apache.ambari.server.agent.CommandReport: java.lang.String actionId> = r1
org.apache.ambari.server.agent.CommandReport.setActionId : r0.<org.apache.ambari.server.agent.CommandReport: java.lang.String actionId> = r1 >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r12 = r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.agent.ExecutionCommand executionCommand>
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r12 = r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.agent.ExecutionCommand executionCommand> >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r13 = virtualinvoke $r12.<org.apache.ambari.server.agent.ExecutionCommand: java.lang.String getClusterName()>()
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r13 = virtualinvoke $r12.<org.apache.ambari.server.agent.ExecutionCommand: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : virtualinvoke $r8.<org.apache.ambari.server.agent.CommandReport: void setClusterName(java.lang.String)>($r13)
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : virtualinvoke $r8.<org.apache.ambari.server.agent.CommandReport: void setClusterName(java.lang.String)>($r13) >>>>>>>> org.apache.ambari.server.agent.CommandReport.setClusterName : r0.<org.apache.ambari.server.agent.CommandReport: java.lang.String clusterName> = r1
org.apache.ambari.server.agent.CommandReport.setClusterName : r0.<org.apache.ambari.server.agent.CommandReport: java.lang.String clusterName> = r1 >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r14 = r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.agent.ExecutionCommand executionCommand>
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r14 = r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.agent.ExecutionCommand executionCommand> >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r15 = virtualinvoke $r14.<org.apache.ambari.server.agent.ExecutionCommand: java.util.Map getConfigurationTags()>()
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r15 = virtualinvoke $r14.<org.apache.ambari.server.agent.ExecutionCommand: java.util.Map getConfigurationTags()>() >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : virtualinvoke $r8.<org.apache.ambari.server.agent.CommandReport: void setConfigurationTags(java.util.Map)>($r15)
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : virtualinvoke $r8.<org.apache.ambari.server.agent.CommandReport: void setConfigurationTags(java.util.Map)>($r15) >>>>>>>> org.apache.ambari.server.agent.CommandReport.setConfigurationTags : r0.<org.apache.ambari.server.agent.CommandReport: java.util.Map configurationTags> = r1
org.apache.ambari.server.agent.CommandReport.setConfigurationTags : r0.<org.apache.ambari.server.agent.CommandReport: java.util.Map configurationTags> = r1 >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r16 = r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.agent.ExecutionCommand executionCommand>
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r16 = r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.agent.ExecutionCommand executionCommand> >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r17 = virtualinvoke $r16.<org.apache.ambari.server.agent.ExecutionCommand: java.lang.String getRole()>()
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r17 = virtualinvoke $r16.<org.apache.ambari.server.agent.ExecutionCommand: java.lang.String getRole()>() >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : virtualinvoke $r8.<org.apache.ambari.server.agent.CommandReport: void setRole(java.lang.String)>($r17)
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : virtualinvoke $r8.<org.apache.ambari.server.agent.CommandReport: void setRole(java.lang.String)>($r17) >>>>>>>> org.apache.ambari.server.agent.CommandReport.setRole : r0.<org.apache.ambari.server.agent.CommandReport: java.lang.String role> = r1
org.apache.ambari.server.agent.CommandReport.setRole : r0.<org.apache.ambari.server.agent.CommandReport: java.lang.String role> = r1 >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : if r30 != null
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : if r30 != null >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r31 = virtualinvoke r30.<org.apache.ambari.server.RoleCommand: java.lang.String toString()>()
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r31 = virtualinvoke r30.<org.apache.ambari.server.RoleCommand: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : virtualinvoke $r8.<org.apache.ambari.server.agent.CommandReport: void setRoleCommand(java.lang.String)>($r31)
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : virtualinvoke $r8.<org.apache.ambari.server.agent.CommandReport: void setRoleCommand(java.lang.String)>($r31) >>>>>>>> org.apache.ambari.server.agent.CommandReport.setRoleCommand : r0.<org.apache.ambari.server.agent.CommandReport: java.lang.String roleCommand> = r1
org.apache.ambari.server.agent.CommandReport.setRoleCommand : r0.<org.apache.ambari.server.agent.CommandReport: java.lang.String roleCommand> = r1 >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r18 = r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.agent.ExecutionCommand executionCommand>
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r18 = r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.agent.ExecutionCommand executionCommand> >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r19 = virtualinvoke $r18.<org.apache.ambari.server.agent.ExecutionCommand: java.lang.String getServiceName()>()
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r19 = virtualinvoke $r18.<org.apache.ambari.server.agent.ExecutionCommand: java.lang.String getServiceName()>() >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : virtualinvoke $r8.<org.apache.ambari.server.agent.CommandReport: void setServiceName(java.lang.String)>($r19)
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : virtualinvoke $r8.<org.apache.ambari.server.agent.CommandReport: void setServiceName(java.lang.String)>($r19) >>>>>>>> org.apache.ambari.server.agent.CommandReport.setServiceName : r0.<org.apache.ambari.server.agent.CommandReport: java.lang.String serviceName> = r1
org.apache.ambari.server.agent.CommandReport.setServiceName : r0.<org.apache.ambari.server.agent.CommandReport: java.lang.String serviceName> = r1 >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r20 = r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.agent.ExecutionCommand executionCommand>
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r20 = r0.<org.apache.ambari.server.serveraction.AbstractServerAction: org.apache.ambari.server.agent.ExecutionCommand executionCommand> >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $l3 = virtualinvoke $r20.<org.apache.ambari.server.agent.ExecutionCommand: long getTaskId()>()
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $l3 = virtualinvoke $r20.<org.apache.ambari.server.agent.ExecutionCommand: long getTaskId()>() >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : virtualinvoke $r8.<org.apache.ambari.server.agent.CommandReport: void setTaskId(long)>($l3)
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : virtualinvoke $r8.<org.apache.ambari.server.agent.CommandReport: void setTaskId(long)>($l3) >>>>>>>> org.apache.ambari.server.agent.CommandReport.setTaskId : r0.<org.apache.ambari.server.agent.CommandReport: long taskId> = l0
org.apache.ambari.server.agent.CommandReport.setTaskId : r0.<org.apache.ambari.server.agent.CommandReport: long taskId> = l0 >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : virtualinvoke $r8.<org.apache.ambari.server.agent.CommandReport: void setStructuredOut(java.lang.String)>(r2)
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : virtualinvoke $r8.<org.apache.ambari.server.agent.CommandReport: void setStructuredOut(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.agent.CommandReport.setStructuredOut : r0.<org.apache.ambari.server.agent.CommandReport: java.lang.String structuredOut> = r1
org.apache.ambari.server.agent.CommandReport.setStructuredOut : r0.<org.apache.ambari.server.agent.CommandReport: java.lang.String structuredOut> = r1 >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : if r4 != null
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : if r4 != null >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r32 = r4
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r32 = r4 >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : virtualinvoke $r8.<org.apache.ambari.server.agent.CommandReport: void setStdErr(java.lang.String)>($r32)
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : virtualinvoke $r8.<org.apache.ambari.server.agent.CommandReport: void setStdErr(java.lang.String)>($r32) >>>>>>>> org.apache.ambari.server.agent.CommandReport.setStdErr : r0.<org.apache.ambari.server.agent.CommandReport: java.lang.String stderr> = r1
org.apache.ambari.server.agent.CommandReport.setStdErr : r0.<org.apache.ambari.server.agent.CommandReport: java.lang.String stderr> = r1 >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : if r3 != null
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : if r3 != null >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r33 = r3
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r33 = r3 >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : virtualinvoke $r8.<org.apache.ambari.server.agent.CommandReport: void setStdOut(java.lang.String)>($r33)
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : virtualinvoke $r8.<org.apache.ambari.server.agent.CommandReport: void setStdOut(java.lang.String)>($r33) >>>>>>>> org.apache.ambari.server.agent.CommandReport.setStdOut : r0.<org.apache.ambari.server.agent.CommandReport: java.lang.String stdout> = r1
org.apache.ambari.server.agent.CommandReport.setStdOut : r0.<org.apache.ambari.server.agent.CommandReport: java.lang.String stdout> = r1 >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : if r1 != null
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : if r1 != null >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r34 = virtualinvoke r1.<org.apache.ambari.server.actionmanager.HostRoleStatus: java.lang.String toString()>()
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : $r34 = virtualinvoke r1.<org.apache.ambari.server.actionmanager.HostRoleStatus: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : virtualinvoke $r8.<org.apache.ambari.server.agent.CommandReport: void setStatus(java.lang.String)>($r34)
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : virtualinvoke $r8.<org.apache.ambari.server.agent.CommandReport: void setStatus(java.lang.String)>($r34) >>>>>>>> org.apache.ambari.server.agent.CommandReport.setStatus : r0.<org.apache.ambari.server.agent.CommandReport: java.lang.String status> = r1
org.apache.ambari.server.agent.CommandReport.setStatus : r0.<org.apache.ambari.server.agent.CommandReport: java.lang.String status> = r1 >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : virtualinvoke $r8.<org.apache.ambari.server.agent.CommandReport: void setExitCode(int)>(i0)
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : virtualinvoke $r8.<org.apache.ambari.server.agent.CommandReport: void setExitCode(int)>(i0) >>>>>>>> org.apache.ambari.server.agent.CommandReport.setExitCode : r0.<org.apache.ambari.server.agent.CommandReport: int exitCode> = i0
org.apache.ambari.server.agent.CommandReport.setExitCode : r0.<org.apache.ambari.server.agent.CommandReport: int exitCode> = i0 >>>>>>>> org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : return r27
org.apache.ambari.server.serveraction.AbstractServerAction.createCommandReport : return r27 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction.execute : return $r11
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerAction.execute : return $r11 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.assertSuccess : $i0 = virtualinvoke r1.<org.apache.ambari.server.agent.CommandReport: int getExitCode()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.assertSuccess : $i0 = virtualinvoke r1.<org.apache.ambari.server.agent.CommandReport: int getExitCode()>() >>>>>>>> org.apache.ambari.server.agent.CommandReport.getExitCode : $i0 = r0.<org.apache.ambari.server.agent.CommandReport: int exitCode>
org.apache.ambari.server.agent.CommandReport.getExitCode : $i0 = r0.<org.apache.ambari.server.agent.CommandReport: int exitCode> >>>>>>>> org.apache.ambari.server.agent.CommandReport.getExitCode : return $i0
org.apache.ambari.server.agent.CommandReport.getExitCode : return $i0 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.assertSuccess : staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(0, $i0)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.assertSuccess : staticinvoke <junit.framework.Assert: void assertEquals(int,int)>(0, $i0) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.assertSuccess : $r2 = <org.apache.ambari.server.actionmanager.HostRoleStatus: org.apache.ambari.server.actionmanager.HostRoleStatus COMPLETED>
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.assertSuccess : $r2 = <org.apache.ambari.server.actionmanager.HostRoleStatus: org.apache.ambari.server.actionmanager.HostRoleStatus COMPLETED> >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.assertSuccess : $r3 = virtualinvoke $r2.<org.apache.ambari.server.actionmanager.HostRoleStatus: java.lang.String name()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.assertSuccess : $r3 = virtualinvoke $r2.<org.apache.ambari.server.actionmanager.HostRoleStatus: java.lang.String name()>() >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.assertSuccess : $r4 = virtualinvoke r1.<org.apache.ambari.server.agent.CommandReport: java.lang.String getStatus()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.assertSuccess : $r4 = virtualinvoke r1.<org.apache.ambari.server.agent.CommandReport: java.lang.String getStatus()>() >>>>>>>> org.apache.ambari.server.agent.CommandReport.getStatus : $r1 = r0.<org.apache.ambari.server.agent.CommandReport: java.lang.String status>
org.apache.ambari.server.agent.CommandReport.getStatus : $r1 = r0.<org.apache.ambari.server.agent.CommandReport: java.lang.String status> >>>>>>>> org.apache.ambari.server.agent.CommandReport.getStatus : return $r1
org.apache.ambari.server.agent.CommandReport.getStatus : return $r1 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.assertSuccess : staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>($r3, $r4)
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.assertSuccess : staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>($r3, $r4) >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.assertSuccess : $r5 = virtualinvoke r1.<org.apache.ambari.server.agent.CommandReport: java.lang.String getStructuredOut()>()
org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.assertSuccess : $r5 = virtualinvoke r1.<org.apache.ambari.server.agent.CommandReport: java.lang.String getStructuredOut()>() >>>>>>>> org.apache.ambari.server.agent.CommandReport.getStructuredOut : $r1 = r0.<org.apache.ambari.server.agent.CommandReport: java.lang.String structuredOut>
org.apache.ambari.server.agent.CommandReport.getStructuredOut : $r1 = r0.<org.apache.ambari.server.agent.CommandReport: java.lang.String structuredOut> >>>>>>>> org.apache.ambari.server.agent.CommandReport.getStructuredOut : return $r1
org.apache.ambari.server.agent.CommandReport.getStructuredOut : return $r1 >>>>>>>> org.apache.ambari.server.serveraction.kerberos.FinalizeKerberosServerActionTest.assertSuccess : staticinvoke <junit.framework.Assert: void assertEquals(java.lang.String,java.lang.String)>("{}", $r5)
