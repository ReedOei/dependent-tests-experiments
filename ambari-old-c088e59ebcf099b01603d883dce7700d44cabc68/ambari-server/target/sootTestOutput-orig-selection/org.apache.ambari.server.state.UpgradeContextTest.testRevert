org.apache.ambari.server.state.StackId.parseStackIdHelper : if r2 == null >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if $z0 == 0
org.apache.ambari.server.state.StackId.parseStackIdHelper : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45)
org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1
org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i1 = virtualinvoke r2.<java.lang.String: int length()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i1 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i2 = i0 + 1
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i2 = i0 + 1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if $i1 > $i2
org.apache.ambari.server.state.StackId.parseStackIdHelper : if $i1 > $i2 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0)
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = $r8
org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = $r8 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3)
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> = $r9
org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> = $r9 >>>>>>>> org.apache.ambari.server.state.RepositoryType.isRevertable : $r1 = <org.apache.ambari.server.state.RepositoryType$1: int[] $SwitchMap$org$apache$ambari$server$state$RepositoryType>
org.apache.ambari.server.state.RepositoryType.isRevertable : $r1 = <org.apache.ambari.server.state.RepositoryType$1: int[] $SwitchMap$org$apache$ambari$server$state$RepositoryType> >>>>>>>> org.apache.ambari.server.state.RepositoryType.values : $r0 = <org.apache.ambari.server.state.RepositoryType: org.apache.ambari.server.state.RepositoryType[] $VALUES>
org.apache.ambari.server.state.RepositoryType.values : $r0 = <org.apache.ambari.server.state.RepositoryType: org.apache.ambari.server.state.RepositoryType[] $VALUES> >>>>>>>> org.apache.ambari.server.state.RepositoryType.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
org.apache.ambari.server.state.RepositoryType.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.ambari.server.state.RepositoryType.values : $r2 = (org.apache.ambari.server.state.RepositoryType[]) $r1
org.apache.ambari.server.state.RepositoryType.values : $r2 = (org.apache.ambari.server.state.RepositoryType[]) $r1 >>>>>>>> org.apache.ambari.server.state.RepositoryType.values : return $r2
org.apache.ambari.server.state.RepositoryType.values : return $r2 >>>>>>>> org.apache.ambari.server.state.RepositoryType.isRevertable : $i0 = virtualinvoke r0.<org.apache.ambari.server.state.RepositoryType: int ordinal()>()
org.apache.ambari.server.state.RepositoryType.isRevertable : $i0 = virtualinvoke r0.<org.apache.ambari.server.state.RepositoryType: int ordinal()>() >>>>>>>> org.apache.ambari.server.state.RepositoryType.isRevertable : $i1 = $r1[$i0]
org.apache.ambari.server.state.RepositoryType.isRevertable : $i1 = $r1[$i0] >>>>>>>> org.apache.ambari.server.state.RepositoryType.isRevertable : tableswitch($i1) {     case 1:
org.apache.ambari.server.state.RepositoryType.isRevertable : tableswitch($i1) {     case 1: >>>>>>>> org.apache.ambari.server.state.RepositoryType.isRevertable : return 1
org.apache.ambari.server.state.RepositoryType.isRevertable : return 1 >>>>>>>> org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : r12 = <org.apache.ambari.server.state.stack.upgrade.UpgradeType: org.apache.ambari.server.state.stack.upgrade.UpgradeType ROLLING>
org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : r12 = <org.apache.ambari.server.state.stack.upgrade.UpgradeType: org.apache.ambari.server.state.stack.upgrade.UpgradeType ROLLING> >>>>>>>> org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : $r5 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("Upgrade/upgrade_type")
org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : $r5 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("Upgrade/upgrade_type") >>>>>>>> org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : r3 = (java.lang.String) $r5
org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : r3 = (java.lang.String) $r5 >>>>>>>> org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>(r3)
org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : if z0 == 0
org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : if z0 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : $r6 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("Upgrade/upgrade_type")
org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : $r6 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("Upgrade/upgrade_type") >>>>>>>> org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>()
org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : $r7 = virtualinvoke $r6.<java.lang.Object: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : r12 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.UpgradeType: org.apache.ambari.server.state.stack.upgrade.UpgradeType valueOf(java.lang.String)>($r7)
org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : r12 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.UpgradeType: org.apache.ambari.server.state.stack.upgrade.UpgradeType valueOf(java.lang.String)>($r7) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.UpgradeType.valueOf : $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/apache/ambari/server/state/stack/upgrade/UpgradeType;", r0)
org.apache.ambari.server.state.stack.upgrade.UpgradeType.valueOf : $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/apache/ambari/server/state/stack/upgrade/UpgradeType;", r0) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.UpgradeType.valueOf : $r2 = (org.apache.ambari.server.state.stack.upgrade.UpgradeType) $r1
org.apache.ambari.server.state.stack.upgrade.UpgradeType.valueOf : $r2 = (org.apache.ambari.server.state.stack.upgrade.UpgradeType) $r1 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.UpgradeType.valueOf : return $r2
org.apache.ambari.server.state.stack.upgrade.UpgradeType.valueOf : return $r2 >>>>>>>> org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : goto [?= return r12]
org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : goto [?= return r12] >>>>>>>> org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : return r12
org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : return r12 >>>>>>>> org.apache.ambari.server.state.UpgradeContext.buildValidator : $r4 = new org.apache.ambari.server.state.UpgradeContext$BasicUpgradePropertiesValidator
org.apache.ambari.server.state.UpgradeContext.buildValidator : $r4 = new org.apache.ambari.server.state.UpgradeContext$BasicUpgradePropertiesValidator >>>>>>>> org.apache.ambari.server.state.UpgradeContext.buildValidator : specialinvoke $r4.<org.apache.ambari.server.state.UpgradeContext$BasicUpgradePropertiesValidator: void <init>(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.state.UpgradeContext$1)>(r0, null)
org.apache.ambari.server.state.UpgradeContext.buildValidator : specialinvoke $r4.<org.apache.ambari.server.state.UpgradeContext$BasicUpgradePropertiesValidator: void <init>(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.state.UpgradeContext$1)>(r0, null) >>>>>>>> org.apache.ambari.server.state.UpgradeContext.buildValidator : $r5 = new org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator
org.apache.ambari.server.state.UpgradeContext.buildValidator : $r5 = new org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator >>>>>>>> org.apache.ambari.server.state.UpgradeContext.buildValidator : specialinvoke $r5.<org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator: void <init>(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.state.UpgradeContext$1)>(r0, null)
org.apache.ambari.server.state.UpgradeContext.buildValidator : specialinvoke $r5.<org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator: void <init>(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.state.UpgradeContext$1)>(r0, null) >>>>>>>> org.apache.ambari.server.state.UpgradeContext.buildValidator : virtualinvoke $r4.<org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator: void setNextValidator(org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator)>($r5)
org.apache.ambari.server.state.UpgradeContext.buildValidator : virtualinvoke $r4.<org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator: void setNextValidator(org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator)>($r5) >>>>>>>> org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator.setNextValidator : r0.<org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator: org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator m_nextValidator> = r1
org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator.setNextValidator : r0.<org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator: org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator m_nextValidator> = r1 >>>>>>>> org.apache.ambari.server.state.UpgradeContext.buildValidator : $r6 = <org.apache.ambari.server.state.UpgradeContext$1: int[] $SwitchMap$org$apache$ambari$server$state$stack$upgrade$UpgradeType>
org.apache.ambari.server.state.UpgradeContext.buildValidator : $r6 = <org.apache.ambari.server.state.UpgradeContext$1: int[] $SwitchMap$org$apache$ambari$server$state$stack$upgrade$UpgradeType> >>>>>>>> org.apache.ambari.server.state.UpgradeContext.buildValidator : $i0 = virtualinvoke r1.<org.apache.ambari.server.state.stack.upgrade.UpgradeType: int ordinal()>()
org.apache.ambari.server.state.UpgradeContext.buildValidator : $i0 = virtualinvoke r1.<org.apache.ambari.server.state.stack.upgrade.UpgradeType: int ordinal()>() >>>>>>>> org.apache.ambari.server.state.UpgradeContext.buildValidator : $i1 = $r6[$i0]
org.apache.ambari.server.state.UpgradeContext.buildValidator : $i1 = $r6[$i0] >>>>>>>> org.apache.ambari.server.state.UpgradeContext.buildValidator : tableswitch($i1) {     case 1:
org.apache.ambari.server.state.UpgradeContext.buildValidator : tableswitch($i1) {     case 1: >>>>>>>> org.apache.ambari.server.state.UpgradeContext.buildValidator : r8 = null
org.apache.ambari.server.state.UpgradeContext.buildValidator : r8 = null >>>>>>>> org.apache.ambari.server.state.UpgradeContext.buildValidator : virtualinvoke $r5.<org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator: void setNextValidator(org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator)>(r8)
org.apache.ambari.server.state.UpgradeContext.buildValidator : virtualinvoke $r5.<org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator: void setNextValidator(org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator)>(r8) >>>>>>>> org.apache.ambari.server.state.UpgradeContext.buildValidator : return $r4
org.apache.ambari.server.state.UpgradeContext.buildValidator : return $r4 >>>>>>>> org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator.validate : virtualinvoke r0.<org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator: void check(org.apache.ambari.server.state.Cluster,org.apache.ambari.server.state.stack.upgrade.Direction,org.apache.ambari.server.state.stack.upgrade.UpgradeType,org.apache.ambari.server.state.stack.UpgradePack,java.util.Map)>(r1, r2, r3, r4, r5)
org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator.validate : virtualinvoke r0.<org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator: void check(org.apache.ambari.server.state.Cluster,org.apache.ambari.server.state.stack.upgrade.Direction,org.apache.ambari.server.state.stack.upgrade.UpgradeType,org.apache.ambari.server.state.stack.UpgradePack,java.util.Map)>(r1, r2, r3, r4, r5) >>>>>>>> org.apache.ambari.server.state.UpgradeContext$BasicUpgradePropertiesValidator.check : $r7 = <org.apache.ambari.server.state.stack.upgrade.Direction: org.apache.ambari.server.state.stack.upgrade.Direction UPGRADE>
org.apache.ambari.server.state.UpgradeContext$BasicUpgradePropertiesValidator.check : $r7 = <org.apache.ambari.server.state.stack.upgrade.Direction: org.apache.ambari.server.state.stack.upgrade.Direction UPGRADE> >>>>>>>> org.apache.ambari.server.state.UpgradeContext$BasicUpgradePropertiesValidator.check : if r2 != $r7
org.apache.ambari.server.state.UpgradeContext$BasicUpgradePropertiesValidator.check : if r2 != $r7 >>>>>>>> org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator.validate : $r6 = r0.<org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator: org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator m_nextValidator>
org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator.validate : $r6 = r0.<org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator: org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator m_nextValidator> >>>>>>>> org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator.validate : if null == $r6
org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator.validate : if null == $r6 >>>>>>>> org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator.validate : $r7 = r0.<org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator: org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator m_nextValidator>
org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator.validate : $r7 = r0.<org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator: org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator m_nextValidator> >>>>>>>> org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator.validate : virtualinvoke $r7.<org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator: void validate(org.apache.ambari.server.state.Cluster,org.apache.ambari.server.state.stack.upgrade.Direction,org.apache.ambari.server.state.stack.upgrade.UpgradeType,org.apache.ambari.server.state.stack.UpgradePack,java.util.Map)>(r1, r2, r3, r4, r5)
org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator.validate : virtualinvoke $r7.<org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator: void validate(org.apache.ambari.server.state.Cluster,org.apache.ambari.server.state.stack.upgrade.Direction,org.apache.ambari.server.state.stack.upgrade.UpgradeType,org.apache.ambari.server.state.stack.UpgradePack,java.util.Map)>(r1, r2, r3, r4, r5) >>>>>>>> org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : $r16 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("Upgrade/repository_version_id")
org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : $r16 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("Upgrade/repository_version_id") >>>>>>>> org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : r6 = (java.lang.String) $r16
org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : r6 = (java.lang.String) $r16 >>>>>>>> org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : $r17 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("Upgrade/skip_prerequisite_checks")
org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : $r17 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("Upgrade/skip_prerequisite_checks") >>>>>>>> org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : $r18 = (java.lang.String) $r17
org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : $r18 = (java.lang.String) $r17 >>>>>>>> org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r18)
org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r18) >>>>>>>> org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : $r19 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("Upgrade/fail_on_check_warnings")
org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : $r19 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("Upgrade/fail_on_check_warnings") >>>>>>>> org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : $r20 = (java.lang.String) $r19
org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : $r20 = (java.lang.String) $r19 >>>>>>>> org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : z1 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r20)
org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : z1 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>($r20) >>>>>>>> org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : $z2 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>("Upgrade/pack")
org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : $z2 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>("Upgrade/pack") >>>>>>>> org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : if $z2 == 0
org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : $r67 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("Upgrade/pack")
org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : $r67 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("Upgrade/pack") >>>>>>>> org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : $r73 = (java.lang.String) $r67
org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : $r73 = (java.lang.String) $r67 >>>>>>>> org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : goto [?= r8 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.orm.entities.UpgradeEntity getUpgradeInProgress()>()]
org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : goto [?= r8 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.orm.entities.UpgradeEntity getUpgradeInProgress()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : r8 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.orm.entities.UpgradeEntity getUpgradeInProgress()>()
org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : r8 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.orm.entities.UpgradeEntity getUpgradeInProgress()>() >>>>>>>> org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : if null == r8
org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : if null == r8 >>>>>>>> org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : $z3 = virtualinvoke r2.<org.apache.ambari.server.state.stack.upgrade.Direction: boolean isDowngrade()>()
org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : $z3 = virtualinvoke r2.<org.apache.ambari.server.state.stack.upgrade.Direction: boolean isDowngrade()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Direction.isDowngrade : $r1 = <org.apache.ambari.server.state.stack.upgrade.Direction: org.apache.ambari.server.state.stack.upgrade.Direction DOWNGRADE>
org.apache.ambari.server.state.stack.upgrade.Direction.isDowngrade : $r1 = <org.apache.ambari.server.state.stack.upgrade.Direction: org.apache.ambari.server.state.stack.upgrade.Direction DOWNGRADE> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Direction.isDowngrade : if r0 != $r1
org.apache.ambari.server.state.stack.upgrade.Direction.isDowngrade : if r0 != $r1 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Direction.isDowngrade : $z0 = 1
org.apache.ambari.server.state.stack.upgrade.Direction.isDowngrade : $z0 = 1 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Direction.isDowngrade : goto [?= return $z0]
org.apache.ambari.server.state.stack.upgrade.Direction.isDowngrade : goto [?= return $z0] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Direction.isDowngrade : return $z0
org.apache.ambari.server.state.stack.upgrade.Direction.isDowngrade : return $z0 >>>>>>>> org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : if $z3 != 0
org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : if $z3 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeContext.getDirection : $r1 = r0.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.stack.upgrade.Direction m_direction>
org.apache.ambari.server.state.UpgradeContext.getDirection : $r1 = r0.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.stack.upgrade.Direction m_direction> >>>>>>>> org.apache.ambari.server.state.UpgradeContext.getDirection : return $r1
org.apache.ambari.server.state.UpgradeContext.getDirection : return $r1 >>>>>>>> org.apache.ambari.server.state.UpgradeContext.getOrchestrationType : $r1 = r0.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.RepositoryType m_orchestration>
org.apache.ambari.server.state.UpgradeContext.getOrchestrationType : $r1 = r0.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.RepositoryType m_orchestration> >>>>>>>> org.apache.ambari.server.state.UpgradeContext.getOrchestrationType : return $r1
org.apache.ambari.server.state.UpgradeContext.getOrchestrationType : return $r1 >>>>>>>> org.apache.ambari.server.state.UpgradeContext.getSupportedServices : $r1 = r0.<org.apache.ambari.server.state.UpgradeContext: java.util.Set m_services>
org.apache.ambari.server.state.UpgradeContext.getSupportedServices : $r1 = r0.<org.apache.ambari.server.state.UpgradeContext: java.util.Set m_services> >>>>>>>> org.apache.ambari.server.state.UpgradeContext.getSupportedServices : $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1)
org.apache.ambari.server.state.UpgradeContext.getSupportedServices : $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1) >>>>>>>> org.apache.ambari.server.state.UpgradeContext.getSupportedServices : return $r2
org.apache.ambari.server.state.UpgradeContext.getSupportedServices : return $r2 >>>>>>>> org.apache.ambari.server.state.UpgradeContext.isPatchRevert : $z0 = r0.<org.apache.ambari.server.state.UpgradeContext: boolean m_isRevert>
org.apache.ambari.server.state.UpgradeContext.isPatchRevert : $z0 = r0.<org.apache.ambari.server.state.UpgradeContext: boolean m_isRevert> >>>>>>>> org.apache.ambari.server.state.UpgradeContext.isPatchRevert : return $z0
