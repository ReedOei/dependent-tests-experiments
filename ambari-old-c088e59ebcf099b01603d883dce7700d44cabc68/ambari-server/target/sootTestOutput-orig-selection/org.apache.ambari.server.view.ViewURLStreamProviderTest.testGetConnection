org.apache.ambari.server.view.ViewURLStreamProvider.getConnection : if r3 != null >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getConnection : $r10 = virtualinvoke r3.<java.lang.String: byte[] getBytes()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getConnection : $r10 = virtualinvoke r3.<java.lang.String: byte[] getBytes()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getConnection : $r5 = specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider: java.net.HttpURLConnection getHttpURLConnection(java.lang.String,java.lang.String,java.util.Map,byte[])>(r1, r2, r4, $r10)
org.apache.ambari.server.view.ViewURLStreamProvider.getConnection : $r5 = specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider: java.net.HttpURLConnection getHttpURLConnection(java.lang.String,java.lang.String,java.util.Map,byte[])>(r1, r2, r4, $r10) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $z0 = virtualinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider: boolean isProxyCallAllowed(java.lang.String)>(r1)
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $z0 = virtualinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider: boolean isProxyCallAllowed(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>(r1)
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : if $z0 == 0
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : if $z0 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $r2 = specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler getHostPortRestrictionHandler()>()
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $r2 = specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler getHostPortRestrictionHandler()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r2 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler hostPortRestrictionHandler>
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r2 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler hostPortRestrictionHandler> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : if $r2 != null
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : if $r2 != null >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r4 = new org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r4 = new org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r6 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.view.ViewContext viewContext>
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r6 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.view.ViewContext viewContext> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r5 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty PROXY_ALLOWED_HOST_PORTS>
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r5 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty PROXY_ALLOWED_HOST_PORTS> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r7 = virtualinvoke $r5.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r7 = virtualinvoke $r5.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String m_key>
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : $r1 = r0.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String m_key> >>>>>>>> org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : return $r1
org.apache.ambari.server.configuration.Configuration$ConfigurationProperty.getKey : return $r1 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r8 = interfaceinvoke $r6.<org.apache.ambari.view.ViewContext: java.lang.String getAmbariProperty(java.lang.String)>($r7)
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r8 = interfaceinvoke $r6.<org.apache.ambari.view.ViewContext: java.lang.String getAmbariProperty(java.lang.String)>($r7) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : specialinvoke $r4.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: void <init>(org.apache.ambari.server.view.ViewURLStreamProvider,java.lang.String)>(r0, $r8)
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : specialinvoke $r4.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: void <init>(org.apache.ambari.server.view.ViewURLStreamProvider,java.lang.String)>(r0, $r8) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.access$000 : $r0 = <org.apache.ambari.server.view.ViewURLStreamProvider: org.slf4j.Logger LOG>
org.apache.ambari.server.view.ViewURLStreamProvider.access$000 : $r0 = <org.apache.ambari.server.view.ViewURLStreamProvider: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.access$000 : return $r0
org.apache.ambari.server.view.ViewURLStreamProvider.access$000 : return $r0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler hostPortRestrictionHandler> = $r4
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler hostPortRestrictionHandler> = $r4 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r3 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler hostPortRestrictionHandler>
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : $r3 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler hostPortRestrictionHandler> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : return $r3
org.apache.ambari.server.view.ViewURLStreamProvider.getHostPortRestrictionHandler : return $r3 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $r3 = virtualinvoke $r2.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.Boolean proxyCallRestricted()>()
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $r3 = virtualinvoke $r2.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.Boolean proxyCallRestricted()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : $r1 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : $r1 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : if $r1 != null
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : if $r1 != null >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: void initializeAllowedHostPorts()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : specialinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: void initializeAllowedHostPorts()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : z6 = 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : z6 = 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r7 = new java.util.HashMap
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r7 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : specialinvoke $r7.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : specialinvoke $r7.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r8 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.String allowedHostPortsValue>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r8 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.String allowedHostPortsValue> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>($r8)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>($r8) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : if $z0 == 0
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : if $z0 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts> = $r7
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.util.Map allowedHostPorts> = $r7 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r34 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z6)
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : $r34 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z6) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.Boolean isProxyCallRestricted> = $r34
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.initializeAllowedHostPorts : r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.Boolean isProxyCallRestricted> = $r34 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : $r2 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.Boolean isProxyCallRestricted>
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : $r2 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler: java.lang.Boolean isProxyCallRestricted> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : return $r2
org.apache.ambari.server.view.ViewURLStreamProvider$HostPortRestrictionHandler.proxyCallRestricted : return $r2 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $z1 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>()
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : $z1 = virtualinvoke $r3.<java.lang.Boolean: boolean booleanValue()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : if $z1 == 0
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : if $z1 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : return 1
org.apache.ambari.server.view.ViewURLStreamProvider.isProxyCallAllowed : return 1 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : if $z0 != 0
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : if $z0 != 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r8 = new java.util.HashMap
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r8 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : specialinvoke $r8.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : specialinvoke $r8.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r9 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r9 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : r6 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : r6 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : if $z1 == 0
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : if $z1 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r12 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r12 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : r7 = (java.util.Map$Entry) $r12
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : r7 = (java.util.Map$Entry) $r12 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r13 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r13 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r14 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r14 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r15 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r14)
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r15 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r14) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r15)
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r15) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : goto [?= $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : goto [?= $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r10 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.controller.internal.URLStreamProvider streamProvider>
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r10 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.controller.internal.URLStreamProvider streamProvider> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r11 = virtualinvoke $r10.<org.apache.ambari.server.controller.internal.URLStreamProvider: java.net.HttpURLConnection processURL(java.lang.String,java.lang.String,byte[],java.util.Map)>(r1, r2, r4, $r8)
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r11 = virtualinvoke $r10.<org.apache.ambari.server.controller.internal.URLStreamProvider: java.net.HttpURLConnection processURL(java.lang.String,java.lang.String,byte[],java.util.Map)>(r1, r2, r4, $r8) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : return $r11
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : return $r11 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getConnection : return $r5
