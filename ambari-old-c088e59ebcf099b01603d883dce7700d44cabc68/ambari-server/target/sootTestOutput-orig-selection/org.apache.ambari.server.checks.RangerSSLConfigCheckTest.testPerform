org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : r3 = virtualinvoke r0.<org.apache.ambari.server.checks.RangerSSLConfigCheck: java.lang.String getProperty(org.apache.ambari.server.controller.PrereqCheckRequest,java.lang.String,java.lang.String)>(r2, "ranger-admin-site", "ranger.service.http.enabled") >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r4 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r4 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName>
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r10 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r10 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: com.google.inject.Provider clustersProvider> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r11 = interfaceinvoke $r10.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r11 = interfaceinvoke $r10.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.RangerSSLConfigCheckTest$1: org.apache.ambari.server.state.Clusters get()>()
org.apache.ambari.server.checks.RangerSSLConfigCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.RangerSSLConfigCheckTest$1: org.apache.ambari.server.state.Clusters get()>() >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.RangerSSLConfigCheckTest$1: org.apache.ambari.server.checks.RangerSSLConfigCheckTest this$0>
org.apache.ambari.server.checks.RangerSSLConfigCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.RangerSSLConfigCheckTest$1: org.apache.ambari.server.checks.RangerSSLConfigCheckTest this$0> >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheckTest$1.get : $r2 = staticinvoke <org.apache.ambari.server.checks.RangerSSLConfigCheckTest: org.apache.ambari.server.state.Clusters access$000(org.apache.ambari.server.checks.RangerSSLConfigCheckTest)>($r1)
org.apache.ambari.server.checks.RangerSSLConfigCheckTest$1.get : $r2 = staticinvoke <org.apache.ambari.server.checks.RangerSSLConfigCheckTest: org.apache.ambari.server.state.Clusters access$000(org.apache.ambari.server.checks.RangerSSLConfigCheckTest)>($r1) >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.RangerSSLConfigCheckTest: org.apache.ambari.server.state.Clusters clusters>
org.apache.ambari.server.checks.RangerSSLConfigCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.RangerSSLConfigCheckTest: org.apache.ambari.server.state.Clusters clusters> >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheckTest.access$000 : return $r1
org.apache.ambari.server.checks.RangerSSLConfigCheckTest.access$000 : return $r1 >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheckTest$1.get : return $r2
org.apache.ambari.server.checks.RangerSSLConfigCheckTest$1.get : return $r2 >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheckTest$1.get : return $r1
org.apache.ambari.server.checks.RangerSSLConfigCheckTest$1.get : return $r1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r12 = (org.apache.ambari.server.state.Clusters) $r11
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r12 = (org.apache.ambari.server.state.Clusters) $r11 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r5 = interfaceinvoke $r12.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r4)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r5 = interfaceinvoke $r12.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r4) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r6 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: java.util.Map getDesiredConfigs()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r6 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: java.util.Map getDesiredConfigs()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r13 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r13 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r7 = (org.apache.ambari.server.state.DesiredConfig) $r13
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r7 = (org.apache.ambari.server.state.DesiredConfig) $r13 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : if null != r7
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : if null != r7 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r14 = virtualinvoke r7.<org.apache.ambari.server.state.DesiredConfig: java.lang.String getTag()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r14 = virtualinvoke r7.<org.apache.ambari.server.state.DesiredConfig: java.lang.String getTag()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r8 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getConfig(java.lang.String,java.lang.String)>(r2, $r14)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r8 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getConfig(java.lang.String,java.lang.String)>(r2, $r14) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r9 = interfaceinvoke r8.<org.apache.ambari.server.state.Config: java.util.Map getProperties()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r9 = interfaceinvoke r8.<org.apache.ambari.server.state.Config: java.util.Map getProperties()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r15 = interfaceinvoke r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r15 = interfaceinvoke r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r16 = (java.lang.String) $r15
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r16 = (java.lang.String) $r15 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : return $r16
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : return $r16 >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : r4 = virtualinvoke r0.<org.apache.ambari.server.checks.RangerSSLConfigCheck: java.lang.String getProperty(org.apache.ambari.server.controller.PrereqCheckRequest,java.lang.String,java.lang.String)>(r2, "ranger-admin-site", "ranger.service.https.attrib.ssl.enabled")
org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : r4 = virtualinvoke r0.<org.apache.ambari.server.checks.RangerSSLConfigCheck: java.lang.String getProperty(org.apache.ambari.server.controller.PrereqCheckRequest,java.lang.String,java.lang.String)>(r2, "ranger-admin-site", "ranger.service.https.attrib.ssl.enabled") >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : r5 = virtualinvoke r0.<org.apache.ambari.server.checks.RangerSSLConfigCheck: java.lang.String getProperty(org.apache.ambari.server.controller.PrereqCheckRequest,java.lang.String,java.lang.String)>(r2, "ranger-admin-site", "ranger.https.attrib.keystore.file")
org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : r5 = virtualinvoke r0.<org.apache.ambari.server.checks.RangerSSLConfigCheck: java.lang.String getProperty(org.apache.ambari.server.controller.PrereqCheckRequest,java.lang.String,java.lang.String)>(r2, "ranger-admin-site", "ranger.https.attrib.keystore.file") >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : $r6 = "false"
org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : $r6 = "false" >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : $z0 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r3)
org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : $z0 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : if $z0 == 0
org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : $r12 = <org.apache.ambari.server.checks.RangerSSLConfigCheck: org.slf4j.Logger LOG>
org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : $r12 = <org.apache.ambari.server.checks.RangerSSLConfigCheck: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String)>("Ranger is not SSL enabled, no need to show Configuration changes warning before upragade proceeds.")
org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : interfaceinvoke $r12.<org.slf4j.Logger: void info(java.lang.String)>("Ranger is not SSL enabled, no need to show Configuration changes warning before upragade proceeds.") >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status>
org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : return $r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : return $r1 >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : $r7 = "true"
org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : $r7 = "true" >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : $z1 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4)
org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : $z1 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r4) >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : if $z1 == 0
org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : if $z1 == 0 >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : $z2 = virtualinvoke r5.<java.lang.String: boolean contains(java.lang.CharSequence)>("/etc/ranger/admin/conf")
org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : $z2 = virtualinvoke r5.<java.lang.String: boolean contains(java.lang.CharSequence)>("/etc/ranger/admin/conf") >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : if $z2 == 0
org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : if $z2 == 0 >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : $r8 = <org.apache.ambari.server.checks.RangerSSLConfigCheck: org.slf4j.Logger LOG>
org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : $r8 = <org.apache.ambari.server.checks.RangerSSLConfigCheck: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String)>("Ranger is SSL enabled, need to show Configuration changes warning before upragade proceeds.")
org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String)>("Ranger is SSL enabled, need to show Configuration changes warning before upragade proceeds.") >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : $r9 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>()
org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : $r9 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>() >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet m_failedOn>
org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet m_failedOn> >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : return $r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : return $r1 >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : virtualinvoke $r9.<java.util.LinkedHashSet: boolean add(java.lang.Object)>("RANGER")
org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : virtualinvoke $r9.<java.util.LinkedHashSet: boolean add(java.lang.Object)>("RANGER") >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : $r10 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus WARNING>
org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : $r10 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus WARNING> >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setStatus(org.apache.ambari.server.state.stack.PrereqCheckStatus)>($r10)
org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setStatus(org.apache.ambari.server.state.stack.PrereqCheckStatus)>($r10) >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.setStatus : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> = r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.setStatus : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> = r1 >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : $r11 = virtualinvoke r0.<org.apache.ambari.server.checks.RangerSSLConfigCheck: java.lang.String getFailReason(org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>(r1, r2)
org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : $r11 = virtualinvoke r0.<org.apache.ambari.server.checks.RangerSSLConfigCheck: java.lang.String getFailReason(org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>(r1, r2) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r3 = virtualinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("default", r1, r2)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r3 = virtualinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("default", r1, r2) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r12 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription m_description>
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r12 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription m_description> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r32 = virtualinvoke $r12.<org.apache.ambari.server.checks.CheckDescription: java.lang.String getFail(java.lang.String)>(r1)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r32 = virtualinvoke $r12.<org.apache.ambari.server.checks.CheckDescription: java.lang.String getFail(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r2 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails>
org.apache.ambari.server.checks.CheckDescription.getFail : $r2 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails> >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.ambari.server.checks.CheckDescription.getFail : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : if $z0 == 0
org.apache.ambari.server.checks.CheckDescription.getFail : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r3 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails>
org.apache.ambari.server.checks.CheckDescription.getFail : $r3 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails> >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.ambari.server.checks.CheckDescription.getFail : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r5 = (java.lang.String) $r4
org.apache.ambari.server.checks.CheckDescription.getFail : $r5 = (java.lang.String) $r4 >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : goto [?= return $r5]
org.apache.ambari.server.checks.CheckDescription.getFail : goto [?= return $r5] >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : return $r5
org.apache.ambari.server.checks.CheckDescription.getFail : return $r5 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r4 = virtualinvoke r3.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r4 = virtualinvoke r3.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity m_targetRepositoryVersion>
org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity m_targetRepositoryVersion> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : return $r1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z0 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{version}}")
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z0 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{version}}") >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z0 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z5 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{fails}}")
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z5 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{fails}}") >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z5 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z5 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : return r32
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : return r32 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : return $r3
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : return $r3 >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailReason(java.lang.String)>($r11)
org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailReason(java.lang.String)>($r11) >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.setFailReason : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.lang.String m_failReason> = r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.setFailReason : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.lang.String m_failReason> = r1 >>>>>>>> org.apache.ambari.server.checks.RangerSSLConfigCheck.perform : goto [?= return]
