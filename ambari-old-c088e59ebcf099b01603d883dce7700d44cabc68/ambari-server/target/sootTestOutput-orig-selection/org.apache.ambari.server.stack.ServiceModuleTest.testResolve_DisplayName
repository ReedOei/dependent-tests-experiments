org.apache.ambari.server.state.ServiceInfo.ensureMandatoryServiceProperties : $r2 = specialinvoke r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map ensureVisibilityServiceProperties(java.util.Map)>(r1) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r2 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r2 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r3 = virtualinvoke $r2.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r3 = virtualinvoke $r2.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r3)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r3) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z0 != 0
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z0 != 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r18 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r18 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r19 = virtualinvoke $r18.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r19 = virtualinvoke $r18.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r20 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r20 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_INSTALLABLE_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r21 = virtualinvoke $r20.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r21 = virtualinvoke $r20.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r21)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r21) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r4 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r4 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r5 = virtualinvoke $r4.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r5 = virtualinvoke $r4.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z1 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r5)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z1 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r5) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z1 != 0
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z1 != 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r13 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r13 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r14 = virtualinvoke $r13.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r14 = virtualinvoke $r13.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r15 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r15 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MANAGED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r16 = virtualinvoke $r15.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r16 = virtualinvoke $r15.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r16)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, $r16) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r6 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r6 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r7 = virtualinvoke $r6.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r7 = virtualinvoke $r6.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z2 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r7)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $z2 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r7) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z2 != 0
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : if $z2 != 0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r8 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r8 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r9 = virtualinvoke $r8.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r9 = virtualinvoke $r8.<java.util.AbstractMap$SimpleEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r10 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY>
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r10 = <org.apache.ambari.server.state.ServiceInfo: java.util.AbstractMap$SimpleEntry DEFAULT_SERVICE_MONITORED_PROPERTY> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r11 = virtualinvoke $r10.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>()
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : $r11 = virtualinvoke $r10.<java.util.AbstractMap$SimpleEntry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r11)
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r11) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : return r1
org.apache.ambari.server.state.ServiceInfo.ensureVisibilityServiceProperties : return r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.ensureMandatoryServiceProperties : return $r2
org.apache.ambari.server.state.ServiceInfo.ensureMandatoryServiceProperties : return $r2 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setDisplayName : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String displayName> = r1
org.apache.ambari.server.state.ServiceInfo.setDisplayName : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String displayName> = r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.resolveService : r3 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ServiceModule createServiceModule(org.apache.ambari.server.state.ServiceInfo)>(r1)
org.apache.ambari.server.stack.ServiceModuleTest.resolveService : r3 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ServiceModule createServiceModule(org.apache.ambari.server.state.ServiceInfo)>(r1) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r8 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getName()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r8 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getName : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String name>
org.apache.ambari.server.state.ServiceInfo.getName : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String name> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getName : return $r1
org.apache.ambari.server.state.ServiceInfo.getName : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : if $r8 != null
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : if $r8 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: void setName(java.lang.String)>("service1")
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: void setName(java.lang.String)>("service1") >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setName : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String name> = r1
org.apache.ambari.server.state.ServiceInfo.setName : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String name> = r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r9 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getName()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r9 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getName()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r3 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.StackContext createStackContext(java.lang.String,boolean)>($r9, 1)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r3 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.StackContext createStackContext(java.lang.String,boolean)>($r9, 1) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : $r3 = staticinvoke <org.easymock.EasyMock: java.lang.Object createStrictMock(java.lang.Class)>(class "Lorg/apache/ambari/server/stack/StackContext;")
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : $r3 = staticinvoke <org.easymock.EasyMock: java.lang.Object createStrictMock(java.lang.Class)>(class "Lorg/apache/ambari/server/stack/StackContext;") >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : r2 = (org.apache.ambari.server.stack.StackContext) $r3
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : r2 = (org.apache.ambari.server.stack.StackContext) $r3 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : if z0 == 0
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : if z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : virtualinvoke r2.<org.apache.ambari.server.stack.StackContext: void registerServiceCheck(java.lang.String)>(r1)
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : virtualinvoke r2.<org.apache.ambari.server.stack.StackContext: void registerServiceCheck(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : $r4 = newarray (java.lang.Object)[1]
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : $r4 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : $r4[0] = r2
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : $r4[0] = r2 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r4)
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r4) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : return r2
org.apache.ambari.server.stack.ServiceModuleTest.createStackContext : return r2 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r10 = staticinvoke <java.util.Collections: java.util.List emptyList()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r10 = staticinvoke <java.util.Collections: java.util.List emptyList()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r11 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r11 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r4 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ConfigurationInfo createConfigurationInfo(java.util.Collection,java.util.Map)>($r10, $r11)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r4 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ConfigurationInfo createConfigurationInfo(java.util.Collection,java.util.Map)>($r10, $r11) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationInfo : $r3 = new org.apache.ambari.server.stack.ConfigurationInfo
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationInfo : $r3 = new org.apache.ambari.server.stack.ConfigurationInfo >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationInfo : specialinvoke $r3.<org.apache.ambari.server.stack.ConfigurationInfo: void <init>(java.util.Collection,java.util.Map)>(r1, r2)
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationInfo : specialinvoke $r3.<org.apache.ambari.server.stack.ConfigurationInfo: void <init>(java.util.Collection,java.util.Map)>(r1, r2) >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r8 = new java.util.HashMap
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r8 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : specialinvoke $r8.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : specialinvoke $r8.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r9 = new java.util.HashMap
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r9 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : specialinvoke $r9.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : specialinvoke $r9.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("supports", $r9)
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("supports", $r9) >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r11 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $r11 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r4 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r4 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : if $z0 == 0
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r0.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map attributes> = $r8
org.apache.ambari.server.stack.ConfigurationInfo.setAttributes : r0.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map attributes> = $r8 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationInfo : return $r3
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationInfo : return $r3 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r5 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ConfigurationModule createConfigurationModule(java.lang.String,org.apache.ambari.server.stack.ConfigurationInfo)>("type1", r4)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r5 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ConfigurationModule createConfigurationModule(java.lang.String,org.apache.ambari.server.stack.ConfigurationInfo)>("type1", r4) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : $r3 = new org.apache.ambari.server.stack.ConfigurationModule
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : $r3 = new org.apache.ambari.server.stack.ConfigurationModule >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : specialinvoke $r3.<org.apache.ambari.server.stack.ConfigurationModule: void <init>(java.lang.String,org.apache.ambari.server.stack.ConfigurationInfo)>(r1, r2)
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : specialinvoke $r3.<org.apache.ambari.server.stack.ConfigurationModule: void <init>(java.lang.String,org.apache.ambari.server.stack.ConfigurationInfo)>(r1, r2) >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.isValid : $z0 = r0.<org.apache.ambari.server.stack.ConfigurationInfo: boolean valid>
org.apache.ambari.server.stack.ConfigurationInfo.isValid : $z0 = r0.<org.apache.ambari.server.stack.ConfigurationInfo: boolean valid> >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.isValid : return $z0
org.apache.ambari.server.stack.ConfigurationInfo.isValid : return $z0 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : return $r3
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationModule : return $r3 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r12 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r5)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r12 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r5) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r6 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ConfigurationDirectory createConfigurationDirectory(java.util.Collection)>($r12)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r6 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ConfigurationDirectory createConfigurationDirectory(java.util.Collection)>($r12) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : $r3 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/stack/ConfigurationDirectory;")
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : $r3 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/stack/ConfigurationDirectory;") >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : r2 = (org.apache.ambari.server.stack.ConfigurationDirectory) $r3
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : r2 = (org.apache.ambari.server.stack.ConfigurationDirectory) $r3 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : $r4 = virtualinvoke r2.<org.apache.ambari.server.stack.ConfigurationDirectory: java.util.Collection getConfigurationModules()>()
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : $r4 = virtualinvoke r2.<org.apache.ambari.server.stack.ConfigurationDirectory: java.util.Collection getConfigurationModules()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : $r5 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r4)
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : $r5 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r4) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : $r6 = interfaceinvoke $r5.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r1)
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : $r6 = interfaceinvoke $r5.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : interfaceinvoke $r6.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : interfaceinvoke $r6.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : $r8 = newarray (java.lang.Object)[1]
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : $r8 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : $r8[0] = r2
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : $r8[0] = r2 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r8)
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r8) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : return r2
org.apache.ambari.server.stack.ServiceModuleTest.createConfigurationDirectory : return r2 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r13 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getConfigDir()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r13 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getConfigDir()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getConfigDir : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String configDir>
org.apache.ambari.server.state.ServiceInfo.getConfigDir : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String configDir> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getConfigDir : return $r1
org.apache.ambari.server.state.ServiceInfo.getConfigDir : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r7 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ServiceDirectory createServiceDirectory(java.lang.String,org.apache.ambari.server.stack.ConfigurationDirectory)>($r13, r6)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : r7 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ServiceDirectory createServiceDirectory(java.lang.String,org.apache.ambari.server.stack.ConfigurationDirectory)>($r13, r6) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r4 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/stack/ServiceDirectory;")
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r4 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/stack/ServiceDirectory;") >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : r3 = (org.apache.ambari.server.stack.ServiceDirectory) $r4
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : r3 = (org.apache.ambari.server.stack.ServiceDirectory) $r4 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r5 = virtualinvoke r3.<org.apache.ambari.server.stack.ServiceDirectory: org.apache.ambari.server.stack.ConfigurationDirectory getConfigurationDirectory(java.lang.String,java.lang.String)>(r1, "properties")
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r5 = virtualinvoke r3.<org.apache.ambari.server.stack.ServiceDirectory: org.apache.ambari.server.stack.ConfigurationDirectory getConfigurationDirectory(java.lang.String,java.lang.String)>(r1, "properties") >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r6 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r5)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r6 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r5) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r7 = interfaceinvoke $r6.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r2)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r7 = interfaceinvoke $r6.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : interfaceinvoke $r7.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : interfaceinvoke $r7.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r9 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;")
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r9 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;") >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r10 = (java.lang.String) $r9
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r10 = (java.lang.String) $r9 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r11 = virtualinvoke r3.<org.apache.ambari.server.stack.ServiceDirectory: java.io.File getMetricsFile(java.lang.String)>($r10)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r11 = virtualinvoke r3.<org.apache.ambari.server.stack.ServiceDirectory: java.io.File getMetricsFile(java.lang.String)>($r10) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r12 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r11)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r12 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r11) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r13 = new java.io.File
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r13 = new java.io.File >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>("testMetricsFile")
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : specialinvoke $r13.<java.io.File: void <init>(java.lang.String)>("testMetricsFile") >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r14 = interfaceinvoke $r12.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r13)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r14 = interfaceinvoke $r12.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r13) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : interfaceinvoke $r14.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : interfaceinvoke $r14.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r16 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;")
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r16 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/String;") >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r17 = (java.lang.String) $r16
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r17 = (java.lang.String) $r16 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r18 = virtualinvoke r3.<org.apache.ambari.server.stack.ServiceDirectory: java.io.File getWidgetsDescriptorFile(java.lang.String)>($r17)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r18 = virtualinvoke r3.<org.apache.ambari.server.stack.ServiceDirectory: java.io.File getWidgetsDescriptorFile(java.lang.String)>($r17) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r19 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r18)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r19 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r18) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r20 = new java.io.File
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r20 = new java.io.File >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : specialinvoke $r20.<java.io.File: void <init>(java.lang.String)>("testWidgetsFile")
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : specialinvoke $r20.<java.io.File: void <init>(java.lang.String)>("testWidgetsFile") >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r21 = interfaceinvoke $r19.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r20)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r21 = interfaceinvoke $r19.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r20) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : interfaceinvoke $r21.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : interfaceinvoke $r21.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r23 = virtualinvoke r3.<org.apache.ambari.server.stack.ServiceDirectory: java.io.File getAlertsFile()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r23 = virtualinvoke r3.<org.apache.ambari.server.stack.ServiceDirectory: java.io.File getAlertsFile()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r24 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r23)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r24 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r23) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r25 = new java.io.File
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r25 = new java.io.File >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : specialinvoke $r25.<java.io.File: void <init>(java.lang.String)>("testAlertsFile")
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : specialinvoke $r25.<java.io.File: void <init>(java.lang.String)>("testAlertsFile") >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r26 = interfaceinvoke $r24.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r25)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r26 = interfaceinvoke $r24.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r25) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : interfaceinvoke $r26.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : interfaceinvoke $r26.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r28 = virtualinvoke r3.<org.apache.ambari.server.stack.ServiceDirectory: java.io.File getKerberosDescriptorFile()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r28 = virtualinvoke r3.<org.apache.ambari.server.stack.ServiceDirectory: java.io.File getKerberosDescriptorFile()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r29 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r28)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r29 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r28) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r30 = new java.io.File
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r30 = new java.io.File >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : specialinvoke $r30.<java.io.File: void <init>(java.lang.String)>("testKerberosDescriptorFile")
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : specialinvoke $r30.<java.io.File: void <init>(java.lang.String)>("testKerberosDescriptorFile") >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r31 = interfaceinvoke $r29.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r30)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r31 = interfaceinvoke $r29.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r30) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : interfaceinvoke $r31.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : interfaceinvoke $r31.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r33 = virtualinvoke r3.<org.apache.ambari.server.stack.ServiceDirectory: java.lang.String getPackageDir()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r33 = virtualinvoke r3.<org.apache.ambari.server.stack.ServiceDirectory: java.lang.String getPackageDir()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r34 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r33)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r34 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r33) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r35 = interfaceinvoke $r34.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("packageDir")
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r35 = interfaceinvoke $r34.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>("packageDir") >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : interfaceinvoke $r35.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : interfaceinvoke $r35.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r37 = newarray (java.lang.Object)[1]
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r37 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r37[0] = r3
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : $r37[0] = r3 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r37)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r37) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : return r3
org.apache.ambari.server.stack.ServiceModuleTest.createServiceDirectory : return r3 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r14 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ServiceModule createServiceModule(org.apache.ambari.server.stack.StackContext,org.apache.ambari.server.state.ServiceInfo,org.apache.ambari.server.stack.ServiceDirectory)>(r3, r1, r7)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r14 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ServiceModule createServiceModule(org.apache.ambari.server.stack.StackContext,org.apache.ambari.server.state.ServiceInfo,org.apache.ambari.server.stack.ServiceDirectory)>(r3, r1, r7) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r4 = new org.apache.ambari.server.stack.ServiceModule
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : $r4 = new org.apache.ambari.server.stack.ServiceModule >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : specialinvoke $r4.<org.apache.ambari.server.stack.ServiceModule: void <init>(org.apache.ambari.server.stack.StackContext,org.apache.ambari.server.state.ServiceInfo,org.apache.ambari.server.stack.ServiceDirectory)>(r1, r2, r3)
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : specialinvoke $r4.<org.apache.ambari.server.stack.ServiceModule: void <init>(org.apache.ambari.server.stack.StackContext,org.apache.ambari.server.state.ServiceInfo,org.apache.ambari.server.stack.ServiceDirectory)>(r1, r2, r3) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setMetricsFile : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File metricsFile> = r1
org.apache.ambari.server.state.ServiceInfo.setMetricsFile : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File metricsFile> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setAlertsFile : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File alertsFile> = r1
org.apache.ambari.server.state.ServiceInfo.setAlertsFile : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File alertsFile> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setKerberosDescriptorFile : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File kerberosDescriptorFile> = r1
org.apache.ambari.server.state.ServiceInfo.setKerberosDescriptorFile : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File kerberosDescriptorFile> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setWidgetsDescriptorFile : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File widgetsDescriptorFile> = r1
org.apache.ambari.server.state.ServiceInfo.setWidgetsDescriptorFile : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File widgetsDescriptorFile> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setRoleCommandOrder : r0.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.stack.StackRoleCommandOrder roleCommandOrder> = r1
org.apache.ambari.server.state.ServiceInfo.setRoleCommandOrder : r0.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.stack.StackRoleCommandOrder roleCommandOrder> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setSchemaVersion : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String schemaVersion> = r1
org.apache.ambari.server.state.ServiceInfo.setSchemaVersion : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String schemaVersion> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setServicePackageFolder : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String servicePackageFolder> = r1
org.apache.ambari.server.state.ServiceInfo.setServicePackageFolder : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String servicePackageFolder> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setServiceUpgradesFolder : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File serviceUpgradesFolder> = r1
org.apache.ambari.server.state.ServiceInfo.setServiceUpgradesFolder : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File serviceUpgradesFolder> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setChecksFolder : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File checksFolder> = r1
org.apache.ambari.server.state.ServiceInfo.setChecksFolder : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File checksFolder> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setServerActionsFolder : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File serverActionsFolder> = r1
org.apache.ambari.server.state.ServiceInfo.setServerActionsFolder : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File serverActionsFolder> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setAdvisorFile : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File advisorFile> = r1
org.apache.ambari.server.state.ServiceInfo.setAdvisorFile : r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File advisorFile> = r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setAdvisorName : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String advisorName> = r1
org.apache.ambari.server.state.ServiceInfo.setAdvisorName : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String advisorName> = r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateComponentModules : $r3 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateComponentModules : $r3 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateComponentModules : $r4 = virtualinvoke $r3.<org.apache.ambari.server.state.ServiceInfo: java.util.List getComponents()>()
org.apache.ambari.server.stack.ServiceModule.populateComponentModules : $r4 = virtualinvoke $r3.<org.apache.ambari.server.state.ServiceInfo: java.util.List getComponents()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComponents : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List components>
org.apache.ambari.server.state.ServiceInfo.getComponents : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List components> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComponents : if $r1 != null
org.apache.ambari.server.state.ServiceInfo.getComponents : if $r1 != null >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComponents : $r3 = new java.util.ArrayList
org.apache.ambari.server.state.ServiceInfo.getComponents : $r3 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComponents : specialinvoke $r3.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.ServiceInfo.getComponents : specialinvoke $r3.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComponents : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List components> = $r3
org.apache.ambari.server.state.ServiceInfo.getComponents : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List components> = $r3 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComponents : $r2 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List components>
org.apache.ambari.server.state.ServiceInfo.getComponents : $r2 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List components> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComponents : return $r2
org.apache.ambari.server.state.ServiceInfo.getComponents : return $r2 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateComponentModules : r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.ServiceModule.populateComponentModules : r1 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateComponentModules : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.ServiceModule.populateComponentModules : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateComponentModules : if $z0 == 0
org.apache.ambari.server.stack.ServiceModule.populateComponentModules : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r4 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.stack.ServiceDirectory serviceDirectory>
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r4 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.stack.ServiceDirectory serviceDirectory> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r3 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r3 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r5 = virtualinvoke $r3.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getConfigDir()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r5 = virtualinvoke $r3.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getConfigDir()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : r1 = virtualinvoke $r4.<org.apache.ambari.server.stack.ServiceDirectory: org.apache.ambari.server.stack.ConfigurationDirectory getConfigurationDirectory(java.lang.String,java.lang.String)>($r5, "properties")
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : r1 = virtualinvoke $r4.<org.apache.ambari.server.stack.ServiceDirectory: org.apache.ambari.server.stack.ConfigurationDirectory getConfigurationDirectory(java.lang.String,java.lang.String)>($r5, "properties") >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if r1 == null
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if r1 == null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r6 = virtualinvoke r1.<org.apache.ambari.server.stack.ConfigurationDirectory: java.util.Collection getConfigurationModules()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r6 = virtualinvoke r1.<org.apache.ambari.server.stack.ConfigurationDirectory: java.util.Collection getConfigurationModules()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : r21 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : r21 = interfaceinvoke $r6.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z0 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z0 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if $z0 == 0
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r17 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r17 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : r22 = (org.apache.ambari.server.stack.ConfigurationModule) $r17
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : r22 = (org.apache.ambari.server.stack.ConfigurationModule) $r17 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : r23 = virtualinvoke r22.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo getModuleInfo()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : r23 = virtualinvoke r22.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo getModuleInfo()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.getModuleInfo : $r1 = r0.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo info>
org.apache.ambari.server.stack.ConfigurationModule.getModuleInfo : $r1 = r0.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo info> >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.getModuleInfo : return $r1
org.apache.ambari.server.stack.ConfigurationModule.getModuleInfo : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z3 = virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: boolean isValid()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z3 = virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: boolean isValid()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.isValid : $z0 = r0.<org.apache.ambari.server.stack.ServiceModule: boolean valid>
org.apache.ambari.server.stack.ServiceModule.isValid : $z0 = r0.<org.apache.ambari.server.stack.ServiceModule: boolean valid> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.isValid : return $z0
org.apache.ambari.server.stack.ServiceModule.isValid : return $z0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if $z3 == 0
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if $z3 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z5 = virtualinvoke r22.<org.apache.ambari.server.stack.ConfigurationModule: boolean isValid()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z5 = virtualinvoke r22.<org.apache.ambari.server.stack.ConfigurationModule: boolean isValid()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.isValid : $z0 = r0.<org.apache.ambari.server.stack.ConfigurationModule: boolean valid>
org.apache.ambari.server.stack.ConfigurationModule.isValid : $z0 = r0.<org.apache.ambari.server.stack.ConfigurationModule: boolean valid> >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.isValid : return $z0
org.apache.ambari.server.stack.ConfigurationModule.isValid : return $z0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if $z5 == 0
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if $z5 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z6 = virtualinvoke r23.<org.apache.ambari.server.stack.ConfigurationInfo: boolean isValid()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z6 = virtualinvoke r23.<org.apache.ambari.server.stack.ConfigurationInfo: boolean isValid()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if $z6 == 0
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if $z6 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z7 = 1
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z7 = 1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : goto [?= virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void setValid(boolean)>($z7)]
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : goto [?= virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void setValid(boolean)>($z7)] >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void setValid(boolean)>($z7)
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void setValid(boolean)>($z7) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.setValid : r0.<org.apache.ambari.server.stack.ServiceModule: boolean valid> = z0
org.apache.ambari.server.stack.ServiceModule.setValid : r0.<org.apache.ambari.server.stack.ServiceModule: boolean valid> = z0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z8 = virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: boolean isValid()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z8 = virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: boolean isValid()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if $z8 != 0
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if $z8 != 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r25 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r25 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r26 = virtualinvoke $r25.<org.apache.ambari.server.state.ServiceInfo: java.util.List getProperties()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r26 = virtualinvoke $r25.<org.apache.ambari.server.state.ServiceInfo: java.util.List getProperties()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getProperties : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List properties>
org.apache.ambari.server.state.ServiceInfo.getProperties : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List properties> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getProperties : if $r1 != null
org.apache.ambari.server.state.ServiceInfo.getProperties : if $r1 != null >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getProperties : $r3 = new java.util.ArrayList
org.apache.ambari.server.state.ServiceInfo.getProperties : $r3 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getProperties : specialinvoke $r3.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.ServiceInfo.getProperties : specialinvoke $r3.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getProperties : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List properties> = $r3
org.apache.ambari.server.state.ServiceInfo.getProperties : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List properties> = $r3 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getProperties : $r2 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List properties>
org.apache.ambari.server.state.ServiceInfo.getProperties : $r2 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List properties> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getProperties : return $r2
org.apache.ambari.server.state.ServiceInfo.getProperties : return $r2 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r27 = virtualinvoke r23.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Collection getProperties()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r27 = virtualinvoke r23.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Collection getProperties()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.getProperties : $r1 = r0.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Collection properties>
org.apache.ambari.server.stack.ConfigurationInfo.getProperties : $r1 = r0.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Collection properties> >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.getProperties : return $r1
org.apache.ambari.server.stack.ConfigurationInfo.getProperties : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : interfaceinvoke $r26.<java.util.List: boolean addAll(java.util.Collection)>($r27)
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : interfaceinvoke $r26.<java.util.List: boolean addAll(java.util.Collection)>($r27) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r28 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r28 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r29 = virtualinvoke r22.<org.apache.ambari.server.stack.ConfigurationModule: java.lang.String getConfigType()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r29 = virtualinvoke r22.<org.apache.ambari.server.stack.ConfigurationModule: java.lang.String getConfigType()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.getConfigType : $r1 = r0.<org.apache.ambari.server.stack.ConfigurationModule: java.lang.String configType>
org.apache.ambari.server.stack.ConfigurationModule.getConfigType : $r1 = r0.<org.apache.ambari.server.stack.ConfigurationModule: java.lang.String configType> >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.getConfigType : return $r1
org.apache.ambari.server.stack.ConfigurationModule.getConfigType : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r30 = virtualinvoke r23.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map getAttributes()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r30 = virtualinvoke r23.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map getAttributes()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.getAttributes : $r1 = r0.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map attributes>
org.apache.ambari.server.stack.ConfigurationInfo.getAttributes : $r1 = r0.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map attributes> >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.getAttributes : return $r1
org.apache.ambari.server.stack.ConfigurationInfo.getAttributes : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : virtualinvoke $r28.<org.apache.ambari.server.state.ServiceInfo: void setTypeAttributes(java.lang.String,java.util.Map)>($r29, $r30)
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : virtualinvoke $r28.<org.apache.ambari.server.state.ServiceInfo: void setTypeAttributes(java.lang.String,java.util.Map)>($r29, $r30) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : $r3 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map configTypes>
org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : $r3 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map configTypes> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : if $r3 != null
org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : if $r3 != null >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : $r6 = new java.util.HashMap
org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : $r6 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : specialinvoke $r6.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : specialinvoke $r6.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map configTypes> = $r6
org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map configTypes> = $r6 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : $r4 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map configTypes>
org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : $r4 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map configTypes> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
org.apache.ambari.server.state.ServiceInfo.setTypeAttributes : interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r31 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Map configurationModules>
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r31 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Map configurationModules> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r32 = virtualinvoke r22.<org.apache.ambari.server.stack.ConfigurationModule: java.lang.String getConfigType()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r32 = virtualinvoke r22.<org.apache.ambari.server.stack.ConfigurationModule: java.lang.String getConfigType()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, r22)
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r32, r22) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : goto [?= $z0 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : goto [?= $z0 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r7 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r7 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r8 = virtualinvoke $r7.<org.apache.ambari.server.state.ServiceInfo: java.util.Set getExcludedConfigTypes()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $r8 = virtualinvoke $r7.<org.apache.ambari.server.state.ServiceInfo: java.util.Set getExcludedConfigTypes()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getExcludedConfigTypes : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Set excludedConfigTypes>
org.apache.ambari.server.state.ServiceInfo.getExcludedConfigTypes : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Set excludedConfigTypes> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getExcludedConfigTypes : return $r1
org.apache.ambari.server.state.ServiceInfo.getExcludedConfigTypes : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : r33 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : r33 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z1 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : $z1 = interfaceinvoke r33.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if $z1 == 0
org.apache.ambari.server.stack.ServiceModule.populateConfigurationModules : if $z1 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r7 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r7 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r8 = virtualinvoke $r7.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getThemesDir()>()
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r8 = virtualinvoke $r7.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getThemesDir()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getThemesDir : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String themesDir>
org.apache.ambari.server.state.ServiceInfo.getThemesDir : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String themesDir> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getThemesDir : return $r1
org.apache.ambari.server.state.ServiceInfo.getThemesDir : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : if $r8 != null
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : if $r8 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r9 = new java.lang.StringBuilder
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r9 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r10 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.stack.ServiceDirectory serviceDirectory>
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r10 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.stack.ServiceDirectory serviceDirectory> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r11 = virtualinvoke $r10.<org.apache.ambari.server.stack.ServiceDirectory: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r11 = virtualinvoke $r10.<org.apache.ambari.server.stack.ServiceDirectory: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11)
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r13 = <java.io.File: java.lang.String separator>
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r13 = <java.io.File: java.lang.String separator> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13)
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r15 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r15 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r16 = virtualinvoke $r15.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getThemesDir()>()
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r16 = virtualinvoke $r15.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getThemesDir()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16)
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : r1 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : r1 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r18 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r18 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r19 = virtualinvoke $r18.<org.apache.ambari.server.state.ServiceInfo: java.util.List getThemes()>()
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : $r19 = virtualinvoke $r18.<org.apache.ambari.server.state.ServiceInfo: java.util.List getThemes()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getThemes : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List themes>
org.apache.ambari.server.state.ServiceInfo.getThemes : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List themes> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getThemes : return $r1
org.apache.ambari.server.state.ServiceInfo.getThemes : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateThemeModules : if $r19 == null
org.apache.ambari.server.stack.ServiceModule.populateThemeModules : if $r19 == null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r6 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r6 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r7 = virtualinvoke $r6.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getQuickLinksConfigurationsDir()>()
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r7 = virtualinvoke $r6.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getQuickLinksConfigurationsDir()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getQuickLinksConfigurationsDir : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String quickLinksConfigurationsDir>
org.apache.ambari.server.state.ServiceInfo.getQuickLinksConfigurationsDir : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String quickLinksConfigurationsDir> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getQuickLinksConfigurationsDir : return $r1
org.apache.ambari.server.state.ServiceInfo.getQuickLinksConfigurationsDir : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : if $r7 != null
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : if $r7 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r8 = new java.lang.StringBuilder
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r8 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r9 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.stack.ServiceDirectory serviceDirectory>
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r9 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.stack.ServiceDirectory serviceDirectory> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r10 = virtualinvoke $r9.<org.apache.ambari.server.stack.ServiceDirectory: java.lang.String getAbsolutePath()>()
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r10 = virtualinvoke $r9.<org.apache.ambari.server.stack.ServiceDirectory: java.lang.String getAbsolutePath()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10)
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r12 = <java.io.File: java.lang.String separator>
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r12 = <java.io.File: java.lang.String separator> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r14 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r14 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r15 = virtualinvoke $r14.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getQuickLinksConfigurationsDir()>()
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r15 = virtualinvoke $r14.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getQuickLinksConfigurationsDir()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15)
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : r1 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : r1 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r17 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r17 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r18 = virtualinvoke $r17.<org.apache.ambari.server.state.ServiceInfo: java.util.List getQuickLinksConfigurations()>()
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : $r18 = virtualinvoke $r17.<org.apache.ambari.server.state.ServiceInfo: java.util.List getQuickLinksConfigurations()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getQuickLinksConfigurations : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List quickLinksConfigurations>
org.apache.ambari.server.state.ServiceInfo.getQuickLinksConfigurations : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List quickLinksConfigurations> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getQuickLinksConfigurations : return $r1
org.apache.ambari.server.state.ServiceInfo.getQuickLinksConfigurations : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : if $r18 == null
org.apache.ambari.server.stack.ServiceModule.populateQuickLinksConfigurationModules : if $r18 == null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.validateServiceInfo : $r1 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.validateServiceInfo : $r1 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.validateServiceInfo : $z0 = virtualinvoke $r1.<org.apache.ambari.server.state.ServiceInfo: boolean isValid()>()
org.apache.ambari.server.stack.ServiceModule.validateServiceInfo : $z0 = virtualinvoke $r1.<org.apache.ambari.server.state.ServiceInfo: boolean isValid()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.isValid : $z0 = r0.<org.apache.ambari.server.state.ServiceInfo: boolean valid>
org.apache.ambari.server.state.ServiceInfo.isValid : $z0 = r0.<org.apache.ambari.server.state.ServiceInfo: boolean valid> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.isValid : return $z0
org.apache.ambari.server.state.ServiceInfo.isValid : return $z0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.validateServiceInfo : if $z0 != 0
org.apache.ambari.server.stack.ServiceModule.validateServiceInfo : if $z0 != 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : return $r4
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : return $r4 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : return $r14
org.apache.ambari.server.stack.ServiceModuleTest.createServiceModule : return $r14 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.resolveService : r4 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ServiceModule createServiceModule(org.apache.ambari.server.state.ServiceInfo)>(r2)
org.apache.ambari.server.stack.ServiceModuleTest.resolveService : r4 = specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: org.apache.ambari.server.stack.ServiceModule createServiceModule(org.apache.ambari.server.state.ServiceInfo)>(r2) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.resolveService : specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: void resolveService(org.apache.ambari.server.stack.ServiceModule,org.apache.ambari.server.stack.ServiceModule)>(r3, r4)
org.apache.ambari.server.stack.ServiceModuleTest.resolveService : specialinvoke r0.<org.apache.ambari.server.stack.ServiceModuleTest: void resolveService(org.apache.ambari.server.stack.ServiceModule,org.apache.ambari.server.stack.ServiceModule)>(r3, r4) >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.resolveService : $r3 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>()
org.apache.ambari.server.stack.ServiceModuleTest.resolveService : $r3 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.resolveService : $r4 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>()
org.apache.ambari.server.stack.ServiceModuleTest.resolveService : $r4 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.resolveService : $r5 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>()
org.apache.ambari.server.stack.ServiceModuleTest.resolveService : $r5 = staticinvoke <java.util.Collections: java.util.Map emptyMap()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.resolveService : virtualinvoke r1.<org.apache.ambari.server.stack.ServiceModule: void resolve(org.apache.ambari.server.stack.ServiceModule,java.util.Map,java.util.Map,java.util.Map)>(r2, $r3, $r4, $r5)
org.apache.ambari.server.stack.ServiceModuleTest.resolveService : virtualinvoke r1.<org.apache.ambari.server.stack.ServiceModule: void resolve(org.apache.ambari.server.stack.ServiceModule,java.util.Map,java.util.Map,java.util.Map)>(r2, $r3, $r4, $r5) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolve : virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void resolveInternal(org.apache.ambari.server.stack.ServiceModule,java.util.Map,java.util.Map,java.util.Map,boolean)>(r1, r2, r3, r4, 0)
org.apache.ambari.server.stack.ServiceModule.resolve : virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void resolveInternal(org.apache.ambari.server.stack.ServiceModule,java.util.Map,java.util.Map,java.util.Map,boolean)>(r1, r2, r3, r4, 0) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r7 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r7 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $z1 = virtualinvoke $r7.<org.apache.ambari.server.state.ServiceInfo: boolean isValid()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $z1 = virtualinvoke $r7.<org.apache.ambari.server.state.ServiceInfo: boolean isValid()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $z1 == 0
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $z1 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $z2 = virtualinvoke r1.<org.apache.ambari.server.stack.ServiceModule: boolean isValid()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $z2 = virtualinvoke r1.<org.apache.ambari.server.stack.ServiceModule: boolean isValid()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $z2 != 0
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $z2 != 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r8 = <org.apache.ambari.server.stack.ServiceModule: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r8 = <org.apache.ambari.server.stack.ServiceModule: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String)>("Resolve service")
org.apache.ambari.server.stack.ServiceModule.resolveInternal : interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String)>("Resolve service") >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r9 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r9 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r10 = virtualinvoke $r9.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getParent()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r10 = virtualinvoke $r9.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getParent()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getParent : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String parent>
org.apache.ambari.server.state.ServiceInfo.getParent : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String parent> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getParent : return $r1
org.apache.ambari.server.state.ServiceInfo.getParent : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $z3 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isBlank(java.lang.String)>($r10)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $z3 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isBlank(java.lang.String)>($r10) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $z3 != 0
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $z3 != 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : r5 = virtualinvoke r1.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo getModuleInfo()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : r5 = virtualinvoke r1.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo getModuleInfo()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.getModuleInfo : $r1 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.getModuleInfo : $r1 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.getModuleInfo : return $r1
org.apache.ambari.server.stack.ServiceModule.getModuleInfo : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r11 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r11 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r12 = virtualinvoke $r11.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getComment()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r12 = virtualinvoke $r11.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getComment()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComment : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String comment>
org.apache.ambari.server.state.ServiceInfo.getComment : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String comment> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getComment : return $r1
org.apache.ambari.server.state.ServiceInfo.getComment : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r12 != null
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r12 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r114 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r114 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r115 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getComment()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r115 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getComment()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r114.<org.apache.ambari.server.state.ServiceInfo: void setComment(java.lang.String)>($r115)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r114.<org.apache.ambari.server.state.ServiceInfo: void setComment(java.lang.String)>($r115) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setComment : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String comment> = r1
org.apache.ambari.server.state.ServiceInfo.setComment : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String comment> = r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r15 = <org.apache.ambari.server.stack.ServiceModule: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r15 = <org.apache.ambari.server.stack.ServiceModule: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r13 = newarray (java.lang.Object)[2]
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r13 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r14 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r14 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r16 = virtualinvoke $r14.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getDisplayName()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r16 = virtualinvoke $r14.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getDisplayName()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getDisplayName : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String displayName>
org.apache.ambari.server.state.ServiceInfo.getDisplayName : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String displayName> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getDisplayName : return $r1
org.apache.ambari.server.state.ServiceInfo.getDisplayName : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r13[0] = $r16
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r13[0] = $r16 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r17 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getDisplayName()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r17 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getDisplayName()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r13[1] = $r17
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r13[1] = $r17 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r18 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Display name service/parent: %s/%s", $r13)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r18 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Display name service/parent: %s/%s", $r13) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : interfaceinvoke $r15.<org.slf4j.Logger: void info(java.lang.String)>($r18)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : interfaceinvoke $r15.<org.slf4j.Logger: void info(java.lang.String)>($r18) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r19 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r19 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r20 = virtualinvoke $r19.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getDisplayName()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r20 = virtualinvoke $r19.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getDisplayName()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r20 != null
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r20 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r21 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r21 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r22 = virtualinvoke $r21.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.ServiceInfo$ServiceAdvisorType getServiceAdvisorType()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r22 = virtualinvoke $r21.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.ServiceInfo$ServiceAdvisorType getServiceAdvisorType()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getServiceAdvisorType : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.ServiceInfo$ServiceAdvisorType serviceAdvisorType>
org.apache.ambari.server.state.ServiceInfo.getServiceAdvisorType : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.ServiceInfo$ServiceAdvisorType serviceAdvisorType> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getServiceAdvisorType : return $r1
org.apache.ambari.server.state.ServiceInfo.getServiceAdvisorType : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r22 != null
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r22 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r117 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r117 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r118 = virtualinvoke $r117.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getVersion()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r118 = virtualinvoke $r117.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getVersion()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getVersion : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String version>
org.apache.ambari.server.state.ServiceInfo.getVersion : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String version> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getVersion : return $r1
org.apache.ambari.server.state.ServiceInfo.getVersion : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r118 != null
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r118 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r109 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r109 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r110 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getVersion()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r110 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getVersion()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r109.<org.apache.ambari.server.state.ServiceInfo: void setVersion(java.lang.String)>($r110)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r109.<org.apache.ambari.server.state.ServiceInfo: void setVersion(java.lang.String)>($r110) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setVersion : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String version> = r1
org.apache.ambari.server.state.ServiceInfo.setVersion : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String version> = r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r23 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r23 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r24 = virtualinvoke $r23.<org.apache.ambari.server.state.ServiceInfo: java.util.List getRequiredServices()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r24 = virtualinvoke $r23.<org.apache.ambari.server.state.ServiceInfo: java.util.List getRequiredServices()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getRequiredServices : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List requiredServices>
org.apache.ambari.server.state.ServiceInfo.getRequiredServices : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List requiredServices> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getRequiredServices : return $r1
org.apache.ambari.server.state.ServiceInfo.getRequiredServices : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r24 == null
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r24 == null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r107 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r107 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r108 = virtualinvoke $r107.<org.apache.ambari.server.state.ServiceInfo: java.util.List getRequiredServices()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r108 = virtualinvoke $r107.<org.apache.ambari.server.state.ServiceInfo: java.util.List getRequiredServices()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $i0 = interfaceinvoke $r108.<java.util.List: int size()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $i0 = interfaceinvoke $r108.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $i0 != 0
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $i0 != 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r25 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r25 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r26 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.util.List getRequiredServices()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r26 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.util.List getRequiredServices()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r26 == null
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r26 == null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r119 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.util.List getRequiredServices()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r119 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.util.List getRequiredServices()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : goto [?= virtualinvoke $r25.<org.apache.ambari.server.state.ServiceInfo: void setRequiredServices(java.util.List)>($r119)]
org.apache.ambari.server.stack.ServiceModule.resolveInternal : goto [?= virtualinvoke $r25.<org.apache.ambari.server.state.ServiceInfo: void setRequiredServices(java.util.List)>($r119)] >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r25.<org.apache.ambari.server.state.ServiceInfo: void setRequiredServices(java.util.List)>($r119)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r25.<org.apache.ambari.server.state.ServiceInfo: void setRequiredServices(java.util.List)>($r119) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setRequiredServices : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List requiredServices> = r1
org.apache.ambari.server.state.ServiceInfo.setRequiredServices : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List requiredServices> = r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r120 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r120 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r121 = virtualinvoke $r120.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean isRestartRequiredAfterChange()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r121 = virtualinvoke $r120.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean isRestartRequiredAfterChange()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.isRestartRequiredAfterChange : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean restartRequiredAfterChange>
org.apache.ambari.server.state.ServiceInfo.isRestartRequiredAfterChange : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean restartRequiredAfterChange> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.isRestartRequiredAfterChange : return $r1
org.apache.ambari.server.state.ServiceInfo.isRestartRequiredAfterChange : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r121 != null
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r121 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r105 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r105 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r106 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean isRestartRequiredAfterChange()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r106 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean isRestartRequiredAfterChange()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r105.<org.apache.ambari.server.state.ServiceInfo: void setRestartRequiredAfterChange(java.lang.Boolean)>($r106)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r105.<org.apache.ambari.server.state.ServiceInfo: void setRestartRequiredAfterChange(java.lang.Boolean)>($r106) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setRestartRequiredAfterChange : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean restartRequiredAfterChange> = r1
org.apache.ambari.server.state.ServiceInfo.setRestartRequiredAfterChange : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean restartRequiredAfterChange> = r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r27 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r27 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r28 = virtualinvoke $r27.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean isRestartRequiredAfterRackChange()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r28 = virtualinvoke $r27.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean isRestartRequiredAfterRackChange()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.isRestartRequiredAfterRackChange : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean restartRequiredAfterRackChange>
org.apache.ambari.server.state.ServiceInfo.isRestartRequiredAfterRackChange : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean restartRequiredAfterRackChange> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.isRestartRequiredAfterRackChange : return $r1
org.apache.ambari.server.state.ServiceInfo.isRestartRequiredAfterRackChange : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r28 != null
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r28 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r103 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r103 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r104 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean isRestartRequiredAfterRackChange()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r104 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean isRestartRequiredAfterRackChange()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r103.<org.apache.ambari.server.state.ServiceInfo: void setRestartRequiredAfterRackChange(java.lang.Boolean)>($r104)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r103.<org.apache.ambari.server.state.ServiceInfo: void setRestartRequiredAfterRackChange(java.lang.Boolean)>($r104) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setRestartRequiredAfterRackChange : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean restartRequiredAfterRackChange> = r1
org.apache.ambari.server.state.ServiceInfo.setRestartRequiredAfterRackChange : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean restartRequiredAfterRackChange> = r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r29 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r29 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r30 = virtualinvoke $r29.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean isMonitoringService()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r30 = virtualinvoke $r29.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean isMonitoringService()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.isMonitoringService : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean monitoringService>
org.apache.ambari.server.state.ServiceInfo.isMonitoringService : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean monitoringService> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.isMonitoringService : return $r1
org.apache.ambari.server.state.ServiceInfo.isMonitoringService : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r30 != null
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r30 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r101 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r101 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r102 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean isMonitoringService()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r102 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean isMonitoringService()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r101.<org.apache.ambari.server.state.ServiceInfo: void setMonitoringService(java.lang.Boolean)>($r102)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r101.<org.apache.ambari.server.state.ServiceInfo: void setMonitoringService(java.lang.Boolean)>($r102) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setMonitoringService : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean monitoringService> = r1
org.apache.ambari.server.state.ServiceInfo.setMonitoringService : r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean monitoringService> = r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r31 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r31 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r32 = virtualinvoke $r31.<org.apache.ambari.server.state.ServiceInfo: java.util.Map getOsSpecifics()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r32 = virtualinvoke $r31.<org.apache.ambari.server.state.ServiceInfo: java.util.Map getOsSpecifics()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : $r6 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map serviceOsSpecificsMap>
org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : $r6 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map serviceOsSpecificsMap> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : if $r6 != null
org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : if $r6 != null >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : entermonitor r0
org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : entermonitor r0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : $r9 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map serviceOsSpecificsMap>
org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : $r9 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map serviceOsSpecificsMap> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : if $r9 != null
org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : if $r9 != null >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : $r10 = new java.util.TreeMap
org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : $r10 = new java.util.TreeMap >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : specialinvoke $r10.<java.util.TreeMap: void <init>()>()
org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : specialinvoke $r10.<java.util.TreeMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : $r11 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List serviceOsSpecifics>
org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : $r11 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List serviceOsSpecifics> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : if $r11 == null
org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : if $r11 == null >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map serviceOsSpecificsMap> = $r10
org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map serviceOsSpecificsMap> = $r10 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : exitmonitor r0
org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : exitmonitor r0 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : goto [?= $r7 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map serviceOsSpecificsMap>]
org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : goto [?= $r7 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map serviceOsSpecificsMap>] >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : $r7 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map serviceOsSpecificsMap>
org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : $r7 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map serviceOsSpecificsMap> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : return $r7
org.apache.ambari.server.state.ServiceInfo.getOsSpecifics : return $r7 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $z4 = interfaceinvoke $r32.<java.util.Map: boolean isEmpty()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $z4 = interfaceinvoke $r32.<java.util.Map: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $z4 == 0
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $z4 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r99 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r99 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r100 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.util.Map getOsSpecifics()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r100 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.util.Map getOsSpecifics()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r99.<org.apache.ambari.server.state.ServiceInfo: void setOsSpecifics(java.util.Map)>($r100)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r99.<org.apache.ambari.server.state.ServiceInfo: void setOsSpecifics(java.util.Map)>($r100) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setOsSpecifics : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map serviceOsSpecificsMap> = r1
org.apache.ambari.server.state.ServiceInfo.setOsSpecifics : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map serviceOsSpecificsMap> = r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r33 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r33 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r34 = virtualinvoke $r33.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.CommandScriptDefinition getCommandScript()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r34 = virtualinvoke $r33.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.CommandScriptDefinition getCommandScript()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getCommandScript : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.CommandScriptDefinition commandScript>
org.apache.ambari.server.state.ServiceInfo.getCommandScript : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.CommandScriptDefinition commandScript> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getCommandScript : return $r1
org.apache.ambari.server.state.ServiceInfo.getCommandScript : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r34 != null
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r34 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r97 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r97 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r98 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.CommandScriptDefinition getCommandScript()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r98 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.CommandScriptDefinition getCommandScript()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r97.<org.apache.ambari.server.state.ServiceInfo: void setCommandScript(org.apache.ambari.server.state.CommandScriptDefinition)>($r98)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r97.<org.apache.ambari.server.state.ServiceInfo: void setCommandScript(org.apache.ambari.server.state.CommandScriptDefinition)>($r98) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setCommandScript : r0.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.CommandScriptDefinition commandScript> = r1
org.apache.ambari.server.state.ServiceInfo.setCommandScript : r0.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.CommandScriptDefinition commandScript> = r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r35 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r35 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r36 = virtualinvoke $r35.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getServicePackageFolder()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r36 = virtualinvoke $r35.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getServicePackageFolder()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getServicePackageFolder : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String servicePackageFolder>
org.apache.ambari.server.state.ServiceInfo.getServicePackageFolder : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String servicePackageFolder> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getServicePackageFolder : return $r1
org.apache.ambari.server.state.ServiceInfo.getServicePackageFolder : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r36 != null
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r36 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r37 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r37 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r38 = virtualinvoke $r37.<org.apache.ambari.server.state.ServiceInfo: java.io.File getServiceUpgradesFolder()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r38 = virtualinvoke $r37.<org.apache.ambari.server.state.ServiceInfo: java.io.File getServiceUpgradesFolder()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getServiceUpgradesFolder : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File serviceUpgradesFolder>
org.apache.ambari.server.state.ServiceInfo.getServiceUpgradesFolder : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File serviceUpgradesFolder> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getServiceUpgradesFolder : return $r1
org.apache.ambari.server.state.ServiceInfo.getServiceUpgradesFolder : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r38 != null
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r38 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r93 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r93 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r94 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.io.File getServiceUpgradesFolder()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r94 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.io.File getServiceUpgradesFolder()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r93.<org.apache.ambari.server.state.ServiceInfo: void setServiceUpgradesFolder(java.io.File)>($r94)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r93.<org.apache.ambari.server.state.ServiceInfo: void setServiceUpgradesFolder(java.io.File)>($r94) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r39 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r39 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r40 = virtualinvoke $r39.<org.apache.ambari.server.state.ServiceInfo: java.io.File getMetricsFile()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r40 = virtualinvoke $r39.<org.apache.ambari.server.state.ServiceInfo: java.io.File getMetricsFile()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getMetricsFile : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File metricsFile>
org.apache.ambari.server.state.ServiceInfo.getMetricsFile : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File metricsFile> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getMetricsFile : return $r1
org.apache.ambari.server.state.ServiceInfo.getMetricsFile : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r40 != null
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r40 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r41 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r41 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r42 = virtualinvoke $r41.<org.apache.ambari.server.state.ServiceInfo: java.io.File getAlertsFile()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r42 = virtualinvoke $r41.<org.apache.ambari.server.state.ServiceInfo: java.io.File getAlertsFile()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getAlertsFile : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File alertsFile>
org.apache.ambari.server.state.ServiceInfo.getAlertsFile : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File alertsFile> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getAlertsFile : return $r1
org.apache.ambari.server.state.ServiceInfo.getAlertsFile : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r42 != null
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r42 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r43 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r43 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r44 = virtualinvoke $r43.<org.apache.ambari.server.state.ServiceInfo: java.io.File getKerberosDescriptorFile()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r44 = virtualinvoke $r43.<org.apache.ambari.server.state.ServiceInfo: java.io.File getKerberosDescriptorFile()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getKerberosDescriptorFile : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File kerberosDescriptorFile>
org.apache.ambari.server.state.ServiceInfo.getKerberosDescriptorFile : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File kerberosDescriptorFile> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getKerberosDescriptorFile : return $r1
org.apache.ambari.server.state.ServiceInfo.getKerberosDescriptorFile : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r44 != null
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r44 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r45 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r45 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r46 = virtualinvoke $r45.<org.apache.ambari.server.state.ServiceInfo: java.util.Map getThemesMap()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r46 = virtualinvoke $r45.<org.apache.ambari.server.state.ServiceInfo: java.util.Map getThemesMap()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getThemesMap : $r4 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map themesMap>
org.apache.ambari.server.state.ServiceInfo.getThemesMap : $r4 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map themesMap> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getThemesMap : if $r4 != null
org.apache.ambari.server.state.ServiceInfo.getThemesMap : if $r4 != null >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getThemesMap : $r5 = new java.util.TreeMap
org.apache.ambari.server.state.ServiceInfo.getThemesMap : $r5 = new java.util.TreeMap >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getThemesMap : specialinvoke $r5.<java.util.TreeMap: void <init>()>()
org.apache.ambari.server.state.ServiceInfo.getThemesMap : specialinvoke $r5.<java.util.TreeMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getThemesMap : $r6 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List themes>
org.apache.ambari.server.state.ServiceInfo.getThemesMap : $r6 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List themes> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getThemesMap : if $r6 == null
org.apache.ambari.server.state.ServiceInfo.getThemesMap : if $r6 == null >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getThemesMap : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map themesMap> = $r5
org.apache.ambari.server.state.ServiceInfo.getThemesMap : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map themesMap> = $r5 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getThemesMap : $r11 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map themesMap>
org.apache.ambari.server.state.ServiceInfo.getThemesMap : $r11 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map themesMap> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getThemesMap : return $r11
org.apache.ambari.server.state.ServiceInfo.getThemesMap : return $r11 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $z5 = interfaceinvoke $r46.<java.util.Map: boolean isEmpty()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $z5 = interfaceinvoke $r46.<java.util.Map: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $z5 == 0
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $z5 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r85 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r85 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r86 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.util.Map getThemesMap()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r86 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.util.Map getThemesMap()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r85.<org.apache.ambari.server.state.ServiceInfo: void setThemesMap(java.util.Map)>($r86)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r85.<org.apache.ambari.server.state.ServiceInfo: void setThemesMap(java.util.Map)>($r86) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setThemesMap : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map themesMap> = r1
org.apache.ambari.server.state.ServiceInfo.setThemesMap : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map themesMap> = r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r47 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r47 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r48 = virtualinvoke $r47.<org.apache.ambari.server.state.ServiceInfo: java.io.File getWidgetsDescriptorFile()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r48 = virtualinvoke $r47.<org.apache.ambari.server.state.ServiceInfo: java.io.File getWidgetsDescriptorFile()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getWidgetsDescriptorFile : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File widgetsDescriptorFile>
org.apache.ambari.server.state.ServiceInfo.getWidgetsDescriptorFile : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File widgetsDescriptorFile> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getWidgetsDescriptorFile : return $r1
org.apache.ambari.server.state.ServiceInfo.getWidgetsDescriptorFile : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r48 != null
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r48 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r49 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r49 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r50 = virtualinvoke $r49.<org.apache.ambari.server.state.ServiceInfo: java.io.File getAdvisorFile()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r50 = virtualinvoke $r49.<org.apache.ambari.server.state.ServiceInfo: java.io.File getAdvisorFile()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getAdvisorFile : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File advisorFile>
org.apache.ambari.server.state.ServiceInfo.getAdvisorFile : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File advisorFile> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getAdvisorFile : return $r1
org.apache.ambari.server.state.ServiceInfo.getAdvisorFile : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r50 != null
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r50 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r81 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r81 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r82 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.io.File getAdvisorFile()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r82 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.io.File getAdvisorFile()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r81.<org.apache.ambari.server.state.ServiceInfo: void setAdvisorFile(java.io.File)>($r82)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r81.<org.apache.ambari.server.state.ServiceInfo: void setAdvisorFile(java.io.File)>($r82) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r51 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r51 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r52 = virtualinvoke $r51.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getAdvisorName()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r52 = virtualinvoke $r51.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getAdvisorName()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getAdvisorName : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String advisorName>
org.apache.ambari.server.state.ServiceInfo.getAdvisorName : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.String advisorName> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getAdvisorName : return $r1
org.apache.ambari.server.state.ServiceInfo.getAdvisorName : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r52 != null
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r52 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r79 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r79 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r80 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getAdvisorName()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r80 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getAdvisorName()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r79.<org.apache.ambari.server.state.ServiceInfo: void setAdvisorName(java.lang.String)>($r80)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r79.<org.apache.ambari.server.state.ServiceInfo: void setAdvisorName(java.lang.String)>($r80) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r53 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r53 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r54 = virtualinvoke $r53.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.stack.StackRoleCommandOrder getRoleCommandOrder()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r54 = virtualinvoke $r53.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.stack.StackRoleCommandOrder getRoleCommandOrder()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getRoleCommandOrder : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.stack.StackRoleCommandOrder roleCommandOrder>
org.apache.ambari.server.state.ServiceInfo.getRoleCommandOrder : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.stack.StackRoleCommandOrder roleCommandOrder> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getRoleCommandOrder : return $r1
org.apache.ambari.server.state.ServiceInfo.getRoleCommandOrder : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r54 != null
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r54 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r77 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r77 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r78 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.stack.StackRoleCommandOrder getRoleCommandOrder()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r78 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.stack.StackRoleCommandOrder getRoleCommandOrder()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r77.<org.apache.ambari.server.state.ServiceInfo: void setRoleCommandOrder(org.apache.ambari.server.state.stack.StackRoleCommandOrder)>($r78)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r77.<org.apache.ambari.server.state.ServiceInfo: void setRoleCommandOrder(org.apache.ambari.server.state.stack.StackRoleCommandOrder)>($r78) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r55 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r55 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r56 = virtualinvoke $r55.<org.apache.ambari.server.state.ServiceInfo: java.io.File getChecksFolder()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r56 = virtualinvoke $r55.<org.apache.ambari.server.state.ServiceInfo: java.io.File getChecksFolder()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getChecksFolder : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File checksFolder>
org.apache.ambari.server.state.ServiceInfo.getChecksFolder : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File checksFolder> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getChecksFolder : return $r1
org.apache.ambari.server.state.ServiceInfo.getChecksFolder : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r56 != null
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r56 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r75 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r75 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r76 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.io.File getChecksFolder()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r76 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.io.File getChecksFolder()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r75.<org.apache.ambari.server.state.ServiceInfo: void setChecksFolder(java.io.File)>($r76)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r75.<org.apache.ambari.server.state.ServiceInfo: void setChecksFolder(java.io.File)>($r76) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r57 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r57 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r58 = virtualinvoke $r57.<org.apache.ambari.server.state.ServiceInfo: java.io.File getServerActionsFolder()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r58 = virtualinvoke $r57.<org.apache.ambari.server.state.ServiceInfo: java.io.File getServerActionsFolder()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getServerActionsFolder : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File serverActionsFolder>
org.apache.ambari.server.state.ServiceInfo.getServerActionsFolder : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.io.File serverActionsFolder> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getServerActionsFolder : return $r1
org.apache.ambari.server.state.ServiceInfo.getServerActionsFolder : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r58 != null
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r58 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r73 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r73 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r74 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.io.File getServerActionsFolder()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r74 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.io.File getServerActionsFolder()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r73.<org.apache.ambari.server.state.ServiceInfo: void setServerActionsFolder(java.io.File)>($r74)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r73.<org.apache.ambari.server.state.ServiceInfo: void setServerActionsFolder(java.io.File)>($r74) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r59 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r59 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r60 = virtualinvoke $r59.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.CredentialStoreInfo getCredentialStoreInfo()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r60 = virtualinvoke $r59.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.CredentialStoreInfo getCredentialStoreInfo()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getCredentialStoreInfo : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.CredentialStoreInfo credentialStoreInfo>
org.apache.ambari.server.state.ServiceInfo.getCredentialStoreInfo : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.CredentialStoreInfo credentialStoreInfo> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getCredentialStoreInfo : return $r1
org.apache.ambari.server.state.ServiceInfo.getCredentialStoreInfo : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r60 != null
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $r60 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r71 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r71 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r72 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.CredentialStoreInfo getCredentialStoreInfo()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r72 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.CredentialStoreInfo getCredentialStoreInfo()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r71.<org.apache.ambari.server.state.ServiceInfo: void setCredentialStoreInfo(org.apache.ambari.server.state.CredentialStoreInfo)>($r72)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r71.<org.apache.ambari.server.state.ServiceInfo: void setCredentialStoreInfo(org.apache.ambari.server.state.CredentialStoreInfo)>($r72) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setCredentialStoreInfo : r0.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.CredentialStoreInfo credentialStoreInfo> = r1
org.apache.ambari.server.state.ServiceInfo.setCredentialStoreInfo : r0.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.CredentialStoreInfo credentialStoreInfo> = r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r61 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r61 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $z6 = virtualinvoke $r61.<org.apache.ambari.server.state.ServiceInfo: boolean isSelectionEmpty()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $z6 = virtualinvoke $r61.<org.apache.ambari.server.state.ServiceInfo: boolean isSelectionEmpty()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.isSelectionEmpty : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.ServiceInfo$Selection selection>
org.apache.ambari.server.state.ServiceInfo.isSelectionEmpty : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.ServiceInfo$Selection selection> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.isSelectionEmpty : if $r1 != null
org.apache.ambari.server.state.ServiceInfo.isSelectionEmpty : if $r1 != null >>>>>>>> org.apache.ambari.server.state.ServiceInfo.isSelectionEmpty : $z0 = 1
org.apache.ambari.server.state.ServiceInfo.isSelectionEmpty : $z0 = 1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.isSelectionEmpty : goto [?= return $z0]
org.apache.ambari.server.state.ServiceInfo.isSelectionEmpty : goto [?= return $z0] >>>>>>>> org.apache.ambari.server.state.ServiceInfo.isSelectionEmpty : return $z0
org.apache.ambari.server.state.ServiceInfo.isSelectionEmpty : return $z0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $z6 == 0
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if $z6 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r69 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r69 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r70 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.ServiceInfo$Selection getSelection()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r70 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.ServiceInfo$Selection getSelection()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getSelection : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.ServiceInfo$Selection selection>
org.apache.ambari.server.state.ServiceInfo.getSelection : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.ServiceInfo$Selection selection> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getSelection : if $r1 != null
org.apache.ambari.server.state.ServiceInfo.getSelection : if $r1 != null >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getSelection : $r3 = <org.apache.ambari.server.state.ServiceInfo$Selection: org.apache.ambari.server.state.ServiceInfo$Selection DEFAULT>
org.apache.ambari.server.state.ServiceInfo.getSelection : $r3 = <org.apache.ambari.server.state.ServiceInfo$Selection: org.apache.ambari.server.state.ServiceInfo$Selection DEFAULT> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getSelection : return $r3
org.apache.ambari.server.state.ServiceInfo.getSelection : return $r3 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r69.<org.apache.ambari.server.state.ServiceInfo: void setSelection(org.apache.ambari.server.state.ServiceInfo$Selection)>($r70)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r69.<org.apache.ambari.server.state.ServiceInfo: void setSelection(org.apache.ambari.server.state.ServiceInfo$Selection)>($r70) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setSelection : r0.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.ServiceInfo$Selection selection> = r1
org.apache.ambari.server.state.ServiceInfo.setSelection : r0.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.ServiceInfo$Selection selection> = r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r62 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r62 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r63 = virtualinvoke $r62.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean getSupportDeleteViaUIField()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r63 = virtualinvoke $r62.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean getSupportDeleteViaUIField()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getSupportDeleteViaUIField : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean supportDeleteViaUIField>
org.apache.ambari.server.state.ServiceInfo.getSupportDeleteViaUIField : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean supportDeleteViaUIField> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getSupportDeleteViaUIField : return $r1
org.apache.ambari.server.state.ServiceInfo.getSupportDeleteViaUIField : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : if null != $r63
org.apache.ambari.server.stack.ServiceModule.resolveInternal : if null != $r63 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r68 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r68 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $z7 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: boolean isSupportDeleteViaUI()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $z7 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: boolean isSupportDeleteViaUI()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.isSupportDeleteViaUI : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean supportDeleteViaUIField>
org.apache.ambari.server.state.ServiceInfo.isSupportDeleteViaUI : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.lang.Boolean supportDeleteViaUIField> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.isSupportDeleteViaUI : if null == $r1
org.apache.ambari.server.state.ServiceInfo.isSupportDeleteViaUI : if null == $r1 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.isSupportDeleteViaUI : $z0 = r0.<org.apache.ambari.server.state.ServiceInfo: boolean supportDeleteViaUIInternal>
org.apache.ambari.server.state.ServiceInfo.isSupportDeleteViaUI : $z0 = r0.<org.apache.ambari.server.state.ServiceInfo: boolean supportDeleteViaUIInternal> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.isSupportDeleteViaUI : return $z0
org.apache.ambari.server.state.ServiceInfo.isSupportDeleteViaUI : return $z0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r68.<org.apache.ambari.server.state.ServiceInfo: void setSupportDeleteViaUI(boolean)>($z7)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r68.<org.apache.ambari.server.state.ServiceInfo: void setSupportDeleteViaUI(boolean)>($z7) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setSupportDeleteViaUI : r0.<org.apache.ambari.server.state.ServiceInfo: boolean supportDeleteViaUIInternal> = z0
org.apache.ambari.server.state.ServiceInfo.setSupportDeleteViaUI : r0.<org.apache.ambari.server.state.ServiceInfo: boolean supportDeleteViaUIInternal> = z0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r64 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.util.List getCustomCommands()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r64 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.util.List getCustomCommands()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getCustomCommands : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List customCommands>
org.apache.ambari.server.state.ServiceInfo.getCustomCommands : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List customCommands> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getCustomCommands : if $r1 != null
org.apache.ambari.server.state.ServiceInfo.getCustomCommands : if $r1 != null >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getCustomCommands : $r3 = new java.util.ArrayList
org.apache.ambari.server.state.ServiceInfo.getCustomCommands : $r3 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getCustomCommands : specialinvoke $r3.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.ServiceInfo.getCustomCommands : specialinvoke $r3.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getCustomCommands : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List customCommands> = $r3
org.apache.ambari.server.state.ServiceInfo.getCustomCommands : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List customCommands> = $r3 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getCustomCommands : $r2 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List customCommands>
org.apache.ambari.server.state.ServiceInfo.getCustomCommands : $r2 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List customCommands> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getCustomCommands : return $r2
org.apache.ambari.server.state.ServiceInfo.getCustomCommands : return $r2 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r65 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r65 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r66 = virtualinvoke $r65.<org.apache.ambari.server.state.ServiceInfo: java.util.List getCustomCommands()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r66 = virtualinvoke $r65.<org.apache.ambari.server.state.ServiceInfo: java.util.List getCustomCommands()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : specialinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void mergeCustomCommands(java.util.Collection,java.util.Collection)>($r64, $r66)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : specialinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void mergeCustomCommands(java.util.Collection,java.util.Collection)>($r64, $r66) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeCustomCommands : $r4 = new java.util.HashSet
org.apache.ambari.server.stack.ServiceModule.mergeCustomCommands : $r4 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeCustomCommands : specialinvoke $r4.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.stack.ServiceModule.mergeCustomCommands : specialinvoke $r4.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeCustomCommands : r9 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.ServiceModule.mergeCustomCommands : r9 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeCustomCommands : $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.ServiceModule.mergeCustomCommands : $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeCustomCommands : if $z0 == 0
org.apache.ambari.server.stack.ServiceModule.mergeCustomCommands : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeCustomCommands : r11 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.ServiceModule.mergeCustomCommands : r11 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeCustomCommands : $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.ServiceModule.mergeCustomCommands : $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeCustomCommands : if $z1 == 0
org.apache.ambari.server.stack.ServiceModule.mergeCustomCommands : if $z1 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : specialinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void mergeConfigDependencies(org.apache.ambari.server.state.ServiceInfo)>(r5)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : specialinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void mergeConfigDependencies(org.apache.ambari.server.state.ServiceInfo)>(r5) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigDependencies : $r6 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.mergeConfigDependencies : $r6 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigDependencies : r2 = virtualinvoke $r6.<org.apache.ambari.server.state.ServiceInfo: java.util.List getConfigDependencies()>()
org.apache.ambari.server.stack.ServiceModule.mergeConfigDependencies : r2 = virtualinvoke $r6.<org.apache.ambari.server.state.ServiceInfo: java.util.List getConfigDependencies()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getConfigDependencies : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List configDependencies>
org.apache.ambari.server.state.ServiceInfo.getConfigDependencies : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List configDependencies> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getConfigDependencies : return $r1
org.apache.ambari.server.state.ServiceInfo.getConfigDependencies : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigDependencies : $r7 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.util.List getConfigDependencies()>()
org.apache.ambari.server.stack.ServiceModule.mergeConfigDependencies : $r7 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.util.List getConfigDependencies()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigDependencies : if $r7 == null
org.apache.ambari.server.stack.ServiceModule.mergeConfigDependencies : if $r7 == null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigDependencies : $r10 = staticinvoke <java.util.Collections: java.util.List emptyList()>()
org.apache.ambari.server.stack.ServiceModule.mergeConfigDependencies : $r10 = staticinvoke <java.util.Collections: java.util.List emptyList()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigDependencies : if r2 != null
org.apache.ambari.server.stack.ServiceModule.mergeConfigDependencies : if r2 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigDependencies : $r9 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.mergeConfigDependencies : $r9 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigDependencies : virtualinvoke $r9.<org.apache.ambari.server.state.ServiceInfo: void setConfigDependencies(java.util.List)>($r10)
org.apache.ambari.server.stack.ServiceModule.mergeConfigDependencies : virtualinvoke $r9.<org.apache.ambari.server.state.ServiceInfo: void setConfigDependencies(java.util.List)>($r10) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setConfigDependencies : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List configDependencies> = r1
org.apache.ambari.server.state.ServiceInfo.setConfigDependencies : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List configDependencies> = r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigDependencies : goto [?= return]
org.apache.ambari.server.stack.ServiceModule.mergeConfigDependencies : goto [?= return] >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : specialinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void mergeComponents(org.apache.ambari.server.stack.ServiceModule,java.util.Map,java.util.Map,java.util.Map)>(r1, r2, r3, r4)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : specialinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void mergeComponents(org.apache.ambari.server.stack.ServiceModule,java.util.Map,java.util.Map,java.util.Map)>(r1, r2, r3, r4) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeComponents : $r8 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.mergeComponents : $r8 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeComponents : $r9 = virtualinvoke $r8.<org.apache.ambari.server.state.ServiceInfo: java.util.List getComponents()>()
org.apache.ambari.server.stack.ServiceModule.mergeComponents : $r9 = virtualinvoke $r8.<org.apache.ambari.server.state.ServiceInfo: java.util.List getComponents()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeComponents : interfaceinvoke $r9.<java.util.List: void clear()>()
org.apache.ambari.server.stack.ServiceModule.mergeComponents : interfaceinvoke $r9.<java.util.List: void clear()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeComponents : $r11 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Map componentModules>
org.apache.ambari.server.stack.ServiceModule.mergeComponents : $r11 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Map componentModules> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeComponents : $r10 = r1.<org.apache.ambari.server.stack.ServiceModule: java.util.Map componentModules>
org.apache.ambari.server.stack.ServiceModule.mergeComponents : $r10 = r1.<org.apache.ambari.server.stack.ServiceModule: java.util.Map componentModules> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeComponents : r5 = virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Collection mergeChildModules(java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.Map)>(r2, r3, r4, $r11, $r10)
org.apache.ambari.server.stack.ServiceModule.mergeComponents : r5 = virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Collection mergeChildModules(java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.Map)>(r2, r3, r4, $r11, $r10) >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : $r8 = new java.util.HashSet
org.apache.ambari.server.stack.BaseModule.mergeChildModules : $r8 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : specialinvoke $r8.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.stack.BaseModule.mergeChildModules : specialinvoke $r8.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : $r9 = new java.util.HashSet
org.apache.ambari.server.stack.BaseModule.mergeChildModules : $r9 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : specialinvoke $r9.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.stack.BaseModule.mergeChildModules : specialinvoke $r9.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : $r10 = interfaceinvoke r4.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.stack.BaseModule.mergeChildModules : $r10 = interfaceinvoke r4.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : r15 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.BaseModule.mergeChildModules : r15 = interfaceinvoke $r10.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : $z0 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.BaseModule.mergeChildModules : $z0 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : if $z0 == 0
org.apache.ambari.server.stack.BaseModule.mergeChildModules : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : $r11 = interfaceinvoke r5.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.stack.BaseModule.mergeChildModules : $r11 = interfaceinvoke r5.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : r18 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.BaseModule.mergeChildModules : r18 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : $z1 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.BaseModule.mergeChildModules : $z1 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : if $z1 == 0
org.apache.ambari.server.stack.BaseModule.mergeChildModules : if $z1 == 0 >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : return $r9
org.apache.ambari.server.stack.BaseModule.mergeChildModules : return $r9 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeComponents : $r12 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Map componentModules>
org.apache.ambari.server.stack.ServiceModule.mergeComponents : $r12 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Map componentModules> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeComponents : interfaceinvoke $r12.<java.util.Map: void clear()>()
org.apache.ambari.server.stack.ServiceModule.mergeComponents : interfaceinvoke $r12.<java.util.Map: void clear()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeComponents : r6 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.ServiceModule.mergeComponents : r6 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeComponents : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.ServiceModule.mergeComponents : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeComponents : if $z0 == 0
org.apache.ambari.server.stack.ServiceModule.mergeComponents : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : specialinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void mergeConfigurations(org.apache.ambari.server.stack.ServiceModule,java.util.Map,java.util.Map,java.util.Map)>(r1, r2, r3, r4)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : specialinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void mergeConfigurations(org.apache.ambari.server.stack.ServiceModule,java.util.Map,java.util.Map,java.util.Map)>(r1, r2, r3, r4) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r8 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r8 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r9 = virtualinvoke $r8.<org.apache.ambari.server.state.ServiceInfo: java.util.List getProperties()>()
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r9 = virtualinvoke $r8.<org.apache.ambari.server.state.ServiceInfo: java.util.List getProperties()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : interfaceinvoke $r9.<java.util.List: void clear()>()
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : interfaceinvoke $r9.<java.util.List: void clear()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r11 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r11 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r10 = new java.util.HashMap
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r10 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : specialinvoke $r10.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : specialinvoke $r10.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : virtualinvoke $r11.<org.apache.ambari.server.state.ServiceInfo: void setAllConfigAttributes(java.util.Map)>($r10)
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : virtualinvoke $r11.<org.apache.ambari.server.state.ServiceInfo: void setAllConfigAttributes(java.util.Map)>($r10) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setAllConfigAttributes : $r4 = new java.util.HashMap
org.apache.ambari.server.state.ServiceInfo.setAllConfigAttributes : $r4 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setAllConfigAttributes : specialinvoke $r4.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.ServiceInfo.setAllConfigAttributes : specialinvoke $r4.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setAllConfigAttributes : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map configTypes> = $r4
org.apache.ambari.server.state.ServiceInfo.setAllConfigAttributes : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Map configTypes> = $r4 >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setAllConfigAttributes : $r5 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.state.ServiceInfo.setAllConfigAttributes : $r5 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setAllConfigAttributes : r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.state.ServiceInfo.setAllConfigAttributes : r2 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setAllConfigAttributes : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.ServiceInfo.setAllConfigAttributes : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setAllConfigAttributes : if $z0 == 0
org.apache.ambari.server.state.ServiceInfo.setAllConfigAttributes : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r13 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Map configurationModules>
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r13 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Map configurationModules> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r12 = r1.<org.apache.ambari.server.stack.ServiceModule: java.util.Map configurationModules>
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r12 = r1.<org.apache.ambari.server.stack.ServiceModule: java.util.Map configurationModules> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : r5 = virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Collection mergeChildModules(java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.Map)>(r2, r3, r4, $r13, $r12)
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : r5 = virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Collection mergeChildModules(java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.Map)>(r2, r3, r4, $r13, $r12) >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : $r13 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.stack.BaseModule.mergeChildModules : $r13 = interfaceinvoke r15.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : r16 = (org.apache.ambari.server.stack.StackDefinitionModule) $r13
org.apache.ambari.server.stack.BaseModule.mergeChildModules : r16 = (org.apache.ambari.server.stack.StackDefinitionModule) $r13 >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : r17 = interfaceinvoke r16.<org.apache.ambari.server.stack.StackDefinitionModule: java.lang.String getId()>()
org.apache.ambari.server.stack.BaseModule.mergeChildModules : r17 = interfaceinvoke r16.<org.apache.ambari.server.stack.StackDefinitionModule: java.lang.String getId()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.getId : $r1 = virtualinvoke r0.<org.apache.ambari.server.stack.ConfigurationModule: java.lang.String getConfigType()>()
org.apache.ambari.server.stack.ConfigurationModule.getId : $r1 = virtualinvoke r0.<org.apache.ambari.server.stack.ConfigurationModule: java.lang.String getConfigType()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.getId : return $r1
org.apache.ambari.server.stack.ConfigurationModule.getId : return $r1 >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>(r17)
org.apache.ambari.server.stack.BaseModule.mergeChildModules : interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>(r17) >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : $z5 = interfaceinvoke r16.<org.apache.ambari.server.stack.StackDefinitionModule: boolean isDeleted()>()
org.apache.ambari.server.stack.BaseModule.mergeChildModules : $z5 = interfaceinvoke r16.<org.apache.ambari.server.stack.StackDefinitionModule: boolean isDeleted()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.isDeleted : $z0 = r0.<org.apache.ambari.server.stack.ConfigurationModule: boolean isDeleted>
org.apache.ambari.server.stack.ConfigurationModule.isDeleted : $z0 = r0.<org.apache.ambari.server.stack.ConfigurationModule: boolean isDeleted> >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.isDeleted : return $z0
org.apache.ambari.server.stack.ConfigurationModule.isDeleted : return $z0 >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : if $z5 != 0
org.apache.ambari.server.stack.BaseModule.mergeChildModules : if $z5 != 0 >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : $z7 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r17)
org.apache.ambari.server.stack.BaseModule.mergeChildModules : $z7 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r17) >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : if $z7 == 0
org.apache.ambari.server.stack.BaseModule.mergeChildModules : if $z7 == 0 >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : $r14 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r17)
org.apache.ambari.server.stack.BaseModule.mergeChildModules : $r14 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r17) >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : interfaceinvoke r16.<org.apache.ambari.server.stack.StackDefinitionModule: void resolve(java.lang.Object,java.util.Map,java.util.Map,java.util.Map)>($r14, r1, r2, r3)
org.apache.ambari.server.stack.BaseModule.mergeChildModules : interfaceinvoke r16.<org.apache.ambari.server.stack.StackDefinitionModule: void resolve(java.lang.Object,java.util.Map,java.util.Map,java.util.Map)>($r14, r1, r2, r3) >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.resolve : $r5 = (org.apache.ambari.server.stack.ConfigurationModule) r1
org.apache.ambari.server.stack.ConfigurationModule.resolve : $r5 = (org.apache.ambari.server.stack.ConfigurationModule) r1 >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.resolve : virtualinvoke r0.<org.apache.ambari.server.stack.ConfigurationModule: void resolve(org.apache.ambari.server.stack.ConfigurationModule,java.util.Map,java.util.Map,java.util.Map)>($r5, r2, r3, r4)
org.apache.ambari.server.stack.ConfigurationModule.resolve : virtualinvoke r0.<org.apache.ambari.server.stack.ConfigurationModule: void resolve(org.apache.ambari.server.stack.ConfigurationModule,java.util.Map,java.util.Map,java.util.Map)>($r5, r2, r3, r4) >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.resolve : if r1 == null
org.apache.ambari.server.stack.ConfigurationModule.resolve : if r1 == null >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.resolve : $r5 = r1.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo info>
org.apache.ambari.server.stack.ConfigurationModule.resolve : $r5 = r1.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo info> >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.resolve : if $r5 == null
org.apache.ambari.server.stack.ConfigurationModule.resolve : if $r5 == null >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.resolve : $z0 = virtualinvoke r1.<org.apache.ambari.server.stack.ConfigurationModule: boolean isValid()>()
org.apache.ambari.server.stack.ConfigurationModule.resolve : $z0 = virtualinvoke r1.<org.apache.ambari.server.stack.ConfigurationModule: boolean isValid()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.resolve : if $z0 == 0
org.apache.ambari.server.stack.ConfigurationModule.resolve : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.resolve : $r15 = r1.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo info>
org.apache.ambari.server.stack.ConfigurationModule.resolve : $r15 = r1.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo info> >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.resolve : $z1 = virtualinvoke $r15.<org.apache.ambari.server.stack.ConfigurationInfo: boolean isValid()>()
org.apache.ambari.server.stack.ConfigurationModule.resolve : $z1 = virtualinvoke $r15.<org.apache.ambari.server.stack.ConfigurationInfo: boolean isValid()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.resolve : if $z1 != 0
org.apache.ambari.server.stack.ConfigurationModule.resolve : if $z1 != 0 >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.resolve : specialinvoke r0.<org.apache.ambari.server.stack.ConfigurationModule: void mergeProperties(org.apache.ambari.server.stack.ConfigurationModule)>(r1)
org.apache.ambari.server.stack.ConfigurationModule.resolve : specialinvoke r0.<org.apache.ambari.server.stack.ConfigurationModule: void mergeProperties(org.apache.ambari.server.stack.ConfigurationModule)>(r1) >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : $r5 = new java.util.HashSet
org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : $r5 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : specialinvoke $r5.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : specialinvoke $r5.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : $r6 = r0.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo info>
org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : $r6 = r0.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo info> >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : $r7 = virtualinvoke $r6.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Collection getProperties()>()
org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : $r7 = virtualinvoke $r6.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Collection getProperties()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : r3 = interfaceinvoke $r7.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : if $z0 == 0
org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : $z1 = specialinvoke r0.<org.apache.ambari.server.stack.ConfigurationModule: boolean isExtensionEnabled()>()
org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : $z1 = specialinvoke r0.<org.apache.ambari.server.stack.ConfigurationModule: boolean isExtensionEnabled()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.isExtensionEnabled : $r3 = virtualinvoke r0.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo getModuleInfo()>()
org.apache.ambari.server.stack.ConfigurationModule.isExtensionEnabled : $r3 = virtualinvoke r0.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo getModuleInfo()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.isExtensionEnabled : $r4 = virtualinvoke $r3.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map getAttributes()>()
org.apache.ambari.server.stack.ConfigurationModule.isExtensionEnabled : $r4 = virtualinvoke $r3.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map getAttributes()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.isExtensionEnabled : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>("supports")
org.apache.ambari.server.stack.ConfigurationModule.isExtensionEnabled : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>("supports") >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.isExtensionEnabled : r1 = (java.util.Map) $r5
org.apache.ambari.server.stack.ConfigurationModule.isExtensionEnabled : r1 = (java.util.Map) $r5 >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.isExtensionEnabled : if r1 != null
org.apache.ambari.server.stack.ConfigurationModule.isExtensionEnabled : if r1 != null >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.isExtensionEnabled : $r6 = <org.apache.ambari.server.stack.ConfigurationInfo$Supports: org.apache.ambari.server.stack.ConfigurationInfo$Supports DO_NOT_EXTEND>
org.apache.ambari.server.stack.ConfigurationModule.isExtensionEnabled : $r6 = <org.apache.ambari.server.stack.ConfigurationInfo$Supports: org.apache.ambari.server.stack.ConfigurationInfo$Supports DO_NOT_EXTEND> >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.isExtensionEnabled : $r7 = virtualinvoke $r6.<org.apache.ambari.server.stack.ConfigurationInfo$Supports: java.lang.String getPropertyName()>()
org.apache.ambari.server.stack.ConfigurationModule.isExtensionEnabled : $r7 = virtualinvoke $r6.<org.apache.ambari.server.stack.ConfigurationInfo$Supports: java.lang.String getPropertyName()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.getPropertyName : $r1 = virtualinvoke r0.<org.apache.ambari.server.stack.ConfigurationInfo$Supports: java.lang.String name()>()
org.apache.ambari.server.stack.ConfigurationInfo$Supports.getPropertyName : $r1 = virtualinvoke r0.<org.apache.ambari.server.stack.ConfigurationInfo$Supports: java.lang.String name()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.getPropertyName : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>()
org.apache.ambari.server.stack.ConfigurationInfo$Supports.getPropertyName : $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String toLowerCase()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.getPropertyName : return $r2
org.apache.ambari.server.stack.ConfigurationInfo$Supports.getPropertyName : return $r2 >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.isExtensionEnabled : $r8 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7)
org.apache.ambari.server.stack.ConfigurationModule.isExtensionEnabled : $r8 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7) >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.isExtensionEnabled : r2 = (java.lang.String) $r8
org.apache.ambari.server.stack.ConfigurationModule.isExtensionEnabled : r2 = (java.lang.String) $r8 >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.isExtensionEnabled : if r2 == null
org.apache.ambari.server.stack.ConfigurationModule.isExtensionEnabled : if r2 == null >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.isExtensionEnabled : $z1 = 1
org.apache.ambari.server.stack.ConfigurationModule.isExtensionEnabled : $z1 = 1 >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.isExtensionEnabled : goto [?= return $z1]
org.apache.ambari.server.stack.ConfigurationModule.isExtensionEnabled : goto [?= return $z1] >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.isExtensionEnabled : return $z1
org.apache.ambari.server.stack.ConfigurationModule.isExtensionEnabled : return $z1 >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : if $z1 == 0
org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : if $z1 == 0 >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : $r8 = r1.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo info>
org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : $r8 = r1.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo info> >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : $r9 = virtualinvoke $r8.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Collection getProperties()>()
org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : $r9 = virtualinvoke $r8.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Collection getProperties()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : r29 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : r29 = interfaceinvoke $r9.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : $z2 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : $z2 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : if $z2 == 0
org.apache.ambari.server.stack.ConfigurationModule.mergeProperties : if $z2 == 0 >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.resolve : $z2 = specialinvoke r0.<org.apache.ambari.server.stack.ConfigurationModule: boolean isExtensionEnabled()>()
org.apache.ambari.server.stack.ConfigurationModule.resolve : $z2 = specialinvoke r0.<org.apache.ambari.server.stack.ConfigurationModule: boolean isExtensionEnabled()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.resolve : if $z2 == 0
org.apache.ambari.server.stack.ConfigurationModule.resolve : if $z2 == 0 >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.resolve : specialinvoke r0.<org.apache.ambari.server.stack.ConfigurationModule: void mergeAttributes(org.apache.ambari.server.stack.ConfigurationModule)>(r1)
org.apache.ambari.server.stack.ConfigurationModule.resolve : specialinvoke r0.<org.apache.ambari.server.stack.ConfigurationModule: void mergeAttributes(org.apache.ambari.server.stack.ConfigurationModule)>(r1) >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : $r8 = r1.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo info>
org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : $r8 = r1.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo info> >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : $r9 = virtualinvoke $r8.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map getAttributes()>()
org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : $r9 = virtualinvoke $r8.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map getAttributes()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : $r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : r2 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : r2 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : if $z0 == 0
org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : $r11 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : r3 = (java.util.Map$Entry) $r11
org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : r3 = (java.util.Map$Entry) $r11 >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : $r12 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : r4 = (java.lang.String) $r12
org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : r4 = (java.lang.String) $r12 >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : $r13 = r0.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo info>
org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : $r13 = r0.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo info> >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : $r14 = virtualinvoke $r13.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map getAttributes()>()
org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : $r14 = virtualinvoke $r13.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map getAttributes()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4)
org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : r27 = (java.util.Map) $r15
org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : r27 = (java.util.Map) $r15 >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : if r27 != null
org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : if r27 != null >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : $r16 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : $r17 = (java.util.Map) $r16
org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : $r17 = (java.util.Map) $r16 >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : $r18 = interfaceinvoke $r17.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : $r18 = interfaceinvoke $r17.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : r5 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : r5 = interfaceinvoke $r18.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : if $z2 == 0
org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : if $z2 == 0 >>>>>>>> org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.stack.ConfigurationModule.mergeAttributes : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : interfaceinvoke $r9.<java.util.Collection: boolean add(java.lang.Object)>(r16)
org.apache.ambari.server.stack.BaseModule.mergeChildModules : interfaceinvoke $r9.<java.util.Collection: boolean add(java.lang.Object)>(r16) >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : goto [?= $z0 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.stack.BaseModule.mergeChildModules : goto [?= $z0 = interfaceinvoke r15.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : $r12 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.stack.BaseModule.mergeChildModules : $r12 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : r19 = (org.apache.ambari.server.stack.StackDefinitionModule) $r12
org.apache.ambari.server.stack.BaseModule.mergeChildModules : r19 = (org.apache.ambari.server.stack.StackDefinitionModule) $r12 >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : r20 = interfaceinvoke r19.<org.apache.ambari.server.stack.StackDefinitionModule: java.lang.String getId()>()
org.apache.ambari.server.stack.BaseModule.mergeChildModules : r20 = interfaceinvoke r19.<org.apache.ambari.server.stack.StackDefinitionModule: java.lang.String getId()>() >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : $z2 = interfaceinvoke $r8.<java.util.Set: boolean contains(java.lang.Object)>(r20)
org.apache.ambari.server.stack.BaseModule.mergeChildModules : $z2 = interfaceinvoke $r8.<java.util.Set: boolean contains(java.lang.Object)>(r20) >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : if $z2 != 0
org.apache.ambari.server.stack.BaseModule.mergeChildModules : if $z2 != 0 >>>>>>>> org.apache.ambari.server.stack.BaseModule.mergeChildModules : goto [?= $z1 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.stack.BaseModule.mergeChildModules : goto [?= $z1 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : r6 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : r6 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : if $z0 == 0
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r14 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r14 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : r7 = (org.apache.ambari.server.stack.ConfigurationModule) $r14
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : r7 = (org.apache.ambari.server.stack.ConfigurationModule) $r14 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r15 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Map configurationModules>
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r15 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Map configurationModules> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r16 = virtualinvoke r7.<org.apache.ambari.server.stack.ConfigurationModule: java.lang.String getId()>()
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r16 = virtualinvoke r7.<org.apache.ambari.server.stack.ConfigurationModule: java.lang.String getId()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r7)
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r7) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $z1 = virtualinvoke r7.<org.apache.ambari.server.stack.ConfigurationModule: boolean isDeleted()>()
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $z1 = virtualinvoke r7.<org.apache.ambari.server.stack.ConfigurationModule: boolean isDeleted()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : if $z1 != 0
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : if $z1 != 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r18 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r18 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r19 = virtualinvoke $r18.<org.apache.ambari.server.state.ServiceInfo: java.util.List getProperties()>()
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r19 = virtualinvoke $r18.<org.apache.ambari.server.state.ServiceInfo: java.util.List getProperties()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r20 = virtualinvoke r7.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo getModuleInfo()>()
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r20 = virtualinvoke r7.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo getModuleInfo()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r21 = virtualinvoke $r20.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Collection getProperties()>()
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r21 = virtualinvoke $r20.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Collection getProperties()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : interfaceinvoke $r19.<java.util.List: boolean addAll(java.util.Collection)>($r21)
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : interfaceinvoke $r19.<java.util.List: boolean addAll(java.util.Collection)>($r21) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r22 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r22 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r23 = virtualinvoke r7.<org.apache.ambari.server.stack.ConfigurationModule: java.lang.String getConfigType()>()
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r23 = virtualinvoke r7.<org.apache.ambari.server.stack.ConfigurationModule: java.lang.String getConfigType()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r24 = virtualinvoke r7.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo getModuleInfo()>()
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r24 = virtualinvoke r7.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo getModuleInfo()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r25 = virtualinvoke $r24.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map getAttributes()>()
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : $r25 = virtualinvoke $r24.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map getAttributes()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : virtualinvoke $r22.<org.apache.ambari.server.state.ServiceInfo: void setTypeAttributes(java.lang.String,java.util.Map)>($r23, $r25)
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : virtualinvoke $r22.<org.apache.ambari.server.state.ServiceInfo: void setTypeAttributes(java.lang.String,java.util.Map)>($r23, $r25) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.stack.ServiceModule.mergeConfigurations : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : specialinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void mergeThemes(org.apache.ambari.server.stack.ServiceModule,java.util.Map,java.util.Map,java.util.Map)>(r1, r2, r3, r4)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : specialinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void mergeThemes(org.apache.ambari.server.stack.ServiceModule,java.util.Map,java.util.Map,java.util.Map)>(r1, r2, r3, r4) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeThemes : $r10 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Map themeModules>
org.apache.ambari.server.stack.ServiceModule.mergeThemes : $r10 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Map themeModules> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeThemes : $r9 = r1.<org.apache.ambari.server.stack.ServiceModule: java.util.Map themeModules>
org.apache.ambari.server.stack.ServiceModule.mergeThemes : $r9 = r1.<org.apache.ambari.server.stack.ServiceModule: java.util.Map themeModules> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeThemes : r5 = virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Collection mergeChildModules(java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.Map)>(r2, r3, r4, $r10, $r9)
org.apache.ambari.server.stack.ServiceModule.mergeThemes : r5 = virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Collection mergeChildModules(java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.Map)>(r2, r3, r4, $r10, $r9) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeThemes : r6 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.ServiceModule.mergeThemes : r6 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeThemes : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.ServiceModule.mergeThemes : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeThemes : if $z0 == 0
org.apache.ambari.server.stack.ServiceModule.mergeThemes : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : specialinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void mergeQuickLinksConfigurations(org.apache.ambari.server.stack.ServiceModule,java.util.Map,java.util.Map,java.util.Map)>(r1, r2, r3, r4)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : specialinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void mergeQuickLinksConfigurations(org.apache.ambari.server.stack.ServiceModule,java.util.Map,java.util.Map,java.util.Map)>(r1, r2, r3, r4) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeQuickLinksConfigurations : $r10 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Map quickLinksConfigurationModules>
org.apache.ambari.server.stack.ServiceModule.mergeQuickLinksConfigurations : $r10 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Map quickLinksConfigurationModules> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeQuickLinksConfigurations : $r9 = r1.<org.apache.ambari.server.stack.ServiceModule: java.util.Map quickLinksConfigurationModules>
org.apache.ambari.server.stack.ServiceModule.mergeQuickLinksConfigurations : $r9 = r1.<org.apache.ambari.server.stack.ServiceModule: java.util.Map quickLinksConfigurationModules> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeQuickLinksConfigurations : r5 = virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Collection mergeChildModules(java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.Map)>(r2, r3, r4, $r10, $r9)
org.apache.ambari.server.stack.ServiceModule.mergeQuickLinksConfigurations : r5 = virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Collection mergeChildModules(java.util.Map,java.util.Map,java.util.Map,java.util.Map,java.util.Map)>(r2, r3, r4, $r10, $r9) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeQuickLinksConfigurations : r6 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.ServiceModule.mergeQuickLinksConfigurations : r6 = interfaceinvoke r5.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeQuickLinksConfigurations : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.ServiceModule.mergeQuickLinksConfigurations : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeQuickLinksConfigurations : if $z0 == 0
org.apache.ambari.server.stack.ServiceModule.mergeQuickLinksConfigurations : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : specialinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void mergeExcludedConfigTypes(org.apache.ambari.server.state.ServiceInfo)>(r5)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : specialinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void mergeExcludedConfigTypes(org.apache.ambari.server.state.ServiceInfo)>(r5) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeExcludedConfigTypes : $r5 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.mergeExcludedConfigTypes : $r5 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeExcludedConfigTypes : $r6 = virtualinvoke $r5.<org.apache.ambari.server.state.ServiceInfo: java.util.Set getExcludedConfigTypes()>()
org.apache.ambari.server.stack.ServiceModule.mergeExcludedConfigTypes : $r6 = virtualinvoke $r5.<org.apache.ambari.server.state.ServiceInfo: java.util.Set getExcludedConfigTypes()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeExcludedConfigTypes : if $r6 != null
org.apache.ambari.server.stack.ServiceModule.mergeExcludedConfigTypes : if $r6 != null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeExcludedConfigTypes : $r7 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.util.Set getExcludedConfigTypes()>()
org.apache.ambari.server.stack.ServiceModule.mergeExcludedConfigTypes : $r7 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.util.Set getExcludedConfigTypes()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeExcludedConfigTypes : if $r7 == null
org.apache.ambari.server.stack.ServiceModule.mergeExcludedConfigTypes : if $r7 == null >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeExcludedConfigTypes : $r8 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.mergeExcludedConfigTypes : $r8 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeExcludedConfigTypes : r2 = virtualinvoke $r8.<org.apache.ambari.server.state.ServiceInfo: java.util.Set getExcludedConfigTypes()>()
org.apache.ambari.server.stack.ServiceModule.mergeExcludedConfigTypes : r2 = virtualinvoke $r8.<org.apache.ambari.server.state.ServiceInfo: java.util.Set getExcludedConfigTypes()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeExcludedConfigTypes : $r9 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.util.Set getExcludedConfigTypes()>()
org.apache.ambari.server.stack.ServiceModule.mergeExcludedConfigTypes : $r9 = virtualinvoke r1.<org.apache.ambari.server.state.ServiceInfo: java.util.Set getExcludedConfigTypes()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeExcludedConfigTypes : r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.ServiceModule.mergeExcludedConfigTypes : r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeExcludedConfigTypes : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.ServiceModule.mergeExcludedConfigTypes : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeExcludedConfigTypes : if $z0 == 0
org.apache.ambari.server.stack.ServiceModule.mergeExcludedConfigTypes : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeExcludedConfigTypes : $r10 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.mergeExcludedConfigTypes : $r10 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeExcludedConfigTypes : virtualinvoke $r10.<org.apache.ambari.server.state.ServiceInfo: void setExcludedConfigTypes(java.util.Set)>(r2)
org.apache.ambari.server.stack.ServiceModule.mergeExcludedConfigTypes : virtualinvoke $r10.<org.apache.ambari.server.state.ServiceInfo: void setExcludedConfigTypes(java.util.Set)>(r2) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.setExcludedConfigTypes : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Set excludedConfigTypes> = r1
org.apache.ambari.server.state.ServiceInfo.setExcludedConfigTypes : r0.<org.apache.ambari.server.state.ServiceInfo: java.util.Set excludedConfigTypes> = r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r67 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.util.List getServicePropertyList()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r67 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.util.List getServicePropertyList()>() >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getServicePropertyList : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List servicePropertyList>
org.apache.ambari.server.state.ServiceInfo.getServicePropertyList : $r1 = r0.<org.apache.ambari.server.state.ServiceInfo: java.util.List servicePropertyList> >>>>>>>> org.apache.ambari.server.state.ServiceInfo.getServicePropertyList : return $r1
org.apache.ambari.server.state.ServiceInfo.getServicePropertyList : return $r1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : specialinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void mergeServiceProperties(java.util.List)>($r67)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : specialinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void mergeServiceProperties(java.util.List)>($r67) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeServiceProperties : $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.stack.ServiceModule.mergeServiceProperties : $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeServiceProperties : if $z0 != 0
org.apache.ambari.server.stack.ServiceModule.mergeServiceProperties : if $z0 != 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.resolveService : virtualinvoke r1.<org.apache.ambari.server.stack.ServiceModule: void finalizeModule()>()
org.apache.ambari.server.stack.ServiceModuleTest.resolveService : virtualinvoke r1.<org.apache.ambari.server.stack.ServiceModule: void finalizeModule()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeModule : $r1 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Map configurationModules>
org.apache.ambari.server.stack.ServiceModule.finalizeModule : $r1 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Map configurationModules> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeModule : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.stack.ServiceModule.finalizeModule : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeModule : virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void finalizeChildModules(java.util.Collection)>($r2)
org.apache.ambari.server.stack.ServiceModule.finalizeModule : virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void finalizeChildModules(java.util.Collection)>($r2) >>>>>>>> org.apache.ambari.server.stack.BaseModule.finalizeChildModules : r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.BaseModule.finalizeChildModules : r2 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.BaseModule.finalizeChildModules : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.BaseModule.finalizeChildModules : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.BaseModule.finalizeChildModules : if $z0 == 0
org.apache.ambari.server.stack.BaseModule.finalizeChildModules : if $z0 == 0 >>>>>>>> org.apache.ambari.server.stack.BaseModule.finalizeChildModules : $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.stack.BaseModule.finalizeChildModules : $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.stack.BaseModule.finalizeChildModules : r3 = (org.apache.ambari.server.stack.StackDefinitionModule) $r4
org.apache.ambari.server.stack.BaseModule.finalizeChildModules : r3 = (org.apache.ambari.server.stack.StackDefinitionModule) $r4 >>>>>>>> org.apache.ambari.server.stack.BaseModule.finalizeChildModules : interfaceinvoke r3.<org.apache.ambari.server.stack.StackDefinitionModule: void finalizeModule()>()
org.apache.ambari.server.stack.BaseModule.finalizeChildModules : interfaceinvoke r3.<org.apache.ambari.server.stack.StackDefinitionModule: void finalizeModule()>() >>>>>>>> org.apache.ambari.server.stack.BaseModule.finalizeChildModules : $z1 = interfaceinvoke r3.<org.apache.ambari.server.stack.StackDefinitionModule: boolean isDeleted()>()
org.apache.ambari.server.stack.BaseModule.finalizeChildModules : $z1 = interfaceinvoke r3.<org.apache.ambari.server.stack.StackDefinitionModule: boolean isDeleted()>() >>>>>>>> org.apache.ambari.server.stack.BaseModule.finalizeChildModules : if $z1 == 0
org.apache.ambari.server.stack.BaseModule.finalizeChildModules : if $z1 == 0 >>>>>>>> org.apache.ambari.server.stack.BaseModule.finalizeChildModules : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.stack.BaseModule.finalizeChildModules : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeModule : $r3 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Map componentModules>
org.apache.ambari.server.stack.ServiceModule.finalizeModule : $r3 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Map componentModules> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeModule : $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.stack.ServiceModule.finalizeModule : $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeModule : virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void finalizeChildModules(java.util.Collection)>($r4)
org.apache.ambari.server.stack.ServiceModule.finalizeModule : virtualinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void finalizeChildModules(java.util.Collection)>($r4) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeModule : specialinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void finalizeConfiguration()>()
org.apache.ambari.server.stack.ServiceModule.finalizeModule : specialinvoke r0.<org.apache.ambari.server.stack.ServiceModule: void finalizeConfiguration()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $r5 = <org.apache.ambari.server.stack.ServiceModule: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $r5 = <org.apache.ambari.server.stack.ServiceModule: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $r4 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Map configurationModules>
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $r4 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Map configurationModules> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $i0 = interfaceinvoke $r4.<java.util.Map: int size()>()
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $i0 = interfaceinvoke $r4.<java.util.Map: int size()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : interfaceinvoke $r5.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Finalize config, number of configuration modules {}", $r6)
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : interfaceinvoke $r5.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Finalize config, number of configuration modules {}", $r6) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $r7 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Map configurationModules>
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $r7 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Map configurationModules> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $z0 = interfaceinvoke $r7.<java.util.Map: boolean isEmpty()>()
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $z0 = interfaceinvoke $r7.<java.util.Map: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : if $z0 != 0
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : if $z0 != 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $z2 = 1
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $z2 = 1 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : goto [?= r0.<org.apache.ambari.server.stack.ServiceModule: boolean hasConfigs> = $z2]
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : goto [?= r0.<org.apache.ambari.server.stack.ServiceModule: boolean hasConfigs> = $z2] >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : r0.<org.apache.ambari.server.stack.ServiceModule: boolean hasConfigs> = $z2
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : r0.<org.apache.ambari.server.stack.ServiceModule: boolean hasConfigs> = $z2 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $r8 = <org.apache.ambari.server.stack.ServiceModule: org.slf4j.Logger LOG>
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $r8 = <org.apache.ambari.server.stack.ServiceModule: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $z1 = r0.<org.apache.ambari.server.stack.ServiceModule: boolean hasConfigs>
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $z1 = r0.<org.apache.ambari.server.stack.ServiceModule: boolean hasConfigs> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1)
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Finalize config, hasConfigs {}", $r9)
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("Finalize config, hasConfigs {}", $r9) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $r10 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Map configurationModules>
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $r10 = r0.<org.apache.ambari.server.stack.ServiceModule: java.util.Map configurationModules> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : r1 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : r1 = interfaceinvoke $r11.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $z3 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $z3 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : if $z3 == 0
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : if $z3 == 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $r12 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $r12 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : r2 = (org.apache.ambari.server.stack.ConfigurationModule) $r12
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : r2 = (org.apache.ambari.server.stack.ConfigurationModule) $r12 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : r3 = virtualinvoke r2.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo getModuleInfo()>()
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : r3 = virtualinvoke r2.<org.apache.ambari.server.stack.ConfigurationModule: org.apache.ambari.server.stack.ConfigurationInfo getModuleInfo()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : virtualinvoke r3.<org.apache.ambari.server.stack.ConfigurationInfo: void ensureDefaultAttributes()>()
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : virtualinvoke r3.<org.apache.ambari.server.stack.ConfigurationInfo: void ensureDefaultAttributes()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : $r5 = r0.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map attributes>
org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : $r5 = r0.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map attributes> >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("supports")
org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("supports") >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : r1 = (java.util.Map) $r6
org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : r1 = (java.util.Map) $r6 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : r2 = staticinvoke <org.apache.ambari.server.stack.ConfigurationInfo$Supports: org.apache.ambari.server.stack.ConfigurationInfo$Supports[] values()>()
org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : r2 = staticinvoke <org.apache.ambari.server.stack.ConfigurationInfo$Supports: org.apache.ambari.server.stack.ConfigurationInfo$Supports[] values()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.values : $r0 = <org.apache.ambari.server.stack.ConfigurationInfo$Supports: org.apache.ambari.server.stack.ConfigurationInfo$Supports[] $VALUES>
org.apache.ambari.server.stack.ConfigurationInfo$Supports.values : $r0 = <org.apache.ambari.server.stack.ConfigurationInfo$Supports: org.apache.ambari.server.stack.ConfigurationInfo$Supports[] $VALUES> >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
org.apache.ambari.server.stack.ConfigurationInfo$Supports.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.values : $r2 = (org.apache.ambari.server.stack.ConfigurationInfo$Supports[]) $r1
org.apache.ambari.server.stack.ConfigurationInfo$Supports.values : $r2 = (org.apache.ambari.server.stack.ConfigurationInfo$Supports[]) $r1 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.values : return $r2
org.apache.ambari.server.stack.ConfigurationInfo$Supports.values : return $r2 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : i0 = lengthof r2
org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : i0 = lengthof r2 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : i1 = 0
org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : i1 = 0 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : if i1 >= i0
org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : if i1 >= i0 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : r3 = r2[i1]
org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : r3 = r2[i1] >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : r4 = virtualinvoke r3.<org.apache.ambari.server.stack.ConfigurationInfo$Supports: java.lang.String getPropertyName()>()
org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : r4 = virtualinvoke r3.<org.apache.ambari.server.stack.ConfigurationInfo$Supports: java.lang.String getPropertyName()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r4)
org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : $z0 = interfaceinvoke r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r4) >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : if $z0 != 0
org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : if $z0 != 0 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : $r7 = virtualinvoke r3.<org.apache.ambari.server.stack.ConfigurationInfo$Supports: java.lang.String getDefaultValue()>()
org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : $r7 = virtualinvoke r3.<org.apache.ambari.server.stack.ConfigurationInfo$Supports: java.lang.String getDefaultValue()>() >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.getDefaultValue : $r1 = r0.<org.apache.ambari.server.stack.ConfigurationInfo$Supports: java.lang.String defaultValue>
org.apache.ambari.server.stack.ConfigurationInfo$Supports.getDefaultValue : $r1 = r0.<org.apache.ambari.server.stack.ConfigurationInfo$Supports: java.lang.String defaultValue> >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo$Supports.getDefaultValue : return $r1
org.apache.ambari.server.stack.ConfigurationInfo$Supports.getDefaultValue : return $r1 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r7)
org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r7) >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : i1 = i1 + 1
org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : i1 = i1 + 1 >>>>>>>> org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : goto [?= (branch)]
org.apache.ambari.server.stack.ConfigurationInfo.ensureDefaultAttributes : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $r13 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $r13 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $r14 = virtualinvoke r2.<org.apache.ambari.server.stack.ConfigurationModule: java.lang.String getConfigType()>()
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $r14 = virtualinvoke r2.<org.apache.ambari.server.stack.ConfigurationModule: java.lang.String getConfigType()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $r15 = virtualinvoke r3.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map getAttributes()>()
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : $r15 = virtualinvoke r3.<org.apache.ambari.server.stack.ConfigurationInfo: java.util.Map getAttributes()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : virtualinvoke $r13.<org.apache.ambari.server.state.ServiceInfo: void setTypeAttributes(java.lang.String,java.util.Map)>($r14, $r15)
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : virtualinvoke $r13.<org.apache.ambari.server.state.ServiceInfo: void setTypeAttributes(java.lang.String,java.util.Map)>($r14, $r15) >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : goto [?= $z3 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.stack.ServiceModule.finalizeConfiguration : goto [?= $z3 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeModule : $r5 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.finalizeModule : $r5 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeModule : $r6 = virtualinvoke $r5.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.CommandScriptDefinition getCommandScript()>()
org.apache.ambari.server.stack.ServiceModule.finalizeModule : $r6 = virtualinvoke $r5.<org.apache.ambari.server.state.ServiceInfo: org.apache.ambari.server.state.CommandScriptDefinition getCommandScript()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.finalizeModule : if $r6 == null
org.apache.ambari.server.stack.ServiceModule.finalizeModule : if $r6 == null >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.resolveService : virtualinvoke r2.<org.apache.ambari.server.stack.ServiceModule: void finalizeModule()>()
org.apache.ambari.server.stack.ServiceModuleTest.resolveService : virtualinvoke r2.<org.apache.ambari.server.stack.ServiceModule: void finalizeModule()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModuleTest.resolveService : return r3
org.apache.ambari.server.stack.ServiceModuleTest.resolveService : return r3 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r112 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo>
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r112 = r0.<org.apache.ambari.server.stack.ServiceModule: org.apache.ambari.server.state.ServiceInfo serviceInfo> >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r113 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getDisplayName()>()
org.apache.ambari.server.stack.ServiceModule.resolveInternal : $r113 = virtualinvoke r5.<org.apache.ambari.server.state.ServiceInfo: java.lang.String getDisplayName()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r112.<org.apache.ambari.server.state.ServiceInfo: void setDisplayName(java.lang.String)>($r113)
org.apache.ambari.server.stack.ServiceModule.resolveInternal : virtualinvoke $r112.<org.apache.ambari.server.state.ServiceInfo: void setDisplayName(java.lang.String)>($r113) >>>>>>>> org.apache.ambari.server.state.ServiceInfo.isSelectionEmpty : $z0 = 0
org.apache.ambari.server.state.ServiceInfo.isSelectionEmpty : $z0 = 0 >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigDependencies : r4 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.stack.ServiceModule.mergeConfigDependencies : r4 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigDependencies : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.stack.ServiceModule.mergeConfigDependencies : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.stack.ServiceModule.mergeConfigDependencies : if $z0 == 0
