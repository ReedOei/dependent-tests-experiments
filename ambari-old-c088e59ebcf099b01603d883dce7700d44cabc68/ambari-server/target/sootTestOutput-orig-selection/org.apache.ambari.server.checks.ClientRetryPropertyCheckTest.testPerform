org.apache.ambari.server.state.StackId.parseStackIdHelper : if r2 == null >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if $z0 == 0
org.apache.ambari.server.state.StackId.parseStackIdHelper : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45)
org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1
org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i1 = virtualinvoke r2.<java.lang.String: int length()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i1 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i2 = i0 + 1
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i2 = i0 + 1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : if $i1 > $i2
org.apache.ambari.server.state.StackId.parseStackIdHelper : if $i1 > $i2 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0)
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = $r8
org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = $r8 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1 >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3)
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r9 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>($i3) >>>>>>>> org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> = $r9
org.apache.ambari.server.state.StackId.parseStackIdHelper : r1.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion> = $r9 >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $r6 = r0.<org.apache.ambari.server.checks.ClientRetryPropertyCheck: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $r6 = r0.<org.apache.ambari.server.checks.ClientRetryPropertyCheck: com.google.inject.Provider clustersProvider> >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $r7 = interfaceinvoke $r6.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $r7 = interfaceinvoke $r6.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.ClientRetryPropertyCheckTest$1: org.apache.ambari.server.state.Clusters get()>()
org.apache.ambari.server.checks.ClientRetryPropertyCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.ClientRetryPropertyCheckTest$1: org.apache.ambari.server.state.Clusters get()>() >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.ClientRetryPropertyCheckTest$1: org.apache.ambari.server.checks.ClientRetryPropertyCheckTest this$0>
org.apache.ambari.server.checks.ClientRetryPropertyCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.ClientRetryPropertyCheckTest$1: org.apache.ambari.server.checks.ClientRetryPropertyCheckTest this$0> >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheckTest$1.get : $r2 = staticinvoke <org.apache.ambari.server.checks.ClientRetryPropertyCheckTest: org.apache.ambari.server.state.Clusters access$000(org.apache.ambari.server.checks.ClientRetryPropertyCheckTest)>($r1)
org.apache.ambari.server.checks.ClientRetryPropertyCheckTest$1.get : $r2 = staticinvoke <org.apache.ambari.server.checks.ClientRetryPropertyCheckTest: org.apache.ambari.server.state.Clusters access$000(org.apache.ambari.server.checks.ClientRetryPropertyCheckTest)>($r1) >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.ClientRetryPropertyCheckTest: org.apache.ambari.server.state.Clusters m_clusters>
org.apache.ambari.server.checks.ClientRetryPropertyCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.ClientRetryPropertyCheckTest: org.apache.ambari.server.state.Clusters m_clusters> >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheckTest.access$000 : return $r1
org.apache.ambari.server.checks.ClientRetryPropertyCheckTest.access$000 : return $r1 >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheckTest$1.get : return $r2
org.apache.ambari.server.checks.ClientRetryPropertyCheckTest$1.get : return $r2 >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheckTest$1.get : return $r1
org.apache.ambari.server.checks.ClientRetryPropertyCheckTest$1.get : return $r1 >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $r8 = (org.apache.ambari.server.state.Clusters) $r7
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $r8 = (org.apache.ambari.server.state.Clusters) $r7 >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $r9 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>()
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $r9 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName>
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : return $r1 >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : r3 = interfaceinvoke $r8.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>($r9)
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : r3 = interfaceinvoke $r8.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>($r9) >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : r4 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: java.util.Map getServices()>()
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : r4 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: java.util.Map getServices()>() >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $r10 = new java.util.ArrayList
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $r10 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : specialinvoke $r10.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : specialinvoke $r10.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $z0 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>("HDFS")
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $z0 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>("HDFS") >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : if $z0 == 0
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : r19 = virtualinvoke r0.<org.apache.ambari.server.checks.ClientRetryPropertyCheck: java.lang.String getProperty(org.apache.ambari.server.controller.PrereqCheckRequest,java.lang.String,java.lang.String)>(r2, "hdfs-site", "dfs.client.retry.policy.enabled")
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : r19 = virtualinvoke r0.<org.apache.ambari.server.checks.ClientRetryPropertyCheck: java.lang.String getProperty(org.apache.ambari.server.controller.PrereqCheckRequest,java.lang.String,java.lang.String)>(r2, "hdfs-site", "dfs.client.retry.policy.enabled") >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r4 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r4 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r10 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r10 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: com.google.inject.Provider clustersProvider> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r11 = interfaceinvoke $r10.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r11 = interfaceinvoke $r10.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r12 = (org.apache.ambari.server.state.Clusters) $r11
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r12 = (org.apache.ambari.server.state.Clusters) $r11 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r5 = interfaceinvoke $r12.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r4)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r5 = interfaceinvoke $r12.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r4) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r6 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: java.util.Map getDesiredConfigs()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r6 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: java.util.Map getDesiredConfigs()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r13 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r13 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r7 = (org.apache.ambari.server.state.DesiredConfig) $r13
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r7 = (org.apache.ambari.server.state.DesiredConfig) $r13 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : if null != r7
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : if null != r7 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r14 = virtualinvoke r7.<org.apache.ambari.server.state.DesiredConfig: java.lang.String getTag()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r14 = virtualinvoke r7.<org.apache.ambari.server.state.DesiredConfig: java.lang.String getTag()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r8 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getConfig(java.lang.String,java.lang.String)>(r2, $r14)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r8 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getConfig(java.lang.String,java.lang.String)>(r2, $r14) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r9 = interfaceinvoke r8.<org.apache.ambari.server.state.Config: java.util.Map getProperties()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : r9 = interfaceinvoke r8.<org.apache.ambari.server.state.Config: java.util.Map getProperties()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r15 = interfaceinvoke r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r15 = interfaceinvoke r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r16 = (java.lang.String) $r15
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : $r16 = (java.lang.String) $r15 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : return $r16
org.apache.ambari.server.checks.AbstractCheckDescriptor.getProperty : return $r16 >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : if null == r19
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : if null == r19 >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $z6 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r19)
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $z6 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r19) >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : if $z6 == 0
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : if $z6 == 0 >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $r17 = virtualinvoke r0.<org.apache.ambari.server.checks.ClientRetryPropertyCheck: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("hdfs.client.retry.enabled.key", r1, r2)
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $r17 = virtualinvoke r0.<org.apache.ambari.server.checks.ClientRetryPropertyCheck: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("hdfs.client.retry.enabled.key", r1, r2) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r12 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription m_description>
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r12 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription m_description> >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r32 = virtualinvoke $r12.<org.apache.ambari.server.checks.CheckDescription: java.lang.String getFail(java.lang.String)>(r1)
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r32 = virtualinvoke $r12.<org.apache.ambari.server.checks.CheckDescription: java.lang.String getFail(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r2 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails>
org.apache.ambari.server.checks.CheckDescription.getFail : $r2 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails> >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.ambari.server.checks.CheckDescription.getFail : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : if $z0 == 0
org.apache.ambari.server.checks.CheckDescription.getFail : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r3 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails>
org.apache.ambari.server.checks.CheckDescription.getFail : $r3 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails> >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.ambari.server.checks.CheckDescription.getFail : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : $r5 = (java.lang.String) $r4
org.apache.ambari.server.checks.CheckDescription.getFail : $r5 = (java.lang.String) $r4 >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : goto [?= return $r5]
org.apache.ambari.server.checks.CheckDescription.getFail : goto [?= return $r5] >>>>>>>> org.apache.ambari.server.checks.CheckDescription.getFail : return $r5
org.apache.ambari.server.checks.CheckDescription.getFail : return $r5 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r4 = virtualinvoke r3.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r4 = virtualinvoke r3.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>() >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity m_targetRepositoryVersion>
org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity m_targetRepositoryVersion> >>>>>>>> org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : return $r1
org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : return $r1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z0 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{version}}")
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z0 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{version}}") >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z0 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z5 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{fails}}")
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z5 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{fails}}") >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z5 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if $z5 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : return r32
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : return r32 >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r17)
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r17) >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $r18 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>()
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $r18 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>() >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet m_failedOn>
org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet m_failedOn> >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : return $r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : return $r1 >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : virtualinvoke $r18.<java.util.LinkedHashSet: boolean add(java.lang.Object)>("HDFS")
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : virtualinvoke $r18.<java.util.LinkedHashSet: boolean add(java.lang.Object)>("HDFS") >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $z9 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>("HIVE")
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $z9 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>("HIVE") >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : if $z9 == 0
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : if $z9 == 0 >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $z10 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>("OOZIE")
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $z10 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>("OOZIE") >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : if $z10 == 0
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : if $z10 == 0 >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $z11 = interfaceinvoke $r10.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $z11 = interfaceinvoke $r10.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : if $z11 != 0
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : if $z11 != 0 >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $r11 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,java.lang.String)>($r10, " ")
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $r11 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,java.lang.String)>($r10, " ") >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailReason(java.lang.String)>($r11)
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailReason(java.lang.String)>($r11) >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.setFailReason : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.lang.String m_failReason> = r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.setFailReason : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.lang.String m_failReason> = r1 >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $r12 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus FAIL>
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $r12 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus FAIL> >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setStatus(org.apache.ambari.server.state.stack.PrereqCheckStatus)>($r12)
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setStatus(org.apache.ambari.server.state.stack.PrereqCheckStatus)>($r12) >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.setStatus : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> = r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.setStatus : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> = r1 >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status>
org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> >>>>>>>> org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : return $r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : return $r1 >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : r20 = virtualinvoke r0.<org.apache.ambari.server.checks.ClientRetryPropertyCheck: java.lang.String getProperty(org.apache.ambari.server.controller.PrereqCheckRequest,java.lang.String,java.lang.String)>(r2, "hive-site", "hive.metastore.failure.retries")
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : r20 = virtualinvoke r0.<org.apache.ambari.server.checks.ClientRetryPropertyCheck: java.lang.String getProperty(org.apache.ambari.server.controller.PrereqCheckRequest,java.lang.String,java.lang.String)>(r2, "hive-site", "hive.metastore.failure.retries") >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : if null == r20
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : if null == r20 >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r20)
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r20) >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : if $i0 > 0
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : if $i0 > 0 >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $r15 = virtualinvoke r0.<org.apache.ambari.server.checks.ClientRetryPropertyCheck: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("hive.client.retry.missing.key", r1, r2)
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $r15 = virtualinvoke r0.<org.apache.ambari.server.checks.ClientRetryPropertyCheck: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("hive.client.retry.missing.key", r1, r2) >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r15)
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r15) >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $r16 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>()
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $r16 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>() >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : virtualinvoke $r16.<java.util.LinkedHashSet: boolean add(java.lang.Object)>("HIVE")
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : virtualinvoke $r16.<java.util.LinkedHashSet: boolean add(java.lang.Object)>("HIVE") >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : r21 = virtualinvoke r0.<org.apache.ambari.server.checks.ClientRetryPropertyCheck: java.lang.String getProperty(org.apache.ambari.server.controller.PrereqCheckRequest,java.lang.String,java.lang.String)>(r2, "oozie-env", "content")
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : r21 = virtualinvoke r0.<org.apache.ambari.server.checks.ClientRetryPropertyCheck: java.lang.String getProperty(org.apache.ambari.server.controller.PrereqCheckRequest,java.lang.String,java.lang.String)>(r2, "oozie-env", "content") >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : if null == r21
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : if null == r21 >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $r13 = virtualinvoke r0.<org.apache.ambari.server.checks.ClientRetryPropertyCheck: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("oozie.client.retry.missing.key", r1, r2)
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $r13 = virtualinvoke r0.<org.apache.ambari.server.checks.ClientRetryPropertyCheck: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("oozie.client.retry.missing.key", r1, r2) >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r13)
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r13) >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $r14 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>()
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $r14 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>() >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : virtualinvoke $r14.<java.util.LinkedHashSet: boolean add(java.lang.Object)>("OOZIE")
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : virtualinvoke $r14.<java.util.LinkedHashSet: boolean add(java.lang.Object)>("OOZIE") >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $z3 = virtualinvoke r21.<java.lang.String: boolean contains(java.lang.CharSequence)>("-Doozie.connection.retry.count")
org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : $z3 = virtualinvoke r21.<java.lang.String: boolean contains(java.lang.CharSequence)>("-Doozie.connection.retry.count") >>>>>>>> org.apache.ambari.server.checks.ClientRetryPropertyCheck.perform : if $z3 != 0
