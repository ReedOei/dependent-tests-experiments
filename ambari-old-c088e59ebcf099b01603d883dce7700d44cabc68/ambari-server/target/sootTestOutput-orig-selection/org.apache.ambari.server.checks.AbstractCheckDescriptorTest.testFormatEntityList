org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : if r1 == null >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : return ""
org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : return "" >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : $z0 = virtualinvoke r1.<java.util.LinkedHashSet: boolean isEmpty()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : $z0 = virtualinvoke r1.<java.util.LinkedHashSet: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : if $z0 == 0
org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : $r3 = new java.lang.StringBuilder
org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : $r4 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,java.lang.String)>(r1, ", ")
org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : $r4 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,java.lang.String)>(r1, ", ") >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4)
org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>($r4) >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : $i0 = virtualinvoke r1.<java.util.LinkedHashSet: int size()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : $i0 = virtualinvoke r1.<java.util.LinkedHashSet: int size()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : if $i0 <= 1
org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : if $i0 <= 1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : return $r5
org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : return $r5 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : $i1 = virtualinvoke $r3.<java.lang.StringBuilder: int lastIndexOf(java.lang.String)>(",")
org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : $i1 = virtualinvoke $r3.<java.lang.StringBuilder: int lastIndexOf(java.lang.String)>(",") >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : $i2 = virtualinvoke $r3.<java.lang.StringBuilder: int lastIndexOf(java.lang.String)>(",")
org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : $i2 = virtualinvoke $r3.<java.lang.StringBuilder: int lastIndexOf(java.lang.String)>(",") >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : $i3 = $i2 + 1
org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : $i3 = $i2 + 1 >>>>>>>> org.apache.ambari.server.checks.AbstractCheckDescriptor.formatEntityList : virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>($i1, $i3, " and")
