org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r13 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/configuration/Configuration;") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : r5 = (org.apache.ambari.server.configuration.Configuration) $r13
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : r5 = (org.apache.ambari.server.configuration.Configuration) $r13 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r14 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/stack/OsFamily;")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r14 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/state/stack/OsFamily;") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : r6 = (org.apache.ambari.server.state.stack.OsFamily) $r14
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : r6 = (org.apache.ambari.server.state.stack.OsFamily) $r14 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r15 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Ljava/sql/Connection;")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r15 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Ljava/sql/Connection;") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : r7 = (java.sql.Connection) $r15
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : r7 = (java.sql.Connection) $r15 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r16 = staticinvoke <org.easymock.EasyMock: java.lang.Object createStrictMock(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/DBAccessor;")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r16 = staticinvoke <org.easymock.EasyMock: java.lang.Object createStrictMock(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/DBAccessor;") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : r8 = (org.apache.ambari.server.orm.DBAccessor) $r16
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : r8 = (org.apache.ambari.server.orm.DBAccessor) $r16 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r17 = staticinvoke <org.easymock.EasyMock: java.lang.Object createStrictMock(java.lang.Class)>(class "Ljava/sql/Statement;")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r17 = staticinvoke <org.easymock.EasyMock: java.lang.Object createStrictMock(java.lang.Class)>(class "Ljava/sql/Statement;") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : r9 = (java.sql.Statement) $r17
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : r9 = (java.sql.Statement) $r17 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r18 = staticinvoke <org.easymock.EasyMock: java.lang.Object createStrictMock(java.lang.Class)>(class "Ljava/sql/Statement;")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r18 = staticinvoke <org.easymock.EasyMock: java.lang.Object createStrictMock(java.lang.Class)>(class "Ljava/sql/Statement;") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : r10 = (java.sql.Statement) $r18
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : r10 = (java.sql.Statement) $r18 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r19 = staticinvoke <org.easymock.EasyMock: java.lang.Object createStrictMock(java.lang.Class)>(class "Ljava/sql/DatabaseMetaData;")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r19 = staticinvoke <org.easymock.EasyMock: java.lang.Object createStrictMock(java.lang.Class)>(class "Ljava/sql/DatabaseMetaData;") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : r11 = (java.sql.DatabaseMetaData) $r19
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : r11 = (java.sql.DatabaseMetaData) $r19 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r20 = newarray (com.google.inject.Module)[1]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r20 = newarray (com.google.inject.Module)[1] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r21 = new org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r21 = new org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : specialinvoke $r21.<org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5: void <init>(org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest,org.apache.ambari.server.orm.DBAccessor,org.apache.ambari.server.state.stack.OsFamily,org.apache.ambari.server.configuration.Configuration)>(r0, r8, r6, r5)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : specialinvoke $r21.<org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5: void <init>(org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest,org.apache.ambari.server.orm.DBAccessor,org.apache.ambari.server.state.stack.OsFamily,org.apache.ambari.server.configuration.Configuration)>(r0, r8, r6, r5) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r20[0] = $r21
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r20[0] = $r21 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : r12 = staticinvoke <com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Module[])>($r20)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : r12 = staticinvoke <com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Module[])>($r20) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5.configure : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/DBAccessor;")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5.configure : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/DBAccessor;") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5.configure : $r2 = r0.<org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5: org.apache.ambari.server.orm.DBAccessor val$dbAccessor>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5.configure : $r2 = r0.<org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5: org.apache.ambari.server.orm.DBAccessor val$dbAccessor> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5.configure : interfaceinvoke $r1.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r2)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5.configure : interfaceinvoke $r1.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r2) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5.configure : $r3 = virtualinvoke r0.<org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/state/stack/OsFamily;")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5.configure : $r3 = virtualinvoke r0.<org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/state/stack/OsFamily;") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5.configure : $r4 = r0.<org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5: org.apache.ambari.server.state.stack.OsFamily val$osFamily>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5.configure : $r4 = r0.<org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5: org.apache.ambari.server.state.stack.OsFamily val$osFamily> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5.configure : interfaceinvoke $r3.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r4)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5.configure : interfaceinvoke $r3.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r4) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5.configure : $r5 = virtualinvoke r0.<org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/configuration/Configuration;")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5.configure : $r5 = virtualinvoke r0.<org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/configuration/Configuration;") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5.configure : $r6 = r0.<org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5: org.apache.ambari.server.configuration.Configuration val$config>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5.configure : $r6 = r0.<org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5: org.apache.ambari.server.configuration.Configuration val$config> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5.configure : interfaceinvoke $r5.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r6)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest$5.configure : interfaceinvoke $r5.<com.google.inject.binder.AnnotatedBindingBuilder: void toInstance(java.lang.Object)>($r6) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r22 = virtualinvoke r5.<org.apache.ambari.server.configuration.Configuration: java.lang.String getDatabaseSchema()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r22 = virtualinvoke r5.<org.apache.ambari.server.configuration.Configuration: java.lang.String getDatabaseSchema()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r23 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r22)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r23 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r22) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r24 = interfaceinvoke $r23.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r1)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r24 = interfaceinvoke $r23.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : interfaceinvoke $r24.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : interfaceinvoke $r24.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters anyTimes()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r26 = virtualinvoke r5.<org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$DatabaseType getDatabaseType()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r26 = virtualinvoke r5.<org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$DatabaseType getDatabaseType()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r27 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r26)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r27 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r26) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r28 = <org.apache.ambari.server.configuration.Configuration$DatabaseType: org.apache.ambari.server.configuration.Configuration$DatabaseType POSTGRES>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r28 = <org.apache.ambari.server.configuration.Configuration$DatabaseType: org.apache.ambari.server.configuration.Configuration$DatabaseType POSTGRES> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : interfaceinvoke $r27.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r28)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : interfaceinvoke $r27.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r28) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r30 = interfaceinvoke r8.<org.apache.ambari.server.orm.DBAccessor: java.sql.Connection getConnection()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r30 = interfaceinvoke r8.<org.apache.ambari.server.orm.DBAccessor: java.sql.Connection getConnection()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r31 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r30)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r31 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r30) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : interfaceinvoke $r31.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r7)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : interfaceinvoke $r31.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r7) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r33 = interfaceinvoke r7.<java.sql.Connection: java.sql.DatabaseMetaData getMetaData()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r33 = interfaceinvoke r7.<java.sql.Connection: java.sql.DatabaseMetaData getMetaData()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r34 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r33)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r34 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r33) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : interfaceinvoke $r34.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r11)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : interfaceinvoke $r34.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r11) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r36 = interfaceinvoke r7.<java.sql.Connection: java.sql.Statement createStatement()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r36 = interfaceinvoke r7.<java.sql.Connection: java.sql.Statement createStatement()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r37 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r36)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r37 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r36) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : interfaceinvoke $r37.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r9)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : interfaceinvoke $r37.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r9) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r39 = interfaceinvoke r7.<java.sql.Connection: java.sql.Statement createStatement()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r39 = interfaceinvoke r7.<java.sql.Connection: java.sql.Statement createStatement()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r40 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r39)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r40 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r39) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : interfaceinvoke $r40.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r10)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : interfaceinvoke $r40.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r10) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r42 = interfaceinvoke r11.<java.sql.DatabaseMetaData: java.sql.ResultSet getSchemas()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r42 = interfaceinvoke r11.<java.sql.DatabaseMetaData: java.sql.ResultSet getSchemas()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r43 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r42)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r43 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r42) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r44 = specialinvoke r0.<org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest: java.sql.ResultSet resultSet(java.lang.String,java.util.List)>("TABLE_SCHEM", r3)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r44 = specialinvoke r0.<org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest: java.sql.ResultSet resultSet(java.lang.String,java.util.List)>("TABLE_SCHEM", r3) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : if null != r2
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : if null != r2 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $r6 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Ljava/sql/ResultSet;")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $r6 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Ljava/sql/ResultSet;") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : r3 = (java.sql.ResultSet) $r6
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : r3 = (java.sql.ResultSet) $r6 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $z0 = interfaceinvoke r2.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : if $z0 != 0
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : if $z0 != 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $z2 = interfaceinvoke r3.<java.sql.ResultSet: boolean next()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $z2 = interfaceinvoke r3.<java.sql.ResultSet: boolean next()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $r15 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z2) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $r16 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r15)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $r16 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r15) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $r17 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $r18 = interfaceinvoke $r16.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r17)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $r18 = interfaceinvoke $r16.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r17) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $i0 = interfaceinvoke r2.<java.util.List: int size()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $i0 = interfaceinvoke r2.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : interfaceinvoke $r18.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters times(int)>($i0)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : interfaceinvoke $r18.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters times(int)>($i0) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $z1 = interfaceinvoke r3.<java.sql.ResultSet: boolean next()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $z1 = interfaceinvoke r3.<java.sql.ResultSet: boolean next()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $r7 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $r8 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r7)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $r8 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r7) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : interfaceinvoke $r8.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r9)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : interfaceinvoke $r8.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r9) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : if $z3 == 0
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : if $z3 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $r12 = interfaceinvoke r3.<java.sql.ResultSet: java.lang.Object getObject(java.lang.String)>(r1)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $r12 = interfaceinvoke r3.<java.sql.ResultSet: java.lang.Object getObject(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $r13 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r12)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $r13 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r12) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : interfaceinvoke $r13.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r5)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : interfaceinvoke $r13.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r5) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : goto [?= $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : goto [?= $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $r11 = newarray (java.lang.Object)[1]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $r11 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $r11[0] = r3
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : $r11[0] = r3 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r11)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r11) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : return r3
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.resultSet : return r3 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : interfaceinvoke $r43.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r44)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : interfaceinvoke $r43.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r44) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r46 = staticinvoke <org.easymock.EasyMock: java.lang.String anyString()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r46 = staticinvoke <org.easymock.EasyMock: java.lang.String anyString()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r47 = interfaceinvoke r9.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>($r46)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r47 = interfaceinvoke r9.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>($r46) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r48 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r47)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r48 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r47) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r49 = newarray (java.lang.String)[1]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r49 = newarray (java.lang.String)[1] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r49[0] = r2
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r49[0] = r2 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r50 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>($r49)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r50 = staticinvoke <com.google.common.collect.Lists: java.util.ArrayList newArrayList(java.lang.Object[])>($r49) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r51 = specialinvoke r0.<org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest: java.sql.ResultSet resultSet(java.lang.String,java.util.List)>("search_path", $r50)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r51 = specialinvoke r0.<org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest: java.sql.ResultSet resultSet(java.lang.String,java.util.List)>("search_path", $r50) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : interfaceinvoke $r48.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r51)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : interfaceinvoke $r48.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r51) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r53 = staticinvoke <org.easymock.EasyMock: java.lang.String anyString()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r53 = staticinvoke <org.easymock.EasyMock: java.lang.String anyString()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r54 = interfaceinvoke r10.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>($r53)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r54 = interfaceinvoke r10.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>($r53) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r55 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r54)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r55 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r54) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r56 = specialinvoke r0.<org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest: java.sql.ResultSet resultSet(java.lang.String,java.util.List)>("table_schema", r4)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r56 = specialinvoke r0.<org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest: java.sql.ResultSet resultSet(java.lang.String,java.util.List)>("table_schema", r4) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : interfaceinvoke $r55.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r56)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : interfaceinvoke $r55.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r56) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r58 = newarray (java.lang.Object)[7]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r58 = newarray (java.lang.Object)[7] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r58[0] = r5
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r58[0] = r5 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r58[1] = r7
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r58[1] = r7 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r58[2] = r8
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r58[2] = r8 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r58[3] = r11
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r58[3] = r11 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r58[4] = r10
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r58[4] = r10 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r58[5] = r6
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r58[5] = r6 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r58[6] = r9
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : $r58[6] = r9 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r58)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r58) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void setInjector(com.google.inject.Injector)>(r12)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void setInjector(com.google.inject.Injector)>(r12) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setInjector : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: com.google.inject.Injector injector> = r0
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setInjector : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: com.google.inject.Injector injector> = r0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setInjector : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void closeConnection()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setInjector : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void closeConnection()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.closeConnection : $r1 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.closeConnection : $r1 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.closeConnection : if $r1 == null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.closeConnection : if $r1 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.closeConnection : $r2 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.closeConnection : $r2 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.closeConnection : interfaceinvoke $r2.<java.sql.Connection: void close()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.closeConnection : interfaceinvoke $r2.<java.sql.Connection: void close()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.closeConnection : goto [?= return]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.closeConnection : goto [?= return] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setInjector : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection> = null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setInjector : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection> = null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setInjector : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.orm.dao.MetainfoDAO metainfoDAO> = null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setInjector : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.orm.dao.MetainfoDAO metainfoDAO> = null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setInjector : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.api.services.AmbariMetaInfo ambariMetaInfo> = null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setInjector : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.api.services.AmbariMetaInfo ambariMetaInfo> = null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setInjector : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.orm.DBAccessor dbAccessor> = null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setInjector : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.orm.DBAccessor dbAccessor> = null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void setConnection(java.sql.Connection)>(null)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void setConnection(java.sql.Connection)>(null) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setConnection : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection> = r0
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setConnection : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection> = r0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void resetCheckResult()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelperTest.setupMocksForTestSchemaName : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void resetCheckResult()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.resetCheckResult : $r0 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckResult: org.apache.ambari.server.checks.DatabaseConsistencyCheckResult DB_CHECK_SUCCESS>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.resetCheckResult : $r0 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckResult: org.apache.ambari.server.checks.DatabaseConsistencyCheckResult DB_CHECK_SUCCESS> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.resetCheckResult : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.checks.DatabaseConsistencyCheckResult checkResult> = $r0
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.resetCheckResult : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.checks.DatabaseConsistencyCheckResult checkResult> = $r0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r11 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: com.google.inject.Injector injector>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r11 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: com.google.inject.Injector injector> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r12 = interfaceinvoke $r11.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/apache/ambari/server/configuration/Configuration;")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r12 = interfaceinvoke $r11.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/apache/ambari/server/configuration/Configuration;") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : r0 = (org.apache.ambari.server.configuration.Configuration) $r12
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : r0 = (org.apache.ambari.server.configuration.Configuration) $r12 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r13 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$DatabaseType getDatabaseType()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r13 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$DatabaseType getDatabaseType()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r14 = <org.apache.ambari.server.configuration.Configuration$DatabaseType: org.apache.ambari.server.configuration.Configuration$DatabaseType POSTGRES>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r14 = <org.apache.ambari.server.configuration.Configuration$DatabaseType: org.apache.ambari.server.configuration.Configuration$DatabaseType POSTGRES> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : if $r13 != $r14
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : if $r13 != $r14 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r15 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r15 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : interfaceinvoke $r15.<org.slf4j.Logger: void info(java.lang.String)>("Ensuring that the schema set for Postgres is correct")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : interfaceinvoke $r15.<org.slf4j.Logger: void info(java.lang.String)>("Ensuring that the schema set for Postgres is correct") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void ensureConnection()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void ensureConnection()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.ensureConnection : $r0 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.ensureConnection : $r0 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.ensureConnection : if $r0 != null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.ensureConnection : if $r0 != null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.ensureConnection : $r1 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.orm.DBAccessor dbAccessor>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.ensureConnection : $r1 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.orm.DBAccessor dbAccessor> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.ensureConnection : if $r1 != null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.ensureConnection : if $r1 != null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.ensureConnection : $r4 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: com.google.inject.Injector injector>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.ensureConnection : $r4 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: com.google.inject.Injector injector> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.ensureConnection : $r5 = interfaceinvoke $r4.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/DBAccessor;")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.ensureConnection : $r5 = interfaceinvoke $r4.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/DBAccessor;") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.ensureConnection : $r6 = (org.apache.ambari.server.orm.DBAccessor) $r5
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.ensureConnection : $r6 = (org.apache.ambari.server.orm.DBAccessor) $r5 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.ensureConnection : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.orm.DBAccessor dbAccessor> = $r6
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.ensureConnection : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.orm.DBAccessor dbAccessor> = $r6 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.ensureConnection : $r2 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.orm.DBAccessor dbAccessor>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.ensureConnection : $r2 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.orm.DBAccessor dbAccessor> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.ensureConnection : $r3 = interfaceinvoke $r2.<org.apache.ambari.server.orm.DBAccessor: java.sql.Connection getConnection()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.ensureConnection : $r3 = interfaceinvoke $r2.<org.apache.ambari.server.orm.DBAccessor: java.sql.Connection getConnection()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.ensureConnection : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection> = $r3
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.ensureConnection : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection> = $r3 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r16 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r16 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r17 = interfaceinvoke $r16.<java.sql.Connection: java.sql.DatabaseMetaData getMetaData()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r17 = interfaceinvoke $r16.<java.sql.Connection: java.sql.DatabaseMetaData getMetaData()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : r53 = interfaceinvoke $r17.<java.sql.DatabaseMetaData: java.sql.ResultSet getSchemas()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : r53 = interfaceinvoke $r17.<java.sql.DatabaseMetaData: java.sql.ResultSet getSchemas()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : r54 = null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : r54 = null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r18 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r18 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r19 = interfaceinvoke $r18.<java.sql.Connection: java.sql.Statement createStatement()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r19 = interfaceinvoke $r18.<java.sql.Connection: java.sql.Statement createStatement()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : r55 = interfaceinvoke $r19.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>("show search_path")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : r55 = interfaceinvoke $r19.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>("show search_path") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : r56 = null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : r56 = null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r20 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r20 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.sql.Connection connection> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r21 = interfaceinvoke $r20.<java.sql.Connection: java.sql.Statement createStatement()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r21 = interfaceinvoke $r20.<java.sql.Connection: java.sql.Statement createStatement()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : r57 = interfaceinvoke $r21.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>("select table_schema from information_schema.tables where table_name = \'hostcomponentdesiredstate\'")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : r57 = interfaceinvoke $r21.<java.sql.Statement: java.sql.ResultSet executeQuery(java.lang.String)>("select table_schema from information_schema.tables where table_name = \'hostcomponentdesiredstate\'") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : r58 = null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : r58 = null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r22 = staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.util.ArrayList getResultSetColumn(java.sql.ResultSet,java.lang.String)>(r53, "TABLE_SCHEM")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r22 = staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.util.ArrayList getResultSetColumn(java.sql.ResultSet,java.lang.String)>(r53, "TABLE_SCHEM") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getResultSetColumn : $r3 = new java.util.ArrayList
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getResultSetColumn : $r3 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getResultSetColumn : specialinvoke $r3.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getResultSetColumn : specialinvoke $r3.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getResultSetColumn : if null == r0
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getResultSetColumn : if null == r0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getResultSetColumn : $z0 = interfaceinvoke r0.<java.sql.ResultSet: boolean next()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getResultSetColumn : $z0 = interfaceinvoke r0.<java.sql.ResultSet: boolean next()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getResultSetColumn : if $z0 == 0
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getResultSetColumn : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getResultSetColumn : $r4 = interfaceinvoke r0.<java.sql.ResultSet: java.lang.Object getObject(java.lang.String)>(r1)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getResultSetColumn : $r4 = interfaceinvoke r0.<java.sql.ResultSet: java.lang.Object getObject(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getResultSetColumn : virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r4)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getResultSetColumn : virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r4) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getResultSetColumn : goto [?= $z0 = interfaceinvoke r0.<java.sql.ResultSet: boolean next()>()]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getResultSetColumn : goto [?= $z0 = interfaceinvoke r0.<java.sql.ResultSet: boolean next()>()] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getResultSetColumn : return $r3
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getResultSetColumn : return $r3 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r23 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getDatabaseSchema()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r23 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getDatabaseSchema()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : z4 = virtualinvoke $r22.<java.util.ArrayList: boolean contains(java.lang.Object)>($r23)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : z4 = virtualinvoke $r22.<java.util.ArrayList: boolean contains(java.lang.Object)>($r23) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : if z4 != 0
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : if z4 != 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : r1 = staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.util.ArrayList getResultSetColumn(java.sql.ResultSet,java.lang.String)>(r55, "search_path")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : r1 = staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.util.ArrayList getResultSetColumn(java.sql.ResultSet,java.lang.String)>(r55, "search_path") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : if $z0 == 0
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r24 = staticinvoke <com.google.common.base.Splitter: com.google.common.base.Splitter on(java.lang.String)>(",")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r24 = staticinvoke <com.google.common.base.Splitter: com.google.common.base.Splitter on(java.lang.String)>(",") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r25 = virtualinvoke $r24.<com.google.common.base.Splitter: com.google.common.base.Splitter trimResults()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r25 = virtualinvoke $r24.<com.google.common.base.Splitter: com.google.common.base.Splitter trimResults()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r26 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r26 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r27 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r26)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r27 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r26) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r28 = virtualinvoke $r25.<com.google.common.base.Splitter: java.lang.Iterable split(java.lang.CharSequence)>($r27)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r28 = virtualinvoke $r25.<com.google.common.base.Splitter: java.lang.Iterable split(java.lang.CharSequence)>($r27) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r59 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Iterable)>($r28)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r59 = staticinvoke <com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList copyOf(java.lang.Iterable)>($r28) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : r2 = $r59
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : r2 = $r59 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $z1 = interfaceinvoke $r59.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $z1 = interfaceinvoke $r59.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : if $z1 == 0
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : if $z1 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r29 = interfaceinvoke $r59.<java.util.List: java.lang.Object get(int)>(0)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r29 = interfaceinvoke $r59.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r60 = (java.lang.String) $r29
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r60 = (java.lang.String) $r29 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r30 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getDatabaseSchema()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r30 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getDatabaseSchema()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r60, $r30)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $z2 = staticinvoke <java.util.Objects: boolean equals(java.lang.Object,java.lang.Object)>($r60, $r30) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : if $z2 != 0
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : if $z2 != 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r35 = newarray (java.lang.Object)[2]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r35 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r36 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getDatabaseSchema()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r36 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getDatabaseSchema()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r35[0] = $r36
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r35[0] = $r36 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r35[1] = r2
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r35[1] = r2 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void warning(java.lang.String,java.lang.Object[])>("The schema [{}] defined for Ambari in ambari.properties is not first on the search path: {}. This can lead to problems.", $r35)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void warning(java.lang.String,java.lang.Object[])>("The schema [{}] defined for Ambari in ambari.properties is not first on the search path: {}. This can lead to problems.", $r35) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.warning : $r2 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.warning : $r2 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.warning : interfaceinvoke $r2.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>(r0, r1)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.warning : interfaceinvoke $r2.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>(r0, r1) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.warning : $r3 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckResult: org.apache.ambari.server.checks.DatabaseConsistencyCheckResult DB_CHECK_WARNING>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.warning : $r3 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckResult: org.apache.ambari.server.checks.DatabaseConsistencyCheckResult DB_CHECK_WARNING> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.warning : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void setCheckResult(org.apache.ambari.server.checks.DatabaseConsistencyCheckResult)>($r3)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.warning : staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: void setCheckResult(org.apache.ambari.server.checks.DatabaseConsistencyCheckResult)>($r3) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setCheckResult : $i0 = virtualinvoke r0.<org.apache.ambari.server.checks.DatabaseConsistencyCheckResult: int ordinal()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setCheckResult : $i0 = virtualinvoke r0.<org.apache.ambari.server.checks.DatabaseConsistencyCheckResult: int ordinal()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setCheckResult : $r1 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.checks.DatabaseConsistencyCheckResult checkResult>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setCheckResult : $r1 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.checks.DatabaseConsistencyCheckResult checkResult> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setCheckResult : $i1 = virtualinvoke $r1.<org.apache.ambari.server.checks.DatabaseConsistencyCheckResult: int ordinal()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setCheckResult : $i1 = virtualinvoke $r1.<org.apache.ambari.server.checks.DatabaseConsistencyCheckResult: int ordinal()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setCheckResult : if $i0 <= $i1
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setCheckResult : if $i0 <= $i1 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setCheckResult : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.checks.DatabaseConsistencyCheckResult checkResult> = r0
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.setCheckResult : <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.checks.DatabaseConsistencyCheckResult checkResult> = r0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : r4 = staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.util.ArrayList getResultSetColumn(java.sql.ResultSet,java.lang.String)>(r57, "table_schema")
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : r4 = staticinvoke <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: java.util.ArrayList getResultSetColumn(java.sql.ResultSet,java.lang.String)>(r57, "table_schema") >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : if z4 == 0
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : if z4 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r32 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getDatabaseSchema()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $r32 = virtualinvoke r0.<org.apache.ambari.server.configuration.Configuration: java.lang.String getDatabaseSchema()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $z3 = virtualinvoke r4.<java.util.ArrayList: boolean contains(java.lang.Object)>($r32)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $z3 = virtualinvoke r4.<java.util.ArrayList: boolean contains(java.lang.Object)>($r32) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : if $z3 != 0
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : if $z3 != 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $i0 = virtualinvoke r4.<java.util.ArrayList: int size()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : $i0 = virtualinvoke r4.<java.util.ArrayList: int size()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : if $i0 <= 1
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : if $i0 <= 1 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : if r57 == null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : if r57 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : goto [?= interfaceinvoke r57.<java.sql.ResultSet: void close()>()]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : goto [?= interfaceinvoke r57.<java.sql.ResultSet: void close()>()] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : interfaceinvoke r57.<java.sql.ResultSet: void close()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : interfaceinvoke r57.<java.sql.ResultSet: void close()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : goto [?= (branch)]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : if r55 == null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : if r55 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : goto [?= interfaceinvoke r55.<java.sql.ResultSet: void close()>()]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : goto [?= interfaceinvoke r55.<java.sql.ResultSet: void close()>()] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : interfaceinvoke r55.<java.sql.ResultSet: void close()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : interfaceinvoke r55.<java.sql.ResultSet: void close()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : if r53 == null
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : if r53 == null >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : goto [?= interfaceinvoke r53.<java.sql.ResultSet: void close()>()]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : goto [?= interfaceinvoke r53.<java.sql.ResultSet: void close()>()] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : interfaceinvoke r53.<java.sql.ResultSet: void close()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : interfaceinvoke r53.<java.sql.ResultSet: void close()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : goto [?= return]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.checkSchemaName : goto [?= return] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getLastCheckResult : $r0 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.checks.DatabaseConsistencyCheckResult checkResult>
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getLastCheckResult : $r0 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper: org.apache.ambari.server.checks.DatabaseConsistencyCheckResult checkResult> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getLastCheckResult : return $r0
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.getLastCheckResult : return $r0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckResult.isError : $r1 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckResult: org.apache.ambari.server.checks.DatabaseConsistencyCheckResult DB_CHECK_ERROR>
org.apache.ambari.server.checks.DatabaseConsistencyCheckResult.isError : $r1 = <org.apache.ambari.server.checks.DatabaseConsistencyCheckResult: org.apache.ambari.server.checks.DatabaseConsistencyCheckResult DB_CHECK_ERROR> >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckResult.isError : if r0 != $r1
org.apache.ambari.server.checks.DatabaseConsistencyCheckResult.isError : if r0 != $r1 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckResult.isError : $z0 = 0
org.apache.ambari.server.checks.DatabaseConsistencyCheckResult.isError : $z0 = 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckResult.isError : return $z0
