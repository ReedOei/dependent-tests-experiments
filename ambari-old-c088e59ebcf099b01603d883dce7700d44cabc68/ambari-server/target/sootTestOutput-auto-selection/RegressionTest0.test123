org.apache.ambari.server.utils.RetryHelper.executeWithRetry : staticinvoke <org.apache.ambari.server.utils.RetryHelper: void clearAffectedClusters()>() >>>>>>>> org.apache.ambari.server.utils.RetryHelper.clearAffectedClusters : $i0 = <org.apache.ambari.server.utils.RetryHelper: int operationsRetryAttempts>
org.apache.ambari.server.utils.RetryHelper.clearAffectedClusters : $i0 = <org.apache.ambari.server.utils.RetryHelper: int operationsRetryAttempts> >>>>>>>> org.apache.ambari.server.utils.RetryHelper.clearAffectedClusters : if $i0 <= 0
org.apache.ambari.server.utils.RetryHelper.clearAffectedClusters : if $i0 <= 0 >>>>>>>> org.apache.ambari.server.utils.RetryHelper.clearAffectedClusters : $r0 = <org.apache.ambari.server.utils.RetryHelper: java.lang.ThreadLocal affectedClusters>
org.apache.ambari.server.utils.RetryHelper.clearAffectedClusters : $r0 = <org.apache.ambari.server.utils.RetryHelper: java.lang.ThreadLocal affectedClusters> >>>>>>>> org.apache.ambari.server.utils.RetryHelper.clearAffectedClusters : $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>()
org.apache.ambari.server.utils.RetryHelper.clearAffectedClusters : $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.utils.RetryHelper.clearAffectedClusters : $r2 = (java.util.Set) $r1
org.apache.ambari.server.utils.RetryHelper.clearAffectedClusters : $r2 = (java.util.Set) $r1 >>>>>>>> org.apache.ambari.server.utils.RetryHelper.clearAffectedClusters : interfaceinvoke $r2.<java.util.Set: void clear()>()
org.apache.ambari.server.utils.RetryHelper.clearAffectedClusters : interfaceinvoke $r2.<java.util.Set: void clear()>() >>>>>>>> org.apache.ambari.server.utils.RetryHelper.executeWithRetry : i0 = staticinvoke <org.apache.ambari.server.utils.RetryHelper: int getOperationsRetryAttempts()>()
org.apache.ambari.server.utils.RetryHelper.executeWithRetry : i0 = staticinvoke <org.apache.ambari.server.utils.RetryHelper: int getOperationsRetryAttempts()>() >>>>>>>> org.apache.ambari.server.utils.RetryHelper.getOperationsRetryAttempts : $i0 = <org.apache.ambari.server.utils.RetryHelper: int operationsRetryAttempts>
org.apache.ambari.server.utils.RetryHelper.getOperationsRetryAttempts : $i0 = <org.apache.ambari.server.utils.RetryHelper: int operationsRetryAttempts> >>>>>>>> org.apache.ambari.server.utils.RetryHelper.getOperationsRetryAttempts : return $i0
org.apache.ambari.server.utils.RetryHelper.getOperationsRetryAttempts : return $i0 >>>>>>>> org.apache.ambari.server.utils.RetryHelper.executeWithRetry : $r2 = interfaceinvoke r0.<java.util.concurrent.Callable: java.lang.Object call()>()
org.apache.ambari.server.utils.RetryHelper.executeWithRetry : $r2 = interfaceinvoke r0.<java.util.concurrent.Callable: java.lang.Object call()>() >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r1 = virtualinvoke r0.<org.apache.ambari.server.state.stack.RepoUrlInfoCallable: java.util.Map call()>()
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r1 = virtualinvoke r0.<org.apache.ambari.server.state.stack.RepoUrlInfoCallable: java.util.Map call()>() >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r13 = new org.apache.ambari.server.state.stack.RepoUrlInfoCallable$1
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r13 = new org.apache.ambari.server.state.stack.RepoUrlInfoCallable$1 >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : specialinvoke $r13.<org.apache.ambari.server.state.stack.RepoUrlInfoCallable$1: void <init>(org.apache.ambari.server.state.stack.RepoUrlInfoCallable)>(r0)
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : specialinvoke $r13.<org.apache.ambari.server.state.stack.RepoUrlInfoCallable$1: void <init>(org.apache.ambari.server.state.stack.RepoUrlInfoCallable)>(r0) >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : r1 = virtualinvoke $r13.<org.apache.ambari.server.state.stack.RepoUrlInfoCallable$1: java.lang.reflect.Type getType()>()
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : r1 = virtualinvoke $r13.<org.apache.ambari.server.state.stack.RepoUrlInfoCallable$1: java.lang.reflect.Type getType()>() >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r14 = new com.google.gson.Gson
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r14 = new com.google.gson.Gson >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : specialinvoke $r14.<com.google.gson.Gson: void <init>()>()
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : specialinvoke $r14.<com.google.gson.Gson: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : r62 = null
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : r62 = null >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r15 = new java.util.HashSet
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r15 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : specialinvoke $r15.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : specialinvoke $r15.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r17 = r0.<org.apache.ambari.server.state.stack.RepoUrlInfoCallable: java.util.Set m_stacks>
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r17 = r0.<org.apache.ambari.server.state.stack.RepoUrlInfoCallable: java.util.Set m_stacks> >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r16 = new org.apache.ambari.server.state.stack.RepoUrlInfoCallable$2
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r16 = new org.apache.ambari.server.state.stack.RepoUrlInfoCallable$2 >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : specialinvoke $r16.<org.apache.ambari.server.state.stack.RepoUrlInfoCallable$2: void <init>(org.apache.ambari.server.state.stack.RepoUrlInfoCallable)>(r0)
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : specialinvoke $r16.<org.apache.ambari.server.state.stack.RepoUrlInfoCallable$2: void <init>(org.apache.ambari.server.state.stack.RepoUrlInfoCallable)>(r0) >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r18 = staticinvoke <com.google.common.collect.Collections2: java.util.Collection transform(java.util.Collection,com.google.common.base.Function)>($r17, $r16)
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r18 = staticinvoke <com.google.common.collect.Collections2: java.util.Collection transform(java.util.Collection,com.google.common.base.Function)>($r17, $r16) >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : interfaceinvoke $r15.<java.util.Set: boolean addAll(java.util.Collection)>($r18)
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : interfaceinvoke $r15.<java.util.Set: boolean addAll(java.util.Collection)>($r18) >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : r4 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,char)>($r15, 44)
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : r4 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,char)>($r15, 44) >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $l0 = staticinvoke <java.lang.System: long nanoTime()>()
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $l0 = staticinvoke <java.lang.System: long nanoTime()>() >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0)
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r19 = r0.<org.apache.ambari.server.state.stack.RepoUrlInfoCallable: java.net.URI m_uri>
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r19 = r0.<org.apache.ambari.server.state.stack.RepoUrlInfoCallable: java.net.URI m_uri> >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r20 = virtualinvoke $r19.<java.net.URI: java.lang.String getScheme()>()
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r20 = virtualinvoke $r19.<java.net.URI: java.lang.String getScheme()>() >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r61 = <org.apache.ambari.server.state.stack.RepoUrlInfoCallable: org.slf4j.Logger LOG>
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r61 = <org.apache.ambari.server.state.stack.RepoUrlInfoCallable: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r60 = r0.<org.apache.ambari.server.state.stack.RepoUrlInfoCallable: java.net.URI m_uri>
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r60 = r0.<org.apache.ambari.server.state.stack.RepoUrlInfoCallable: java.net.URI m_uri> >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : interfaceinvoke $r61.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Could not load the URI from {}, stack defaults will be used", $r60)
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : interfaceinvoke $r61.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Could not load the URI from {}, stack defaults will be used", $r60) >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : throw $r59
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : throw $r59 >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r56 = <org.apache.ambari.server.state.stack.RepoUrlInfoCallable: org.slf4j.Logger LOG>
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r56 = <org.apache.ambari.server.state.stack.RepoUrlInfoCallable: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r54 = newarray (java.lang.Object)[3]
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r54 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r55 = r0.<org.apache.ambari.server.state.stack.RepoUrlInfoCallable: java.net.URI m_uri>
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r55 = r0.<org.apache.ambari.server.state.stack.RepoUrlInfoCallable: java.net.URI m_uri> >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r54[0] = $r55
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r54[0] = $r55 >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r54[1] = r4
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r54[1] = r4 >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r57 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS>
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r57 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit NANOSECONDS> >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $l1 = staticinvoke <java.lang.System: long nanoTime()>()
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $l1 = staticinvoke <java.lang.System: long nanoTime()>() >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $l2 = virtualinvoke r5.<java.lang.Long: long longValue()>()
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $l2 = virtualinvoke r5.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $l3 = $l1 - $l2
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $l3 = $l1 - $l2 >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $l4 = virtualinvoke $r57.<java.util.concurrent.TimeUnit: long toMillis(long)>($l3)
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $l4 = virtualinvoke $r57.<java.util.concurrent.TimeUnit: long toMillis(long)>($l3) >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r58 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4)
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r58 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4) >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r54[2] = $r58
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : $r54[2] = $r58 >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : interfaceinvoke $r56.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Loaded URI {} for stacks {} in {}ms", $r54)
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : interfaceinvoke $r56.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object[])>("Loaded URI {} for stacks {} in {}ms", $r54) >>>>>>>> org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : throw $r53
org.apache.ambari.server.state.stack.RepoUrlInfoCallable.call : throw $r53 >>>>>>>> org.apache.ambari.server.utils.RetryHelper.executeWithRetry : $z0 = staticinvoke <org.apache.ambari.server.utils.RetryHelper: boolean isDatabaseException(java.lang.Throwable)>($r3)
org.apache.ambari.server.utils.RetryHelper.executeWithRetry : $z0 = staticinvoke <org.apache.ambari.server.utils.RetryHelper: boolean isDatabaseException(java.lang.Throwable)>($r3) >>>>>>>> org.apache.ambari.server.utils.RetryHelper.isDatabaseException : $z0 = r0 instanceof org.eclipse.persistence.exceptions.DatabaseException
org.apache.ambari.server.utils.RetryHelper.isDatabaseException : $z0 = r0 instanceof org.eclipse.persistence.exceptions.DatabaseException >>>>>>>> org.apache.ambari.server.utils.RetryHelper.isDatabaseException : if $z0 == 0
org.apache.ambari.server.utils.RetryHelper.isDatabaseException : if $z0 == 0 >>>>>>>> org.apache.ambari.server.utils.RetryHelper.isDatabaseException : r0 = virtualinvoke r0.<java.lang.Throwable: java.lang.Throwable getCause()>()
org.apache.ambari.server.utils.RetryHelper.isDatabaseException : r0 = virtualinvoke r0.<java.lang.Throwable: java.lang.Throwable getCause()>() >>>>>>>> org.apache.ambari.server.utils.RetryHelper.isDatabaseException : if r0 != null
org.apache.ambari.server.utils.RetryHelper.isDatabaseException : if r0 != null >>>>>>>> org.apache.ambari.server.utils.RetryHelper.isDatabaseException : return 0
org.apache.ambari.server.utils.RetryHelper.isDatabaseException : return 0 >>>>>>>> org.apache.ambari.server.utils.RetryHelper.executeWithRetry : if $z0 == 0
org.apache.ambari.server.utils.RetryHelper.executeWithRetry : if $z0 == 0 >>>>>>>> org.apache.ambari.server.utils.RetryHelper.executeWithRetry : $r4 = new org.apache.ambari.server.AmbariException
org.apache.ambari.server.utils.RetryHelper.executeWithRetry : $r4 = new org.apache.ambari.server.AmbariException >>>>>>>> org.apache.ambari.server.utils.RetryHelper.executeWithRetry : $r5 = virtualinvoke $r3.<java.lang.Exception: java.lang.String getMessage()>()
org.apache.ambari.server.utils.RetryHelper.executeWithRetry : $r5 = virtualinvoke $r3.<java.lang.Exception: java.lang.String getMessage()>() >>>>>>>> org.apache.ambari.server.utils.RetryHelper.executeWithRetry : specialinvoke $r4.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String,java.lang.Throwable)>($r5, $r3)
org.apache.ambari.server.utils.RetryHelper.executeWithRetry : specialinvoke $r4.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String,java.lang.Throwable)>($r5, $r3) >>>>>>>> org.apache.ambari.server.utils.RetryHelper.executeWithRetry : throw $r4
