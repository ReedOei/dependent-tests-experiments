org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : $r4 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : specialinvoke $r4.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : specialinvoke $r4.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : if r2 == null
org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : if r2 == null >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : $r9 = r0.<org.apache.ambari.server.api.resources.BaseResourceDefinition: java.util.Map directives>
org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : $r9 = r0.<org.apache.ambari.server.api.resources.BaseResourceDefinition: java.util.Map directives> >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4)
org.apache.ambari.server.api.resources.BaseResourceDefinition.initializeDirectives : interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4) >>>>>>>> org.apache.ambari.server.api.resources.ClusterResourceDefinition.getRenderer : if r1 == null
org.apache.ambari.server.api.resources.ClusterResourceDefinition.getRenderer : if r1 == null >>>>>>>> org.apache.ambari.server.api.resources.ClusterResourceDefinition.getRenderer : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("blueprint")
org.apache.ambari.server.api.resources.ClusterResourceDefinition.getRenderer : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("blueprint") >>>>>>>> org.apache.ambari.server.api.resources.ClusterResourceDefinition.getRenderer : if $z0 == 0
org.apache.ambari.server.api.resources.ClusterResourceDefinition.getRenderer : if $z0 == 0 >>>>>>>> org.apache.ambari.server.api.resources.ClusterResourceDefinition.getRenderer : $r2 = specialinvoke r0.<org.apache.ambari.server.api.resources.BaseResourceDefinition: org.apache.ambari.server.api.query.render.Renderer getRenderer(java.lang.String)>(r1)
org.apache.ambari.server.api.resources.ClusterResourceDefinition.getRenderer : $r2 = specialinvoke r0.<org.apache.ambari.server.api.resources.BaseResourceDefinition: org.apache.ambari.server.api.query.render.Renderer getRenderer(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : if r1 == null
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : if r1 == null >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("default")
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("default") >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : if $z0 == 0
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : if $z0 == 0 >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("minimal")
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("minimal") >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : if $z1 == 0
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : if $z1 == 0 >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $z2 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("null_padding")
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $z2 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("null_padding") >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : if $z2 != 0
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : if $z2 != 0 >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $z3 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("no_padding")
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $z3 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("no_padding") >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : if $z3 != 0
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : if $z3 != 0 >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $z4 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("zero_padding")
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $z4 = virtualinvoke r1.<java.lang.String: boolean contains(java.lang.CharSequence)>("zero_padding") >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : if $z4 == 0
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : if $z4 == 0 >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r3 = new java.lang.IllegalArgumentException
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r3 = new java.lang.IllegalArgumentException >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r4 = new java.lang.StringBuilder
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r4 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid renderer name for resource of type ")
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid renderer name for resource of type ") >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r6 = r0.<org.apache.ambari.server.api.resources.BaseResourceDefinition: org.apache.ambari.server.controller.spi.Resource$Type m_type>
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r6 = r0.<org.apache.ambari.server.api.resources.BaseResourceDefinition: org.apache.ambari.server.controller.spi.Resource$Type m_type> >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6)
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6) >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.toString : $r1 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: java.lang.String name>
org.apache.ambari.server.controller.spi.Resource$Type.toString : $r1 = r0.<org.apache.ambari.server.controller.spi.Resource$Type: java.lang.String name> >>>>>>>> org.apache.ambari.server.controller.spi.Resource$Type.toString : return $r1
org.apache.ambari.server.controller.spi.Resource$Type.toString : return $r1 >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8)
org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8) >>>>>>>> org.apache.ambari.server.api.resources.BaseResourceDefinition.getRenderer : throw $r3
