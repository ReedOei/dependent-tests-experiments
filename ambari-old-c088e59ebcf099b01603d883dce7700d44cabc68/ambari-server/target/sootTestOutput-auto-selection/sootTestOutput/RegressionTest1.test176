org.apache.ambari.server.utils.Parallel.initExecutor : $r2 = new java.util.concurrent.SynchronousQueue >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : specialinvoke $r2.<java.util.concurrent.SynchronousQueue: void <init>()>()
org.apache.ambari.server.utils.Parallel.initExecutor : specialinvoke $r2.<java.util.concurrent.SynchronousQueue: void <init>()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r3 = new java.util.concurrent.ThreadPoolExecutor
org.apache.ambari.server.utils.Parallel.initExecutor : $r3 = new java.util.concurrent.ThreadPoolExecutor >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $i0 = <org.apache.ambari.server.utils.Parallel: int MAX_POOL_SIZE>
org.apache.ambari.server.utils.Parallel.initExecutor : $i0 = <org.apache.ambari.server.utils.Parallel: int MAX_POOL_SIZE> >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES>
org.apache.ambari.server.utils.Parallel.initExecutor : $r5 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MINUTES> >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r4 = new org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory
org.apache.ambari.server.utils.Parallel.initExecutor : $r4 = new org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : specialinvoke $r4.<org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory: void <init>(org.apache.ambari.server.utils.Parallel$1)>(null)
org.apache.ambari.server.utils.Parallel.initExecutor : specialinvoke $r4.<org.apache.ambari.server.utils.Parallel$ParallelLoopsThreadFactory: void <init>(org.apache.ambari.server.utils.Parallel$1)>(null) >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r6 = new java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy
org.apache.ambari.server.utils.Parallel.initExecutor : $r6 = new java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : specialinvoke $r6.<java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy: void <init>()>()
org.apache.ambari.server.utils.Parallel.initExecutor : specialinvoke $r6.<java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy: void <init>()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : specialinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>(2, $i0, 15L, $r5, $r2, $r4, $r6)
org.apache.ambari.server.utils.Parallel.initExecutor : specialinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler)>(2, $i0, 15L, $r5, $r2, $r4, $r6) >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : virtualinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: void allowCoreThreadTimeOut(boolean)>(1)
org.apache.ambari.server.utils.Parallel.initExecutor : virtualinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: void allowCoreThreadTimeOut(boolean)>(1) >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r8 = <org.apache.ambari.server.utils.Parallel: org.slf4j.Logger LOG>
org.apache.ambari.server.utils.Parallel.initExecutor : $r8 = <org.apache.ambari.server.utils.Parallel: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r7 = newarray (java.lang.Object)[4]
org.apache.ambari.server.utils.Parallel.initExecutor : $r7 = newarray (java.lang.Object)[4] >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $i1 = staticinvoke <java.lang.Thread: int activeCount()>()
org.apache.ambari.server.utils.Parallel.initExecutor : $i1 = staticinvoke <java.lang.Thread: int activeCount()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)
org.apache.ambari.server.utils.Parallel.initExecutor : $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r7[0] = $r9
org.apache.ambari.server.utils.Parallel.initExecutor : $r7[0] = $r9 >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $i2 = virtualinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: int getPoolSize()>()
org.apache.ambari.server.utils.Parallel.initExecutor : $i2 = virtualinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: int getPoolSize()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)
org.apache.ambari.server.utils.Parallel.initExecutor : $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2) >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r7[1] = $r10
org.apache.ambari.server.utils.Parallel.initExecutor : $r7[1] = $r10 >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $i3 = virtualinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: int getCorePoolSize()>()
org.apache.ambari.server.utils.Parallel.initExecutor : $i3 = virtualinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: int getCorePoolSize()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3)
org.apache.ambari.server.utils.Parallel.initExecutor : $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3) >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r7[2] = $r11
org.apache.ambari.server.utils.Parallel.initExecutor : $r7[2] = $r11 >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $i4 = virtualinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: int getMaximumPoolSize()>()
org.apache.ambari.server.utils.Parallel.initExecutor : $i4 = virtualinvoke $r3.<java.util.concurrent.ThreadPoolExecutor: int getMaximumPoolSize()>() >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4)
org.apache.ambari.server.utils.Parallel.initExecutor : $r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : $r7[3] = $r12
org.apache.ambari.server.utils.Parallel.initExecutor : $r7[3] = $r12 >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Parallel library initialized: ThreadCount = {}, CurrentPoolSize = {}, CorePoolSize = {}, MaxPoolSize = {}", $r7)
org.apache.ambari.server.utils.Parallel.initExecutor : interfaceinvoke $r8.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Parallel library initialized: ThreadCount = {}, CurrentPoolSize = {}, CorePoolSize = {}, MaxPoolSize = {}", $r7) >>>>>>>> org.apache.ambari.server.utils.Parallel.initExecutor : return $r3
