org.apache.ambari.server.utils.RequestUtils.isRemoteAddressUnknown : if r0 == null goto $z1 = 1
org.apache.ambari.server.utils.RequestUtils.containsMultipleRemoteAddresses : if r0 == null goto $z0 = 0
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : goto [?= $z1 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean isRemoteAddressUnknown(java.lang.String)>(r5)]
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : return r5
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z3 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean isRemoteAddressUnknown(java.lang.String)>(r5)
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : r5 = null
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $r3 = <org.apache.ambari.server.utils.RequestUtils: java.util.Set headersToCheck>
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : $z1 = staticinvoke <org.apache.ambari.server.utils.RequestUtils: boolean isRemoteAddressUnknown(java.lang.String)>(r5)
org.apache.ambari.server.utils.RequestUtils.getRemoteAddress : r5 = interfaceinvoke r0.<javax.servlet.http.HttpServletRequest: java.lang.String getHeader(java.lang.String)>(r2)
