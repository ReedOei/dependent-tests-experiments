org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : r3 = staticinvoke <java.security.KeyStore: java.security.KeyStore getInstance(java.lang.String)>(r2)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : return r3
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : $r4 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : $r5 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : goto [?= $r5 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>]
org.apache.ambari.server.security.encryption.AbstractCredentialStore.loadKeyStore : goto [?= return r3]
org.apache.ambari.server.security.encryption.CredentialStoreTest$DefaultMasterKeyServiceFactory.createPersisted : staticinvoke <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: boolean initializeMasterKeyFile(java.io.File,java.lang.String)>(r1, r2)
org.apache.ambari.server.security.encryption.CredentialStoreTest$DefaultMasterKeyServiceFactory.createPersisted : $r3 = new org.apache.ambari.server.security.encryption.MasterKeyServiceImpl
org.apache.ambari.server.security.SecurityFilterTest$MockModule.configure : $r2 = interfaceinvoke r1.<com.google.inject.Binder: com.google.inject.binder.AnnotatedBindingBuilder bind(java.lang.Class)>(class "Lorg/apache/ambari/server/state/stack/OsFamily;")
org.apache.ambari.server.security.credential.GenericKeyCredential.toValue : $r1 = r0.<org.apache.ambari.server.security.credential.GenericKeyCredential: char[] key>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r6 = interfaceinvoke r14.<java.security.Key: byte[] getEncoded()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : if r1 == null goto $r3 = staticinvoke <org.apache.ambari.server.security.credential.CredentialFactory: org.apache.ambari.server.security.credential.Credential createCredential(char[])>(r13)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r4 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : goto [?= $r3 = staticinvoke <org.apache.ambari.server.security.credential.CredentialFactory: org.apache.ambari.server.security.credential.Credential createCredential(char[])>(r13)]
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : $r3 = staticinvoke <org.apache.ambari.server.security.credential.CredentialFactory: org.apache.ambari.server.security.credential.Credential createCredential(char[])>(r13)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : r13 = null
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getCredential : if r14 == null goto (branch)
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r5 = new java.lang.String
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r12 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher dcipher>
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r7 = new javax.crypto.spec.SecretKeySpec
org.apache.ambari.server.security.encryption.AESEncryptor.decrypt : $r10 = r0.<org.apache.ambari.server.security.encryption.AESEncryptor: javax.crypto.Cipher dcipher>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.setMasterKeyService : r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService> = r1
org.apache.ambari.server.security.credential.GenericKeyCredential.fromValue : $r1 = new org.apache.ambari.server.security.credential.GenericKeyCredential
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : if r1 != null goto r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $r7 = virtualinvoke r3.<java.nio.CharBuffer: char[] array()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : return r4
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $r8 = virtualinvoke r2.<java.nio.ByteBuffer: byte[] array()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8")
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toChars : $r6 = virtualinvoke r3.<java.nio.CharBuffer: char[] array()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.getMasterSecret : $r1 = r0.<org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: char[] master>
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : interfaceinvoke r3.<java.util.concurrent.locks.Lock: void unlock()>()
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : virtualinvoke r0.<org.apache.ambari.server.security.encryption.InMemoryCredentialStore: void addCredential(java.security.KeyStore,java.lang.String,org.apache.ambari.server.security.credential.Credential)>(r4, r1, r2)
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : $r7 = r0.<org.apache.ambari.server.security.encryption.InMemoryCredentialStore: com.google.common.cache.Cache cache>
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : interfaceinvoke r3.<java.util.concurrent.locks.Lock: void lock()>()
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : goto [?= return]
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : r4 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.InMemoryCredentialStore: java.security.KeyStore loadKeyStore(java.io.InputStream,java.lang.String)>(null, "JCEKS")
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : r3 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.InMemoryCredentialStore: java.util.concurrent.locks.Lock getLock()>()
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : if r1 == null goto $r6 = new java.lang.IllegalArgumentException
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.addCredential : $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : if r2 == null goto return r2
org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : return r2
org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : virtualinvoke r2.<java.lang.Thread: void setDaemon(boolean)>(1)
org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : $r3 = staticinvoke <java.util.concurrent.Executors: java.util.concurrent.ThreadFactory defaultThreadFactory()>()
org.apache.ambari.server.security.encryption.InMemoryCredentialStore$1.newThread : $r4 = newarray (java.lang.Object)[1]
org.apache.ambari.server.security.credential.CredentialFactory.createCredential : r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>(r0)
org.apache.ambari.server.security.credential.CredentialFactory.createCredential : if r0 != null goto r1 = staticinvoke <java.lang.String: java.lang.String valueOf(char[])>(r0)
org.apache.ambari.server.security.credential.CredentialFactory.createCredential : $z0 = staticinvoke <org.apache.ambari.server.security.credential.PrincipalKeyCredential: boolean isValidValue(java.lang.String)>(r1)
org.apache.ambari.server.security.credential.CredentialFactory.createCredential : $r2 = staticinvoke <org.apache.ambari.server.security.credential.GenericKeyCredential: org.apache.ambari.server.security.credential.GenericKeyCredential fromValue(java.lang.String)>(r1)
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : goto [?= return r7]
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r7 = virtualinvoke r3.<javax.crypto.SecretKeyFactory: javax.crypto.SecretKey generateSecret(java.security.spec.KeySpec)>($r4)
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : return r7
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r3 = staticinvoke <javax.crypto.SecretKeyFactory: javax.crypto.SecretKeyFactory getInstance(java.lang.String)>("PBKDF2WithHmacSHA1")
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : r7 = null
org.apache.ambari.server.security.encryption.AESEncryptor.getKeyFromPassword : $r4 = new javax.crypto.spec.PBEKeySpec
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : if $r11 == null goto r12 = null
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : if r1 == null goto return
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r5 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: org.apache.ambari.server.security.encryption.MasterKeyService masterKeyService>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : goto [?= return]
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : if r3 != null goto $r11 = interfaceinvoke r3.<org.apache.ambari.server.security.credential.Credential: char[] toValue()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $r7 = new javax.crypto.spec.SecretKeySpec
org.apache.ambari.server.security.encryption.AbstractCredentialStore.addCredential : $i0 = lengthof $r11
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : r66 = null
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r7 = new java.lang.StringBuilder
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r22 = r66.<org.apache.ambari.server.security.encryption.EncryptionResult: byte[] cipher>
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r13 = new java.lang.StringBuilder
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : if r1 == null goto $z0 = virtualinvoke r0.<java.io.File: boolean exists()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : goto [?= $z0 = virtualinvoke r0.<java.io.File: boolean exists()>()]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : staticinvoke <org.apache.commons.io.FileUtils: void writeLines(java.io.File,java.lang.String,java.util.Collection)>(r0, "UTF8", $r6)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r37 = <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: org.apache.ambari.server.security.encryption.AESEncryptor aes>
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : if r66 == null goto return 1
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : goto [?= return 1]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : staticinvoke <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: void protectAccess(java.io.File)>(r0)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : return 1
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r6 = new java.util.ArrayList
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $z0 = virtualinvoke r0.<java.io.File: boolean exists()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r14 = r66.<org.apache.ambari.server.security.encryption.EncryptionResult: byte[] salt>
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r18 = r66.<org.apache.ambari.server.security.encryption.EncryptionResult: byte[] iv>
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r75)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeMasterKeyFile : $r4 = <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: org.slf4j.Logger LOG>
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z5 = virtualinvoke r0.<java.io.File: boolean isDirectory()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z1 = virtualinvoke r0.<java.io.File: boolean setReadable(boolean,boolean)>(0, 0)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z4 = virtualinvoke r0.<java.io.File: boolean setWritable(boolean,boolean)>(1, 1)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z6 = virtualinvoke r0.<java.io.File: boolean setExecutable(boolean,boolean)>(0, 0)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z0 = virtualinvoke r0.<java.io.File: boolean exists()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z3 = virtualinvoke r0.<java.io.File: boolean setWritable(boolean,boolean)>(0, 0)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.protectAccess : $z2 = virtualinvoke r0.<java.io.File: boolean setReadable(boolean,boolean)>(1, 1)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r19 = r4[1]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r24 = virtualinvoke $r15.<java.lang.String: char[] toCharArray()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : r4 = virtualinvoke $r11.<java.lang.String: java.lang.String[] split(java.lang.String)>("::")
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : r26 = staticinvoke <org.apache.commons.io.FileUtils: java.util.List readLines(java.io.File,java.lang.String)>(r1, "UTF8")
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : goto [?= return]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r5 = interfaceinvoke r26.<java.util.List: java.lang.Object get(int)>(0)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r7 = <org.apache.ambari.server.security.encryption.MasterKeyServiceImpl: org.slf4j.Logger LOG>
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r15 = new java.lang.String
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.initializeFromFile : $r11 = new java.lang.String
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : return r3
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : $r3 = new org.apache.ambari.server.security.encryption.EncryptionResult
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : r2 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF8")
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : return $r3
org.apache.ambari.server.security.encryption.AESEncryptor.encrypt : r3 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.AESEncryptor: org.apache.ambari.server.security.encryption.EncryptionResult encrypt(byte[])>(r2)
org.apache.ambari.server.security.encryption.CredentialStoreTest$InMemoryCredentialStoreServiceFactory.create : $r4 = new org.apache.ambari.server.security.encryption.InMemoryCredentialStore
org.apache.ambari.server.security.encryption.CredentialStoreTest$InMemoryCredentialStoreServiceFactory.create : interfaceinvoke $r4.<org.apache.ambari.server.security.encryption.CredentialStore: void setMasterKeyService(org.apache.ambari.server.security.encryption.MasterKeyService)>(r2)
org.apache.ambari.server.security.encryption.CredentialStoreTest$InMemoryCredentialStoreServiceFactory.create : return $r4
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : r7 = interfaceinvoke r1.<org.apache.ambari.server.security.encryption.CredentialStoreTest$CredentialStoreServiceFactory: org.apache.ambari.server.security.encryption.CredentialStore create(java.io.File,org.apache.ambari.server.security.encryption.MasterKeyService)>(r3, r6)
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : r8 = "mypassword"
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : r6 = interfaceinvoke r2.<org.apache.ambari.server.security.encryption.CredentialStoreTest$MasterKeyServiceFactory: org.apache.ambari.server.security.encryption.MasterKeyService createPersisted(java.io.File,java.lang.String)>($r11, "ThisIsSomeSecretPassPhrase1234")
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : $z0 = virtualinvoke $r11.<java.io.File: boolean exists()>()
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : $r12 = new org.apache.ambari.server.security.credential.GenericKeyCredential
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : r9 = interfaceinvoke r7.<org.apache.ambari.server.security.encryption.CredentialStore: org.apache.ambari.server.security.credential.Credential getCredential(java.lang.String)>("myalias")
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : $r11 = new java.io.File
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : $r14 = new java.lang.String
org.apache.ambari.server.security.encryption.CredentialStoreTest.addCredentialToStoreWithPersistMasterTest : $r10 = r0.<org.apache.ambari.server.security.encryption.CredentialStoreTest: org.junit.rules.TemporaryFolder tmpFolder>
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>(r1)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $r7 = virtualinvoke r2.<java.nio.CharBuffer: char[] array()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $r8 = virtualinvoke r3.<java.nio.ByteBuffer: byte[] array()>()
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : return r4
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : if r1 != null goto r2 = staticinvoke <java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>(r1)
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $r5 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8")
org.apache.ambari.server.security.encryption.AbstractCredentialStore.toBytes : $r6 = virtualinvoke r3.<java.nio.ByteBuffer: byte[] array()>()
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $i1 = virtualinvoke $r4.<java.io.FileReader: int read(char[])>(r14)
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : goto [?= return z0]
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $z2 = 1
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : r13 = null
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $r4 = new java.io.FileReader
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : $r5 = "#1.0# "
org.apache.ambari.server.security.encryption.MasterKeyServiceImpl.isMasterKeyFile : virtualinvoke $r4.<java.io.FileReader: void close()>()
org.apache.ambari.server.security.credential.PrincipalKeyCredential.isValidValue : if r0 == null goto $z1 = 0
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : if r3 == null goto interfaceinvoke r2.<java.util.concurrent.locks.Lock: void unlock()>()
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : r8 = null
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : goto [?= return r8]
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : $r5 = r0.<org.apache.ambari.server.security.encryption.InMemoryCredentialStore: com.google.common.cache.Cache cache>
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : if r1 == null goto return r8
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : r2 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.InMemoryCredentialStore: java.util.concurrent.locks.Lock getLock()>()
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : r8 = virtualinvoke r0.<org.apache.ambari.server.security.encryption.InMemoryCredentialStore: org.apache.ambari.server.security.credential.Credential getCredential(java.security.KeyStore,java.lang.String)>(r3, r1)
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : interfaceinvoke r2.<java.util.concurrent.locks.Lock: void unlock()>()
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : interfaceinvoke r2.<java.util.concurrent.locks.Lock: void lock()>()
org.apache.ambari.server.security.encryption.InMemoryCredentialStore.getCredential : $z0 = virtualinvoke r1.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.configuration.Configuration.readConfigFile : if r1 != null goto virtualinvoke $r2.<java.util.Properties: void load(java.io.InputStream)>(r1)
org.apache.ambari.server.configuration.Configuration.readConfigFile : $r3 = class "Lorg/apache/ambari/server/configuration/Configuration;"
org.apache.ambari.server.configuration.Configuration.readConfigFile : $r5 = new java.lang.RuntimeException
org.apache.ambari.server.configuration.Configuration.readConfigFile : $r2 = new java.util.Properties
org.apache.ambari.server.security.encryption.AbstractCredentialStore.getLock : $r1 = r0.<org.apache.ambari.server.security.encryption.AbstractCredentialStore: java.util.concurrent.locks.Lock lock>
