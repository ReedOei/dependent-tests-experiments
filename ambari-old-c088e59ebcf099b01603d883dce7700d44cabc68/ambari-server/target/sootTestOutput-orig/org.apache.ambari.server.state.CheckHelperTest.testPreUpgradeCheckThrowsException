org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r5 = newarray (org.apache.ambari.server.checks.AbstractCheckDescriptor$CheckQualification)[2]
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r9 = virtualinvoke r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: java.util.List getQualifications()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : $z2 = interfaceinvoke r4.<org.apache.ambari.server.checks.AbstractCheckDescriptor$CheckQualification: boolean isApplicable(org.apache.ambari.server.controller.PrereqCheckRequest)>(r1)
org.apache.ambari.server.checks.AbstractCheckDescriptor.isApplicable : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.CheckHelperTest.access$000 : $r1 = r0.<org.apache.ambari.server.state.CheckHelperTest: org.apache.ambari.server.checks.CheckDescription m_mockCheckDescription>
org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status>
org.apache.ambari.server.controller.PrereqCheckRequest.getResult : $r2 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.util.Map m_results>
org.apache.ambari.server.controller.PrereqCheckRequest.addResult : $r3 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.util.Map m_results>
org.apache.ambari.server.controller.PrereqCheckRequest.setTargetRepositoryVersion : r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity m_targetRepositoryVersion> = r1
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : $z0 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : return 1
org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification.isApplicable : $r6 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor$ServiceQualification: org.apache.ambari.server.checks.AbstractCheckDescriptor this$0>
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName>
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : $r11 = new org.apache.ambari.server.state.stack.PrerequisiteCheck
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : $r9 = new java.util.LinkedList
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : $z1 = virtualinvoke r6.<org.apache.ambari.server.checks.AbstractCheckDescriptor: boolean isApplicable(org.apache.ambari.server.controller.PrereqCheckRequest)>(r1)
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : r5 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : $r10 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : goto [?= (branch)]
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : $r13 = new org.apache.ambari.server.state.DescriptorPreCheck
org.apache.ambari.server.state.CheckHelper.getApplicablePrerequisiteChecks : r4 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getDescription : $r1 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription m_description>
org.apache.ambari.server.state.CheckHelperTest$MockCheck.perform : $r3 = r0.<org.apache.ambari.server.state.CheckHelperTest$MockCheck: org.apache.ambari.server.state.CheckHelperTest this$0>
org.apache.ambari.server.state.CheckHelper.performChecks : r6 = virtualinvoke r0.<org.apache.ambari.server.state.CheckHelper: java.util.List getApplicablePrerequisiteChecks(org.apache.ambari.server.controller.PrereqCheckRequest,java.util.List)>(r1, r2)
org.apache.ambari.server.state.CheckHelper.performChecks : $r11 = new java.util.ArrayList
org.apache.ambari.server.state.CheckHelper.performChecks : virtualinvoke r9.<org.apache.ambari.server.checks.AbstractCheckDescriptor: void perform(org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>(r10, r1)
org.apache.ambari.server.state.CheckHelper.performChecks : virtualinvoke r10.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailReason(java.lang.String)>("Unexpected server error happened")
org.apache.ambari.server.state.CheckHelper.performChecks : interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r10)
org.apache.ambari.server.state.CheckHelper.performChecks : $r12 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.CheckHelper.performChecks : r4 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>()
org.apache.ambari.server.state.CheckHelper.performChecks : r10 = r8.<org.apache.ambari.server.state.DescriptorPreCheck: org.apache.ambari.server.state.stack.PrerequisiteCheck check>
org.apache.ambari.server.state.CheckHelper.performChecks : z0 = virtualinvoke r3.<org.apache.ambari.server.configuration.Configuration: boolean isUpgradePrecheckBypass()>()
org.apache.ambari.server.state.CheckHelper.performChecks : $r30 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus FAIL>
org.apache.ambari.server.state.CheckHelper.performChecks : $r40 = virtualinvoke r10.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus getStatus()>()
org.apache.ambari.server.state.CheckHelper.performChecks : if z0 == 0 goto interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r10)
org.apache.ambari.server.state.CheckHelper.performChecks : r9 = r8.<org.apache.ambari.server.state.DescriptorPreCheck: org.apache.ambari.server.checks.AbstractCheckDescriptor descriptor>
org.apache.ambari.server.state.CheckHelper.performChecks : $r23 = <org.apache.ambari.server.state.CheckHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.state.CheckHelper.performChecks : $r42 = virtualinvoke r9.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription getDescription()>()
org.apache.ambari.server.state.CheckHelper.performChecks : r7 = interfaceinvoke r6.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : $r6 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification: java.lang.Class m_checkClass>
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : r3 = virtualinvoke r2.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.state.RepositoryType getType()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : return 1
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : if null != r4 goto r5 = interfaceinvoke r4.<org.apache.ambari.server.checks.UpgradeCheck: org.apache.ambari.server.state.RepositoryType[] orchestration()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor$OrchestrationQualification.isApplicable : r2 = virtualinvoke r1.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>()
org.apache.ambari.server.state.CheckHelperTest$MockCheck.getApplicableServices : $r1 = r0.<org.apache.ambari.server.state.CheckHelperTest$MockCheck: org.apache.ambari.server.state.CheckHelperTest this$0>
org.apache.ambari.server.state.stack.PrerequisiteCheck.setFailReason : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.lang.String m_failReason> = r1
org.apache.ambari.server.state.CheckHelperTest.access$200 : $r1 = r0.<org.apache.ambari.server.state.CheckHelperTest: java.lang.Object m_mockPerform>
org.apache.ambari.server.checks.AbstractCheckDescriptor.getQualifications : $r1 = staticinvoke <java.util.Collections: java.util.List emptyList()>()
org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity m_targetRepositoryVersion>
org.apache.ambari.server.state.stack.PrerequisiteCheck.setStatus : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> = r1
