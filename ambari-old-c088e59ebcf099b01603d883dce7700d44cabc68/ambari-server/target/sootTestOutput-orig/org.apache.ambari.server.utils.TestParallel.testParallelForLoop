org.apache.ambari.server.utils.Parallel.forLoop : if r0 == null goto $r41 = new org.apache.ambari.server.utils.ParallelLoopResult
org.apache.ambari.server.utils.Parallel.forLoop : z5 = 1
org.apache.ambari.server.utils.Parallel.forLoop : interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r46)
org.apache.ambari.server.utils.Parallel.forLoop : $r15 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.ambari.server.utils.Parallel.forLoop : r48 = null
org.apache.ambari.server.utils.Parallel.forLoop : i11 = i0
org.apache.ambari.server.utils.Parallel.forLoop : $r16 = interfaceinvoke r48.<java.util.concurrent.Future: java.lang.Object get()>()
org.apache.ambari.server.utils.Parallel.forLoop : goto [?= (branch)]
org.apache.ambari.server.utils.Parallel.forLoop : r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i11)
org.apache.ambari.server.utils.Parallel.forLoop : $i0 = interfaceinvoke r0.<java.util.List: int size()>()
org.apache.ambari.server.utils.Parallel.forLoop : if r48 != null goto $r16 = interfaceinvoke r48.<java.util.concurrent.Future: java.lang.Object get()>()
org.apache.ambari.server.utils.Parallel.forLoop : if r0 == null goto $r2 = new org.apache.ambari.server.utils.ParallelLoopResult
org.apache.ambari.server.utils.Parallel.forLoop : $i5 = i1 - i0
org.apache.ambari.server.utils.Parallel.forLoop : if i0 < 0 goto $r4 = new java.lang.IndexOutOfBoundsException
org.apache.ambari.server.utils.Parallel.forLoop : $r9 = new java.util.concurrent.ExecutorCompletionService
org.apache.ambari.server.utils.Parallel.forLoop : $r31 = new org.apache.ambari.server.utils.Parallel$1
org.apache.ambari.server.utils.Parallel.forLoop : i12 = 0
org.apache.ambari.server.utils.Parallel.forLoop : $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.utils.Parallel.forLoop : $i2 = interfaceinvoke r0.<java.util.List: int size()>()
org.apache.ambari.server.utils.Parallel.forLoop : $i3 = interfaceinvoke r0.<java.util.List: int size()>()
org.apache.ambari.server.utils.Parallel.forLoop : $r13 = new org.apache.ambari.server.utils.ParallelLoopResult
org.apache.ambari.server.utils.Parallel.forLoop : if i1 < 0 goto $r5 = new java.lang.IndexOutOfBoundsException
org.apache.ambari.server.utils.Parallel.forLoop : if i0 <= i1 goto $i4 = interfaceinvoke r0.<java.util.List: int size()>()
org.apache.ambari.server.utils.Parallel.forLoop : $i6 = interfaceinvoke $r11.<java.util.List: int size()>()
org.apache.ambari.server.utils.Parallel.forLoop : $i4 = interfaceinvoke r0.<java.util.List: int size()>()
org.apache.ambari.server.utils.Parallel.forLoop : $i9 = r50.<org.apache.ambari.server.utils.Parallel$ResultWrapper: int index>
org.apache.ambari.server.utils.Parallel.forLoop : $r17 = r50.<org.apache.ambari.server.utils.Parallel$ResultWrapper: java.lang.Object result>
org.apache.ambari.server.utils.Parallel.forLoop : goto [?= i12 = i12 + 1]
org.apache.ambari.server.utils.Parallel.forLoop : $r11 = new java.util.LinkedList
org.apache.ambari.server.utils.TestParallel$4.run : $r2 = (java.lang.Integer) r1
org.apache.ambari.server.utils.TestParallel$4.run : $i0 = virtualinvoke r1.<java.lang.Integer: int intValue()>()
org.apache.ambari.server.utils.Parallel$1.call : $r1 = virtualinvoke r0.<org.apache.ambari.server.utils.Parallel$1: org.apache.ambari.server.utils.Parallel$ResultWrapper call()>()
org.apache.ambari.server.utils.Parallel$1.call : $r2 = new org.apache.ambari.server.utils.Parallel$ResultWrapper
org.apache.ambari.server.utils.Parallel$1.call : $r5 = r0.<org.apache.ambari.server.utils.Parallel$1: org.apache.ambari.server.utils.LoopBody val$loopBody>
org.apache.ambari.server.utils.Parallel$1.call : $r3 = r0.<org.apache.ambari.server.utils.Parallel$1: java.lang.Integer val$k>
org.apache.ambari.server.utils.Parallel$1.call : return $r2
org.apache.ambari.server.utils.ParallelLoopResult.getResult : $r1 = r0.<org.apache.ambari.server.utils.ParallelLoopResult: java.util.List result>
org.apache.ambari.server.utils.ParallelLoopResult.getIsCompleted : $z0 = r0.<org.apache.ambari.server.utils.ParallelLoopResult: boolean isCompleted>
