org.apache.ambari.server.state.UpgradeContext$BasicUpgradePropertiesValidator.check : $r8 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("Upgrade/repository_version_id")
org.apache.ambari.server.state.UpgradeContext$BasicUpgradePropertiesValidator.check : $z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isBlank(java.lang.String)>(r6)
org.apache.ambari.server.state.UpgradeContext$BasicUpgradePropertiesValidator.check : $r7 = <org.apache.ambari.server.state.stack.upgrade.Direction: org.apache.ambari.server.state.stack.upgrade.Direction UPGRADE>
org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : $r5 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("Upgrade/upgrade_type")
org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : z0 = staticinvoke <org.apache.commons.lang.StringUtils: boolean isNotBlank(java.lang.String)>(r3)
org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : $r6 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("Upgrade/upgrade_type")
org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : if z0 == 0 goto (branch)
org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : goto [?= return r12]
org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : r12 = <org.apache.ambari.server.state.stack.upgrade.UpgradeType: org.apache.ambari.server.state.stack.upgrade.UpgradeType ROLLING>
org.apache.ambari.server.state.UpgradeContext.calculateUpgradeType : return r12
org.apache.ambari.server.state.UpgradeContext.isPatchRevert : $z0 = r0.<org.apache.ambari.server.state.UpgradeContext: boolean m_isRevert>
org.apache.ambari.server.state.stack.upgrade.Direction.isDowngrade : $r1 = <org.apache.ambari.server.state.stack.upgrade.Direction: org.apache.ambari.server.state.stack.upgrade.Direction DOWNGRADE>
org.apache.ambari.server.state.UpgradeContext.getOrchestrationType : $r1 = r0.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.RepositoryType m_orchestration>
org.apache.ambari.server.state.UpgradeContext.getDirection : $r1 = r0.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.stack.upgrade.Direction m_direction>
org.apache.ambari.server.state.UpgradeContext.getServicesForUpgrade : $r6 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.UpgradeContext.getServicesForUpgrade : r26 = virtualinvoke r25.<org.apache.ambari.server.state.repository.VersionDefinitionXml: org.apache.ambari.server.state.repository.ClusterVersionSummary getClusterSummary(org.apache.ambari.server.state.Cluster)>(r1)
org.apache.ambari.server.state.UpgradeContext.getServicesForUpgrade : $r4 = virtualinvoke r2.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.state.RepositoryType getType()>()
org.apache.ambari.server.state.UpgradeContext.getServicesForUpgrade : goto [?= r30 = interfaceinvoke r24.<java.util.Set: java.util.Iterator iterator()>()]
org.apache.ambari.server.state.UpgradeContext.getServicesForUpgrade : r25 = virtualinvoke r2.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.state.repository.VersionDefinitionXml getRepositoryXml()>()
org.apache.ambari.server.state.UpgradeContext.getServicesForUpgrade : goto [?= staticinvoke <edu.washington.cs.dt.impact.util.Tracer: void trace(java.lang.String,java.lang.String)>("$z1 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>()", "org.apache.ambari.server.state.UpgradeContext.getServicesForUpgrade")]
org.apache.ambari.server.state.UpgradeContext.getServicesForUpgrade : $z0 = interfaceinvoke r24.<java.util.Set: boolean isEmpty()>()
org.apache.ambari.server.state.UpgradeContext.getServicesForUpgrade : goto [?= (branch)]
org.apache.ambari.server.state.UpgradeContext.getServicesForUpgrade : r32 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Service getService(java.lang.String)>(r31)
org.apache.ambari.server.state.UpgradeContext.getServicesForUpgrade : r30 = interfaceinvoke r24.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.state.UpgradeContext.getServicesForUpgrade : $z1 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeContext.getServicesForUpgrade : $r10 = r0.<org.apache.ambari.server.state.UpgradeContext: java.util.Map m_targetRepositoryMap>
org.apache.ambari.server.state.UpgradeContext.getServicesForUpgrade : r24 = virtualinvoke r26.<org.apache.ambari.server.state.repository.ClusterVersionSummary: java.util.Set getAvailableServiceNames()>()
org.apache.ambari.server.state.UpgradeContext.getServicesForUpgrade : $r7 = r0.<org.apache.ambari.server.state.UpgradeContext: java.util.Map m_sourceRepositoryMap>
org.apache.ambari.server.state.UpgradeContext.getServicesForUpgrade : $r3 = new java.util.HashSet
org.apache.ambari.server.state.UpgradeContext.getServicesForUpgrade : return r24
org.apache.ambari.server.state.UpgradeContext.getServicesForUpgrade : r31 = null
org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator.validate : $r6 = r0.<org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator: org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator m_nextValidator>
org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator.validate : $r7 = r0.<org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator: org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator m_nextValidator>
org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator.validate : virtualinvoke r0.<org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator: void check(org.apache.ambari.server.state.Cluster,org.apache.ambari.server.state.stack.upgrade.Direction,org.apache.ambari.server.state.stack.upgrade.UpgradeType,org.apache.ambari.server.state.stack.UpgradePack,java.util.Map)>(r1, r2, r3, r4, r5)
org.apache.ambari.server.state.stack.upgrade.UpgradeType.valueOf : $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/apache/ambari/server/state/stack/upgrade/UpgradeType;", r0)
org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : if null == r8 goto $z3 = virtualinvoke r2.<org.apache.ambari.server.state.stack.upgrade.Direction: boolean isDowngrade()>()
org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : $r19 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("Upgrade/fail_on_check_warnings")
org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : $z3 = virtualinvoke r2.<org.apache.ambari.server.state.stack.upgrade.Direction: boolean isDowngrade()>()
org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : if z0 == 0 goto $r21 = <org.apache.ambari.server.controller.spi.Resource$Type: org.apache.ambari.server.controller.spi.Resource$Type PreUpgradeCheck>
org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : $z2 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>("Upgrade/pack")
org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : $r17 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("Upgrade/skip_prerequisite_checks")
org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : r8 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.orm.entities.UpgradeEntity getUpgradeInProgress()>()
org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator.check : $r16 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>("Upgrade/repository_version_id")
org.apache.ambari.server.state.StackId.parseStackIdHelper : if r2 == null goto r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = ""
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0)
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i1 = virtualinvoke r2.<java.lang.String: int length()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45)
org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1 goto $r3 = new java.lang.RuntimeException
org.apache.ambari.server.state.StackId.parseStackIdHelper : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1
org.apache.ambari.server.state.UpgradeContext.getSupportedServices : $r1 = r0.<org.apache.ambari.server.state.UpgradeContext: java.util.Set m_services>
org.apache.ambari.server.state.UpgradeContext.buildValidator : r8 = null
org.apache.ambari.server.state.UpgradeContext.buildValidator : virtualinvoke $r4.<org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator: void setNextValidator(org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator)>($r5)
org.apache.ambari.server.state.UpgradeContext.buildValidator : $r4 = new org.apache.ambari.server.state.UpgradeContext$BasicUpgradePropertiesValidator
org.apache.ambari.server.state.UpgradeContext.buildValidator : $r6 = <org.apache.ambari.server.state.UpgradeContext$1: int[] $SwitchMap$org$apache$ambari$server$state$stack$upgrade$UpgradeType>
org.apache.ambari.server.state.UpgradeContext.buildValidator : virtualinvoke $r5.<org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator: void setNextValidator(org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator)>(r8)
org.apache.ambari.server.state.UpgradeContext.buildValidator : return $r4
org.apache.ambari.server.state.UpgradeContext.buildValidator : $r5 = new org.apache.ambari.server.state.UpgradeContext$PreReqCheckValidator
org.apache.ambari.server.state.stack.upgrade.Direction.valueOf : $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lorg/apache/ambari/server/state/stack/upgrade/Direction;", r0)
org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator.setNextValidator : r0.<org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator: org.apache.ambari.server.state.UpgradeContext$UpgradeRequestValidator m_nextValidator> = r1
