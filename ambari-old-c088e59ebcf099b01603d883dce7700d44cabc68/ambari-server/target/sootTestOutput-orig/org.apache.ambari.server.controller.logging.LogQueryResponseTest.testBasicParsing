org.apache.ambari.server.controller.logging.LogLineResult.setTtl : r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String ttl> = r1
org.apache.ambari.server.controller.logging.LogLineResult.getEventCount : $r1 = r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String eventCount>
org.apache.ambari.server.controller.logging.LogQueryResponse.setQueryTimeMS : r0.<org.apache.ambari.server.controller.logging.LogQueryResponse: java.lang.String queryTimeMS> = r1
org.apache.ambari.server.controller.logging.LogLineResult.setLogLevel : r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String logLevel> = r1
org.apache.ambari.server.controller.logging.LogLineResult.getSourceFile : $r1 = r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String sourceFile>
org.apache.ambari.server.controller.logging.LogLineResult.setLoggerName : r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String loggerName> = r1
org.apache.ambari.server.controller.logging.LogQueryResponse.getQueryTimeMS : $r1 = r0.<org.apache.ambari.server.controller.logging.LogQueryResponse: java.lang.String queryTimeMS>
org.apache.ambari.server.controller.logging.LogLineResult.getIpAddress : $r1 = r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String ipAddress>
org.apache.ambari.server.controller.logging.LogLineResult.getTtl : $r1 = r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String ttl>
org.apache.ambari.server.controller.logging.LogQueryResponse.setStartIndex : r0.<org.apache.ambari.server.controller.logging.LogQueryResponse: java.lang.String startIndex> = r1
org.apache.ambari.server.controller.logging.LogLineResult.setEventMD5 : r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String eventMD5> = r1
org.apache.ambari.server.controller.logging.LogLineResult.setComponentType : r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String componentType> = r1
org.apache.ambari.server.controller.logging.LogLineResult.getComponentType : $r1 = r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String componentType>
org.apache.ambari.server.controller.logging.LogLineResult.getSourceFileLineNumber : $r1 = r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String sourceFileLineNumber>
org.apache.ambari.server.controller.logging.LogLineResult.getExpirationTime : $r1 = r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String expirationTime>
org.apache.ambari.server.controller.logging.LogLineResult.setExpirationTime : r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String expirationTime> = r1
org.apache.ambari.server.controller.logging.LogLineResult.setLogFilePath : r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String logFilePath> = r1
org.apache.ambari.server.controller.logging.LogLineResult.setClusterName : r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String clusterName> = r1
org.apache.ambari.server.controller.logging.LogLineResult.getLoggerName : $r1 = r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String loggerName>
org.apache.ambari.server.controller.logging.LogQueryResponse.setPageSize : r0.<org.apache.ambari.server.controller.logging.LogQueryResponse: java.lang.String pageSize> = r1
org.apache.ambari.server.controller.logging.LogLineResult.getId : $r1 = r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String id>
org.apache.ambari.server.controller.logging.LogLineResult.getMessageMD5 : $r1 = r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String messageMD5>
org.apache.ambari.server.controller.logging.LogQueryResponse.setResultSize : r0.<org.apache.ambari.server.controller.logging.LogQueryResponse: java.lang.String resultSize> = r1
org.apache.ambari.server.controller.logging.LogLineResult.getLogMethod : $r1 = r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String logMethod>
org.apache.ambari.server.controller.logging.LogLineResult.setSourceFileLineNumber : r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String sourceFileLineNumber> = r1
org.apache.ambari.server.controller.logging.LogLineResult.setIpAddress : r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String ipAddress> = r1
org.apache.ambari.server.controller.logging.LogLineResult.setEventCount : r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String eventCount> = r1
org.apache.ambari.server.controller.logging.LogLineResult.getLogFilePath : $r1 = r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String logFilePath>
org.apache.ambari.server.controller.logging.LogLineResult.getHostName : $r1 = r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String hostName>
org.apache.ambari.server.controller.logging.LogLineResult.getVersion : $r1 = r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String version>
org.apache.ambari.server.controller.logging.LogQueryResponse.setLogList : r0.<org.apache.ambari.server.controller.logging.LogQueryResponse: java.util.List listOfResults> = r1
org.apache.ambari.server.controller.logging.LogLineResult.setLogMethod : r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String logMethod> = r1
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : $r4 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getLogMethod()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("component type not parsed properly", "yarn_resourcemanager", $r8)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : $r16 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getId()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("logfile line number not parsed properly", "549", $r20)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("event_count not parsed properly", "1", $r6)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("logger name not parsed properly", "timeline.HadoopTimelineMetricsSink", $r15)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ip address not parsed properly", "192.168.1.1", $r7)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : $r10 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getLogFilePath()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ttl not parsed properly", "+7DAYS", $r21)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : $r6 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getEventCount()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("log message not parsed properly", "Unable to send metrics to collector by address:http://c6401.ambari.apache.org:6188/ws/v1/timeline/metrics", $r14)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("log file path not parsed properly", "/var/log/hadoop-yarn/yarn/yarn-yarn-resourcemanager-c6401.ambari.apache.org.log", $r10)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : $r12 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getSourceFileLineNumber()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : $r22 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getExpirationTime()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : $r14 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getLogMessage()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("host name not parsed properly", "c6401.ambari.apache.org", $r13)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("message MD5 not parsed properly", "5942185045779825717", $r17)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Cluster name not parsed properly", "clusterone", $r3)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("log time not parsed properly", "1458148746937", $r18)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("expire at not parsed properly", "1458753550322", $r22)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(1)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Log Level not parsed properly", "WARN", $r5)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : $r9 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getSequenceNumber()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("id not parsed properly", "8361c5a9-5b1c-4f44-bc8f-4c6f07d94228", $r16)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : $r8 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getComponentType()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("sequence number not parsed properly", "10583", $r9)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : $r15 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getLoggerName()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : $r17 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getMessageMD5()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : $r20 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getLogFileLineNumber()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : $r21 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getTtl()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : $r23 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getVersion()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : $r3 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getClusterName()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : $r19 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getEventMD5()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : $r13 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getHostName()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("log src line number not parsed properly", "262", $r12)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("version not parsed properly", "1528979784022884357", $r23)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : $r18 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getLogTime()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Method Name not parsed properly", "putMetrics", $r4)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : $r7 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getIpAddress()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("log src file name not parsed properly", "HadoopTimelineMetricsSink.java", $r11)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("event MD5 not parsed properly", "14581487469371427138486123628676", $r19)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : $r11 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getSourceFile()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifySecondLine : $r5 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getLogLevel()>()
org.apache.ambari.server.controller.logging.LogLineResult.setLogTime : r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String logTime> = r1
org.apache.ambari.server.controller.logging.LogLineResult.setVersion : r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String version> = r1
org.apache.ambari.server.controller.logging.LogLineResult.getLogLevel : $r1 = r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String logLevel>
org.apache.ambari.server.controller.logging.LogLineResult.getLogTime : $r1 = r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String logTime>
org.apache.ambari.server.controller.logging.LogLineResult.setLogMessage : r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String logMessage> = r1
org.apache.ambari.server.controller.logging.LogLineResult.setMessageMD5 : r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String messageMD5> = r1
org.apache.ambari.server.controller.logging.LogLineResult.setSequenceNumber : r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String sequenceNumber> = r1
org.apache.ambari.server.controller.logging.LogLineResult.setId : r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String id> = r1
org.apache.ambari.server.controller.logging.LogLineResult.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String clusterName>
org.apache.ambari.server.controller.logging.LogLineResult.getLogMessage : $r1 = r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String logMessage>
org.apache.ambari.server.controller.logging.LogQueryResponse.setTotalCount : r0.<org.apache.ambari.server.controller.logging.LogQueryResponse: java.lang.String totalCount> = r1
org.apache.ambari.server.controller.logging.LogLineResult.getLogFileLineNumber : $r1 = r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String logFileLineNumber>
org.apache.ambari.server.controller.logging.LogQueryResponse.getTotalCount : $r1 = r0.<org.apache.ambari.server.controller.logging.LogQueryResponse: java.lang.String totalCount>
org.apache.ambari.server.controller.logging.LogLineResult.getSequenceNumber : $r1 = r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String sequenceNumber>
org.apache.ambari.server.controller.logging.LogLineResult.setHostName : r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String hostName> = r1
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : $r4 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getLogMethod()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("component type not parsed properly", "hdfs_namenode", $r8)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("log src line number not parsed properly", "394", $r12)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("log message not parsed properly", "chooseUnderReplicatedBlocks selected 2 blocks at priority level 0;  Total=2 Reset bookmarks? false", $r14)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : $r16 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getId()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("event_count not parsed properly", "1", $r6)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ip address not parsed properly", "192.168.1.1", $r7)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : $r10 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getLogFilePath()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("log src file name not parsed properly", "UnderReplicatedBlocks.java", $r11)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("ttl not parsed properly", "+7DAYS", $r21)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("logfile line number not parsed properly", "2084", $r20)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : $r6 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getEventCount()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : $r12 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getSourceFileLineNumber()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : $r22 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getExpirationTime()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : $r14 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getLogMessage()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Log Level not parsed properly", "INFO", $r5)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("host name not parsed properly", "c6401.ambari.apache.org", $r13)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Method Name not parsed properly", "chooseUnderReplicatedBlocks", $r4)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("Cluster name not parsed properly", "clusterone", $r3)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("version not parsed properly", "1528979784023932928", $r23)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("logger name not parsed properly", "BlockStateChange", $r15)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("expire at not parsed properly", "1458753550322", $r22)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : $r9 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getSequenceNumber()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("log time not parsed properly", "1458148749036", $r18)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : $r8 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getComponentType()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : $r15 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getLoggerName()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : $r17 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getMessageMD5()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : $r20 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getLogFileLineNumber()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : $r21 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getTtl()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : $r23 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getVersion()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : $r3 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getClusterName()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("sequence number not parsed properly", "10584", $r9)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : $r19 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getEventMD5()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : $r13 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getHostName()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("id not parsed properly", "9c5562fb-123f-47c8-aaf5-b5e407326c08", $r16)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : $r18 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getLogTime()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : $r7 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getIpAddress()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("event MD5 not parsed properly", "1458148749036-2417481968206345035", $r19)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : $r11 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getSourceFile()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("message MD5 not parsed properly", "-3892769501348410581", $r17)
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : $r5 = virtualinvoke r1.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String getLogLevel()>()
org.apache.ambari.server.controller.logging.LogQueryResponseTest.verifyFirstLine : staticinvoke <org.junit.Assert: void assertEquals(java.lang.String,java.lang.Object,java.lang.Object)>("log file path not parsed properly", "/var/log/hadoop/hdfs/hadoop-hdfs-namenode-c6401.ambari.apache.org.log", $r10)
org.apache.ambari.server.controller.logging.LogLineResult.setLogFileLineNumber : r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String logFileLineNumber> = r1
org.apache.ambari.server.controller.logging.LogQueryResponse.getStartIndex : $r1 = r0.<org.apache.ambari.server.controller.logging.LogQueryResponse: java.lang.String startIndex>
org.apache.ambari.server.controller.logging.LogLineResult.getEventMD5 : $r1 = r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String eventMD5>
org.apache.ambari.server.controller.logging.LogQueryResponse.getResultSize : $r1 = r0.<org.apache.ambari.server.controller.logging.LogQueryResponse: java.lang.String resultSize>
org.apache.ambari.server.controller.logging.LogLineResult.setSourceFile : r0.<org.apache.ambari.server.controller.logging.LogLineResult: java.lang.String sourceFile> = r1
org.apache.ambari.server.controller.logging.LogQueryResponse.getPageSize : $r1 = r0.<org.apache.ambari.server.controller.logging.LogQueryResponse: java.lang.String pageSize>
org.apache.ambari.server.controller.logging.LogQueryResponse.getListOfResults : $r1 = r0.<org.apache.ambari.server.controller.logging.LogQueryResponse: java.util.List listOfResults>
