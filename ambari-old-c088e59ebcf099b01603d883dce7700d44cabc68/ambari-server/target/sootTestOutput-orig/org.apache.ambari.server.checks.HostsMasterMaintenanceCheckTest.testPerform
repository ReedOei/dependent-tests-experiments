org.apache.ambari.server.checks.HostsMasterMaintenanceCheckTest$3.get : $r1 = r0.<org.apache.ambari.server.checks.HostsMasterMaintenanceCheckTest$3: org.apache.ambari.server.checks.HostsMasterMaintenanceCheckTest this$0>
org.apache.ambari.server.checks.HostsMasterMaintenanceCheckTest$3.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.HostsMasterMaintenanceCheckTest$3: org.apache.ambari.server.state.stack.upgrade.RepositoryVersionHelper get()>()
org.apache.ambari.server.state.stack.PrerequisiteCheck.getFailedOn : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet m_failedOn>
org.apache.ambari.server.controller.PrereqCheckRequest.getSourceStackId : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId m_sourceStackId>
org.apache.ambari.server.controller.PrereqCheckRequest.setSourceStackId : r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId m_sourceStackId> = r1
org.apache.ambari.server.state.StackId.parseStackIdHelper : if r2 == null goto r1.<org.apache.ambari.server.state.StackId: java.lang.String stackName> = ""
org.apache.ambari.server.state.StackId.parseStackIdHelper : $r8 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(0, i0)
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i1 = virtualinvoke r2.<java.lang.String: int length()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : i0 = virtualinvoke r2.<java.lang.String: int indexOf(int)>(45)
org.apache.ambari.server.state.StackId.parseStackIdHelper : if i0 == -1 goto $r3 = new java.lang.RuntimeException
org.apache.ambari.server.state.StackId.parseStackIdHelper : $z0 = virtualinvoke r2.<java.lang.String: boolean isEmpty()>()
org.apache.ambari.server.state.StackId.parseStackIdHelper : $i3 = i0 + 1
org.apache.ambari.server.checks.HostsMasterMaintenanceCheckTest$1.get : $r1 = r0.<org.apache.ambari.server.checks.HostsMasterMaintenanceCheckTest$1: org.apache.ambari.server.checks.HostsMasterMaintenanceCheckTest this$0>
org.apache.ambari.server.checks.HostsMasterMaintenanceCheckTest$1.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.HostsMasterMaintenanceCheckTest$1: org.apache.ambari.server.state.Clusters get()>()
org.apache.ambari.server.checks.CheckDescription.getFail : $r2 = r0.<org.apache.ambari.server.checks.CheckDescription: java.util.Map m_fails>
org.apache.ambari.server.state.stack.PrerequisiteCheck.setFailReason : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.lang.String m_failReason> = r1
org.apache.ambari.server.state.StackId.getStackName : $r1 = r0.<org.apache.ambari.server.state.StackId: java.lang.String stackName>
org.apache.ambari.server.state.stack.PrerequisiteCheck.getStatus : $r1 = r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status>
org.apache.ambari.server.checks.HostsMasterMaintenanceCheckTest.access$200 : $r1 = r0.<org.apache.ambari.server.checks.HostsMasterMaintenanceCheckTest: org.apache.ambari.server.state.stack.upgrade.RepositoryVersionHelper repositoryVersionHelper>
org.apache.ambari.server.checks.HostsMasterMaintenanceCheckTest.access$000 : $r1 = r0.<org.apache.ambari.server.checks.HostsMasterMaintenanceCheckTest: org.apache.ambari.server.state.Clusters clusters>
org.apache.ambari.server.state.StackId.getStackVersion : $r1 = r0.<org.apache.ambari.server.state.StackId: java.lang.String stackVersion>
org.apache.ambari.server.controller.PrereqCheckRequest.getTargetRepositoryVersion : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity m_targetRepositoryVersion>
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : if null == r4 goto $z5 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{fails}}")
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r31 = virtualinvoke r4.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String getVersion()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : r4 = virtualinvoke r3.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>()
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z5 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{fails}}")
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $z0 = virtualinvoke r32.<java.lang.String: boolean contains(java.lang.CharSequence)>("{{version}}")
org.apache.ambari.server.checks.AbstractCheckDescriptor.getFailReason : $r12 = r0.<org.apache.ambari.server.checks.AbstractCheckDescriptor: org.apache.ambari.server.checks.CheckDescription m_description>
org.apache.ambari.server.controller.PrereqCheckRequest.setTargetRepositoryVersion : r0.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity m_targetRepositoryVersion> = r1
org.apache.ambari.server.state.stack.PrerequisiteCheck.setStatus : r0.<org.apache.ambari.server.state.stack.PrerequisiteCheck: org.apache.ambari.server.state.stack.PrereqCheckStatus m_status> = r1
org.apache.ambari.server.checks.HostsMasterMaintenanceCheckTest$4.get : $r1 = virtualinvoke r0.<org.apache.ambari.server.checks.HostsMasterMaintenanceCheckTest$4: org.apache.ambari.server.api.services.AmbariMetaInfo get()>()
org.apache.ambari.server.checks.HostsMasterMaintenanceCheckTest$4.get : $r1 = r0.<org.apache.ambari.server.checks.HostsMasterMaintenanceCheckTest$4: org.apache.ambari.server.checks.HostsMasterMaintenanceCheckTest this$0>
org.apache.ambari.server.checks.HostsMasterMaintenanceCheckTest.access$300 : $r1 = r0.<org.apache.ambari.server.checks.HostsMasterMaintenanceCheckTest: org.apache.ambari.server.api.services.AmbariMetaInfo ambariMetaInfo>
org.apache.ambari.server.checks.HostsMasterMaintenanceCheck.perform : $r31 = r0.<org.apache.ambari.server.checks.HostsMasterMaintenanceCheck: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.HostsMasterMaintenanceCheck.perform : r3 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String getClusterName()>()
org.apache.ambari.server.checks.HostsMasterMaintenanceCheck.perform : $r26 = new java.util.HashSet
org.apache.ambari.server.checks.HostsMasterMaintenanceCheck.perform : $r15 = (org.apache.ambari.server.state.stack.upgrade.RepositoryVersionHelper) $r14
org.apache.ambari.server.checks.HostsMasterMaintenanceCheck.perform : $r13 = r0.<org.apache.ambari.server.checks.HostsMasterMaintenanceCheck: com.google.inject.Provider repositoryVersionHelper>
org.apache.ambari.server.checks.HostsMasterMaintenanceCheck.perform : $r12 = new java.util.HashSet
org.apache.ambari.server.checks.HostsMasterMaintenanceCheck.perform : r7 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion()>()
org.apache.ambari.server.checks.HostsMasterMaintenanceCheck.perform : r5 = virtualinvoke r2.<org.apache.ambari.server.controller.PrereqCheckRequest: org.apache.ambari.server.state.StackId getSourceStackId()>()
org.apache.ambari.server.checks.HostsMasterMaintenanceCheck.perform : if r63 != null goto $r26 = new java.util.HashSet
org.apache.ambari.server.checks.HostsMasterMaintenanceCheck.perform : $r29 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: java.util.Map getServices()>()
org.apache.ambari.server.checks.HostsMasterMaintenanceCheck.perform : $r57 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus FAIL>
org.apache.ambari.server.checks.HostsMasterMaintenanceCheck.perform : $r19 = r0.<org.apache.ambari.server.checks.HostsMasterMaintenanceCheck: com.google.inject.Provider ambariMetaInfo>
org.apache.ambari.server.checks.HostsMasterMaintenanceCheck.perform : $r35 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>()
org.apache.ambari.server.checks.HostsMasterMaintenanceCheck.perform : $r34 = interfaceinvoke r72.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.checks.HostsMasterMaintenanceCheck.perform : $r54 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus FAIL>
org.apache.ambari.server.checks.HostsMasterMaintenanceCheck.perform : r64 = virtualinvoke r0.<org.apache.ambari.server.checks.HostsMasterMaintenanceCheck: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("no_upgrade_pack", r1, r2)
org.apache.ambari.server.checks.HostsMasterMaintenanceCheck.perform : $r58 = newarray (java.lang.Object)[2]
org.apache.ambari.server.checks.HostsMasterMaintenanceCheck.perform : $r9 = r0.<org.apache.ambari.server.checks.HostsMasterMaintenanceCheck: com.google.inject.Provider clustersProvider>
org.apache.ambari.server.checks.HostsMasterMaintenanceCheck.perform : $r55 = newarray (java.lang.Object)[1]
org.apache.ambari.server.checks.HostsMasterMaintenanceCheck.perform : r62 = virtualinvoke r0.<org.apache.ambari.server.checks.HostsMasterMaintenanceCheck: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("no_upgrade_name", r1, r2)
org.apache.ambari.server.checks.HostsMasterMaintenanceCheck.perform : $r27 = virtualinvoke r63.<org.apache.ambari.server.state.stack.UpgradePack: java.util.Map getTasks()>()
org.apache.ambari.server.checks.HostsMasterMaintenanceCheck.perform : if r8 != null goto $r19 = r0.<org.apache.ambari.server.checks.HostsMasterMaintenanceCheck: com.google.inject.Provider ambariMetaInfo>
org.apache.ambari.server.controller.PrereqCheckRequest.getClusterName : $r1 = r0.<org.apache.ambari.server.controller.PrereqCheckRequest: java.lang.String m_clusterName>
