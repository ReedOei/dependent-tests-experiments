org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r48 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : specialinvoke r48.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : specialinvoke r48.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if null != r1
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if null != r1 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r49 = new java.util.HashMap
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if null != r1 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if null != r33
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if null != r33 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r33 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: java.util.Map getDesiredConfigs()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if null != r33 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r33 == null
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r33 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r24 = interfaceinvoke r33.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r33 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r1 != null
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r1 != null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r51 = new java.util.HashMap
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r1 != null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r7 = virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r7 = virtualinvoke r0.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r37 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: java.util.Map getConfigGroupsByHostname(java.lang.String)>($r7)
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r37 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: java.util.Map getConfigGroupsByHostname(java.lang.String)>($r7) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $r37 == null
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $r37 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $z0 = interfaceinvoke $r37.<java.util.Map: boolean isEmpty()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $r37 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : return r48
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $z0 = interfaceinvoke $r37.<java.util.Map: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $z0 != 0
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $z0 != 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r8 = interfaceinvoke $r37.<java.util.Map: java.util.Collection values()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $z0 != 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : return r48
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r8 = interfaceinvoke $r37.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r39 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r39 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $z1 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $z1 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $z1 == 0
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r9 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : return r48
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r9 = interfaceinvoke r39.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r40 = (org.apache.ambari.server.state.configgroup.ConfigGroup) $r9
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r40 = (org.apache.ambari.server.state.configgroup.ConfigGroup) $r9 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r10 = interfaceinvoke r40.<org.apache.ambari.server.state.configgroup.ConfigGroup: java.util.Map getConfigurations()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r10 = interfaceinvoke r40.<org.apache.ambari.server.state.configgroup.ConfigGroup: java.util.Map getConfigurations()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r11 = interfaceinvoke $r10.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r3 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r3 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $z2 == 0
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : goto [?= $z1 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : goto [?= $z1 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $z1 = interfaceinvoke r39.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r12 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r4 = (java.util.Map$Entry) $r12
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r4 = (java.util.Map$Entry) $r12 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r13 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r13 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r5 = (java.lang.String) $r13
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r5 = (java.lang.String) $r13 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r14 = interfaceinvoke r48.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5)
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r14 = interfaceinvoke r48.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r41 = (org.apache.ambari.server.state.HostConfig) $r14
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r41 = (org.apache.ambari.server.state.HostConfig) $r14 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r41 != null
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r41 != null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r52 = new org.apache.ambari.server.state.HostConfig
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r41 != null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r43 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r43 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r44 = (org.apache.ambari.server.state.Config) $r43
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r44 = (org.apache.ambari.server.state.Config) $r43 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r45 = virtualinvoke r41.<org.apache.ambari.server.state.HostConfig: java.util.Map getConfigGroupOverrides()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r45 = virtualinvoke r41.<org.apache.ambari.server.state.HostConfig: java.util.Map getConfigGroupOverrides()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r46 = interfaceinvoke r40.<org.apache.ambari.server.state.configgroup.ConfigGroup: java.lang.Long getId()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r46 = interfaceinvoke r40.<org.apache.ambari.server.state.configgroup.ConfigGroup: java.lang.Long getId()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r47 = interfaceinvoke r44.<org.apache.ambari.server.state.Config: java.lang.String getTag()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r47 = interfaceinvoke r44.<org.apache.ambari.server.state.Config: java.lang.String getTag()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : interfaceinvoke $r45.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r46, $r47)
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : interfaceinvoke $r45.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r46, $r47) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : goto [?= $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : goto [?= $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r52 = new org.apache.ambari.server.state.HostConfig >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : specialinvoke r52.<org.apache.ambari.server.state.HostConfig: void <init>()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : specialinvoke r52.<org.apache.ambari.server.state.HostConfig: void <init>()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r41 = r52
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r41 = r52 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : interfaceinvoke r48.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r52)
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : interfaceinvoke r48.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r52) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r1 == null
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r1 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r42 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getDesiredConfigByType(java.lang.String)>(r5)
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r1 == null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r43 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r42 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Config getDesiredConfigByType(java.lang.String)>(r5) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r42 != null
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r42 != null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r20 = <org.apache.ambari.server.state.host.HostImpl: org.slf4j.Logger LOG>
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r42 != null >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r18 = interfaceinvoke r42.<org.apache.ambari.server.state.Config: java.lang.String getTag()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r18 = interfaceinvoke r42.<org.apache.ambari.server.state.Config: java.lang.String getTag()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : virtualinvoke r52.<org.apache.ambari.server.state.HostConfig: void setDefaultVersionTag(java.lang.String)>($r18)
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : virtualinvoke r52.<org.apache.ambari.server.state.HostConfig: void setDefaultVersionTag(java.lang.String)>($r18) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r43 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r20 = <org.apache.ambari.server.state.host.HostImpl: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r53 = new java.lang.StringBuilder
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r53 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : specialinvoke r53.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : specialinvoke r53.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r21 = virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Config inconsistency exists: unknown configType=")
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r21 = virtualinvoke r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Config inconsistency exists: unknown configType=") >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : interfaceinvoke $r20.<org.slf4j.Logger: void error(java.lang.String)>($r23)
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : interfaceinvoke $r20.<org.slf4j.Logger: void error(java.lang.String)>($r23) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : goto [?= $r43 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>()]
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : goto [?= $r43 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>()] >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r43 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r51 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r37 = r51
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r37 = r51 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : specialinvoke r51.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : specialinvoke r51.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : goto [?= (branch)]
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $r37 == null
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r24 = interfaceinvoke r33.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r34 = interfaceinvoke $r24.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r34 = interfaceinvoke $r24.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $z3 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $z3 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $z3 == 0
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $z3 == 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r25 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if $z3 == 0 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r1 != null
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r25 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r35 = (java.util.Map$Entry) $r25
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r35 = (java.util.Map$Entry) $r25 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r50 = new org.apache.ambari.server.state.HostConfig
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r50 = new org.apache.ambari.server.state.HostConfig >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : specialinvoke r50.<org.apache.ambari.server.state.HostConfig: void <init>()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : specialinvoke r50.<org.apache.ambari.server.state.HostConfig: void <init>()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r27 = interfaceinvoke r35.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r27 = interfaceinvoke r35.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r28 = (org.apache.ambari.server.state.DesiredConfig) $r27
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r28 = (org.apache.ambari.server.state.DesiredConfig) $r27 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r29 = virtualinvoke $r28.<org.apache.ambari.server.state.DesiredConfig: java.lang.String getTag()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r29 = virtualinvoke $r28.<org.apache.ambari.server.state.DesiredConfig: java.lang.String getTag()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : virtualinvoke r50.<org.apache.ambari.server.state.HostConfig: void setDefaultVersionTag(java.lang.String)>($r29)
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : virtualinvoke r50.<org.apache.ambari.server.state.HostConfig: void setDefaultVersionTag(java.lang.String)>($r29) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r30 = interfaceinvoke r35.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $r30 = interfaceinvoke r35.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : interfaceinvoke r48.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, r50)
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : interfaceinvoke r48.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, r50) >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : goto [?= $z3 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : goto [?= $z3 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : $z3 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r33 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: java.util.Map getDesiredConfigs()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if r33 == null
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r49 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : specialinvoke r49.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : specialinvoke r49.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r33 = r49
org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : r33 = r49 >>>>>>>> org.apache.ambari.server.state.host.HostImpl.getDesiredHostConfigs : if null != r33
