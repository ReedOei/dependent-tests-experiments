org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r7 = virtualinvoke r1.<org.apache.ambari.server.events.HostsRemovedEvent: java.util.Set getHostNames()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z0 = interfaceinvoke $r7.<java.util.Set: boolean isEmpty()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z0 = interfaceinvoke $r7.<java.util.Set: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z0 == 0
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z0 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r23 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG>
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z0 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r8 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG>
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r8 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r9 = virtualinvoke r1.<org.apache.ambari.server.events.HostsRemovedEvent: java.util.Set getHostNames()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r9 = virtualinvoke r1.<org.apache.ambari.server.events.HostsRemovedEvent: java.util.Set getHostNames()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Removing hosts [{}] from available hosts on hosts removed event.", $r9)
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r8.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Removing hosts [{}] from available hosts on hosts removed event.", $r9) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r10 = new java.util.HashSet
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r10 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : specialinvoke $r10.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : specialinvoke $r10.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r11 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.List availableHosts>
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r11 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.List availableHosts> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : entermonitor $r11
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : entermonitor $r11 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r12 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.List availableHosts>
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : entermonitor $r11 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : exitmonitor $r11 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : throw $r24
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : exitmonitor $r11 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r12 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.List availableHosts> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r25 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r12 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.List availableHosts> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r25 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z1 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r25 = interfaceinvoke $r12.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z1 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z1 == 0
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z1 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z1 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r19 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z1 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z2 = interfaceinvoke $r10.<java.util.Set: boolean isEmpty()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z1 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z2 = interfaceinvoke $r10.<java.util.Set: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z2 != 0
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z2 = interfaceinvoke $r10.<java.util.Set: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z2 != 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r27 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z2 != 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r13 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG>
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z2 != 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r13 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r14 = virtualinvoke r1.<org.apache.ambari.server.events.HostsRemovedEvent: java.util.Set getHostNames()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r13 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r14 = virtualinvoke r1.<org.apache.ambari.server.events.HostsRemovedEvent: java.util.Set getHostNames()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r13.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("No any host [{}] found in available hosts", $r14)
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r14 = virtualinvoke r1.<org.apache.ambari.server.events.HostsRemovedEvent: java.util.Set getHostNames()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r13.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("No any host [{}] found in available hosts", $r14) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : exitmonitor $r11
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r13.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("No any host [{}] found in available hosts", $r14) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : exitmonitor $r11 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= return]
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : exitmonitor $r11 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= return] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : return
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r27 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z3 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r27 = interfaceinvoke $r10.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z3 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z3 == 0
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z3 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z3 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r15 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z3 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= exitmonitor $r11]
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z3 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= exitmonitor $r11] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : exitmonitor $r11
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= exitmonitor $r11] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r15 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r28 = (org.apache.ambari.server.state.host.HostImpl) $r15
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r15 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r28 = (org.apache.ambari.server.state.host.HostImpl) $r15 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r16 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.List availableHosts>
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r28 = (org.apache.ambari.server.state.host.HostImpl) $r15 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r16 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.List availableHosts> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r16.<java.util.List: boolean remove(java.lang.Object)>(r28)
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r16 = r0.<org.apache.ambari.server.topology.TopologyManager: java.util.List availableHosts> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r16.<java.util.List: boolean remove(java.lang.Object)>(r28) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r17 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG>
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r16.<java.util.List: boolean remove(java.lang.Object)>(r28) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r17 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r18 = virtualinvoke r28.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r17 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r18 = virtualinvoke r28.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r17.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Removed host: [{}] from available hosts", $r18)
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r18 = virtualinvoke r28.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r17.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Removed host: [{}] from available hosts", $r18) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= $z3 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r17.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Removed host: [{}] from available hosts", $r18) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= $z3 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z3 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= $z3 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r19 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r26 = (org.apache.ambari.server.state.host.HostImpl) $r19
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r19 = interfaceinvoke r25.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r26 = (org.apache.ambari.server.state.host.HostImpl) $r19 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r20 = virtualinvoke r1.<org.apache.ambari.server.events.HostsRemovedEvent: java.util.Set getHostNames()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r26 = (org.apache.ambari.server.state.host.HostImpl) $r19 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r20 = virtualinvoke r1.<org.apache.ambari.server.events.HostsRemovedEvent: java.util.Set getHostNames()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r4 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r20 = virtualinvoke r1.<org.apache.ambari.server.events.HostsRemovedEvent: java.util.Set getHostNames()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r4 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z5 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r4 = interfaceinvoke $r20.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z5 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z5 == 0
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z5 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z5 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r21 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z5 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= $z1 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z5 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= $z1 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z1 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= $z1 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r21 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r5 = (java.lang.String) $r21
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r21 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r5 = (java.lang.String) $r21 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r22 = virtualinvoke r26.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : r5 = (java.lang.String) $r21 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r22 = virtualinvoke r26.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z6 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>($r22)
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r22 = virtualinvoke r26.<org.apache.ambari.server.state.host.HostImpl: java.lang.String getHostName()>() >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z6 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>($r22) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z6 == 0
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z6 = virtualinvoke r5.<java.lang.String: boolean equals(java.lang.Object)>($r22) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z6 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>(r26)
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z6 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= $z5 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : if $z6 == 0 >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= $z5 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $z5 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= $z5 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>(r26) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= (branch)]
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>(r26) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= $z1 = interfaceinvoke r25.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r24 := @caughtexception
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : $r23 = <org.apache.ambari.server.topology.TopologyManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r23.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Missing host name from host removed event [{}] !", r1)
org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : interfaceinvoke $r23.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object)>("Missing host name from host removed event [{}] !", r1) >>>>>>>> org.apache.ambari.server.topology.TopologyManager.processHostRemovedEvent : return
