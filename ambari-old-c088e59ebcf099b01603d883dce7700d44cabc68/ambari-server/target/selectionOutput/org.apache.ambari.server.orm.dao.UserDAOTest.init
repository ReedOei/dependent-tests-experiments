org.apache.ambari.server.orm.dao.UserDAOTest.init : $r7 = staticinvoke <org.easymock.EasyMock: java.lang.Object createStrictMock(java.lang.Class)>(class "Ljavax/persistence/EntityManager;") >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : r2 = (javax.persistence.EntityManager) $r7
org.apache.ambari.server.orm.dao.UserDAOTest.init : r2 = (javax.persistence.EntityManager) $r7 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r8 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/dao/DaoUtils;")
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r8 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/dao/DaoUtils;") >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : r3 = (org.apache.ambari.server.orm.dao.DaoUtils) $r8
org.apache.ambari.server.orm.dao.UserDAOTest.init : r3 = (org.apache.ambari.server.orm.dao.DaoUtils) $r8 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r9 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/DBAccessor;")
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r9 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/DBAccessor;") >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : r4 = (org.apache.ambari.server.orm.DBAccessor) $r9
org.apache.ambari.server.orm.dao.UserDAOTest.init : r4 = (org.apache.ambari.server.orm.DBAccessor) $r9 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r10 = newarray (com.google.inject.Module)[1]
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r10 = newarray (com.google.inject.Module)[1] >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r11 = new org.apache.ambari.server.orm.dao.UserDAOTest$1
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r11 = new org.apache.ambari.server.orm.dao.UserDAOTest$1 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : specialinvoke $r11.<org.apache.ambari.server.orm.dao.UserDAOTest$1: void <init>(org.apache.ambari.server.orm.dao.UserDAOTest,javax.persistence.EntityManager,org.apache.ambari.server.orm.DBAccessor,org.apache.ambari.server.orm.dao.DaoUtils)>(r0, r2, r4, r3)
org.apache.ambari.server.orm.dao.UserDAOTest.init : specialinvoke $r11.<org.apache.ambari.server.orm.dao.UserDAOTest$1: void <init>(org.apache.ambari.server.orm.dao.UserDAOTest,javax.persistence.EntityManager,org.apache.ambari.server.orm.DBAccessor,org.apache.ambari.server.orm.dao.DaoUtils)>(r0, r2, r4, r3) >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r10[0] = $r11
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r10[0] = $r11 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : r5 = staticinvoke <com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Module[])>($r10)
org.apache.ambari.server.orm.dao.UserDAOTest.init : r5 = staticinvoke <com.google.inject.Guice: com.google.inject.Injector createInjector(com.google.inject.Module[])>($r10) >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r12 = interfaceinvoke r5.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/dao/UserDAO;")
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r12 = interfaceinvoke r5.<com.google.inject.Injector: java.lang.Object getInstance(java.lang.Class)>(class "Lorg/apache/ambari/server/orm/dao/UserDAO;") >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r13 = (org.apache.ambari.server.orm.dao.UserDAO) $r12
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r13 = (org.apache.ambari.server.orm.dao.UserDAO) $r12 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : r0.<org.apache.ambari.server.orm.dao.UserDAOTest: org.apache.ambari.server.orm.dao.UserDAO userDAO> = $r13
org.apache.ambari.server.orm.dao.UserDAOTest.init : r0.<org.apache.ambari.server.orm.dao.UserDAOTest: org.apache.ambari.server.orm.dao.UserDAO userDAO> = $r13 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r14 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Ljavax/persistence/TypedQuery;")
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r14 = staticinvoke <org.easymock.EasyMock: java.lang.Object createNiceMock(java.lang.Class)>(class "Ljavax/persistence/TypedQuery;") >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : r6 = (javax.persistence.TypedQuery) $r14
org.apache.ambari.server.orm.dao.UserDAOTest.init : r6 = (javax.persistence.TypedQuery) $r14 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r15 = interfaceinvoke r6.<javax.persistence.TypedQuery: java.util.List getResultList()>()
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r15 = interfaceinvoke r6.<javax.persistence.TypedQuery: java.util.List getResultList()>() >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r16 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r15)
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r16 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r15) >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r17 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1)
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r17 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r1) >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : interfaceinvoke $r16.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r17)
org.apache.ambari.server.orm.dao.UserDAOTest.init : interfaceinvoke $r16.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>($r17) >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r19 = staticinvoke <org.easymock.EasyMock: java.lang.String anyString()>()
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r19 = staticinvoke <org.easymock.EasyMock: java.lang.String anyString()>() >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r20 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/Class;")
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r20 = staticinvoke <org.easymock.EasyMock: java.lang.Object anyObject(java.lang.Class)>(class "Ljava/lang/Class;") >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r21 = (java.lang.Class) $r20
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r21 = (java.lang.Class) $r20 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r22 = interfaceinvoke r2.<javax.persistence.EntityManager: javax.persistence.TypedQuery createNamedQuery(java.lang.String,java.lang.Class)>($r19, $r21)
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r22 = interfaceinvoke r2.<javax.persistence.EntityManager: javax.persistence.TypedQuery createNamedQuery(java.lang.String,java.lang.Class)>($r19, $r21) >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r23 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r22)
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r23 = staticinvoke <org.easymock.EasyMock: org.easymock.IExpectationSetters expect(java.lang.Object)>($r22) >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : interfaceinvoke $r23.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r6)
org.apache.ambari.server.orm.dao.UserDAOTest.init : interfaceinvoke $r23.<org.easymock.IExpectationSetters: org.easymock.IExpectationSetters andReturn(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r25 = newarray (java.lang.Object)[4]
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r25 = newarray (java.lang.Object)[4] >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r25[0] = r2
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r25[0] = r2 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r25[1] = r3
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r25[1] = r3 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r25[2] = r4
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r25[2] = r4 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : $r25[3] = r6
org.apache.ambari.server.orm.dao.UserDAOTest.init : $r25[3] = r6 >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r25)
org.apache.ambari.server.orm.dao.UserDAOTest.init : staticinvoke <org.easymock.EasyMock: void replay(java.lang.Object[])>($r25) >>>>>>>> org.apache.ambari.server.orm.dao.UserDAOTest.init : return
